/*
 ************************************************************ !*\
  !*** ../src/typescript-es6/antlr4es6/atn/AmbiguityInfo.js ***!
  \*********************************************************** exports provided: AmbiguityInfo  ********************************************************************* !*\
  !*** ../src/typescript-es6/antlr4es6/atn/ContextSensitivityInfo.js ***!
  \******************************************************************** exports provided: ContextSensitivityInfo  **************************************************************** !*\
  !*** ../src/typescript-es6/antlr4es6/atn/DecisionEventInfo.js ***!
  \*************************************************************** exports provided: DecisionEventInfo  *********************************************************** !*\
  !*** ../src/typescript-es6/antlr4es6/atn/DecisionInfo.js ***!
  \********************************************************** exports provided: DecisionInfo  ******************************************************** !*\
  !*** ../src/typescript-es6/antlr4es6/atn/ErrorInfo.js ***!
  \******************************************************* exports provided: ErrorInfo  ***************************************************************** !*\
  !*** ../src/typescript-es6/antlr4es6/atn/LookaheadEventInfo.js ***!
  \**************************************************************** exports provided: LookaheadEventInfo  **************************************************************** !*\
  !*** ../src/typescript-es6/antlr4es6/atn/PredicateEvalInfo.js ***!
  \*************************************************************** exports provided: PredicateEvalInfo  ******************************************************************** !*\
  !*** ../src/typescript-es6/antlr4es6/atn/ProfilingATNSimulator.js ***!
  \******************************************************************* exports provided: ProfilingATNSimulator */
'use strict';(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[0],{"../src/typescript-es6/antlr4es6/atn/AmbiguityInfo.js":function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AmbiguityInfo", function() { return AmbiguityInfo; });\n/* harmony import */ var _DecisionEventInfo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DecisionEventInfo */ "../src/typescript-es6/antlr4es6/atn/DecisionEventInfo.js");\n/* harmony import */ var _Decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Decorators */ "../src/typescript-es6/antlr4es6/Decorators.js");\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (undefined && undefined.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n\n\n/**\n * This class represents profiling event information for an ambiguity.\n * Ambiguities are decisions where a particular input resulted in an SLL\n * conflict, followed by LL prediction also reaching a conflict state\n * (indicating a true ambiguity in the grammar).\n *\n * This event may be reported during SLL prediction in cases where the\n * conflicting SLL configuration set provides sufficient information to\n * determine that the SLL conflict is truly an ambiguity. For example, if none\n * of the ATN configurations in the conflicting SLL configuration set have\n * traversed a global follow transition (i.e.\n * {@link ATNConfig#getReachesIntoOuterContext} is `false` for all\n * configurations), then the result of SLL prediction for that input is known to\n * be equivalent to the result of LL prediction for that input.\n *\n * In some cases, the minimum represented alternative in the conflicting LL\n * configuration set is not equal to the minimum represented alternative in the\n * conflicting SLL configuration set. Grammars and inputs which result in this\n * scenario are unable to use {@link PredictionMode#SLL}, which in turn means\n * they cannot use the two-stage parsing strategy to improve parsing performance\n * for that input.\n *\n * @see ParserATNSimulator#reportAmbiguity\n * @see ParserErrorListener#reportAmbiguity\n *\n * @since 4.3\n */\nlet AmbiguityInfo = class AmbiguityInfo extends _DecisionEventInfo__WEBPACK_IMPORTED_MODULE_0__["DecisionEventInfo"] {\n    /**\n     * Constructs a new instance of the {@link AmbiguityInfo} class with the\n     * specified detailed ambiguity information.\n     *\n     * @param decision The decision number\n     * @param state The final simulator state identifying the ambiguous\n     * alternatives for the current input\n     * @param ambigAlts The set of alternatives in the decision that lead to a valid parse.\n     *                  The predicted alt is the min(ambigAlts)\n     * @param input The input token stream\n     * @param startIndex The start index for the current prediction\n     * @param stopIndex The index at which the ambiguity was identified during\n     * prediction\n     */\n    constructor(decision, state, ambigAlts, input, startIndex, stopIndex) {\n        super(decision, state, input, startIndex, stopIndex, state.useContext);\n        this.ambigAlts = ambigAlts;\n    }\n    /**\n     * Gets the set of alternatives in the decision that lead to a valid parse.\n     *\n     * @since 4.5\n     */\n    get ambiguousAlternatives() {\n        return this.ambigAlts;\n    }\n};\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"]\n], AmbiguityInfo.prototype, "ambigAlts", void 0);\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"]\n], AmbiguityInfo.prototype, "ambiguousAlternatives", null);\nAmbiguityInfo = __decorate([\n    __param(1, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"]),\n    __param(2, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"]),\n    __param(3, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"])\n], AmbiguityInfo);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL3R5cGVzY3JpcHQtZXM2L2FudGxyNGVzNi9hdG4vQW1iaWd1aXR5SW5mby5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvdHlwZXNjcmlwdC1lczYvYW50bHI0ZXM2L2F0bi9BbWJpZ3VpdHlJbmZvLmpzPzFmOWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QtMy1DbGF1c2UgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufTtcbmltcG9ydCB7IERlY2lzaW9uRXZlbnRJbmZvIH0gZnJvbSBcIi4vRGVjaXNpb25FdmVudEluZm9cIjtcbmltcG9ydCB7IE5vdE51bGwgfSBmcm9tIFwiLi4vRGVjb3JhdG9yc1wiO1xuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgcHJvZmlsaW5nIGV2ZW50IGluZm9ybWF0aW9uIGZvciBhbiBhbWJpZ3VpdHkuXG4gKiBBbWJpZ3VpdGllcyBhcmUgZGVjaXNpb25zIHdoZXJlIGEgcGFydGljdWxhciBpbnB1dCByZXN1bHRlZCBpbiBhbiBTTExcbiAqIGNvbmZsaWN0LCBmb2xsb3dlZCBieSBMTCBwcmVkaWN0aW9uIGFsc28gcmVhY2hpbmcgYSBjb25mbGljdCBzdGF0ZVxuICogKGluZGljYXRpbmcgYSB0cnVlIGFtYmlndWl0eSBpbiB0aGUgZ3JhbW1hcikuXG4gKlxuICogVGhpcyBldmVudCBtYXkgYmUgcmVwb3J0ZWQgZHVyaW5nIFNMTCBwcmVkaWN0aW9uIGluIGNhc2VzIHdoZXJlIHRoZVxuICogY29uZmxpY3RpbmcgU0xMIGNvbmZpZ3VyYXRpb24gc2V0IHByb3ZpZGVzIHN1ZmZpY2llbnQgaW5mb3JtYXRpb24gdG9cbiAqIGRldGVybWluZSB0aGF0IHRoZSBTTEwgY29uZmxpY3QgaXMgdHJ1bHkgYW4gYW1iaWd1aXR5LiBGb3IgZXhhbXBsZSwgaWYgbm9uZVxuICogb2YgdGhlIEFUTiBjb25maWd1cmF0aW9ucyBpbiB0aGUgY29uZmxpY3RpbmcgU0xMIGNvbmZpZ3VyYXRpb24gc2V0IGhhdmVcbiAqIHRyYXZlcnNlZCBhIGdsb2JhbCBmb2xsb3cgdHJhbnNpdGlvbiAoaS5lLlxuICoge0BsaW5rIEFUTkNvbmZpZyNnZXRSZWFjaGVzSW50b091dGVyQ29udGV4dH0gaXMgYGZhbHNlYCBmb3IgYWxsXG4gKiBjb25maWd1cmF0aW9ucyksIHRoZW4gdGhlIHJlc3VsdCBvZiBTTEwgcHJlZGljdGlvbiBmb3IgdGhhdCBpbnB1dCBpcyBrbm93biB0b1xuICogYmUgZXF1aXZhbGVudCB0byB0aGUgcmVzdWx0IG9mIExMIHByZWRpY3Rpb24gZm9yIHRoYXQgaW5wdXQuXG4gKlxuICogSW4gc29tZSBjYXNlcywgdGhlIG1pbmltdW0gcmVwcmVzZW50ZWQgYWx0ZXJuYXRpdmUgaW4gdGhlIGNvbmZsaWN0aW5nIExMXG4gKiBjb25maWd1cmF0aW9uIHNldCBpcyBub3QgZXF1YWwgdG8gdGhlIG1pbmltdW0gcmVwcmVzZW50ZWQgYWx0ZXJuYXRpdmUgaW4gdGhlXG4gKiBjb25mbGljdGluZyBTTEwgY29uZmlndXJhdGlvbiBzZXQuIEdyYW1tYXJzIGFuZCBpbnB1dHMgd2hpY2ggcmVzdWx0IGluIHRoaXNcbiAqIHNjZW5hcmlvIGFyZSB1bmFibGUgdG8gdXNlIHtAbGluayBQcmVkaWN0aW9uTW9kZSNTTEx9LCB3aGljaCBpbiB0dXJuIG1lYW5zXG4gKiB0aGV5IGNhbm5vdCB1c2UgdGhlIHR3by1zdGFnZSBwYXJzaW5nIHN0cmF0ZWd5IHRvIGltcHJvdmUgcGFyc2luZyBwZXJmb3JtYW5jZVxuICogZm9yIHRoYXQgaW5wdXQuXG4gKlxuICogQHNlZSBQYXJzZXJBVE5TaW11bGF0b3IjcmVwb3J0QW1iaWd1aXR5XG4gKiBAc2VlIFBhcnNlckVycm9yTGlzdGVuZXIjcmVwb3J0QW1iaWd1aXR5XG4gKlxuICogQHNpbmNlIDQuM1xuICovXG5sZXQgQW1iaWd1aXR5SW5mbyA9IGNsYXNzIEFtYmlndWl0eUluZm8gZXh0ZW5kcyBEZWNpc2lvbkV2ZW50SW5mbyB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIEFtYmlndWl0eUluZm99IGNsYXNzIHdpdGggdGhlXG4gICAgICogc3BlY2lmaWVkIGRldGFpbGVkIGFtYmlndWl0eSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWNpc2lvbiBUaGUgZGVjaXNpb24gbnVtYmVyXG4gICAgICogQHBhcmFtIHN0YXRlIFRoZSBmaW5hbCBzaW11bGF0b3Igc3RhdGUgaWRlbnRpZnlpbmcgdGhlIGFtYmlndW91c1xuICAgICAqIGFsdGVybmF0aXZlcyBmb3IgdGhlIGN1cnJlbnQgaW5wdXRcbiAgICAgKiBAcGFyYW0gYW1iaWdBbHRzIFRoZSBzZXQgb2YgYWx0ZXJuYXRpdmVzIGluIHRoZSBkZWNpc2lvbiB0aGF0IGxlYWQgdG8gYSB2YWxpZCBwYXJzZS5cbiAgICAgKiAgICAgICAgICAgICAgICAgIFRoZSBwcmVkaWN0ZWQgYWx0IGlzIHRoZSBtaW4oYW1iaWdBbHRzKVxuICAgICAqIEBwYXJhbSBpbnB1dCBUaGUgaW5wdXQgdG9rZW4gc3RyZWFtXG4gICAgICogQHBhcmFtIHN0YXJ0SW5kZXggVGhlIHN0YXJ0IGluZGV4IGZvciB0aGUgY3VycmVudCBwcmVkaWN0aW9uXG4gICAgICogQHBhcmFtIHN0b3BJbmRleCBUaGUgaW5kZXggYXQgd2hpY2ggdGhlIGFtYmlndWl0eSB3YXMgaWRlbnRpZmllZCBkdXJpbmdcbiAgICAgKiBwcmVkaWN0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGVjaXNpb24sIHN0YXRlLCBhbWJpZ0FsdHMsIGlucHV0LCBzdGFydEluZGV4LCBzdG9wSW5kZXgpIHtcbiAgICAgICAgc3VwZXIoZGVjaXNpb24sIHN0YXRlLCBpbnB1dCwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBzdGF0ZS51c2VDb250ZXh0KTtcbiAgICAgICAgdGhpcy5hbWJpZ0FsdHMgPSBhbWJpZ0FsdHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNldCBvZiBhbHRlcm5hdGl2ZXMgaW4gdGhlIGRlY2lzaW9uIHRoYXQgbGVhZCB0byBhIHZhbGlkIHBhcnNlLlxuICAgICAqXG4gICAgICogQHNpbmNlIDQuNVxuICAgICAqL1xuICAgIGdldCBhbWJpZ3VvdXNBbHRlcm5hdGl2ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFtYmlnQWx0cztcbiAgICB9XG59O1xuX19kZWNvcmF0ZShbXG4gICAgTm90TnVsbFxuXSwgQW1iaWd1aXR5SW5mby5wcm90b3R5cGUsIFwiYW1iaWdBbHRzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBOb3ROdWxsXG5dLCBBbWJpZ3VpdHlJbmZvLnByb3RvdHlwZSwgXCJhbWJpZ3VvdXNBbHRlcm5hdGl2ZXNcIiwgbnVsbCk7XG5BbWJpZ3VpdHlJbmZvID0gX19kZWNvcmF0ZShbXG4gICAgX19wYXJhbSgxLCBOb3ROdWxsKSxcbiAgICBfX3BhcmFtKDIsIE5vdE51bGwpLFxuICAgIF9fcGFyYW0oMywgTm90TnVsbClcbl0sIEFtYmlndWl0eUluZm8pO1xuZXhwb3J0IHsgQW1iaWd1aXR5SW5mbyB9O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/typescript-es6/antlr4es6/atn/AmbiguityInfo.js\n')},
"../src/typescript-es6/antlr4es6/atn/ContextSensitivityInfo.js":function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContextSensitivityInfo", function() { return ContextSensitivityInfo; });\n/* harmony import */ var _DecisionEventInfo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DecisionEventInfo */ "../src/typescript-es6/antlr4es6/atn/DecisionEventInfo.js");\n/* harmony import */ var _Decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Decorators */ "../src/typescript-es6/antlr4es6/Decorators.js");\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (undefined && undefined.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n// ConvertTo-TS run at 2016-10-04T11:26:28.1575933-07:00\n\n\n/**\n * This class represents profiling event information for a context sensitivity.\n * Context sensitivities are decisions where a particular input resulted in an\n * SLL conflict, but LL prediction produced a single unique alternative.\n *\n * In some cases, the unique alternative identified by LL prediction is not\n * equal to the minimum represented alternative in the conflicting SLL\n * configuration set. Grammars and inputs which result in this scenario are\n * unable to use {@link PredictionMode#SLL}, which in turn means they cannot use\n * the two-stage parsing strategy to improve parsing performance for that\n * input.\n *\n * @see ParserATNSimulator#reportContextSensitivity\n * @see ParserErrorListener#reportContextSensitivity\n *\n * @since 4.3\n */\nlet ContextSensitivityInfo = class ContextSensitivityInfo extends _DecisionEventInfo__WEBPACK_IMPORTED_MODULE_0__["DecisionEventInfo"] {\n    /**\n     * Constructs a new instance of the {@link ContextSensitivityInfo} class\n     * with the specified detailed context sensitivity information.\n     *\n     * @param decision The decision number\n     * @param state The final simulator state containing the unique\n     * alternative identified by full-context prediction\n     * @param input The input token stream\n     * @param startIndex The start index for the current prediction\n     * @param stopIndex The index at which the context sensitivity was\n     * identified during full-context prediction\n     */\n    constructor(decision, state, input, startIndex, stopIndex) {\n        super(decision, state, input, startIndex, stopIndex, true);\n    }\n};\nContextSensitivityInfo = __decorate([\n    __param(1, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"]),\n    __param(2, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"])\n], ContextSensitivityInfo);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL3R5cGVzY3JpcHQtZXM2L2FudGxyNGVzNi9hdG4vQ29udGV4dFNlbnNpdGl2aXR5SW5mby5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvdHlwZXNjcmlwdC1lczYvYW50bHI0ZXM2L2F0bi9Db250ZXh0U2Vuc2l0aXZpdHlJbmZvLmpzPzI4NWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QtMy1DbGF1c2UgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufTtcbi8vIENvbnZlcnRUby1UUyBydW4gYXQgMjAxNi0xMC0wNFQxMToyNjoyOC4xNTc1OTMzLTA3OjAwXG5pbXBvcnQgeyBEZWNpc2lvbkV2ZW50SW5mbyB9IGZyb20gXCIuL0RlY2lzaW9uRXZlbnRJbmZvXCI7XG5pbXBvcnQgeyBOb3ROdWxsIH0gZnJvbSBcIi4uL0RlY29yYXRvcnNcIjtcbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIHByb2ZpbGluZyBldmVudCBpbmZvcm1hdGlvbiBmb3IgYSBjb250ZXh0IHNlbnNpdGl2aXR5LlxuICogQ29udGV4dCBzZW5zaXRpdml0aWVzIGFyZSBkZWNpc2lvbnMgd2hlcmUgYSBwYXJ0aWN1bGFyIGlucHV0IHJlc3VsdGVkIGluIGFuXG4gKiBTTEwgY29uZmxpY3QsIGJ1dCBMTCBwcmVkaWN0aW9uIHByb2R1Y2VkIGEgc2luZ2xlIHVuaXF1ZSBhbHRlcm5hdGl2ZS5cbiAqXG4gKiBJbiBzb21lIGNhc2VzLCB0aGUgdW5pcXVlIGFsdGVybmF0aXZlIGlkZW50aWZpZWQgYnkgTEwgcHJlZGljdGlvbiBpcyBub3RcbiAqIGVxdWFsIHRvIHRoZSBtaW5pbXVtIHJlcHJlc2VudGVkIGFsdGVybmF0aXZlIGluIHRoZSBjb25mbGljdGluZyBTTExcbiAqIGNvbmZpZ3VyYXRpb24gc2V0LiBHcmFtbWFycyBhbmQgaW5wdXRzIHdoaWNoIHJlc3VsdCBpbiB0aGlzIHNjZW5hcmlvIGFyZVxuICogdW5hYmxlIHRvIHVzZSB7QGxpbmsgUHJlZGljdGlvbk1vZGUjU0xMfSwgd2hpY2ggaW4gdHVybiBtZWFucyB0aGV5IGNhbm5vdCB1c2VcbiAqIHRoZSB0d28tc3RhZ2UgcGFyc2luZyBzdHJhdGVneSB0byBpbXByb3ZlIHBhcnNpbmcgcGVyZm9ybWFuY2UgZm9yIHRoYXRcbiAqIGlucHV0LlxuICpcbiAqIEBzZWUgUGFyc2VyQVROU2ltdWxhdG9yI3JlcG9ydENvbnRleHRTZW5zaXRpdml0eVxuICogQHNlZSBQYXJzZXJFcnJvckxpc3RlbmVyI3JlcG9ydENvbnRleHRTZW5zaXRpdml0eVxuICpcbiAqIEBzaW5jZSA0LjNcbiAqL1xubGV0IENvbnRleHRTZW5zaXRpdml0eUluZm8gPSBjbGFzcyBDb250ZXh0U2Vuc2l0aXZpdHlJbmZvIGV4dGVuZHMgRGVjaXNpb25FdmVudEluZm8ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHtAbGluayBDb250ZXh0U2Vuc2l0aXZpdHlJbmZvfSBjbGFzc1xuICAgICAqIHdpdGggdGhlIHNwZWNpZmllZCBkZXRhaWxlZCBjb250ZXh0IHNlbnNpdGl2aXR5IGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlY2lzaW9uIFRoZSBkZWNpc2lvbiBudW1iZXJcbiAgICAgKiBAcGFyYW0gc3RhdGUgVGhlIGZpbmFsIHNpbXVsYXRvciBzdGF0ZSBjb250YWluaW5nIHRoZSB1bmlxdWVcbiAgICAgKiBhbHRlcm5hdGl2ZSBpZGVudGlmaWVkIGJ5IGZ1bGwtY29udGV4dCBwcmVkaWN0aW9uXG4gICAgICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCB0b2tlbiBzdHJlYW1cbiAgICAgKiBAcGFyYW0gc3RhcnRJbmRleCBUaGUgc3RhcnQgaW5kZXggZm9yIHRoZSBjdXJyZW50IHByZWRpY3Rpb25cbiAgICAgKiBAcGFyYW0gc3RvcEluZGV4IFRoZSBpbmRleCBhdCB3aGljaCB0aGUgY29udGV4dCBzZW5zaXRpdml0eSB3YXNcbiAgICAgKiBpZGVudGlmaWVkIGR1cmluZyBmdWxsLWNvbnRleHQgcHJlZGljdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRlY2lzaW9uLCBzdGF0ZSwgaW5wdXQsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCkge1xuICAgICAgICBzdXBlcihkZWNpc2lvbiwgc3RhdGUsIGlucHV0LCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIHRydWUpO1xuICAgIH1cbn07XG5Db250ZXh0U2Vuc2l0aXZpdHlJbmZvID0gX19kZWNvcmF0ZShbXG4gICAgX19wYXJhbSgxLCBOb3ROdWxsKSxcbiAgICBfX3BhcmFtKDIsIE5vdE51bGwpXG5dLCBDb250ZXh0U2Vuc2l0aXZpdHlJbmZvKTtcbmV4cG9ydCB7IENvbnRleHRTZW5zaXRpdml0eUluZm8gfTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/typescript-es6/antlr4es6/atn/ContextSensitivityInfo.js\n')},
"../src/typescript-es6/antlr4es6/atn/DecisionEventInfo.js":function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecisionEventInfo", function() { return DecisionEventInfo; });\n/* harmony import */ var _Decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Decorators */ "../src/typescript-es6/antlr4es6/Decorators.js");\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (undefined && undefined.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n// ConvertTo-TS run at 2016-10-04T11:26:28.2401032-07:00\n\n/**\n * This is the base class for gathering detailed information about prediction\n * events which occur during parsing.\n *\n * Note that we could record the parser call stack at the time this event\n * occurred but in the presence of left recursive rules, the stack is kind of\n * meaningless. It\'s better to look at the individual configurations for their\n * individual stacks. Of course that is a {@link PredictionContext} object\n * not a parse tree node and so it does not have information about the extent\n * (start...stop) of the various subtrees. Examining the stack tops of all\n * configurations provide the return states for the rule invocations.\n * From there you can get the enclosing rule.\n *\n * @since 4.3\n */\nlet DecisionEventInfo = class DecisionEventInfo {\n    constructor(decision, state, input, startIndex, stopIndex, fullCtx) {\n        this.decision = decision;\n        this.fullCtx = fullCtx;\n        this.stopIndex = stopIndex;\n        this.input = input;\n        this.startIndex = startIndex;\n        this.state = state;\n    }\n};\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_0__["NotNull"]\n], DecisionEventInfo.prototype, "input", void 0);\nDecisionEventInfo = __decorate([\n    __param(2, _Decorators__WEBPACK_IMPORTED_MODULE_0__["NotNull"])\n], DecisionEventInfo);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL3R5cGVzY3JpcHQtZXM2L2FudGxyNGVzNi9hdG4vRGVjaXNpb25FdmVudEluZm8uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL3R5cGVzY3JpcHQtZXM2L2FudGxyNGVzNi9hdG4vRGVjaXNpb25FdmVudEluZm8uanM/NjA4OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRC0zLUNsYXVzZSBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59O1xuLy8gQ29udmVydFRvLVRTIHJ1biBhdCAyMDE2LTEwLTA0VDExOjI2OjI4LjI0MDEwMzItMDc6MDBcbmltcG9ydCB7IE5vdE51bGwgfSBmcm9tIFwiLi4vRGVjb3JhdG9yc1wiO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBnYXRoZXJpbmcgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgcHJlZGljdGlvblxuICogZXZlbnRzIHdoaWNoIG9jY3VyIGR1cmluZyBwYXJzaW5nLlxuICpcbiAqIE5vdGUgdGhhdCB3ZSBjb3VsZCByZWNvcmQgdGhlIHBhcnNlciBjYWxsIHN0YWNrIGF0IHRoZSB0aW1lIHRoaXMgZXZlbnRcbiAqIG9jY3VycmVkIGJ1dCBpbiB0aGUgcHJlc2VuY2Ugb2YgbGVmdCByZWN1cnNpdmUgcnVsZXMsIHRoZSBzdGFjayBpcyBraW5kIG9mXG4gKiBtZWFuaW5nbGVzcy4gSXQncyBiZXR0ZXIgdG8gbG9vayBhdCB0aGUgaW5kaXZpZHVhbCBjb25maWd1cmF0aW9ucyBmb3IgdGhlaXJcbiAqIGluZGl2aWR1YWwgc3RhY2tzLiBPZiBjb3Vyc2UgdGhhdCBpcyBhIHtAbGluayBQcmVkaWN0aW9uQ29udGV4dH0gb2JqZWN0XG4gKiBub3QgYSBwYXJzZSB0cmVlIG5vZGUgYW5kIHNvIGl0IGRvZXMgbm90IGhhdmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV4dGVudFxuICogKHN0YXJ0Li4uc3RvcCkgb2YgdGhlIHZhcmlvdXMgc3VidHJlZXMuIEV4YW1pbmluZyB0aGUgc3RhY2sgdG9wcyBvZiBhbGxcbiAqIGNvbmZpZ3VyYXRpb25zIHByb3ZpZGUgdGhlIHJldHVybiBzdGF0ZXMgZm9yIHRoZSBydWxlIGludm9jYXRpb25zLlxuICogRnJvbSB0aGVyZSB5b3UgY2FuIGdldCB0aGUgZW5jbG9zaW5nIHJ1bGUuXG4gKlxuICogQHNpbmNlIDQuM1xuICovXG5sZXQgRGVjaXNpb25FdmVudEluZm8gPSBjbGFzcyBEZWNpc2lvbkV2ZW50SW5mbyB7XG4gICAgY29uc3RydWN0b3IoZGVjaXNpb24sIHN0YXRlLCBpbnB1dCwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBmdWxsQ3R4KSB7XG4gICAgICAgIHRoaXMuZGVjaXNpb24gPSBkZWNpc2lvbjtcbiAgICAgICAgdGhpcy5mdWxsQ3R4ID0gZnVsbEN0eDtcbiAgICAgICAgdGhpcy5zdG9wSW5kZXggPSBzdG9wSW5kZXg7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gc3RhcnRJbmRleDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIH1cbn07XG5fX2RlY29yYXRlKFtcbiAgICBOb3ROdWxsXG5dLCBEZWNpc2lvbkV2ZW50SW5mby5wcm90b3R5cGUsIFwiaW5wdXRcIiwgdm9pZCAwKTtcbkRlY2lzaW9uRXZlbnRJbmZvID0gX19kZWNvcmF0ZShbXG4gICAgX19wYXJhbSgyLCBOb3ROdWxsKVxuXSwgRGVjaXNpb25FdmVudEluZm8pO1xuZXhwb3J0IHsgRGVjaXNpb25FdmVudEluZm8gfTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/typescript-es6/antlr4es6/atn/DecisionEventInfo.js\n')},
"../src/typescript-es6/antlr4es6/atn/DecisionInfo.js":function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecisionInfo", function() { return DecisionInfo; });\n/* harmony import */ var _Decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Decorators */ "../src/typescript-es6/antlr4es6/Decorators.js");\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n/**\n * This class contains profiling gathered for a particular decision.\n *\n * Parsing performance in ANTLR 4 is heavily influenced by both static factors\n * (e.g. the form of the rules in the grammar) and dynamic factors (e.g. the\n * choice of input and the state of the DFA cache at the time profiling\n * operations are started). For best results, gather and use aggregate\n * statistics from a large sample of inputs representing the inputs expected in\n * production before using the results to make changes in the grammar.\n *\n * @since 4.3\n */\nclass DecisionInfo {\n    /**\n     * Constructs a new instance of the {@link DecisionInfo} class to contain\n     * statistics for a particular decision.\n     *\n     * @param decision The decision number\n     */\n    constructor(decision) {\n        /**\n         * The total number of times {@link ParserATNSimulator#adaptivePredict} was\n         * invoked for this decision.\n         */\n        this.invocations = 0;\n        /**\n         * The total time spent in {@link ParserATNSimulator#adaptivePredict} for\n         * this decision, in nanoseconds.\n         *\n         * The value of this field contains the sum of differential results obtained\n         * by {@link System#nanoTime()}, and is not adjusted to compensate for JIT\n         * and/or garbage collection overhead. For best accuracy, use a modern JVM\n         * implementation that provides precise results from\n         * {@link System#nanoTime()}, and perform profiling in a separate process\n         * which is warmed up by parsing the input prior to profiling. If desired,\n         * call {@link ATNSimulator#clearDFA} to reset the DFA cache to its initial\n         * state before starting the profiling measurement pass.\n         */\n        this.timeInPrediction = 0;\n        /**\n         * The sum of the lookahead required for SLL prediction for this decision.\n         * Note that SLL prediction is used before LL prediction for performance\n         * reasons even when {@link PredictionMode#LL} or\n         * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION} is used.\n         */\n        this.SLL_TotalLook = 0;\n        /**\n         * Gets the minimum lookahead required for any single SLL prediction to\n         * complete for this decision, by reaching a unique prediction, reaching an\n         * SLL conflict state, or encountering a syntax error.\n         */\n        this.SLL_MinLook = 0;\n        /**\n         * Gets the maximum lookahead required for any single SLL prediction to\n         * complete for this decision, by reaching a unique prediction, reaching an\n         * SLL conflict state, or encountering a syntax error.\n         */\n        this.SLL_MaxLook = 0;\n        /**\n         * The sum of the lookahead required for LL prediction for this decision.\n         * Note that LL prediction is only used when SLL prediction reaches a\n         * conflict state.\n         */\n        this.LL_TotalLook = 0;\n        /**\n         * Gets the minimum lookahead required for any single LL prediction to\n         * complete for this decision. An LL prediction completes when the algorithm\n         * reaches a unique prediction, a conflict state (for\n         * {@link PredictionMode#LL}, an ambiguity state (for\n         * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}, or a syntax error.\n         */\n        this.LL_MinLook = 0;\n        /**\n         * Gets the maximum lookahead required for any single LL prediction to\n         * complete for this decision. An LL prediction completes when the algorithm\n         * reaches a unique prediction, a conflict state (for\n         * {@link PredictionMode#LL}, an ambiguity state (for\n         * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}, or a syntax error.\n         */\n        this.LL_MaxLook = 0;\n        /**\n         * A collection of {@link ContextSensitivityInfo} instances describing the\n         * context sensitivities encountered during LL prediction for this decision.\n         *\n         * @see ContextSensitivityInfo\n         */\n        this.contextSensitivities = [];\n        /**\n         * A collection of {@link ErrorInfo} instances describing the parse errors\n         * identified during calls to {@link ParserATNSimulator#adaptivePredict} for\n         * this decision.\n         *\n         * @see ErrorInfo\n         */\n        this.errors = [];\n        /**\n         * A collection of {@link AmbiguityInfo} instances describing the\n         * ambiguities encountered during LL prediction for this decision.\n         *\n         * @see AmbiguityInfo\n         */\n        this.ambiguities = [];\n        /**\n         * A collection of {@link PredicateEvalInfo} instances describing the\n         * results of evaluating individual predicates during prediction for this\n         * decision.\n         *\n         * @see PredicateEvalInfo\n         */\n        this.predicateEvals = [];\n        /**\n         * The total number of ATN transitions required during SLL prediction for\n         * this decision. An ATN transition is determined by the number of times the\n         * DFA does not contain an edge that is required for prediction, resulting\n         * in on-the-fly computation of that edge.\n         *\n         * If DFA caching of SLL transitions is employed by the implementation, ATN\n         * computation may cache the computed edge for efficient lookup during\n         * future parsing of this decision. Otherwise, the SLL parsing algorithm\n         * will use ATN transitions exclusively.\n         *\n         * @see #SLL_ATNTransitions\n         * @see ParserATNSimulator#computeTargetState\n         * @see LexerATNSimulator#computeTargetState\n         */\n        this.SLL_ATNTransitions = 0;\n        /**\n         * The total number of DFA transitions required during SLL prediction for\n         * this decision.\n         *\n         * If the ATN simulator implementation does not use DFA caching for SLL\n         * transitions, this value will be 0.\n         *\n         * @see ParserATNSimulator#getExistingTargetState\n         * @see LexerATNSimulator#getExistingTargetState\n         */\n        this.SLL_DFATransitions = 0;\n        /**\n         * Gets the total number of times SLL prediction completed in a conflict\n         * state, resulting in fallback to LL prediction.\n         *\n         * Note that this value is not related to whether or not\n         * {@link PredictionMode#SLL} may be used successfully with a particular\n         * grammar. If the ambiguity resolution algorithm applied to the SLL\n         * conflicts for this decision produce the same result as LL prediction for\n         * this decision, {@link PredictionMode#SLL} would produce the same overall\n         * parsing result as {@link PredictionMode#LL}.\n         */\n        this.LL_Fallback = 0;\n        /**\n         * The total number of ATN transitions required during LL prediction for\n         * this decision. An ATN transition is determined by the number of times the\n         * DFA does not contain an edge that is required for prediction, resulting\n         * in on-the-fly computation of that edge.\n         *\n         * If DFA caching of LL transitions is employed by the implementation, ATN\n         * computation may cache the computed edge for efficient lookup during\n         * future parsing of this decision. Otherwise, the LL parsing algorithm will\n         * use ATN transitions exclusively.\n         *\n         * @see #LL_DFATransitions\n         * @see ParserATNSimulator#computeTargetState\n         * @see LexerATNSimulator#computeTargetState\n         */\n        this.LL_ATNTransitions = 0;\n        /**\n         * The total number of DFA transitions required during LL prediction for\n         * this decision.\n         *\n         * If the ATN simulator implementation does not use DFA caching for LL\n         * transitions, this value will be 0.\n         *\n         * @see ParserATNSimulator#getExistingTargetState\n         * @see LexerATNSimulator#getExistingTargetState\n         */\n        this.LL_DFATransitions = 0;\n        this.decision = decision;\n    }\n    toString() {\n        return "{" +\n            "decision=" + this.decision +\n            ", contextSensitivities=" + this.contextSensitivities.length +\n            ", errors=" + this.errors.length +\n            ", ambiguities=" + this.ambiguities.length +\n            ", SLL_lookahead=" + this.SLL_TotalLook +\n            ", SLL_ATNTransitions=" + this.SLL_ATNTransitions +\n            ", SLL_DFATransitions=" + this.SLL_DFATransitions +\n            ", LL_Fallback=" + this.LL_Fallback +\n            ", LL_lookahead=" + this.LL_TotalLook +\n            ", LL_ATNTransitions=" + this.LL_ATNTransitions +\n            "}";\n    }\n}\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_0__["Override"]\n], DecisionInfo.prototype, "toString", null);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/typescript-es6/antlr4es6/atn/DecisionInfo.js\n')},
"../src/typescript-es6/antlr4es6/atn/ErrorInfo.js":function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorInfo", function() { return ErrorInfo; });\n/* harmony import */ var _DecisionEventInfo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DecisionEventInfo */ "../src/typescript-es6/antlr4es6/atn/DecisionEventInfo.js");\n/* harmony import */ var _Decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Decorators */ "../src/typescript-es6/antlr4es6/Decorators.js");\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (undefined && undefined.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n// ConvertTo-TS run at 2016-10-04T11:26:28.7213647-07:00\n\n\n/**\n * This class represents profiling event information for a syntax error\n * identified during prediction. Syntax errors occur when the prediction\n * algorithm is unable to identify an alternative which would lead to a\n * successful parse.\n *\n * @see Parser#notifyErrorListeners(Token, String, RecognitionException)\n * @see ANTLRErrorListener#syntaxError\n *\n * @since 4.3\n */\nlet ErrorInfo = class ErrorInfo extends _DecisionEventInfo__WEBPACK_IMPORTED_MODULE_0__["DecisionEventInfo"] {\n    /**\n     * Constructs a new instance of the {@link ErrorInfo} class with the\n     * specified detailed syntax error information.\n     *\n     * @param decision The decision number\n     * @param state The final simulator state reached during prediction\n     * prior to reaching the {@link ATNSimulator#ERROR} state\n     * @param input The input token stream\n     * @param startIndex The start index for the current prediction\n     * @param stopIndex The index at which the syntax error was identified\n     */\n    constructor(decision, state, input, startIndex, stopIndex) {\n        super(decision, state, input, startIndex, stopIndex, state.useContext);\n    }\n};\nErrorInfo = __decorate([\n    __param(1, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"]),\n    __param(2, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"])\n], ErrorInfo);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL3R5cGVzY3JpcHQtZXM2L2FudGxyNGVzNi9hdG4vRXJyb3JJbmZvLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy90eXBlc2NyaXB0LWVzNi9hbnRscjRlczYvYXRuL0Vycm9ySW5mby5qcz8xMDBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNELTMtQ2xhdXNlIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn07XG4vLyBDb252ZXJ0VG8tVFMgcnVuIGF0IDIwMTYtMTAtMDRUMTE6MjY6MjguNzIxMzY0Ny0wNzowMFxuaW1wb3J0IHsgRGVjaXNpb25FdmVudEluZm8gfSBmcm9tIFwiLi9EZWNpc2lvbkV2ZW50SW5mb1wiO1xuaW1wb3J0IHsgTm90TnVsbCB9IGZyb20gXCIuLi9EZWNvcmF0b3JzXCI7XG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBwcm9maWxpbmcgZXZlbnQgaW5mb3JtYXRpb24gZm9yIGEgc3ludGF4IGVycm9yXG4gKiBpZGVudGlmaWVkIGR1cmluZyBwcmVkaWN0aW9uLiBTeW50YXggZXJyb3JzIG9jY3VyIHdoZW4gdGhlIHByZWRpY3Rpb25cbiAqIGFsZ29yaXRobSBpcyB1bmFibGUgdG8gaWRlbnRpZnkgYW4gYWx0ZXJuYXRpdmUgd2hpY2ggd291bGQgbGVhZCB0byBhXG4gKiBzdWNjZXNzZnVsIHBhcnNlLlxuICpcbiAqIEBzZWUgUGFyc2VyI25vdGlmeUVycm9yTGlzdGVuZXJzKFRva2VuLCBTdHJpbmcsIFJlY29nbml0aW9uRXhjZXB0aW9uKVxuICogQHNlZSBBTlRMUkVycm9yTGlzdGVuZXIjc3ludGF4RXJyb3JcbiAqXG4gKiBAc2luY2UgNC4zXG4gKi9cbmxldCBFcnJvckluZm8gPSBjbGFzcyBFcnJvckluZm8gZXh0ZW5kcyBEZWNpc2lvbkV2ZW50SW5mbyB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIEVycm9ySW5mb30gY2xhc3Mgd2l0aCB0aGVcbiAgICAgKiBzcGVjaWZpZWQgZGV0YWlsZWQgc3ludGF4IGVycm9yIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlY2lzaW9uIFRoZSBkZWNpc2lvbiBudW1iZXJcbiAgICAgKiBAcGFyYW0gc3RhdGUgVGhlIGZpbmFsIHNpbXVsYXRvciBzdGF0ZSByZWFjaGVkIGR1cmluZyBwcmVkaWN0aW9uXG4gICAgICogcHJpb3IgdG8gcmVhY2hpbmcgdGhlIHtAbGluayBBVE5TaW11bGF0b3IjRVJST1J9IHN0YXRlXG4gICAgICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCB0b2tlbiBzdHJlYW1cbiAgICAgKiBAcGFyYW0gc3RhcnRJbmRleCBUaGUgc3RhcnQgaW5kZXggZm9yIHRoZSBjdXJyZW50IHByZWRpY3Rpb25cbiAgICAgKiBAcGFyYW0gc3RvcEluZGV4IFRoZSBpbmRleCBhdCB3aGljaCB0aGUgc3ludGF4IGVycm9yIHdhcyBpZGVudGlmaWVkXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGVjaXNpb24sIHN0YXRlLCBpbnB1dCwgc3RhcnRJbmRleCwgc3RvcEluZGV4KSB7XG4gICAgICAgIHN1cGVyKGRlY2lzaW9uLCBzdGF0ZSwgaW5wdXQsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgc3RhdGUudXNlQ29udGV4dCk7XG4gICAgfVxufTtcbkVycm9ySW5mbyA9IF9fZGVjb3JhdGUoW1xuICAgIF9fcGFyYW0oMSwgTm90TnVsbCksXG4gICAgX19wYXJhbSgyLCBOb3ROdWxsKVxuXSwgRXJyb3JJbmZvKTtcbmV4cG9ydCB7IEVycm9ySW5mbyB9O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/typescript-es6/antlr4es6/atn/ErrorInfo.js\n')},
"../src/typescript-es6/antlr4es6/atn/LookaheadEventInfo.js":function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LookaheadEventInfo", function() { return LookaheadEventInfo; });\n/* harmony import */ var _DecisionEventInfo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DecisionEventInfo */ "../src/typescript-es6/antlr4es6/atn/DecisionEventInfo.js");\n/* harmony import */ var _Decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Decorators */ "../src/typescript-es6/antlr4es6/Decorators.js");\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (undefined && undefined.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n// ConvertTo-TS run at 2016-10-04T11:26:30.6852565-07:00\n\n\n/**\n * This class represents profiling event information for tracking the lookahead\n * depth required in order to make a prediction.\n *\n * @since 4.3\n */\nlet LookaheadEventInfo = class LookaheadEventInfo extends _DecisionEventInfo__WEBPACK_IMPORTED_MODULE_0__["DecisionEventInfo"] {\n    /**\n     * Constructs a new instance of the {@link LookaheadEventInfo} class with\n     * the specified detailed lookahead information.\n     *\n     * @param decision The decision number\n     * @param state The final simulator state containing the necessary\n     * information to determine the result of a prediction, or `undefined` if\n     * the final state is not available\n     * @param input The input token stream\n     * @param startIndex The start index for the current prediction\n     * @param stopIndex The index at which the prediction was finally made\n     * @param fullCtx `true` if the current lookahead is part of an LL\n     * prediction; otherwise, `false` if the current lookahead is part of\n     * an SLL prediction\n     */\n    constructor(decision, state, predictedAlt, input, startIndex, stopIndex, fullCtx) {\n        super(decision, state, input, startIndex, stopIndex, fullCtx);\n        this.predictedAlt = predictedAlt;\n    }\n};\nLookaheadEventInfo = __decorate([\n    __param(3, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"])\n], LookaheadEventInfo);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL3R5cGVzY3JpcHQtZXM2L2FudGxyNGVzNi9hdG4vTG9va2FoZWFkRXZlbnRJbmZvLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy90eXBlc2NyaXB0LWVzNi9hbnRscjRlczYvYXRuL0xvb2thaGVhZEV2ZW50SW5mby5qcz9kZGE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNELTMtQ2xhdXNlIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn07XG4vLyBDb252ZXJ0VG8tVFMgcnVuIGF0IDIwMTYtMTAtMDRUMTE6MjY6MzAuNjg1MjU2NS0wNzowMFxuaW1wb3J0IHsgRGVjaXNpb25FdmVudEluZm8gfSBmcm9tIFwiLi9EZWNpc2lvbkV2ZW50SW5mb1wiO1xuaW1wb3J0IHsgTm90TnVsbCB9IGZyb20gXCIuLi9EZWNvcmF0b3JzXCI7XG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBwcm9maWxpbmcgZXZlbnQgaW5mb3JtYXRpb24gZm9yIHRyYWNraW5nIHRoZSBsb29rYWhlYWRcbiAqIGRlcHRoIHJlcXVpcmVkIGluIG9yZGVyIHRvIG1ha2UgYSBwcmVkaWN0aW9uLlxuICpcbiAqIEBzaW5jZSA0LjNcbiAqL1xubGV0IExvb2thaGVhZEV2ZW50SW5mbyA9IGNsYXNzIExvb2thaGVhZEV2ZW50SW5mbyBleHRlbmRzIERlY2lzaW9uRXZlbnRJbmZvIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSB7QGxpbmsgTG9va2FoZWFkRXZlbnRJbmZvfSBjbGFzcyB3aXRoXG4gICAgICogdGhlIHNwZWNpZmllZCBkZXRhaWxlZCBsb29rYWhlYWQgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGVjaXNpb24gVGhlIGRlY2lzaW9uIG51bWJlclxuICAgICAqIEBwYXJhbSBzdGF0ZSBUaGUgZmluYWwgc2ltdWxhdG9yIHN0YXRlIGNvbnRhaW5pbmcgdGhlIG5lY2Vzc2FyeVxuICAgICAqIGluZm9ybWF0aW9uIHRvIGRldGVybWluZSB0aGUgcmVzdWx0IG9mIGEgcHJlZGljdGlvbiwgb3IgYHVuZGVmaW5lZGAgaWZcbiAgICAgKiB0aGUgZmluYWwgc3RhdGUgaXMgbm90IGF2YWlsYWJsZVxuICAgICAqIEBwYXJhbSBpbnB1dCBUaGUgaW5wdXQgdG9rZW4gc3RyZWFtXG4gICAgICogQHBhcmFtIHN0YXJ0SW5kZXggVGhlIHN0YXJ0IGluZGV4IGZvciB0aGUgY3VycmVudCBwcmVkaWN0aW9uXG4gICAgICogQHBhcmFtIHN0b3BJbmRleCBUaGUgaW5kZXggYXQgd2hpY2ggdGhlIHByZWRpY3Rpb24gd2FzIGZpbmFsbHkgbWFkZVxuICAgICAqIEBwYXJhbSBmdWxsQ3R4IGB0cnVlYCBpZiB0aGUgY3VycmVudCBsb29rYWhlYWQgaXMgcGFydCBvZiBhbiBMTFxuICAgICAqIHByZWRpY3Rpb247IG90aGVyd2lzZSwgYGZhbHNlYCBpZiB0aGUgY3VycmVudCBsb29rYWhlYWQgaXMgcGFydCBvZlxuICAgICAqIGFuIFNMTCBwcmVkaWN0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGVjaXNpb24sIHN0YXRlLCBwcmVkaWN0ZWRBbHQsIGlucHV0LCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGZ1bGxDdHgpIHtcbiAgICAgICAgc3VwZXIoZGVjaXNpb24sIHN0YXRlLCBpbnB1dCwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBmdWxsQ3R4KTtcbiAgICAgICAgdGhpcy5wcmVkaWN0ZWRBbHQgPSBwcmVkaWN0ZWRBbHQ7XG4gICAgfVxufTtcbkxvb2thaGVhZEV2ZW50SW5mbyA9IF9fZGVjb3JhdGUoW1xuICAgIF9fcGFyYW0oMywgTm90TnVsbClcbl0sIExvb2thaGVhZEV2ZW50SW5mbyk7XG5leHBvcnQgeyBMb29rYWhlYWRFdmVudEluZm8gfTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/typescript-es6/antlr4es6/atn/LookaheadEventInfo.js\n')},
"../src/typescript-es6/antlr4es6/atn/PredicateEvalInfo.js":function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PredicateEvalInfo", function() { return PredicateEvalInfo; });\n/* harmony import */ var _DecisionEventInfo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DecisionEventInfo */ "../src/typescript-es6/antlr4es6/atn/DecisionEventInfo.js");\n/* harmony import */ var _Decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Decorators */ "../src/typescript-es6/antlr4es6/Decorators.js");\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (undefined && undefined.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n// ConvertTo-TS run at 2016-10-04T11:26:35.1914305-07:00\n\n\n/**\n * This class represents profiling event information for semantic predicate\n * evaluations which occur during prediction.\n *\n * @see ParserATNSimulator#evalSemanticContext\n *\n * @since 4.3\n */\nlet PredicateEvalInfo = class PredicateEvalInfo extends _DecisionEventInfo__WEBPACK_IMPORTED_MODULE_0__["DecisionEventInfo"] {\n    /**\n     * Constructs a new instance of the {@link PredicateEvalInfo} class with the\n     * specified detailed predicate evaluation information.\n     *\n     * @param state The simulator state\n     * @param decision The decision number\n     * @param input The input token stream\n     * @param startIndex The start index for the current prediction\n     * @param stopIndex The index at which the predicate evaluation was\n     * triggered. Note that the input stream may be reset to other positions for\n     * the actual evaluation of individual predicates.\n     * @param semctx The semantic context which was evaluated\n     * @param evalResult The results of evaluating the semantic context\n     * @param predictedAlt The alternative number for the decision which is\n     * guarded by the semantic context `semctx`. See {@link #predictedAlt}\n     * for more information.\n     *\n     * @see ParserATNSimulator#evalSemanticContext(SemanticContext, ParserRuleContext, int)\n     * @see SemanticContext#eval(Recognizer, RuleContext)\n     */\n    constructor(state, decision, input, startIndex, stopIndex, semctx, evalResult, predictedAlt) {\n        super(decision, state, input, startIndex, stopIndex, state.useContext);\n        this.semctx = semctx;\n        this.evalResult = evalResult;\n        this.predictedAlt = predictedAlt;\n    }\n};\nPredicateEvalInfo = __decorate([\n    __param(0, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"]),\n    __param(2, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"]),\n    __param(5, _Decorators__WEBPACK_IMPORTED_MODULE_1__["NotNull"])\n], PredicateEvalInfo);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL3R5cGVzY3JpcHQtZXM2L2FudGxyNGVzNi9hdG4vUHJlZGljYXRlRXZhbEluZm8uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL3R5cGVzY3JpcHQtZXM2L2FudGxyNGVzNi9hdG4vUHJlZGljYXRlRXZhbEluZm8uanM/NDE1MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRC0zLUNsYXVzZSBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59O1xuLy8gQ29udmVydFRvLVRTIHJ1biBhdCAyMDE2LTEwLTA0VDExOjI2OjM1LjE5MTQzMDUtMDc6MDBcbmltcG9ydCB7IERlY2lzaW9uRXZlbnRJbmZvIH0gZnJvbSBcIi4vRGVjaXNpb25FdmVudEluZm9cIjtcbmltcG9ydCB7IE5vdE51bGwgfSBmcm9tIFwiLi4vRGVjb3JhdG9yc1wiO1xuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgcHJvZmlsaW5nIGV2ZW50IGluZm9ybWF0aW9uIGZvciBzZW1hbnRpYyBwcmVkaWNhdGVcbiAqIGV2YWx1YXRpb25zIHdoaWNoIG9jY3VyIGR1cmluZyBwcmVkaWN0aW9uLlxuICpcbiAqIEBzZWUgUGFyc2VyQVROU2ltdWxhdG9yI2V2YWxTZW1hbnRpY0NvbnRleHRcbiAqXG4gKiBAc2luY2UgNC4zXG4gKi9cbmxldCBQcmVkaWNhdGVFdmFsSW5mbyA9IGNsYXNzIFByZWRpY2F0ZUV2YWxJbmZvIGV4dGVuZHMgRGVjaXNpb25FdmVudEluZm8ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHtAbGluayBQcmVkaWNhdGVFdmFsSW5mb30gY2xhc3Mgd2l0aCB0aGVcbiAgICAgKiBzcGVjaWZpZWQgZGV0YWlsZWQgcHJlZGljYXRlIGV2YWx1YXRpb24gaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhdGUgVGhlIHNpbXVsYXRvciBzdGF0ZVxuICAgICAqIEBwYXJhbSBkZWNpc2lvbiBUaGUgZGVjaXNpb24gbnVtYmVyXG4gICAgICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCB0b2tlbiBzdHJlYW1cbiAgICAgKiBAcGFyYW0gc3RhcnRJbmRleCBUaGUgc3RhcnQgaW5kZXggZm9yIHRoZSBjdXJyZW50IHByZWRpY3Rpb25cbiAgICAgKiBAcGFyYW0gc3RvcEluZGV4IFRoZSBpbmRleCBhdCB3aGljaCB0aGUgcHJlZGljYXRlIGV2YWx1YXRpb24gd2FzXG4gICAgICogdHJpZ2dlcmVkLiBOb3RlIHRoYXQgdGhlIGlucHV0IHN0cmVhbSBtYXkgYmUgcmVzZXQgdG8gb3RoZXIgcG9zaXRpb25zIGZvclxuICAgICAqIHRoZSBhY3R1YWwgZXZhbHVhdGlvbiBvZiBpbmRpdmlkdWFsIHByZWRpY2F0ZXMuXG4gICAgICogQHBhcmFtIHNlbWN0eCBUaGUgc2VtYW50aWMgY29udGV4dCB3aGljaCB3YXMgZXZhbHVhdGVkXG4gICAgICogQHBhcmFtIGV2YWxSZXN1bHQgVGhlIHJlc3VsdHMgb2YgZXZhbHVhdGluZyB0aGUgc2VtYW50aWMgY29udGV4dFxuICAgICAqIEBwYXJhbSBwcmVkaWN0ZWRBbHQgVGhlIGFsdGVybmF0aXZlIG51bWJlciBmb3IgdGhlIGRlY2lzaW9uIHdoaWNoIGlzXG4gICAgICogZ3VhcmRlZCBieSB0aGUgc2VtYW50aWMgY29udGV4dCBgc2VtY3R4YC4gU2VlIHtAbGluayAjcHJlZGljdGVkQWx0fVxuICAgICAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHNlZSBQYXJzZXJBVE5TaW11bGF0b3IjZXZhbFNlbWFudGljQ29udGV4dChTZW1hbnRpY0NvbnRleHQsIFBhcnNlclJ1bGVDb250ZXh0LCBpbnQpXG4gICAgICogQHNlZSBTZW1hbnRpY0NvbnRleHQjZXZhbChSZWNvZ25pemVyLCBSdWxlQ29udGV4dClcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzdGF0ZSwgZGVjaXNpb24sIGlucHV0LCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIHNlbWN0eCwgZXZhbFJlc3VsdCwgcHJlZGljdGVkQWx0KSB7XG4gICAgICAgIHN1cGVyKGRlY2lzaW9uLCBzdGF0ZSwgaW5wdXQsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgc3RhdGUudXNlQ29udGV4dCk7XG4gICAgICAgIHRoaXMuc2VtY3R4ID0gc2VtY3R4O1xuICAgICAgICB0aGlzLmV2YWxSZXN1bHQgPSBldmFsUmVzdWx0O1xuICAgICAgICB0aGlzLnByZWRpY3RlZEFsdCA9IHByZWRpY3RlZEFsdDtcbiAgICB9XG59O1xuUHJlZGljYXRlRXZhbEluZm8gPSBfX2RlY29yYXRlKFtcbiAgICBfX3BhcmFtKDAsIE5vdE51bGwpLFxuICAgIF9fcGFyYW0oMiwgTm90TnVsbCksXG4gICAgX19wYXJhbSg1LCBOb3ROdWxsKVxuXSwgUHJlZGljYXRlRXZhbEluZm8pO1xuZXhwb3J0IHsgUHJlZGljYXRlRXZhbEluZm8gfTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/typescript-es6/antlr4es6/atn/PredicateEvalInfo.js\n')},
"../src/typescript-es6/antlr4es6/atn/ProfilingATNSimulator.js":function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProfilingATNSimulator", function() { return ProfilingATNSimulator; });\n/* harmony import */ var _AmbiguityInfo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AmbiguityInfo */ "../src/typescript-es6/antlr4es6/atn/AmbiguityInfo.js");\n/* harmony import */ var _ATN__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATN */ "../src/typescript-es6/antlr4es6/atn/ATN.js");\n/* harmony import */ var _ATNSimulator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ATNSimulator */ "../src/typescript-es6/antlr4es6/atn/ATNSimulator.js");\n/* harmony import */ var _ContextSensitivityInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ContextSensitivityInfo */ "../src/typescript-es6/antlr4es6/atn/ContextSensitivityInfo.js");\n/* harmony import */ var _DecisionInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DecisionInfo */ "../src/typescript-es6/antlr4es6/atn/DecisionInfo.js");\n/* harmony import */ var _ErrorInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ErrorInfo */ "../src/typescript-es6/antlr4es6/atn/ErrorInfo.js");\n/* harmony import */ var _Decorators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Decorators */ "../src/typescript-es6/antlr4es6/Decorators.js");\n/* harmony import */ var _LookaheadEventInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./LookaheadEventInfo */ "../src/typescript-es6/antlr4es6/atn/LookaheadEventInfo.js");\n/* harmony import */ var _ParserATNSimulator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ParserATNSimulator */ "../src/typescript-es6/antlr4es6/atn/ParserATNSimulator.js");\n/* harmony import */ var _PredicateEvalInfo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./PredicateEvalInfo */ "../src/typescript-es6/antlr4es6/atn/PredicateEvalInfo.js");\n/* harmony import */ var _SemanticContext__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./SemanticContext */ "../src/typescript-es6/antlr4es6/atn/SemanticContext.js");\n/* harmony import */ var _SimulatorState__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./SimulatorState */ "../src/typescript-es6/antlr4es6/atn/SimulatorState.js");\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (undefined && undefined.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n// ConvertTo-TS run at 2016-10-04T11:26:36.4188352-07:00\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @since 4.3\n */\nclass ProfilingATNSimulator extends _ParserATNSimulator__WEBPACK_IMPORTED_MODULE_8__["ParserATNSimulator"] {\n    constructor(parser) {\n        super(parser.interpreter.atn, parser);\n        this._startIndex = 0;\n        this._sllStopIndex = 0;\n        this._llStopIndex = 0;\n        this.currentDecision = 0;\n        /** At the point of LL failover, we record how SLL would resolve the conflict so that\n         *  we can determine whether or not a decision / input pair is context-sensitive.\n         *  If LL gives a different result than SLL\'s predicted alternative, we have a\n         *  context sensitivity for sure. The converse is not necessarily true, however.\n         *  It\'s possible that after conflict resolution chooses minimum alternatives,\n         *  SLL could get the same answer as LL. Regardless of whether or not the result indicates\n         *  an ambiguity, it is not treated as a context sensitivity because LL prediction\n         *  was not required in order to produce a correct prediction for this decision and input sequence.\n         *  It may in fact still be a context sensitivity but we don\'t know by looking at the\n         *  minimum alternatives for the current input.\n         */\n        this.conflictingAltResolvedBySLL = 0;\n        this.optimize_ll1 = false;\n        this.reportAmbiguities = true;\n        this.numDecisions = this.atn.decisionToState.length;\n        this.decisions = [];\n        for (let i = 0; i < this.numDecisions; i++) {\n            this.decisions.push(new _DecisionInfo__WEBPACK_IMPORTED_MODULE_4__["DecisionInfo"](i));\n        }\n    }\n    adaptivePredict(input, decision, outerContext, useContext) {\n        if (useContext !== undefined) {\n            return super.adaptivePredict(input, decision, outerContext, useContext);\n        }\n        try {\n            this._input = input;\n            this._startIndex = input.index;\n            // it\'s possible for SLL to reach a conflict state without consuming any input\n            this._sllStopIndex = this._startIndex - 1;\n            this._llStopIndex = -1;\n            this.currentDecision = decision;\n            this.currentState = undefined;\n            this.conflictingAltResolvedBySLL = _ATN__WEBPACK_IMPORTED_MODULE_1__["ATN"].INVALID_ALT_NUMBER;\n            let start = process.hrtime();\n            let alt = super.adaptivePredict(input, decision, outerContext);\n            let stop = process.hrtime();\n            let nanoseconds = (stop[0] - start[0]) * 1000000000;\n            if (nanoseconds === 0) {\n                nanoseconds = stop[1] - start[1];\n            }\n            else {\n                // Add nanoseconds from start to end of that second, plus start of the end second to end\n                nanoseconds += (1000000000 - start[1]) + stop[1];\n            }\n            this.decisions[decision].timeInPrediction += nanoseconds;\n            this.decisions[decision].invocations++;\n            let SLL_k = this._sllStopIndex - this._startIndex + 1;\n            this.decisions[decision].SLL_TotalLook += SLL_k;\n            this.decisions[decision].SLL_MinLook = this.decisions[decision].SLL_MinLook === 0 ? SLL_k : Math.min(this.decisions[decision].SLL_MinLook, SLL_k);\n            if (SLL_k > this.decisions[decision].SLL_MaxLook) {\n                this.decisions[decision].SLL_MaxLook = SLL_k;\n                this.decisions[decision].SLL_MaxLookEvent =\n                    new _LookaheadEventInfo__WEBPACK_IMPORTED_MODULE_7__["LookaheadEventInfo"](decision, undefined, alt, input, this._startIndex, this._sllStopIndex, false);\n            }\n            if (this._llStopIndex >= 0) {\n                let LL_k = this._llStopIndex - this._startIndex + 1;\n                this.decisions[decision].LL_TotalLook += LL_k;\n                this.decisions[decision].LL_MinLook = this.decisions[decision].LL_MinLook === 0 ? LL_k : Math.min(this.decisions[decision].LL_MinLook, LL_k);\n                if (LL_k > this.decisions[decision].LL_MaxLook) {\n                    this.decisions[decision].LL_MaxLook = LL_k;\n                    this.decisions[decision].LL_MaxLookEvent =\n                        new _LookaheadEventInfo__WEBPACK_IMPORTED_MODULE_7__["LookaheadEventInfo"](decision, undefined, alt, input, this._startIndex, this._llStopIndex, true);\n                }\n            }\n            return alt;\n        }\n        finally {\n            this._input = undefined;\n            this.currentDecision = -1;\n        }\n    }\n    getStartState(dfa, input, outerContext, useContext) {\n        let state = super.getStartState(dfa, input, outerContext, useContext);\n        this.currentState = state;\n        return state;\n    }\n    computeStartState(dfa, globalContext, useContext) {\n        let state = super.computeStartState(dfa, globalContext, useContext);\n        this.currentState = state;\n        return state;\n    }\n    computeReachSet(dfa, previous, t, contextCache) {\n        if (this._input === undefined) {\n            throw new Error("Invalid state");\n        }\n        let reachState = super.computeReachSet(dfa, previous, t, contextCache);\n        if (reachState == null) {\n            // no reach on current lookahead symbol. ERROR.\n            this.decisions[this.currentDecision].errors.push(new _ErrorInfo__WEBPACK_IMPORTED_MODULE_5__["ErrorInfo"](this.currentDecision, previous, this._input, this._startIndex, this._input.index));\n        }\n        this.currentState = reachState;\n        return reachState;\n    }\n    getExistingTargetState(previousD, t) {\n        if (this.currentState === undefined || this._input === undefined) {\n            throw new Error("Invalid state");\n        }\n        // this method is called after each time the input position advances\n        if (this.currentState.useContext) {\n            this._llStopIndex = this._input.index;\n        }\n        else {\n            this._sllStopIndex = this._input.index;\n        }\n        let existingTargetState = super.getExistingTargetState(previousD, t);\n        if (existingTargetState != null) {\n            // this method is directly called by execDFA; must construct a SimulatorState\n            // to represent the current state for this case\n            this.currentState = new _SimulatorState__WEBPACK_IMPORTED_MODULE_11__["SimulatorState"](this.currentState.outerContext, existingTargetState, this.currentState.useContext, this.currentState.remainingOuterContext);\n            if (this.currentState.useContext) {\n                this.decisions[this.currentDecision].LL_DFATransitions++;\n            }\n            else {\n                this.decisions[this.currentDecision].SLL_DFATransitions++; // count only if we transition over a DFA state\n            }\n            if (existingTargetState === _ATNSimulator__WEBPACK_IMPORTED_MODULE_2__["ATNSimulator"].ERROR) {\n                let state = new _SimulatorState__WEBPACK_IMPORTED_MODULE_11__["SimulatorState"](this.currentState.outerContext, previousD, this.currentState.useContext, this.currentState.remainingOuterContext);\n                this.decisions[this.currentDecision].errors.push(new _ErrorInfo__WEBPACK_IMPORTED_MODULE_5__["ErrorInfo"](this.currentDecision, state, this._input, this._startIndex, this._input.index));\n            }\n        }\n        return existingTargetState;\n    }\n    computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache) {\n        let targetState = super.computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache);\n        if (useContext) {\n            this.decisions[this.currentDecision].LL_ATNTransitions++;\n        }\n        else {\n            this.decisions[this.currentDecision].SLL_ATNTransitions++;\n        }\n        return targetState;\n    }\n    evalSemanticContextImpl(pred, parserCallStack, alt) {\n        if (this.currentState === undefined || this._input === undefined) {\n            throw new Error("Invalid state");\n        }\n        let result = super.evalSemanticContextImpl(pred, parserCallStack, alt);\n        if (!(pred instanceof _SemanticContext__WEBPACK_IMPORTED_MODULE_10__["SemanticContext"].PrecedencePredicate)) {\n            let fullContext = this._llStopIndex >= 0;\n            let stopIndex = fullContext ? this._llStopIndex : this._sllStopIndex;\n            this.decisions[this.currentDecision].predicateEvals.push(new _PredicateEvalInfo__WEBPACK_IMPORTED_MODULE_9__["PredicateEvalInfo"](this.currentState, this.currentDecision, this._input, this._startIndex, stopIndex, pred, result, alt));\n        }\n        return result;\n    }\n    reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex) {\n        if (this._input === undefined) {\n            throw new Error("Invalid state");\n        }\n        if (prediction !== this.conflictingAltResolvedBySLL) {\n            this.decisions[this.currentDecision].contextSensitivities.push(new _ContextSensitivityInfo__WEBPACK_IMPORTED_MODULE_3__["ContextSensitivityInfo"](this.currentDecision, acceptState, this._input, startIndex, stopIndex));\n        }\n        super.reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex);\n    }\n    reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex) {\n        if (conflictingAlts != null) {\n            this.conflictingAltResolvedBySLL = conflictingAlts.nextSetBit(0);\n        }\n        else {\n            this.conflictingAltResolvedBySLL = conflictState.s0.configs.getRepresentedAlternatives().nextSetBit(0);\n        }\n        this.decisions[this.currentDecision].LL_Fallback++;\n        super.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex);\n    }\n    reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {\n        if (this.currentState === undefined || this._input === undefined) {\n            throw new Error("Invalid state");\n        }\n        let prediction;\n        if (ambigAlts != null) {\n            prediction = ambigAlts.nextSetBit(0);\n        }\n        else {\n            prediction = configs.getRepresentedAlternatives().nextSetBit(0);\n        }\n        if (this.conflictingAltResolvedBySLL !== _ATN__WEBPACK_IMPORTED_MODULE_1__["ATN"].INVALID_ALT_NUMBER && prediction !== this.conflictingAltResolvedBySLL) {\n            // Even though this is an ambiguity we are reporting, we can\n            // still detect some context sensitivities.  Both SLL and LL\n            // are showing a conflict, hence an ambiguity, but if they resolve\n            // to different minimum alternatives we have also identified a\n            // context sensitivity.\n            this.decisions[this.currentDecision].contextSensitivities.push(new _ContextSensitivityInfo__WEBPACK_IMPORTED_MODULE_3__["ContextSensitivityInfo"](this.currentDecision, this.currentState, this._input, startIndex, stopIndex));\n        }\n        this.decisions[this.currentDecision].ambiguities.push(new _AmbiguityInfo__WEBPACK_IMPORTED_MODULE_0__["AmbiguityInfo"](this.currentDecision, this.currentState, ambigAlts, this._input, startIndex, stopIndex));\n        super.reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs);\n    }\n    // ---------------------------------------------------------------------\n    getDecisionInfo() {\n        return this.decisions;\n    }\n    getCurrentState() {\n        return this.currentState;\n    }\n}\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_6__["Override"],\n    __param(0, _Decorators__WEBPACK_IMPORTED_MODULE_6__["NotNull"])\n], ProfilingATNSimulator.prototype, "adaptivePredict", null);\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_6__["Override"]\n], ProfilingATNSimulator.prototype, "getStartState", null);\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_6__["Override"]\n], ProfilingATNSimulator.prototype, "computeStartState", null);\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_6__["Override"]\n], ProfilingATNSimulator.prototype, "computeReachSet", null);\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_6__["Override"]\n], ProfilingATNSimulator.prototype, "getExistingTargetState", null);\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_6__["Override"]\n], ProfilingATNSimulator.prototype, "computeTargetState", null);\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_6__["Override"]\n], ProfilingATNSimulator.prototype, "evalSemanticContextImpl", null);\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_6__["Override"]\n], ProfilingATNSimulator.prototype, "reportContextSensitivity", null);\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_6__["Override"]\n], ProfilingATNSimulator.prototype, "reportAttemptingFullContext", null);\n__decorate([\n    _Decorators__WEBPACK_IMPORTED_MODULE_6__["Override"],\n    __param(0, _Decorators__WEBPACK_IMPORTED_MODULE_6__["NotNull"]), __param(5, _Decorators__WEBPACK_IMPORTED_MODULE_6__["NotNull"]), __param(6, _Decorators__WEBPACK_IMPORTED_MODULE_6__["NotNull"])\n], ProfilingATNSimulator.prototype, "reportAmbiguity", null);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/node_modules/process/browser.js */ "./node_modules/process/browser.js")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL3R5cGVzY3JpcHQtZXM2L2FudGxyNGVzNi9hdG4vUHJvZmlsaW5nQVROU2ltdWxhdG9yLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy90eXBlc2NyaXB0LWVzNi9hbnRscjRlczYvYXRuL1Byb2ZpbGluZ0FUTlNpbXVsYXRvci5qcz85YzEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNELTMtQ2xhdXNlIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn07XG4vLyBDb252ZXJ0VG8tVFMgcnVuIGF0IDIwMTYtMTAtMDRUMTE6MjY6MzYuNDE4ODM1Mi0wNzowMFxuaW1wb3J0IHsgQW1iaWd1aXR5SW5mbyB9IGZyb20gXCIuL0FtYmlndWl0eUluZm9cIjtcbmltcG9ydCB7IEFUTiB9IGZyb20gXCIuL0FUTlwiO1xuaW1wb3J0IHsgQVROU2ltdWxhdG9yIH0gZnJvbSBcIi4vQVROU2ltdWxhdG9yXCI7XG5pbXBvcnQgeyBDb250ZXh0U2Vuc2l0aXZpdHlJbmZvIH0gZnJvbSBcIi4vQ29udGV4dFNlbnNpdGl2aXR5SW5mb1wiO1xuaW1wb3J0IHsgRGVjaXNpb25JbmZvIH0gZnJvbSBcIi4vRGVjaXNpb25JbmZvXCI7XG5pbXBvcnQgeyBFcnJvckluZm8gfSBmcm9tIFwiLi9FcnJvckluZm9cIjtcbmltcG9ydCB7IE5vdE51bGwsIE92ZXJyaWRlIH0gZnJvbSBcIi4uL0RlY29yYXRvcnNcIjtcbmltcG9ydCB7IExvb2thaGVhZEV2ZW50SW5mbyB9IGZyb20gXCIuL0xvb2thaGVhZEV2ZW50SW5mb1wiO1xuaW1wb3J0IHsgUGFyc2VyQVROU2ltdWxhdG9yIH0gZnJvbSBcIi4vUGFyc2VyQVROU2ltdWxhdG9yXCI7XG5pbXBvcnQgeyBQcmVkaWNhdGVFdmFsSW5mbyB9IGZyb20gXCIuL1ByZWRpY2F0ZUV2YWxJbmZvXCI7XG5pbXBvcnQgeyBTZW1hbnRpY0NvbnRleHQgfSBmcm9tIFwiLi9TZW1hbnRpY0NvbnRleHRcIjtcbmltcG9ydCB7IFNpbXVsYXRvclN0YXRlIH0gZnJvbSBcIi4vU2ltdWxhdG9yU3RhdGVcIjtcbi8qKlxuICogQHNpbmNlIDQuM1xuICovXG5leHBvcnQgY2xhc3MgUHJvZmlsaW5nQVROU2ltdWxhdG9yIGV4dGVuZHMgUGFyc2VyQVROU2ltdWxhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIpIHtcbiAgICAgICAgc3VwZXIocGFyc2VyLmludGVycHJldGVyLmF0biwgcGFyc2VyKTtcbiAgICAgICAgdGhpcy5fc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX3NsbFN0b3BJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX2xsU3RvcEluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50RGVjaXNpb24gPSAwO1xuICAgICAgICAvKiogQXQgdGhlIHBvaW50IG9mIExMIGZhaWxvdmVyLCB3ZSByZWNvcmQgaG93IFNMTCB3b3VsZCByZXNvbHZlIHRoZSBjb25mbGljdCBzbyB0aGF0XG4gICAgICAgICAqICB3ZSBjYW4gZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IGEgZGVjaXNpb24gLyBpbnB1dCBwYWlyIGlzIGNvbnRleHQtc2Vuc2l0aXZlLlxuICAgICAgICAgKiAgSWYgTEwgZ2l2ZXMgYSBkaWZmZXJlbnQgcmVzdWx0IHRoYW4gU0xMJ3MgcHJlZGljdGVkIGFsdGVybmF0aXZlLCB3ZSBoYXZlIGFcbiAgICAgICAgICogIGNvbnRleHQgc2Vuc2l0aXZpdHkgZm9yIHN1cmUuIFRoZSBjb252ZXJzZSBpcyBub3QgbmVjZXNzYXJpbHkgdHJ1ZSwgaG93ZXZlci5cbiAgICAgICAgICogIEl0J3MgcG9zc2libGUgdGhhdCBhZnRlciBjb25mbGljdCByZXNvbHV0aW9uIGNob29zZXMgbWluaW11bSBhbHRlcm5hdGl2ZXMsXG4gICAgICAgICAqICBTTEwgY291bGQgZ2V0IHRoZSBzYW1lIGFuc3dlciBhcyBMTC4gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIG9yIG5vdCB0aGUgcmVzdWx0IGluZGljYXRlc1xuICAgICAgICAgKiAgYW4gYW1iaWd1aXR5LCBpdCBpcyBub3QgdHJlYXRlZCBhcyBhIGNvbnRleHQgc2Vuc2l0aXZpdHkgYmVjYXVzZSBMTCBwcmVkaWN0aW9uXG4gICAgICAgICAqICB3YXMgbm90IHJlcXVpcmVkIGluIG9yZGVyIHRvIHByb2R1Y2UgYSBjb3JyZWN0IHByZWRpY3Rpb24gZm9yIHRoaXMgZGVjaXNpb24gYW5kIGlucHV0IHNlcXVlbmNlLlxuICAgICAgICAgKiAgSXQgbWF5IGluIGZhY3Qgc3RpbGwgYmUgYSBjb250ZXh0IHNlbnNpdGl2aXR5IGJ1dCB3ZSBkb24ndCBrbm93IGJ5IGxvb2tpbmcgYXQgdGhlXG4gICAgICAgICAqICBtaW5pbXVtIGFsdGVybmF0aXZlcyBmb3IgdGhlIGN1cnJlbnQgaW5wdXQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbmZsaWN0aW5nQWx0UmVzb2x2ZWRCeVNMTCA9IDA7XG4gICAgICAgIHRoaXMub3B0aW1pemVfbGwxID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVwb3J0QW1iaWd1aXRpZXMgPSB0cnVlO1xuICAgICAgICB0aGlzLm51bURlY2lzaW9ucyA9IHRoaXMuYXRuLmRlY2lzaW9uVG9TdGF0ZS5sZW5ndGg7XG4gICAgICAgIHRoaXMuZGVjaXNpb25zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1EZWNpc2lvbnM7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5kZWNpc2lvbnMucHVzaChuZXcgRGVjaXNpb25JbmZvKGkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGFwdGl2ZVByZWRpY3QoaW5wdXQsIGRlY2lzaW9uLCBvdXRlckNvbnRleHQsIHVzZUNvbnRleHQpIHtcbiAgICAgICAgaWYgKHVzZUNvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmFkYXB0aXZlUHJlZGljdChpbnB1dCwgZGVjaXNpb24sIG91dGVyQ29udGV4dCwgdXNlQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgICAgICAgICB0aGlzLl9zdGFydEluZGV4ID0gaW5wdXQuaW5kZXg7XG4gICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIGZvciBTTEwgdG8gcmVhY2ggYSBjb25mbGljdCBzdGF0ZSB3aXRob3V0IGNvbnN1bWluZyBhbnkgaW5wdXRcbiAgICAgICAgICAgIHRoaXMuX3NsbFN0b3BJbmRleCA9IHRoaXMuX3N0YXJ0SW5kZXggLSAxO1xuICAgICAgICAgICAgdGhpcy5fbGxTdG9wSW5kZXggPSAtMTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudERlY2lzaW9uID0gZGVjaXNpb247XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuY29uZmxpY3RpbmdBbHRSZXNvbHZlZEJ5U0xMID0gQVROLklOVkFMSURfQUxUX05VTUJFUjtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHByb2Nlc3MuaHJ0aW1lKCk7XG4gICAgICAgICAgICBsZXQgYWx0ID0gc3VwZXIuYWRhcHRpdmVQcmVkaWN0KGlucHV0LCBkZWNpc2lvbiwgb3V0ZXJDb250ZXh0KTtcbiAgICAgICAgICAgIGxldCBzdG9wID0gcHJvY2Vzcy5ocnRpbWUoKTtcbiAgICAgICAgICAgIGxldCBuYW5vc2Vjb25kcyA9IChzdG9wWzBdIC0gc3RhcnRbMF0pICogMTAwMDAwMDAwMDtcbiAgICAgICAgICAgIGlmIChuYW5vc2Vjb25kcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG5hbm9zZWNvbmRzID0gc3RvcFsxXSAtIHN0YXJ0WzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIG5hbm9zZWNvbmRzIGZyb20gc3RhcnQgdG8gZW5kIG9mIHRoYXQgc2Vjb25kLCBwbHVzIHN0YXJ0IG9mIHRoZSBlbmQgc2Vjb25kIHRvIGVuZFxuICAgICAgICAgICAgICAgIG5hbm9zZWNvbmRzICs9ICgxMDAwMDAwMDAwIC0gc3RhcnRbMV0pICsgc3RvcFsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVjaXNpb25zW2RlY2lzaW9uXS50aW1lSW5QcmVkaWN0aW9uICs9IG5hbm9zZWNvbmRzO1xuICAgICAgICAgICAgdGhpcy5kZWNpc2lvbnNbZGVjaXNpb25dLmludm9jYXRpb25zKys7XG4gICAgICAgICAgICBsZXQgU0xMX2sgPSB0aGlzLl9zbGxTdG9wSW5kZXggLSB0aGlzLl9zdGFydEluZGV4ICsgMTtcbiAgICAgICAgICAgIHRoaXMuZGVjaXNpb25zW2RlY2lzaW9uXS5TTExfVG90YWxMb29rICs9IFNMTF9rO1xuICAgICAgICAgICAgdGhpcy5kZWNpc2lvbnNbZGVjaXNpb25dLlNMTF9NaW5Mb29rID0gdGhpcy5kZWNpc2lvbnNbZGVjaXNpb25dLlNMTF9NaW5Mb29rID09PSAwID8gU0xMX2sgOiBNYXRoLm1pbih0aGlzLmRlY2lzaW9uc1tkZWNpc2lvbl0uU0xMX01pbkxvb2ssIFNMTF9rKTtcbiAgICAgICAgICAgIGlmIChTTExfayA+IHRoaXMuZGVjaXNpb25zW2RlY2lzaW9uXS5TTExfTWF4TG9vaykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjaXNpb25zW2RlY2lzaW9uXS5TTExfTWF4TG9vayA9IFNMTF9rO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjaXNpb25zW2RlY2lzaW9uXS5TTExfTWF4TG9va0V2ZW50ID1cbiAgICAgICAgICAgICAgICAgICAgbmV3IExvb2thaGVhZEV2ZW50SW5mbyhkZWNpc2lvbiwgdW5kZWZpbmVkLCBhbHQsIGlucHV0LCB0aGlzLl9zdGFydEluZGV4LCB0aGlzLl9zbGxTdG9wSW5kZXgsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9sbFN0b3BJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IExMX2sgPSB0aGlzLl9sbFN0b3BJbmRleCAtIHRoaXMuX3N0YXJ0SW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjaXNpb25zW2RlY2lzaW9uXS5MTF9Ub3RhbExvb2sgKz0gTExfaztcbiAgICAgICAgICAgICAgICB0aGlzLmRlY2lzaW9uc1tkZWNpc2lvbl0uTExfTWluTG9vayA9IHRoaXMuZGVjaXNpb25zW2RlY2lzaW9uXS5MTF9NaW5Mb29rID09PSAwID8gTExfayA6IE1hdGgubWluKHRoaXMuZGVjaXNpb25zW2RlY2lzaW9uXS5MTF9NaW5Mb29rLCBMTF9rKTtcbiAgICAgICAgICAgICAgICBpZiAoTExfayA+IHRoaXMuZGVjaXNpb25zW2RlY2lzaW9uXS5MTF9NYXhMb29rKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVjaXNpb25zW2RlY2lzaW9uXS5MTF9NYXhMb29rID0gTExfaztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWNpc2lvbnNbZGVjaXNpb25dLkxMX01heExvb2tFdmVudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTG9va2FoZWFkRXZlbnRJbmZvKGRlY2lzaW9uLCB1bmRlZmluZWQsIGFsdCwgaW5wdXQsIHRoaXMuX3N0YXJ0SW5kZXgsIHRoaXMuX2xsU3RvcEluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWx0O1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5faW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnREZWNpc2lvbiA9IC0xO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFN0YXJ0U3RhdGUoZGZhLCBpbnB1dCwgb3V0ZXJDb250ZXh0LCB1c2VDb250ZXh0KSB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHN1cGVyLmdldFN0YXJ0U3RhdGUoZGZhLCBpbnB1dCwgb3V0ZXJDb250ZXh0LCB1c2VDb250ZXh0KTtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgICBjb21wdXRlU3RhcnRTdGF0ZShkZmEsIGdsb2JhbENvbnRleHQsIHVzZUNvbnRleHQpIHtcbiAgICAgICAgbGV0IHN0YXRlID0gc3VwZXIuY29tcHV0ZVN0YXJ0U3RhdGUoZGZhLCBnbG9iYWxDb250ZXh0LCB1c2VDb250ZXh0KTtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgICBjb21wdXRlUmVhY2hTZXQoZGZhLCBwcmV2aW91cywgdCwgY29udGV4dENhY2hlKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0YXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZWFjaFN0YXRlID0gc3VwZXIuY29tcHV0ZVJlYWNoU2V0KGRmYSwgcHJldmlvdXMsIHQsIGNvbnRleHRDYWNoZSk7XG4gICAgICAgIGlmIChyZWFjaFN0YXRlID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vIHJlYWNoIG9uIGN1cnJlbnQgbG9va2FoZWFkIHN5bWJvbC4gRVJST1IuXG4gICAgICAgICAgICB0aGlzLmRlY2lzaW9uc1t0aGlzLmN1cnJlbnREZWNpc2lvbl0uZXJyb3JzLnB1c2gobmV3IEVycm9ySW5mbyh0aGlzLmN1cnJlbnREZWNpc2lvbiwgcHJldmlvdXMsIHRoaXMuX2lucHV0LCB0aGlzLl9zdGFydEluZGV4LCB0aGlzLl9pbnB1dC5pbmRleCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gcmVhY2hTdGF0ZTtcbiAgICAgICAgcmV0dXJuIHJlYWNoU3RhdGU7XG4gICAgfVxuICAgIGdldEV4aXN0aW5nVGFyZ2V0U3RhdGUocHJldmlvdXNELCB0KSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX2lucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RhdGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcyBtZXRob2QgaXMgY2FsbGVkIGFmdGVyIGVhY2ggdGltZSB0aGUgaW5wdXQgcG9zaXRpb24gYWR2YW5jZXNcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0YXRlLnVzZUNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xsU3RvcEluZGV4ID0gdGhpcy5faW5wdXQuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zbGxTdG9wSW5kZXggPSB0aGlzLl9pbnB1dC5pbmRleDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZXhpc3RpbmdUYXJnZXRTdGF0ZSA9IHN1cGVyLmdldEV4aXN0aW5nVGFyZ2V0U3RhdGUocHJldmlvdXNELCB0KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nVGFyZ2V0U3RhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBtZXRob2QgaXMgZGlyZWN0bHkgY2FsbGVkIGJ5IGV4ZWNERkE7IG11c3QgY29uc3RydWN0IGEgU2ltdWxhdG9yU3RhdGVcbiAgICAgICAgICAgIC8vIHRvIHJlcHJlc2VudCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgdGhpcyBjYXNlXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTdGF0ZSA9IG5ldyBTaW11bGF0b3JTdGF0ZSh0aGlzLmN1cnJlbnRTdGF0ZS5vdXRlckNvbnRleHQsIGV4aXN0aW5nVGFyZ2V0U3RhdGUsIHRoaXMuY3VycmVudFN0YXRlLnVzZUNvbnRleHQsIHRoaXMuY3VycmVudFN0YXRlLnJlbWFpbmluZ091dGVyQ29udGV4dCk7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RhdGUudXNlQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjaXNpb25zW3RoaXMuY3VycmVudERlY2lzaW9uXS5MTF9ERkFUcmFuc2l0aW9ucysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNpc2lvbnNbdGhpcy5jdXJyZW50RGVjaXNpb25dLlNMTF9ERkFUcmFuc2l0aW9ucysrOyAvLyBjb3VudCBvbmx5IGlmIHdlIHRyYW5zaXRpb24gb3ZlciBhIERGQSBzdGF0ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nVGFyZ2V0U3RhdGUgPT09IEFUTlNpbXVsYXRvci5FUlJPUikge1xuICAgICAgICAgICAgICAgIGxldCBzdGF0ZSA9IG5ldyBTaW11bGF0b3JTdGF0ZSh0aGlzLmN1cnJlbnRTdGF0ZS5vdXRlckNvbnRleHQsIHByZXZpb3VzRCwgdGhpcy5jdXJyZW50U3RhdGUudXNlQ29udGV4dCwgdGhpcy5jdXJyZW50U3RhdGUucmVtYWluaW5nT3V0ZXJDb250ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlY2lzaW9uc1t0aGlzLmN1cnJlbnREZWNpc2lvbl0uZXJyb3JzLnB1c2gobmV3IEVycm9ySW5mbyh0aGlzLmN1cnJlbnREZWNpc2lvbiwgc3RhdGUsIHRoaXMuX2lucHV0LCB0aGlzLl9zdGFydEluZGV4LCB0aGlzLl9pbnB1dC5pbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBleGlzdGluZ1RhcmdldFN0YXRlO1xuICAgIH1cbiAgICBjb21wdXRlVGFyZ2V0U3RhdGUoZGZhLCBzLCByZW1haW5pbmdHbG9iYWxDb250ZXh0LCB0LCB1c2VDb250ZXh0LCBjb250ZXh0Q2FjaGUpIHtcbiAgICAgICAgbGV0IHRhcmdldFN0YXRlID0gc3VwZXIuY29tcHV0ZVRhcmdldFN0YXRlKGRmYSwgcywgcmVtYWluaW5nR2xvYmFsQ29udGV4dCwgdCwgdXNlQ29udGV4dCwgY29udGV4dENhY2hlKTtcbiAgICAgICAgaWYgKHVzZUNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjaXNpb25zW3RoaXMuY3VycmVudERlY2lzaW9uXS5MTF9BVE5UcmFuc2l0aW9ucysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZWNpc2lvbnNbdGhpcy5jdXJyZW50RGVjaXNpb25dLlNMTF9BVE5UcmFuc2l0aW9ucysrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXRTdGF0ZTtcbiAgICB9XG4gICAgZXZhbFNlbWFudGljQ29udGV4dEltcGwocHJlZCwgcGFyc2VyQ2FsbFN0YWNrLCBhbHQpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5faW5wdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdGF0ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuZXZhbFNlbWFudGljQ29udGV4dEltcGwocHJlZCwgcGFyc2VyQ2FsbFN0YWNrLCBhbHQpO1xuICAgICAgICBpZiAoIShwcmVkIGluc3RhbmNlb2YgU2VtYW50aWNDb250ZXh0LlByZWNlZGVuY2VQcmVkaWNhdGUpKSB7XG4gICAgICAgICAgICBsZXQgZnVsbENvbnRleHQgPSB0aGlzLl9sbFN0b3BJbmRleCA+PSAwO1xuICAgICAgICAgICAgbGV0IHN0b3BJbmRleCA9IGZ1bGxDb250ZXh0ID8gdGhpcy5fbGxTdG9wSW5kZXggOiB0aGlzLl9zbGxTdG9wSW5kZXg7XG4gICAgICAgICAgICB0aGlzLmRlY2lzaW9uc1t0aGlzLmN1cnJlbnREZWNpc2lvbl0ucHJlZGljYXRlRXZhbHMucHVzaChuZXcgUHJlZGljYXRlRXZhbEluZm8odGhpcy5jdXJyZW50U3RhdGUsIHRoaXMuY3VycmVudERlY2lzaW9uLCB0aGlzLl9pbnB1dCwgdGhpcy5fc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkLCByZXN1bHQsIGFsdCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJlcG9ydENvbnRleHRTZW5zaXRpdml0eShkZmEsIHByZWRpY3Rpb24sIGFjY2VwdFN0YXRlLCBzdGFydEluZGV4LCBzdG9wSW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RhdGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWRpY3Rpb24gIT09IHRoaXMuY29uZmxpY3RpbmdBbHRSZXNvbHZlZEJ5U0xMKSB7XG4gICAgICAgICAgICB0aGlzLmRlY2lzaW9uc1t0aGlzLmN1cnJlbnREZWNpc2lvbl0uY29udGV4dFNlbnNpdGl2aXRpZXMucHVzaChuZXcgQ29udGV4dFNlbnNpdGl2aXR5SW5mbyh0aGlzLmN1cnJlbnREZWNpc2lvbiwgYWNjZXB0U3RhdGUsIHRoaXMuX2lucHV0LCBzdGFydEluZGV4LCBzdG9wSW5kZXgpKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5yZXBvcnRDb250ZXh0U2Vuc2l0aXZpdHkoZGZhLCBwcmVkaWN0aW9uLCBhY2NlcHRTdGF0ZSwgc3RhcnRJbmRleCwgc3RvcEluZGV4KTtcbiAgICB9XG4gICAgcmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0KGRmYSwgY29uZmxpY3RpbmdBbHRzLCBjb25mbGljdFN0YXRlLCBzdGFydEluZGV4LCBzdG9wSW5kZXgpIHtcbiAgICAgICAgaWYgKGNvbmZsaWN0aW5nQWx0cyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZsaWN0aW5nQWx0UmVzb2x2ZWRCeVNMTCA9IGNvbmZsaWN0aW5nQWx0cy5uZXh0U2V0Qml0KDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb25mbGljdGluZ0FsdFJlc29sdmVkQnlTTEwgPSBjb25mbGljdFN0YXRlLnMwLmNvbmZpZ3MuZ2V0UmVwcmVzZW50ZWRBbHRlcm5hdGl2ZXMoKS5uZXh0U2V0Qml0KDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVjaXNpb25zW3RoaXMuY3VycmVudERlY2lzaW9uXS5MTF9GYWxsYmFjaysrO1xuICAgICAgICBzdXBlci5yZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQoZGZhLCBjb25mbGljdGluZ0FsdHMsIGNvbmZsaWN0U3RhdGUsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCk7XG4gICAgfVxuICAgIHJlcG9ydEFtYmlndWl0eShkZmEsIEQsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgZXhhY3QsIGFtYmlnQWx0cywgY29uZmlncykge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl9pbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0YXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcmVkaWN0aW9uO1xuICAgICAgICBpZiAoYW1iaWdBbHRzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHByZWRpY3Rpb24gPSBhbWJpZ0FsdHMubmV4dFNldEJpdCgwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByZWRpY3Rpb24gPSBjb25maWdzLmdldFJlcHJlc2VudGVkQWx0ZXJuYXRpdmVzKCkubmV4dFNldEJpdCgwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25mbGljdGluZ0FsdFJlc29sdmVkQnlTTEwgIT09IEFUTi5JTlZBTElEX0FMVF9OVU1CRVIgJiYgcHJlZGljdGlvbiAhPT0gdGhpcy5jb25mbGljdGluZ0FsdFJlc29sdmVkQnlTTEwpIHtcbiAgICAgICAgICAgIC8vIEV2ZW4gdGhvdWdoIHRoaXMgaXMgYW4gYW1iaWd1aXR5IHdlIGFyZSByZXBvcnRpbmcsIHdlIGNhblxuICAgICAgICAgICAgLy8gc3RpbGwgZGV0ZWN0IHNvbWUgY29udGV4dCBzZW5zaXRpdml0aWVzLiAgQm90aCBTTEwgYW5kIExMXG4gICAgICAgICAgICAvLyBhcmUgc2hvd2luZyBhIGNvbmZsaWN0LCBoZW5jZSBhbiBhbWJpZ3VpdHksIGJ1dCBpZiB0aGV5IHJlc29sdmVcbiAgICAgICAgICAgIC8vIHRvIGRpZmZlcmVudCBtaW5pbXVtIGFsdGVybmF0aXZlcyB3ZSBoYXZlIGFsc28gaWRlbnRpZmllZCBhXG4gICAgICAgICAgICAvLyBjb250ZXh0IHNlbnNpdGl2aXR5LlxuICAgICAgICAgICAgdGhpcy5kZWNpc2lvbnNbdGhpcy5jdXJyZW50RGVjaXNpb25dLmNvbnRleHRTZW5zaXRpdml0aWVzLnB1c2gobmV3IENvbnRleHRTZW5zaXRpdml0eUluZm8odGhpcy5jdXJyZW50RGVjaXNpb24sIHRoaXMuY3VycmVudFN0YXRlLCB0aGlzLl9pbnB1dCwgc3RhcnRJbmRleCwgc3RvcEluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWNpc2lvbnNbdGhpcy5jdXJyZW50RGVjaXNpb25dLmFtYmlndWl0aWVzLnB1c2gobmV3IEFtYmlndWl0eUluZm8odGhpcy5jdXJyZW50RGVjaXNpb24sIHRoaXMuY3VycmVudFN0YXRlLCBhbWJpZ0FsdHMsIHRoaXMuX2lucHV0LCBzdGFydEluZGV4LCBzdG9wSW5kZXgpKTtcbiAgICAgICAgc3VwZXIucmVwb3J0QW1iaWd1aXR5KGRmYSwgRCwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBleGFjdCwgYW1iaWdBbHRzLCBjb25maWdzKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZ2V0RGVjaXNpb25JbmZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWNpc2lvbnM7XG4gICAgfVxuICAgIGdldEN1cnJlbnRTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFN0YXRlO1xuICAgIH1cbn1cbl9fZGVjb3JhdGUoW1xuICAgIE92ZXJyaWRlLFxuICAgIF9fcGFyYW0oMCwgTm90TnVsbClcbl0sIFByb2ZpbGluZ0FUTlNpbXVsYXRvci5wcm90b3R5cGUsIFwiYWRhcHRpdmVQcmVkaWN0XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgT3ZlcnJpZGVcbl0sIFByb2ZpbGluZ0FUTlNpbXVsYXRvci5wcm90b3R5cGUsIFwiZ2V0U3RhcnRTdGF0ZVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIE92ZXJyaWRlXG5dLCBQcm9maWxpbmdBVE5TaW11bGF0b3IucHJvdG90eXBlLCBcImNvbXB1dGVTdGFydFN0YXRlXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgT3ZlcnJpZGVcbl0sIFByb2ZpbGluZ0FUTlNpbXVsYXRvci5wcm90b3R5cGUsIFwiY29tcHV0ZVJlYWNoU2V0XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgT3ZlcnJpZGVcbl0sIFByb2ZpbGluZ0FUTlNpbXVsYXRvci5wcm90b3R5cGUsIFwiZ2V0RXhpc3RpbmdUYXJnZXRTdGF0ZVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIE92ZXJyaWRlXG5dLCBQcm9maWxpbmdBVE5TaW11bGF0b3IucHJvdG90eXBlLCBcImNvbXB1dGVUYXJnZXRTdGF0ZVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIE92ZXJyaWRlXG5dLCBQcm9maWxpbmdBVE5TaW11bGF0b3IucHJvdG90eXBlLCBcImV2YWxTZW1hbnRpY0NvbnRleHRJbXBsXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgT3ZlcnJpZGVcbl0sIFByb2ZpbGluZ0FUTlNpbXVsYXRvci5wcm90b3R5cGUsIFwicmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgT3ZlcnJpZGVcbl0sIFByb2ZpbGluZ0FUTlNpbXVsYXRvci5wcm90b3R5cGUsIFwicmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgT3ZlcnJpZGUsXG4gICAgX19wYXJhbSgwLCBOb3ROdWxsKSwgX19wYXJhbSg1LCBOb3ROdWxsKSwgX19wYXJhbSg2LCBOb3ROdWxsKVxuXSwgUHJvZmlsaW5nQVROU2ltdWxhdG9yLnByb3RvdHlwZSwgXCJyZXBvcnRBbWJpZ3VpdHlcIiwgbnVsbCk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/typescript-es6/antlr4es6/atn/ProfilingATNSimulator.js\n')}}]);
