// Generated from ./typescript//bitmarkParser.g4 by ANTLR 4.9.0-SNAPSHOT
import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { Token } from "antlr4ts/Token";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";
import * as Utils from "antlr4ts/misc/Utils";
export class bitmarkParser extends Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator(bitmarkParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return bitmarkParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "bitmarkParser.g4"; }
    // @Override
    get ruleNames() { return bitmarkParser.ruleNames; }
    // @Override
    get serializedATN() { return bitmarkParser._serializedATN; }
    createFailedPredicateException(predicate, message) {
        return new FailedPredicateException(this, predicate, message);
    }
    // @RuleVersion(0)
    bitmark() {
        let _localctx = new BitmarkContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, bitmarkParser.RULE_bitmark);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 473;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 460;
                            this.bitmark_();
                            this.state = 470;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 464;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.S) {
                                                {
                                                    {
                                                        this.state = 461;
                                                        this.match(bitmarkParser.S);
                                                    }
                                                }
                                                this.state = 466;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 467;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                }
                                this.state = 472;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
                            }
                        }
                    }
                    this.state = 475;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitBotint) | (1 << bitmarkParser.BitSelfassess) | (1 << bitmarkParser.BitRating))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitAiPrompt - 32)) | (1 << (bitmarkParser.BitNoteAi - 32)) | (1 << (bitmarkParser.BitSummayAi - 32)) | (1 << (bitmarkParser.BitArticleAi - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitLearningPathBotTraining - 64)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomEvent - 64)) | (1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitImagePrototype - 64)) | (1 << (bitmarkParser.BitImageSuperWide - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitVideoPortrait - 64)) | (1 << (bitmarkParser.BitVideoLandscape - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitEditorial - 96)) | (1 << (bitmarkParser.BitBookFrontispiece - 96)) | (1 << (bitmarkParser.BitBookTitle - 96)) | (1 << (bitmarkParser.BitBookCopyright - 96)) | (1 << (bitmarkParser.BitBookDedication - 96)) | (1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.BitQuestion1 - 128)) | (1 << (bitmarkParser.BitScreenshot - 128)) | (1 << (bitmarkParser.BitFocusImage - 128)) | (1 << (bitmarkParser.BitPhoto - 128)) | (1 << (bitmarkParser.BitBrowserImage - 128)) | (1 << (bitmarkParser.BitBotActionResponse - 128)) | (1 << (bitmarkParser.BitBotActionTrueFalse - 128)) | (1 << (bitmarkParser.BitBotActionRatingNumber - 128)) | (1 << (bitmarkParser.BitBotActionRatingStars - 128)) | (1 << (bitmarkParser.BitChapterSubjectMatter - 128)) | (1 << (bitmarkParser.BitReleaseNote - 128)) | (1 << (bitmarkParser.BitConclusion - 128)) | (1 << (bitmarkParser.BitVendorAmcharts5Chart - 128)) | (1 << (bitmarkParser.BitFeatured - 128)) | (1 << (bitmarkParser.BitNewspaperArticle - 128)) | (1 << (bitmarkParser.BitBlogArticle - 128)) | (1 << (bitmarkParser.BitBookArticle - 128)) | (1 << (bitmarkParser.BitNotebookArticle - 128)) | (1 << (bitmarkParser.BitWorkbookArticle - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPS - 128)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.COLON - 163)) | (1 << (bitmarkParser.AMP - 163)) | (1 << (bitmarkParser.Greater - 163)) | (1 << (bitmarkParser.Less - 163)) | (1 << (bitmarkParser.RightAngle - 163)) | (1 << (bitmarkParser.RightArrow - 163)) | (1 << (bitmarkParser.DBLEQ - 163)) | (1 << (bitmarkParser.QUOTE_INDEX - 163)) | (1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NOTBITMARK - 163)) | (1 << (bitmarkParser.ELIPSIS - 163)) | (1 << (bitmarkParser.SENTENCE - 163)) | (1 << (bitmarkParser.BARSTRING - 163)))) !== 0) || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                this.state = 480;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 477;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 482;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 483;
                this.match(bitmarkParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bitmark_() {
        let _localctx = new Bitmark_Context(this._ctx, this.state);
        this.enterRule(_localctx, 2, bitmarkParser.RULE_bitmark_);
        try {
            this.state = 487;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.BitBook:
                case bitmarkParser.BitChapter:
                case bitmarkParser.BitToc:
                case bitmarkParser.BitSummary:
                case bitmarkParser.BitIntlink:
                case bitmarkParser.BitIntRef:
                case bitmarkParser.BitAlias:
                case bitmarkParser.BitGroups:
                case bitmarkParser.BitGroupt:
                case bitmarkParser.BitStatement:
                case bitmarkParser.BitDetails:
                case bitmarkParser.BitSampleSolution:
                case bitmarkParser.BitTakeAudio:
                case bitmarkParser.BitArticle:
                case bitmarkParser.BitPage:
                case bitmarkParser.BitEssay:
                case bitmarkParser.BitMessage:
                case bitmarkParser.BitCorrection:
                case bitmarkParser.BitMark:
                case bitmarkParser.BitTakepic:
                case bitmarkParser.BitRecaud:
                case bitmarkParser.BitPrepnote:
                case bitmarkParser.BitAssign:
                case bitmarkParser.BitBotint:
                case bitmarkParser.BitSelfassess:
                case bitmarkParser.BitRating:
                case bitmarkParser.BitSurvey:
                case bitmarkParser.BitSurvey1:
                case bitmarkParser.BitSurveyanon:
                case bitmarkParser.BitSurveyanon1:
                case bitmarkParser.BitNote:
                case bitmarkParser.BitInfo:
                case bitmarkParser.BitWarning:
                case bitmarkParser.BitRemark:
                case bitmarkParser.BitHint:
                case bitmarkParser.BitHelp:
                case bitmarkParser.BitDanger:
                case bitmarkParser.BitBug:
                case bitmarkParser.BitSidenote:
                case bitmarkParser.BitStickynote:
                case bitmarkParser.BitQuote:
                case bitmarkParser.BitFootnote:
                case bitmarkParser.BitExample:
                case bitmarkParser.BitButtonCopytext:
                case bitmarkParser.BitWbtContinue:
                case bitmarkParser.BitLearningPathDetails:
                case bitmarkParser.BitAiPrompt:
                case bitmarkParser.BitNoteAi:
                case bitmarkParser.BitSummayAi:
                case bitmarkParser.BitArticleAi:
                case bitmarkParser.BitLearningPathLti:
                case bitmarkParser.BitLearningPathStep:
                case bitmarkParser.BitLearningPathBook:
                case bitmarkParser.BitLearningPathSign:
                case bitmarkParser.BitLearningPathVideoCall:
                case bitmarkParser.BitLearningPathLearningGoal:
                case bitmarkParser.BitLearningPathClosing:
                case bitmarkParser.BitLearningPathFeedback:
                case bitmarkParser.BitLearningPathBotTraining:
                case bitmarkParser.BitLearningPathExternalLink:
                case bitmarkParser.BitLearningPathClassroomTraining:
                case bitmarkParser.BitLearningPathClassroomEvent:
                case bitmarkParser.BitBotActionSend:
                case bitmarkParser.BitBotActionAnnounce:
                case bitmarkParser.BitBotActionSave:
                case bitmarkParser.BitBotActionRemind:
                case bitmarkParser.BitVendorPadletEmbed:
                case bitmarkParser.BitScorm:
                case bitmarkParser.BitImage:
                case bitmarkParser.BitImageLink:
                case bitmarkParser.BitImageZoom:
                case bitmarkParser.BitImagePrototype:
                case bitmarkParser.BitImageSuperWide:
                case bitmarkParser.BitAudio:
                case bitmarkParser.BitAudioLink:
                case bitmarkParser.BitAudioEmbed:
                case bitmarkParser.BitVideo:
                case bitmarkParser.BitVideoLink:
                case bitmarkParser.BitVideoEmbed:
                case bitmarkParser.BitVideoPortrait:
                case bitmarkParser.BitVideoLandscape:
                case bitmarkParser.BitStillImageFilm:
                case bitmarkParser.BitStillImageFilmLink:
                case bitmarkParser.BitStillImageFilmEmbed:
                case bitmarkParser.BitWebsiteLink:
                case bitmarkParser.BitDocument:
                case bitmarkParser.BitDocumentLink:
                case bitmarkParser.BitDocumentEmbed:
                case bitmarkParser.BitDocumentDownload:
                case bitmarkParser.BitAppLink:
                case bitmarkParser.BitEditorial:
                case bitmarkParser.BitBookFrontispiece:
                case bitmarkParser.BitBookTitle:
                case bitmarkParser.BitBookCopyright:
                case bitmarkParser.BitBookDedication:
                case bitmarkParser.BitBookForword:
                case bitmarkParser.BitBookPreface:
                case bitmarkParser.BitBookPrologue:
                case bitmarkParser.BitBookEpilogue:
                case bitmarkParser.BitBookIntroduction:
                case bitmarkParser.BitBookIncitingIncident:
                case bitmarkParser.BitBookConclusion:
                case bitmarkParser.BitBookAfterword:
                case bitmarkParser.BitBookPostscript:
                case bitmarkParser.BitBookappendix:
                case bitmarkParser.BitBookAddendum:
                case bitmarkParser.BitBookAcknowledgments:
                case bitmarkParser.BitBookListOfContributors:
                case bitmarkParser.BitBookBibliography:
                case bitmarkParser.BitBookReferenceList:
                case bitmarkParser.BitBookEndnotes:
                case bitmarkParser.BitBookNotes:
                case bitmarkParser.BitBookCopyrightPermissions:
                case bitmarkParser.BitBookTeaser:
                case bitmarkParser.BitBookAutherBio:
                case bitmarkParser.BitBookRequestForABookReview:
                case bitmarkParser.BitBookComingSoon:
                case bitmarkParser.BitBookReadMore:
                case bitmarkParser.BitBookSummary:
                case bitmarkParser.BitBookEpigraph:
                case bitmarkParser.BitCode:
                case bitmarkParser.BitCard1:
                case bitmarkParser.BitQuestion1:
                case bitmarkParser.BitScreenshot:
                case bitmarkParser.BitFocusImage:
                case bitmarkParser.BitPhoto:
                case bitmarkParser.BitBrowserImage:
                case bitmarkParser.BitBotActionResponse:
                case bitmarkParser.BitBotActionTrueFalse:
                case bitmarkParser.BitBotActionRatingNumber:
                case bitmarkParser.BitBotActionRatingStars:
                case bitmarkParser.BitChapterSubjectMatter:
                case bitmarkParser.BitReleaseNote:
                case bitmarkParser.BitConclusion:
                case bitmarkParser.BitVendorAmcharts5Chart:
                case bitmarkParser.BitFeatured:
                case bitmarkParser.BitNewspaperArticle:
                case bitmarkParser.BitBlogArticle:
                case bitmarkParser.BitBookArticle:
                case bitmarkParser.BitNotebookArticle:
                case bitmarkParser.BitWorkbookArticle:
                case bitmarkParser.OPDANGLE:
                case bitmarkParser.OPQ:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 485;
                        this.bit();
                    }
                    break;
                case bitmarkParser.S:
                case bitmarkParser.OPS:
                case bitmarkParser.COLON:
                case bitmarkParser.AMP:
                case bitmarkParser.Greater:
                case bitmarkParser.Less:
                case bitmarkParser.RightAngle:
                case bitmarkParser.RightArrow:
                case bitmarkParser.DBLEQ:
                case bitmarkParser.QUOTE_INDEX:
                case bitmarkParser.NUMERIC:
                case bitmarkParser.STRING:
                case bitmarkParser.NOTBITMARK:
                case bitmarkParser.ELIPSIS:
                case bitmarkParser.SENTENCE:
                case bitmarkParser.BARSTRING:
                case bitmarkParser.AmpAudio:
                case bitmarkParser.AmpImage:
                case bitmarkParser.AmpVideo:
                case bitmarkParser.AmpArticle:
                case bitmarkParser.AmpDocument:
                case bitmarkParser.AmpApp:
                case bitmarkParser.AmpWebsite:
                case bitmarkParser.AmpStillImageFilm:
                case bitmarkParser.AmpAudioLink:
                case bitmarkParser.AmpImageLink:
                case bitmarkParser.AmpVideoLink:
                case bitmarkParser.AmpArticleLink:
                case bitmarkParser.AmpDocumentLink:
                case bitmarkParser.AmpAppLink:
                case bitmarkParser.AmpWebsiteLink:
                case bitmarkParser.AmpStillImageFilmLink:
                case bitmarkParser.BitmarkMinus:
                case bitmarkParser.BitmarkPlus:
                case bitmarkParser.URL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 486;
                        this.lines();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit() {
        let _localctx = new BitContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, bitmarkParser.RULE_bit);
        try {
            this.state = 631;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.BitBook:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 489;
                        this.book();
                    }
                    break;
                case bitmarkParser.BitChapter:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 490;
                        this.chapter();
                    }
                    break;
                case bitmarkParser.BitAiPrompt:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 491;
                        this.ai_prompt();
                    }
                    break;
                case bitmarkParser.BitNoteAi:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 492;
                        this.note_ai();
                    }
                    break;
                case bitmarkParser.BitSummayAi:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 493;
                        this.summary_ai();
                    }
                    break;
                case bitmarkParser.BitArticleAi:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 494;
                        this.article_ai();
                    }
                    break;
                case bitmarkParser.BitSummary:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 495;
                        this.summary();
                    }
                    break;
                case bitmarkParser.BitToc:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 496;
                        this.toc();
                    }
                    break;
                case bitmarkParser.BitAlias:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 497;
                        this.bit_alias();
                    }
                    break;
                case bitmarkParser.BitIntlink:
                case bitmarkParser.BitIntRef:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 498;
                        this.internal_link();
                    }
                    break;
                case bitmarkParser.OPDANGLE:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 499;
                        this.anchor();
                    }
                    break;
                case bitmarkParser.BitGroups:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 500;
                        this.group_born();
                    }
                    break;
                case bitmarkParser.BitGroupt:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 501;
                        this.group_died();
                    }
                    break;
                case bitmarkParser.BitEssay:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 502;
                        this.essay();
                    }
                    break;
                case bitmarkParser.BitCorrection:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 503;
                        this.correction();
                    }
                    break;
                case bitmarkParser.BitMark:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 504;
                        this.mark_();
                    }
                    break;
                case bitmarkParser.BitTakepic:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 505;
                        this.take_picture();
                    }
                    break;
                case bitmarkParser.BitTakeAudio:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 506;
                        this.take_audio();
                    }
                    break;
                case bitmarkParser.BitRecaud:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 507;
                        this.record_audio();
                    }
                    break;
                case bitmarkParser.BitPrepnote:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 508;
                        this.preparation_note();
                    }
                    break;
                case bitmarkParser.BitAssign:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 509;
                        this.assignment();
                    }
                    break;
                case bitmarkParser.BitArticle:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 510;
                        this.article();
                    }
                    break;
                case bitmarkParser.BitStatement:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 511;
                        this.statement();
                    }
                    break;
                case bitmarkParser.BitDetails:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 512;
                        this.details();
                    }
                    break;
                case bitmarkParser.BitSampleSolution:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 513;
                        this.sample_solution();
                    }
                    break;
                case bitmarkParser.BitButtonCopytext:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 514;
                        this.buttoncopytext();
                    }
                    break;
                case bitmarkParser.BitWbtContinue:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 515;
                        this.wbtcontinue();
                    }
                    break;
                case bitmarkParser.BitLearningPathDetails:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 516;
                        this.learningpathdetails();
                    }
                    break;
                case bitmarkParser.BitNote:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 517;
                        this.note();
                    }
                    break;
                case bitmarkParser.BitInfo:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 518;
                        this.info();
                    }
                    break;
                case bitmarkParser.BitWarning:
                    this.enterOuterAlt(_localctx, 31);
                    {
                        this.state = 519;
                        this.warning();
                    }
                    break;
                case bitmarkParser.BitRemark:
                    this.enterOuterAlt(_localctx, 32);
                    {
                        this.state = 520;
                        this.remark();
                    }
                    break;
                case bitmarkParser.BitHint:
                    this.enterOuterAlt(_localctx, 33);
                    {
                        this.state = 521;
                        this.hintbit();
                    }
                    break;
                case bitmarkParser.BitHelp:
                    this.enterOuterAlt(_localctx, 34);
                    {
                        this.state = 522;
                        this.help();
                    }
                    break;
                case bitmarkParser.BitDanger:
                    this.enterOuterAlt(_localctx, 35);
                    {
                        this.state = 523;
                        this.danger();
                    }
                    break;
                case bitmarkParser.BitBug:
                    this.enterOuterAlt(_localctx, 36);
                    {
                        this.state = 524;
                        this.bug();
                    }
                    break;
                case bitmarkParser.BitSidenote:
                    this.enterOuterAlt(_localctx, 37);
                    {
                        this.state = 525;
                        this.sidenote();
                    }
                    break;
                case bitmarkParser.BitStickynote:
                    this.enterOuterAlt(_localctx, 38);
                    {
                        this.state = 526;
                        this.stickynote();
                    }
                    break;
                case bitmarkParser.BitQuote:
                    this.enterOuterAlt(_localctx, 39);
                    {
                        this.state = 527;
                        this.quote();
                    }
                    break;
                case bitmarkParser.BitFootnote:
                    this.enterOuterAlt(_localctx, 40);
                    {
                        this.state = 528;
                        this.footnote();
                    }
                    break;
                case bitmarkParser.BitExample:
                    this.enterOuterAlt(_localctx, 41);
                    {
                        this.state = 529;
                        this.examplebit();
                    }
                    break;
                case bitmarkParser.BitPage:
                    this.enterOuterAlt(_localctx, 42);
                    {
                        this.state = 530;
                        this.page();
                    }
                    break;
                case bitmarkParser.BitMessage:
                    this.enterOuterAlt(_localctx, 43);
                    {
                        this.state = 531;
                        this.message();
                    }
                    break;
                case bitmarkParser.BitBotint:
                    this.enterOuterAlt(_localctx, 44);
                    {
                        this.state = 532;
                        this.bot_interview();
                    }
                    break;
                case bitmarkParser.BitSelfassess:
                    this.enterOuterAlt(_localctx, 45);
                    {
                        this.state = 533;
                        this.self_assessment();
                    }
                    break;
                case bitmarkParser.BitRating:
                    this.enterOuterAlt(_localctx, 46);
                    {
                        this.state = 534;
                        this.rating();
                    }
                    break;
                case bitmarkParser.BitSurvey:
                    this.enterOuterAlt(_localctx, 47);
                    {
                        this.state = 535;
                        this.survey();
                    }
                    break;
                case bitmarkParser.BitSurvey1:
                    this.enterOuterAlt(_localctx, 48);
                    {
                        this.state = 536;
                        this.survey_1();
                    }
                    break;
                case bitmarkParser.BitSurveyanon:
                    this.enterOuterAlt(_localctx, 49);
                    {
                        this.state = 537;
                        this.survey_anonymous();
                    }
                    break;
                case bitmarkParser.BitSurveyanon1:
                    this.enterOuterAlt(_localctx, 50);
                    {
                        this.state = 538;
                        this.survey_anonymous_1();
                    }
                    break;
                case bitmarkParser.OPQ:
                    this.enterOuterAlt(_localctx, 51);
                    {
                        this.state = 539;
                        this.hint();
                    }
                    break;
                case bitmarkParser.BitVendorPadletEmbed:
                    this.enterOuterAlt(_localctx, 52);
                    {
                        this.state = 540;
                        this.vendor_padlet_embed();
                    }
                    break;
                case bitmarkParser.BitScorm:
                    this.enterOuterAlt(_localctx, 53);
                    {
                        this.state = 541;
                        this.scorm();
                    }
                    break;
                case bitmarkParser.BitLearningPathLti:
                    this.enterOuterAlt(_localctx, 54);
                    {
                        this.state = 542;
                        this.learning_path_lti();
                    }
                    break;
                case bitmarkParser.BitLearningPathStep:
                    this.enterOuterAlt(_localctx, 55);
                    {
                        this.state = 543;
                        this.learning_path_step();
                    }
                    break;
                case bitmarkParser.BitLearningPathBook:
                    this.enterOuterAlt(_localctx, 56);
                    {
                        this.state = 544;
                        this.learning_path_book();
                    }
                    break;
                case bitmarkParser.BitLearningPathSign:
                    this.enterOuterAlt(_localctx, 57);
                    {
                        this.state = 545;
                        this.learning_path_sign();
                    }
                    break;
                case bitmarkParser.BitLearningPathVideoCall:
                    this.enterOuterAlt(_localctx, 58);
                    {
                        this.state = 546;
                        this.learning_path_video_call();
                    }
                    break;
                case bitmarkParser.BitLearningPathLearningGoal:
                    this.enterOuterAlt(_localctx, 59);
                    {
                        this.state = 547;
                        this.learning_path_learning_goal();
                    }
                    break;
                case bitmarkParser.BitLearningPathClosing:
                    this.enterOuterAlt(_localctx, 60);
                    {
                        this.state = 548;
                        this.learning_path_closing();
                    }
                    break;
                case bitmarkParser.BitLearningPathFeedback:
                    this.enterOuterAlt(_localctx, 61);
                    {
                        this.state = 549;
                        this.learning_path_feedback();
                    }
                    break;
                case bitmarkParser.BitLearningPathBotTraining:
                    this.enterOuterAlt(_localctx, 62);
                    {
                        this.state = 550;
                        this.learning_path_bot_training();
                    }
                    break;
                case bitmarkParser.BitLearningPathExternalLink:
                    this.enterOuterAlt(_localctx, 63);
                    {
                        this.state = 551;
                        this.learning_path_external_link();
                    }
                    break;
                case bitmarkParser.BitLearningPathClassroomTraining:
                    this.enterOuterAlt(_localctx, 64);
                    {
                        this.state = 552;
                        this.learning_path_classroom_training();
                    }
                    break;
                case bitmarkParser.BitLearningPathClassroomEvent:
                    this.enterOuterAlt(_localctx, 65);
                    {
                        this.state = 553;
                        this.learning_path_classroom_event();
                    }
                    break;
                case bitmarkParser.BitBotActionSend:
                    this.enterOuterAlt(_localctx, 66);
                    {
                        this.state = 554;
                        this.bot_action_send();
                    }
                    break;
                case bitmarkParser.BitBotActionAnnounce:
                    this.enterOuterAlt(_localctx, 67);
                    {
                        this.state = 555;
                        this.bot_action_announce();
                    }
                    break;
                case bitmarkParser.BitBotActionSave:
                    this.enterOuterAlt(_localctx, 68);
                    {
                        this.state = 556;
                        this.bot_action_save();
                    }
                    break;
                case bitmarkParser.BitBotActionRemind:
                    this.enterOuterAlt(_localctx, 69);
                    {
                        this.state = 557;
                        this.bot_action_remind();
                    }
                    break;
                case bitmarkParser.BitBotActionResponse:
                    this.enterOuterAlt(_localctx, 70);
                    {
                        this.state = 558;
                        this.bot_action_response();
                    }
                    break;
                case bitmarkParser.BitBotActionTrueFalse:
                    this.enterOuterAlt(_localctx, 71);
                    {
                        this.state = 559;
                        this.bot_action_true_false();
                    }
                    break;
                case bitmarkParser.BitBotActionRatingNumber:
                    this.enterOuterAlt(_localctx, 72);
                    {
                        this.state = 560;
                        this.bot_action_rating_number();
                    }
                    break;
                case bitmarkParser.BitBotActionRatingStars:
                    this.enterOuterAlt(_localctx, 73);
                    {
                        this.state = 561;
                        this.bot_action_rating_stars();
                    }
                    break;
                case bitmarkParser.BitImage:
                    this.enterOuterAlt(_localctx, 74);
                    {
                        this.state = 562;
                        this.bit_image();
                    }
                    break;
                case bitmarkParser.BitImageLink:
                    this.enterOuterAlt(_localctx, 75);
                    {
                        this.state = 563;
                        this.bit_imageLink();
                    }
                    break;
                case bitmarkParser.BitImageZoom:
                    this.enterOuterAlt(_localctx, 76);
                    {
                        this.state = 564;
                        this.bit_imageZoom();
                    }
                    break;
                case bitmarkParser.BitImagePrototype:
                    this.enterOuterAlt(_localctx, 77);
                    {
                        this.state = 565;
                        this.bit_imagePrototype();
                    }
                    break;
                case bitmarkParser.BitImageSuperWide:
                    this.enterOuterAlt(_localctx, 78);
                    {
                        this.state = 566;
                        this.bit_imageSuperWide();
                    }
                    break;
                case bitmarkParser.BitAudio:
                    this.enterOuterAlt(_localctx, 79);
                    {
                        this.state = 567;
                        this.bit_audio();
                    }
                    break;
                case bitmarkParser.BitAudioLink:
                    this.enterOuterAlt(_localctx, 80);
                    {
                        this.state = 568;
                        this.bit_audioLink();
                    }
                    break;
                case bitmarkParser.BitAudioEmbed:
                    this.enterOuterAlt(_localctx, 81);
                    {
                        this.state = 569;
                        this.bit_audioEmbed();
                    }
                    break;
                case bitmarkParser.BitVideo:
                    this.enterOuterAlt(_localctx, 82);
                    {
                        this.state = 570;
                        this.bit_video();
                    }
                    break;
                case bitmarkParser.BitVideoLink:
                    this.enterOuterAlt(_localctx, 83);
                    {
                        this.state = 571;
                        this.bit_videoLink();
                    }
                    break;
                case bitmarkParser.BitVideoEmbed:
                    this.enterOuterAlt(_localctx, 84);
                    {
                        this.state = 572;
                        this.bit_videoEmbed();
                    }
                    break;
                case bitmarkParser.BitVideoPortrait:
                    this.enterOuterAlt(_localctx, 85);
                    {
                        this.state = 573;
                        this.bit_videoPortrait();
                    }
                    break;
                case bitmarkParser.BitVideoLandscape:
                    this.enterOuterAlt(_localctx, 86);
                    {
                        this.state = 574;
                        this.bit_videoLandscape();
                    }
                    break;
                case bitmarkParser.BitStillImageFilm:
                    this.enterOuterAlt(_localctx, 87);
                    {
                        this.state = 575;
                        this.bit_stillImageFilm();
                    }
                    break;
                case bitmarkParser.BitStillImageFilmLink:
                    this.enterOuterAlt(_localctx, 88);
                    {
                        this.state = 576;
                        this.bit_stillImageFilmLink();
                    }
                    break;
                case bitmarkParser.BitStillImageFilmEmbed:
                    this.enterOuterAlt(_localctx, 89);
                    {
                        this.state = 577;
                        this.bit_stillImageFilmEmbed();
                    }
                    break;
                case bitmarkParser.BitDocument:
                    this.enterOuterAlt(_localctx, 90);
                    {
                        this.state = 578;
                        this.bit_document();
                    }
                    break;
                case bitmarkParser.BitDocumentLink:
                    this.enterOuterAlt(_localctx, 91);
                    {
                        this.state = 579;
                        this.bit_documentLink();
                    }
                    break;
                case bitmarkParser.BitDocumentEmbed:
                    this.enterOuterAlt(_localctx, 92);
                    {
                        this.state = 580;
                        this.bit_documentEmbed();
                    }
                    break;
                case bitmarkParser.BitDocumentDownload:
                    this.enterOuterAlt(_localctx, 93);
                    {
                        this.state = 581;
                        this.bit_documentDownload();
                    }
                    break;
                case bitmarkParser.BitWebsiteLink:
                    this.enterOuterAlt(_localctx, 94);
                    {
                        this.state = 582;
                        this.bit_websiteLink();
                    }
                    break;
                case bitmarkParser.BitAppLink:
                    this.enterOuterAlt(_localctx, 95);
                    {
                        this.state = 583;
                        this.bit_appLink();
                    }
                    break;
                case bitmarkParser.BitEditorial:
                    this.enterOuterAlt(_localctx, 96);
                    {
                        this.state = 584;
                        this.bit_editorial();
                    }
                    break;
                case bitmarkParser.BitBookFrontispiece:
                    this.enterOuterAlt(_localctx, 97);
                    {
                        this.state = 585;
                        this.book_frontispiece();
                    }
                    break;
                case bitmarkParser.BitBookTitle:
                    this.enterOuterAlt(_localctx, 98);
                    {
                        this.state = 586;
                        this.book_title();
                    }
                    break;
                case bitmarkParser.BitBookCopyright:
                    this.enterOuterAlt(_localctx, 99);
                    {
                        this.state = 587;
                        this.book_copyright();
                    }
                    break;
                case bitmarkParser.BitBookDedication:
                    this.enterOuterAlt(_localctx, 100);
                    {
                        this.state = 588;
                        this.book_dedication();
                    }
                    break;
                case bitmarkParser.BitBookForword:
                    this.enterOuterAlt(_localctx, 101);
                    {
                        this.state = 589;
                        this.book_forword();
                    }
                    break;
                case bitmarkParser.BitBookPreface:
                    this.enterOuterAlt(_localctx, 102);
                    {
                        this.state = 590;
                        this.book_preface();
                    }
                    break;
                case bitmarkParser.BitBookPrologue:
                    this.enterOuterAlt(_localctx, 103);
                    {
                        this.state = 591;
                        this.book_prologue();
                    }
                    break;
                case bitmarkParser.BitBookEpilogue:
                    this.enterOuterAlt(_localctx, 104);
                    {
                        this.state = 592;
                        this.book_epilogue();
                    }
                    break;
                case bitmarkParser.BitBookIntroduction:
                    this.enterOuterAlt(_localctx, 105);
                    {
                        this.state = 593;
                        this.book_introduction();
                    }
                    break;
                case bitmarkParser.BitBookIncitingIncident:
                    this.enterOuterAlt(_localctx, 106);
                    {
                        this.state = 594;
                        this.book_inciting_incident();
                    }
                    break;
                case bitmarkParser.BitBookConclusion:
                    this.enterOuterAlt(_localctx, 107);
                    {
                        this.state = 595;
                        this.book_conclusion();
                    }
                    break;
                case bitmarkParser.BitBookAfterword:
                    this.enterOuterAlt(_localctx, 108);
                    {
                        this.state = 596;
                        this.book_afterword();
                    }
                    break;
                case bitmarkParser.BitBookPostscript:
                    this.enterOuterAlt(_localctx, 109);
                    {
                        this.state = 597;
                        this.book_postscript();
                    }
                    break;
                case bitmarkParser.BitBookappendix:
                    this.enterOuterAlt(_localctx, 110);
                    {
                        this.state = 598;
                        this.book_appendix();
                    }
                    break;
                case bitmarkParser.BitBookAddendum:
                    this.enterOuterAlt(_localctx, 111);
                    {
                        this.state = 599;
                        this.book_addendum();
                    }
                    break;
                case bitmarkParser.BitBookAcknowledgments:
                    this.enterOuterAlt(_localctx, 112);
                    {
                        this.state = 600;
                        this.book_acknowledgments();
                    }
                    break;
                case bitmarkParser.BitBookListOfContributors:
                    this.enterOuterAlt(_localctx, 113);
                    {
                        this.state = 601;
                        this.book_list_of_contributors();
                    }
                    break;
                case bitmarkParser.BitBookBibliography:
                    this.enterOuterAlt(_localctx, 114);
                    {
                        this.state = 602;
                        this.book_bibliography();
                    }
                    break;
                case bitmarkParser.BitBookReferenceList:
                    this.enterOuterAlt(_localctx, 115);
                    {
                        this.state = 603;
                        this.book_reference_list();
                    }
                    break;
                case bitmarkParser.BitBookEndnotes:
                    this.enterOuterAlt(_localctx, 116);
                    {
                        this.state = 604;
                        this.book_endnotes();
                    }
                    break;
                case bitmarkParser.BitBookNotes:
                    this.enterOuterAlt(_localctx, 117);
                    {
                        this.state = 605;
                        this.book_notes();
                    }
                    break;
                case bitmarkParser.BitBookCopyrightPermissions:
                    this.enterOuterAlt(_localctx, 118);
                    {
                        this.state = 606;
                        this.book_copyright_permissions();
                    }
                    break;
                case bitmarkParser.BitBookTeaser:
                    this.enterOuterAlt(_localctx, 119);
                    {
                        this.state = 607;
                        this.book_teaser();
                    }
                    break;
                case bitmarkParser.BitBookAutherBio:
                    this.enterOuterAlt(_localctx, 120);
                    {
                        this.state = 608;
                        this.book_auther_bio();
                    }
                    break;
                case bitmarkParser.BitBookRequestForABookReview:
                    this.enterOuterAlt(_localctx, 121);
                    {
                        this.state = 609;
                        this.book_request_for_a_book_review();
                    }
                    break;
                case bitmarkParser.BitBookComingSoon:
                    this.enterOuterAlt(_localctx, 122);
                    {
                        this.state = 610;
                        this.book_coming_soon();
                    }
                    break;
                case bitmarkParser.BitBookReadMore:
                    this.enterOuterAlt(_localctx, 123);
                    {
                        this.state = 611;
                        this.book_read_more();
                    }
                    break;
                case bitmarkParser.BitBookSummary:
                    this.enterOuterAlt(_localctx, 124);
                    {
                        this.state = 612;
                        this.book_summary();
                    }
                    break;
                case bitmarkParser.BitBookEpigraph:
                    this.enterOuterAlt(_localctx, 125);
                    {
                        this.state = 613;
                        this.book_epigraph();
                    }
                    break;
                case bitmarkParser.BitCode:
                    this.enterOuterAlt(_localctx, 126);
                    {
                        this.state = 614;
                        this.code();
                    }
                    break;
                case bitmarkParser.BitCard1:
                    this.enterOuterAlt(_localctx, 127);
                    {
                        this.state = 615;
                        this.card1();
                    }
                    break;
                case bitmarkParser.BitQuestion1:
                    this.enterOuterAlt(_localctx, 128);
                    {
                        this.state = 616;
                        this.question1();
                    }
                    break;
                case bitmarkParser.BitScreenshot:
                    this.enterOuterAlt(_localctx, 129);
                    {
                        this.state = 617;
                        this.screenshot();
                    }
                    break;
                case bitmarkParser.BitFocusImage:
                    this.enterOuterAlt(_localctx, 130);
                    {
                        this.state = 618;
                        this.focus_image();
                    }
                    break;
                case bitmarkParser.BitPhoto:
                    this.enterOuterAlt(_localctx, 131);
                    {
                        this.state = 619;
                        this.photo();
                    }
                    break;
                case bitmarkParser.BitBrowserImage:
                    this.enterOuterAlt(_localctx, 132);
                    {
                        this.state = 620;
                        this.browser_image();
                    }
                    break;
                case bitmarkParser.BitChapterSubjectMatter:
                    this.enterOuterAlt(_localctx, 133);
                    {
                        this.state = 621;
                        this.chapter_subject_matter();
                    }
                    break;
                case bitmarkParser.BitReleaseNote:
                    this.enterOuterAlt(_localctx, 134);
                    {
                        this.state = 622;
                        this.release_note();
                    }
                    break;
                case bitmarkParser.BitConclusion:
                    this.enterOuterAlt(_localctx, 135);
                    {
                        this.state = 623;
                        this.conclusion();
                    }
                    break;
                case bitmarkParser.BitFeatured:
                    this.enterOuterAlt(_localctx, 136);
                    {
                        this.state = 624;
                        this.featured();
                    }
                    break;
                case bitmarkParser.BitVendorAmcharts5Chart:
                    this.enterOuterAlt(_localctx, 137);
                    {
                        this.state = 625;
                        this.vendor_amcharts_5_chart();
                    }
                    break;
                case bitmarkParser.BitNewspaperArticle:
                    this.enterOuterAlt(_localctx, 138);
                    {
                        this.state = 626;
                        this.newspaper_article();
                    }
                    break;
                case bitmarkParser.BitBlogArticle:
                    this.enterOuterAlt(_localctx, 139);
                    {
                        this.state = 627;
                        this.blog_article();
                    }
                    break;
                case bitmarkParser.BitBookArticle:
                    this.enterOuterAlt(_localctx, 140);
                    {
                        this.state = 628;
                        this.book_article();
                    }
                    break;
                case bitmarkParser.BitNotebookArticle:
                    this.enterOuterAlt(_localctx, 141);
                    {
                        this.state = 629;
                        this.notebook_article();
                    }
                    break;
                case bitmarkParser.BitWorkbookArticle:
                    this.enterOuterAlt(_localctx, 142);
                    {
                        this.state = 630;
                        this.workbook_article();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book() {
        let _localctx = new BookContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, bitmarkParser.RULE_book);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 633;
                this.match(bitmarkParser.BitBook);
                this.state = 634;
                this.format();
                this.state = 635;
                this.match(bitmarkParser.CL);
                this.state = 639;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 636;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 641;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 649;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 642;
                                    this.bitElem();
                                    this.state = 646;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 643;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 648;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 651;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    chapter() {
        let _localctx = new ChapterContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, bitmarkParser.RULE_chapter);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 653;
                this.match(bitmarkParser.BitChapter);
                this.state = 654;
                this.format();
                this.state = 655;
                this.match(bitmarkParser.CL);
                this.state = 659;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 656;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 661;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 665;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 10, this._ctx)) {
                    case 1:
                        {
                            this.state = 662;
                            this.anchor();
                            this.state = 663;
                            this.match(bitmarkParser.NL);
                        }
                        break;
                }
                this.state = 667;
                this.resource();
                this.state = 677;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 671;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 668;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 673;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 674;
                                this.resource();
                            }
                        }
                    }
                    this.state = 679;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ai_prompt() {
        let _localctx = new Ai_promptContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, bitmarkParser.RULE_ai_prompt);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 680;
                this.match(bitmarkParser.BitAiPrompt);
                this.state = 681;
                this.format();
                this.state = 682;
                this.match(bitmarkParser.CL);
                this.state = 686;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 683;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 688;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 696;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 689;
                                    this.bitElem();
                                    this.state = 693;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 690;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 695;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 698;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    note_ai() {
        let _localctx = new Note_aiContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, bitmarkParser.RULE_note_ai);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 700;
                this.match(bitmarkParser.BitNoteAi);
                this.state = 701;
                this.format();
                this.state = 702;
                this.match(bitmarkParser.CL);
                this.state = 706;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 703;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 708;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 716;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 709;
                                    this.bitElem();
                                    this.state = 713;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 710;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 715;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 718;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 18, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    summary_ai() {
        let _localctx = new Summary_aiContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, bitmarkParser.RULE_summary_ai);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 720;
                this.match(bitmarkParser.BitSummayAi);
                this.state = 721;
                this.format();
                this.state = 722;
                this.match(bitmarkParser.CL);
                this.state = 726;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 723;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 728;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 736;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 729;
                                    this.bitElem();
                                    this.state = 733;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 730;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 735;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 738;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    article_ai() {
        let _localctx = new Article_aiContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, bitmarkParser.RULE_article_ai);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 740;
                this.match(bitmarkParser.BitArticleAi);
                this.state = 741;
                this.format();
                this.state = 742;
                this.match(bitmarkParser.CL);
                this.state = 746;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 743;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 748;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 756;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 749;
                                    this.bitElem();
                                    this.state = 753;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 750;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 755;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 758;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 24, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    toc() {
        let _localctx = new TocContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, bitmarkParser.RULE_toc);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 760;
                this.match(bitmarkParser.BitToc);
                this.state = 762;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                    {
                        this.state = 761;
                        this.s_and_w();
                    }
                }
                this.state = 764;
                this.match(bitmarkParser.CL);
                this.state = 765;
                this.match(bitmarkParser.NL);
                this.state = 769;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPA || _la === bitmarkParser.OpAtCopyright) {
                    {
                        this.state = 766;
                        this.atdef();
                        this.state = 767;
                        this.match(bitmarkParser.NL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    summary() {
        let _localctx = new SummaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, bitmarkParser.RULE_summary);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 771;
                this.match(bitmarkParser.BitSummary);
                this.state = 772;
                this.match(bitmarkParser.CL);
                this.state = 776;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 773;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 778;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
                }
                this.state = 779;
                this.title_etc();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    internal_link() {
        let _localctx = new Internal_linkContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, bitmarkParser.RULE_internal_link);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 781;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.BitIntlink || _la === bitmarkParser.BitIntRef)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 783;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
                    {
                        this.state = 782;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 785;
                this.match(bitmarkParser.CL);
                this.state = 795;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 789;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 786;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 791;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 792;
                                this.bitElem();
                            }
                        }
                    }
                    this.state = 797;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_alias() {
        let _localctx = new Bit_aliasContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, bitmarkParser.RULE_bit_alias);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 798;
                this.match(bitmarkParser.BitAlias);
                this.state = 799;
                this.match(bitmarkParser.CL);
                this.state = 800;
                this.angleref();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    title_etc() {
        let _localctx = new Title_etcContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, bitmarkParser.RULE_title_etc);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 816;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 803;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === bitmarkParser.NL) {
                                    {
                                        this.state = 802;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 812;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.OPHASH:
                                        {
                                            this.state = 805;
                                            this.title();
                                        }
                                        break;
                                    case bitmarkParser.OPA:
                                    case bitmarkParser.OpAtCopyright:
                                        {
                                            this.state = 806;
                                            this.atdef();
                                        }
                                        break;
                                    case bitmarkParser.OPC:
                                        {
                                            this.state = 807;
                                            this.item();
                                        }
                                        break;
                                    case bitmarkParser.OPB:
                                        {
                                            this.state = 808;
                                            this.instruction();
                                        }
                                        break;
                                    case bitmarkParser.OPRANGLES:
                                    case bitmarkParser.OPRANGLEL:
                                        {
                                            this.state = 809;
                                            this.angleref();
                                        }
                                        break;
                                    case bitmarkParser.OPDANGLE:
                                        {
                                            this.state = 810;
                                            this.anchor();
                                        }
                                        break;
                                    case bitmarkParser.AtProgress:
                                        {
                                            this.state = 811;
                                            this.progress();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                        }
                    }
                    this.state = 818;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    group_born() {
        let _localctx = new Group_bornContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, bitmarkParser.RULE_group_born);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 819;
                this.match(bitmarkParser.BitGroups);
                this.state = 820;
                this.match(bitmarkParser.CL);
                this.state = 830;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 821;
                                    this.match(bitmarkParser.NL);
                                    this.state = 822;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 825;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            this.state = 825;
                                            this._errHandler.sync(this);
                                            switch (this.interpreter.adaptivePredict(this._input, 34, this._ctx)) {
                                                case 1:
                                                    {
                                                        this.state = 823;
                                                        this.s_and_w();
                                                    }
                                                    break;
                                                case 2:
                                                    {
                                                        this.state = 824;
                                                        this.match(bitmarkParser.COLON);
                                                    }
                                                    break;
                                            }
                                        }
                                        this.state = 827;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                                    this.state = 829;
                                    this.match(bitmarkParser.CL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 832;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 834;
                this.match(bitmarkParser.NL);
                this.state = 838;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 37, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 835;
                                this.lines();
                            }
                        }
                    }
                    this.state = 840;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 37, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    group_died() {
        let _localctx = new Group_diedContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, bitmarkParser.RULE_group_died);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 841;
                this.match(bitmarkParser.BitGroupt);
                this.state = 842;
                this.match(bitmarkParser.CL);
                this.state = 852;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 843;
                                    this.match(bitmarkParser.NL);
                                    this.state = 844;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 847;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            this.state = 847;
                                            this._errHandler.sync(this);
                                            switch (this.interpreter.adaptivePredict(this._input, 38, this._ctx)) {
                                                case 1:
                                                    {
                                                        this.state = 845;
                                                        this.s_and_w();
                                                    }
                                                    break;
                                                case 2:
                                                    {
                                                        this.state = 846;
                                                        this.match(bitmarkParser.COLON);
                                                    }
                                                    break;
                                            }
                                        }
                                        this.state = 849;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                                    this.state = 851;
                                    this.match(bitmarkParser.CL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 854;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 40, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 856;
                this.match(bitmarkParser.NL);
                this.state = 860;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 857;
                                this.lines();
                            }
                        }
                    }
                    this.state = 862;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_lti() {
        let _localctx = new Learning_path_ltiContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, bitmarkParser.RULE_learning_path_lti);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 863;
                this.match(bitmarkParser.BitLearningPathLti);
                this.state = 864;
                this.format();
                this.state = 865;
                this.match(bitmarkParser.CL);
                this.state = 869;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 866;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 871;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 879;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 872;
                                    this.bitElem();
                                    this.state = 876;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 873;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 878;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 881;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_step() {
        let _localctx = new Learning_path_stepContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, bitmarkParser.RULE_learning_path_step);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 883;
                this.match(bitmarkParser.BitLearningPathStep);
                this.state = 884;
                this.format();
                this.state = 885;
                this.match(bitmarkParser.CL);
                this.state = 889;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 886;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 891;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 899;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 892;
                                    this.bitElem();
                                    this.state = 896;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 893;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 898;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 901;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_book() {
        let _localctx = new Learning_path_bookContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, bitmarkParser.RULE_learning_path_book);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 903;
                this.match(bitmarkParser.BitLearningPathBook);
                this.state = 904;
                this.format();
                this.state = 905;
                this.match(bitmarkParser.CL);
                this.state = 909;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 906;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 911;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 919;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 912;
                                    this.bitElem();
                                    this.state = 916;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 913;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 918;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 921;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_sign() {
        let _localctx = new Learning_path_signContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, bitmarkParser.RULE_learning_path_sign);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 923;
                this.match(bitmarkParser.BitLearningPathSign);
                this.state = 924;
                this.format();
                this.state = 925;
                this.match(bitmarkParser.CL);
                this.state = 929;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 926;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 931;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 939;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 932;
                                    this.bitElem();
                                    this.state = 936;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 933;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 938;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 941;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_video_call() {
        let _localctx = new Learning_path_video_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, bitmarkParser.RULE_learning_path_video_call);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 943;
                this.match(bitmarkParser.BitLearningPathVideoCall);
                this.state = 944;
                this.format();
                this.state = 945;
                this.match(bitmarkParser.CL);
                this.state = 949;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 946;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 951;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 959;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 952;
                                    this.bitElem();
                                    this.state = 956;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 953;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 958;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 961;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_learning_goal() {
        let _localctx = new Learning_path_learning_goalContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, bitmarkParser.RULE_learning_path_learning_goal);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 963;
                this.match(bitmarkParser.BitLearningPathLearningGoal);
                this.state = 964;
                this.format();
                this.state = 965;
                this.match(bitmarkParser.CL);
                this.state = 969;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 966;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 971;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 979;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 972;
                                    this.bitElem();
                                    this.state = 976;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 973;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 978;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 981;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_closing() {
        let _localctx = new Learning_path_closingContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, bitmarkParser.RULE_learning_path_closing);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 983;
                this.match(bitmarkParser.BitLearningPathClosing);
                this.state = 984;
                this.format();
                this.state = 985;
                this.match(bitmarkParser.CL);
                this.state = 989;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 986;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 991;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 999;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 992;
                                    this.bitElem();
                                    this.state = 996;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 61, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 993;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 998;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 61, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1001;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_feedback() {
        let _localctx = new Learning_path_feedbackContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, bitmarkParser.RULE_learning_path_feedback);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1003;
                this.match(bitmarkParser.BitLearningPathFeedback);
                this.state = 1004;
                this.format();
                this.state = 1005;
                this.match(bitmarkParser.CL);
                this.state = 1009;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1006;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1011;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1019;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1012;
                                    this.bitElem();
                                    this.state = 1016;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1013;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1018;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1021;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_bot_training() {
        let _localctx = new Learning_path_bot_trainingContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, bitmarkParser.RULE_learning_path_bot_training);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1023;
                this.match(bitmarkParser.BitLearningPathBotTraining);
                this.state = 1024;
                this.format();
                this.state = 1025;
                this.match(bitmarkParser.CL);
                this.state = 1029;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1026;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1031;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1039;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1032;
                                    this.bitElem();
                                    this.state = 1036;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1033;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1038;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1041;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_external_link() {
        let _localctx = new Learning_path_external_linkContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, bitmarkParser.RULE_learning_path_external_link);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1043;
                this.match(bitmarkParser.BitLearningPathExternalLink);
                this.state = 1044;
                this.format();
                this.state = 1045;
                this.match(bitmarkParser.CL);
                this.state = 1049;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1046;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1051;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1059;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1052;
                                    this.bitElem();
                                    this.state = 1056;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1053;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1058;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1061;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_classroom_training() {
        let _localctx = new Learning_path_classroom_trainingContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, bitmarkParser.RULE_learning_path_classroom_training);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1063;
                this.match(bitmarkParser.BitLearningPathClassroomTraining);
                this.state = 1064;
                this.format();
                this.state = 1065;
                this.match(bitmarkParser.CL);
                this.state = 1069;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1066;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1071;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1079;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1072;
                                    this.bitElem();
                                    this.state = 1076;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 73, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1073;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1078;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 73, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1081;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_classroom_event() {
        let _localctx = new Learning_path_classroom_eventContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, bitmarkParser.RULE_learning_path_classroom_event);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1083;
                this.match(bitmarkParser.BitLearningPathClassroomEvent);
                this.state = 1084;
                this.format();
                this.state = 1085;
                this.match(bitmarkParser.CL);
                this.state = 1089;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1086;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1091;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1099;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1092;
                                    this.bitElem();
                                    this.state = 1096;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 76, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1093;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1098;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 76, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1101;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_send() {
        let _localctx = new Bot_action_sendContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, bitmarkParser.RULE_bot_action_send);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1103;
                this.match(bitmarkParser.BitBotActionSend);
                this.state = 1104;
                this.format();
                this.state = 1105;
                this.match(bitmarkParser.CL);
                this.state = 1109;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1106;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1111;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1119;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1112;
                                    this.bitElem();
                                    this.state = 1116;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1113;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1118;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1121;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 80, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_announce() {
        let _localctx = new Bot_action_announceContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, bitmarkParser.RULE_bot_action_announce);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1123;
                this.match(bitmarkParser.BitBotActionAnnounce);
                this.state = 1124;
                this.format();
                this.state = 1125;
                this.match(bitmarkParser.CL);
                this.state = 1129;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1126;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1131;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1139;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1132;
                                    this.bitElem();
                                    this.state = 1136;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 82, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1133;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1138;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 82, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1141;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 83, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_save() {
        let _localctx = new Bot_action_saveContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, bitmarkParser.RULE_bot_action_save);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1143;
                this.match(bitmarkParser.BitBotActionSave);
                this.state = 1144;
                this.format();
                this.state = 1145;
                this.match(bitmarkParser.CL);
                this.state = 1149;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1146;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1151;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1159;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1152;
                                    this.bitElem();
                                    this.state = 1156;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1153;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1158;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1161;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 86, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_remind() {
        let _localctx = new Bot_action_remindContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, bitmarkParser.RULE_bot_action_remind);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1163;
                this.match(bitmarkParser.BitBotActionRemind);
                this.state = 1164;
                this.format();
                this.state = 1165;
                this.match(bitmarkParser.CL);
                this.state = 1169;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1166;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1171;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1179;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1172;
                                    this.bitElem();
                                    this.state = 1176;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1173;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1178;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1181;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 89, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_response() {
        let _localctx = new Bot_action_responseContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, bitmarkParser.RULE_bot_action_response);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1183;
                this.match(bitmarkParser.BitBotActionResponse);
                this.state = 1184;
                this.format();
                this.state = 1185;
                this.match(bitmarkParser.CL);
                this.state = 1189;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1186;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1191;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1201;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & ((1 << (bitmarkParser.OPDOLL - 147)) | (1 << (bitmarkParser.OPRANGLES - 147)) | (1 << (bitmarkParser.OPRANGLEL - 147)) | (1 << (bitmarkParser.OPDANGLE - 147)) | (1 << (bitmarkParser.OPU - 147)) | (1 << (bitmarkParser.OPB - 147)) | (1 << (bitmarkParser.OPQ - 147)) | (1 << (bitmarkParser.OPA - 147)) | (1 << (bitmarkParser.OPS - 147)) | (1 << (bitmarkParser.OPHASH - 147)) | (1 << (bitmarkParser.OPC - 147)) | (1 << (bitmarkParser.COLON - 147)) | (1 << (bitmarkParser.AMP - 147)) | (1 << (bitmarkParser.Greater - 147)) | (1 << (bitmarkParser.Less - 147)) | (1 << (bitmarkParser.RightAngle - 147)) | (1 << (bitmarkParser.RightArrow - 147)) | (1 << (bitmarkParser.DBLEQ - 147)) | (1 << (bitmarkParser.QUOTE_INDEX - 147)))) !== 0) || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & ((1 << (bitmarkParser.DCANY - 179)) | (1 << (bitmarkParser.ArticleText - 179)) | (1 << (bitmarkParser.NUMERIC - 179)) | (1 << (bitmarkParser.STRING - 179)) | (1 << (bitmarkParser.NOTBITMARK - 179)) | (1 << (bitmarkParser.ELIPSIS - 179)) | (1 << (bitmarkParser.SENTENCE - 179)) | (1 << (bitmarkParser.BARSTRING - 179)) | (1 << (bitmarkParser.AtProgress - 179)) | (1 << (bitmarkParser.AtReference - 179)) | (1 << (bitmarkParser.AtProgressPoints - 179)) | (1 << (bitmarkParser.AtExampleWithStr - 179)) | (1 << (bitmarkParser.AtExamplecol - 179)) | (1 << (bitmarkParser.AtExamplecl - 179)) | (1 << (bitmarkParser.AtPartialAnswerS - 179)) | (1 << (bitmarkParser.AtPartialAnswer - 179)) | (1 << (bitmarkParser.AtLabeltrue - 179)) | (1 << (bitmarkParser.AtLabelfalse - 179)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (bitmarkParser.OpAtCopyright - 216)) | (1 << (bitmarkParser.OpAtIsTracked - 216)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 216)) | (1 << (bitmarkParser.AtDate - 216)) | (1 << (bitmarkParser.AmpAudio - 216)) | (1 << (bitmarkParser.AmpImage - 216)) | (1 << (bitmarkParser.AmpVideo - 216)) | (1 << (bitmarkParser.AmpArticle - 216)) | (1 << (bitmarkParser.AmpDocument - 216)) | (1 << (bitmarkParser.AmpApp - 216)) | (1 << (bitmarkParser.AmpWebsite - 216)) | (1 << (bitmarkParser.AmpStillImageFilm - 216)) | (1 << (bitmarkParser.OpAmpAudio - 216)) | (1 << (bitmarkParser.OpAmpImage - 216)) | (1 << (bitmarkParser.OpAmpImageZoom - 216)) | (1 << (bitmarkParser.OpAmpImageWAudio - 216)) | (1 << (bitmarkParser.OpAmpVideo - 216)) | (1 << (bitmarkParser.OpAmpArticle - 216)) | (1 << (bitmarkParser.OpAmpDocument - 216)) | (1 << (bitmarkParser.OpAmpApp - 216)) | (1 << (bitmarkParser.OpAmpWebsite - 216)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 216)) | (1 << (bitmarkParser.BracEnclose - 216)) | (1 << (bitmarkParser.AmpAudioLink - 216)) | (1 << (bitmarkParser.AmpImageLink - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (bitmarkParser.AmpVideoLink - 248)) | (1 << (bitmarkParser.AmpArticleLink - 248)) | (1 << (bitmarkParser.AmpDocumentLink - 248)) | (1 << (bitmarkParser.AmpAppLink - 248)) | (1 << (bitmarkParser.AmpWebsiteLink - 248)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpAudioLink - 248)) | (1 << (bitmarkParser.OpAmpImageLink - 248)) | (1 << (bitmarkParser.OpAmpVideoLink - 248)) | (1 << (bitmarkParser.OpAmpArticleLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 248)) | (1 << (bitmarkParser.OpAmpAppLink - 248)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 248)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 248)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 248)) | (1 << (bitmarkParser.BitmarkMinus - 248)) | (1 << (bitmarkParser.BitmarkPlus - 248)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 1192;
                            this.bitElem();
                            this.state = 1196;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1193;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1198;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 1203;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1205;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1204;
                                    this.bot_action();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1207;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 93, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 1209;
                this.match(bitmarkParser.HSPL);
                this.state = 1211;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 94, this._ctx)) {
                    case 1:
                        {
                            this.state = 1210;
                            this.footer();
                        }
                        break;
                }
                this.state = 1216;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 95, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1213;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1218;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 95, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_true_false() {
        let _localctx = new Bot_action_true_falseContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, bitmarkParser.RULE_bot_action_true_false);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1219;
                this.match(bitmarkParser.BitBotActionTrueFalse);
                this.state = 1220;
                this.format();
                this.state = 1221;
                this.match(bitmarkParser.CL);
                this.state = 1225;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1222;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1227;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1237;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & ((1 << (bitmarkParser.OPDOLL - 147)) | (1 << (bitmarkParser.OPRANGLES - 147)) | (1 << (bitmarkParser.OPRANGLEL - 147)) | (1 << (bitmarkParser.OPDANGLE - 147)) | (1 << (bitmarkParser.OPU - 147)) | (1 << (bitmarkParser.OPB - 147)) | (1 << (bitmarkParser.OPQ - 147)) | (1 << (bitmarkParser.OPA - 147)) | (1 << (bitmarkParser.OPS - 147)) | (1 << (bitmarkParser.OPHASH - 147)) | (1 << (bitmarkParser.OPC - 147)) | (1 << (bitmarkParser.COLON - 147)) | (1 << (bitmarkParser.AMP - 147)) | (1 << (bitmarkParser.Greater - 147)) | (1 << (bitmarkParser.Less - 147)) | (1 << (bitmarkParser.RightAngle - 147)) | (1 << (bitmarkParser.RightArrow - 147)) | (1 << (bitmarkParser.DBLEQ - 147)) | (1 << (bitmarkParser.QUOTE_INDEX - 147)))) !== 0) || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & ((1 << (bitmarkParser.DCANY - 179)) | (1 << (bitmarkParser.ArticleText - 179)) | (1 << (bitmarkParser.NUMERIC - 179)) | (1 << (bitmarkParser.STRING - 179)) | (1 << (bitmarkParser.NOTBITMARK - 179)) | (1 << (bitmarkParser.ELIPSIS - 179)) | (1 << (bitmarkParser.SENTENCE - 179)) | (1 << (bitmarkParser.BARSTRING - 179)) | (1 << (bitmarkParser.AtProgress - 179)) | (1 << (bitmarkParser.AtReference - 179)) | (1 << (bitmarkParser.AtProgressPoints - 179)) | (1 << (bitmarkParser.AtExampleWithStr - 179)) | (1 << (bitmarkParser.AtExamplecol - 179)) | (1 << (bitmarkParser.AtExamplecl - 179)) | (1 << (bitmarkParser.AtPartialAnswerS - 179)) | (1 << (bitmarkParser.AtPartialAnswer - 179)) | (1 << (bitmarkParser.AtLabeltrue - 179)) | (1 << (bitmarkParser.AtLabelfalse - 179)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (bitmarkParser.OpAtCopyright - 216)) | (1 << (bitmarkParser.OpAtIsTracked - 216)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 216)) | (1 << (bitmarkParser.AtDate - 216)) | (1 << (bitmarkParser.AmpAudio - 216)) | (1 << (bitmarkParser.AmpImage - 216)) | (1 << (bitmarkParser.AmpVideo - 216)) | (1 << (bitmarkParser.AmpArticle - 216)) | (1 << (bitmarkParser.AmpDocument - 216)) | (1 << (bitmarkParser.AmpApp - 216)) | (1 << (bitmarkParser.AmpWebsite - 216)) | (1 << (bitmarkParser.AmpStillImageFilm - 216)) | (1 << (bitmarkParser.OpAmpAudio - 216)) | (1 << (bitmarkParser.OpAmpImage - 216)) | (1 << (bitmarkParser.OpAmpImageZoom - 216)) | (1 << (bitmarkParser.OpAmpImageWAudio - 216)) | (1 << (bitmarkParser.OpAmpVideo - 216)) | (1 << (bitmarkParser.OpAmpArticle - 216)) | (1 << (bitmarkParser.OpAmpDocument - 216)) | (1 << (bitmarkParser.OpAmpApp - 216)) | (1 << (bitmarkParser.OpAmpWebsite - 216)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 216)) | (1 << (bitmarkParser.BracEnclose - 216)) | (1 << (bitmarkParser.AmpAudioLink - 216)) | (1 << (bitmarkParser.AmpImageLink - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (bitmarkParser.AmpVideoLink - 248)) | (1 << (bitmarkParser.AmpArticleLink - 248)) | (1 << (bitmarkParser.AmpDocumentLink - 248)) | (1 << (bitmarkParser.AmpAppLink - 248)) | (1 << (bitmarkParser.AmpWebsiteLink - 248)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpAudioLink - 248)) | (1 << (bitmarkParser.OpAmpImageLink - 248)) | (1 << (bitmarkParser.OpAmpVideoLink - 248)) | (1 << (bitmarkParser.OpAmpArticleLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 248)) | (1 << (bitmarkParser.OpAmpAppLink - 248)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 248)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 248)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 248)) | (1 << (bitmarkParser.BitmarkMinus - 248)) | (1 << (bitmarkParser.BitmarkPlus - 248)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 1228;
                            this.bitElem();
                            this.state = 1232;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1229;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1234;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 1239;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1241;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1240;
                                    this.bot_action();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1243;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 99, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 1245;
                this.match(bitmarkParser.HSPL);
                this.state = 1247;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 100, this._ctx)) {
                    case 1:
                        {
                            this.state = 1246;
                            this.footer();
                        }
                        break;
                }
                this.state = 1252;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1249;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1254;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_rating_number() {
        let _localctx = new Bot_action_rating_numberContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, bitmarkParser.RULE_bot_action_rating_number);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1255;
                this.match(bitmarkParser.BitBotActionRatingNumber);
                this.state = 1256;
                this.format();
                this.state = 1257;
                this.match(bitmarkParser.CL);
                this.state = 1261;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1258;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1263;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1273;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & ((1 << (bitmarkParser.OPDOLL - 147)) | (1 << (bitmarkParser.OPRANGLES - 147)) | (1 << (bitmarkParser.OPRANGLEL - 147)) | (1 << (bitmarkParser.OPDANGLE - 147)) | (1 << (bitmarkParser.OPU - 147)) | (1 << (bitmarkParser.OPB - 147)) | (1 << (bitmarkParser.OPQ - 147)) | (1 << (bitmarkParser.OPA - 147)) | (1 << (bitmarkParser.OPS - 147)) | (1 << (bitmarkParser.OPHASH - 147)) | (1 << (bitmarkParser.OPC - 147)) | (1 << (bitmarkParser.COLON - 147)) | (1 << (bitmarkParser.AMP - 147)) | (1 << (bitmarkParser.Greater - 147)) | (1 << (bitmarkParser.Less - 147)) | (1 << (bitmarkParser.RightAngle - 147)) | (1 << (bitmarkParser.RightArrow - 147)) | (1 << (bitmarkParser.DBLEQ - 147)) | (1 << (bitmarkParser.QUOTE_INDEX - 147)))) !== 0) || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & ((1 << (bitmarkParser.DCANY - 179)) | (1 << (bitmarkParser.ArticleText - 179)) | (1 << (bitmarkParser.NUMERIC - 179)) | (1 << (bitmarkParser.STRING - 179)) | (1 << (bitmarkParser.NOTBITMARK - 179)) | (1 << (bitmarkParser.ELIPSIS - 179)) | (1 << (bitmarkParser.SENTENCE - 179)) | (1 << (bitmarkParser.BARSTRING - 179)) | (1 << (bitmarkParser.AtProgress - 179)) | (1 << (bitmarkParser.AtReference - 179)) | (1 << (bitmarkParser.AtProgressPoints - 179)) | (1 << (bitmarkParser.AtExampleWithStr - 179)) | (1 << (bitmarkParser.AtExamplecol - 179)) | (1 << (bitmarkParser.AtExamplecl - 179)) | (1 << (bitmarkParser.AtPartialAnswerS - 179)) | (1 << (bitmarkParser.AtPartialAnswer - 179)) | (1 << (bitmarkParser.AtLabeltrue - 179)) | (1 << (bitmarkParser.AtLabelfalse - 179)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (bitmarkParser.OpAtCopyright - 216)) | (1 << (bitmarkParser.OpAtIsTracked - 216)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 216)) | (1 << (bitmarkParser.AtDate - 216)) | (1 << (bitmarkParser.AmpAudio - 216)) | (1 << (bitmarkParser.AmpImage - 216)) | (1 << (bitmarkParser.AmpVideo - 216)) | (1 << (bitmarkParser.AmpArticle - 216)) | (1 << (bitmarkParser.AmpDocument - 216)) | (1 << (bitmarkParser.AmpApp - 216)) | (1 << (bitmarkParser.AmpWebsite - 216)) | (1 << (bitmarkParser.AmpStillImageFilm - 216)) | (1 << (bitmarkParser.OpAmpAudio - 216)) | (1 << (bitmarkParser.OpAmpImage - 216)) | (1 << (bitmarkParser.OpAmpImageZoom - 216)) | (1 << (bitmarkParser.OpAmpImageWAudio - 216)) | (1 << (bitmarkParser.OpAmpVideo - 216)) | (1 << (bitmarkParser.OpAmpArticle - 216)) | (1 << (bitmarkParser.OpAmpDocument - 216)) | (1 << (bitmarkParser.OpAmpApp - 216)) | (1 << (bitmarkParser.OpAmpWebsite - 216)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 216)) | (1 << (bitmarkParser.BracEnclose - 216)) | (1 << (bitmarkParser.AmpAudioLink - 216)) | (1 << (bitmarkParser.AmpImageLink - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (bitmarkParser.AmpVideoLink - 248)) | (1 << (bitmarkParser.AmpArticleLink - 248)) | (1 << (bitmarkParser.AmpDocumentLink - 248)) | (1 << (bitmarkParser.AmpAppLink - 248)) | (1 << (bitmarkParser.AmpWebsiteLink - 248)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpAudioLink - 248)) | (1 << (bitmarkParser.OpAmpImageLink - 248)) | (1 << (bitmarkParser.OpAmpVideoLink - 248)) | (1 << (bitmarkParser.OpAmpArticleLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 248)) | (1 << (bitmarkParser.OpAmpAppLink - 248)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 248)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 248)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 248)) | (1 << (bitmarkParser.BitmarkMinus - 248)) | (1 << (bitmarkParser.BitmarkPlus - 248)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 1264;
                            this.bitElem();
                            this.state = 1268;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1265;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1270;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 1275;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1277;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1276;
                                    this.bot_action();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1279;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 105, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 1281;
                this.match(bitmarkParser.HSPL);
                this.state = 1283;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 106, this._ctx)) {
                    case 1:
                        {
                            this.state = 1282;
                            this.footer();
                        }
                        break;
                }
                this.state = 1288;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 107, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1285;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1290;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 107, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_rating_stars() {
        let _localctx = new Bot_action_rating_starsContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, bitmarkParser.RULE_bot_action_rating_stars);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1291;
                this.match(bitmarkParser.BitBotActionRatingStars);
                this.state = 1292;
                this.format();
                this.state = 1293;
                this.match(bitmarkParser.CL);
                this.state = 1297;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1294;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1299;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
                }
                this.state = 1309;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 110, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1300;
                                this.bitElem();
                                this.state = 1304;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1301;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1306;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1311;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 110, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action() {
        let _localctx = new Bot_actionContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, bitmarkParser.RULE_bot_action);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1312;
                this.match(bitmarkParser.HSPL);
                this.state = 1313;
                this.bo_actions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bo_actions() {
        let _localctx = new Bo_actionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, bitmarkParser.RULE_bo_actions);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1328;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1318;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1315;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1320;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1321;
                            this.boacts();
                            this.state = 1325;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 112, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1322;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                }
                                this.state = 1327;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 112, this._ctx);
                            }
                        }
                    }
                    this.state = 1330;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & ((1 << (bitmarkParser.OPB - 153)) | (1 << (bitmarkParser.OPQ - 153)) | (1 << (bitmarkParser.OPA - 153)) | (1 << (bitmarkParser.OPP - 153)) | (1 << (bitmarkParser.OPM - 153)) | (1 << (bitmarkParser.OPS - 153)) | (1 << (bitmarkParser.OPC - 153)) | (1 << (bitmarkParser.COLON - 153)) | (1 << (bitmarkParser.AMP - 153)) | (1 << (bitmarkParser.Greater - 153)) | (1 << (bitmarkParser.Less - 153)) | (1 << (bitmarkParser.RightAngle - 153)) | (1 << (bitmarkParser.RightArrow - 153)) | (1 << (bitmarkParser.DBLEQ - 153)) | (1 << (bitmarkParser.QUOTE_INDEX - 153)))) !== 0) || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (bitmarkParser.NUMERIC - 185)) | (1 << (bitmarkParser.STRING - 185)) | (1 << (bitmarkParser.NL - 185)) | (1 << (bitmarkParser.NOTBITMARK - 185)) | (1 << (bitmarkParser.ELIPSIS - 185)) | (1 << (bitmarkParser.SENTENCE - 185)) | (1 << (bitmarkParser.BARSTRING - 185)) | (1 << (bitmarkParser.OpAtCopyright - 185)))) !== 0) || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)) | (1 << (bitmarkParser.ENCLBARS - 274)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    boacts() {
        let _localctx = new BoactsContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, bitmarkParser.RULE_boacts);
        try {
            this.state = 1339;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 114, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1332;
                        this.instruction();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1333;
                        this.item();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1334;
                        this.atdef();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1335;
                        this.hint();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1336;
                        this.choice_minus();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1337;
                        this.choice_plus();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1338;
                        this.feedback();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    feedback() {
        let _localctx = new FeedbackContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, bitmarkParser.RULE_feedback);
        try {
            this.state = 1343;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.ENCLBARS:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1341;
                        this.match(bitmarkParser.ENCLBARS);
                    }
                    break;
                case bitmarkParser.S:
                case bitmarkParser.OPS:
                case bitmarkParser.COLON:
                case bitmarkParser.AMP:
                case bitmarkParser.Greater:
                case bitmarkParser.Less:
                case bitmarkParser.RightAngle:
                case bitmarkParser.RightArrow:
                case bitmarkParser.DBLEQ:
                case bitmarkParser.QUOTE_INDEX:
                case bitmarkParser.NUMERIC:
                case bitmarkParser.STRING:
                case bitmarkParser.NOTBITMARK:
                case bitmarkParser.ELIPSIS:
                case bitmarkParser.SENTENCE:
                case bitmarkParser.BARSTRING:
                case bitmarkParser.AmpAudio:
                case bitmarkParser.AmpImage:
                case bitmarkParser.AmpVideo:
                case bitmarkParser.AmpArticle:
                case bitmarkParser.AmpDocument:
                case bitmarkParser.AmpApp:
                case bitmarkParser.AmpWebsite:
                case bitmarkParser.AmpStillImageFilm:
                case bitmarkParser.AmpAudioLink:
                case bitmarkParser.AmpImageLink:
                case bitmarkParser.AmpVideoLink:
                case bitmarkParser.AmpArticleLink:
                case bitmarkParser.AmpDocumentLink:
                case bitmarkParser.AmpAppLink:
                case bitmarkParser.AmpWebsiteLink:
                case bitmarkParser.AmpStillImageFilmLink:
                case bitmarkParser.BitmarkMinus:
                case bitmarkParser.BitmarkPlus:
                case bitmarkParser.URL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1342;
                        this.s_and_w();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    footer() {
        let _localctx = new FooterContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, bitmarkParser.RULE_footer);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1352;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1348;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 1345;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 1350;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 1351;
                                    this.s_and_w();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1354;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bitElem() {
        let _localctx = new BitElemContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, bitmarkParser.RULE_bitElem);
        try {
            this.state = 1388;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 118, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1356;
                        this.match(bitmarkParser.LIST_LINE);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1357;
                        this.match(bitmarkParser.NOTBITMARK);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1358;
                        this.dclines();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1359;
                        this.gap();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1360;
                        this.reference();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1361;
                        this.dateprop();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1362;
                        this.progress();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1363;
                        this.atdef();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1364;
                        this.dollarans();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1365;
                        this.partans();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1366;
                        this.item();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1367;
                        this.title();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 1368;
                        this.instruction();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 1369;
                        this.hint();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 1370;
                        this.s_and_w();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 1371;
                        this.example();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 1372;
                        this.bool_label();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 1373;
                        this.progress_points();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 1374;
                        this.istracked();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 1375;
                        this.isinfoonly();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 1376;
                        this.imagebit();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 1377;
                        this.audiobit();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 1378;
                        this.videobit();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 1379;
                        this.articlebit();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 1380;
                        this.documentbit();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 1381;
                        this.appbit();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 1382;
                        this.websitebit();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 1383;
                        this.stillimagefilmbit();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 1384;
                        this.angleref();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 1385;
                        this.anchor();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(_localctx, 31);
                    {
                        this.state = 1386;
                        this.bracketed_text();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(_localctx, 32);
                    {
                        this.state = 1387;
                        this.sp();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    gap() {
        let _localctx = new GapContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, bitmarkParser.RULE_gap);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1390;
                this.single_gap();
                this.state = 1398;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 1396;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.OPU:
                                    {
                                        this.state = 1391;
                                        this.single_gap();
                                    }
                                    break;
                                case bitmarkParser.OPB:
                                    {
                                        this.state = 1392;
                                        this.instruction();
                                    }
                                    break;
                                case bitmarkParser.OPQ:
                                    {
                                        this.state = 1393;
                                        this.hint();
                                    }
                                    break;
                                case bitmarkParser.OPC:
                                    {
                                        this.state = 1394;
                                        this.item();
                                    }
                                    break;
                                case bitmarkParser.AtExampleWithStr:
                                case bitmarkParser.AtExamplecol:
                                case bitmarkParser.AtExamplecl:
                                    {
                                        this.state = 1395;
                                        this.example();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                    }
                    this.state = 1400;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    single_gap() {
        let _localctx = new Single_gapContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, bitmarkParser.RULE_single_gap);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1401;
                this.match(bitmarkParser.OPU);
                this.state = 1405;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 121, this._ctx)) {
                    case 1:
                        {
                            this.state = 1402;
                            this.match(bitmarkParser.NUMERIC);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1403;
                            this.match(bitmarkParser.STRING);
                        }
                        break;
                    case 3:
                        // tslint:disable-next-line:no-empty
                        {
                        }
                        break;
                }
                this.state = 1410;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                    {
                        {
                            this.state = 1407;
                            this.s_and_w();
                        }
                    }
                    this.state = 1412;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1413;
                this.clnsp();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    choice_plus() {
        let _localctx = new Choice_plusContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, bitmarkParser.RULE_choice_plus);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1416;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPC) {
                    {
                        this.state = 1415;
                        this.item();
                    }
                }
                this.state = 1418;
                this.match(bitmarkParser.OPP);
                this.state = 1420;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1419;
                            this.s_and_w();
                        }
                    }
                    this.state = 1422;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                this.state = 1424;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    choice_minus() {
        let _localctx = new Choice_minusContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, bitmarkParser.RULE_choice_minus);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1427;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPC) {
                    {
                        this.state = 1426;
                        this.item();
                    }
                }
                this.state = 1429;
                this.match(bitmarkParser.OPM);
                this.state = 1431;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1430;
                            this.s_and_w();
                        }
                    }
                    this.state = 1433;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                this.state = 1435;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    choice_star() {
        let _localctx = new Choice_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, bitmarkParser.RULE_choice_star);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1438;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPC) {
                    {
                        this.state = 1437;
                        this.item();
                    }
                }
                this.state = 1440;
                this.match(bitmarkParser.OPR);
                this.state = 1442;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1441;
                            this.s_and_w();
                        }
                    }
                    this.state = 1444;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                this.state = 1446;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    essay() {
        let _localctx = new EssayContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, bitmarkParser.RULE_essay);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1448;
                this.match(bitmarkParser.BitEssay);
                this.state = 1449;
                this.format();
                this.state = 1450;
                this.match(bitmarkParser.CL);
                this.state = 1451;
                this.match(bitmarkParser.NL);
                this.state = 1461;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                {
                                    this.state = 1452;
                                    this.bitElem();
                                }
                                this.state = 1456;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1453;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1458;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1463;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
                }
                this.state = 1473;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1467;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 1464;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 1469;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                {
                                    this.state = 1470;
                                    this.ml_example();
                                }
                            }
                        }
                    }
                    this.state = 1475;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
                }
                this.state = 1479;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 133, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1476;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1481;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 133, this._ctx);
                }
                this.state = 1495;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 136, this._ctx)) {
                    case 1:
                        {
                            this.state = 1482;
                            this.resource();
                            this.state = 1492;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 135, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1486;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1483;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1488;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1489;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1494;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 135, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ml_example() {
        let _localctx = new Ml_exampleContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, bitmarkParser.RULE_ml_example);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1497;
                this.match(bitmarkParser.AtExamplecol);
                this.state = 1505;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                    {
                        this.state = 1499;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.NL) {
                            {
                                this.state = 1498;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1501;
                        this.lines();
                        this.state = 1503;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.NL) {
                            {
                                this.state = 1502;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                }
                this.state = 1507;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partans() {
        let _localctx = new PartansContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, bitmarkParser.RULE_partans);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1509;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AtPartialAnswerS || _la === bitmarkParser.AtPartialAnswer)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource() {
        let _localctx = new ResourceContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, bitmarkParser.RULE_resource);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1511;
                this.bitElem();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    correction() {
        let _localctx = new CorrectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, bitmarkParser.RULE_correction);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1513;
                this.match(bitmarkParser.BitCorrection);
                this.state = 1514;
                this.format();
                this.state = 1515;
                this.match(bitmarkParser.CL);
                this.state = 1516;
                this.match(bitmarkParser.NL);
                this.state = 1526;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1517;
                                this.bitElem();
                                this.state = 1521;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1518;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1523;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1528;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
                }
                this.state = 1532;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.OPP || _la === bitmarkParser.OPM) {
                    {
                        {
                            this.state = 1529;
                            this.corrs();
                        }
                    }
                    this.state = 1534;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1538;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1535;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1540;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
                }
                this.state = 1554;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 146, this._ctx)) {
                    case 1:
                        {
                            this.state = 1541;
                            this.resource();
                            this.state = 1551;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 145, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1545;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1542;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1547;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1548;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1553;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 145, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    corrs() {
        let _localctx = new CorrsContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, bitmarkParser.RULE_corrs);
        try {
            let _alt;
            this.state = 1574;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPM:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1556;
                        this.match(bitmarkParser.OPM);
                        this.state = 1560;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 147, this._ctx);
                        while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 1557;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 1562;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 147, this._ctx);
                        }
                        this.state = 1563;
                        this.match(bitmarkParser.CL);
                        this.state = 1564;
                        this.match(bitmarkParser.NL);
                    }
                    break;
                case bitmarkParser.OPP:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1565;
                        this.match(bitmarkParser.OPP);
                        this.state = 1569;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
                        while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 1566;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 1571;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
                        }
                        this.state = 1572;
                        this.match(bitmarkParser.CL);
                        this.state = 1573;
                        this.match(bitmarkParser.NL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mark_() {
        let _localctx = new Mark_Context(this._ctx, this.state);
        this.enterRule(_localctx, 106, bitmarkParser.RULE_mark_);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1576;
                this.match(bitmarkParser.BitMark);
                this.state = 1577;
                this.format();
                this.state = 1578;
                this.match(bitmarkParser.CL);
                this.state = 1579;
                this.match(bitmarkParser.NL);
                this.state = 1592;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1582;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 150, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 1580;
                                            this.bitElem();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 1581;
                                            this.mark_text();
                                        }
                                        break;
                                }
                                this.state = 1587;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1584;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1589;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1594;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
                }
                this.state = 1598;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 153, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1595;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1600;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 153, this._ctx);
                }
                this.state = 1614;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 156, this._ctx)) {
                    case 1:
                        {
                            this.state = 1601;
                            this.resource();
                            this.state = 1611;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 155, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1605;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1602;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1607;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1608;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1613;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 155, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mark_text() {
        let _localctx = new Mark_textContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, bitmarkParser.RULE_mark_text);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1616;
                this.match(bitmarkParser.OPS);
                this.state = 1617;
                this.s_and_w();
                this.state = 1618;
                this.match(bitmarkParser.CL);
                this.state = 1620;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPAMARK) {
                    {
                        this.state = 1619;
                        this.mark_color();
                    }
                }
                this.state = 1627;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 1625;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.OPQ:
                                    {
                                        this.state = 1622;
                                        this.hint();
                                    }
                                    break;
                                case bitmarkParser.OPC:
                                    {
                                        this.state = 1623;
                                        this.item();
                                    }
                                    break;
                                case bitmarkParser.OPB:
                                    {
                                        this.state = 1624;
                                        this.instruction();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                    }
                    this.state = 1629;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mark_color() {
        let _localctx = new Mark_colorContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, bitmarkParser.RULE_mark_color);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1630;
                this.match(bitmarkParser.OPAMARK);
                this.state = 1634;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 1631;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 1636;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1637;
                this.match(bitmarkParser.STRING);
                this.state = 1641;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 1638;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 1643;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1644;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    take_audio() {
        let _localctx = new Take_audioContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, bitmarkParser.RULE_take_audio);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1646;
                this.match(bitmarkParser.BitTakeAudio);
                this.state = 1647;
                this.format();
                this.state = 1648;
                this.match(bitmarkParser.CL);
                this.state = 1649;
                this.match(bitmarkParser.NL);
                this.state = 1659;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1650;
                                this.bitElem();
                                this.state = 1654;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1651;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1656;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1661;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
                }
                this.state = 1665;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1662;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1667;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
                }
                this.state = 1681;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 167, this._ctx)) {
                    case 1:
                        {
                            this.state = 1668;
                            this.resource();
                            this.state = 1678;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1672;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1669;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1674;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1675;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1680;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    take_picture() {
        let _localctx = new Take_pictureContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, bitmarkParser.RULE_take_picture);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1683;
                this.match(bitmarkParser.BitTakepic);
                this.state = 1684;
                this.format();
                this.state = 1685;
                this.match(bitmarkParser.CL);
                this.state = 1686;
                this.match(bitmarkParser.NL);
                this.state = 1696;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1687;
                                this.bitElem();
                                this.state = 1691;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1688;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1693;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1698;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
                }
                this.state = 1702;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1699;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1704;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
                }
                this.state = 1718;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 173, this._ctx)) {
                    case 1:
                        {
                            this.state = 1705;
                            this.resource();
                            this.state = 1715;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 172, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1709;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1706;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1711;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1712;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1717;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 172, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    record_audio() {
        let _localctx = new Record_audioContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, bitmarkParser.RULE_record_audio);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1720;
                this.match(bitmarkParser.BitRecaud);
                this.state = 1721;
                this.format();
                this.state = 1722;
                this.match(bitmarkParser.CL);
                this.state = 1723;
                this.match(bitmarkParser.NL);
                this.state = 1733;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1724;
                                this.bitElem();
                                this.state = 1728;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 174, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1725;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1730;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 174, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1735;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
                }
                this.state = 1739;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 176, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1736;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1741;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 176, this._ctx);
                }
                this.state = 1755;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 179, this._ctx)) {
                    case 1:
                        {
                            this.state = 1742;
                            this.resource();
                            this.state = 1752;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1746;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1743;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1748;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1749;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1754;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    preparation_note() {
        let _localctx = new Preparation_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, bitmarkParser.RULE_preparation_note);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1757;
                this.match(bitmarkParser.BitPrepnote);
                this.state = 1758;
                this.format();
                this.state = 1759;
                this.match(bitmarkParser.CL);
                this.state = 1763;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 180, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1760;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1765;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 180, this._ctx);
                }
                this.state = 1775;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 182, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1766;
                                this.bitElem();
                                this.state = 1770;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1767;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1772;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1777;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 182, this._ctx);
                }
                this.state = 1779;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 183, this._ctx)) {
                    case 1:
                        {
                            this.state = 1778;
                            this.lines();
                        }
                        break;
                }
                this.state = 1784;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 184, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1781;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1786;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 184, this._ctx);
                }
                this.state = 1800;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 187, this._ctx)) {
                    case 1:
                        {
                            this.state = 1787;
                            this.resource();
                            this.state = 1797;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1791;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1788;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1793;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1794;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1799;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    assignment() {
        let _localctx = new AssignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, bitmarkParser.RULE_assignment);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1802;
                this.match(bitmarkParser.BitAssign);
                this.state = 1803;
                this.format();
                this.state = 1804;
                this.match(bitmarkParser.CL);
                this.state = 1806;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1805;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1808;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 1819;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1810;
                                this.bitElem();
                                this.state = 1814;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1811;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1816;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1821;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
                }
                this.state = 1823;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 191, this._ctx)) {
                    case 1:
                        {
                            this.state = 1822;
                            this.lines();
                        }
                        break;
                }
                this.state = 1828;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1825;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1830;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
                }
                this.state = 1844;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 195, this._ctx)) {
                    case 1:
                        {
                            this.state = 1831;
                            this.resource();
                            this.state = 1841;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 194, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1835;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1832;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1837;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1838;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1843;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 194, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    article() {
        let _localctx = new ArticleContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, bitmarkParser.RULE_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1846;
                this.match(bitmarkParser.BitArticle);
                this.state = 1847;
                this.format();
                this.state = 1848;
                this.match(bitmarkParser.CL);
                this.state = 1852;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1849;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1854;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1862;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1855;
                                    this.bitElem();
                                    this.state = 1859;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1856;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1861;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1864;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    statement() {
        let _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, bitmarkParser.RULE_statement);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1866;
                this.match(bitmarkParser.BitStatement);
                this.state = 1867;
                this.format();
                this.state = 1868;
                this.match(bitmarkParser.CL);
                this.state = 1872;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1869;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1874;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1882;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1875;
                                    this.bitElem();
                                    this.state = 1879;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 200, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1876;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1881;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 200, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1884;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    details() {
        let _localctx = new DetailsContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, bitmarkParser.RULE_details);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1886;
                this.match(bitmarkParser.BitDetails);
                this.state = 1887;
                this.format();
                this.state = 1888;
                this.match(bitmarkParser.CL);
                this.state = 1892;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1889;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1894;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1902;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1895;
                                    this.bitElem();
                                    this.state = 1899;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1896;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1901;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1904;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sample_solution() {
        let _localctx = new Sample_solutionContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, bitmarkParser.RULE_sample_solution);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1906;
                this.match(bitmarkParser.BitSampleSolution);
                this.state = 1907;
                this.format();
                this.state = 1908;
                this.match(bitmarkParser.CL);
                this.state = 1912;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1909;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1914;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1922;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1915;
                                    this.bitElem();
                                    this.state = 1919;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1916;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1921;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1924;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    buttoncopytext() {
        let _localctx = new ButtoncopytextContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, bitmarkParser.RULE_buttoncopytext);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1926;
                this.match(bitmarkParser.BitButtonCopytext);
                this.state = 1927;
                this.format();
                this.state = 1928;
                this.match(bitmarkParser.CL);
                this.state = 1932;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1929;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1934;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1942;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1935;
                                    this.bitElem();
                                    this.state = 1939;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1936;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1941;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1944;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 210, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    wbtcontinue() {
        let _localctx = new WbtcontinueContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, bitmarkParser.RULE_wbtcontinue);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1946;
                this.match(bitmarkParser.BitWbtContinue);
                this.state = 1947;
                this.format();
                this.state = 1948;
                this.match(bitmarkParser.CL);
                this.state = 1952;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1949;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1954;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1962;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1955;
                                    this.bitElem();
                                    this.state = 1959;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 212, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1956;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1961;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 212, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1964;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learningpathdetails() {
        let _localctx = new LearningpathdetailsContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, bitmarkParser.RULE_learningpathdetails);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1966;
                this.match(bitmarkParser.BitLearningPathDetails);
                this.state = 1967;
                this.format();
                this.state = 1968;
                this.match(bitmarkParser.CL);
                this.state = 1972;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1969;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1974;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1982;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1975;
                                    this.bitElem();
                                    this.state = 1979;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1976;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1981;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 1984;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    page() {
        let _localctx = new PageContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, bitmarkParser.RULE_page);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1986;
                this.match(bitmarkParser.BitPage);
                this.state = 1987;
                this.format();
                this.state = 1988;
                this.match(bitmarkParser.CL);
                this.state = 1992;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1989;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1994;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2002;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1995;
                                    this.bitElem();
                                    this.state = 1999;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 218, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1996;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2001;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 218, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2004;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    note() {
        let _localctx = new NoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, bitmarkParser.RULE_note);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2006;
                this.match(bitmarkParser.BitNote);
                this.state = 2007;
                this.format();
                this.state = 2008;
                this.match(bitmarkParser.CL);
                this.state = 2012;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2009;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2014;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2022;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2015;
                                    this.bitElem();
                                    this.state = 2019;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 221, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2016;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2021;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 221, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2024;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    info() {
        let _localctx = new InfoContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, bitmarkParser.RULE_info);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2026;
                this.match(bitmarkParser.BitInfo);
                this.state = 2027;
                this.format();
                this.state = 2028;
                this.match(bitmarkParser.CL);
                this.state = 2032;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2029;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2034;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2042;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2035;
                                    this.bitElem();
                                    this.state = 2039;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 224, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2036;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2041;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 224, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2044;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    warning() {
        let _localctx = new WarningContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, bitmarkParser.RULE_warning);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2046;
                this.match(bitmarkParser.BitWarning);
                this.state = 2047;
                this.format();
                this.state = 2048;
                this.match(bitmarkParser.CL);
                this.state = 2052;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2049;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2054;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2062;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2055;
                                    this.bitElem();
                                    this.state = 2059;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 227, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2056;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2061;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 227, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2064;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    remark() {
        let _localctx = new RemarkContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, bitmarkParser.RULE_remark);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2066;
                this.match(bitmarkParser.BitRemark);
                this.state = 2067;
                this.format();
                this.state = 2068;
                this.match(bitmarkParser.CL);
                this.state = 2072;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2069;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2074;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2082;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2075;
                                    this.bitElem();
                                    this.state = 2079;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 230, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2076;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2081;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 230, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2084;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    help() {
        let _localctx = new HelpContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, bitmarkParser.RULE_help);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2086;
                this.match(bitmarkParser.BitHelp);
                this.state = 2087;
                this.format();
                this.state = 2088;
                this.match(bitmarkParser.CL);
                this.state = 2092;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2089;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2094;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2102;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2095;
                                    this.bitElem();
                                    this.state = 2099;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2096;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2101;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2104;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    danger() {
        let _localctx = new DangerContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, bitmarkParser.RULE_danger);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2106;
                this.match(bitmarkParser.BitDanger);
                this.state = 2107;
                this.format();
                this.state = 2108;
                this.match(bitmarkParser.CL);
                this.state = 2112;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2109;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2114;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2122;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2115;
                                    this.bitElem();
                                    this.state = 2119;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2116;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2121;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2124;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bug() {
        let _localctx = new BugContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, bitmarkParser.RULE_bug);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2126;
                this.match(bitmarkParser.BitBug);
                this.state = 2127;
                this.format();
                this.state = 2128;
                this.match(bitmarkParser.CL);
                this.state = 2132;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2129;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2134;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2142;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2135;
                                    this.bitElem();
                                    this.state = 2139;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2136;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2141;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2144;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 240, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sidenote() {
        let _localctx = new SidenoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, bitmarkParser.RULE_sidenote);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2146;
                this.match(bitmarkParser.BitSidenote);
                this.state = 2147;
                this.format();
                this.state = 2148;
                this.match(bitmarkParser.CL);
                this.state = 2152;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2149;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2154;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2162;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2155;
                                    this.bitElem();
                                    this.state = 2159;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2156;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2161;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2164;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stickynote() {
        let _localctx = new StickynoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, bitmarkParser.RULE_stickynote);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2166;
                this.match(bitmarkParser.BitStickynote);
                this.state = 2167;
                this.format();
                this.state = 2168;
                this.match(bitmarkParser.CL);
                this.state = 2172;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2169;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2174;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2182;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2175;
                                    this.bitElem();
                                    this.state = 2179;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2176;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2181;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2184;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    quote() {
        let _localctx = new QuoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, bitmarkParser.RULE_quote);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2186;
                this.match(bitmarkParser.BitQuote);
                this.state = 2187;
                this.format();
                this.state = 2188;
                this.match(bitmarkParser.CL);
                this.state = 2192;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2189;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2194;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2202;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2195;
                                    this.bitElem();
                                    this.state = 2199;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2196;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2201;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2204;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    footnote() {
        let _localctx = new FootnoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, bitmarkParser.RULE_footnote);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2206;
                this.match(bitmarkParser.BitFootnote);
                this.state = 2207;
                this.format();
                this.state = 2208;
                this.match(bitmarkParser.CL);
                this.state = 2212;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2209;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2214;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2222;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2215;
                                    this.bitElem();
                                    this.state = 2219;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2216;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2221;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2224;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    hintbit() {
        let _localctx = new HintbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, bitmarkParser.RULE_hintbit);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2226;
                this.match(bitmarkParser.BitHint);
                this.state = 2227;
                this.format();
                this.state = 2228;
                this.match(bitmarkParser.CL);
                this.state = 2232;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2229;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2234;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2242;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2235;
                                    this.bitElem();
                                    this.state = 2239;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 254, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2236;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2241;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 254, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2244;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    examplebit() {
        let _localctx = new ExamplebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, bitmarkParser.RULE_examplebit);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2246;
                this.match(bitmarkParser.BitExample);
                this.state = 2247;
                this.format();
                this.state = 2248;
                this.match(bitmarkParser.CL);
                this.state = 2252;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2249;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2254;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2262;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2255;
                                    this.bitElem();
                                    this.state = 2259;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2256;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2261;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2264;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_padlet_embed() {
        let _localctx = new Vendor_padlet_embedContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, bitmarkParser.RULE_vendor_padlet_embed);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2266;
                this.match(bitmarkParser.BitVendorPadletEmbed);
                this.state = 2267;
                this.format();
                this.state = 2268;
                this.match(bitmarkParser.CL);
                this.state = 2272;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2269;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2274;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2282;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2275;
                                    this.bitElem();
                                    this.state = 2279;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 260, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2276;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2281;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 260, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2284;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    scorm() {
        let _localctx = new ScormContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, bitmarkParser.RULE_scorm);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2286;
                this.match(bitmarkParser.BitScorm);
                this.state = 2287;
                this.format();
                this.state = 2288;
                this.match(bitmarkParser.CL);
                this.state = 2292;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2289;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2294;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2302;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2295;
                                    this.bitElem();
                                    this.state = 2299;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2296;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2301;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2304;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_image() {
        let _localctx = new Bit_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, bitmarkParser.RULE_bit_image);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2306;
                this.match(bitmarkParser.BitImage);
                this.state = 2307;
                this.format2();
                this.state = 2308;
                this.match(bitmarkParser.CL);
                this.state = 2312;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2309;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2314;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2322;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2315;
                                    this.bitElem();
                                    this.state = 2319;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 266, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2316;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2321;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 266, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2324;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 267, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imageLink() {
        let _localctx = new Bit_imageLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, bitmarkParser.RULE_bit_imageLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2326;
                this.match(bitmarkParser.BitImageLink);
                this.state = 2327;
                this.format2();
                this.state = 2328;
                this.match(bitmarkParser.CL);
                this.state = 2332;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2329;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2334;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2342;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2335;
                                    this.bitElem();
                                    this.state = 2339;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 269, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2336;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2341;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 269, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2344;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 270, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imageZoom() {
        let _localctx = new Bit_imageZoomContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, bitmarkParser.RULE_bit_imageZoom);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2346;
                this.match(bitmarkParser.BitImageZoom);
                this.state = 2347;
                this.format2();
                this.state = 2348;
                this.match(bitmarkParser.CL);
                this.state = 2352;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2349;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2354;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2362;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2355;
                                    this.bitElem();
                                    this.state = 2359;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 272, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2356;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2361;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 272, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2364;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 273, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imagePrototype() {
        let _localctx = new Bit_imagePrototypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, bitmarkParser.RULE_bit_imagePrototype);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2366;
                this.match(bitmarkParser.BitImagePrototype);
                this.state = 2367;
                this.format2();
                this.state = 2368;
                this.match(bitmarkParser.CL);
                this.state = 2372;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2369;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2374;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2382;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2375;
                                    this.bitElem();
                                    this.state = 2379;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 275, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2376;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2381;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 275, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2384;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 276, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imageSuperWide() {
        let _localctx = new Bit_imageSuperWideContext(this._ctx, this.state);
        this.enterRule(_localctx, 176, bitmarkParser.RULE_bit_imageSuperWide);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2386;
                this.match(bitmarkParser.BitImageSuperWide);
                this.state = 2387;
                this.format2();
                this.state = 2388;
                this.match(bitmarkParser.CL);
                this.state = 2392;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2389;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2394;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2402;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2395;
                                    this.bitElem();
                                    this.state = 2399;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2396;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2401;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2404;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 279, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_audio() {
        let _localctx = new Bit_audioContext(this._ctx, this.state);
        this.enterRule(_localctx, 178, bitmarkParser.RULE_bit_audio);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2406;
                this.match(bitmarkParser.BitAudio);
                this.state = 2407;
                this.format2();
                this.state = 2408;
                this.match(bitmarkParser.CL);
                this.state = 2412;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2409;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2414;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2422;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2415;
                                    this.bitElem();
                                    this.state = 2419;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2416;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2421;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2424;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 282, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_audioLink() {
        let _localctx = new Bit_audioLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, bitmarkParser.RULE_bit_audioLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2426;
                this.match(bitmarkParser.BitAudioLink);
                this.state = 2427;
                this.format2();
                this.state = 2428;
                this.match(bitmarkParser.CL);
                this.state = 2432;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2429;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2434;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2442;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2435;
                                    this.bitElem();
                                    this.state = 2439;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 284, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2436;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2441;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 284, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2444;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_audioEmbed() {
        let _localctx = new Bit_audioEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, bitmarkParser.RULE_bit_audioEmbed);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2446;
                this.match(bitmarkParser.BitAudioEmbed);
                this.state = 2447;
                this.format2();
                this.state = 2448;
                this.match(bitmarkParser.CL);
                this.state = 2452;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2449;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2454;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2462;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2455;
                                    this.bitElem();
                                    this.state = 2459;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 287, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2456;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2461;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 287, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2464;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 288, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_video() {
        let _localctx = new Bit_videoContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, bitmarkParser.RULE_bit_video);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2466;
                this.match(bitmarkParser.BitVideo);
                this.state = 2467;
                this.format2();
                this.state = 2468;
                this.match(bitmarkParser.CL);
                this.state = 2472;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2469;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2474;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2482;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2475;
                                    this.bitElem();
                                    this.state = 2479;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 290, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2476;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2481;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 290, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2484;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoLink() {
        let _localctx = new Bit_videoLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, bitmarkParser.RULE_bit_videoLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2486;
                this.match(bitmarkParser.BitVideoLink);
                this.state = 2487;
                this.format2();
                this.state = 2488;
                this.match(bitmarkParser.CL);
                this.state = 2492;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2489;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2494;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2502;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2495;
                                    this.bitElem();
                                    this.state = 2499;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 293, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2496;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2501;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 293, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2504;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoEmbed() {
        let _localctx = new Bit_videoEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, bitmarkParser.RULE_bit_videoEmbed);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2506;
                this.match(bitmarkParser.BitVideoEmbed);
                this.state = 2507;
                this.format2();
                this.state = 2508;
                this.match(bitmarkParser.CL);
                this.state = 2512;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2509;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2514;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2522;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2515;
                                    this.bitElem();
                                    this.state = 2519;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 296, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2516;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2521;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 296, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2524;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoPortrait() {
        let _localctx = new Bit_videoPortraitContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, bitmarkParser.RULE_bit_videoPortrait);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2526;
                this.match(bitmarkParser.BitVideoPortrait);
                this.state = 2527;
                this.format2();
                this.state = 2528;
                this.match(bitmarkParser.CL);
                this.state = 2532;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2529;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2534;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2542;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2535;
                                    this.bitElem();
                                    this.state = 2539;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2536;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2541;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2544;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoLandscape() {
        let _localctx = new Bit_videoLandscapeContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, bitmarkParser.RULE_bit_videoLandscape);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2546;
                this.match(bitmarkParser.BitVideoLandscape);
                this.state = 2547;
                this.format2();
                this.state = 2548;
                this.match(bitmarkParser.CL);
                this.state = 2552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2549;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2554;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2562;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2555;
                                    this.bitElem();
                                    this.state = 2559;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2556;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2561;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2564;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_stillImageFilm() {
        let _localctx = new Bit_stillImageFilmContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, bitmarkParser.RULE_bit_stillImageFilm);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2566;
                this.match(bitmarkParser.BitStillImageFilm);
                this.state = 2567;
                this.format2();
                this.state = 2568;
                this.match(bitmarkParser.CL);
                this.state = 2572;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2569;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2574;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2582;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2575;
                                    this.bitElem();
                                    this.state = 2579;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2576;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2581;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2584;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_stillImageFilmLink() {
        let _localctx = new Bit_stillImageFilmLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, bitmarkParser.RULE_bit_stillImageFilmLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2586;
                this.match(bitmarkParser.BitStillImageFilmLink);
                this.state = 2587;
                this.format2();
                this.state = 2588;
                this.match(bitmarkParser.CL);
                this.state = 2592;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2589;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2594;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2602;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2595;
                                    this.bitElem();
                                    this.state = 2599;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2596;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2601;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2604;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_stillImageFilmEmbed() {
        let _localctx = new Bit_stillImageFilmEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, bitmarkParser.RULE_bit_stillImageFilmEmbed);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2606;
                this.match(bitmarkParser.BitStillImageFilmEmbed);
                this.state = 2607;
                this.format2();
                this.state = 2608;
                this.match(bitmarkParser.CL);
                this.state = 2612;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2609;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2614;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2622;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2615;
                                    this.bitElem();
                                    this.state = 2619;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2616;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2621;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2624;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_websiteLink() {
        let _localctx = new Bit_websiteLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 200, bitmarkParser.RULE_bit_websiteLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2626;
                this.match(bitmarkParser.BitWebsiteLink);
                this.state = 2627;
                this.format2();
                this.state = 2628;
                this.match(bitmarkParser.CL);
                this.state = 2632;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2629;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2634;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2642;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2635;
                                    this.bitElem();
                                    this.state = 2639;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 314, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2636;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2641;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 314, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2644;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_document() {
        let _localctx = new Bit_documentContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, bitmarkParser.RULE_bit_document);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2646;
                this.match(bitmarkParser.BitDocument);
                this.state = 2647;
                this.format2();
                this.state = 2648;
                this.match(bitmarkParser.CL);
                this.state = 2652;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2649;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2654;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2662;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2655;
                                    this.bitElem();
                                    this.state = 2659;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2656;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2661;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2664;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_documentLink() {
        let _localctx = new Bit_documentLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 204, bitmarkParser.RULE_bit_documentLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2666;
                this.match(bitmarkParser.BitDocumentLink);
                this.state = 2667;
                this.format2();
                this.state = 2668;
                this.match(bitmarkParser.CL);
                this.state = 2672;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2669;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2674;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2682;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2675;
                                    this.bitElem();
                                    this.state = 2679;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 320, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2676;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2681;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 320, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2684;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_documentEmbed() {
        let _localctx = new Bit_documentEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 206, bitmarkParser.RULE_bit_documentEmbed);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2686;
                this.match(bitmarkParser.BitDocumentEmbed);
                this.state = 2687;
                this.format2();
                this.state = 2688;
                this.match(bitmarkParser.CL);
                this.state = 2692;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2689;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2694;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2702;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2695;
                                    this.bitElem();
                                    this.state = 2699;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 323, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2696;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2701;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 323, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2704;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_documentDownload() {
        let _localctx = new Bit_documentDownloadContext(this._ctx, this.state);
        this.enterRule(_localctx, 208, bitmarkParser.RULE_bit_documentDownload);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2706;
                this.match(bitmarkParser.BitDocumentDownload);
                this.state = 2707;
                this.format2();
                this.state = 2708;
                this.match(bitmarkParser.CL);
                this.state = 2712;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2709;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2714;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2722;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2715;
                                    this.bitElem();
                                    this.state = 2719;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 326, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2716;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2721;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 326, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2724;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_appLink() {
        let _localctx = new Bit_appLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 210, bitmarkParser.RULE_bit_appLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2726;
                this.match(bitmarkParser.BitAppLink);
                this.state = 2727;
                this.format2();
                this.state = 2728;
                this.match(bitmarkParser.CL);
                this.state = 2732;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2729;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2734;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2742;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2735;
                                    this.bitElem();
                                    this.state = 2739;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 329, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2736;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2741;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 329, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2744;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_editorial() {
        let _localctx = new Bit_editorialContext(this._ctx, this.state);
        this.enterRule(_localctx, 212, bitmarkParser.RULE_bit_editorial);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2746;
                this.match(bitmarkParser.BitEditorial);
                this.state = 2747;
                this.format2();
                this.state = 2748;
                this.match(bitmarkParser.CL);
                this.state = 2752;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2749;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2754;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2762;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2755;
                                    this.bitElem();
                                    this.state = 2759;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2756;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2761;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2764;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_frontispiece() {
        let _localctx = new Book_frontispieceContext(this._ctx, this.state);
        this.enterRule(_localctx, 214, bitmarkParser.RULE_book_frontispiece);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2766;
                this.match(bitmarkParser.BitBookFrontispiece);
                this.state = 2767;
                this.format();
                this.state = 2768;
                this.match(bitmarkParser.CL);
                this.state = 2772;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2769;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2774;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2782;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2775;
                                    this.bitElem();
                                    this.state = 2779;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2776;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2781;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2784;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 336, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_title() {
        let _localctx = new Book_titleContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, bitmarkParser.RULE_book_title);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2786;
                this.match(bitmarkParser.BitBookTitle);
                this.state = 2787;
                this.format();
                this.state = 2788;
                this.match(bitmarkParser.CL);
                this.state = 2792;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2789;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2794;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2802;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2795;
                                    this.bitElem();
                                    this.state = 2799;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 338, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2796;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2801;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 338, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2804;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_copyright() {
        let _localctx = new Book_copyrightContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, bitmarkParser.RULE_book_copyright);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2806;
                this.match(bitmarkParser.BitBookCopyright);
                this.state = 2807;
                this.format();
                this.state = 2808;
                this.match(bitmarkParser.CL);
                this.state = 2812;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2809;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2814;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2822;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2815;
                                    this.bitElem();
                                    this.state = 2819;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2816;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2821;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2824;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_dedication() {
        let _localctx = new Book_dedicationContext(this._ctx, this.state);
        this.enterRule(_localctx, 220, bitmarkParser.RULE_book_dedication);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2826;
                this.match(bitmarkParser.BitBookDedication);
                this.state = 2827;
                this.format();
                this.state = 2828;
                this.match(bitmarkParser.CL);
                this.state = 2832;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2829;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2834;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2842;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2835;
                                    this.bitElem();
                                    this.state = 2839;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2836;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2841;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2844;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_forword() {
        let _localctx = new Book_forwordContext(this._ctx, this.state);
        this.enterRule(_localctx, 222, bitmarkParser.RULE_book_forword);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2846;
                this.match(bitmarkParser.BitBookForword);
                this.state = 2847;
                this.format();
                this.state = 2848;
                this.match(bitmarkParser.CL);
                this.state = 2852;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2849;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2854;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2862;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2855;
                                    this.bitElem();
                                    this.state = 2859;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2856;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2861;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2864;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_preface() {
        let _localctx = new Book_prefaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 224, bitmarkParser.RULE_book_preface);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2866;
                this.match(bitmarkParser.BitBookPreface);
                this.state = 2867;
                this.format();
                this.state = 2868;
                this.match(bitmarkParser.CL);
                this.state = 2872;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2869;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2874;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2882;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2875;
                                    this.bitElem();
                                    this.state = 2879;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 350, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2876;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2881;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 350, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2884;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 351, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_prologue() {
        let _localctx = new Book_prologueContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, bitmarkParser.RULE_book_prologue);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2886;
                this.match(bitmarkParser.BitBookPrologue);
                this.state = 2887;
                this.format();
                this.state = 2888;
                this.match(bitmarkParser.CL);
                this.state = 2892;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2889;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2894;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2902;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2895;
                                    this.bitElem();
                                    this.state = 2899;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2896;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2901;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2904;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_epilogue() {
        let _localctx = new Book_epilogueContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, bitmarkParser.RULE_book_epilogue);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2906;
                this.match(bitmarkParser.BitBookEpilogue);
                this.state = 2907;
                this.format();
                this.state = 2908;
                this.match(bitmarkParser.CL);
                this.state = 2912;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2909;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2914;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2922;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2915;
                                    this.bitElem();
                                    this.state = 2919;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 356, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2916;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2921;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 356, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2924;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_introduction() {
        let _localctx = new Book_introductionContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, bitmarkParser.RULE_book_introduction);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2926;
                this.match(bitmarkParser.BitBookIntroduction);
                this.state = 2927;
                this.format();
                this.state = 2928;
                this.match(bitmarkParser.CL);
                this.state = 2932;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2929;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2934;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2942;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2935;
                                    this.bitElem();
                                    this.state = 2939;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 359, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2936;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2941;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 359, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2944;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 360, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_inciting_incident() {
        let _localctx = new Book_inciting_incidentContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, bitmarkParser.RULE_book_inciting_incident);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2946;
                this.match(bitmarkParser.BitBookIncitingIncident);
                this.state = 2947;
                this.format();
                this.state = 2948;
                this.match(bitmarkParser.CL);
                this.state = 2952;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2949;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2954;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2962;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2955;
                                    this.bitElem();
                                    this.state = 2959;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2956;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2961;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2964;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_conclusion() {
        let _localctx = new Book_conclusionContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, bitmarkParser.RULE_book_conclusion);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2966;
                this.match(bitmarkParser.BitBookConclusion);
                this.state = 2967;
                this.format();
                this.state = 2968;
                this.match(bitmarkParser.CL);
                this.state = 2972;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2969;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2974;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2982;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2975;
                                    this.bitElem();
                                    this.state = 2979;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 365, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2976;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2981;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 365, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 2984;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 366, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_afterword() {
        let _localctx = new Book_afterwordContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, bitmarkParser.RULE_book_afterword);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2986;
                this.match(bitmarkParser.BitBookAfterword);
                this.state = 2987;
                this.format();
                this.state = 2988;
                this.match(bitmarkParser.CL);
                this.state = 2992;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2989;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2994;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3002;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2995;
                                    this.bitElem();
                                    this.state = 2999;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 368, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2996;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3001;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 368, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3004;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_postscript() {
        let _localctx = new Book_postscriptContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, bitmarkParser.RULE_book_postscript);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3006;
                this.match(bitmarkParser.BitBookPostscript);
                this.state = 3007;
                this.format();
                this.state = 3008;
                this.match(bitmarkParser.CL);
                this.state = 3012;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3009;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3014;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3022;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3015;
                                    this.bitElem();
                                    this.state = 3019;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 371, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3016;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3021;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 371, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3024;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_appendix() {
        let _localctx = new Book_appendixContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, bitmarkParser.RULE_book_appendix);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3026;
                this.match(bitmarkParser.BitBookappendix);
                this.state = 3027;
                this.format();
                this.state = 3028;
                this.match(bitmarkParser.CL);
                this.state = 3032;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3029;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3034;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3042;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3035;
                                    this.bitElem();
                                    this.state = 3039;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 374, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3036;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3041;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 374, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3044;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 375, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_addendum() {
        let _localctx = new Book_addendumContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, bitmarkParser.RULE_book_addendum);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3046;
                this.match(bitmarkParser.BitBookAddendum);
                this.state = 3047;
                this.format();
                this.state = 3048;
                this.match(bitmarkParser.CL);
                this.state = 3052;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3049;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3054;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3062;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3055;
                                    this.bitElem();
                                    this.state = 3059;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3056;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3061;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3064;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_acknowledgments() {
        let _localctx = new Book_acknowledgmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, bitmarkParser.RULE_book_acknowledgments);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3066;
                this.match(bitmarkParser.BitBookAcknowledgments);
                this.state = 3067;
                this.format();
                this.state = 3068;
                this.match(bitmarkParser.CL);
                this.state = 3072;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3069;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3074;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3082;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3075;
                                    this.bitElem();
                                    this.state = 3079;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3076;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3081;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3084;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_list_of_contributors() {
        let _localctx = new Book_list_of_contributorsContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, bitmarkParser.RULE_book_list_of_contributors);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3086;
                this.match(bitmarkParser.BitBookListOfContributors);
                this.state = 3087;
                this.format();
                this.state = 3088;
                this.match(bitmarkParser.CL);
                this.state = 3092;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3089;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3094;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3102;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3095;
                                    this.bitElem();
                                    this.state = 3099;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3096;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3101;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3104;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_bibliography() {
        let _localctx = new Book_bibliographyContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, bitmarkParser.RULE_book_bibliography);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3106;
                this.match(bitmarkParser.BitBookBibliography);
                this.state = 3107;
                this.format();
                this.state = 3108;
                this.match(bitmarkParser.CL);
                this.state = 3112;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3109;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3114;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3122;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3115;
                                    this.bitElem();
                                    this.state = 3119;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 386, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3116;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3121;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 386, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3124;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_reference_list() {
        let _localctx = new Book_reference_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, bitmarkParser.RULE_book_reference_list);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3126;
                this.match(bitmarkParser.BitBookReferenceList);
                this.state = 3127;
                this.format();
                this.state = 3128;
                this.match(bitmarkParser.CL);
                this.state = 3132;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3129;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3134;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3142;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3135;
                                    this.bitElem();
                                    this.state = 3139;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 389, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3136;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3141;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 389, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3144;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 390, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_endnotes() {
        let _localctx = new Book_endnotesContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, bitmarkParser.RULE_book_endnotes);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3146;
                this.match(bitmarkParser.BitBookEndnotes);
                this.state = 3147;
                this.format();
                this.state = 3148;
                this.match(bitmarkParser.CL);
                this.state = 3152;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3149;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3154;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3162;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3155;
                                    this.bitElem();
                                    this.state = 3159;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3156;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3161;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3164;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_notes() {
        let _localctx = new Book_notesContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, bitmarkParser.RULE_book_notes);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3166;
                this.match(bitmarkParser.BitBookNotes);
                this.state = 3167;
                this.format();
                this.state = 3168;
                this.match(bitmarkParser.CL);
                this.state = 3172;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3169;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3174;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3182;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3175;
                                    this.bitElem();
                                    this.state = 3179;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 395, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3176;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3181;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 395, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3184;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_copyright_permissions() {
        let _localctx = new Book_copyright_permissionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, bitmarkParser.RULE_book_copyright_permissions);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3186;
                this.match(bitmarkParser.BitBookCopyrightPermissions);
                this.state = 3187;
                this.format();
                this.state = 3188;
                this.match(bitmarkParser.CL);
                this.state = 3192;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3189;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3194;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3202;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3195;
                                    this.bitElem();
                                    this.state = 3199;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3196;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3201;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3204;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_teaser() {
        let _localctx = new Book_teaserContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, bitmarkParser.RULE_book_teaser);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3206;
                this.match(bitmarkParser.BitBookTeaser);
                this.state = 3207;
                this.format();
                this.state = 3208;
                this.match(bitmarkParser.CL);
                this.state = 3212;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3209;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3214;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3222;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3215;
                                    this.bitElem();
                                    this.state = 3219;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 401, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3216;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3221;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 401, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3224;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_auther_bio() {
        let _localctx = new Book_auther_bioContext(this._ctx, this.state);
        this.enterRule(_localctx, 260, bitmarkParser.RULE_book_auther_bio);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3226;
                this.match(bitmarkParser.BitBookAutherBio);
                this.state = 3227;
                this.format();
                this.state = 3228;
                this.match(bitmarkParser.CL);
                this.state = 3232;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3229;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3234;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3242;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3235;
                                    this.bitElem();
                                    this.state = 3239;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3236;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3241;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3244;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_request_for_a_book_review() {
        let _localctx = new Book_request_for_a_book_reviewContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, bitmarkParser.RULE_book_request_for_a_book_review);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3246;
                this.match(bitmarkParser.BitBookRequestForABookReview);
                this.state = 3247;
                this.format();
                this.state = 3248;
                this.match(bitmarkParser.CL);
                this.state = 3252;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3249;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3254;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3262;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3255;
                                    this.bitElem();
                                    this.state = 3259;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3256;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3261;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3264;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_coming_soon() {
        let _localctx = new Book_coming_soonContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, bitmarkParser.RULE_book_coming_soon);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3266;
                this.match(bitmarkParser.BitBookComingSoon);
                this.state = 3267;
                this.format();
                this.state = 3268;
                this.match(bitmarkParser.CL);
                this.state = 3272;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3269;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3274;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3282;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3275;
                                    this.bitElem();
                                    this.state = 3279;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3276;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3281;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3284;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_read_more() {
        let _localctx = new Book_read_moreContext(this._ctx, this.state);
        this.enterRule(_localctx, 266, bitmarkParser.RULE_book_read_more);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3286;
                this.match(bitmarkParser.BitBookReadMore);
                this.state = 3287;
                this.format();
                this.state = 3288;
                this.match(bitmarkParser.CL);
                this.state = 3292;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3289;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3294;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3302;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3295;
                                    this.bitElem();
                                    this.state = 3299;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3296;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3301;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3304;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 414, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_summary() {
        let _localctx = new Book_summaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 268, bitmarkParser.RULE_book_summary);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3306;
                this.match(bitmarkParser.BitBookSummary);
                this.state = 3307;
                this.format();
                this.state = 3308;
                this.match(bitmarkParser.CL);
                this.state = 3312;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3309;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3314;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3322;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3315;
                                    this.bitElem();
                                    this.state = 3319;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3316;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3321;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3324;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_epigraph() {
        let _localctx = new Book_epigraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, bitmarkParser.RULE_book_epigraph);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3326;
                this.match(bitmarkParser.BitBookEpigraph);
                this.state = 3327;
                this.format();
                this.state = 3328;
                this.match(bitmarkParser.CL);
                this.state = 3332;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3329;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3334;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3342;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3335;
                                    this.bitElem();
                                    this.state = 3339;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3336;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3341;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3344;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    code() {
        let _localctx = new CodeContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, bitmarkParser.RULE_code);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3346;
                this.match(bitmarkParser.BitCode);
                this.state = 3347;
                this.format();
                this.state = 3348;
                this.match(bitmarkParser.CL);
                this.state = 3352;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3349;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3354;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3362;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3355;
                                    this.bitElem();
                                    this.state = 3359;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 422, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3356;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3361;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 422, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3364;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    card1() {
        let _localctx = new Card1Context(this._ctx, this.state);
        this.enterRule(_localctx, 274, bitmarkParser.RULE_card1);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3366;
                this.match(bitmarkParser.BitCard1);
                this.state = 3367;
                this.format();
                this.state = 3368;
                this.match(bitmarkParser.CL);
                this.state = 3372;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3369;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3374;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3382;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3375;
                                    this.bitElem();
                                    this.state = 3379;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 425, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3376;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3381;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 425, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3384;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    question1() {
        let _localctx = new Question1Context(this._ctx, this.state);
        this.enterRule(_localctx, 276, bitmarkParser.RULE_question1);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3386;
                this.match(bitmarkParser.BitQuestion1);
                this.state = 3387;
                this.format();
                this.state = 3388;
                this.match(bitmarkParser.CL);
                this.state = 3392;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3389;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3394;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3402;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3395;
                                    this.bitElem();
                                    this.state = 3399;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 428, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3396;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3401;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 428, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3404;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 429, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    screenshot() {
        let _localctx = new ScreenshotContext(this._ctx, this.state);
        this.enterRule(_localctx, 278, bitmarkParser.RULE_screenshot);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3406;
                this.match(bitmarkParser.BitScreenshot);
                this.state = 3407;
                this.format2();
                this.state = 3408;
                this.match(bitmarkParser.CL);
                this.state = 3412;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3409;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3414;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3422;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3415;
                                    this.bitElem();
                                    this.state = 3419;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 431, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3416;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3421;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 431, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3424;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    focus_image() {
        let _localctx = new Focus_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, bitmarkParser.RULE_focus_image);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3426;
                this.match(bitmarkParser.BitFocusImage);
                this.state = 3427;
                this.format2();
                this.state = 3428;
                this.match(bitmarkParser.CL);
                this.state = 3432;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3429;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3434;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3442;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3435;
                                    this.bitElem();
                                    this.state = 3439;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3436;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3441;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3444;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    photo() {
        let _localctx = new PhotoContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, bitmarkParser.RULE_photo);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3446;
                this.match(bitmarkParser.BitPhoto);
                this.state = 3447;
                this.format2();
                this.state = 3448;
                this.match(bitmarkParser.CL);
                this.state = 3452;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3449;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3454;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3462;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3455;
                                    this.bitElem();
                                    this.state = 3459;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3456;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3461;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3464;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    browser_image() {
        let _localctx = new Browser_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, bitmarkParser.RULE_browser_image);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3466;
                this.match(bitmarkParser.BitBrowserImage);
                this.state = 3467;
                this.format2();
                this.state = 3468;
                this.match(bitmarkParser.CL);
                this.state = 3472;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3469;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3474;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3482;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3475;
                                    this.bitElem();
                                    this.state = 3479;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3476;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3481;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3484;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    chapter_subject_matter() {
        let _localctx = new Chapter_subject_matterContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, bitmarkParser.RULE_chapter_subject_matter);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3486;
                this.match(bitmarkParser.BitChapterSubjectMatter);
                this.state = 3487;
                this.format();
                this.state = 3488;
                this.match(bitmarkParser.CL);
                this.state = 3492;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3489;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3494;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3502;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3495;
                                    this.bitElem();
                                    this.state = 3499;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3496;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3501;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3504;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 444, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    release_note() {
        let _localctx = new Release_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, bitmarkParser.RULE_release_note);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3506;
                this.match(bitmarkParser.BitReleaseNote);
                this.state = 3507;
                this.format();
                this.state = 3508;
                this.match(bitmarkParser.CL);
                this.state = 3512;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3509;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3514;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3522;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3515;
                                    this.bitElem();
                                    this.state = 3519;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3516;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3521;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3524;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 447, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    conclusion() {
        let _localctx = new ConclusionContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, bitmarkParser.RULE_conclusion);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3526;
                this.match(bitmarkParser.BitConclusion);
                this.state = 3527;
                this.format();
                this.state = 3528;
                this.match(bitmarkParser.CL);
                this.state = 3532;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3529;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3534;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3542;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3535;
                                    this.bitElem();
                                    this.state = 3539;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3536;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3541;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3544;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 450, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    featured() {
        let _localctx = new FeaturedContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, bitmarkParser.RULE_featured);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3546;
                this.match(bitmarkParser.BitFeatured);
                this.state = 3547;
                this.format();
                this.state = 3548;
                this.match(bitmarkParser.CL);
                this.state = 3552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3549;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3554;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3562;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3555;
                                    this.bitElem();
                                    this.state = 3559;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3556;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3561;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3564;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 453, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_amcharts_5_chart() {
        let _localctx = new Vendor_amcharts_5_chartContext(this._ctx, this.state);
        this.enterRule(_localctx, 294, bitmarkParser.RULE_vendor_amcharts_5_chart);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3566;
                this.match(bitmarkParser.BitVendorAmcharts5Chart);
                this.state = 3567;
                this.format2();
                this.state = 3568;
                this.match(bitmarkParser.CL);
                this.state = 3572;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3569;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3574;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3582;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3575;
                                    this.bitElem();
                                    this.state = 3579;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 455, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3576;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3581;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 455, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3584;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    newspaper_article() {
        let _localctx = new Newspaper_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 296, bitmarkParser.RULE_newspaper_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3586;
                this.match(bitmarkParser.BitNewspaperArticle);
                this.state = 3587;
                this.format();
                this.state = 3588;
                this.match(bitmarkParser.CL);
                this.state = 3592;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3589;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3594;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3602;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3595;
                                    this.bitElem();
                                    this.state = 3599;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3596;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3601;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3604;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 459, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    blog_article() {
        let _localctx = new Blog_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 298, bitmarkParser.RULE_blog_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3606;
                this.match(bitmarkParser.BitBlogArticle);
                this.state = 3607;
                this.format();
                this.state = 3608;
                this.match(bitmarkParser.CL);
                this.state = 3612;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3609;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3614;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3622;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3615;
                                    this.bitElem();
                                    this.state = 3619;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 461, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3616;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3621;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 461, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3624;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 462, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_article() {
        let _localctx = new Book_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 300, bitmarkParser.RULE_book_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3626;
                this.match(bitmarkParser.BitBookArticle);
                this.state = 3627;
                this.format();
                this.state = 3628;
                this.match(bitmarkParser.CL);
                this.state = 3632;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3629;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3634;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3642;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3635;
                                    this.bitElem();
                                    this.state = 3639;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 464, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3636;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3641;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 464, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3644;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 465, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    notebook_article() {
        let _localctx = new Notebook_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 302, bitmarkParser.RULE_notebook_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3646;
                this.match(bitmarkParser.BitNotebookArticle);
                this.state = 3647;
                this.format();
                this.state = 3648;
                this.match(bitmarkParser.CL);
                this.state = 3652;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3649;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3654;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3662;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3655;
                                    this.bitElem();
                                    this.state = 3659;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 467, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3656;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3661;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 467, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3664;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    workbook_article() {
        let _localctx = new Workbook_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 304, bitmarkParser.RULE_workbook_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3666;
                this.match(bitmarkParser.BitWorkbookArticle);
                this.state = 3667;
                this.format();
                this.state = 3668;
                this.match(bitmarkParser.CL);
                this.state = 3672;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3669;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3674;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3682;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3675;
                                    this.bitElem();
                                    this.state = 3679;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3676;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3681;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3684;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    message() {
        let _localctx = new MessageContext(this._ctx, this.state);
        this.enterRule(_localctx, 306, bitmarkParser.RULE_message);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3686;
                this.match(bitmarkParser.BitMessage);
                this.state = 3687;
                this.format();
                this.state = 3688;
                this.match(bitmarkParser.CL);
                this.state = 3692;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3689;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3694;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3702;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3695;
                                    this.bitElem();
                                    this.state = 3699;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 473, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3696;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3701;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 473, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3704;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 474, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_interview() {
        let _localctx = new Bot_interviewContext(this._ctx, this.state);
        this.enterRule(_localctx, 308, bitmarkParser.RULE_bot_interview);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3706;
                this.match(bitmarkParser.BitBotint);
                this.state = 3707;
                this.format();
                this.state = 3708;
                this.match(bitmarkParser.CL);
                this.state = 3719;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3709;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3710;
                                    this.bot_choice();
                                    this.state = 3716;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.SSPL || _la === bitmarkParser.SSPL2) {
                                        {
                                            {
                                                this.state = 3711;
                                                this.sspl();
                                                this.state = 3712;
                                                this.bot_choice();
                                            }
                                        }
                                        this.state = 3718;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3721;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 476, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 3723;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3727;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3724;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3729;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
                }
                this.state = 3743;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 480, this._ctx)) {
                    case 1:
                        {
                            this.state = 3730;
                            this.resource();
                            this.state = 3740;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 479, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 3734;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 3731;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 3736;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 3737;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 3742;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 479, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_choice() {
        let _localctx = new Bot_choiceContext(this._ctx, this.state);
        this.enterRule(_localctx, 310, bitmarkParser.RULE_bot_choice);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3752;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 3752;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 481, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3745;
                                    this.words();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 3746;
                                    this.instruction();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 3747;
                                    this.audiobit();
                                }
                                break;
                            case 4:
                                {
                                    this.state = 3748;
                                    this.gap();
                                }
                                break;
                            case 5:
                                {
                                    this.state = 3749;
                                    this.choice_plus();
                                }
                                break;
                            case 6:
                                {
                                    this.state = 3750;
                                    this.choice_minus();
                                }
                                break;
                            case 7:
                                {
                                    this.state = 3751;
                                    this.choice_star();
                                }
                                break;
                        }
                    }
                    this.state = 3754;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & ((1 << (bitmarkParser.OPU - 152)) | (1 << (bitmarkParser.OPB - 152)) | (1 << (bitmarkParser.OPP - 152)) | (1 << (bitmarkParser.OPM - 152)) | (1 << (bitmarkParser.OPR - 152)) | (1 << (bitmarkParser.OPC - 152)) | (1 << (bitmarkParser.AMP - 152)) | (1 << (bitmarkParser.Greater - 152)) | (1 << (bitmarkParser.Less - 152)) | (1 << (bitmarkParser.RightAngle - 152)) | (1 << (bitmarkParser.RightArrow - 152)) | (1 << (bitmarkParser.QUOTE_INDEX - 152)))) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (bitmarkParser.NOTBITMARK - 188)) | (1 << (bitmarkParser.ELIPSIS - 188)) | (1 << (bitmarkParser.SENTENCE - 188)) | (1 << (bitmarkParser.BARSTRING - 188)))) !== 0) || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.OpAmpAudio - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 255)) & ~0x1F) === 0 && ((1 << (_la - 255)) & ((1 << (bitmarkParser.OpAmpAudioLink - 255)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 255)) | (1 << (bitmarkParser.BitmarkMinus - 255)) | (1 << (bitmarkParser.BitmarkPlus - 255)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    rating() {
        let _localctx = new RatingContext(this._ctx, this.state);
        this.enterRule(_localctx, 312, bitmarkParser.RULE_rating);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3756;
                this.match(bitmarkParser.BitRating);
                this.state = 3757;
                this.format();
                this.state = 3758;
                this.match(bitmarkParser.CL);
                this.state = 3762;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3759;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3764;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3774;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & ((1 << (bitmarkParser.OPDOLL - 147)) | (1 << (bitmarkParser.OPRANGLES - 147)) | (1 << (bitmarkParser.OPRANGLEL - 147)) | (1 << (bitmarkParser.OPDANGLE - 147)) | (1 << (bitmarkParser.OPU - 147)) | (1 << (bitmarkParser.OPB - 147)) | (1 << (bitmarkParser.OPQ - 147)) | (1 << (bitmarkParser.OPA - 147)) | (1 << (bitmarkParser.OPS - 147)) | (1 << (bitmarkParser.OPHASH - 147)) | (1 << (bitmarkParser.OPC - 147)) | (1 << (bitmarkParser.COLON - 147)) | (1 << (bitmarkParser.AMP - 147)) | (1 << (bitmarkParser.Greater - 147)) | (1 << (bitmarkParser.Less - 147)) | (1 << (bitmarkParser.RightAngle - 147)) | (1 << (bitmarkParser.RightArrow - 147)) | (1 << (bitmarkParser.DBLEQ - 147)) | (1 << (bitmarkParser.QUOTE_INDEX - 147)))) !== 0) || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & ((1 << (bitmarkParser.DCANY - 179)) | (1 << (bitmarkParser.ArticleText - 179)) | (1 << (bitmarkParser.NUMERIC - 179)) | (1 << (bitmarkParser.STRING - 179)) | (1 << (bitmarkParser.NOTBITMARK - 179)) | (1 << (bitmarkParser.ELIPSIS - 179)) | (1 << (bitmarkParser.SENTENCE - 179)) | (1 << (bitmarkParser.BARSTRING - 179)) | (1 << (bitmarkParser.AtProgress - 179)) | (1 << (bitmarkParser.AtReference - 179)) | (1 << (bitmarkParser.AtProgressPoints - 179)) | (1 << (bitmarkParser.AtExampleWithStr - 179)) | (1 << (bitmarkParser.AtExamplecol - 179)) | (1 << (bitmarkParser.AtExamplecl - 179)) | (1 << (bitmarkParser.AtPartialAnswerS - 179)) | (1 << (bitmarkParser.AtPartialAnswer - 179)) | (1 << (bitmarkParser.AtLabeltrue - 179)) | (1 << (bitmarkParser.AtLabelfalse - 179)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (bitmarkParser.OpAtCopyright - 216)) | (1 << (bitmarkParser.OpAtIsTracked - 216)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 216)) | (1 << (bitmarkParser.AtDate - 216)) | (1 << (bitmarkParser.AmpAudio - 216)) | (1 << (bitmarkParser.AmpImage - 216)) | (1 << (bitmarkParser.AmpVideo - 216)) | (1 << (bitmarkParser.AmpArticle - 216)) | (1 << (bitmarkParser.AmpDocument - 216)) | (1 << (bitmarkParser.AmpApp - 216)) | (1 << (bitmarkParser.AmpWebsite - 216)) | (1 << (bitmarkParser.AmpStillImageFilm - 216)) | (1 << (bitmarkParser.OpAmpAudio - 216)) | (1 << (bitmarkParser.OpAmpImage - 216)) | (1 << (bitmarkParser.OpAmpImageZoom - 216)) | (1 << (bitmarkParser.OpAmpImageWAudio - 216)) | (1 << (bitmarkParser.OpAmpVideo - 216)) | (1 << (bitmarkParser.OpAmpArticle - 216)) | (1 << (bitmarkParser.OpAmpDocument - 216)) | (1 << (bitmarkParser.OpAmpApp - 216)) | (1 << (bitmarkParser.OpAmpWebsite - 216)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 216)) | (1 << (bitmarkParser.BracEnclose - 216)) | (1 << (bitmarkParser.AmpAudioLink - 216)) | (1 << (bitmarkParser.AmpImageLink - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (bitmarkParser.AmpVideoLink - 248)) | (1 << (bitmarkParser.AmpArticleLink - 248)) | (1 << (bitmarkParser.AmpDocumentLink - 248)) | (1 << (bitmarkParser.AmpAppLink - 248)) | (1 << (bitmarkParser.AmpWebsiteLink - 248)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpAudioLink - 248)) | (1 << (bitmarkParser.OpAmpImageLink - 248)) | (1 << (bitmarkParser.OpAmpVideoLink - 248)) | (1 << (bitmarkParser.OpAmpArticleLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 248)) | (1 << (bitmarkParser.OpAmpAppLink - 248)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 248)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 248)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 248)) | (1 << (bitmarkParser.BitmarkMinus - 248)) | (1 << (bitmarkParser.BitmarkPlus - 248)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3765;
                            this.bitElem();
                            this.state = 3769;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3766;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3771;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3776;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3785;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3777;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3778;
                                    this.s_and_w();
                                    this.state = 3781;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3779;
                                                this.match(bitmarkParser.NL);
                                                this.state = 3780;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3783;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3787;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 487, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 3789;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3793;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3790;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3795;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
                }
                this.state = 3809;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 491, this._ctx)) {
                    case 1:
                        {
                            this.state = 3796;
                            this.resource();
                            this.state = 3806;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 490, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 3800;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 3797;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 3802;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 3803;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 3808;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 490, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bullet_item() {
        let _localctx = new Bullet_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 314, bitmarkParser.RULE_bullet_item);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3811;
                this.match(bitmarkParser.OPBUL);
                this.state = 3812;
                this.s_and_w();
                this.state = 3813;
                this.match(bitmarkParser.CL);
                this.state = 3815;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.AtPoints) {
                    {
                        this.state = 3814;
                        this.atpoint();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey() {
        let _localctx = new SurveyContext(this._ctx, this.state);
        this.enterRule(_localctx, 316, bitmarkParser.RULE_survey);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3817;
                this.match(bitmarkParser.BitSurvey);
                this.state = 3818;
                this.format();
                this.state = 3819;
                this.match(bitmarkParser.CL);
                this.state = 3823;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3820;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3825;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3835;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & ((1 << (bitmarkParser.OPDOLL - 147)) | (1 << (bitmarkParser.OPRANGLES - 147)) | (1 << (bitmarkParser.OPRANGLEL - 147)) | (1 << (bitmarkParser.OPDANGLE - 147)) | (1 << (bitmarkParser.OPU - 147)) | (1 << (bitmarkParser.OPB - 147)) | (1 << (bitmarkParser.OPQ - 147)) | (1 << (bitmarkParser.OPA - 147)) | (1 << (bitmarkParser.OPS - 147)) | (1 << (bitmarkParser.OPHASH - 147)) | (1 << (bitmarkParser.OPC - 147)) | (1 << (bitmarkParser.COLON - 147)) | (1 << (bitmarkParser.AMP - 147)) | (1 << (bitmarkParser.Greater - 147)) | (1 << (bitmarkParser.Less - 147)) | (1 << (bitmarkParser.RightAngle - 147)) | (1 << (bitmarkParser.RightArrow - 147)) | (1 << (bitmarkParser.DBLEQ - 147)) | (1 << (bitmarkParser.QUOTE_INDEX - 147)))) !== 0) || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & ((1 << (bitmarkParser.DCANY - 179)) | (1 << (bitmarkParser.ArticleText - 179)) | (1 << (bitmarkParser.NUMERIC - 179)) | (1 << (bitmarkParser.STRING - 179)) | (1 << (bitmarkParser.NOTBITMARK - 179)) | (1 << (bitmarkParser.ELIPSIS - 179)) | (1 << (bitmarkParser.SENTENCE - 179)) | (1 << (bitmarkParser.BARSTRING - 179)) | (1 << (bitmarkParser.AtProgress - 179)) | (1 << (bitmarkParser.AtReference - 179)) | (1 << (bitmarkParser.AtProgressPoints - 179)) | (1 << (bitmarkParser.AtExampleWithStr - 179)) | (1 << (bitmarkParser.AtExamplecol - 179)) | (1 << (bitmarkParser.AtExamplecl - 179)) | (1 << (bitmarkParser.AtPartialAnswerS - 179)) | (1 << (bitmarkParser.AtPartialAnswer - 179)) | (1 << (bitmarkParser.AtLabeltrue - 179)) | (1 << (bitmarkParser.AtLabelfalse - 179)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (bitmarkParser.OpAtCopyright - 216)) | (1 << (bitmarkParser.OpAtIsTracked - 216)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 216)) | (1 << (bitmarkParser.AtDate - 216)) | (1 << (bitmarkParser.AmpAudio - 216)) | (1 << (bitmarkParser.AmpImage - 216)) | (1 << (bitmarkParser.AmpVideo - 216)) | (1 << (bitmarkParser.AmpArticle - 216)) | (1 << (bitmarkParser.AmpDocument - 216)) | (1 << (bitmarkParser.AmpApp - 216)) | (1 << (bitmarkParser.AmpWebsite - 216)) | (1 << (bitmarkParser.AmpStillImageFilm - 216)) | (1 << (bitmarkParser.OpAmpAudio - 216)) | (1 << (bitmarkParser.OpAmpImage - 216)) | (1 << (bitmarkParser.OpAmpImageZoom - 216)) | (1 << (bitmarkParser.OpAmpImageWAudio - 216)) | (1 << (bitmarkParser.OpAmpVideo - 216)) | (1 << (bitmarkParser.OpAmpArticle - 216)) | (1 << (bitmarkParser.OpAmpDocument - 216)) | (1 << (bitmarkParser.OpAmpApp - 216)) | (1 << (bitmarkParser.OpAmpWebsite - 216)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 216)) | (1 << (bitmarkParser.BracEnclose - 216)) | (1 << (bitmarkParser.AmpAudioLink - 216)) | (1 << (bitmarkParser.AmpImageLink - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (bitmarkParser.AmpVideoLink - 248)) | (1 << (bitmarkParser.AmpArticleLink - 248)) | (1 << (bitmarkParser.AmpDocumentLink - 248)) | (1 << (bitmarkParser.AmpAppLink - 248)) | (1 << (bitmarkParser.AmpWebsiteLink - 248)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpAudioLink - 248)) | (1 << (bitmarkParser.OpAmpImageLink - 248)) | (1 << (bitmarkParser.OpAmpVideoLink - 248)) | (1 << (bitmarkParser.OpAmpArticleLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 248)) | (1 << (bitmarkParser.OpAmpAppLink - 248)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 248)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 248)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 248)) | (1 << (bitmarkParser.BitmarkMinus - 248)) | (1 << (bitmarkParser.BitmarkPlus - 248)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3826;
                            this.bitElem();
                            this.state = 3830;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3827;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3832;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3837;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3853;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3838;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3840;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                                        {
                                            this.state = 3839;
                                            this.s_and_w();
                                        }
                                    }
                                    this.state = 3849;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3845;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 3842;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 3847;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 3848;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3851;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3855;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 499, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 3857;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey_1() {
        let _localctx = new Survey_1Context(this._ctx, this.state);
        this.enterRule(_localctx, 318, bitmarkParser.RULE_survey_1);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3859;
                this.match(bitmarkParser.BitSurvey1);
                this.state = 3860;
                this.format();
                this.state = 3861;
                this.match(bitmarkParser.CL);
                this.state = 3865;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3862;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3867;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3877;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & ((1 << (bitmarkParser.OPDOLL - 147)) | (1 << (bitmarkParser.OPRANGLES - 147)) | (1 << (bitmarkParser.OPRANGLEL - 147)) | (1 << (bitmarkParser.OPDANGLE - 147)) | (1 << (bitmarkParser.OPU - 147)) | (1 << (bitmarkParser.OPB - 147)) | (1 << (bitmarkParser.OPQ - 147)) | (1 << (bitmarkParser.OPA - 147)) | (1 << (bitmarkParser.OPS - 147)) | (1 << (bitmarkParser.OPHASH - 147)) | (1 << (bitmarkParser.OPC - 147)) | (1 << (bitmarkParser.COLON - 147)) | (1 << (bitmarkParser.AMP - 147)) | (1 << (bitmarkParser.Greater - 147)) | (1 << (bitmarkParser.Less - 147)) | (1 << (bitmarkParser.RightAngle - 147)) | (1 << (bitmarkParser.RightArrow - 147)) | (1 << (bitmarkParser.DBLEQ - 147)) | (1 << (bitmarkParser.QUOTE_INDEX - 147)))) !== 0) || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & ((1 << (bitmarkParser.DCANY - 179)) | (1 << (bitmarkParser.ArticleText - 179)) | (1 << (bitmarkParser.NUMERIC - 179)) | (1 << (bitmarkParser.STRING - 179)) | (1 << (bitmarkParser.NOTBITMARK - 179)) | (1 << (bitmarkParser.ELIPSIS - 179)) | (1 << (bitmarkParser.SENTENCE - 179)) | (1 << (bitmarkParser.BARSTRING - 179)) | (1 << (bitmarkParser.AtProgress - 179)) | (1 << (bitmarkParser.AtReference - 179)) | (1 << (bitmarkParser.AtProgressPoints - 179)) | (1 << (bitmarkParser.AtExampleWithStr - 179)) | (1 << (bitmarkParser.AtExamplecol - 179)) | (1 << (bitmarkParser.AtExamplecl - 179)) | (1 << (bitmarkParser.AtPartialAnswerS - 179)) | (1 << (bitmarkParser.AtPartialAnswer - 179)) | (1 << (bitmarkParser.AtLabeltrue - 179)) | (1 << (bitmarkParser.AtLabelfalse - 179)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (bitmarkParser.OpAtCopyright - 216)) | (1 << (bitmarkParser.OpAtIsTracked - 216)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 216)) | (1 << (bitmarkParser.AtDate - 216)) | (1 << (bitmarkParser.AmpAudio - 216)) | (1 << (bitmarkParser.AmpImage - 216)) | (1 << (bitmarkParser.AmpVideo - 216)) | (1 << (bitmarkParser.AmpArticle - 216)) | (1 << (bitmarkParser.AmpDocument - 216)) | (1 << (bitmarkParser.AmpApp - 216)) | (1 << (bitmarkParser.AmpWebsite - 216)) | (1 << (bitmarkParser.AmpStillImageFilm - 216)) | (1 << (bitmarkParser.OpAmpAudio - 216)) | (1 << (bitmarkParser.OpAmpImage - 216)) | (1 << (bitmarkParser.OpAmpImageZoom - 216)) | (1 << (bitmarkParser.OpAmpImageWAudio - 216)) | (1 << (bitmarkParser.OpAmpVideo - 216)) | (1 << (bitmarkParser.OpAmpArticle - 216)) | (1 << (bitmarkParser.OpAmpDocument - 216)) | (1 << (bitmarkParser.OpAmpApp - 216)) | (1 << (bitmarkParser.OpAmpWebsite - 216)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 216)) | (1 << (bitmarkParser.BracEnclose - 216)) | (1 << (bitmarkParser.AmpAudioLink - 216)) | (1 << (bitmarkParser.AmpImageLink - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (bitmarkParser.AmpVideoLink - 248)) | (1 << (bitmarkParser.AmpArticleLink - 248)) | (1 << (bitmarkParser.AmpDocumentLink - 248)) | (1 << (bitmarkParser.AmpAppLink - 248)) | (1 << (bitmarkParser.AmpWebsiteLink - 248)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpAudioLink - 248)) | (1 << (bitmarkParser.OpAmpImageLink - 248)) | (1 << (bitmarkParser.OpAmpVideoLink - 248)) | (1 << (bitmarkParser.OpAmpArticleLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 248)) | (1 << (bitmarkParser.OpAmpAppLink - 248)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 248)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 248)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 248)) | (1 << (bitmarkParser.BitmarkMinus - 248)) | (1 << (bitmarkParser.BitmarkPlus - 248)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3868;
                            this.bitElem();
                            this.state = 3872;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3869;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3874;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3879;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3888;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3880;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3881;
                                    this.s_and_w();
                                    this.state = 3884;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3882;
                                                this.match(bitmarkParser.NL);
                                                this.state = 3883;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3886;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3890;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 504, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 3892;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey_anonymous() {
        let _localctx = new Survey_anonymousContext(this._ctx, this.state);
        this.enterRule(_localctx, 320, bitmarkParser.RULE_survey_anonymous);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3894;
                this.match(bitmarkParser.BitSurveyanon);
                this.state = 3895;
                this.format();
                this.state = 3896;
                this.match(bitmarkParser.CL);
                this.state = 3900;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3897;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3902;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3912;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & ((1 << (bitmarkParser.OPDOLL - 147)) | (1 << (bitmarkParser.OPRANGLES - 147)) | (1 << (bitmarkParser.OPRANGLEL - 147)) | (1 << (bitmarkParser.OPDANGLE - 147)) | (1 << (bitmarkParser.OPU - 147)) | (1 << (bitmarkParser.OPB - 147)) | (1 << (bitmarkParser.OPQ - 147)) | (1 << (bitmarkParser.OPA - 147)) | (1 << (bitmarkParser.OPS - 147)) | (1 << (bitmarkParser.OPHASH - 147)) | (1 << (bitmarkParser.OPC - 147)) | (1 << (bitmarkParser.COLON - 147)) | (1 << (bitmarkParser.AMP - 147)) | (1 << (bitmarkParser.Greater - 147)) | (1 << (bitmarkParser.Less - 147)) | (1 << (bitmarkParser.RightAngle - 147)) | (1 << (bitmarkParser.RightArrow - 147)) | (1 << (bitmarkParser.DBLEQ - 147)) | (1 << (bitmarkParser.QUOTE_INDEX - 147)))) !== 0) || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & ((1 << (bitmarkParser.DCANY - 179)) | (1 << (bitmarkParser.ArticleText - 179)) | (1 << (bitmarkParser.NUMERIC - 179)) | (1 << (bitmarkParser.STRING - 179)) | (1 << (bitmarkParser.NOTBITMARK - 179)) | (1 << (bitmarkParser.ELIPSIS - 179)) | (1 << (bitmarkParser.SENTENCE - 179)) | (1 << (bitmarkParser.BARSTRING - 179)) | (1 << (bitmarkParser.AtProgress - 179)) | (1 << (bitmarkParser.AtReference - 179)) | (1 << (bitmarkParser.AtProgressPoints - 179)) | (1 << (bitmarkParser.AtExampleWithStr - 179)) | (1 << (bitmarkParser.AtExamplecol - 179)) | (1 << (bitmarkParser.AtExamplecl - 179)) | (1 << (bitmarkParser.AtPartialAnswerS - 179)) | (1 << (bitmarkParser.AtPartialAnswer - 179)) | (1 << (bitmarkParser.AtLabeltrue - 179)) | (1 << (bitmarkParser.AtLabelfalse - 179)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (bitmarkParser.OpAtCopyright - 216)) | (1 << (bitmarkParser.OpAtIsTracked - 216)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 216)) | (1 << (bitmarkParser.AtDate - 216)) | (1 << (bitmarkParser.AmpAudio - 216)) | (1 << (bitmarkParser.AmpImage - 216)) | (1 << (bitmarkParser.AmpVideo - 216)) | (1 << (bitmarkParser.AmpArticle - 216)) | (1 << (bitmarkParser.AmpDocument - 216)) | (1 << (bitmarkParser.AmpApp - 216)) | (1 << (bitmarkParser.AmpWebsite - 216)) | (1 << (bitmarkParser.AmpStillImageFilm - 216)) | (1 << (bitmarkParser.OpAmpAudio - 216)) | (1 << (bitmarkParser.OpAmpImage - 216)) | (1 << (bitmarkParser.OpAmpImageZoom - 216)) | (1 << (bitmarkParser.OpAmpImageWAudio - 216)) | (1 << (bitmarkParser.OpAmpVideo - 216)) | (1 << (bitmarkParser.OpAmpArticle - 216)) | (1 << (bitmarkParser.OpAmpDocument - 216)) | (1 << (bitmarkParser.OpAmpApp - 216)) | (1 << (bitmarkParser.OpAmpWebsite - 216)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 216)) | (1 << (bitmarkParser.BracEnclose - 216)) | (1 << (bitmarkParser.AmpAudioLink - 216)) | (1 << (bitmarkParser.AmpImageLink - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (bitmarkParser.AmpVideoLink - 248)) | (1 << (bitmarkParser.AmpArticleLink - 248)) | (1 << (bitmarkParser.AmpDocumentLink - 248)) | (1 << (bitmarkParser.AmpAppLink - 248)) | (1 << (bitmarkParser.AmpWebsiteLink - 248)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpAudioLink - 248)) | (1 << (bitmarkParser.OpAmpImageLink - 248)) | (1 << (bitmarkParser.OpAmpVideoLink - 248)) | (1 << (bitmarkParser.OpAmpArticleLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 248)) | (1 << (bitmarkParser.OpAmpAppLink - 248)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 248)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 248)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 248)) | (1 << (bitmarkParser.BitmarkMinus - 248)) | (1 << (bitmarkParser.BitmarkPlus - 248)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3903;
                            this.bitElem();
                            this.state = 3907;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3904;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3909;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3914;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3923;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3915;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3916;
                                    this.s_and_w();
                                    this.state = 3919;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3917;
                                                this.match(bitmarkParser.NL);
                                                this.state = 3918;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3921;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3925;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 509, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 3927;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey_anonymous_1() {
        let _localctx = new Survey_anonymous_1Context(this._ctx, this.state);
        this.enterRule(_localctx, 322, bitmarkParser.RULE_survey_anonymous_1);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3929;
                this.match(bitmarkParser.BitSurveyanon1);
                this.state = 3930;
                this.format();
                this.state = 3931;
                this.match(bitmarkParser.CL);
                this.state = 3935;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3932;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3937;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3947;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & ((1 << (bitmarkParser.OPDOLL - 147)) | (1 << (bitmarkParser.OPRANGLES - 147)) | (1 << (bitmarkParser.OPRANGLEL - 147)) | (1 << (bitmarkParser.OPDANGLE - 147)) | (1 << (bitmarkParser.OPU - 147)) | (1 << (bitmarkParser.OPB - 147)) | (1 << (bitmarkParser.OPQ - 147)) | (1 << (bitmarkParser.OPA - 147)) | (1 << (bitmarkParser.OPS - 147)) | (1 << (bitmarkParser.OPHASH - 147)) | (1 << (bitmarkParser.OPC - 147)) | (1 << (bitmarkParser.COLON - 147)) | (1 << (bitmarkParser.AMP - 147)) | (1 << (bitmarkParser.Greater - 147)) | (1 << (bitmarkParser.Less - 147)) | (1 << (bitmarkParser.RightAngle - 147)) | (1 << (bitmarkParser.RightArrow - 147)) | (1 << (bitmarkParser.DBLEQ - 147)) | (1 << (bitmarkParser.QUOTE_INDEX - 147)))) !== 0) || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & ((1 << (bitmarkParser.DCANY - 179)) | (1 << (bitmarkParser.ArticleText - 179)) | (1 << (bitmarkParser.NUMERIC - 179)) | (1 << (bitmarkParser.STRING - 179)) | (1 << (bitmarkParser.NOTBITMARK - 179)) | (1 << (bitmarkParser.ELIPSIS - 179)) | (1 << (bitmarkParser.SENTENCE - 179)) | (1 << (bitmarkParser.BARSTRING - 179)) | (1 << (bitmarkParser.AtProgress - 179)) | (1 << (bitmarkParser.AtReference - 179)) | (1 << (bitmarkParser.AtProgressPoints - 179)) | (1 << (bitmarkParser.AtExampleWithStr - 179)) | (1 << (bitmarkParser.AtExamplecol - 179)) | (1 << (bitmarkParser.AtExamplecl - 179)) | (1 << (bitmarkParser.AtPartialAnswerS - 179)) | (1 << (bitmarkParser.AtPartialAnswer - 179)) | (1 << (bitmarkParser.AtLabeltrue - 179)) | (1 << (bitmarkParser.AtLabelfalse - 179)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (bitmarkParser.OpAtCopyright - 216)) | (1 << (bitmarkParser.OpAtIsTracked - 216)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 216)) | (1 << (bitmarkParser.AtDate - 216)) | (1 << (bitmarkParser.AmpAudio - 216)) | (1 << (bitmarkParser.AmpImage - 216)) | (1 << (bitmarkParser.AmpVideo - 216)) | (1 << (bitmarkParser.AmpArticle - 216)) | (1 << (bitmarkParser.AmpDocument - 216)) | (1 << (bitmarkParser.AmpApp - 216)) | (1 << (bitmarkParser.AmpWebsite - 216)) | (1 << (bitmarkParser.AmpStillImageFilm - 216)) | (1 << (bitmarkParser.OpAmpAudio - 216)) | (1 << (bitmarkParser.OpAmpImage - 216)) | (1 << (bitmarkParser.OpAmpImageZoom - 216)) | (1 << (bitmarkParser.OpAmpImageWAudio - 216)) | (1 << (bitmarkParser.OpAmpVideo - 216)) | (1 << (bitmarkParser.OpAmpArticle - 216)) | (1 << (bitmarkParser.OpAmpDocument - 216)) | (1 << (bitmarkParser.OpAmpApp - 216)) | (1 << (bitmarkParser.OpAmpWebsite - 216)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 216)) | (1 << (bitmarkParser.BracEnclose - 216)) | (1 << (bitmarkParser.AmpAudioLink - 216)) | (1 << (bitmarkParser.AmpImageLink - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (bitmarkParser.AmpVideoLink - 248)) | (1 << (bitmarkParser.AmpArticleLink - 248)) | (1 << (bitmarkParser.AmpDocumentLink - 248)) | (1 << (bitmarkParser.AmpAppLink - 248)) | (1 << (bitmarkParser.AmpWebsiteLink - 248)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpAudioLink - 248)) | (1 << (bitmarkParser.OpAmpImageLink - 248)) | (1 << (bitmarkParser.OpAmpVideoLink - 248)) | (1 << (bitmarkParser.OpAmpArticleLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 248)) | (1 << (bitmarkParser.OpAmpAppLink - 248)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 248)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 248)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 248)) | (1 << (bitmarkParser.BitmarkMinus - 248)) | (1 << (bitmarkParser.BitmarkPlus - 248)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3938;
                            this.bitElem();
                            this.state = 3942;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3939;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3944;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3949;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3958;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3950;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3951;
                                    this.s_and_w();
                                    this.state = 3954;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3952;
                                                this.match(bitmarkParser.NL);
                                                this.state = 3953;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3956;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3960;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 514, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 3962;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    self_assessment() {
        let _localctx = new Self_assessmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 324, bitmarkParser.RULE_self_assessment);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3964;
                this.match(bitmarkParser.BitSelfassess);
                this.state = 3965;
                this.format();
                this.state = 3966;
                this.match(bitmarkParser.CL);
                this.state = 3970;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3967;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3972;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3982;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 147)) & ~0x1F) === 0 && ((1 << (_la - 147)) & ((1 << (bitmarkParser.OPDOLL - 147)) | (1 << (bitmarkParser.OPRANGLES - 147)) | (1 << (bitmarkParser.OPRANGLEL - 147)) | (1 << (bitmarkParser.OPDANGLE - 147)) | (1 << (bitmarkParser.OPU - 147)) | (1 << (bitmarkParser.OPB - 147)) | (1 << (bitmarkParser.OPQ - 147)) | (1 << (bitmarkParser.OPA - 147)) | (1 << (bitmarkParser.OPS - 147)) | (1 << (bitmarkParser.OPHASH - 147)) | (1 << (bitmarkParser.OPC - 147)) | (1 << (bitmarkParser.COLON - 147)) | (1 << (bitmarkParser.AMP - 147)) | (1 << (bitmarkParser.Greater - 147)) | (1 << (bitmarkParser.Less - 147)) | (1 << (bitmarkParser.RightAngle - 147)) | (1 << (bitmarkParser.RightArrow - 147)) | (1 << (bitmarkParser.DBLEQ - 147)) | (1 << (bitmarkParser.QUOTE_INDEX - 147)))) !== 0) || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & ((1 << (bitmarkParser.DCANY - 179)) | (1 << (bitmarkParser.ArticleText - 179)) | (1 << (bitmarkParser.NUMERIC - 179)) | (1 << (bitmarkParser.STRING - 179)) | (1 << (bitmarkParser.NOTBITMARK - 179)) | (1 << (bitmarkParser.ELIPSIS - 179)) | (1 << (bitmarkParser.SENTENCE - 179)) | (1 << (bitmarkParser.BARSTRING - 179)) | (1 << (bitmarkParser.AtProgress - 179)) | (1 << (bitmarkParser.AtReference - 179)) | (1 << (bitmarkParser.AtProgressPoints - 179)) | (1 << (bitmarkParser.AtExampleWithStr - 179)) | (1 << (bitmarkParser.AtExamplecol - 179)) | (1 << (bitmarkParser.AtExamplecl - 179)) | (1 << (bitmarkParser.AtPartialAnswerS - 179)) | (1 << (bitmarkParser.AtPartialAnswer - 179)) | (1 << (bitmarkParser.AtLabeltrue - 179)) | (1 << (bitmarkParser.AtLabelfalse - 179)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (bitmarkParser.OpAtCopyright - 216)) | (1 << (bitmarkParser.OpAtIsTracked - 216)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 216)) | (1 << (bitmarkParser.AtDate - 216)) | (1 << (bitmarkParser.AmpAudio - 216)) | (1 << (bitmarkParser.AmpImage - 216)) | (1 << (bitmarkParser.AmpVideo - 216)) | (1 << (bitmarkParser.AmpArticle - 216)) | (1 << (bitmarkParser.AmpDocument - 216)) | (1 << (bitmarkParser.AmpApp - 216)) | (1 << (bitmarkParser.AmpWebsite - 216)) | (1 << (bitmarkParser.AmpStillImageFilm - 216)) | (1 << (bitmarkParser.OpAmpAudio - 216)) | (1 << (bitmarkParser.OpAmpImage - 216)) | (1 << (bitmarkParser.OpAmpImageZoom - 216)) | (1 << (bitmarkParser.OpAmpImageWAudio - 216)) | (1 << (bitmarkParser.OpAmpVideo - 216)) | (1 << (bitmarkParser.OpAmpArticle - 216)) | (1 << (bitmarkParser.OpAmpDocument - 216)) | (1 << (bitmarkParser.OpAmpApp - 216)) | (1 << (bitmarkParser.OpAmpWebsite - 216)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 216)) | (1 << (bitmarkParser.BracEnclose - 216)) | (1 << (bitmarkParser.AmpAudioLink - 216)) | (1 << (bitmarkParser.AmpImageLink - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (bitmarkParser.AmpVideoLink - 248)) | (1 << (bitmarkParser.AmpArticleLink - 248)) | (1 << (bitmarkParser.AmpDocumentLink - 248)) | (1 << (bitmarkParser.AmpAppLink - 248)) | (1 << (bitmarkParser.AmpWebsiteLink - 248)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpAudioLink - 248)) | (1 << (bitmarkParser.OpAmpImageLink - 248)) | (1 << (bitmarkParser.OpAmpVideoLink - 248)) | (1 << (bitmarkParser.OpAmpArticleLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentLink - 248)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 248)) | (1 << (bitmarkParser.OpAmpAppLink - 248)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 248)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 248)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 248)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 248)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 248)) | (1 << (bitmarkParser.BitmarkMinus - 248)) | (1 << (bitmarkParser.BitmarkPlus - 248)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3973;
                            this.bitElem();
                            this.state = 3977;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3974;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3979;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3984;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3998;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3985;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3986;
                                    this.self_assess_s_and_w();
                                    this.state = 3994;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3990;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 3987;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 3992;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 3993;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3996;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 4000;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 520, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                this.state = 4002;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4006;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 521, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4003;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4008;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 521, this._ctx);
                }
                this.state = 4022;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 524, this._ctx)) {
                    case 1:
                        {
                            this.state = 4009;
                            this.resource();
                            this.state = 4019;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 523, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 4013;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 4010;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 4015;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 4016;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 4021;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 523, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    self_assess_s_and_w() {
        let _localctx = new Self_assess_s_and_wContext(this._ctx, this.state);
        this.enterRule(_localctx, 326, bitmarkParser.RULE_self_assess_s_and_w);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4025;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4024;
                                    _la = this._input.LA(1);
                                    if (_la <= 0 || (_la === bitmarkParser.OPBUL)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 4027;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 525, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    atpoint() {
        let _localctx = new AtpointContext(this._ctx, this.state);
        this.enterRule(_localctx, 328, bitmarkParser.RULE_atpoint);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4029;
                this.match(bitmarkParser.AtPoints);
                this.state = 4030;
                this.match(bitmarkParser.NUMERIC);
                this.state = 4031;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    format() {
        let _localctx = new FormatContext(this._ctx, this.state);
        this.enterRule(_localctx, 330, bitmarkParser.RULE_format);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4036;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 526, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4033;
                                this.resource_format();
                            }
                        }
                    }
                    this.state = 4038;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 526, this._ctx);
                }
                this.state = 4044;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpImageZoom - 223)) | (1 << (bitmarkParser.AmpImageWAudio - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpPdf - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpDocumentDownload - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpVideoEmbed - 265)) | (1 << (bitmarkParser.AmpDocumentEmbed - 265)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 265)) | (1 << (bitmarkParser.ColonText - 265)) | (1 << (bitmarkParser.ColonJson - 265)))) !== 0)) {
                    {
                        this.state = 4042;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.ColonText:
                                {
                                    this.state = 4039;
                                    this.match(bitmarkParser.ColonText);
                                }
                                break;
                            case bitmarkParser.ColonJson:
                                {
                                    this.state = 4040;
                                    this.match(bitmarkParser.ColonJson);
                                }
                                break;
                            case bitmarkParser.AmpAudio:
                            case bitmarkParser.AmpImage:
                            case bitmarkParser.AmpImageZoom:
                            case bitmarkParser.AmpImageWAudio:
                            case bitmarkParser.AmpVideo:
                            case bitmarkParser.AmpArticle:
                            case bitmarkParser.AmpDocument:
                            case bitmarkParser.AmpApp:
                            case bitmarkParser.AmpWebsite:
                            case bitmarkParser.AmpStillImageFilm:
                            case bitmarkParser.AmpPdf:
                            case bitmarkParser.AmpAudioLink:
                            case bitmarkParser.AmpImageLink:
                            case bitmarkParser.AmpVideoLink:
                            case bitmarkParser.AmpArticleLink:
                            case bitmarkParser.AmpDocumentLink:
                            case bitmarkParser.AmpDocumentDownload:
                            case bitmarkParser.AmpAppLink:
                            case bitmarkParser.AmpWebsiteLink:
                            case bitmarkParser.AmpStillImageFilmLink:
                            case bitmarkParser.AmpVideoEmbed:
                            case bitmarkParser.AmpDocumentEmbed:
                            case bitmarkParser.AmpStillImageFilmEmbed:
                                {
                                    this.state = 4041;
                                    this.resource_format_extra();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    this.state = 4046;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource_format() {
        let _localctx = new Resource_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 332, bitmarkParser.RULE_resource_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4047;
                _la = this._input.LA(1);
                if (!(((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (bitmarkParser.AmpArticle - 228)) | (1 << (bitmarkParser.AmpDocument - 228)) | (1 << (bitmarkParser.AmpWebsite - 228)) | (1 << (bitmarkParser.AmpStillImageFilm - 228)) | (1 << (bitmarkParser.AmpAudioLink - 228)) | (1 << (bitmarkParser.AmpImageLink - 228)) | (1 << (bitmarkParser.AmpVideoLink - 228)) | (1 << (bitmarkParser.AmpArticleLink - 228)) | (1 << (bitmarkParser.AmpDocumentLink - 228)) | (1 << (bitmarkParser.AmpDocumentDownload - 228)) | (1 << (bitmarkParser.AmpAppLink - 228)) | (1 << (bitmarkParser.AmpWebsiteLink - 228)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 228)))) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpVideoEmbed - 265)) | (1 << (bitmarkParser.AmpAudioEmbed - 265)) | (1 << (bitmarkParser.AmpDocumentEmbed - 265)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 265)) | (1 << (bitmarkParser.BitmarkMinus - 265)) | (1 << (bitmarkParser.BitmarkPlus - 265)) | (1 << (bitmarkParser.ColonJson - 265)) | (1 << (bitmarkParser.Prosemirror - 265)) | (1 << (bitmarkParser.Placeholder - 265)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource_format_extra() {
        let _localctx = new Resource_format_extraContext(this._ctx, this.state);
        this.enterRule(_localctx, 334, bitmarkParser.RULE_resource_format_extra);
        try {
            this.state = 4058;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AmpImage:
                case bitmarkParser.AmpImageZoom:
                case bitmarkParser.AmpImageWAudio:
                case bitmarkParser.AmpImageLink:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4049;
                        this.image_format();
                    }
                    break;
                case bitmarkParser.AmpAudio:
                case bitmarkParser.AmpAudioLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4050;
                        this.audio_format();
                    }
                    break;
                case bitmarkParser.AmpVideo:
                case bitmarkParser.AmpVideoLink:
                case bitmarkParser.AmpVideoEmbed:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4051;
                        this.video_format();
                    }
                    break;
                case bitmarkParser.AmpArticle:
                case bitmarkParser.AmpArticleLink:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4052;
                        this.article_format();
                    }
                    break;
                case bitmarkParser.AmpDocument:
                case bitmarkParser.AmpDocumentLink:
                case bitmarkParser.AmpDocumentDownload:
                case bitmarkParser.AmpDocumentEmbed:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 4053;
                        this.document_format();
                    }
                    break;
                case bitmarkParser.AmpApp:
                case bitmarkParser.AmpAppLink:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 4054;
                        this.app_format();
                    }
                    break;
                case bitmarkParser.AmpWebsite:
                case bitmarkParser.AmpWebsiteLink:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 4055;
                        this.website_format();
                    }
                    break;
                case bitmarkParser.AmpStillImageFilm:
                case bitmarkParser.AmpStillImageFilmLink:
                case bitmarkParser.AmpStillImageFilmEmbed:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 4056;
                        this.stillimagefilm_format();
                    }
                    break;
                case bitmarkParser.AmpPdf:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 4057;
                        this.match(bitmarkParser.AmpPdf);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    format2() {
        let _localctx = new Format2Context(this._ctx, this.state);
        this.enterRule(_localctx, 336, bitmarkParser.RULE_format2);
        try {
            this.state = 4065;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.BitmarkMinus:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4060;
                        this.match(bitmarkParser.BitmarkMinus);
                    }
                    break;
                case bitmarkParser.BitmarkPlus:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4061;
                        this.match(bitmarkParser.BitmarkPlus);
                    }
                    break;
                case bitmarkParser.ColonText:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4062;
                        this.match(bitmarkParser.ColonText);
                    }
                    break;
                case bitmarkParser.ColonJson:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4063;
                        this.match(bitmarkParser.ColonJson);
                    }
                    break;
                case bitmarkParser.CL:
                    this.enterOuterAlt(_localctx, 5);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_format() {
        let _localctx = new Image_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 338, bitmarkParser.RULE_image_format);
        let _la;
        try {
            this.state = 4081;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AmpImage:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4067;
                        this.match(bitmarkParser.AmpImage);
                        this.state = 4070;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.Image_type:
                                {
                                    {
                                        this.state = 4068;
                                        this.match(bitmarkParser.Image_type);
                                    }
                                }
                                break;
                            case bitmarkParser.DotArticleAtt:
                                {
                                    {
                                        this.state = 4069;
                                        this.match(bitmarkParser.DotArticleAtt);
                                    }
                                }
                                break;
                            case bitmarkParser.CL:
                            case bitmarkParser.AmpAudio:
                            case bitmarkParser.AmpImage:
                            case bitmarkParser.AmpImageZoom:
                            case bitmarkParser.AmpImageWAudio:
                            case bitmarkParser.AmpVideo:
                            case bitmarkParser.AmpArticle:
                            case bitmarkParser.AmpDocument:
                            case bitmarkParser.AmpApp:
                            case bitmarkParser.AmpWebsite:
                            case bitmarkParser.AmpStillImageFilm:
                            case bitmarkParser.AmpPdf:
                            case bitmarkParser.AmpAudioLink:
                            case bitmarkParser.AmpImageLink:
                            case bitmarkParser.AmpVideoLink:
                            case bitmarkParser.AmpArticleLink:
                            case bitmarkParser.AmpDocumentLink:
                            case bitmarkParser.AmpDocumentDownload:
                            case bitmarkParser.AmpAppLink:
                            case bitmarkParser.AmpWebsiteLink:
                            case bitmarkParser.AmpStillImageFilmLink:
                            case bitmarkParser.AmpVideoEmbed:
                            case bitmarkParser.AmpDocumentEmbed:
                            case bitmarkParser.AmpStillImageFilmEmbed:
                            case bitmarkParser.ColonText:
                            case bitmarkParser.ColonJson:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case bitmarkParser.AmpImageLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4072;
                        this.match(bitmarkParser.AmpImageLink);
                        this.state = 4074;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 4073;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.AmpImageZoom:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4076;
                        this.match(bitmarkParser.AmpImageZoom);
                        this.state = 4078;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 4077;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.AmpImageWAudio:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4080;
                        this.match(bitmarkParser.AmpImageWAudio);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    video_format() {
        let _localctx = new Video_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 340, bitmarkParser.RULE_video_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4083;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpVideo || _la === bitmarkParser.AmpVideoLink || _la === bitmarkParser.AmpVideoEmbed)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4086;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.COLON) {
                    {
                        this.state = 4084;
                        this.match(bitmarkParser.COLON);
                        this.state = 4085;
                        this.match(bitmarkParser.Video_type);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    article_format() {
        let _localctx = new Article_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 342, bitmarkParser.RULE_article_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4088;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpArticle || _la === bitmarkParser.AmpArticleLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    document_format() {
        let _localctx = new Document_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 344, bitmarkParser.RULE_document_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4090;
                _la = this._input.LA(1);
                if (!(((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & ((1 << (bitmarkParser.AmpDocument - 229)) | (1 << (bitmarkParser.AmpDocumentLink - 229)) | (1 << (bitmarkParser.AmpDocumentDownload - 229)))) !== 0) || _la === bitmarkParser.AmpDocumentEmbed)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_format() {
        let _localctx = new App_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 346, bitmarkParser.RULE_app_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4092;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpApp || _la === bitmarkParser.AmpAppLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    website_format() {
        let _localctx = new Website_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 348, bitmarkParser.RULE_website_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4094;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpWebsite || _la === bitmarkParser.AmpWebsiteLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stillimagefilm_format() {
        let _localctx = new Stillimagefilm_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 350, bitmarkParser.RULE_stillimagefilm_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4096;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpStillImageFilm || _la === bitmarkParser.AmpStillImageFilmLink || _la === bitmarkParser.AmpStillImageFilmEmbed)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_article_format() {
        let _localctx = new Op_article_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 352, bitmarkParser.RULE_op_article_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4098;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.OpAmpArticle || _la === bitmarkParser.OpAmpArticleLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_document_format() {
        let _localctx = new Op_document_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 354, bitmarkParser.RULE_op_document_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4100;
                _la = this._input.LA(1);
                if (!(((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & ((1 << (bitmarkParser.OpAmpDocument - 241)) | (1 << (bitmarkParser.OpAmpDocumentLink - 241)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 241)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 241)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_app_format() {
        let _localctx = new Op_app_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 356, bitmarkParser.RULE_op_app_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4102;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.OpAmpApp || _la === bitmarkParser.OpAmpAppLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_website_format() {
        let _localctx = new Op_website_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 358, bitmarkParser.RULE_op_website_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4104;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.OpAmpWebsite || _la === bitmarkParser.OpAmpWebsiteLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_video_format() {
        let _localctx = new Op_video_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 360, bitmarkParser.RULE_op_video_format);
        try {
            this.state = 4121;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpVideo:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4106;
                        this.match(bitmarkParser.OpAmpVideo);
                        this.state = 4109;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 536, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4107;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4108;
                                    this.match(bitmarkParser.Video_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpVideoLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4111;
                        this.match(bitmarkParser.OpAmpVideoLink);
                        this.state = 4114;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 537, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4112;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4113;
                                    this.match(bitmarkParser.Video_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpVideoEmbed:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4116;
                        this.match(bitmarkParser.OpAmpVideoEmbed);
                        this.state = 4119;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 538, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4117;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4118;
                                    this.match(bitmarkParser.Video_type);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_stillimagefilm_format() {
        let _localctx = new Op_stillimagefilm_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 362, bitmarkParser.RULE_op_stillimagefilm_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4123;
                _la = this._input.LA(1);
                if (!(((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & ((1 << (bitmarkParser.OpAmpStillImageFilm - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 244)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    articlebit() {
        let _localctx = new ArticlebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 364, bitmarkParser.RULE_articlebit);
        try {
            this.state = 4131;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpArticle:
                case bitmarkParser.OpAmpArticleLink:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4125;
                        this.op_article_format();
                        this.state = 4126;
                        this.match(bitmarkParser.COLON);
                        this.state = 4127;
                        this.url();
                        this.state = 4128;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.ArticleText:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4130;
                        this.match(bitmarkParser.ArticleText);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    documentbit() {
        let _localctx = new DocumentbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 366, bitmarkParser.RULE_documentbit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4133;
                this.op_document_format();
                this.state = 4134;
                this.match(bitmarkParser.COLON);
                this.state = 4135;
                this.url();
                this.state = 4136;
                this.match(bitmarkParser.CL);
                this.state = 4141;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPATALT) {
                    {
                        this.state = 4137;
                        this.match(bitmarkParser.OPATALT);
                        this.state = 4138;
                        this.words();
                        this.state = 4139;
                        this.match(bitmarkParser.CL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    websitebit() {
        let _localctx = new WebsitebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 368, bitmarkParser.RULE_websitebit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4143;
                this.op_website_format();
                this.state = 4144;
                this.match(bitmarkParser.COLON);
                this.state = 4145;
                this.url();
                this.state = 4146;
                this.match(bitmarkParser.CL);
                this.state = 4151;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPATALT) {
                    {
                        this.state = 4147;
                        this.match(bitmarkParser.OPATALT);
                        this.state = 4148;
                        this.words();
                        this.state = 4149;
                        this.match(bitmarkParser.CL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    appbit() {
        let _localctx = new AppbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 370, bitmarkParser.RULE_appbit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4153;
                this.op_app_format();
                this.state = 4154;
                this.match(bitmarkParser.COLON);
                this.state = 4157;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.URL:
                        {
                            this.state = 4155;
                            this.url();
                        }
                        break;
                    case bitmarkParser.TEL:
                        {
                            this.state = 4156;
                            this.telephone();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                this.state = 4159;
                this.match(bitmarkParser.CL);
                this.state = 4164;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPATALT) {
                    {
                        this.state = 4160;
                        this.match(bitmarkParser.OPATALT);
                        this.state = 4161;
                        this.words();
                        this.state = 4162;
                        this.match(bitmarkParser.CL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stillimagefilmbit() {
        let _localctx = new StillimagefilmbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 372, bitmarkParser.RULE_stillimagefilmbit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4166;
                this.stillimg_one();
                this.state = 4170;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4167;
                                this.resource_chained();
                            }
                        }
                    }
                    this.state = 4172;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stillimg_one() {
        let _localctx = new Stillimg_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 374, bitmarkParser.RULE_stillimg_one);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4173;
                this.op_stillimagefilm_format();
                this.state = 4174;
                this.match(bitmarkParser.COLON);
                this.state = 4178;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 4175;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 4180;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4181;
                this.url();
                this.state = 4182;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    videobit() {
        let _localctx = new VideobitContext(this._ctx, this.state);
        this.enterRule(_localctx, 376, bitmarkParser.RULE_videobit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4184;
                this.video_one();
                this.state = 4188;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 547, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4185;
                                this.resource_chained();
                            }
                        }
                    }
                    this.state = 4190;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 547, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    video_one() {
        let _localctx = new Video_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 378, bitmarkParser.RULE_video_one);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4191;
                this.op_video_format();
                this.state = 4192;
                this.match(bitmarkParser.COLON);
                this.state = 4193;
                this.url();
                this.state = 4194;
                this.match(bitmarkParser.CL);
                this.state = 4199;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 548, this._ctx)) {
                    case 1:
                        {
                            this.state = 4195;
                            this.match(bitmarkParser.OPATALT);
                            this.state = 4196;
                            this.words();
                            this.state = 4197;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    imagebit() {
        let _localctx = new ImagebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 380, bitmarkParser.RULE_imagebit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4201;
                this.image_one();
                this.state = 4205;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 549, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4202;
                                this.image_chained();
                            }
                        }
                    }
                    this.state = 4207;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 549, this._ctx);
                }
                this.state = 4210;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 550, this._ctx)) {
                    case 1:
                        {
                            this.state = 4208;
                            this.match(bitmarkParser.NL);
                            this.state = 4209;
                            this.match(bitmarkParser.ShowInIndex);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_one() {
        let _localctx = new Image_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 382, bitmarkParser.RULE_image_one);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4212;
                this.op_image_format();
                this.state = 4213;
                this.match(bitmarkParser.COLON);
                this.state = 4217;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 4214;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 4219;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4220;
                this.url();
                this.state = 4221;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_image_format() {
        let _localctx = new Op_image_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 384, bitmarkParser.RULE_op_image_format);
        let _la;
        try {
            this.state = 4237;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpImage:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4223;
                        this.match(bitmarkParser.OpAmpImage);
                        this.state = 4226;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.Image_type:
                                {
                                    {
                                        this.state = 4224;
                                        this.match(bitmarkParser.Image_type);
                                    }
                                }
                                break;
                            case bitmarkParser.DotArticleAtt:
                                {
                                    {
                                        this.state = 4225;
                                        this.match(bitmarkParser.DotArticleAtt);
                                    }
                                }
                                break;
                            case bitmarkParser.COLON:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpImageLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4228;
                        this.match(bitmarkParser.OpAmpImageLink);
                        this.state = 4230;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 4229;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.OpAmpImageZoom:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4232;
                        this.match(bitmarkParser.OpAmpImageZoom);
                        this.state = 4234;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 4233;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.OpAmpImageWAudio:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4236;
                        this.match(bitmarkParser.OpAmpImageWAudio);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_chained() {
        let _localctx = new Image_chainedContext(this._ctx, this.state);
        this.enterRule(_localctx, 386, bitmarkParser.RULE_image_chained);
        let _la;
        try {
            let _alt;
            this.state = 4256;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtSrc:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4239;
                        this.match(bitmarkParser.AtSrc);
                        this.state = 4240;
                        this.match(bitmarkParser.COLON);
                        this.state = 4241;
                        this.url();
                        this.state = 4242;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtWidth:
                case bitmarkParser.AtHeight:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4244;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4245;
                        this.match(bitmarkParser.COLON);
                        this.state = 4246;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 4247;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPATALT:
                case bitmarkParser.OpAtCaption:
                case bitmarkParser.OpAtLicense:
                case bitmarkParser.OpAtCopyright:
                case bitmarkParser.OpAtSearch:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4248;
                        _la = this._input.LA(1);
                        if (!(((((_la - 211)) & ~0x1F) === 0 && ((1 << (_la - 211)) & ((1 << (bitmarkParser.OPATALT - 211)) | (1 << (bitmarkParser.OpAtCaption - 211)) | (1 << (bitmarkParser.OpAtLicense - 211)) | (1 << (bitmarkParser.OpAtCopyright - 211)) | (1 << (bitmarkParser.OpAtSearch - 211)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4252;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 556, this._ctx);
                        while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 4249;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 4254;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 556, this._ctx);
                        }
                        this.state = 4255;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_chained4match() {
        let _localctx = new Image_chained4matchContext(this._ctx, this.state);
        this.enterRule(_localctx, 388, bitmarkParser.RULE_image_chained4match);
        let _la;
        try {
            let _alt;
            this.state = 4275;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtSrc:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4258;
                        this.match(bitmarkParser.AtSrc);
                        this.state = 4259;
                        this.match(bitmarkParser.COLON);
                        this.state = 4260;
                        this.url();
                        this.state = 4261;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtWidth:
                case bitmarkParser.AtHeight:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4263;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4264;
                        this.match(bitmarkParser.COLON);
                        this.state = 4265;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 4266;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPATALT:
                case bitmarkParser.OpAtCaption:
                case bitmarkParser.OpAtLicense:
                case bitmarkParser.OpAtCopyright:
                case bitmarkParser.OpAtSearch:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4267;
                        _la = this._input.LA(1);
                        if (!(((((_la - 211)) & ~0x1F) === 0 && ((1 << (_la - 211)) & ((1 << (bitmarkParser.OPATALT - 211)) | (1 << (bitmarkParser.OpAtCaption - 211)) | (1 << (bitmarkParser.OpAtLicense - 211)) | (1 << (bitmarkParser.OpAtCopyright - 211)) | (1 << (bitmarkParser.OpAtSearch - 211)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4271;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 558, this._ctx);
                        while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 4268;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 4273;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 558, this._ctx);
                        }
                        this.state = 4274;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    audiobit() {
        let _localctx = new AudiobitContext(this._ctx, this.state);
        this.enterRule(_localctx, 390, bitmarkParser.RULE_audiobit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4277;
                this.audio_one();
                this.state = 4281;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4278;
                                this.resource_chained();
                            }
                        }
                    }
                    this.state = 4283;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    audio_one() {
        let _localctx = new Audio_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 392, bitmarkParser.RULE_audio_one);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4284;
                this.op_audio_format();
                this.state = 4285;
                this.match(bitmarkParser.COLON);
                this.state = 4286;
                this.url();
                this.state = 4287;
                this.match(bitmarkParser.CL);
                this.state = 4292;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 561, this._ctx)) {
                    case 1:
                        {
                            this.state = 4288;
                            this.match(bitmarkParser.OPATALT);
                            this.state = 4289;
                            this.words();
                            this.state = 4290;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    audio_format() {
        let _localctx = new Audio_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 394, bitmarkParser.RULE_audio_format);
        let _la;
        try {
            this.state = 4304;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AmpAudio:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4294;
                        this.match(bitmarkParser.AmpAudio);
                        this.state = 4297;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.COLON) {
                            {
                                this.state = 4295;
                                this.match(bitmarkParser.COLON);
                                this.state = 4296;
                                this.match(bitmarkParser.Audio_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.AmpAudioLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4299;
                        this.match(bitmarkParser.AmpAudioLink);
                        this.state = 4302;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.COLON) {
                            {
                                this.state = 4300;
                                this.match(bitmarkParser.COLON);
                                this.state = 4301;
                                this.match(bitmarkParser.Audio_type);
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_audio_format() {
        let _localctx = new Op_audio_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 396, bitmarkParser.RULE_op_audio_format);
        try {
            this.state = 4321;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpAudio:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4306;
                        this.match(bitmarkParser.OpAmpAudio);
                        this.state = 4309;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 565, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4307;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4308;
                                    this.match(bitmarkParser.Audio_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpAudioLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4311;
                        this.match(bitmarkParser.OpAmpAudioLink);
                        this.state = 4314;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 566, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4312;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4313;
                                    this.match(bitmarkParser.Audio_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpAudioEmbed:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4316;
                        this.match(bitmarkParser.OpAmpAudioEmbed);
                        this.state = 4319;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 567, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4317;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4318;
                                    this.match(bitmarkParser.Audio_type);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource_chained() {
        let _localctx = new Resource_chainedContext(this._ctx, this.state);
        this.enterRule(_localctx, 398, bitmarkParser.RULE_resource_chained);
        let _la;
        try {
            let _alt;
            this.state = 4354;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPA:
                case bitmarkParser.AtSrc:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4326;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.OPA:
                                {
                                    this.state = 4323;
                                    this.match(bitmarkParser.OPA);
                                    this.state = 4324;
                                    this.s_and_w();
                                }
                                break;
                            case bitmarkParser.AtSrc:
                                {
                                    this.state = 4325;
                                    this.match(bitmarkParser.AtSrc);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 4328;
                        this.match(bitmarkParser.COLON);
                        this.state = 4332;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 570, this._ctx);
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 4329;
                                        this.match(bitmarkParser.S);
                                    }
                                }
                            }
                            this.state = 4334;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 570, this._ctx);
                        }
                        this.state = 4337;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 4337;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.S:
                                    case bitmarkParser.OPS:
                                    case bitmarkParser.COLON:
                                    case bitmarkParser.AMP:
                                    case bitmarkParser.Greater:
                                    case bitmarkParser.Less:
                                    case bitmarkParser.RightAngle:
                                    case bitmarkParser.RightArrow:
                                    case bitmarkParser.DBLEQ:
                                    case bitmarkParser.QUOTE_INDEX:
                                    case bitmarkParser.NUMERIC:
                                    case bitmarkParser.STRING:
                                    case bitmarkParser.NOTBITMARK:
                                    case bitmarkParser.ELIPSIS:
                                    case bitmarkParser.SENTENCE:
                                    case bitmarkParser.BARSTRING:
                                    case bitmarkParser.AmpAudio:
                                    case bitmarkParser.AmpImage:
                                    case bitmarkParser.AmpVideo:
                                    case bitmarkParser.AmpArticle:
                                    case bitmarkParser.AmpDocument:
                                    case bitmarkParser.AmpApp:
                                    case bitmarkParser.AmpWebsite:
                                    case bitmarkParser.AmpStillImageFilm:
                                    case bitmarkParser.AmpAudioLink:
                                    case bitmarkParser.AmpImageLink:
                                    case bitmarkParser.AmpVideoLink:
                                    case bitmarkParser.AmpArticleLink:
                                    case bitmarkParser.AmpDocumentLink:
                                    case bitmarkParser.AmpAppLink:
                                    case bitmarkParser.AmpWebsiteLink:
                                    case bitmarkParser.AmpStillImageFilmLink:
                                    case bitmarkParser.BitmarkMinus:
                                    case bitmarkParser.BitmarkPlus:
                                    case bitmarkParser.URL:
                                        {
                                            this.state = 4335;
                                            this.s_and_w();
                                        }
                                        break;
                                    case bitmarkParser.NL:
                                        {
                                            this.state = 4336;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                            this.state = 4339;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                        this.state = 4341;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtWidth:
                case bitmarkParser.AtHeight:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4342;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4343;
                        this.match(bitmarkParser.COLON);
                        this.state = 4344;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 4345;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPATALT:
                case bitmarkParser.OpAtCaption:
                case bitmarkParser.OpAtLicense:
                case bitmarkParser.OpAtCopyright:
                case bitmarkParser.OpAtSearch:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4346;
                        _la = this._input.LA(1);
                        if (!(((((_la - 211)) & ~0x1F) === 0 && ((1 << (_la - 211)) & ((1 << (bitmarkParser.OPATALT - 211)) | (1 << (bitmarkParser.OpAtCaption - 211)) | (1 << (bitmarkParser.OpAtLicense - 211)) | (1 << (bitmarkParser.OpAtCopyright - 211)) | (1 << (bitmarkParser.OpAtSearch - 211)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4350;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 573, this._ctx);
                        while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 4347;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 4352;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 573, this._ctx);
                        }
                        this.state = 4353;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    telephone() {
        let _localctx = new TelephoneContext(this._ctx, this.state);
        this.enterRule(_localctx, 400, bitmarkParser.RULE_telephone);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4356;
                this.match(bitmarkParser.TEL);
                this.state = 4357;
                this.match(bitmarkParser.PLUS);
                this.state = 4358;
                this.match(bitmarkParser.NUMERIC);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    url() {
        let _localctx = new UrlContext(this._ctx, this.state);
        this.enterRule(_localctx, 402, bitmarkParser.RULE_url);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4360;
                this.match(bitmarkParser.URL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    item() {
        let _localctx = new ItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 404, bitmarkParser.RULE_item);
        let _la;
        try {
            this.state = 4392;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 581, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4362;
                        this.match(bitmarkParser.OPC);
                        this.state = 4363;
                        this.match(bitmarkParser.CL);
                        this.state = 4371;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 576, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4367;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.S) {
                                        {
                                            {
                                                this.state = 4364;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 4369;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 4370;
                                    this.lead();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4373;
                        this.match(bitmarkParser.OPC);
                        this.state = 4374;
                        this.s_and_w();
                        this.state = 4379;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.COLON - 163)) | (1 << (bitmarkParser.AMP - 163)) | (1 << (bitmarkParser.Greater - 163)) | (1 << (bitmarkParser.Less - 163)) | (1 << (bitmarkParser.RightAngle - 163)) | (1 << (bitmarkParser.RightArrow - 163)) | (1 << (bitmarkParser.QUOTE_INDEX - 163)) | (1 << (bitmarkParser.NOTBITMARK - 163)) | (1 << (bitmarkParser.ELIPSIS - 163)) | (1 << (bitmarkParser.SENTENCE - 163)) | (1 << (bitmarkParser.BARSTRING - 163)))) !== 0) || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || _la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
                            {
                                this.state = 4377;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.COLON:
                                        {
                                            this.state = 4375;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case bitmarkParser.AMP:
                                    case bitmarkParser.Greater:
                                    case bitmarkParser.Less:
                                    case bitmarkParser.RightAngle:
                                    case bitmarkParser.RightArrow:
                                    case bitmarkParser.QUOTE_INDEX:
                                    case bitmarkParser.NOTBITMARK:
                                    case bitmarkParser.ELIPSIS:
                                    case bitmarkParser.SENTENCE:
                                    case bitmarkParser.BARSTRING:
                                    case bitmarkParser.AmpAudio:
                                    case bitmarkParser.AmpImage:
                                    case bitmarkParser.AmpVideo:
                                    case bitmarkParser.AmpArticle:
                                    case bitmarkParser.AmpDocument:
                                    case bitmarkParser.AmpApp:
                                    case bitmarkParser.AmpWebsite:
                                    case bitmarkParser.AmpStillImageFilm:
                                    case bitmarkParser.AmpAudioLink:
                                    case bitmarkParser.AmpImageLink:
                                    case bitmarkParser.AmpVideoLink:
                                    case bitmarkParser.AmpArticleLink:
                                    case bitmarkParser.AmpDocumentLink:
                                    case bitmarkParser.AmpAppLink:
                                    case bitmarkParser.AmpWebsiteLink:
                                    case bitmarkParser.AmpStillImageFilmLink:
                                    case bitmarkParser.BitmarkMinus:
                                    case bitmarkParser.BitmarkPlus:
                                        {
                                            this.state = 4376;
                                            this.words();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                            this.state = 4381;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4382;
                        this.match(bitmarkParser.CL);
                        this.state = 4390;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 580, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4386;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.S) {
                                        {
                                            {
                                                this.state = 4383;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 4388;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 4389;
                                    this.lead();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lead() {
        let _localctx = new LeadContext(this._ctx, this.state);
        this.enterRule(_localctx, 406, bitmarkParser.RULE_lead);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4394;
                this.match(bitmarkParser.OPC);
                this.state = 4395;
                this.s_and_w();
                this.state = 4400;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.COLON - 163)) | (1 << (bitmarkParser.AMP - 163)) | (1 << (bitmarkParser.Greater - 163)) | (1 << (bitmarkParser.Less - 163)) | (1 << (bitmarkParser.RightAngle - 163)) | (1 << (bitmarkParser.RightArrow - 163)) | (1 << (bitmarkParser.QUOTE_INDEX - 163)) | (1 << (bitmarkParser.NOTBITMARK - 163)) | (1 << (bitmarkParser.ELIPSIS - 163)) | (1 << (bitmarkParser.SENTENCE - 163)) | (1 << (bitmarkParser.BARSTRING - 163)))) !== 0) || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || _la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
                    {
                        this.state = 4398;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.COLON:
                                {
                                    this.state = 4396;
                                    this.match(bitmarkParser.COLON);
                                }
                                break;
                            case bitmarkParser.AMP:
                            case bitmarkParser.Greater:
                            case bitmarkParser.Less:
                            case bitmarkParser.RightAngle:
                            case bitmarkParser.RightArrow:
                            case bitmarkParser.QUOTE_INDEX:
                            case bitmarkParser.NOTBITMARK:
                            case bitmarkParser.ELIPSIS:
                            case bitmarkParser.SENTENCE:
                            case bitmarkParser.BARSTRING:
                            case bitmarkParser.AmpAudio:
                            case bitmarkParser.AmpImage:
                            case bitmarkParser.AmpVideo:
                            case bitmarkParser.AmpArticle:
                            case bitmarkParser.AmpDocument:
                            case bitmarkParser.AmpApp:
                            case bitmarkParser.AmpWebsite:
                            case bitmarkParser.AmpStillImageFilm:
                            case bitmarkParser.AmpAudioLink:
                            case bitmarkParser.AmpImageLink:
                            case bitmarkParser.AmpVideoLink:
                            case bitmarkParser.AmpArticleLink:
                            case bitmarkParser.AmpDocumentLink:
                            case bitmarkParser.AmpAppLink:
                            case bitmarkParser.AmpWebsiteLink:
                            case bitmarkParser.AmpStillImageFilmLink:
                            case bitmarkParser.BitmarkMinus:
                            case bitmarkParser.BitmarkPlus:
                                {
                                    this.state = 4397;
                                    this.words();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    this.state = 4402;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4403;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    angleref() {
        let _localctx = new AnglerefContext(this._ctx, this.state);
        this.enterRule(_localctx, 408, bitmarkParser.RULE_angleref);
        let _la;
        try {
            this.state = 4415;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPRANGLES:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4405;
                        this.match(bitmarkParser.OPRANGLES);
                        this.state = 4407;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                            {
                                this.state = 4406;
                                this.s_and_w();
                            }
                        }
                        this.state = 4409;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPRANGLEL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4410;
                        this.match(bitmarkParser.OPRANGLEL);
                        this.state = 4412;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                            {
                                this.state = 4411;
                                this.s_and_w();
                            }
                        }
                        this.state = 4414;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    example() {
        let _localctx = new ExampleContext(this._ctx, this.state);
        this.enterRule(_localctx, 410, bitmarkParser.RULE_example);
        let _la;
        try {
            this.state = 4424;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtExamplecl:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4417;
                        this.match(bitmarkParser.AtExamplecl);
                    }
                    break;
                case bitmarkParser.AtExampleWithStr:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4418;
                        this.match(bitmarkParser.AtExampleWithStr);
                    }
                    break;
                case bitmarkParser.AtExamplecol:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4419;
                        this.match(bitmarkParser.AtExamplecol);
                        this.state = 4421;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.SENTENCE) {
                            {
                                this.state = 4420;
                                this.match(bitmarkParser.SENTENCE);
                            }
                        }
                        this.state = 4423;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bracketed_text() {
        let _localctx = new Bracketed_textContext(this._ctx, this.state);
        this.enterRule(_localctx, 412, bitmarkParser.RULE_bracketed_text);
        let _la;
        try {
            let _alt;
            this.state = 4465;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 596, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4426;
                        this.match(bitmarkParser.BracEnclose);
                        this.state = 4428;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 589, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4427;
                                    this.s_and_w();
                                }
                                break;
                        }
                        this.state = 4451;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                            {
                                {
                                    this.state = 4430;
                                    this.s_and_w();
                                    this.state = 4440;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 4431;
                                                    this.match(bitmarkParser.NL);
                                                    this.state = 4435;
                                                    this._errHandler.sync(this);
                                                    _alt = this.interpreter.adaptivePredict(this._input, 590, this._ctx);
                                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                                        if (_alt === 1) {
                                                            {
                                                                {
                                                                    this.state = 4432;
                                                                    this.match(bitmarkParser.S);
                                                                }
                                                            }
                                                        }
                                                        this.state = 4437;
                                                        this._errHandler.sync(this);
                                                        _alt = this.interpreter.adaptivePredict(this._input, 590, this._ctx);
                                                    }
                                                }
                                            }
                                        }
                                        this.state = 4442;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
                                    }
                                    this.state = 4446;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 4443;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 4448;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            this.state = 4453;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4454;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4455;
                        this.match(bitmarkParser.BracEnclose);
                        this.state = 4461;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                            {
                                this.state = 4459;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 594, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4456;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4457;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4458;
                                            this.match(bitmarkParser.S);
                                        }
                                        break;
                                }
                            }
                            this.state = 4463;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4464;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    reference() {
        let _localctx = new ReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 414, bitmarkParser.RULE_reference);
        let _la;
        try {
            this.state = 4489;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 601, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4467;
                        this.match(bitmarkParser.AtReference);
                        this.state = 4472;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 4472;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 597, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4468;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4469;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4470;
                                            this.match(bitmarkParser.URL);
                                        }
                                        break;
                                    case 4:
                                        {
                                            this.state = 4471;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                }
                            }
                            this.state = 4474;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                        this.state = 4476;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4477;
                        this.match(bitmarkParser.AtReference);
                        this.state = 4485;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                            {
                                this.state = 4483;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 599, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4478;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4479;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4480;
                                            this.match(bitmarkParser.URL);
                                        }
                                        break;
                                    case 4:
                                        {
                                            this.state = 4481;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    case 5:
                                        {
                                            this.state = 4482;
                                            this.match(bitmarkParser.S);
                                        }
                                        break;
                                }
                            }
                            this.state = 4487;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4488;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    progress() {
        let _localctx = new ProgressContext(this._ctx, this.state);
        this.enterRule(_localctx, 416, bitmarkParser.RULE_progress);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4491;
                this.match(bitmarkParser.AtProgress);
                this.state = 4492;
                this.s_and_w();
                this.state = 4493;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dateprop() {
        let _localctx = new DatepropContext(this._ctx, this.state);
        this.enterRule(_localctx, 418, bitmarkParser.RULE_dateprop);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4495;
                this.match(bitmarkParser.AtDate);
                this.state = 4499;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 4499;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 602, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4496;
                                    this.s_and_w();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4497;
                                    this.match(bitmarkParser.COLON);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 4498;
                                    this.match(bitmarkParser.NL);
                                }
                                break;
                        }
                    }
                    this.state = 4501;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                this.state = 4503;
                this.match(bitmarkParser.CL);
                this.state = 4505;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 604, this._ctx)) {
                    case 1:
                        {
                            this.state = 4504;
                            this.dateprop_chained();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dateprop_chained() {
        let _localctx = new Dateprop_chainedContext(this._ctx, this.state);
        this.enterRule(_localctx, 420, bitmarkParser.RULE_dateprop_chained);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4507;
                this.match(bitmarkParser.AtDate);
                this.state = 4511;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 4511;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 605, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4508;
                                    this.s_and_w();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4509;
                                    this.match(bitmarkParser.COLON);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 4510;
                                    this.match(bitmarkParser.NL);
                                }
                                break;
                        }
                    }
                    this.state = 4513;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                this.state = 4515;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    instruction() {
        let _localctx = new InstructionContext(this._ctx, this.state);
        this.enterRule(_localctx, 422, bitmarkParser.RULE_instruction);
        let _la;
        try {
            let _alt;
            this.state = 4563;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 615, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4517;
                        this.match(bitmarkParser.OPB);
                        this.state = 4521;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.NL) {
                            {
                                {
                                    this.state = 4518;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            this.state = 4523;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4525;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 608, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4524;
                                    this.s_and_w();
                                }
                                break;
                        }
                        this.state = 4548;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                            {
                                {
                                    this.state = 4527;
                                    this.s_and_w();
                                    this.state = 4537;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 610, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 4528;
                                                    this.match(bitmarkParser.NL);
                                                    this.state = 4532;
                                                    this._errHandler.sync(this);
                                                    _alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
                                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                                        if (_alt === 1) {
                                                            {
                                                                {
                                                                    this.state = 4529;
                                                                    this.match(bitmarkParser.S);
                                                                }
                                                            }
                                                        }
                                                        this.state = 4534;
                                                        this._errHandler.sync(this);
                                                        _alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
                                                    }
                                                }
                                            }
                                        }
                                        this.state = 4539;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 610, this._ctx);
                                    }
                                    this.state = 4543;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 4540;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 4545;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            this.state = 4550;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4551;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4552;
                        this.match(bitmarkParser.OPB);
                        this.state = 4556;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.NL) {
                            {
                                {
                                    this.state = 4553;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            this.state = 4558;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4560;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                            {
                                this.state = 4559;
                                this.s_and_w();
                            }
                        }
                        this.state = 4562;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    hint() {
        let _localctx = new HintContext(this._ctx, this.state);
        this.enterRule(_localctx, 424, bitmarkParser.RULE_hint);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4565;
                this.match(bitmarkParser.OPQ);
                this.state = 4567;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4566;
                            _la = this._input.LA(1);
                            if (_la <= 0 || (_la === bitmarkParser.CL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    this.state = 4569;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.OPDOT) | (1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitPlaceholder) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.CLOZE) | (1 << bitmarkParser.MATCH) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitBotint) | (1 << bitmarkParser.BitSelfassess) | (1 << bitmarkParser.BitRating))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitAiPrompt - 32)) | (1 << (bitmarkParser.BitNoteAi - 32)) | (1 << (bitmarkParser.BitSummayAi - 32)) | (1 << (bitmarkParser.BitArticleAi - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitLearningPathBotTraining - 64)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomEvent - 64)) | (1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitImagePrototype - 64)) | (1 << (bitmarkParser.BitImageSuperWide - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitVideoPortrait - 64)) | (1 << (bitmarkParser.BitVideoLandscape - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitEditorial - 96)) | (1 << (bitmarkParser.BitBookFrontispiece - 96)) | (1 << (bitmarkParser.BitBookTitle - 96)) | (1 << (bitmarkParser.BitBookCopyright - 96)) | (1 << (bitmarkParser.BitBookDedication - 96)) | (1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.BitQuestion1 - 128)) | (1 << (bitmarkParser.BitScreenshot - 128)) | (1 << (bitmarkParser.BitFocusImage - 128)) | (1 << (bitmarkParser.BitPhoto - 128)) | (1 << (bitmarkParser.BitBrowserImage - 128)) | (1 << (bitmarkParser.BitBotActionResponse - 128)) | (1 << (bitmarkParser.BitBotActionTrueFalse - 128)) | (1 << (bitmarkParser.BitBotActionRatingNumber - 128)) | (1 << (bitmarkParser.BitBotActionRatingStars - 128)) | (1 << (bitmarkParser.BitChapterSubjectMatter - 128)) | (1 << (bitmarkParser.BitReleaseNote - 128)) | (1 << (bitmarkParser.BitConclusion - 128)) | (1 << (bitmarkParser.BitVendorAmcharts5Chart - 128)) | (1 << (bitmarkParser.BitFeatured - 128)) | (1 << (bitmarkParser.BitNewspaperArticle - 128)) | (1 << (bitmarkParser.BitBlogArticle - 128)) | (1 << (bitmarkParser.BitBookArticle - 128)) | (1 << (bitmarkParser.BitNotebookArticle - 128)) | (1 << (bitmarkParser.BitWorkbookArticle - 128)) | (1 << (bitmarkParser.OPDOLL - 128)) | (1 << (bitmarkParser.OPBUL - 128)) | (1 << (bitmarkParser.OPRANGLES - 128)) | (1 << (bitmarkParser.OPRANGLEL - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPU - 128)) | (1 << (bitmarkParser.OPB - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPA - 128)) | (1 << (bitmarkParser.OPP - 128)) | (1 << (bitmarkParser.OPM - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.OPR - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.OPHASH - 160)) | (1 << (bitmarkParser.OPC - 160)) | (1 << (bitmarkParser.COLON - 160)) | (1 << (bitmarkParser.AMP - 160)) | (1 << (bitmarkParser.DBLCOLON - 160)) | (1 << (bitmarkParser.PLUS - 160)) | (1 << (bitmarkParser.DotAt - 160)) | (1 << (bitmarkParser.Greater - 160)) | (1 << (bitmarkParser.Less - 160)) | (1 << (bitmarkParser.RightAngle - 160)) | (1 << (bitmarkParser.RightArrow - 160)) | (1 << (bitmarkParser.DBLEQ - 160)) | (1 << (bitmarkParser.HSPL - 160)) | (1 << (bitmarkParser.HSPL2 - 160)) | (1 << (bitmarkParser.SSPL - 160)) | (1 << (bitmarkParser.SSPL2 - 160)) | (1 << (bitmarkParser.QUOTE_INDEX - 160)) | (1 << (bitmarkParser.COMMENT - 160)) | (1 << (bitmarkParser.DCANY - 160)) | (1 << (bitmarkParser.Image_type - 160)) | (1 << (bitmarkParser.Audio_type - 160)) | (1 << (bitmarkParser.Video_type - 160)) | (1 << (bitmarkParser.ArticleText - 160)) | (1 << (bitmarkParser.NOTCL - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.NL - 160)) | (1 << (bitmarkParser.NOTBITMARK - 160)) | (1 << (bitmarkParser.ELIPSIS - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.BARSTRING - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.OPAT - 192)) | (1 << (bitmarkParser.AtProgress - 192)) | (1 << (bitmarkParser.AtReference - 192)) | (1 << (bitmarkParser.AtWidth - 192)) | (1 << (bitmarkParser.AtHeight - 192)) | (1 << (bitmarkParser.AtProgressPoints - 192)) | (1 << (bitmarkParser.AtShortanswer - 192)) | (1 << (bitmarkParser.AtLonganswer - 192)) | (1 << (bitmarkParser.AtExampleWithStr - 192)) | (1 << (bitmarkParser.AtExamplecol - 192)) | (1 << (bitmarkParser.AtExamplecl - 192)) | (1 << (bitmarkParser.AtSampleSolution - 192)) | (1 << (bitmarkParser.AtPartialAnswerS - 192)) | (1 << (bitmarkParser.AtPartialAnswer - 192)) | (1 << (bitmarkParser.AtLabeltrue - 192)) | (1 << (bitmarkParser.AtLabelfalse - 192)) | (1 << (bitmarkParser.AtPoints - 192)) | (1 << (bitmarkParser.AtSrc - 192)) | (1 << (bitmarkParser.AtPartner - 192)) | (1 << (bitmarkParser.OPATALT - 192)) | (1 << (bitmarkParser.OPAMARK - 192)) | (1 << (bitmarkParser.ShowInIndex - 192)) | (1 << (bitmarkParser.OpAtCaption - 192)) | (1 << (bitmarkParser.OpAtLicense - 192)) | (1 << (bitmarkParser.OpAtCopyright - 192)) | (1 << (bitmarkParser.OpAtSearch - 192)) | (1 << (bitmarkParser.OpAtIsTracked - 192)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 192)) | (1 << (bitmarkParser.AtDate - 192)) | (1 << (bitmarkParser.Http - 192)) | (1 << (bitmarkParser.Https - 192)) | (1 << (bitmarkParser.AmpAudio - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.AmpImage - 224)) | (1 << (bitmarkParser.AmpImageZoom - 224)) | (1 << (bitmarkParser.AmpImageWAudio - 224)) | (1 << (bitmarkParser.AmpVideo - 224)) | (1 << (bitmarkParser.AmpArticle - 224)) | (1 << (bitmarkParser.AmpDocument - 224)) | (1 << (bitmarkParser.AmpApp - 224)) | (1 << (bitmarkParser.AmpWebsite - 224)) | (1 << (bitmarkParser.AmpStillImageFilm - 224)) | (1 << (bitmarkParser.AmpPdf - 224)) | (1 << (bitmarkParser.OpAmpAudio - 224)) | (1 << (bitmarkParser.OpAmpImage - 224)) | (1 << (bitmarkParser.OpAmpImageZoom - 224)) | (1 << (bitmarkParser.OpAmpImageWAudio - 224)) | (1 << (bitmarkParser.OpAmpVideo - 224)) | (1 << (bitmarkParser.OpAmpArticle - 224)) | (1 << (bitmarkParser.OpAmpArticleAtt - 224)) | (1 << (bitmarkParser.OpAmpDocument - 224)) | (1 << (bitmarkParser.OpAmpApp - 224)) | (1 << (bitmarkParser.OpAmpWebsite - 224)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 224)) | (1 << (bitmarkParser.BracEnclose - 224)) | (1 << (bitmarkParser.AmpAudioLink - 224)) | (1 << (bitmarkParser.AmpImageLink - 224)) | (1 << (bitmarkParser.AmpVideoLink - 224)) | (1 << (bitmarkParser.AmpArticleLink - 224)) | (1 << (bitmarkParser.AmpDocumentLink - 224)) | (1 << (bitmarkParser.AmpDocumentDownload - 224)) | (1 << (bitmarkParser.AmpAppLink - 224)) | (1 << (bitmarkParser.AmpWebsiteLink - 224)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.OpAmpAudioLink - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (bitmarkParser.OpAmpImageLink - 256)) | (1 << (bitmarkParser.OpAmpVideoLink - 256)) | (1 << (bitmarkParser.OpAmpArticleLink - 256)) | (1 << (bitmarkParser.OpAmpDocumentLink - 256)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 256)) | (1 << (bitmarkParser.OpAmpAppLink - 256)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 256)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 256)) | (1 << (bitmarkParser.AmpImageEmbed - 256)) | (1 << (bitmarkParser.AmpVideoEmbed - 256)) | (1 << (bitmarkParser.AmpAudioEmbed - 256)) | (1 << (bitmarkParser.AmpDocumentEmbed - 256)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 256)) | (1 << (bitmarkParser.OpAmpImageEmbed - 256)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 256)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 256)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 256)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 256)) | (1 << (bitmarkParser.BitmarkMinus - 256)) | (1 << (bitmarkParser.BitmarkPlus - 256)) | (1 << (bitmarkParser.ColonText - 256)) | (1 << (bitmarkParser.ColonJson - 256)) | (1 << (bitmarkParser.Prosemirror - 256)) | (1 << (bitmarkParser.Placeholder - 256)) | (1 << (bitmarkParser.BASIC - 256)) | (1 << (bitmarkParser.JPG - 256)) | (1 << (bitmarkParser.PNG - 256)) | (1 << (bitmarkParser.GIF - 256)) | (1 << (bitmarkParser.SVG - 256)) | (1 << (bitmarkParser.MP2 - 256)) | (1 << (bitmarkParser.MP3 - 256)) | (1 << (bitmarkParser.MP4 - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (bitmarkParser.FLV - 288)) | (1 << (bitmarkParser.WMV - 288)) | (1 << (bitmarkParser.MPEG - 288)) | (1 << (bitmarkParser.MPG - 288)) | (1 << (bitmarkParser.TEL - 288)) | (1 << (bitmarkParser.DotArticleAtt - 288)) | (1 << (bitmarkParser.STAR - 288)) | (1 << (bitmarkParser.URL - 288)) | (1 << (bitmarkParser.LIST_LINE - 288)) | (1 << (bitmarkParser.ENCLBARS - 288)))) !== 0));
                this.state = 4571;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    title() {
        let _localctx = new TitleContext(this._ctx, this.state);
        this.enterRule(_localctx, 426, bitmarkParser.RULE_title);
        let _la;
        try {
            this.state = 4585;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 619, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4573;
                        this.match(bitmarkParser.OPHASH);
                        this.state = 4576;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 4576;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.S:
                                    case bitmarkParser.OPS:
                                    case bitmarkParser.COLON:
                                    case bitmarkParser.AMP:
                                    case bitmarkParser.Greater:
                                    case bitmarkParser.Less:
                                    case bitmarkParser.RightAngle:
                                    case bitmarkParser.RightArrow:
                                    case bitmarkParser.DBLEQ:
                                    case bitmarkParser.QUOTE_INDEX:
                                    case bitmarkParser.NUMERIC:
                                    case bitmarkParser.STRING:
                                    case bitmarkParser.NOTBITMARK:
                                    case bitmarkParser.ELIPSIS:
                                    case bitmarkParser.SENTENCE:
                                    case bitmarkParser.BARSTRING:
                                    case bitmarkParser.AmpAudio:
                                    case bitmarkParser.AmpImage:
                                    case bitmarkParser.AmpVideo:
                                    case bitmarkParser.AmpArticle:
                                    case bitmarkParser.AmpDocument:
                                    case bitmarkParser.AmpApp:
                                    case bitmarkParser.AmpWebsite:
                                    case bitmarkParser.AmpStillImageFilm:
                                    case bitmarkParser.AmpAudioLink:
                                    case bitmarkParser.AmpImageLink:
                                    case bitmarkParser.AmpVideoLink:
                                    case bitmarkParser.AmpArticleLink:
                                    case bitmarkParser.AmpDocumentLink:
                                    case bitmarkParser.AmpAppLink:
                                    case bitmarkParser.AmpWebsiteLink:
                                    case bitmarkParser.AmpStillImageFilmLink:
                                    case bitmarkParser.BitmarkMinus:
                                    case bitmarkParser.BitmarkPlus:
                                    case bitmarkParser.URL:
                                        {
                                            this.state = 4574;
                                            this.s_and_w();
                                        }
                                        break;
                                    case bitmarkParser.NL:
                                        {
                                            this.state = 4575;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                            this.state = 4578;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                        this.state = 4580;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4581;
                        this.match(bitmarkParser.OPHASH);
                        this.state = 4582;
                        this.s_and_w();
                        this.state = 4583;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bool_label() {
        let _localctx = new Bool_labelContext(this._ctx, this.state);
        this.enterRule(_localctx, 428, bitmarkParser.RULE_bool_label);
        try {
            this.state = 4595;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtLabeltrue:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4587;
                        this.match(bitmarkParser.AtLabeltrue);
                        this.state = 4588;
                        this.s_and_w();
                        this.state = 4589;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtLabelfalse:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4591;
                        this.match(bitmarkParser.AtLabelfalse);
                        this.state = 4592;
                        this.s_and_w();
                        this.state = 4593;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    progress_points() {
        let _localctx = new Progress_pointsContext(this._ctx, this.state);
        this.enterRule(_localctx, 430, bitmarkParser.RULE_progress_points);
        try {
            this.state = 4606;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 621, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4597;
                        this.match(bitmarkParser.AtProgressPoints);
                        this.state = 4598;
                        this.match(bitmarkParser.COLON);
                        this.state = 4599;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 4600;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4601;
                        this.match(bitmarkParser.AtProgressPoints);
                        this.state = 4602;
                        this.match(bitmarkParser.COLON);
                        this.state = 4603;
                        this.s_and_w();
                        this.state = 4604;
                        this.match(bitmarkParser.CL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    istracked() {
        let _localctx = new IstrackedContext(this._ctx, this.state);
        this.enterRule(_localctx, 432, bitmarkParser.RULE_istracked);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4608;
                this.match(bitmarkParser.OpAtIsTracked);
                this.state = 4609;
                this.s_and_w();
                this.state = 4610;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    isinfoonly() {
        let _localctx = new IsinfoonlyContext(this._ctx, this.state);
        this.enterRule(_localctx, 434, bitmarkParser.RULE_isinfoonly);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4612;
                this.match(bitmarkParser.OpAtIsInfoOnly);
                this.state = 4613;
                this.s_and_w();
                this.state = 4614;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    atdef() {
        let _localctx = new AtdefContext(this._ctx, this.state);
        this.enterRule(_localctx, 436, bitmarkParser.RULE_atdef);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4616;
                this.atdef_();
                this.state = 4626;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 623, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4620;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 4617;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 4622;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 4623;
                                this.atdef_();
                            }
                        }
                    }
                    this.state = 4628;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 623, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    atdef_() {
        let _localctx = new Atdef_Context(this._ctx, this.state);
        this.enterRule(_localctx, 438, bitmarkParser.RULE_atdef_);
        let _la;
        try {
            let _alt;
            this.state = 4651;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPA:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4629;
                        this.match(bitmarkParser.OPA);
                        this.state = 4630;
                        this.s_and_w();
                        this.state = 4631;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.COLON || _la === bitmarkParser.DBLCOLON)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4632;
                        this.s_and_w();
                        this.state = 4638;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                            {
                                this.state = 4636;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 624, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4633;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4634;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4635;
                                            this.s_and_w();
                                        }
                                        break;
                                }
                            }
                            this.state = 4640;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4641;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OpAtCopyright:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4643;
                        this.match(bitmarkParser.OpAtCopyright);
                        this.state = 4647;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 626, this._ctx);
                        while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 4644;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 4649;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 626, this._ctx);
                        }
                        this.state = 4650;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dollarans() {
        let _localctx = new DollaransContext(this._ctx, this.state);
        this.enterRule(_localctx, 440, bitmarkParser.RULE_dollarans);
        let _la;
        try {
            this.state = 4672;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 632, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4653;
                        this.match(bitmarkParser.OPDOLL);
                        this.state = 4657;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 4657;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 628, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4654;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4655;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4656;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                }
                            }
                            this.state = 4659;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0));
                        this.state = 4661;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4662;
                        this.match(bitmarkParser.OPDOLL);
                        this.state = 4668;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NL - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                            {
                                this.state = 4666;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 630, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4663;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4664;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4665;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                }
                            }
                            this.state = 4670;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4671;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    anchor() {
        let _localctx = new AnchorContext(this._ctx, this.state);
        this.enterRule(_localctx, 442, bitmarkParser.RULE_anchor);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4674;
                this.match(bitmarkParser.OPDANGLE);
                this.state = 4676;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.S || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (bitmarkParser.OPS - 158)) | (1 << (bitmarkParser.COLON - 158)) | (1 << (bitmarkParser.AMP - 158)) | (1 << (bitmarkParser.Greater - 158)) | (1 << (bitmarkParser.Less - 158)) | (1 << (bitmarkParser.RightAngle - 158)) | (1 << (bitmarkParser.RightArrow - 158)) | (1 << (bitmarkParser.DBLEQ - 158)) | (1 << (bitmarkParser.QUOTE_INDEX - 158)) | (1 << (bitmarkParser.NUMERIC - 158)) | (1 << (bitmarkParser.STRING - 158)) | (1 << (bitmarkParser.NOTBITMARK - 158)) | (1 << (bitmarkParser.ELIPSIS - 158)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 223)) & ~0x1F) === 0 && ((1 << (_la - 223)) & ((1 << (bitmarkParser.AmpAudio - 223)) | (1 << (bitmarkParser.AmpImage - 223)) | (1 << (bitmarkParser.AmpVideo - 223)) | (1 << (bitmarkParser.AmpArticle - 223)) | (1 << (bitmarkParser.AmpDocument - 223)) | (1 << (bitmarkParser.AmpApp - 223)) | (1 << (bitmarkParser.AmpWebsite - 223)) | (1 << (bitmarkParser.AmpStillImageFilm - 223)) | (1 << (bitmarkParser.AmpAudioLink - 223)) | (1 << (bitmarkParser.AmpImageLink - 223)) | (1 << (bitmarkParser.AmpVideoLink - 223)) | (1 << (bitmarkParser.AmpArticleLink - 223)) | (1 << (bitmarkParser.AmpDocumentLink - 223)) | (1 << (bitmarkParser.AmpAppLink - 223)) | (1 << (bitmarkParser.AmpWebsiteLink - 223)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 223)))) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.BitmarkMinus - 274)) | (1 << (bitmarkParser.BitmarkPlus - 274)) | (1 << (bitmarkParser.URL - 274)))) !== 0)) {
                    {
                        this.state = 4675;
                        this.s_and_w();
                    }
                }
                this.state = 4678;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lines() {
        let _localctx = new LinesContext(this._ctx, this.state);
        this.enterRule(_localctx, 444, bitmarkParser.RULE_lines);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4684;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4680;
                                    this.s_and_w();
                                    this.state = 4682;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 634, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 4681;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 4686;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 635, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    s_and_w() {
        let _localctx = new S_and_wContext(this._ctx, this.state);
        this.enterRule(_localctx, 446, bitmarkParser.RULE_s_and_w);
        let _la;
        try {
            let _alt;
            this.state = 4733;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 643, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4688;
                        this.match(bitmarkParser.STRING);
                        this.state = 4695;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 637, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4690;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 4689;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 4692;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S);
                                    this.state = 4694;
                                    this.match(bitmarkParser.NUMERIC);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4697;
                        this.words();
                        this.state = 4704;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 639, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4699;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 4698;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 4701;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S);
                                    this.state = 4703;
                                    this.match(bitmarkParser.NUMERIC);
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4706;
                        this.match(bitmarkParser.NUMERIC);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4707;
                        this.match(bitmarkParser.OPS);
                        this.state = 4708;
                        this.s_and_w();
                        this.state = 4709;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 4714;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S) {
                            {
                                {
                                    this.state = 4711;
                                    this.match(bitmarkParser.S);
                                }
                            }
                            this.state = 4716;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4717;
                        this.match(bitmarkParser.COLON);
                        this.state = 4721;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 641, this._ctx);
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 4718;
                                        this.match(bitmarkParser.S);
                                    }
                                }
                            }
                            this.state = 4723;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 641, this._ctx);
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 4724;
                        this.match(bitmarkParser.AMP);
                        this.state = 4728;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 642, this._ctx);
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 4725;
                                        this.match(bitmarkParser.S);
                                    }
                                }
                            }
                            this.state = 4730;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 642, this._ctx);
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 4731;
                        this.match(bitmarkParser.DBLEQ);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 4732;
                        this.match(bitmarkParser.URL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dclines() {
        let _localctx = new DclinesContext(this._ctx, this.state);
        this.enterRule(_localctx, 448, bitmarkParser.RULE_dclines);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4735;
                this.match(bitmarkParser.DCANY);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    clnsp() {
        let _localctx = new ClnspContext(this._ctx, this.state);
        this.enterRule(_localctx, 450, bitmarkParser.RULE_clnsp);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4737;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sspl() {
        let _localctx = new SsplContext(this._ctx, this.state);
        this.enterRule(_localctx, 452, bitmarkParser.RULE_sspl);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4739;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.SSPL || _la === bitmarkParser.SSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    words() {
        let _localctx = new WordsContext(this._ctx, this.state);
        this.enterRule(_localctx, 454, bitmarkParser.RULE_words);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4771;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                this.state = 4771;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.SENTENCE:
                                        {
                                            this.state = 4741;
                                            this.sentence();
                                        }
                                        break;
                                    case bitmarkParser.NOTBITMARK:
                                        {
                                            this.state = 4742;
                                            this.match(bitmarkParser.NOTBITMARK);
                                        }
                                        break;
                                    case bitmarkParser.BARSTRING:
                                        {
                                            this.state = 4743;
                                            this.match(bitmarkParser.BARSTRING);
                                        }
                                        break;
                                    case bitmarkParser.ELIPSIS:
                                        {
                                            this.state = 4744;
                                            this.match(bitmarkParser.ELIPSIS);
                                        }
                                        break;
                                    case bitmarkParser.AMP:
                                        {
                                            this.state = 4745;
                                            this.match(bitmarkParser.AMP);
                                        }
                                        break;
                                    case bitmarkParser.Greater:
                                        {
                                            this.state = 4746;
                                            this.match(bitmarkParser.Greater);
                                            this.state = 4747;
                                            _la = this._input.LA(1);
                                            if (_la <= 0 || (_la === bitmarkParser.Greater)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                        }
                                        break;
                                    case bitmarkParser.Less:
                                        {
                                            this.state = 4748;
                                            this.match(bitmarkParser.Less);
                                            this.state = 4749;
                                            _la = this._input.LA(1);
                                            if (_la <= 0 || (_la === bitmarkParser.Less)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                        }
                                        break;
                                    case bitmarkParser.RightArrow:
                                        {
                                            this.state = 4750;
                                            this.match(bitmarkParser.RightArrow);
                                        }
                                        break;
                                    case bitmarkParser.RightAngle:
                                        {
                                            this.state = 4751;
                                            this.match(bitmarkParser.RightAngle);
                                        }
                                        break;
                                    case bitmarkParser.AmpArticle:
                                        {
                                            this.state = 4752;
                                            this.match(bitmarkParser.AmpArticle);
                                        }
                                        break;
                                    case bitmarkParser.AmpArticleLink:
                                        {
                                            this.state = 4753;
                                            this.match(bitmarkParser.AmpArticleLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpDocument:
                                        {
                                            this.state = 4754;
                                            this.match(bitmarkParser.AmpDocument);
                                        }
                                        break;
                                    case bitmarkParser.AmpDocumentLink:
                                        {
                                            this.state = 4755;
                                            this.match(bitmarkParser.AmpDocumentLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpWebsite:
                                        {
                                            this.state = 4756;
                                            this.match(bitmarkParser.AmpWebsite);
                                        }
                                        break;
                                    case bitmarkParser.AmpWebsiteLink:
                                        {
                                            this.state = 4757;
                                            this.match(bitmarkParser.AmpWebsiteLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpImage:
                                        {
                                            this.state = 4758;
                                            this.match(bitmarkParser.AmpImage);
                                        }
                                        break;
                                    case bitmarkParser.AmpImageLink:
                                        {
                                            this.state = 4759;
                                            this.match(bitmarkParser.AmpImageLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpAudio:
                                        {
                                            this.state = 4760;
                                            this.match(bitmarkParser.AmpAudio);
                                        }
                                        break;
                                    case bitmarkParser.AmpAudioLink:
                                        {
                                            this.state = 4761;
                                            this.match(bitmarkParser.AmpAudioLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpVideo:
                                        {
                                            this.state = 4762;
                                            this.match(bitmarkParser.AmpVideo);
                                        }
                                        break;
                                    case bitmarkParser.AmpVideoLink:
                                        {
                                            this.state = 4763;
                                            this.match(bitmarkParser.AmpVideoLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpApp:
                                        {
                                            this.state = 4764;
                                            this.match(bitmarkParser.AmpApp);
                                        }
                                        break;
                                    case bitmarkParser.AmpAppLink:
                                        {
                                            this.state = 4765;
                                            this.match(bitmarkParser.AmpAppLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpStillImageFilm:
                                        {
                                            this.state = 4766;
                                            this.match(bitmarkParser.AmpStillImageFilm);
                                        }
                                        break;
                                    case bitmarkParser.AmpStillImageFilmLink:
                                        {
                                            this.state = 4767;
                                            this.match(bitmarkParser.AmpStillImageFilmLink);
                                        }
                                        break;
                                    case bitmarkParser.BitmarkMinus:
                                        {
                                            this.state = 4768;
                                            this.match(bitmarkParser.BitmarkMinus);
                                        }
                                        break;
                                    case bitmarkParser.BitmarkPlus:
                                        {
                                            this.state = 4769;
                                            this.match(bitmarkParser.BitmarkPlus);
                                        }
                                        break;
                                    case bitmarkParser.QUOTE_INDEX:
                                        {
                                            this.state = 4770;
                                            this.match(bitmarkParser.QUOTE_INDEX);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 4773;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 645, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sp() {
        let _localctx = new SpContext(this._ctx, this.state);
        this.enterRule(_localctx, 456, bitmarkParser.RULE_sp);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4775;
                this.match(bitmarkParser.S);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sentence() {
        let _localctx = new SentenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 458, bitmarkParser.RULE_sentence);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4777;
                this.match(bitmarkParser.SENTENCE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    static get _ATN() {
        if (!bitmarkParser.__ATN) {
            bitmarkParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(bitmarkParser._serializedATN));
        }
        return bitmarkParser.__ATN;
    }
}
bitmarkParser.OPDOT = 1;
bitmarkParser.S = 2;
bitmarkParser.BitBook = 3;
bitmarkParser.BitChapter = 4;
bitmarkParser.BitToc = 5;
bitmarkParser.BitSummary = 6;
bitmarkParser.BitIntlink = 7;
bitmarkParser.BitIntRef = 8;
bitmarkParser.BitAlias = 9;
bitmarkParser.BitGroups = 10;
bitmarkParser.BitGroupt = 11;
bitmarkParser.BitPlaceholder = 12;
bitmarkParser.BitStatement = 13;
bitmarkParser.BitDetails = 14;
bitmarkParser.BitSampleSolution = 15;
bitmarkParser.BitTakeAudio = 16;
bitmarkParser.CLOZE = 17;
bitmarkParser.MATCH = 18;
bitmarkParser.BitArticle = 19;
bitmarkParser.BitPage = 20;
bitmarkParser.BitEssay = 21;
bitmarkParser.BitMessage = 22;
bitmarkParser.BitCorrection = 23;
bitmarkParser.BitMark = 24;
bitmarkParser.BitTakepic = 25;
bitmarkParser.BitRecaud = 26;
bitmarkParser.BitPrepnote = 27;
bitmarkParser.BitAssign = 28;
bitmarkParser.BitBotint = 29;
bitmarkParser.BitSelfassess = 30;
bitmarkParser.BitRating = 31;
bitmarkParser.BitSurvey = 32;
bitmarkParser.BitSurvey1 = 33;
bitmarkParser.BitSurveyanon = 34;
bitmarkParser.BitSurveyanon1 = 35;
bitmarkParser.BitNote = 36;
bitmarkParser.BitInfo = 37;
bitmarkParser.BitWarning = 38;
bitmarkParser.BitRemark = 39;
bitmarkParser.BitHint = 40;
bitmarkParser.BitHelp = 41;
bitmarkParser.BitDanger = 42;
bitmarkParser.BitBug = 43;
bitmarkParser.BitSidenote = 44;
bitmarkParser.BitStickynote = 45;
bitmarkParser.BitQuote = 46;
bitmarkParser.BitFootnote = 47;
bitmarkParser.BitExample = 48;
bitmarkParser.BitButtonCopytext = 49;
bitmarkParser.BitWbtContinue = 50;
bitmarkParser.BitLearningPathDetails = 51;
bitmarkParser.BitAiPrompt = 52;
bitmarkParser.BitNoteAi = 53;
bitmarkParser.BitSummayAi = 54;
bitmarkParser.BitArticleAi = 55;
bitmarkParser.BitLearningPathLti = 56;
bitmarkParser.BitLearningPathStep = 57;
bitmarkParser.BitLearningPathBook = 58;
bitmarkParser.BitLearningPathSign = 59;
bitmarkParser.BitLearningPathVideoCall = 60;
bitmarkParser.BitLearningPathLearningGoal = 61;
bitmarkParser.BitLearningPathClosing = 62;
bitmarkParser.BitLearningPathFeedback = 63;
bitmarkParser.BitLearningPathBotTraining = 64;
bitmarkParser.BitLearningPathExternalLink = 65;
bitmarkParser.BitLearningPathClassroomTraining = 66;
bitmarkParser.BitLearningPathClassroomEvent = 67;
bitmarkParser.BitBotActionSend = 68;
bitmarkParser.BitBotActionAnnounce = 69;
bitmarkParser.BitBotActionSave = 70;
bitmarkParser.BitBotActionRemind = 71;
bitmarkParser.BitVendorPadletEmbed = 72;
bitmarkParser.BitScorm = 73;
bitmarkParser.BitImage = 74;
bitmarkParser.BitImageLink = 75;
bitmarkParser.BitImageZoom = 76;
bitmarkParser.BitImagePrototype = 77;
bitmarkParser.BitImageSuperWide = 78;
bitmarkParser.BitAudio = 79;
bitmarkParser.BitAudioLink = 80;
bitmarkParser.BitAudioEmbed = 81;
bitmarkParser.BitVideo = 82;
bitmarkParser.BitVideoLink = 83;
bitmarkParser.BitVideoEmbed = 84;
bitmarkParser.BitVideoPortrait = 85;
bitmarkParser.BitVideoLandscape = 86;
bitmarkParser.BitStillImageFilm = 87;
bitmarkParser.BitStillImageFilmLink = 88;
bitmarkParser.BitStillImageFilmEmbed = 89;
bitmarkParser.BitWebsiteLink = 90;
bitmarkParser.BitDocument = 91;
bitmarkParser.BitDocumentLink = 92;
bitmarkParser.BitDocumentEmbed = 93;
bitmarkParser.BitDocumentDownload = 94;
bitmarkParser.BitAppLink = 95;
bitmarkParser.BitEditorial = 96;
bitmarkParser.BitBookFrontispiece = 97;
bitmarkParser.BitBookTitle = 98;
bitmarkParser.BitBookCopyright = 99;
bitmarkParser.BitBookDedication = 100;
bitmarkParser.BitBookForword = 101;
bitmarkParser.BitBookPreface = 102;
bitmarkParser.BitBookPrologue = 103;
bitmarkParser.BitBookEpilogue = 104;
bitmarkParser.BitBookIntroduction = 105;
bitmarkParser.BitBookIncitingIncident = 106;
bitmarkParser.BitBookConclusion = 107;
bitmarkParser.BitBookAfterword = 108;
bitmarkParser.BitBookPostscript = 109;
bitmarkParser.BitBookappendix = 110;
bitmarkParser.BitBookAddendum = 111;
bitmarkParser.BitBookAcknowledgments = 112;
bitmarkParser.BitBookListOfContributors = 113;
bitmarkParser.BitBookBibliography = 114;
bitmarkParser.BitBookReferenceList = 115;
bitmarkParser.BitBookEndnotes = 116;
bitmarkParser.BitBookNotes = 117;
bitmarkParser.BitBookCopyrightPermissions = 118;
bitmarkParser.BitBookTeaser = 119;
bitmarkParser.BitBookAutherBio = 120;
bitmarkParser.BitBookRequestForABookReview = 121;
bitmarkParser.BitBookComingSoon = 122;
bitmarkParser.BitBookReadMore = 123;
bitmarkParser.BitBookSummary = 124;
bitmarkParser.BitBookEpigraph = 125;
bitmarkParser.BitCode = 126;
bitmarkParser.BitCard1 = 127;
bitmarkParser.BitQuestion1 = 128;
bitmarkParser.BitScreenshot = 129;
bitmarkParser.BitFocusImage = 130;
bitmarkParser.BitPhoto = 131;
bitmarkParser.BitBrowserImage = 132;
bitmarkParser.BitBotActionResponse = 133;
bitmarkParser.BitBotActionTrueFalse = 134;
bitmarkParser.BitBotActionRatingNumber = 135;
bitmarkParser.BitBotActionRatingStars = 136;
bitmarkParser.BitChapterSubjectMatter = 137;
bitmarkParser.BitReleaseNote = 138;
bitmarkParser.BitConclusion = 139;
bitmarkParser.BitVendorAmcharts5Chart = 140;
bitmarkParser.BitFeatured = 141;
bitmarkParser.BitNewspaperArticle = 142;
bitmarkParser.BitBlogArticle = 143;
bitmarkParser.BitBookArticle = 144;
bitmarkParser.BitNotebookArticle = 145;
bitmarkParser.BitWorkbookArticle = 146;
bitmarkParser.OPDOLL = 147;
bitmarkParser.OPBUL = 148;
bitmarkParser.OPRANGLES = 149;
bitmarkParser.OPRANGLEL = 150;
bitmarkParser.OPDANGLE = 151;
bitmarkParser.OPU = 152;
bitmarkParser.OPB = 153;
bitmarkParser.OPQ = 154;
bitmarkParser.OPA = 155;
bitmarkParser.OPP = 156;
bitmarkParser.OPM = 157;
bitmarkParser.OPS = 158;
bitmarkParser.OPR = 159;
bitmarkParser.OPHASH = 160;
bitmarkParser.OPC = 161;
bitmarkParser.CL = 162;
bitmarkParser.COLON = 163;
bitmarkParser.AMP = 164;
bitmarkParser.DBLCOLON = 165;
bitmarkParser.PLUS = 166;
bitmarkParser.DotAt = 167;
bitmarkParser.Greater = 168;
bitmarkParser.Less = 169;
bitmarkParser.RightAngle = 170;
bitmarkParser.RightArrow = 171;
bitmarkParser.DBLEQ = 172;
bitmarkParser.HSPL = 173;
bitmarkParser.HSPL2 = 174;
bitmarkParser.SSPL = 175;
bitmarkParser.SSPL2 = 176;
bitmarkParser.QUOTE_INDEX = 177;
bitmarkParser.COMMENT = 178;
bitmarkParser.DCANY = 179;
bitmarkParser.Image_type = 180;
bitmarkParser.Audio_type = 181;
bitmarkParser.Video_type = 182;
bitmarkParser.ArticleText = 183;
bitmarkParser.NOTCL = 184;
bitmarkParser.NUMERIC = 185;
bitmarkParser.STRING = 186;
bitmarkParser.NL = 187;
bitmarkParser.NOTBITMARK = 188;
bitmarkParser.ELIPSIS = 189;
bitmarkParser.SENTENCE = 190;
bitmarkParser.BARSTRING = 191;
bitmarkParser.OPAT = 192;
bitmarkParser.AtProgress = 193;
bitmarkParser.AtReference = 194;
bitmarkParser.AtWidth = 195;
bitmarkParser.AtHeight = 196;
bitmarkParser.AtProgressPoints = 197;
bitmarkParser.AtShortanswer = 198;
bitmarkParser.AtLonganswer = 199;
bitmarkParser.AtExampleWithStr = 200;
bitmarkParser.AtExamplecol = 201;
bitmarkParser.AtExamplecl = 202;
bitmarkParser.AtSampleSolution = 203;
bitmarkParser.AtPartialAnswerS = 204;
bitmarkParser.AtPartialAnswer = 205;
bitmarkParser.AtLabeltrue = 206;
bitmarkParser.AtLabelfalse = 207;
bitmarkParser.AtPoints = 208;
bitmarkParser.AtSrc = 209;
bitmarkParser.AtPartner = 210;
bitmarkParser.OPATALT = 211;
bitmarkParser.OPAMARK = 212;
bitmarkParser.ShowInIndex = 213;
bitmarkParser.OpAtCaption = 214;
bitmarkParser.OpAtLicense = 215;
bitmarkParser.OpAtCopyright = 216;
bitmarkParser.OpAtSearch = 217;
bitmarkParser.OpAtIsTracked = 218;
bitmarkParser.OpAtIsInfoOnly = 219;
bitmarkParser.AtDate = 220;
bitmarkParser.Http = 221;
bitmarkParser.Https = 222;
bitmarkParser.AmpAudio = 223;
bitmarkParser.AmpImage = 224;
bitmarkParser.AmpImageZoom = 225;
bitmarkParser.AmpImageWAudio = 226;
bitmarkParser.AmpVideo = 227;
bitmarkParser.AmpArticle = 228;
bitmarkParser.AmpDocument = 229;
bitmarkParser.AmpApp = 230;
bitmarkParser.AmpWebsite = 231;
bitmarkParser.AmpStillImageFilm = 232;
bitmarkParser.AmpPdf = 233;
bitmarkParser.OpAmpAudio = 234;
bitmarkParser.OpAmpImage = 235;
bitmarkParser.OpAmpImageZoom = 236;
bitmarkParser.OpAmpImageWAudio = 237;
bitmarkParser.OpAmpVideo = 238;
bitmarkParser.OpAmpArticle = 239;
bitmarkParser.OpAmpArticleAtt = 240;
bitmarkParser.OpAmpDocument = 241;
bitmarkParser.OpAmpApp = 242;
bitmarkParser.OpAmpWebsite = 243;
bitmarkParser.OpAmpStillImageFilm = 244;
bitmarkParser.BracEnclose = 245;
bitmarkParser.AmpAudioLink = 246;
bitmarkParser.AmpImageLink = 247;
bitmarkParser.AmpVideoLink = 248;
bitmarkParser.AmpArticleLink = 249;
bitmarkParser.AmpDocumentLink = 250;
bitmarkParser.AmpDocumentDownload = 251;
bitmarkParser.AmpAppLink = 252;
bitmarkParser.AmpWebsiteLink = 253;
bitmarkParser.AmpStillImageFilmLink = 254;
bitmarkParser.OpAmpAudioLink = 255;
bitmarkParser.OpAmpImageLink = 256;
bitmarkParser.OpAmpVideoLink = 257;
bitmarkParser.OpAmpArticleLink = 258;
bitmarkParser.OpAmpDocumentLink = 259;
bitmarkParser.OpAmpDocumentDownload = 260;
bitmarkParser.OpAmpAppLink = 261;
bitmarkParser.OpAmpWebsiteLink = 262;
bitmarkParser.OpAmpStillImageFilmLink = 263;
bitmarkParser.AmpImageEmbed = 264;
bitmarkParser.AmpVideoEmbed = 265;
bitmarkParser.AmpAudioEmbed = 266;
bitmarkParser.AmpDocumentEmbed = 267;
bitmarkParser.AmpStillImageFilmEmbed = 268;
bitmarkParser.OpAmpImageEmbed = 269;
bitmarkParser.OpAmpVideoEmbed = 270;
bitmarkParser.OpAmpAudioEmbed = 271;
bitmarkParser.OpAmpDocumentEmbed = 272;
bitmarkParser.OpAmpStillImageFilmEmbed = 273;
bitmarkParser.BitmarkMinus = 274;
bitmarkParser.BitmarkPlus = 275;
bitmarkParser.ColonText = 276;
bitmarkParser.ColonJson = 277;
bitmarkParser.Prosemirror = 278;
bitmarkParser.Placeholder = 279;
bitmarkParser.BASIC = 280;
bitmarkParser.JPG = 281;
bitmarkParser.PNG = 282;
bitmarkParser.GIF = 283;
bitmarkParser.SVG = 284;
bitmarkParser.MP2 = 285;
bitmarkParser.MP3 = 286;
bitmarkParser.MP4 = 287;
bitmarkParser.FLV = 288;
bitmarkParser.WMV = 289;
bitmarkParser.MPEG = 290;
bitmarkParser.MPG = 291;
bitmarkParser.TEL = 292;
bitmarkParser.DotArticleAtt = 293;
bitmarkParser.STAR = 294;
bitmarkParser.URL = 295;
bitmarkParser.LIST_LINE = 296;
bitmarkParser.ENCLBARS = 297;
bitmarkParser.RULE_bitmark = 0;
bitmarkParser.RULE_bitmark_ = 1;
bitmarkParser.RULE_bit = 2;
bitmarkParser.RULE_book = 3;
bitmarkParser.RULE_chapter = 4;
bitmarkParser.RULE_ai_prompt = 5;
bitmarkParser.RULE_note_ai = 6;
bitmarkParser.RULE_summary_ai = 7;
bitmarkParser.RULE_article_ai = 8;
bitmarkParser.RULE_toc = 9;
bitmarkParser.RULE_summary = 10;
bitmarkParser.RULE_internal_link = 11;
bitmarkParser.RULE_bit_alias = 12;
bitmarkParser.RULE_title_etc = 13;
bitmarkParser.RULE_group_born = 14;
bitmarkParser.RULE_group_died = 15;
bitmarkParser.RULE_learning_path_lti = 16;
bitmarkParser.RULE_learning_path_step = 17;
bitmarkParser.RULE_learning_path_book = 18;
bitmarkParser.RULE_learning_path_sign = 19;
bitmarkParser.RULE_learning_path_video_call = 20;
bitmarkParser.RULE_learning_path_learning_goal = 21;
bitmarkParser.RULE_learning_path_closing = 22;
bitmarkParser.RULE_learning_path_feedback = 23;
bitmarkParser.RULE_learning_path_bot_training = 24;
bitmarkParser.RULE_learning_path_external_link = 25;
bitmarkParser.RULE_learning_path_classroom_training = 26;
bitmarkParser.RULE_learning_path_classroom_event = 27;
bitmarkParser.RULE_bot_action_send = 28;
bitmarkParser.RULE_bot_action_announce = 29;
bitmarkParser.RULE_bot_action_save = 30;
bitmarkParser.RULE_bot_action_remind = 31;
bitmarkParser.RULE_bot_action_response = 32;
bitmarkParser.RULE_bot_action_true_false = 33;
bitmarkParser.RULE_bot_action_rating_number = 34;
bitmarkParser.RULE_bot_action_rating_stars = 35;
bitmarkParser.RULE_bot_action = 36;
bitmarkParser.RULE_bo_actions = 37;
bitmarkParser.RULE_boacts = 38;
bitmarkParser.RULE_feedback = 39;
bitmarkParser.RULE_footer = 40;
bitmarkParser.RULE_bitElem = 41;
bitmarkParser.RULE_gap = 42;
bitmarkParser.RULE_single_gap = 43;
bitmarkParser.RULE_choice_plus = 44;
bitmarkParser.RULE_choice_minus = 45;
bitmarkParser.RULE_choice_star = 46;
bitmarkParser.RULE_essay = 47;
bitmarkParser.RULE_ml_example = 48;
bitmarkParser.RULE_partans = 49;
bitmarkParser.RULE_resource = 50;
bitmarkParser.RULE_correction = 51;
bitmarkParser.RULE_corrs = 52;
bitmarkParser.RULE_mark_ = 53;
bitmarkParser.RULE_mark_text = 54;
bitmarkParser.RULE_mark_color = 55;
bitmarkParser.RULE_take_audio = 56;
bitmarkParser.RULE_take_picture = 57;
bitmarkParser.RULE_record_audio = 58;
bitmarkParser.RULE_preparation_note = 59;
bitmarkParser.RULE_assignment = 60;
bitmarkParser.RULE_article = 61;
bitmarkParser.RULE_statement = 62;
bitmarkParser.RULE_details = 63;
bitmarkParser.RULE_sample_solution = 64;
bitmarkParser.RULE_buttoncopytext = 65;
bitmarkParser.RULE_wbtcontinue = 66;
bitmarkParser.RULE_learningpathdetails = 67;
bitmarkParser.RULE_page = 68;
bitmarkParser.RULE_note = 69;
bitmarkParser.RULE_info = 70;
bitmarkParser.RULE_warning = 71;
bitmarkParser.RULE_remark = 72;
bitmarkParser.RULE_help = 73;
bitmarkParser.RULE_danger = 74;
bitmarkParser.RULE_bug = 75;
bitmarkParser.RULE_sidenote = 76;
bitmarkParser.RULE_stickynote = 77;
bitmarkParser.RULE_quote = 78;
bitmarkParser.RULE_footnote = 79;
bitmarkParser.RULE_hintbit = 80;
bitmarkParser.RULE_examplebit = 81;
bitmarkParser.RULE_vendor_padlet_embed = 82;
bitmarkParser.RULE_scorm = 83;
bitmarkParser.RULE_bit_image = 84;
bitmarkParser.RULE_bit_imageLink = 85;
bitmarkParser.RULE_bit_imageZoom = 86;
bitmarkParser.RULE_bit_imagePrototype = 87;
bitmarkParser.RULE_bit_imageSuperWide = 88;
bitmarkParser.RULE_bit_audio = 89;
bitmarkParser.RULE_bit_audioLink = 90;
bitmarkParser.RULE_bit_audioEmbed = 91;
bitmarkParser.RULE_bit_video = 92;
bitmarkParser.RULE_bit_videoLink = 93;
bitmarkParser.RULE_bit_videoEmbed = 94;
bitmarkParser.RULE_bit_videoPortrait = 95;
bitmarkParser.RULE_bit_videoLandscape = 96;
bitmarkParser.RULE_bit_stillImageFilm = 97;
bitmarkParser.RULE_bit_stillImageFilmLink = 98;
bitmarkParser.RULE_bit_stillImageFilmEmbed = 99;
bitmarkParser.RULE_bit_websiteLink = 100;
bitmarkParser.RULE_bit_document = 101;
bitmarkParser.RULE_bit_documentLink = 102;
bitmarkParser.RULE_bit_documentEmbed = 103;
bitmarkParser.RULE_bit_documentDownload = 104;
bitmarkParser.RULE_bit_appLink = 105;
bitmarkParser.RULE_bit_editorial = 106;
bitmarkParser.RULE_book_frontispiece = 107;
bitmarkParser.RULE_book_title = 108;
bitmarkParser.RULE_book_copyright = 109;
bitmarkParser.RULE_book_dedication = 110;
bitmarkParser.RULE_book_forword = 111;
bitmarkParser.RULE_book_preface = 112;
bitmarkParser.RULE_book_prologue = 113;
bitmarkParser.RULE_book_epilogue = 114;
bitmarkParser.RULE_book_introduction = 115;
bitmarkParser.RULE_book_inciting_incident = 116;
bitmarkParser.RULE_book_conclusion = 117;
bitmarkParser.RULE_book_afterword = 118;
bitmarkParser.RULE_book_postscript = 119;
bitmarkParser.RULE_book_appendix = 120;
bitmarkParser.RULE_book_addendum = 121;
bitmarkParser.RULE_book_acknowledgments = 122;
bitmarkParser.RULE_book_list_of_contributors = 123;
bitmarkParser.RULE_book_bibliography = 124;
bitmarkParser.RULE_book_reference_list = 125;
bitmarkParser.RULE_book_endnotes = 126;
bitmarkParser.RULE_book_notes = 127;
bitmarkParser.RULE_book_copyright_permissions = 128;
bitmarkParser.RULE_book_teaser = 129;
bitmarkParser.RULE_book_auther_bio = 130;
bitmarkParser.RULE_book_request_for_a_book_review = 131;
bitmarkParser.RULE_book_coming_soon = 132;
bitmarkParser.RULE_book_read_more = 133;
bitmarkParser.RULE_book_summary = 134;
bitmarkParser.RULE_book_epigraph = 135;
bitmarkParser.RULE_code = 136;
bitmarkParser.RULE_card1 = 137;
bitmarkParser.RULE_question1 = 138;
bitmarkParser.RULE_screenshot = 139;
bitmarkParser.RULE_focus_image = 140;
bitmarkParser.RULE_photo = 141;
bitmarkParser.RULE_browser_image = 142;
bitmarkParser.RULE_chapter_subject_matter = 143;
bitmarkParser.RULE_release_note = 144;
bitmarkParser.RULE_conclusion = 145;
bitmarkParser.RULE_featured = 146;
bitmarkParser.RULE_vendor_amcharts_5_chart = 147;
bitmarkParser.RULE_newspaper_article = 148;
bitmarkParser.RULE_blog_article = 149;
bitmarkParser.RULE_book_article = 150;
bitmarkParser.RULE_notebook_article = 151;
bitmarkParser.RULE_workbook_article = 152;
bitmarkParser.RULE_message = 153;
bitmarkParser.RULE_bot_interview = 154;
bitmarkParser.RULE_bot_choice = 155;
bitmarkParser.RULE_rating = 156;
bitmarkParser.RULE_bullet_item = 157;
bitmarkParser.RULE_survey = 158;
bitmarkParser.RULE_survey_1 = 159;
bitmarkParser.RULE_survey_anonymous = 160;
bitmarkParser.RULE_survey_anonymous_1 = 161;
bitmarkParser.RULE_self_assessment = 162;
bitmarkParser.RULE_self_assess_s_and_w = 163;
bitmarkParser.RULE_atpoint = 164;
bitmarkParser.RULE_format = 165;
bitmarkParser.RULE_resource_format = 166;
bitmarkParser.RULE_resource_format_extra = 167;
bitmarkParser.RULE_format2 = 168;
bitmarkParser.RULE_image_format = 169;
bitmarkParser.RULE_video_format = 170;
bitmarkParser.RULE_article_format = 171;
bitmarkParser.RULE_document_format = 172;
bitmarkParser.RULE_app_format = 173;
bitmarkParser.RULE_website_format = 174;
bitmarkParser.RULE_stillimagefilm_format = 175;
bitmarkParser.RULE_op_article_format = 176;
bitmarkParser.RULE_op_document_format = 177;
bitmarkParser.RULE_op_app_format = 178;
bitmarkParser.RULE_op_website_format = 179;
bitmarkParser.RULE_op_video_format = 180;
bitmarkParser.RULE_op_stillimagefilm_format = 181;
bitmarkParser.RULE_articlebit = 182;
bitmarkParser.RULE_documentbit = 183;
bitmarkParser.RULE_websitebit = 184;
bitmarkParser.RULE_appbit = 185;
bitmarkParser.RULE_stillimagefilmbit = 186;
bitmarkParser.RULE_stillimg_one = 187;
bitmarkParser.RULE_videobit = 188;
bitmarkParser.RULE_video_one = 189;
bitmarkParser.RULE_imagebit = 190;
bitmarkParser.RULE_image_one = 191;
bitmarkParser.RULE_op_image_format = 192;
bitmarkParser.RULE_image_chained = 193;
bitmarkParser.RULE_image_chained4match = 194;
bitmarkParser.RULE_audiobit = 195;
bitmarkParser.RULE_audio_one = 196;
bitmarkParser.RULE_audio_format = 197;
bitmarkParser.RULE_op_audio_format = 198;
bitmarkParser.RULE_resource_chained = 199;
bitmarkParser.RULE_telephone = 200;
bitmarkParser.RULE_url = 201;
bitmarkParser.RULE_item = 202;
bitmarkParser.RULE_lead = 203;
bitmarkParser.RULE_angleref = 204;
bitmarkParser.RULE_example = 205;
bitmarkParser.RULE_bracketed_text = 206;
bitmarkParser.RULE_reference = 207;
bitmarkParser.RULE_progress = 208;
bitmarkParser.RULE_dateprop = 209;
bitmarkParser.RULE_dateprop_chained = 210;
bitmarkParser.RULE_instruction = 211;
bitmarkParser.RULE_hint = 212;
bitmarkParser.RULE_title = 213;
bitmarkParser.RULE_bool_label = 214;
bitmarkParser.RULE_progress_points = 215;
bitmarkParser.RULE_istracked = 216;
bitmarkParser.RULE_isinfoonly = 217;
bitmarkParser.RULE_atdef = 218;
bitmarkParser.RULE_atdef_ = 219;
bitmarkParser.RULE_dollarans = 220;
bitmarkParser.RULE_anchor = 221;
bitmarkParser.RULE_lines = 222;
bitmarkParser.RULE_s_and_w = 223;
bitmarkParser.RULE_dclines = 224;
bitmarkParser.RULE_clnsp = 225;
bitmarkParser.RULE_sspl = 226;
bitmarkParser.RULE_words = 227;
bitmarkParser.RULE_sp = 228;
bitmarkParser.RULE_sentence = 229;
// tslint:disable:no-trailing-whitespace
bitmarkParser.ruleNames = [
    "bitmark", "bitmark_", "bit", "book", "chapter", "ai_prompt", "note_ai",
    "summary_ai", "article_ai", "toc", "summary", "internal_link", "bit_alias",
    "title_etc", "group_born", "group_died", "learning_path_lti", "learning_path_step",
    "learning_path_book", "learning_path_sign", "learning_path_video_call",
    "learning_path_learning_goal", "learning_path_closing", "learning_path_feedback",
    "learning_path_bot_training", "learning_path_external_link", "learning_path_classroom_training",
    "learning_path_classroom_event", "bot_action_send", "bot_action_announce",
    "bot_action_save", "bot_action_remind", "bot_action_response", "bot_action_true_false",
    "bot_action_rating_number", "bot_action_rating_stars", "bot_action", "bo_actions",
    "boacts", "feedback", "footer", "bitElem", "gap", "single_gap", "choice_plus",
    "choice_minus", "choice_star", "essay", "ml_example", "partans", "resource",
    "correction", "corrs", "mark_", "mark_text", "mark_color", "take_audio",
    "take_picture", "record_audio", "preparation_note", "assignment", "article",
    "statement", "details", "sample_solution", "buttoncopytext", "wbtcontinue",
    "learningpathdetails", "page", "note", "info", "warning", "remark", "help",
    "danger", "bug", "sidenote", "stickynote", "quote", "footnote", "hintbit",
    "examplebit", "vendor_padlet_embed", "scorm", "bit_image", "bit_imageLink",
    "bit_imageZoom", "bit_imagePrototype", "bit_imageSuperWide", "bit_audio",
    "bit_audioLink", "bit_audioEmbed", "bit_video", "bit_videoLink", "bit_videoEmbed",
    "bit_videoPortrait", "bit_videoLandscape", "bit_stillImageFilm", "bit_stillImageFilmLink",
    "bit_stillImageFilmEmbed", "bit_websiteLink", "bit_document", "bit_documentLink",
    "bit_documentEmbed", "bit_documentDownload", "bit_appLink", "bit_editorial",
    "book_frontispiece", "book_title", "book_copyright", "book_dedication",
    "book_forword", "book_preface", "book_prologue", "book_epilogue", "book_introduction",
    "book_inciting_incident", "book_conclusion", "book_afterword", "book_postscript",
    "book_appendix", "book_addendum", "book_acknowledgments", "book_list_of_contributors",
    "book_bibliography", "book_reference_list", "book_endnotes", "book_notes",
    "book_copyright_permissions", "book_teaser", "book_auther_bio", "book_request_for_a_book_review",
    "book_coming_soon", "book_read_more", "book_summary", "book_epigraph",
    "code", "card1", "question1", "screenshot", "focus_image", "photo", "browser_image",
    "chapter_subject_matter", "release_note", "conclusion", "featured", "vendor_amcharts_5_chart",
    "newspaper_article", "blog_article", "book_article", "notebook_article",
    "workbook_article", "message", "bot_interview", "bot_choice", "rating",
    "bullet_item", "survey", "survey_1", "survey_anonymous", "survey_anonymous_1",
    "self_assessment", "self_assess_s_and_w", "atpoint", "format", "resource_format",
    "resource_format_extra", "format2", "image_format", "video_format", "article_format",
    "document_format", "app_format", "website_format", "stillimagefilm_format",
    "op_article_format", "op_document_format", "op_app_format", "op_website_format",
    "op_video_format", "op_stillimagefilm_format", "articlebit", "documentbit",
    "websitebit", "appbit", "stillimagefilmbit", "stillimg_one", "videobit",
    "video_one", "imagebit", "image_one", "op_image_format", "image_chained",
    "image_chained4match", "audiobit", "audio_one", "audio_format", "op_audio_format",
    "resource_chained", "telephone", "url", "item", "lead", "angleref", "example",
    "bracketed_text", "reference", "progress", "dateprop", "dateprop_chained",
    "instruction", "hint", "title", "bool_label", "progress_points", "istracked",
    "isinfoonly", "atdef", "atdef_", "dollarans", "anchor", "lines", "s_and_w",
    "dclines", "clnsp", "sspl", "words", "sp", "sentence",
];
bitmarkParser._LITERAL_NAMES = [
    undefined, "'[.'", undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'CLOZE'", "'MATCH'", undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, "':'", "'&'", "'::'", "'+'", "'.@'", "'>'", "'<'",
    "'\u25BA'", "'\u2192'", "'=='", undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, "'[@'", undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, "'http://'", "'https://'", "'&audio'", "'&image'",
    "'&image-zoom'", "'&image-with-audio'", "'&video'", "'&article'", "'&document'",
    "'&app'", "'&website'", "'&still-image-film'", "'&pdf'", undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'&audio-link'", "'&image-link'", "'&video-link'",
    "'&article-link'", "'&document-link'", "'&document-download'", "'&app-link'",
    "'&website-link'", "'&still-image-film-link'", undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, "'&image-embed'",
    "'&video-embed'", "'&daudio-embed'", "'&document-embed'", "'&still-image-film-embed'",
    undefined, undefined, undefined, undefined, undefined, "':bitmark--'",
    "':bitmark++'", "':text'", "':json'", "':prosemirror'", "':placeholder'",
    "':basic'", "':jpg'", "':png'", "':gif'", "':svg'", "':mp2'", "':mp3'",
    "':mp4'", "':flv'", "':wmv'", "':mpeg'", "':mpg'", "'tel:'", "'.article-attachment'",
    "'*'",
];
bitmarkParser._SYMBOLIC_NAMES = [
    undefined, "OPDOT", "S", "BitBook", "BitChapter", "BitToc", "BitSummary",
    "BitIntlink", "BitIntRef", "BitAlias", "BitGroups", "BitGroupt", "BitPlaceholder",
    "BitStatement", "BitDetails", "BitSampleSolution", "BitTakeAudio", "CLOZE",
    "MATCH", "BitArticle", "BitPage", "BitEssay", "BitMessage", "BitCorrection",
    "BitMark", "BitTakepic", "BitRecaud", "BitPrepnote", "BitAssign", "BitBotint",
    "BitSelfassess", "BitRating", "BitSurvey", "BitSurvey1", "BitSurveyanon",
    "BitSurveyanon1", "BitNote", "BitInfo", "BitWarning", "BitRemark", "BitHint",
    "BitHelp", "BitDanger", "BitBug", "BitSidenote", "BitStickynote", "BitQuote",
    "BitFootnote", "BitExample", "BitButtonCopytext", "BitWbtContinue", "BitLearningPathDetails",
    "BitAiPrompt", "BitNoteAi", "BitSummayAi", "BitArticleAi", "BitLearningPathLti",
    "BitLearningPathStep", "BitLearningPathBook", "BitLearningPathSign", "BitLearningPathVideoCall",
    "BitLearningPathLearningGoal", "BitLearningPathClosing", "BitLearningPathFeedback",
    "BitLearningPathBotTraining", "BitLearningPathExternalLink", "BitLearningPathClassroomTraining",
    "BitLearningPathClassroomEvent", "BitBotActionSend", "BitBotActionAnnounce",
    "BitBotActionSave", "BitBotActionRemind", "BitVendorPadletEmbed", "BitScorm",
    "BitImage", "BitImageLink", "BitImageZoom", "BitImagePrototype", "BitImageSuperWide",
    "BitAudio", "BitAudioLink", "BitAudioEmbed", "BitVideo", "BitVideoLink",
    "BitVideoEmbed", "BitVideoPortrait", "BitVideoLandscape", "BitStillImageFilm",
    "BitStillImageFilmLink", "BitStillImageFilmEmbed", "BitWebsiteLink", "BitDocument",
    "BitDocumentLink", "BitDocumentEmbed", "BitDocumentDownload", "BitAppLink",
    "BitEditorial", "BitBookFrontispiece", "BitBookTitle", "BitBookCopyright",
    "BitBookDedication", "BitBookForword", "BitBookPreface", "BitBookPrologue",
    "BitBookEpilogue", "BitBookIntroduction", "BitBookIncitingIncident", "BitBookConclusion",
    "BitBookAfterword", "BitBookPostscript", "BitBookappendix", "BitBookAddendum",
    "BitBookAcknowledgments", "BitBookListOfContributors", "BitBookBibliography",
    "BitBookReferenceList", "BitBookEndnotes", "BitBookNotes", "BitBookCopyrightPermissions",
    "BitBookTeaser", "BitBookAutherBio", "BitBookRequestForABookReview", "BitBookComingSoon",
    "BitBookReadMore", "BitBookSummary", "BitBookEpigraph", "BitCode", "BitCard1",
    "BitQuestion1", "BitScreenshot", "BitFocusImage", "BitPhoto", "BitBrowserImage",
    "BitBotActionResponse", "BitBotActionTrueFalse", "BitBotActionRatingNumber",
    "BitBotActionRatingStars", "BitChapterSubjectMatter", "BitReleaseNote",
    "BitConclusion", "BitVendorAmcharts5Chart", "BitFeatured", "BitNewspaperArticle",
    "BitBlogArticle", "BitBookArticle", "BitNotebookArticle", "BitWorkbookArticle",
    "OPDOLL", "OPBUL", "OPRANGLES", "OPRANGLEL", "OPDANGLE", "OPU", "OPB",
    "OPQ", "OPA", "OPP", "OPM", "OPS", "OPR", "OPHASH", "OPC", "CL", "COLON",
    "AMP", "DBLCOLON", "PLUS", "DotAt", "Greater", "Less", "RightAngle", "RightArrow",
    "DBLEQ", "HSPL", "HSPL2", "SSPL", "SSPL2", "QUOTE_INDEX", "COMMENT", "DCANY",
    "Image_type", "Audio_type", "Video_type", "ArticleText", "NOTCL", "NUMERIC",
    "STRING", "NL", "NOTBITMARK", "ELIPSIS", "SENTENCE", "BARSTRING", "OPAT",
    "AtProgress", "AtReference", "AtWidth", "AtHeight", "AtProgressPoints",
    "AtShortanswer", "AtLonganswer", "AtExampleWithStr", "AtExamplecol", "AtExamplecl",
    "AtSampleSolution", "AtPartialAnswerS", "AtPartialAnswer", "AtLabeltrue",
    "AtLabelfalse", "AtPoints", "AtSrc", "AtPartner", "OPATALT", "OPAMARK",
    "ShowInIndex", "OpAtCaption", "OpAtLicense", "OpAtCopyright", "OpAtSearch",
    "OpAtIsTracked", "OpAtIsInfoOnly", "AtDate", "Http", "Https", "AmpAudio",
    "AmpImage", "AmpImageZoom", "AmpImageWAudio", "AmpVideo", "AmpArticle",
    "AmpDocument", "AmpApp", "AmpWebsite", "AmpStillImageFilm", "AmpPdf",
    "OpAmpAudio", "OpAmpImage", "OpAmpImageZoom", "OpAmpImageWAudio", "OpAmpVideo",
    "OpAmpArticle", "OpAmpArticleAtt", "OpAmpDocument", "OpAmpApp", "OpAmpWebsite",
    "OpAmpStillImageFilm", "BracEnclose", "AmpAudioLink", "AmpImageLink",
    "AmpVideoLink", "AmpArticleLink", "AmpDocumentLink", "AmpDocumentDownload",
    "AmpAppLink", "AmpWebsiteLink", "AmpStillImageFilmLink", "OpAmpAudioLink",
    "OpAmpImageLink", "OpAmpVideoLink", "OpAmpArticleLink", "OpAmpDocumentLink",
    "OpAmpDocumentDownload", "OpAmpAppLink", "OpAmpWebsiteLink", "OpAmpStillImageFilmLink",
    "AmpImageEmbed", "AmpVideoEmbed", "AmpAudioEmbed", "AmpDocumentEmbed",
    "AmpStillImageFilmEmbed", "OpAmpImageEmbed", "OpAmpVideoEmbed", "OpAmpAudioEmbed",
    "OpAmpDocumentEmbed", "OpAmpStillImageFilmEmbed", "BitmarkMinus", "BitmarkPlus",
    "ColonText", "ColonJson", "Prosemirror", "Placeholder", "BASIC", "JPG",
    "PNG", "GIF", "SVG", "MP2", "MP3", "MP4", "FLV", "WMV", "MPEG", "MPG",
    "TEL", "DotArticleAtt", "STAR", "URL", "LIST_LINE", "ENCLBARS",
];
bitmarkParser.VOCABULARY = new VocabularyImpl(bitmarkParser._LITERAL_NAMES, bitmarkParser._SYMBOLIC_NAMES, []);
bitmarkParser._serializedATNSegments = 9;
bitmarkParser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u012B\u12AE\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
    "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
    "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
    "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
    "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
    "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
    "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
    "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
    "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
    "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
    "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
    "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
    "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
    "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
    "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
    "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
    "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
    "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
    "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
    "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
    "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
    "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
    "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
    "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
    "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
    "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
    "\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
    "\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
    "\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
    "\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
    "\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
    "\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
    "\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
    "\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
    "\x04\xE6\t\xE6\x04\xE7\t\xE7\x03\x02\x03\x02\x07\x02\u01D1\n\x02\f\x02" +
    "\x0E\x02\u01D4\v\x02\x03\x02\x07\x02\u01D7\n\x02\f\x02\x0E\x02\u01DA\v" +
    "\x02\x06\x02\u01DC\n\x02\r\x02\x0E\x02\u01DD\x03\x02\x07\x02\u01E1\n\x02" +
    "\f\x02\x0E\x02\u01E4\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x05\x03\u01EA" +
    "\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04" +
    "\u027A\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x07\x05\u0280\n\x05\f\x05" +
    "\x0E\x05\u0283\v\x05\x03\x05\x03\x05\x07\x05\u0287\n\x05\f\x05\x0E\x05" +
    "\u028A\v\x05\x06\x05\u028C\n\x05\r\x05\x0E\x05\u028D\x03\x06\x03\x06\x03" +
    "\x06\x03\x06\x07\x06\u0294\n\x06\f\x06\x0E\x06\u0297\v\x06\x03\x06\x03" +
    "\x06\x03\x06\x05\x06\u029C\n\x06\x03\x06\x03\x06\x07\x06\u02A0\n\x06\f" +
    "\x06\x0E\x06\u02A3\v\x06\x03\x06\x07\x06\u02A6\n\x06\f\x06\x0E\x06\u02A9" +
    "\v\x06\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07\u02AF\n\x07\f\x07\x0E\x07" +
    "\u02B2\v\x07\x03\x07\x03\x07\x07\x07\u02B6\n\x07\f\x07\x0E\x07\u02B9\v" +
    "\x07\x06\x07\u02BB\n\x07\r\x07\x0E\x07\u02BC\x03\b\x03\b\x03\b\x03\b\x07" +
    "\b\u02C3\n\b\f\b\x0E\b\u02C6\v\b\x03\b\x03\b\x07\b\u02CA\n\b\f\b\x0E\b" +
    "\u02CD\v\b\x06\b\u02CF\n\b\r\b\x0E\b\u02D0\x03\t\x03\t\x03\t\x03\t\x07" +
    "\t\u02D7\n\t\f\t\x0E\t\u02DA\v\t\x03\t\x03\t\x07\t\u02DE\n\t\f\t\x0E\t" +
    "\u02E1\v\t\x06\t\u02E3\n\t\r\t\x0E\t\u02E4\x03\n\x03\n\x03\n\x03\n\x07" +
    "\n\u02EB\n\n\f\n\x0E\n\u02EE\v\n\x03\n\x03\n\x07\n\u02F2\n\n\f\n\x0E\n" +
    "\u02F5\v\n\x06\n\u02F7\n\n\r\n\x0E\n\u02F8\x03\v\x03\v\x05\v\u02FD\n\v" +
    "\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v\u0304\n\v\x03\f\x03\f\x03\f\x07\f" +
    "\u0309\n\f\f\f\x0E\f\u030C\v\f\x03\f\x03\f\x03\r\x03\r\x05\r\u0312\n\r" +
    "\x03\r\x03\r\x07\r\u0316\n\r\f\r\x0E\r\u0319\v\r\x03\r\x07\r\u031C\n\r" +
    "\f\r\x0E\r\u031F\v\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x05\x0F\u0326" +
    "\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F" +
    "\u032F\n\x0F\x07\x0F\u0331\n\x0F\f\x0F\x0E\x0F\u0334\v\x0F\x03\x10\x03" +
    "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x06\x10\u033C\n\x10\r\x10\x0E\x10" +
    "\u033D\x03\x10\x06\x10\u0341\n\x10\r\x10\x0E\x10\u0342\x03\x10\x03\x10" +
    "\x07\x10\u0347\n\x10\f\x10\x0E\x10\u034A\v\x10\x03\x11\x03\x11\x03\x11" +
    "\x03\x11\x03\x11\x03\x11\x06\x11\u0352\n\x11\r\x11\x0E\x11\u0353\x03\x11" +
    "\x06\x11\u0357\n\x11\r\x11\x0E\x11\u0358\x03\x11\x03\x11\x07\x11\u035D" +
    "\n\x11\f\x11\x0E\x11\u0360\v\x11\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12" +
    "\u0366\n\x12\f\x12\x0E\x12\u0369\v\x12\x03\x12\x03\x12\x07\x12\u036D\n" +
    "\x12\f\x12\x0E\x12\u0370\v\x12\x06\x12\u0372\n\x12\r\x12\x0E\x12\u0373" +
    "\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13\u037A\n\x13\f\x13\x0E\x13\u037D" +
    "\v\x13\x03\x13\x03\x13\x07\x13\u0381\n\x13\f\x13\x0E\x13\u0384\v\x13\x06" +
    "\x13\u0386\n\x13\r\x13\x0E\x13\u0387\x03\x14\x03\x14\x03\x14\x03\x14\x07" +
    "\x14\u038E\n\x14\f\x14\x0E\x14\u0391\v\x14\x03\x14\x03\x14\x07\x14\u0395" +
    "\n\x14\f\x14\x0E\x14\u0398\v\x14\x06\x14\u039A\n\x14\r\x14\x0E\x14\u039B" +
    "\x03\x15\x03\x15\x03\x15\x03\x15\x07\x15\u03A2\n\x15\f\x15\x0E\x15\u03A5" +
    "\v\x15\x03\x15\x03\x15\x07\x15\u03A9\n\x15\f\x15\x0E\x15\u03AC\v\x15\x06" +
    "\x15\u03AE\n\x15\r\x15\x0E\x15\u03AF\x03\x16\x03\x16\x03\x16\x03\x16\x07" +
    "\x16\u03B6\n\x16\f\x16\x0E\x16\u03B9\v\x16\x03\x16\x03\x16\x07\x16\u03BD" +
    "\n\x16\f\x16\x0E\x16\u03C0\v\x16\x06\x16\u03C2\n\x16\r\x16\x0E\x16\u03C3" +
    "\x03\x17\x03\x17\x03\x17\x03\x17\x07\x17\u03CA\n\x17\f\x17\x0E\x17\u03CD" +
    "\v\x17\x03\x17\x03\x17\x07\x17\u03D1\n\x17\f\x17\x0E\x17\u03D4\v\x17\x06" +
    "\x17\u03D6\n\x17\r\x17\x0E\x17\u03D7\x03\x18\x03\x18\x03\x18\x03\x18\x07" +
    "\x18\u03DE\n\x18\f\x18\x0E\x18\u03E1\v\x18\x03\x18\x03\x18\x07\x18\u03E5" +
    "\n\x18\f\x18\x0E\x18\u03E8\v\x18\x06\x18\u03EA\n\x18\r\x18\x0E\x18\u03EB" +
    "\x03\x19\x03\x19\x03\x19\x03\x19\x07\x19\u03F2\n\x19\f\x19\x0E\x19\u03F5" +
    "\v\x19\x03\x19\x03\x19\x07\x19\u03F9\n\x19\f\x19\x0E\x19\u03FC\v\x19\x06" +
    "\x19\u03FE\n\x19\r\x19\x0E\x19\u03FF\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07" +
    "\x1A\u0406\n\x1A\f\x1A\x0E\x1A\u0409\v\x1A\x03\x1A\x03\x1A\x07\x1A\u040D" +
    "\n\x1A\f\x1A\x0E\x1A\u0410\v\x1A\x06\x1A\u0412\n\x1A\r\x1A\x0E\x1A\u0413" +
    "\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x07\x1B\u041A\n\x1B\f\x1B\x0E\x1B\u041D" +
    "\v\x1B\x03\x1B\x03\x1B\x07\x1B\u0421\n\x1B\f\x1B\x0E\x1B\u0424\v\x1B\x06" +
    "\x1B\u0426\n\x1B\r\x1B\x0E\x1B\u0427\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x07" +
    "\x1C\u042E\n\x1C\f\x1C\x0E\x1C\u0431\v\x1C\x03\x1C\x03\x1C\x07\x1C\u0435" +
    "\n\x1C\f\x1C\x0E\x1C\u0438\v\x1C\x06\x1C\u043A\n\x1C\r\x1C\x0E\x1C\u043B" +
    "\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u0442\n\x1D\f\x1D\x0E\x1D\u0445" +
    "\v\x1D\x03\x1D\x03\x1D\x07\x1D\u0449\n\x1D\f\x1D\x0E\x1D\u044C\v\x1D\x06" +
    "\x1D\u044E\n\x1D\r\x1D\x0E\x1D\u044F\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07" +
    "\x1E\u0456\n\x1E\f\x1E\x0E\x1E\u0459\v\x1E\x03\x1E\x03\x1E\x07\x1E\u045D" +
    "\n\x1E\f\x1E\x0E\x1E\u0460\v\x1E\x06\x1E\u0462\n\x1E\r\x1E\x0E\x1E\u0463" +
    "\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F\u046A\n\x1F\f\x1F\x0E\x1F\u046D" +
    "\v\x1F\x03\x1F\x03\x1F\x07\x1F\u0471\n\x1F\f\x1F\x0E\x1F\u0474\v\x1F\x06" +
    "\x1F\u0476\n\x1F\r\x1F\x0E\x1F\u0477\x03 \x03 \x03 \x03 \x07 \u047E\n" +
    " \f \x0E \u0481\v \x03 \x03 \x07 \u0485\n \f \x0E \u0488\v \x06 \u048A" +
    "\n \r \x0E \u048B\x03!\x03!\x03!\x03!\x07!\u0492\n!\f!\x0E!\u0495\v!\x03" +
    "!\x03!\x07!\u0499\n!\f!\x0E!\u049C\v!\x06!\u049E\n!\r!\x0E!\u049F\x03" +
    "\"\x03\"\x03\"\x03\"\x07\"\u04A6\n\"\f\"\x0E\"\u04A9\v\"\x03\"\x03\"\x07" +
    "\"\u04AD\n\"\f\"\x0E\"\u04B0\v\"\x07\"\u04B2\n\"\f\"\x0E\"\u04B5\v\"\x03" +
    "\"\x06\"\u04B8\n\"\r\"\x0E\"\u04B9\x03\"\x03\"\x05\"\u04BE\n\"\x03\"\x07" +
    "\"\u04C1\n\"\f\"\x0E\"\u04C4\v\"\x03#\x03#\x03#\x03#\x07#\u04CA\n#\f#" +
    "\x0E#\u04CD\v#\x03#\x03#\x07#\u04D1\n#\f#\x0E#\u04D4\v#\x07#\u04D6\n#" +
    "\f#\x0E#\u04D9\v#\x03#\x06#\u04DC\n#\r#\x0E#\u04DD\x03#\x03#\x05#\u04E2" +
    "\n#\x03#\x07#\u04E5\n#\f#\x0E#\u04E8\v#\x03$\x03$\x03$\x03$\x07$\u04EE" +
    "\n$\f$\x0E$\u04F1\v$\x03$\x03$\x07$\u04F5\n$\f$\x0E$\u04F8\v$\x07$\u04FA" +
    "\n$\f$\x0E$\u04FD\v$\x03$\x06$\u0500\n$\r$\x0E$\u0501\x03$\x03$\x05$\u0506" +
    "\n$\x03$\x07$\u0509\n$\f$\x0E$\u050C\v$\x03%\x03%\x03%\x03%\x07%\u0512" +
    "\n%\f%\x0E%\u0515\v%\x03%\x03%\x07%\u0519\n%\f%\x0E%\u051C\v%\x07%\u051E" +
    "\n%\f%\x0E%\u0521\v%\x03&\x03&\x03&\x03\'\x07\'\u0527\n\'\f\'\x0E\'\u052A" +
    "\v\'\x03\'\x03\'\x07\'\u052E\n\'\f\'\x0E\'\u0531\v\'\x06\'\u0533\n\'\r" +
    "\'\x0E\'\u0534\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x05(\u053E\n(\x03)\x03" +
    ")\x05)\u0542\n)\x03*\x07*\u0545\n*\f*\x0E*\u0548\v*\x03*\x06*\u054B\n" +
    "*\r*\x0E*\u054C\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03" +
    "+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03" +
    "+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x05+\u056F\n+\x03,\x03,\x03,\x03" +
    ",\x03,\x03,\x07,\u0577\n,\f,\x0E,\u057A\v,\x03-\x03-\x03-\x03-\x05-\u0580" +
    "\n-\x03-\x07-\u0583\n-\f-\x0E-\u0586\v-\x03-\x03-\x03.\x05.\u058B\n.\x03" +
    ".\x03.\x06.\u058F\n.\r.\x0E.\u0590\x03.\x03.\x03/\x05/\u0596\n/\x03/\x03" +
    "/\x06/\u059A\n/\r/\x0E/\u059B\x03/\x03/\x030\x050\u05A1\n0\x030\x030\x06" +
    "0\u05A5\n0\r0\x0E0\u05A6\x030\x030\x031\x031\x031\x031\x031\x031\x071" +
    "\u05B1\n1\f1\x0E1\u05B4\v1\x071\u05B6\n1\f1\x0E1\u05B9\v1\x031\x071\u05BC" +
    "\n1\f1\x0E1\u05BF\v1\x031\x071\u05C2\n1\f1\x0E1\u05C5\v1\x031\x071\u05C8" +
    "\n1\f1\x0E1\u05CB\v1\x031\x031\x071\u05CF\n1\f1\x0E1\u05D2\v1\x031\x07" +
    "1\u05D5\n1\f1\x0E1\u05D8\v1\x051\u05DA\n1\x032\x032\x052\u05DE\n2\x03" +
    "2\x032\x052\u05E2\n2\x052\u05E4\n2\x032\x032\x033\x033\x034\x034\x035" +
    "\x035\x035\x035\x035\x035\x075\u05F2\n5\f5\x0E5\u05F5\v5\x075\u05F7\n" +
    "5\f5\x0E5\u05FA\v5\x035\x075\u05FD\n5\f5\x0E5\u0600\v5\x035\x075\u0603" +
    "\n5\f5\x0E5\u0606\v5\x035\x035\x075\u060A\n5\f5\x0E5\u060D\v5\x035\x07" +
    "5\u0610\n5\f5\x0E5\u0613\v5\x055\u0615\n5\x036\x036\x076\u0619\n6\f6\x0E" +
    "6\u061C\v6\x036\x036\x036\x036\x076\u0622\n6\f6\x0E6\u0625\v6\x036\x03" +
    "6\x056\u0629\n6\x037\x037\x037\x037\x037\x037\x057\u0631\n7\x037\x077" +
    "\u0634\n7\f7\x0E7\u0637\v7\x077\u0639\n7\f7\x0E7\u063C\v7\x037\x077\u063F" +
    "\n7\f7\x0E7\u0642\v7\x037\x037\x077\u0646\n7\f7\x0E7\u0649\v7\x037\x07" +
    "7\u064C\n7\f7\x0E7\u064F\v7\x057\u0651\n7\x038\x038\x038\x038\x058\u0657" +
    "\n8\x038\x038\x038\x078\u065C\n8\f8\x0E8\u065F\v8\x039\x039\x079\u0663" +
    "\n9\f9\x0E9\u0666\v9\x039\x039\x079\u066A\n9\f9\x0E9\u066D\v9\x039\x03" +
    "9\x03:\x03:\x03:\x03:\x03:\x03:\x07:\u0677\n:\f:\x0E:\u067A\v:\x07:\u067C" +
    "\n:\f:\x0E:\u067F\v:\x03:\x07:\u0682\n:\f:\x0E:\u0685\v:\x03:\x03:\x07" +
    ":\u0689\n:\f:\x0E:\u068C\v:\x03:\x07:\u068F\n:\f:\x0E:\u0692\v:\x05:\u0694" +
    "\n:\x03;\x03;\x03;\x03;\x03;\x03;\x07;\u069C\n;\f;\x0E;\u069F\v;\x07;" +
    "\u06A1\n;\f;\x0E;\u06A4\v;\x03;\x07;\u06A7\n;\f;\x0E;\u06AA\v;\x03;\x03" +
    ";\x07;\u06AE\n;\f;\x0E;\u06B1\v;\x03;\x07;\u06B4\n;\f;\x0E;\u06B7\v;\x05" +
    ";\u06B9\n;\x03<\x03<\x03<\x03<\x03<\x03<\x07<\u06C1\n<\f<\x0E<\u06C4\v" +
    "<\x07<\u06C6\n<\f<\x0E<\u06C9\v<\x03<\x07<\u06CC\n<\f<\x0E<\u06CF\v<\x03" +
    "<\x03<\x07<\u06D3\n<\f<\x0E<\u06D6\v<\x03<\x07<\u06D9\n<\f<\x0E<\u06DC" +
    "\v<\x05<\u06DE\n<\x03=\x03=\x03=\x03=\x07=\u06E4\n=\f=\x0E=\u06E7\v=\x03" +
    "=\x03=\x07=\u06EB\n=\f=\x0E=\u06EE\v=\x07=\u06F0\n=\f=\x0E=\u06F3\v=\x03" +
    "=\x05=\u06F6\n=\x03=\x07=\u06F9\n=\f=\x0E=\u06FC\v=\x03=\x03=\x07=\u0700" +
    "\n=\f=\x0E=\u0703\v=\x03=\x07=\u0706\n=\f=\x0E=\u0709\v=\x05=\u070B\n" +
    "=\x03>\x03>\x03>\x03>\x06>\u0711\n>\r>\x0E>\u0712\x03>\x03>\x07>\u0717" +
    "\n>\f>\x0E>\u071A\v>\x07>\u071C\n>\f>\x0E>\u071F\v>\x03>\x05>\u0722\n" +
    ">\x03>\x07>\u0725\n>\f>\x0E>\u0728\v>\x03>\x03>\x07>\u072C\n>\f>\x0E>" +
    "\u072F\v>\x03>\x07>\u0732\n>\f>\x0E>\u0735\v>\x05>\u0737\n>\x03?\x03?" +
    "\x03?\x03?\x07?\u073D\n?\f?\x0E?\u0740\v?\x03?\x03?\x07?\u0744\n?\f?\x0E" +
    "?\u0747\v?\x06?\u0749\n?\r?\x0E?\u074A\x03@\x03@\x03@\x03@\x07@\u0751" +
    "\n@\f@\x0E@\u0754\v@\x03@\x03@\x07@\u0758\n@\f@\x0E@\u075B\v@\x06@\u075D" +
    "\n@\r@\x0E@\u075E\x03A\x03A\x03A\x03A\x07A\u0765\nA\fA\x0EA\u0768\vA\x03" +
    "A\x03A\x07A\u076C\nA\fA\x0EA\u076F\vA\x06A\u0771\nA\rA\x0EA\u0772\x03" +
    "B\x03B\x03B\x03B\x07B\u0779\nB\fB\x0EB\u077C\vB\x03B\x03B\x07B\u0780\n" +
    "B\fB\x0EB\u0783\vB\x06B\u0785\nB\rB\x0EB\u0786\x03C\x03C\x03C\x03C\x07" +
    "C\u078D\nC\fC\x0EC\u0790\vC\x03C\x03C\x07C\u0794\nC\fC\x0EC\u0797\vC\x06" +
    "C\u0799\nC\rC\x0EC\u079A\x03D\x03D\x03D\x03D\x07D\u07A1\nD\fD\x0ED\u07A4" +
    "\vD\x03D\x03D\x07D\u07A8\nD\fD\x0ED\u07AB\vD\x06D\u07AD\nD\rD\x0ED\u07AE" +
    "\x03E\x03E\x03E\x03E\x07E\u07B5\nE\fE\x0EE\u07B8\vE\x03E\x03E\x07E\u07BC" +
    "\nE\fE\x0EE\u07BF\vE\x06E\u07C1\nE\rE\x0EE\u07C2\x03F\x03F\x03F\x03F\x07" +
    "F\u07C9\nF\fF\x0EF\u07CC\vF\x03F\x03F\x07F\u07D0\nF\fF\x0EF\u07D3\vF\x06" +
    "F\u07D5\nF\rF\x0EF\u07D6\x03G\x03G\x03G\x03G\x07G\u07DD\nG\fG\x0EG\u07E0" +
    "\vG\x03G\x03G\x07G\u07E4\nG\fG\x0EG\u07E7\vG\x06G\u07E9\nG\rG\x0EG\u07EA" +
    "\x03H\x03H\x03H\x03H\x07H\u07F1\nH\fH\x0EH\u07F4\vH\x03H\x03H\x07H\u07F8" +
    "\nH\fH\x0EH\u07FB\vH\x06H\u07FD\nH\rH\x0EH\u07FE\x03I\x03I\x03I\x03I\x07" +
    "I\u0805\nI\fI\x0EI\u0808\vI\x03I\x03I\x07I\u080C\nI\fI\x0EI\u080F\vI\x06" +
    "I\u0811\nI\rI\x0EI\u0812\x03J\x03J\x03J\x03J\x07J\u0819\nJ\fJ\x0EJ\u081C" +
    "\vJ\x03J\x03J\x07J\u0820\nJ\fJ\x0EJ\u0823\vJ\x06J\u0825\nJ\rJ\x0EJ\u0826" +
    "\x03K\x03K\x03K\x03K\x07K\u082D\nK\fK\x0EK\u0830\vK\x03K\x03K\x07K\u0834" +
    "\nK\fK\x0EK\u0837\vK\x06K\u0839\nK\rK\x0EK\u083A\x03L\x03L\x03L\x03L\x07" +
    "L\u0841\nL\fL\x0EL\u0844\vL\x03L\x03L\x07L\u0848\nL\fL\x0EL\u084B\vL\x06" +
    "L\u084D\nL\rL\x0EL\u084E\x03M\x03M\x03M\x03M\x07M\u0855\nM\fM\x0EM\u0858" +
    "\vM\x03M\x03M\x07M\u085C\nM\fM\x0EM\u085F\vM\x06M\u0861\nM\rM\x0EM\u0862" +
    "\x03N\x03N\x03N\x03N\x07N\u0869\nN\fN\x0EN\u086C\vN\x03N\x03N\x07N\u0870" +
    "\nN\fN\x0EN\u0873\vN\x06N\u0875\nN\rN\x0EN\u0876\x03O\x03O\x03O\x03O\x07" +
    "O\u087D\nO\fO\x0EO\u0880\vO\x03O\x03O\x07O\u0884\nO\fO\x0EO\u0887\vO\x06" +
    "O\u0889\nO\rO\x0EO\u088A\x03P\x03P\x03P\x03P\x07P\u0891\nP\fP\x0EP\u0894" +
    "\vP\x03P\x03P\x07P\u0898\nP\fP\x0EP\u089B\vP\x06P\u089D\nP\rP\x0EP\u089E" +
    "\x03Q\x03Q\x03Q\x03Q\x07Q\u08A5\nQ\fQ\x0EQ\u08A8\vQ\x03Q\x03Q\x07Q\u08AC" +
    "\nQ\fQ\x0EQ\u08AF\vQ\x06Q\u08B1\nQ\rQ\x0EQ\u08B2\x03R\x03R\x03R\x03R\x07" +
    "R\u08B9\nR\fR\x0ER\u08BC\vR\x03R\x03R\x07R\u08C0\nR\fR\x0ER\u08C3\vR\x06" +
    "R\u08C5\nR\rR\x0ER\u08C6\x03S\x03S\x03S\x03S\x07S\u08CD\nS\fS\x0ES\u08D0" +
    "\vS\x03S\x03S\x07S";
bitmarkParser._serializedATNSegment1 = "\u08D4\nS\fS\x0ES\u08D7\vS\x06S\u08D9\nS\rS\x0ES\u08DA\x03T\x03T\x03T" +
    "\x03T\x07T\u08E1\nT\fT\x0ET\u08E4\vT\x03T\x03T\x07T\u08E8\nT\fT\x0ET\u08EB" +
    "\vT\x06T\u08ED\nT\rT\x0ET\u08EE\x03U\x03U\x03U\x03U\x07U\u08F5\nU\fU\x0E" +
    "U\u08F8\vU\x03U\x03U\x07U\u08FC\nU\fU\x0EU\u08FF\vU\x06U\u0901\nU\rU\x0E" +
    "U\u0902\x03V\x03V\x03V\x03V\x07V\u0909\nV\fV\x0EV\u090C\vV\x03V\x03V\x07" +
    "V\u0910\nV\fV\x0EV\u0913\vV\x06V\u0915\nV\rV\x0EV\u0916\x03W\x03W\x03" +
    "W\x03W\x07W\u091D\nW\fW\x0EW\u0920\vW\x03W\x03W\x07W\u0924\nW\fW\x0EW" +
    "\u0927\vW\x06W\u0929\nW\rW\x0EW\u092A\x03X\x03X\x03X\x03X\x07X\u0931\n" +
    "X\fX\x0EX\u0934\vX\x03X\x03X\x07X\u0938\nX\fX\x0EX\u093B\vX\x06X\u093D" +
    "\nX\rX\x0EX\u093E\x03Y\x03Y\x03Y\x03Y\x07Y\u0945\nY\fY\x0EY\u0948\vY\x03" +
    "Y\x03Y\x07Y\u094C\nY\fY\x0EY\u094F\vY\x06Y\u0951\nY\rY\x0EY\u0952\x03" +
    "Z\x03Z\x03Z\x03Z\x07Z\u0959\nZ\fZ\x0EZ\u095C\vZ\x03Z\x03Z\x07Z\u0960\n" +
    "Z\fZ\x0EZ\u0963\vZ\x06Z\u0965\nZ\rZ\x0EZ\u0966\x03[\x03[\x03[\x03[\x07" +
    "[\u096D\n[\f[\x0E[\u0970\v[\x03[\x03[\x07[\u0974\n[\f[\x0E[\u0977\v[\x06" +
    "[\u0979\n[\r[\x0E[\u097A\x03\\\x03\\\x03\\\x03\\\x07\\\u0981\n\\\f\\\x0E" +
    "\\\u0984\v\\\x03\\\x03\\\x07\\\u0988\n\\\f\\\x0E\\\u098B\v\\\x06\\\u098D" +
    "\n\\\r\\\x0E\\\u098E\x03]\x03]\x03]\x03]\x07]\u0995\n]\f]\x0E]\u0998\v" +
    "]\x03]\x03]\x07]\u099C\n]\f]\x0E]\u099F\v]\x06]\u09A1\n]\r]\x0E]\u09A2" +
    "\x03^\x03^\x03^\x03^\x07^\u09A9\n^\f^\x0E^\u09AC\v^\x03^\x03^\x07^\u09B0" +
    "\n^\f^\x0E^\u09B3\v^\x06^\u09B5\n^\r^\x0E^\u09B6\x03_\x03_\x03_\x03_\x07" +
    "_\u09BD\n_\f_\x0E_\u09C0\v_\x03_\x03_\x07_\u09C4\n_\f_\x0E_\u09C7\v_\x06" +
    "_\u09C9\n_\r_\x0E_\u09CA\x03`\x03`\x03`\x03`\x07`\u09D1\n`\f`\x0E`\u09D4" +
    "\v`\x03`\x03`\x07`\u09D8\n`\f`\x0E`\u09DB\v`\x06`\u09DD\n`\r`\x0E`\u09DE" +
    "\x03a\x03a\x03a\x03a\x07a\u09E5\na\fa\x0Ea\u09E8\va\x03a\x03a\x07a\u09EC" +
    "\na\fa\x0Ea\u09EF\va\x06a\u09F1\na\ra\x0Ea\u09F2\x03b\x03b\x03b\x03b\x07" +
    "b\u09F9\nb\fb\x0Eb\u09FC\vb\x03b\x03b\x07b\u0A00\nb\fb\x0Eb\u0A03\vb\x06" +
    "b\u0A05\nb\rb\x0Eb\u0A06\x03c\x03c\x03c\x03c\x07c\u0A0D\nc\fc\x0Ec\u0A10" +
    "\vc\x03c\x03c\x07c\u0A14\nc\fc\x0Ec\u0A17\vc\x06c\u0A19\nc\rc\x0Ec\u0A1A" +
    "\x03d\x03d\x03d\x03d\x07d\u0A21\nd\fd\x0Ed\u0A24\vd\x03d\x03d\x07d\u0A28" +
    "\nd\fd\x0Ed\u0A2B\vd\x06d\u0A2D\nd\rd\x0Ed\u0A2E\x03e\x03e\x03e\x03e\x07" +
    "e\u0A35\ne\fe\x0Ee\u0A38\ve\x03e\x03e\x07e\u0A3C\ne\fe\x0Ee\u0A3F\ve\x06" +
    "e\u0A41\ne\re\x0Ee\u0A42\x03f\x03f\x03f\x03f\x07f\u0A49\nf\ff\x0Ef\u0A4C" +
    "\vf\x03f\x03f\x07f\u0A50\nf\ff\x0Ef\u0A53\vf\x06f\u0A55\nf\rf\x0Ef\u0A56" +
    "\x03g\x03g\x03g\x03g\x07g\u0A5D\ng\fg\x0Eg\u0A60\vg\x03g\x03g\x07g\u0A64" +
    "\ng\fg\x0Eg\u0A67\vg\x06g\u0A69\ng\rg\x0Eg\u0A6A\x03h\x03h\x03h\x03h\x07" +
    "h\u0A71\nh\fh\x0Eh\u0A74\vh\x03h\x03h\x07h\u0A78\nh\fh\x0Eh\u0A7B\vh\x06" +
    "h\u0A7D\nh\rh\x0Eh\u0A7E\x03i\x03i\x03i\x03i\x07i\u0A85\ni\fi\x0Ei\u0A88" +
    "\vi\x03i\x03i\x07i\u0A8C\ni\fi\x0Ei\u0A8F\vi\x06i\u0A91\ni\ri\x0Ei\u0A92" +
    "\x03j\x03j\x03j\x03j\x07j\u0A99\nj\fj\x0Ej\u0A9C\vj\x03j\x03j\x07j\u0AA0" +
    "\nj\fj\x0Ej\u0AA3\vj\x06j\u0AA5\nj\rj\x0Ej\u0AA6\x03k\x03k\x03k\x03k\x07" +
    "k\u0AAD\nk\fk\x0Ek\u0AB0\vk\x03k\x03k\x07k\u0AB4\nk\fk\x0Ek\u0AB7\vk\x06" +
    "k\u0AB9\nk\rk\x0Ek\u0ABA\x03l\x03l\x03l\x03l\x07l\u0AC1\nl\fl\x0El\u0AC4" +
    "\vl\x03l\x03l\x07l\u0AC8\nl\fl\x0El\u0ACB\vl\x06l\u0ACD\nl\rl\x0El\u0ACE" +
    "\x03m\x03m\x03m\x03m\x07m\u0AD5\nm\fm\x0Em\u0AD8\vm\x03m\x03m\x07m\u0ADC" +
    "\nm\fm\x0Em\u0ADF\vm\x06m\u0AE1\nm\rm\x0Em\u0AE2\x03n\x03n\x03n\x03n\x07" +
    "n\u0AE9\nn\fn\x0En\u0AEC\vn\x03n\x03n\x07n\u0AF0\nn\fn\x0En\u0AF3\vn\x06" +
    "n\u0AF5\nn\rn\x0En\u0AF6\x03o\x03o\x03o\x03o\x07o\u0AFD\no\fo\x0Eo\u0B00" +
    "\vo\x03o\x03o\x07o\u0B04\no\fo\x0Eo\u0B07\vo\x06o\u0B09\no\ro\x0Eo\u0B0A" +
    "\x03p\x03p\x03p\x03p\x07p\u0B11\np\fp\x0Ep\u0B14\vp\x03p\x03p\x07p\u0B18" +
    "\np\fp\x0Ep\u0B1B\vp\x06p\u0B1D\np\rp\x0Ep\u0B1E\x03q\x03q\x03q\x03q\x07" +
    "q\u0B25\nq\fq\x0Eq\u0B28\vq\x03q\x03q\x07q\u0B2C\nq\fq\x0Eq\u0B2F\vq\x06" +
    "q\u0B31\nq\rq\x0Eq\u0B32\x03r\x03r\x03r\x03r\x07r\u0B39\nr\fr\x0Er\u0B3C" +
    "\vr\x03r\x03r\x07r\u0B40\nr\fr\x0Er\u0B43\vr\x06r\u0B45\nr\rr\x0Er\u0B46" +
    "\x03s\x03s\x03s\x03s\x07s\u0B4D\ns\fs\x0Es\u0B50\vs\x03s\x03s\x07s\u0B54" +
    "\ns\fs\x0Es\u0B57\vs\x06s\u0B59\ns\rs\x0Es\u0B5A\x03t\x03t\x03t\x03t\x07" +
    "t\u0B61\nt\ft\x0Et\u0B64\vt\x03t\x03t\x07t\u0B68\nt\ft\x0Et\u0B6B\vt\x06" +
    "t\u0B6D\nt\rt\x0Et\u0B6E\x03u\x03u\x03u\x03u\x07u\u0B75\nu\fu\x0Eu\u0B78" +
    "\vu\x03u\x03u\x07u\u0B7C\nu\fu\x0Eu\u0B7F\vu\x06u\u0B81\nu\ru\x0Eu\u0B82" +
    "\x03v\x03v\x03v\x03v\x07v\u0B89\nv\fv\x0Ev\u0B8C\vv\x03v\x03v\x07v\u0B90" +
    "\nv\fv\x0Ev\u0B93\vv\x06v\u0B95\nv\rv\x0Ev\u0B96\x03w\x03w\x03w\x03w\x07" +
    "w\u0B9D\nw\fw\x0Ew\u0BA0\vw\x03w\x03w\x07w\u0BA4\nw\fw\x0Ew\u0BA7\vw\x06" +
    "w\u0BA9\nw\rw\x0Ew\u0BAA\x03x\x03x\x03x\x03x\x07x\u0BB1\nx\fx\x0Ex\u0BB4" +
    "\vx\x03x\x03x\x07x\u0BB8\nx\fx\x0Ex\u0BBB\vx\x06x\u0BBD\nx\rx\x0Ex\u0BBE" +
    "\x03y\x03y\x03y\x03y\x07y\u0BC5\ny\fy\x0Ey\u0BC8\vy\x03y\x03y\x07y\u0BCC" +
    "\ny\fy\x0Ey\u0BCF\vy\x06y\u0BD1\ny\ry\x0Ey\u0BD2\x03z\x03z\x03z\x03z\x07" +
    "z\u0BD9\nz\fz\x0Ez\u0BDC\vz\x03z\x03z\x07z\u0BE0\nz\fz\x0Ez\u0BE3\vz\x06" +
    "z\u0BE5\nz\rz\x0Ez\u0BE6\x03{\x03{\x03{\x03{\x07{\u0BED\n{\f{\x0E{\u0BF0" +
    "\v{\x03{\x03{\x07{\u0BF4\n{\f{\x0E{\u0BF7\v{\x06{\u0BF9\n{\r{\x0E{\u0BFA" +
    "\x03|\x03|\x03|\x03|\x07|\u0C01\n|\f|\x0E|\u0C04\v|\x03|\x03|\x07|\u0C08" +
    "\n|\f|\x0E|\u0C0B\v|\x06|\u0C0D\n|\r|\x0E|\u0C0E\x03}\x03}\x03}\x03}\x07" +
    "}\u0C15\n}\f}\x0E}\u0C18\v}\x03}\x03}\x07}\u0C1C\n}\f}\x0E}\u0C1F\v}\x06" +
    "}\u0C21\n}\r}\x0E}\u0C22\x03~\x03~\x03~\x03~\x07~\u0C29\n~\f~\x0E~\u0C2C" +
    "\v~\x03~\x03~\x07~\u0C30\n~\f~\x0E~\u0C33\v~\x06~\u0C35\n~\r~\x0E~\u0C36" +
    "\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x07\x7F\u0C3D\n\x7F\f\x7F\x0E\x7F\u0C40" +
    "\v\x7F\x03\x7F\x03\x7F\x07\x7F\u0C44\n\x7F\f\x7F\x0E\x7F\u0C47\v\x7F\x06" +
    "\x7F\u0C49\n\x7F\r\x7F\x0E\x7F\u0C4A\x03\x80\x03\x80\x03\x80\x03\x80\x07" +
    "\x80\u0C51\n\x80\f\x80\x0E\x80\u0C54\v\x80\x03\x80\x03\x80\x07\x80\u0C58" +
    "\n\x80\f\x80\x0E\x80\u0C5B\v\x80\x06\x80\u0C5D\n\x80\r\x80\x0E\x80\u0C5E" +
    "\x03\x81\x03\x81\x03\x81\x03\x81\x07\x81\u0C65\n\x81\f\x81\x0E\x81\u0C68" +
    "\v\x81\x03\x81\x03\x81\x07\x81\u0C6C\n\x81\f\x81\x0E\x81\u0C6F\v\x81\x06" +
    "\x81\u0C71\n\x81\r\x81\x0E\x81\u0C72\x03\x82\x03\x82\x03\x82\x03\x82\x07" +
    "\x82\u0C79\n\x82\f\x82\x0E\x82\u0C7C\v\x82\x03\x82\x03\x82\x07\x82\u0C80" +
    "\n\x82\f\x82\x0E\x82\u0C83\v\x82\x06\x82\u0C85\n\x82\r\x82\x0E\x82\u0C86" +
    "\x03\x83\x03\x83\x03\x83\x03\x83\x07\x83\u0C8D\n\x83\f\x83\x0E\x83\u0C90" +
    "\v\x83\x03\x83\x03\x83\x07\x83\u0C94\n\x83\f\x83\x0E\x83\u0C97\v\x83\x06" +
    "\x83\u0C99\n\x83\r\x83\x0E\x83\u0C9A\x03\x84\x03\x84\x03\x84\x03\x84\x07" +
    "\x84\u0CA1\n\x84\f\x84\x0E\x84\u0CA4\v\x84\x03\x84\x03\x84\x07\x84\u0CA8" +
    "\n\x84\f\x84\x0E\x84\u0CAB\v\x84\x06\x84\u0CAD\n\x84\r\x84\x0E\x84\u0CAE" +
    "\x03\x85\x03\x85\x03\x85\x03\x85\x07\x85\u0CB5\n\x85\f\x85\x0E\x85\u0CB8" +
    "\v\x85\x03\x85\x03\x85\x07\x85\u0CBC\n\x85\f\x85\x0E\x85\u0CBF\v\x85\x06" +
    "\x85\u0CC1\n\x85\r\x85\x0E\x85\u0CC2\x03\x86\x03\x86\x03\x86\x03\x86\x07" +
    "\x86\u0CC9\n\x86\f\x86\x0E\x86\u0CCC\v\x86\x03\x86\x03\x86\x07\x86\u0CD0" +
    "\n\x86\f\x86\x0E\x86\u0CD3\v\x86\x06\x86\u0CD5\n\x86\r\x86\x0E\x86\u0CD6" +
    "\x03\x87\x03\x87\x03\x87\x03\x87\x07\x87\u0CDD\n\x87\f\x87\x0E\x87\u0CE0" +
    "\v\x87\x03\x87\x03\x87\x07\x87\u0CE4\n\x87\f\x87\x0E\x87\u0CE7\v\x87\x06" +
    "\x87\u0CE9\n\x87\r\x87\x0E\x87\u0CEA\x03\x88\x03\x88\x03\x88\x03\x88\x07" +
    "\x88\u0CF1\n\x88\f\x88\x0E\x88\u0CF4\v\x88\x03\x88\x03\x88\x07\x88\u0CF8" +
    "\n\x88\f\x88\x0E\x88\u0CFB\v\x88\x06\x88\u0CFD\n\x88\r\x88\x0E\x88\u0CFE" +
    "\x03\x89\x03\x89\x03\x89\x03\x89\x07\x89\u0D05\n\x89\f\x89\x0E\x89\u0D08" +
    "\v\x89\x03\x89\x03\x89\x07\x89\u0D0C\n\x89\f\x89\x0E\x89\u0D0F\v\x89\x06" +
    "\x89\u0D11\n\x89\r\x89\x0E\x89\u0D12\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x07" +
    "\x8A\u0D19\n\x8A\f\x8A\x0E\x8A\u0D1C\v\x8A\x03\x8A\x03\x8A\x07\x8A\u0D20" +
    "\n\x8A\f\x8A\x0E\x8A\u0D23\v\x8A\x06\x8A\u0D25\n\x8A\r\x8A\x0E\x8A\u0D26" +
    "\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x07\x8B\u0D2D\n\x8B\f\x8B\x0E\x8B\u0D30" +
    "\v\x8B\x03\x8B\x03\x8B\x07\x8B\u0D34\n\x8B\f\x8B\x0E\x8B\u0D37\v\x8B\x06" +
    "\x8B\u0D39\n\x8B\r\x8B\x0E\x8B\u0D3A\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x07" +
    "\x8C\u0D41\n\x8C\f\x8C\x0E\x8C\u0D44\v\x8C\x03\x8C\x03\x8C\x07\x8C\u0D48" +
    "\n\x8C\f\x8C\x0E\x8C\u0D4B\v\x8C\x06\x8C\u0D4D\n\x8C\r\x8C\x0E\x8C\u0D4E" +
    "\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x07\x8D\u0D55\n\x8D\f\x8D\x0E\x8D\u0D58" +
    "\v\x8D\x03\x8D\x03\x8D\x07\x8D\u0D5C\n\x8D\f\x8D\x0E\x8D\u0D5F\v\x8D\x06" +
    "\x8D\u0D61\n\x8D\r\x8D\x0E\x8D\u0D62\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x07" +
    "\x8E\u0D69\n\x8E\f\x8E\x0E\x8E\u0D6C\v\x8E\x03\x8E\x03\x8E\x07\x8E\u0D70" +
    "\n\x8E\f\x8E\x0E\x8E\u0D73\v\x8E\x06\x8E\u0D75\n\x8E\r\x8E\x0E\x8E\u0D76" +
    "\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x07\x8F\u0D7D\n\x8F\f\x8F\x0E\x8F\u0D80" +
    "\v\x8F\x03\x8F\x03\x8F\x07\x8F\u0D84\n\x8F\f\x8F\x0E\x8F\u0D87\v\x8F\x06" +
    "\x8F\u0D89\n\x8F\r\x8F\x0E\x8F\u0D8A\x03\x90\x03\x90\x03\x90\x03\x90\x07" +
    "\x90\u0D91\n\x90\f\x90\x0E\x90\u0D94\v\x90\x03\x90\x03\x90\x07\x90\u0D98" +
    "\n\x90\f\x90\x0E\x90\u0D9B\v\x90\x06\x90\u0D9D\n\x90\r\x90\x0E\x90\u0D9E" +
    "\x03\x91\x03\x91\x03\x91\x03\x91\x07\x91\u0DA5\n\x91\f\x91\x0E\x91\u0DA8" +
    "\v\x91\x03\x91\x03\x91\x07\x91\u0DAC\n\x91\f\x91\x0E\x91\u0DAF\v\x91\x06" +
    "\x91\u0DB1\n\x91\r\x91\x0E\x91\u0DB2\x03\x92\x03\x92\x03\x92\x03\x92\x07" +
    "\x92\u0DB9\n\x92\f\x92\x0E\x92\u0DBC\v\x92\x03\x92\x03\x92\x07\x92\u0DC0" +
    "\n\x92\f\x92\x0E\x92\u0DC3\v\x92\x06\x92\u0DC5\n\x92\r\x92\x0E\x92\u0DC6" +
    "\x03\x93\x03\x93\x03\x93\x03\x93\x07\x93\u0DCD\n\x93\f\x93\x0E\x93\u0DD0" +
    "\v\x93\x03\x93\x03\x93\x07\x93\u0DD4\n\x93\f\x93\x0E\x93\u0DD7\v\x93\x06" +
    "\x93\u0DD9\n\x93\r\x93\x0E\x93\u0DDA\x03\x94\x03\x94\x03\x94\x03\x94\x07" +
    "\x94\u0DE1\n\x94\f\x94\x0E\x94\u0DE4\v\x94\x03\x94\x03\x94\x07\x94\u0DE8" +
    "\n\x94\f\x94\x0E\x94\u0DEB\v\x94\x06\x94\u0DED\n\x94\r\x94\x0E\x94\u0DEE" +
    "\x03\x95\x03\x95\x03\x95\x03\x95\x07\x95\u0DF5\n\x95\f\x95\x0E\x95\u0DF8" +
    "\v\x95\x03\x95\x03\x95\x07\x95\u0DFC\n\x95\f\x95\x0E\x95\u0DFF\v\x95\x06" +
    "\x95\u0E01\n\x95\r\x95\x0E\x95\u0E02\x03\x96\x03\x96\x03\x96\x03\x96\x07" +
    "\x96\u0E09\n\x96\f\x96\x0E\x96\u0E0C\v\x96\x03\x96\x03\x96\x07\x96\u0E10" +
    "\n\x96\f\x96\x0E\x96\u0E13\v\x96\x06\x96\u0E15\n\x96\r\x96\x0E\x96\u0E16" +
    "\x03\x97\x03\x97\x03\x97\x03\x97\x07\x97\u0E1D\n\x97\f\x97\x0E\x97\u0E20" +
    "\v\x97\x03\x97\x03\x97\x07\x97\u0E24\n\x97\f\x97\x0E\x97\u0E27\v\x97\x06" +
    "\x97\u0E29\n\x97\r\x97\x0E\x97\u0E2A\x03\x98\x03\x98\x03\x98\x03\x98\x07" +
    "\x98\u0E31\n\x98\f\x98\x0E\x98\u0E34\v\x98\x03\x98\x03\x98\x07\x98\u0E38" +
    "\n\x98\f\x98\x0E\x98\u0E3B\v\x98\x06\x98\u0E3D\n\x98\r\x98\x0E\x98\u0E3E" +
    "\x03\x99\x03\x99\x03\x99\x03\x99\x07\x99\u0E45\n\x99\f\x99\x0E\x99\u0E48" +
    "\v\x99\x03\x99\x03\x99\x07\x99\u0E4C\n\x99\f\x99\x0E\x99\u0E4F\v\x99\x06" +
    "\x99\u0E51\n\x99\r\x99\x0E\x99\u0E52\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x07" +
    "\x9A\u0E59\n\x9A\f\x9A\x0E\x9A\u0E5C\v\x9A\x03\x9A\x03\x9A\x07\x9A\u0E60" +
    "\n\x9A\f\x9A\x0E\x9A\u0E63\v\x9A\x06\x9A\u0E65\n\x9A\r\x9A\x0E\x9A\u0E66" +
    "\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x07\x9B\u0E6D\n\x9B\f\x9B\x0E\x9B\u0E70" +
    "\v\x9B\x03\x9B\x03\x9B\x07\x9B\u0E74\n\x9B\f\x9B\x0E\x9B\u0E77\v\x9B\x06" +
    "\x9B\u0E79\n\x9B\r\x9B\x0E\x9B\u0E7A\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03" +
    "\x9C\x03\x9C\x03\x9C\x03\x9C\x07\x9C\u0E85\n\x9C\f\x9C\x0E\x9C\u0E88\v" +
    "\x9C\x06\x9C\u0E8A\n\x9C\r\x9C\x0E\x9C\u0E8B\x03\x9C\x03\x9C\x07\x9C\u0E90" +
    "\n\x9C\f\x9C\x0E\x9C\u0E93\v\x9C\x03\x9C\x03\x9C\x07\x9C\u0E97\n\x9C\f" +
    "\x9C\x0E\x9C\u0E9A\v\x9C\x03\x9C\x07\x9C\u0E9D\n\x9C\f\x9C\x0E\x9C\u0EA0" +
    "\v\x9C\x05\x9C\u0EA2\n\x9C\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x03" +
    "\x9D\x03\x9D\x06\x9D\u0EAB\n\x9D\r\x9D\x0E\x9D\u0EAC\x03\x9E\x03\x9E\x03" +
    "\x9E\x03\x9E\x07\x9E\u0EB3\n\x9E\f\x9E\x0E\x9E\u0EB6\v\x9E\x03\x9E\x03" +
    "\x9E\x07\x9E\u0EBA\n\x9E\f\x9E\x0E\x9E\u0EBD\v\x9E\x07\x9E\u0EBF\n\x9E" +
    "\f\x9E\x0E\x9E\u0EC2\v\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x06\x9E\u0EC8" +
    "\n\x9E\r\x9E\x0E\x9E\u0EC9\x06\x9E\u0ECC\n\x9E\r\x9E\x0E\x9E\u0ECD\x03" +
    "\x9E\x03\x9E\x07\x9E\u0ED2\n\x9E\f\x9E\x0E\x9E\u0ED5\v\x9E\x03\x9E\x03" +
    "\x9E\x07\x9E\u0ED9\n\x9E\f\x9E\x0E\x9E\u0EDC\v\x9E\x03\x9E\x07\x9E\u0EDF" +
    "\n\x9E\f\x9E\x0E\x9E\u0EE2\v\x9E\x05\x9E\u0EE4\n\x9E\x03\x9F\x03\x9F\x03" +
    "\x9F\x03\x9F\x05\x9F\u0EEA\n\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x07\xA0" +
    "\u0EF0\n\xA0\f\xA0\x0E\xA0\u0EF3\v\xA0\x03\xA0\x03\xA0\x07\xA0\u0EF7\n" +
    "\xA0\f\xA0\x0E\xA0\u0EFA\v\xA0\x07\xA0\u0EFC\n\xA0\f\xA0\x0E\xA0\u0EFF" +
    "\v\xA0\x03\xA0\x03\xA0\x05\xA0\u0F03\n\xA0\x03\xA0\x07\xA0\u0F06\n\xA0" +
    "\f\xA0\x0E\xA0\u0F09\v\xA0\x03\xA0\x06\xA0\u0F0C\n\xA0\r\xA0\x0E\xA0\u0F0D" +
    "\x06\xA0\u0F10\n\xA0\r\xA0\x0E\xA0\u0F11\x03\xA0\x03\xA0\x03\xA1\x03\xA1" +
    "\x03\xA1\x03\xA1\x07\xA1\u0F1A\n\xA1\f\xA1\x0E\xA1\u0F1D\v\xA1\x03\xA1" +
    "\x03\xA1\x07\xA1\u0F21\n\xA1\f\xA1\x0E\xA1\u0F24\v\xA1\x07\xA1\u0F26\n" +
    "\xA1\f\xA1\x0E\xA1\u0F29\v\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x06\xA1" +
    "\u0F2F\n\xA1\r\xA1\x0E\xA1\u0F30\x06\xA1\u0F33\n\xA1\r\xA1\x0E\xA1\u0F34" +
    "\x03\xA1\x03\xA1\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x07\xA2\u0F3D\n\xA2\f" +
    "\xA2\x0E\xA2\u0F40\v\xA2\x03\xA2\x03\xA2\x07\xA2\u0F44\n\xA2\f\xA2\x0E" +
    "\xA2\u0F47\v\xA2\x07\xA2\u0F49\n\xA2\f\xA2\x0E\xA2\u0F4C\v\xA2\x03\xA2" +
    "\x03\xA2\x03\xA2\x03\xA2\x06\xA2\u0F52\n\xA2\r\xA2\x0E\xA2\u0F53\x06\xA2" +
    "\u0F56\n\xA2\r\xA2\x0E\xA2\u0F57\x03\xA2\x03\xA2\x03\xA3\x03\xA3\x03\xA3" +
    "\x03\xA3\x07\xA3\u0F60\n\xA3\f\xA3\x0E\xA3\u0F63\v\xA3\x03\xA3\x03\xA3" +
    "\x07\xA3\u0F67\n\xA3\f\xA3\x0E\xA3\u0F6A\v\xA3\x07\xA3\u0F6C\n\xA3\f\xA3" +
    "\x0E\xA3\u0F6F\v\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x06\xA3\u0F75\n\xA3" +
    "\r\xA3\x0E\xA3\u0F76\x06\xA3\u0F79\n\xA3\r\xA3\x0E\xA3\u0F7A\x03\xA3\x03" +
    "\xA3\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x07\xA4\u0F83\n\xA4\f\xA4\x0E\xA4" +
    "\u0F86\v\xA4\x03\xA4\x03\xA4\x07\xA4\u0F8A\n\xA4\f\xA4\x0E\xA4\u0F8D\v" +
    "\xA4\x07\xA4\u0F8F\n\xA4\f\xA4\x0E\xA4\u0F92\v\xA4\x03\xA4\x03\xA4\x03" +
    "\xA4\x07\xA4\u0F97\n\xA4\f\xA4\x0E\xA4\u0F9A\v\xA4\x03\xA4\x06\xA4\u0F9D" +
    "\n\xA4\r\xA4\x0E\xA4\u0F9E\x06\xA4\u0FA1\n\xA4\r\xA4\x0E\xA4\u0FA2\x03" +
    "\xA4\x03\xA4\x07\xA4\u0FA7\n\xA4\f\xA4\x0E\xA4\u0FAA\v\xA4\x03\xA4\x03" +
    "\xA4\x07\xA4\u0FAE\n\xA4\f\xA4\x0E\xA4\u0FB1\v\xA4\x03\xA4\x07\xA4\u0FB4" +
    "\n\xA4\f\xA4\x0E\xA4\u0FB7\v\xA4\x05\xA4\u0FB9\n\xA4\x03\xA5\x06\xA5\u0FBC" +
    "\n\xA5\r\xA5\x0E\xA5\u0FBD\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA7\x07" +
    "\xA7\u0FC5\n\xA7\f\xA7\x0E\xA7\u0FC8\v\xA7\x03\xA7\x03\xA7\x03\xA7\x07" +
    "\xA7\u0FCD\n\xA7\f\xA7\x0E\xA7\u0FD0\v\xA7\x03\xA8\x03\xA8\x03\xA9\x03" +
    "\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x05\xA9\u0FDD" +
    "\n\xA9\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x05\xAA\u0FE4\n\xAA\x03" +
    "\xAB\x03\xAB\x03\xAB\x05\xAB\u0FE9\n\xAB\x03\xAB\x03\xAB\x05\xAB\u0FED" +
    "\n\xAB\x03\xAB\x03\xAB\x05\xAB\u0FF1\n\xAB\x03\xAB\x05\xAB\u0FF4\n\xAB" +
    "\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0FF9\n\xAC\x03\xAD\x03\xAD\x03\xAE\x03" +
    "\xAE\x03\xAF\x03\xAF\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x03" +
    "\xB3\x03\xB3\x03\xB4\x03\xB4\x03\xB5\x03\xB5\x03\xB6\x03\xB6\x03\xB6\x05" +
    "\xB6\u1010\n\xB6\x03\xB6\x03\xB6\x03\xB6\x05\xB6\u1015\n\xB6\x03\xB6\x03" +
    "\xB6\x03\xB6\x05\xB6\u101A\n\xB6\x05\xB6\u101C\n\xB6\x03\xB7\x03\xB7\x03" +
    "\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u1026\n\xB8\x03\xB9" +
    "\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u1030" +
    "\n\xB9\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA" +
    "\x05\xBA\u103A\n\xBA\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u1040\n\xBB" +
    "\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u1047\n\xBB\x03\xBC\x03" +
    "\xBC\x07\xBC\u104B\n\xBC\f\xBC\x0E\xBC\u104E\v\xBC\x03\xBD\x03\xBD\x03" +
    "\xBD\x07\xBD\u1053\n\xBD\f\xBD\x0E\xBD\u1056\v\xBD\x03\xBD\x03\xBD\x03" +
    "\xBD\x03\xBE\x03\xBE\x07\xBE\u105D\n\xBE\f\xBE\x0E\xBE\u1060\v\xBE\x03" +
    "\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u106A" +
    "\n\xBF\x03\xC0\x03\xC0\x07\xC0\u106E\n\xC0\f\xC0\x0E\xC0\u1071\v\xC0\x03" +
    "\xC0\x03\xC0\x05\xC0\u1075\n\xC0\x03\xC1\x03\xC1\x03\xC1\x07\xC1\u107A" +
    "\n\xC1\f\xC1\x0E\xC1\u107D\v\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC2\x03\xC2" +
    "\x03\xC2\x05\xC2\u1085\n\xC2\x03\xC2\x03\xC2\x05\xC2\u1089\n\xC2\x03\xC2" +
    "\x03\xC2\x05\xC2\u108D\n\xC2\x03\xC2\x05\xC2\u1090\n\xC2\x03\xC3\x03\xC3" +
    "\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3" +
    "\x07\xC3\u109D\n\xC3\f\xC3\x0E\xC3\u10A0\v\xC3\x03\xC3\x05\xC3\u10A3\n" +
    "\xC3\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03" +
    "\xC4\x03\xC4\x03\xC4\x07\xC4\u10B0\n\xC4\f\xC4\x0E\xC4\u10B3\v\xC4\x03" +
    "\xC4\x05\xC4\u10B6\n\xC4\x03\xC5\x03\xC5\x07\xC5\u10BA\n\xC5\f\xC5\x0E" +
    "\xC5\u10BD\v\xC5\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6" +
    "\x03\xC6\x05\xC6\u10C7\n\xC6\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u10CC\n\xC7" +
    "\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u10D1\n\xC7\x05\xC7\u10D3\n\xC7\x03\xC8" +
    "\x03\xC8\x03\xC8\x05\xC8\u10D8\n\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u10DD" +
    "\n\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u10E2\n\xC8\x05\xC8\u10E4\n\xC8" +
    "\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u10E9\n\xC9\x03\xC9\x03\xC9\x07\xC9\u10ED" +
    "\n\xC9\f\xC9\x0E\xC9\u10F0\v\xC9\x03\xC9\x03\xC9\x06\xC9\u10F4\n\xC9\r" +
    "\xC9\x0E\xC9\u10F5\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03" +
    "\xC9\x07\xC9\u10FF\n\xC9\f\xC9\x0E\xC9\u1102\v\xC9\x03\xC9\x05\xC9\u1105" +
    "\n\xC9\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCB\x03\xCB\x03\xCC\x03\xCC" +
    "\x03\xCC\x07\xCC\u1110\n\xCC\f\xCC\x0E\xCC\u1113\v\xCC\x03\xCC\x05\xCC" +
    "\u1116\n\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x07\xCC\u111C\n\xCC\f\xCC" +
    "\x0E\xCC\u111F\v\xCC\x03\xCC\x03\xCC\x07\xCC\u1123\n\xCC\f\xCC\x0E\xCC" +
    "\u1126\v\xCC\x03\xCC\x05\xCC\u1129\n\xCC\x05\xCC\u112B\n\xCC\x03\xCD\x03" +
    "\xCD\x03\xCD\x03\xCD\x07\xCD\u1131\n\xCD\f\xCD\x0E\xCD\u1134\v\xCD\x03" +
    "\xCD\x03\xCD\x03\xCE\x03\xCE\x05\xCE\u113A\n\xCE\x03\xCE\x03\xCE\x03\xCE" +
    "\x05\xCE\u113F\n\xCE\x03\xCE\x05\xCE\u1142\n\xCE\x03\xCF\x03\xCF\x03\xCF" +
    "\x03\xCF\x05\xCF\u1148\n\xCF\x03\xCF\x05\xCF\u114B\n\xCF\x03\xD0\x03\xD0" +
    "\x05\xD0\u114F\n\xD0\x03\xD0\x03\xD0\x03\xD0\x07\xD0\u1154\n\xD0\f\xD0" +
    "\x0E\xD0\u1157\v\xD0\x07\xD0\u1159\n\xD0\f\xD0\x0E\xD0\u115C\v\xD0\x03" +
    "\xD0\x07\xD0\u115F\n\xD0\f\xD0\x0E\xD0\u1162\v\xD0\x07\xD0\u1164\n";
bitmarkParser._serializedATNSegment2 = "\xD0\f\xD0\x0E\xD0\u1167\v\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0" +
    "\x07\xD0\u116E\n\xD0\f\xD0\x0E\xD0\u1171\v\xD0\x03\xD0\x05\xD0\u1174\n" +
    "\xD0\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x06\xD1\u117B\n\xD1\r\xD1" +
    "\x0E\xD1\u117C\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1" +
    "\x07\xD1\u1186\n\xD1\f\xD1\x0E\xD1\u1189\v\xD1\x03\xD1\x05\xD1\u118C\n" +
    "\xD1\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x06" +
    "\xD3\u1196\n\xD3\r\xD3\x0E\xD3\u1197\x03\xD3\x03\xD3\x05\xD3\u119C\n\xD3" +
    "\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x06\xD4\u11A2\n\xD4\r\xD4\x0E\xD4\u11A3" +
    "\x03\xD4\x03\xD4\x03\xD5\x03\xD5\x07\xD5\u11AA\n\xD5\f\xD5\x0E\xD5\u11AD" +
    "\v\xD5\x03\xD5\x05\xD5\u11B0\n\xD5\x03\xD5\x03\xD5\x03\xD5\x07\xD5\u11B5" +
    "\n\xD5\f\xD5\x0E\xD5\u11B8\v\xD5\x07\xD5\u11BA\n\xD5\f\xD5\x0E\xD5\u11BD" +
    "\v\xD5\x03\xD5\x07\xD5\u11C0\n\xD5\f\xD5\x0E\xD5\u11C3\v\xD5\x07\xD5\u11C5" +
    "\n\xD5\f\xD5\x0E\xD5\u11C8\v\xD5\x03\xD5\x03\xD5\x03\xD5\x07\xD5\u11CD" +
    "\n\xD5\f\xD5\x0E\xD5\u11D0\v\xD5\x03\xD5\x05\xD5\u11D3\n\xD5\x03\xD5\x05" +
    "\xD5\u11D6\n\xD5\x03\xD6\x03\xD6\x06\xD6\u11DA\n\xD6\r\xD6\x0E\xD6\u11DB" +
    "\x03\xD6\x03\xD6\x03\xD7\x03\xD7\x03\xD7\x06\xD7\u11E3\n\xD7\r\xD7\x0E" +
    "\xD7\u11E4\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u11EC\n\xD7" +
    "\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x05\xD8" +
    "\u11F6\n\xD8\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03" +
    "\xD9\x03\xD9\x05\xD9\u1201\n\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDB" +
    "\x03\xDB\x03\xDB\x03\xDB\x03\xDC\x03\xDC\x07\xDC\u120D\n\xDC\f\xDC\x0E" +
    "\xDC\u1210\v\xDC\x03\xDC\x07\xDC\u1213\n\xDC\f\xDC\x0E\xDC\u1216\v\xDC" +
    "\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x07\xDD\u121F" +
    "\n\xDD\f\xDD\x0E\xDD\u1222\v\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x07\xDD" +
    "\u1228\n\xDD\f\xDD\x0E\xDD\u122B\v\xDD\x03\xDD\x05\xDD\u122E\n\xDD\x03" +
    "\xDE\x03\xDE\x03\xDE\x03\xDE\x06\xDE\u1234\n\xDE\r\xDE\x0E\xDE\u1235\x03" +
    "\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x07\xDE\u123D\n\xDE\f\xDE\x0E\xDE" +
    "\u1240\v\xDE\x03\xDE\x05\xDE\u1243\n\xDE\x03\xDF\x03\xDF\x05\xDF\u1247" +
    "\n\xDF\x03\xDF\x03\xDF\x03\xE0\x03\xE0\x05\xE0\u124D\n\xE0\x06\xE0\u124F" +
    "\n\xE0\r\xE0\x0E\xE0\u1250\x03\xE1\x03\xE1\x06\xE1\u1255\n\xE1\r\xE1\x0E" +
    "\xE1\u1256\x03\xE1\x05\xE1\u125A\n\xE1\x03\xE1\x03\xE1\x06\xE1\u125E\n" +
    "\xE1\r\xE1\x0E\xE1\u125F\x03\xE1\x05\xE1\u1263\n\xE1\x03\xE1\x03\xE1\x03" +
    "\xE1\x03\xE1\x03\xE1\x03\xE1\x07\xE1\u126B\n\xE1\f\xE1\x0E\xE1\u126E\v" +
    "\xE1\x03\xE1\x03\xE1\x07\xE1\u1272\n\xE1\f\xE1\x0E\xE1\u1275\v\xE1\x03" +
    "\xE1\x03\xE1\x07\xE1\u1279\n\xE1\f\xE1\x0E\xE1\u127C\v\xE1\x03\xE1\x03" +
    "\xE1\x05\xE1\u1280\n\xE1\x03\xE2\x03\xE2\x03\xE3\x03\xE3\x03\xE4\x03\xE4" +
    "\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5" +
    "\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5" +
    "\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5" +
    "\x03\xE5\x03\xE5\x03\xE5\x06\xE5\u12A6\n\xE5\r\xE5\x0E\xE5\u12A7\x03\xE6" +
    "\x03\xE6\x03\xE7\x03\xE7\x03\xE7\b\u061A\u0623\u109E\u10B1\u1100\u1229" +
    "\x02\x02\xE8\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02" +
    "\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02" +
    "&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02" +
    "B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02" +
    "^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02" +
    "z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02" +
    "\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02" +
    "\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02" +
    "\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02" +
    "\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02" +
    "\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02" +
    "\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02" +
    "\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108" +
    "\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116" +
    "\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124" +
    "\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132" +
    "\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140" +
    "\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E" +
    "\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C" +
    "\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A" +
    "\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178" +
    "\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186" +
    "\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194" +
    "\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2" +
    "\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0" +
    "\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE" +
    "\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC" +
    "\x02\x02\x1B\x03\x02\t\n\x03\x02\u0114\u0115\x03\x02\xA1\xA2\x03\x02\xCE" +
    "\xCF\x03\x02\xAF\xB0\x03\x02\x96\x96\b\x02\xE6\xE7\xE9\xEA\xF8\u0100\u010B" +
    "\u010E\u0114\u0115\u0117\u0119\x05\x02\xE5\xE5\xFA\xFA\u010B\u010B\x04" +
    "\x02\xE6\xE6\xFB\xFB\x05\x02\xE7\xE7\xFC\xFD\u010D\u010D\x04\x02\xE8\xE8" +
    "\xFE\xFE\x04\x02\xE9\xE9\xFF\xFF\x05\x02\xEA\xEA\u0100\u0100\u010E\u010E" +
    "\x04\x02\xF1\xF1\u0104\u0104\x05\x02\xF3\xF3\u0105\u0106\u0112\u0112\x04" +
    "\x02\xF4\xF4\u0107\u0107\x04\x02\xF5\xF5\u0108\u0108\x05\x02\xF6\xF6\u0109" +
    "\u0109\u0113\u0113\x03\x02\xC5\xC6\x04\x02\xD5\xD5\xD8\xDB\x03\x02\xA4" +
    "\xA4\x04\x02\xA5\xA5\xA7\xA7\x03\x02\xB1\xB2\x03\x02\xAA\xAA\x03\x02\xAB" +
    "\xAB\x02\u154D\x02\u01DB\x03\x02\x02\x02\x04\u01E9\x03\x02\x02\x02\x06" +
    "\u0279\x03\x02\x02\x02\b\u027B\x03\x02\x02\x02\n\u028F\x03\x02\x02\x02" +
    "\f\u02AA\x03\x02\x02\x02\x0E\u02BE\x03\x02\x02\x02\x10\u02D2\x03\x02\x02" +
    "\x02\x12\u02E6\x03\x02\x02\x02\x14\u02FA\x03\x02\x02\x02\x16\u0305\x03" +
    "\x02\x02\x02\x18\u030F\x03\x02\x02\x02\x1A\u0320\x03\x02\x02\x02\x1C\u0332" +
    "\x03\x02\x02\x02\x1E\u0335\x03\x02\x02\x02 \u034B\x03\x02\x02\x02\"\u0361" +
    "\x03\x02\x02\x02$\u0375\x03\x02\x02\x02&\u0389\x03\x02\x02\x02(\u039D" +
    "\x03\x02\x02\x02*\u03B1\x03\x02\x02\x02,\u03C5\x03\x02\x02\x02.\u03D9" +
    "\x03\x02\x02\x020\u03ED\x03\x02\x02\x022\u0401\x03\x02\x02\x024\u0415" +
    "\x03\x02\x02\x026\u0429\x03\x02\x02\x028\u043D\x03\x02\x02\x02:\u0451" +
    "\x03\x02\x02\x02<\u0465\x03\x02\x02\x02>\u0479\x03\x02\x02\x02@\u048D" +
    "\x03\x02\x02\x02B\u04A1\x03\x02\x02\x02D\u04C5\x03\x02\x02\x02F\u04E9" +
    "\x03\x02\x02\x02H\u050D\x03\x02\x02\x02J\u0522\x03\x02\x02\x02L\u0532" +
    "\x03\x02\x02\x02N\u053D\x03\x02\x02\x02P\u0541\x03\x02\x02\x02R\u054A" +
    "\x03\x02\x02\x02T\u056E\x03\x02\x02\x02V\u0570\x03\x02\x02\x02X\u057B" +
    "\x03\x02\x02\x02Z\u058A\x03\x02\x02\x02\\\u0595\x03\x02\x02\x02^\u05A0" +
    "\x03\x02\x02\x02`\u05AA\x03\x02\x02\x02b\u05DB\x03\x02\x02\x02d\u05E7" +
    "\x03\x02\x02\x02f\u05E9\x03\x02\x02\x02h\u05EB\x03\x02\x02\x02j\u0628" +
    "\x03\x02\x02\x02l\u062A\x03\x02\x02\x02n\u0652\x03\x02\x02\x02p\u0660" +
    "\x03\x02\x02\x02r\u0670\x03\x02\x02\x02t\u0695\x03\x02\x02\x02v\u06BA" +
    "\x03\x02\x02\x02x\u06DF\x03\x02\x02\x02z\u070C\x03\x02\x02\x02|\u0738" +
    "\x03\x02\x02\x02~\u074C\x03\x02\x02\x02\x80\u0760\x03\x02\x02\x02\x82" +
    "\u0774\x03\x02\x02\x02\x84\u0788\x03\x02\x02\x02\x86\u079C\x03\x02\x02" +
    "\x02\x88\u07B0\x03\x02\x02\x02\x8A\u07C4\x03\x02\x02\x02\x8C\u07D8\x03" +
    "\x02\x02\x02\x8E\u07EC\x03\x02\x02\x02\x90\u0800\x03\x02\x02\x02\x92\u0814" +
    "\x03\x02\x02\x02\x94\u0828\x03\x02\x02\x02\x96\u083C\x03\x02\x02\x02\x98" +
    "\u0850\x03\x02\x02\x02\x9A\u0864\x03\x02\x02\x02\x9C\u0878\x03\x02\x02" +
    "\x02\x9E\u088C\x03\x02\x02\x02\xA0\u08A0\x03\x02\x02\x02\xA2\u08B4\x03" +
    "\x02\x02\x02\xA4\u08C8\x03\x02\x02\x02\xA6\u08DC\x03\x02\x02\x02\xA8\u08F0" +
    "\x03\x02\x02\x02\xAA\u0904\x03\x02\x02\x02\xAC\u0918\x03\x02\x02\x02\xAE" +
    "\u092C\x03\x02\x02\x02\xB0\u0940\x03\x02\x02\x02\xB2\u0954\x03\x02\x02" +
    "\x02\xB4\u0968\x03\x02\x02\x02\xB6\u097C\x03\x02\x02\x02\xB8\u0990\x03" +
    "\x02\x02\x02\xBA\u09A4\x03\x02\x02\x02\xBC\u09B8\x03\x02\x02\x02\xBE\u09CC" +
    "\x03\x02\x02\x02\xC0\u09E0\x03\x02\x02\x02\xC2\u09F4\x03\x02\x02\x02\xC4" +
    "\u0A08\x03\x02\x02\x02\xC6\u0A1C\x03\x02\x02\x02\xC8\u0A30\x03\x02\x02" +
    "\x02\xCA\u0A44\x03\x02\x02\x02\xCC\u0A58\x03\x02\x02\x02\xCE\u0A6C\x03" +
    "\x02\x02\x02\xD0\u0A80\x03\x02\x02\x02\xD2\u0A94\x03\x02\x02\x02\xD4\u0AA8" +
    "\x03\x02\x02\x02\xD6\u0ABC\x03\x02\x02\x02\xD8\u0AD0\x03\x02\x02\x02\xDA" +
    "\u0AE4\x03\x02\x02\x02\xDC\u0AF8\x03\x02\x02\x02\xDE\u0B0C\x03\x02\x02" +
    "\x02\xE0\u0B20\x03\x02\x02\x02\xE2\u0B34\x03\x02\x02\x02\xE4\u0B48\x03" +
    "\x02\x02\x02\xE6\u0B5C\x03\x02\x02\x02\xE8\u0B70\x03\x02\x02\x02\xEA\u0B84" +
    "\x03\x02\x02\x02\xEC\u0B98\x03\x02\x02\x02\xEE\u0BAC\x03\x02\x02\x02\xF0" +
    "\u0BC0\x03\x02\x02\x02\xF2\u0BD4\x03\x02\x02\x02\xF4\u0BE8\x03\x02\x02" +
    "\x02\xF6\u0BFC\x03\x02\x02\x02\xF8\u0C10\x03\x02\x02\x02\xFA\u0C24\x03" +
    "\x02\x02\x02\xFC\u0C38\x03\x02\x02\x02\xFE\u0C4C\x03\x02\x02\x02\u0100" +
    "\u0C60\x03\x02\x02\x02\u0102\u0C74\x03\x02\x02\x02\u0104\u0C88\x03\x02" +
    "\x02\x02\u0106\u0C9C\x03\x02\x02\x02\u0108\u0CB0\x03\x02\x02\x02\u010A" +
    "\u0CC4\x03\x02\x02\x02\u010C\u0CD8\x03\x02\x02\x02\u010E\u0CEC\x03\x02" +
    "\x02\x02\u0110\u0D00\x03\x02\x02\x02\u0112\u0D14\x03\x02\x02\x02\u0114" +
    "\u0D28\x03\x02\x02\x02\u0116\u0D3C\x03\x02\x02\x02\u0118\u0D50\x03\x02" +
    "\x02\x02\u011A\u0D64\x03\x02\x02\x02\u011C\u0D78\x03\x02\x02\x02\u011E" +
    "\u0D8C\x03\x02\x02\x02\u0120\u0DA0\x03\x02\x02\x02\u0122\u0DB4\x03\x02" +
    "\x02\x02\u0124\u0DC8\x03\x02\x02\x02\u0126\u0DDC\x03\x02\x02\x02\u0128" +
    "\u0DF0\x03\x02\x02\x02\u012A\u0E04\x03\x02\x02\x02\u012C\u0E18\x03\x02" +
    "\x02\x02\u012E\u0E2C\x03\x02\x02\x02\u0130\u0E40\x03\x02\x02\x02\u0132" +
    "\u0E54\x03\x02\x02\x02\u0134\u0E68\x03\x02\x02\x02\u0136\u0E7C\x03\x02" +
    "\x02\x02\u0138\u0EAA\x03\x02\x02\x02\u013A\u0EAE\x03\x02\x02\x02\u013C" +
    "\u0EE5\x03\x02\x02\x02\u013E\u0EEB\x03\x02\x02\x02\u0140\u0F15\x03\x02" +
    "\x02\x02\u0142\u0F38\x03\x02\x02\x02\u0144\u0F5B\x03\x02\x02\x02\u0146" +
    "\u0F7E\x03\x02\x02\x02\u0148\u0FBB\x03\x02\x02\x02\u014A\u0FBF\x03\x02" +
    "\x02\x02\u014C\u0FC6\x03\x02\x02\x02\u014E\u0FD1\x03\x02\x02\x02\u0150" +
    "\u0FDC\x03\x02\x02\x02\u0152\u0FE3\x03\x02\x02\x02\u0154\u0FF3\x03\x02" +
    "\x02\x02\u0156\u0FF5\x03\x02\x02\x02\u0158\u0FFA\x03\x02\x02\x02\u015A" +
    "\u0FFC\x03\x02\x02\x02\u015C\u0FFE\x03\x02\x02\x02\u015E\u1000\x03\x02" +
    "\x02\x02\u0160\u1002\x03\x02\x02\x02\u0162\u1004\x03\x02\x02\x02\u0164" +
    "\u1006\x03\x02\x02\x02\u0166\u1008\x03\x02\x02\x02\u0168\u100A\x03\x02" +
    "\x02\x02\u016A\u101B\x03\x02\x02\x02\u016C\u101D\x03\x02\x02\x02\u016E" +
    "\u1025\x03\x02\x02\x02\u0170\u1027\x03\x02\x02\x02\u0172\u1031\x03\x02" +
    "\x02\x02\u0174\u103B\x03\x02\x02\x02\u0176\u1048\x03\x02\x02\x02\u0178" +
    "\u104F\x03\x02\x02\x02\u017A\u105A\x03\x02\x02\x02\u017C\u1061\x03\x02" +
    "\x02\x02\u017E\u106B\x03\x02\x02\x02\u0180\u1076\x03\x02\x02\x02\u0182" +
    "\u108F\x03\x02\x02\x02\u0184\u10A2\x03\x02\x02\x02\u0186\u10B5\x03\x02" +
    "\x02\x02\u0188\u10B7\x03\x02\x02\x02\u018A\u10BE\x03\x02\x02\x02\u018C" +
    "\u10D2\x03\x02\x02\x02\u018E\u10E3\x03\x02\x02\x02\u0190\u1104\x03\x02" +
    "\x02\x02\u0192\u1106\x03\x02\x02\x02\u0194\u110A\x03\x02\x02\x02\u0196" +
    "\u112A\x03\x02\x02\x02\u0198\u112C\x03\x02\x02\x02\u019A\u1141\x03\x02" +
    "\x02\x02\u019C\u114A\x03\x02\x02\x02\u019E\u1173\x03\x02\x02\x02\u01A0" +
    "\u118B\x03\x02\x02\x02\u01A2\u118D\x03\x02\x02\x02\u01A4\u1191\x03\x02" +
    "\x02\x02\u01A6\u119D\x03\x02\x02\x02\u01A8\u11D5\x03\x02\x02\x02\u01AA" +
    "\u11D7\x03\x02\x02\x02\u01AC\u11EB\x03\x02\x02\x02\u01AE\u11F5\x03\x02" +
    "\x02\x02\u01B0\u1200\x03\x02\x02\x02\u01B2\u1202\x03\x02\x02\x02\u01B4" +
    "\u1206\x03\x02\x02\x02\u01B6\u120A\x03\x02\x02\x02\u01B8\u122D\x03\x02" +
    "\x02\x02\u01BA\u1242\x03\x02\x02\x02\u01BC\u1244\x03\x02\x02\x02\u01BE" +
    "\u124E\x03\x02\x02\x02\u01C0\u127F\x03\x02\x02\x02\u01C2\u1281\x03\x02" +
    "\x02\x02\u01C4\u1283\x03\x02\x02\x02\u01C6\u1285\x03\x02\x02\x02\u01C8" +
    "\u12A5\x03\x02\x02\x02\u01CA\u12A9\x03\x02\x02\x02\u01CC\u12AB\x03\x02" +
    "\x02\x02\u01CE\u01D8\x05\x04\x03\x02\u01CF\u01D1\x07\x04\x02\x02\u01D0" +
    "\u01CF\x03\x02\x02\x02\u01D1\u01D4\x03\x02\x02\x02\u01D2\u01D0\x03\x02" +
    "\x02\x02\u01D2\u01D3\x03\x02\x02\x02\u01D3\u01D5\x03\x02\x02\x02\u01D4" +
    "\u01D2\x03\x02\x02\x02\u01D5\u01D7\x07\xBD\x02\x02\u01D6\u01D2\x03\x02" +
    "\x02\x02\u01D7\u01DA\x03\x02\x02\x02\u01D8\u01D6\x03\x02\x02\x02\u01D8" +
    "\u01D9\x03\x02\x02\x02\u01D9\u01DC\x03\x02\x02\x02\u01DA\u01D8\x03\x02" +
    "\x02\x02\u01DB\u01CE\x03\x02\x02\x02\u01DC\u01DD\x03\x02\x02\x02\u01DD" +
    "\u01DB\x03\x02\x02\x02\u01DD\u01DE\x03\x02\x02\x02\u01DE\u01E2\x03\x02" +
    "\x02\x02\u01DF\u01E1\x07\xBD\x02\x02\u01E0\u01DF\x03\x02\x02\x02\u01E1" +
    "\u01E4\x03\x02\x02\x02\u01E2\u01E0\x03\x02\x02\x02\u01E2\u01E3\x03\x02" +
    "\x02\x02\u01E3\u01E5\x03\x02\x02\x02\u01E4\u01E2\x03\x02\x02\x02\u01E5" +
    "\u01E6\x07\x02\x02\x03\u01E6\x03\x03\x02\x02\x02\u01E7\u01EA\x05\x06\x04" +
    "\x02\u01E8\u01EA\x05\u01BE\xE0\x02\u01E9\u01E7\x03\x02\x02\x02\u01E9\u01E8" +
    "\x03\x02\x02\x02\u01EA\x05\x03\x02\x02\x02\u01EB\u027A\x05\b\x05\x02\u01EC" +
    "\u027A\x05\n\x06\x02\u01ED\u027A\x05\f\x07\x02\u01EE\u027A\x05\x0E\b\x02" +
    "\u01EF\u027A\x05\x10\t\x02\u01F0\u027A\x05\x12\n\x02\u01F1\u027A\x05\x16" +
    "\f\x02\u01F2\u027A\x05\x14\v\x02\u01F3\u027A\x05\x1A\x0E\x02\u01F4\u027A" +
    "\x05\x18\r\x02\u01F5\u027A\x05\u01BC\xDF\x02\u01F6\u027A\x05\x1E\x10\x02" +
    "\u01F7\u027A\x05 \x11\x02\u01F8\u027A\x05`1\x02\u01F9\u027A\x05h5\x02" +
    "\u01FA\u027A\x05l7\x02\u01FB\u027A\x05t;\x02\u01FC\u027A\x05r:\x02\u01FD" +
    "\u027A\x05v<\x02\u01FE\u027A\x05x=\x02\u01FF\u027A\x05z>\x02\u0200\u027A" +
    "\x05|?\x02\u0201\u027A\x05~@\x02\u0202\u027A\x05\x80A\x02\u0203\u027A" +
    "\x05\x82B\x02\u0204\u027A\x05\x84C\x02\u0205\u027A\x05\x86D\x02\u0206" +
    "\u027A\x05\x88E\x02\u0207\u027A\x05\x8CG\x02\u0208\u027A\x05\x8EH\x02" +
    "\u0209\u027A\x05\x90I\x02\u020A\u027A\x05\x92J\x02\u020B\u027A\x05\xA2" +
    "R\x02\u020C\u027A\x05\x94K\x02\u020D\u027A\x05\x96L\x02\u020E\u027A\x05" +
    "\x98M\x02\u020F\u027A\x05\x9AN\x02\u0210\u027A\x05\x9CO\x02\u0211\u027A" +
    "\x05\x9EP\x02\u0212\u027A\x05\xA0Q\x02\u0213\u027A\x05\xA4S\x02\u0214" +
    "\u027A\x05\x8AF\x02\u0215\u027A\x05\u0134\x9B\x02\u0216\u027A\x05\u0136" +
    "\x9C\x02\u0217\u027A\x05\u0146\xA4\x02\u0218\u027A\x05\u013A\x9E\x02\u0219" +
    "\u027A\x05\u013E\xA0\x02\u021A\u027A\x05\u0140\xA1\x02\u021B\u027A\x05" +
    "\u0142\xA2\x02\u021C\u027A\x05\u0144\xA3\x02\u021D\u027A\x05\u01AA\xD6" +
    "\x02\u021E\u027A\x05\xA6T\x02\u021F\u027A\x05\xA8U\x02\u0220\u027A\x05" +
    "\"\x12\x02\u0221\u027A\x05$\x13\x02\u0222\u027A\x05&\x14\x02\u0223\u027A" +
    "\x05(\x15\x02\u0224\u027A\x05*\x16\x02\u0225\u027A\x05,\x17\x02\u0226" +
    "\u027A\x05.\x18\x02\u0227\u027A\x050\x19\x02\u0228\u027A\x052\x1A\x02" +
    "\u0229\u027A\x054\x1B\x02\u022A\u027A\x056\x1C\x02\u022B\u027A\x058\x1D" +
    "\x02\u022C\u027A\x05:\x1E\x02\u022D\u027A\x05<\x1F\x02\u022E\u027A\x05" +
    "> \x02\u022F\u027A\x05@!\x02\u0230\u027A\x05B\"\x02\u0231\u027A\x05D#" +
    "\x02\u0232\u027A\x05F$\x02\u0233\u027A\x05H%\x02\u0234\u027A\x05\xAAV" +
    "\x02\u0235\u027A\x05\xACW\x02\u0236\u027A\x05\xAEX\x02\u0237\u027A\x05" +
    "\xB0Y\x02\u0238\u027A\x05\xB2Z\x02\u0239\u027A\x05\xB4[\x02\u023A\u027A" +
    "\x05\xB6\\\x02\u023B\u027A\x05\xB8]\x02\u023C\u027A\x05\xBA^\x02\u023D" +
    "\u027A\x05\xBC_\x02\u023E\u027A\x05\xBE`\x02\u023F\u027A\x05\xC0a\x02" +
    "\u0240\u027A\x05\xC2b\x02\u0241\u027A\x05\xC4c\x02\u0242\u027A\x05\xC6" +
    "d\x02\u0243\u027A\x05\xC8e\x02\u0244\u027A\x05\xCCg\x02\u0245\u027A\x05" +
    "\xCEh\x02\u0246\u027A\x05\xD0i\x02\u0247\u027A\x05\xD2j\x02\u0248\u027A" +
    "\x05\xCAf\x02\u0249\u027A\x05\xD4k\x02\u024A\u027A\x05\xD6l\x02\u024B" +
    "\u027A\x05\xD8m\x02\u024C\u027A\x05\xDAn\x02\u024D\u027A\x05\xDCo\x02" +
    "\u024E\u027A\x05\xDEp\x02\u024F\u027A\x05\xE0q\x02\u0250\u027A\x05\xE2" +
    "r\x02\u0251\u027A\x05\xE4s\x02\u0252\u027A\x05\xE6t\x02\u0253\u027A\x05" +
    "\xE8u\x02\u0254\u027A\x05\xEAv\x02\u0255\u027A\x05\xECw\x02\u0256\u027A" +
    "\x05\xEEx\x02\u0257\u027A\x05\xF0y\x02\u0258\u027A\x05\xF2z\x02\u0259" +
    "\u027A\x05\xF4{\x02\u025A\u027A\x05\xF6|\x02\u025B\u027A\x05\xF8}\x02" +
    "\u025C\u027A\x05\xFA~\x02\u025D\u027A\x05\xFC\x7F\x02\u025E\u027A\x05" +
    "\xFE\x80\x02\u025F\u027A\x05\u0100\x81\x02\u0260\u027A\x05\u0102\x82\x02" +
    "\u0261\u027A\x05\u0104\x83\x02\u0262\u027A\x05\u0106\x84\x02\u0263\u027A" +
    "\x05\u0108\x85\x02\u0264\u027A\x05\u010A\x86\x02\u0265\u027A\x05\u010C" +
    "\x87\x02\u0266\u027A\x05\u010E\x88\x02\u0267\u027A\x05\u0110\x89\x02\u0268" +
    "\u027A\x05\u0112\x8A\x02\u0269\u027A\x05\u0114\x8B\x02\u026A\u027A\x05" +
    "\u0116\x8C\x02\u026B\u027A\x05\u0118\x8D\x02\u026C\u027A\x05\u011A\x8E" +
    "\x02\u026D\u027A\x05\u011C\x8F\x02\u026E\u027A\x05\u011E\x90\x02\u026F" +
    "\u027A\x05\u0120\x91\x02\u0270\u027A\x05\u0122\x92\x02\u0271\u027A\x05" +
    "\u0124\x93\x02\u0272\u027A\x05\u0126\x94\x02\u0273\u027A\x05\u0128\x95" +
    "\x02\u0274\u027A\x05\u012A\x96\x02\u0275\u027A\x05\u012C\x97\x02\u0276" +
    "\u027A\x05\u012E\x98\x02\u0277\u027A\x05\u0130\x99\x02\u0278\u027A\x05" +
    "\u0132\x9A\x02\u0279\u01EB\x03\x02\x02\x02\u0279\u01EC\x03\x02\x02\x02" +
    "\u0279\u01ED\x03\x02\x02\x02\u0279\u01EE\x03\x02\x02\x02\u0279\u01EF\x03" +
    "\x02\x02\x02\u0279\u01F0\x03\x02\x02\x02\u0279\u01F1\x03\x02\x02\x02\u0279" +
    "\u01F2\x03\x02\x02\x02\u0279\u01F3\x03\x02\x02\x02\u0279\u01F4\x03\x02" +
    "\x02\x02\u0279\u01F5\x03\x02\x02\x02\u0279\u01F6\x03\x02\x02\x02\u0279" +
    "\u01F7\x03\x02\x02\x02\u0279\u01F8\x03\x02\x02\x02\u0279\u01F9\x03\x02" +
    "\x02\x02\u0279\u01FA\x03\x02\x02\x02\u0279\u01FB\x03\x02\x02\x02\u0279" +
    "\u01FC\x03\x02\x02\x02\u0279\u01FD\x03\x02\x02\x02\u0279\u01FE\x03\x02" +
    "\x02\x02\u0279\u01FF\x03\x02\x02\x02\u0279\u0200\x03\x02\x02\x02\u0279" +
    "\u0201\x03\x02\x02\x02\u0279\u0202\x03\x02\x02\x02\u0279\u0203\x03\x02" +
    "\x02\x02\u0279\u0204\x03\x02\x02\x02\u0279\u0205\x03\x02\x02\x02\u0279" +
    "\u0206\x03\x02\x02\x02\u0279\u0207\x03\x02\x02\x02\u0279\u0208\x03\x02" +
    "\x02\x02\u0279\u0209\x03\x02\x02\x02\u0279\u020A\x03\x02\x02\x02\u0279" +
    "\u020B\x03\x02\x02\x02\u0279\u020C\x03\x02\x02\x02\u0279\u020D\x03\x02" +
    "\x02\x02\u0279\u020E\x03\x02\x02\x02\u0279\u020F\x03\x02\x02\x02\u0279" +
    "\u0210\x03\x02\x02\x02\u0279\u0211\x03\x02\x02\x02\u0279\u0212\x03\x02" +
    "\x02\x02\u0279\u0213\x03\x02\x02\x02\u0279\u0214\x03\x02\x02\x02\u0279" +
    "\u0215\x03\x02\x02\x02\u0279\u0216\x03\x02\x02\x02\u0279\u0217\x03\x02" +
    "\x02\x02\u0279\u0218\x03\x02\x02\x02\u0279\u0219\x03\x02\x02\x02\u0279" +
    "\u021A\x03\x02\x02\x02\u0279\u021B\x03\x02\x02\x02\u0279\u021C\x03\x02" +
    "\x02\x02\u0279\u021D\x03\x02\x02\x02\u0279\u021E\x03\x02\x02\x02\u0279" +
    "\u021F\x03\x02\x02\x02\u0279\u0220\x03\x02\x02\x02\u0279\u0221\x03\x02" +
    "\x02\x02\u0279\u0222\x03\x02\x02\x02\u0279\u0223\x03\x02\x02\x02\u0279" +
    "\u0224\x03\x02\x02\x02\u0279\u0225\x03\x02\x02\x02\u0279\u0226\x03\x02" +
    "\x02\x02\u0279\u0227\x03\x02\x02\x02\u0279\u0228\x03\x02\x02\x02\u0279" +
    "\u0229\x03\x02\x02\x02\u0279\u022A\x03\x02\x02\x02\u0279\u022B\x03\x02" +
    "\x02\x02\u0279\u022C\x03\x02\x02\x02\u0279\u022D\x03\x02\x02\x02\u0279" +
    "\u022E\x03\x02\x02\x02\u0279\u022F\x03\x02\x02\x02\u0279\u0230\x03\x02" +
    "\x02\x02\u0279\u0231\x03\x02\x02\x02\u0279\u0232\x03\x02\x02\x02\u0279" +
    "\u0233\x03\x02\x02\x02\u0279\u0234\x03\x02\x02\x02\u0279\u0235\x03\x02" +
    "\x02\x02\u0279\u0236\x03\x02\x02\x02\u0279\u0237\x03\x02\x02\x02\u0279" +
    "\u0238\x03\x02\x02\x02\u0279\u0239\x03\x02\x02\x02\u0279\u023A\x03\x02" +
    "\x02\x02\u0279\u023B\x03\x02\x02\x02\u0279\u023C\x03\x02\x02\x02\u0279" +
    "\u023D\x03\x02\x02\x02\u0279\u023E\x03\x02\x02\x02\u0279\u023F\x03\x02" +
    "\x02\x02\u0279\u0240\x03\x02\x02\x02\u0279\u0241\x03\x02\x02\x02\u0279" +
    "\u0242\x03\x02\x02\x02\u0279\u0243\x03\x02\x02\x02\u0279\u0244\x03\x02" +
    "\x02\x02\u0279\u0245\x03\x02\x02\x02\u0279\u0246\x03\x02\x02\x02\u0279" +
    "\u0247\x03\x02\x02\x02\u0279\u0248\x03\x02\x02\x02\u0279\u0249\x03\x02" +
    "\x02\x02\u0279\u024A\x03\x02\x02\x02\u0279\u024B\x03\x02\x02\x02\u0279" +
    "\u024C\x03\x02\x02\x02\u0279\u024D\x03\x02\x02\x02\u0279\u024E\x03\x02" +
    "\x02\x02\u0279\u024F\x03\x02\x02\x02\u0279\u0250\x03\x02\x02\x02\u0279" +
    "\u0251\x03\x02\x02\x02\u0279\u0252\x03\x02\x02\x02\u0279\u0253\x03\x02" +
    "\x02\x02\u0279\u0254\x03\x02\x02\x02\u0279\u0255\x03\x02\x02\x02\u0279" +
    "\u0256\x03\x02\x02\x02\u0279\u0257\x03\x02\x02\x02\u0279\u0258\x03\x02" +
    "\x02\x02\u0279\u0259\x03\x02\x02\x02\u0279\u025A\x03\x02\x02\x02\u0279" +
    "\u025B\x03\x02\x02\x02\u0279\u025C\x03\x02\x02\x02\u0279\u025D\x03\x02" +
    "\x02\x02\u0279\u025E\x03\x02\x02\x02\u0279\u025F\x03\x02\x02\x02\u0279" +
    "\u0260\x03\x02\x02\x02\u0279\u0261\x03\x02\x02\x02\u0279\u0262\x03\x02" +
    "\x02\x02\u0279\u0263\x03\x02\x02\x02\u0279\u0264\x03\x02\x02\x02\u0279" +
    "\u0265\x03\x02\x02\x02\u0279\u0266\x03\x02\x02\x02\u0279\u0267\x03\x02" +
    "\x02\x02\u0279\u0268\x03\x02\x02\x02\u0279\u0269\x03\x02\x02\x02\u0279" +
    "\u026A\x03\x02\x02\x02\u0279\u026B\x03\x02\x02\x02\u0279\u026C\x03\x02" +
    "\x02\x02\u0279\u026D\x03\x02\x02\x02\u0279\u026E\x03\x02\x02\x02\u0279" +
    "\u026F\x03\x02\x02\x02\u0279\u0270\x03\x02\x02\x02\u0279\u0271\x03\x02" +
    "\x02\x02\u0279\u0272\x03\x02\x02\x02\u0279\u0273\x03\x02\x02\x02\u0279" +
    "\u0274\x03\x02\x02\x02\u0279\u0275\x03\x02\x02\x02\u0279\u0276\x03\x02" +
    "\x02\x02\u0279\u0277\x03\x02\x02\x02\u0279\u0278\x03\x02\x02\x02\u027A" +
    "\x07\x03\x02\x02\x02\u027B\u027C\x07\x05\x02\x02\u027C\u027D\x05\u014C" +
    "\xA7\x02\u027D\u0281\x07\xA4\x02\x02\u027E\u0280\x07\xBD\x02\x02\u027F" +
    "\u027E\x03\x02\x02\x02\u0280\u0283\x03\x02\x02\x02\u0281\u027F\x03\x02" +
    "\x02\x02\u0281\u0282\x03\x02\x02\x02\u0282\u028B\x03\x02\x02\x02\u0283" +
    "\u0281\x03\x02\x02\x02\u0284\u0288\x05T+\x02\u0285\u0287\x07\xBD\x02\x02" +
    "\u0286\u0285\x03\x02\x02\x02\u0287\u028A\x03\x02\x02\x02\u0288\u0286\x03" +
    "\x02\x02\x02\u0288\u0289\x03\x02\x02\x02\u0289\u028C\x03\x02\x02\x02\u028A" +
    "\u0288\x03\x02\x02\x02\u028B\u0284\x03\x02\x02\x02\u028C\u028D\x03\x02" +
    "\x02\x02\u028D\u028B\x03\x02\x02\x02\u028D\u028E\x03\x02\x02\x02\u028E" +
    "\t\x03\x02\x02\x02\u028F\u0290\x07\x06\x02\x02\u0290\u0291\x05\u014C\xA7" +
    "\x02\u0291\u0295\x07\xA4\x02\x02\u0292\u0294\x07\xBD\x02\x02\u0293\u0292" +
    "\x03\x02\x02\x02\u0294\u0297\x03\x02\x02\x02\u0295\u0293\x03\x02\x02\x02" +
    "\u0295\u0296\x03\x02\x02\x02\u0296\u029B\x03\x02\x02\x02\u0297\u0295\x03" +
    "\x02\x02\x02\u0298\u0299\x05\u01BC\xDF\x02\u0299\u029A\x07\xBD\x02\x02" +
    "\u029A\u029C\x03\x02\x02\x02\u029B\u0298\x03\x02\x02\x02\u029B\u029C\x03" +
    "\x02\x02\x02\u029C\u029D\x03\x02\x02\x02\u029D\u02A7\x05f4\x02\u029E\u02A0" +
    "\x07\xBD\x02\x02\u029F\u029E\x03\x02\x02\x02\u02A0\u02A3\x03\x02\x02\x02" +
    "\u02A1\u029F\x03\x02\x02\x02\u02A1\u02A2\x03\x02\x02\x02\u02A2\u02A4\x03" +
    "\x02\x02\x02\u02A3\u02A1\x03\x02\x02\x02\u02A4\u02A6\x05f4\x02\u02A5\u02A1" +
    "\x03\x02\x02\x02\u02A6\u02A9\x03\x02\x02\x02\u02A7\u02A5\x03\x02\x02\x02" +
    "\u02A7\u02A8\x03\x02\x02\x02\u02A8\v\x03\x02\x02\x02\u02A9\u02A7\x03\x02" +
    "\x02\x02\u02AA\u02AB\x076\x02\x02\u02AB\u02AC\x05\u014C\xA7\x02\u02AC" +
    "\u02B0\x07\xA4\x02\x02\u02AD\u02AF\x07\xBD\x02\x02\u02AE\u02AD\x03\x02" +
    "\x02\x02\u02AF\u02B2\x03\x02";
bitmarkParser._serializedATNSegment3 = "\x02\x02\u02B0\u02AE\x03\x02\x02\x02\u02B0\u02B1\x03\x02\x02\x02\u02B1" +
    "\u02BA\x03\x02\x02\x02\u02B2\u02B0\x03\x02\x02\x02\u02B3\u02B7\x05T+\x02" +
    "\u02B4\u02B6\x07\xBD\x02\x02\u02B5\u02B4\x03\x02\x02\x02\u02B6\u02B9\x03" +
    "\x02\x02\x02\u02B7\u02B5\x03\x02\x02\x02\u02B7\u02B8\x03\x02\x02\x02\u02B8" +
    "\u02BB\x03\x02\x02\x02\u02B9\u02B7\x03\x02\x02\x02\u02BA\u02B3\x03\x02" +
    "\x02\x02\u02BB\u02BC\x03\x02\x02\x02\u02BC\u02BA\x03\x02\x02\x02\u02BC" +
    "\u02BD\x03\x02\x02\x02\u02BD\r\x03\x02\x02\x02\u02BE\u02BF\x077\x02\x02" +
    "\u02BF\u02C0\x05\u014C\xA7\x02\u02C0\u02C4\x07\xA4\x02\x02\u02C1\u02C3" +
    "\x07\xBD\x02\x02\u02C2\u02C1\x03\x02\x02\x02\u02C3\u02C6\x03\x02\x02\x02" +
    "\u02C4\u02C2\x03\x02\x02\x02\u02C4\u02C5\x03\x02\x02\x02\u02C5\u02CE\x03" +
    "\x02\x02\x02\u02C6\u02C4\x03\x02\x02\x02\u02C7\u02CB\x05T+\x02\u02C8\u02CA" +
    "\x07\xBD\x02\x02\u02C9\u02C8\x03\x02\x02\x02\u02CA\u02CD\x03\x02\x02\x02" +
    "\u02CB\u02C9\x03\x02\x02\x02\u02CB\u02CC\x03\x02\x02\x02\u02CC\u02CF\x03" +
    "\x02\x02\x02\u02CD\u02CB\x03\x02\x02\x02\u02CE\u02C7\x03\x02\x02\x02\u02CF" +
    "\u02D0\x03\x02\x02\x02\u02D0\u02CE\x03\x02\x02\x02\u02D0\u02D1\x03\x02" +
    "\x02\x02\u02D1\x0F\x03\x02\x02\x02\u02D2\u02D3\x078\x02\x02\u02D3\u02D4" +
    "\x05\u014C\xA7\x02\u02D4\u02D8\x07\xA4\x02\x02\u02D5\u02D7\x07\xBD\x02" +
    "\x02\u02D6\u02D5\x03\x02\x02\x02\u02D7\u02DA\x03\x02\x02\x02\u02D8\u02D6" +
    "\x03\x02\x02\x02\u02D8\u02D9\x03\x02\x02\x02\u02D9\u02E2\x03\x02\x02\x02" +
    "\u02DA\u02D8\x03\x02\x02\x02\u02DB\u02DF\x05T+\x02\u02DC\u02DE\x07\xBD" +
    "\x02\x02\u02DD\u02DC\x03\x02\x02\x02\u02DE\u02E1\x03\x02\x02\x02\u02DF" +
    "\u02DD\x03\x02\x02\x02\u02DF\u02E0\x03\x02\x02\x02\u02E0\u02E3\x03\x02" +
    "\x02\x02\u02E1\u02DF\x03\x02\x02\x02\u02E2\u02DB\x03\x02\x02\x02\u02E3" +
    "\u02E4\x03\x02\x02\x02\u02E4\u02E2\x03\x02\x02\x02\u02E4\u02E5\x03\x02" +
    "\x02\x02\u02E5\x11\x03\x02\x02\x02\u02E6\u02E7\x079\x02\x02\u02E7\u02E8" +
    "\x05\u014C\xA7\x02\u02E8\u02EC\x07\xA4\x02\x02\u02E9\u02EB\x07\xBD\x02" +
    "\x02\u02EA\u02E9\x03\x02\x02\x02\u02EB\u02EE\x03\x02\x02\x02\u02EC\u02EA" +
    "\x03\x02\x02\x02\u02EC\u02ED\x03\x02\x02\x02\u02ED\u02F6\x03\x02\x02\x02" +
    "\u02EE\u02EC\x03\x02\x02\x02\u02EF\u02F3\x05T+\x02\u02F0\u02F2\x07\xBD" +
    "\x02\x02\u02F1\u02F0\x03\x02\x02\x02\u02F2\u02F5\x03\x02\x02\x02\u02F3" +
    "\u02F1\x03\x02\x02\x02\u02F3\u02F4\x03\x02\x02\x02\u02F4\u02F7\x03\x02" +
    "\x02\x02\u02F5\u02F3\x03\x02\x02\x02\u02F6\u02EF\x03\x02\x02\x02\u02F7" +
    "\u02F8\x03\x02\x02\x02\u02F8\u02F6\x03\x02\x02\x02\u02F8\u02F9\x03\x02" +
    "\x02\x02\u02F9\x13\x03\x02\x02\x02\u02FA\u02FC\x07\x07\x02\x02\u02FB\u02FD" +
    "\x05\u01C0\xE1\x02\u02FC\u02FB\x03\x02\x02\x02\u02FC\u02FD\x03\x02\x02" +
    "\x02\u02FD\u02FE\x03\x02\x02\x02\u02FE\u02FF\x07\xA4\x02\x02\u02FF\u0303" +
    "\x07\xBD\x02\x02\u0300\u0301\x05\u01B6\xDC\x02\u0301\u0302\x07\xBD\x02" +
    "\x02\u0302\u0304\x03\x02\x02\x02\u0303\u0300\x03\x02\x02\x02\u0303\u0304" +
    "\x03\x02\x02\x02\u0304\x15\x03\x02\x02\x02\u0305\u0306\x07\b\x02\x02\u0306" +
    "\u030A\x07\xA4\x02\x02\u0307\u0309\x07\xBD\x02\x02\u0308\u0307\x03\x02" +
    "\x02\x02\u0309\u030C\x03\x02\x02\x02\u030A\u0308\x03\x02\x02\x02\u030A" +
    "\u030B\x03\x02\x02\x02\u030B\u030D\x03\x02\x02\x02\u030C\u030A\x03\x02" +
    "\x02\x02\u030D\u030E\x05\x1C\x0F\x02\u030E\x17\x03\x02\x02\x02\u030F\u0311" +
    "\t\x02\x02\x02\u0310\u0312\t\x03\x02\x02\u0311\u0310\x03\x02\x02\x02\u0311" +
    "\u0312\x03\x02\x02\x02\u0312\u0313\x03\x02\x02\x02\u0313\u031D\x07\xA4" +
    "\x02\x02\u0314\u0316\x07\xBD\x02\x02\u0315\u0314\x03\x02\x02\x02\u0316" +
    "\u0319\x03\x02\x02\x02\u0317\u0315\x03\x02\x02\x02\u0317\u0318\x03\x02" +
    "\x02\x02\u0318\u031A\x03\x02\x02\x02\u0319\u0317\x03\x02\x02\x02\u031A" +
    "\u031C\x05T+\x02\u031B\u0317\x03\x02\x02\x02\u031C\u031F\x03\x02\x02\x02" +
    "\u031D\u031B\x03\x02\x02\x02\u031D\u031E\x03\x02\x02\x02\u031E\x19\x03" +
    "\x02\x02\x02\u031F\u031D\x03\x02\x02\x02\u0320\u0321\x07\v\x02\x02\u0321" +
    "\u0322\x07\xA4\x02\x02\u0322\u0323\x05\u019A\xCE\x02\u0323\x1B\x03\x02" +
    "\x02\x02\u0324\u0326\x07\xBD\x02\x02\u0325\u0324\x03\x02\x02\x02\u0325" +
    "\u0326\x03\x02\x02\x02\u0326\u032E\x03\x02\x02\x02\u0327\u032F\x05\u01AC" +
    "\xD7\x02\u0328\u032F\x05\u01B6\xDC\x02\u0329\u032F\x05\u0196\xCC\x02\u032A" +
    "\u032F\x05\u01A8\xD5\x02\u032B\u032F\x05\u019A\xCE\x02\u032C\u032F\x05" +
    "\u01BC\xDF\x02\u032D\u032F\x05\u01A2\xD2\x02\u032E\u0327\x03\x02\x02\x02" +
    "\u032E\u0328\x03\x02\x02\x02\u032E\u0329\x03\x02\x02\x02\u032E\u032A\x03" +
    "\x02\x02\x02\u032E\u032B\x03\x02\x02\x02\u032E\u032C\x03\x02\x02\x02\u032E" +
    "\u032D\x03\x02\x02\x02\u032F\u0331\x03\x02\x02\x02\u0330\u0325\x03\x02" +
    "\x02\x02\u0331\u0334\x03\x02\x02\x02\u0332\u0330\x03\x02\x02\x02\u0332" +
    "\u0333\x03\x02\x02\x02\u0333\x1D\x03\x02\x02\x02\u0334\u0332\x03\x02\x02" +
    "\x02\u0335\u0336\x07\f\x02\x02\u0336\u0340\x07\xA4\x02\x02\u0337\u0338" +
    "\x07\xBD\x02\x02\u0338\u033B\t\x04\x02\x02\u0339\u033C\x05\u01C0\xE1\x02" +
    "\u033A\u033C\x07\xA5\x02\x02\u033B\u0339\x03\x02\x02\x02\u033B\u033A\x03" +
    "\x02\x02\x02\u033C\u033D\x03\x02\x02\x02\u033D\u033B\x03\x02\x02\x02\u033D" +
    "\u033E\x03\x02\x02\x02\u033E\u033F\x03\x02\x02\x02\u033F\u0341\x07\xA4" +
    "\x02\x02\u0340\u0337\x03\x02\x02\x02\u0341\u0342\x03\x02\x02\x02\u0342" +
    "\u0340\x03\x02\x02\x02\u0342\u0343\x03\x02\x02\x02\u0343\u0344\x03\x02" +
    "\x02\x02\u0344\u0348\x07\xBD\x02\x02\u0345\u0347\x05\u01BE\xE0\x02\u0346" +
    "\u0345\x03\x02\x02\x02\u0347\u034A\x03\x02\x02\x02\u0348\u0346\x03\x02" +
    "\x02\x02\u0348\u0349\x03\x02\x02\x02\u0349\x1F\x03\x02\x02\x02\u034A\u0348" +
    "\x03\x02\x02\x02\u034B\u034C\x07\r\x02\x02\u034C\u0356\x07\xA4\x02\x02" +
    "\u034D\u034E\x07\xBD\x02\x02\u034E\u0351\t\x04\x02\x02\u034F\u0352\x05" +
    "\u01C0\xE1\x02\u0350\u0352\x07\xA5\x02\x02\u0351\u034F\x03\x02\x02\x02" +
    "\u0351\u0350\x03\x02\x02\x02\u0352\u0353\x03\x02\x02\x02\u0353\u0351\x03" +
    "\x02\x02\x02\u0353\u0354\x03\x02\x02\x02\u0354\u0355\x03\x02\x02\x02\u0355" +
    "\u0357\x07\xA4\x02\x02\u0356\u034D\x03\x02\x02\x02\u0357\u0358\x03\x02" +
    "\x02\x02\u0358\u0356\x03\x02\x02\x02\u0358\u0359\x03\x02\x02\x02\u0359" +
    "\u035A\x03\x02\x02\x02\u035A\u035E\x07\xBD\x02\x02\u035B\u035D\x05\u01BE" +
    "\xE0\x02\u035C\u035B\x03\x02\x02\x02\u035D\u0360\x03\x02\x02\x02\u035E" +
    "\u035C\x03\x02\x02\x02\u035E\u035F\x03\x02\x02\x02\u035F!\x03\x02\x02" +
    "\x02\u0360\u035E\x03\x02\x02\x02\u0361\u0362\x07:\x02\x02\u0362\u0363" +
    "\x05\u014C\xA7\x02\u0363\u0367\x07\xA4\x02\x02\u0364\u0366\x07\xBD\x02" +
    "\x02\u0365\u0364\x03\x02\x02\x02\u0366\u0369\x03\x02\x02\x02\u0367\u0365" +
    "\x03\x02\x02\x02\u0367\u0368\x03\x02\x02\x02\u0368\u0371\x03\x02\x02\x02" +
    "\u0369\u0367\x03\x02\x02\x02\u036A\u036E\x05T+\x02\u036B\u036D\x07\xBD" +
    "\x02\x02\u036C\u036B\x03\x02\x02\x02\u036D\u0370\x03\x02\x02\x02\u036E" +
    "\u036C\x03\x02\x02\x02\u036E\u036F\x03\x02\x02\x02\u036F\u0372\x03\x02" +
    "\x02\x02\u0370\u036E\x03\x02\x02\x02\u0371\u036A\x03\x02\x02\x02\u0372" +
    "\u0373\x03\x02\x02\x02\u0373\u0371\x03\x02\x02\x02\u0373\u0374\x03\x02" +
    "\x02\x02\u0374#\x03\x02\x02\x02\u0375\u0376\x07;\x02\x02\u0376\u0377\x05" +
    "\u014C\xA7\x02\u0377\u037B\x07\xA4\x02\x02\u0378\u037A\x07\xBD\x02\x02" +
    "\u0379\u0378\x03\x02\x02\x02\u037A\u037D\x03\x02\x02\x02\u037B\u0379\x03" +
    "\x02\x02\x02\u037B\u037C\x03\x02\x02\x02\u037C\u0385\x03\x02\x02\x02\u037D" +
    "\u037B\x03\x02\x02\x02\u037E\u0382\x05T+\x02\u037F\u0381\x07\xBD\x02\x02" +
    "\u0380\u037F\x03\x02\x02\x02\u0381\u0384\x03\x02\x02\x02\u0382\u0380\x03" +
    "\x02\x02\x02\u0382\u0383\x03\x02\x02\x02\u0383\u0386\x03\x02\x02\x02\u0384" +
    "\u0382\x03\x02\x02\x02\u0385\u037E\x03\x02\x02\x02\u0386\u0387\x03\x02" +
    "\x02\x02\u0387\u0385\x03\x02\x02\x02\u0387\u0388\x03\x02\x02\x02\u0388" +
    "%\x03\x02\x02\x02\u0389\u038A\x07<\x02\x02\u038A\u038B\x05\u014C\xA7\x02" +
    "\u038B\u038F\x07\xA4\x02\x02\u038C\u038E\x07\xBD\x02\x02\u038D\u038C\x03" +
    "\x02\x02\x02\u038E\u0391\x03\x02\x02\x02\u038F\u038D\x03\x02\x02\x02\u038F" +
    "\u0390\x03\x02\x02\x02\u0390\u0399\x03\x02\x02\x02\u0391\u038F\x03\x02" +
    "\x02\x02\u0392\u0396\x05T+\x02\u0393\u0395\x07\xBD\x02\x02\u0394\u0393" +
    "\x03\x02\x02\x02\u0395\u0398\x03\x02\x02\x02\u0396\u0394\x03\x02\x02\x02" +
    "\u0396\u0397\x03\x02\x02\x02\u0397\u039A\x03\x02\x02\x02\u0398\u0396\x03" +
    "\x02\x02\x02\u0399\u0392\x03\x02\x02\x02\u039A\u039B\x03\x02\x02\x02\u039B" +
    "\u0399\x03\x02\x02\x02\u039B\u039C\x03\x02\x02\x02\u039C\'\x03\x02\x02" +
    "\x02\u039D\u039E\x07=\x02\x02\u039E\u039F\x05\u014C\xA7\x02\u039F\u03A3" +
    "\x07\xA4\x02\x02\u03A0\u03A2\x07\xBD\x02\x02\u03A1\u03A0\x03\x02\x02\x02" +
    "\u03A2\u03A5\x03\x02\x02\x02\u03A3\u03A1\x03\x02\x02\x02\u03A3\u03A4\x03" +
    "\x02\x02\x02\u03A4\u03AD\x03\x02\x02\x02\u03A5\u03A3\x03\x02\x02\x02\u03A6" +
    "\u03AA\x05T+\x02\u03A7\u03A9\x07\xBD\x02\x02\u03A8\u03A7\x03\x02\x02\x02" +
    "\u03A9\u03AC\x03\x02\x02\x02\u03AA\u03A8\x03\x02\x02\x02\u03AA\u03AB\x03" +
    "\x02\x02\x02\u03AB\u03AE\x03\x02\x02\x02\u03AC\u03AA\x03\x02\x02\x02\u03AD" +
    "\u03A6\x03\x02\x02\x02\u03AE\u03AF\x03\x02\x02\x02\u03AF\u03AD\x03\x02" +
    "\x02\x02\u03AF\u03B0\x03\x02\x02\x02\u03B0)\x03\x02\x02\x02\u03B1\u03B2" +
    "\x07>\x02\x02\u03B2\u03B3\x05\u014C\xA7\x02\u03B3\u03B7\x07\xA4\x02\x02" +
    "\u03B4\u03B6\x07\xBD\x02\x02\u03B5\u03B4\x03\x02\x02\x02\u03B6\u03B9\x03" +
    "\x02\x02\x02\u03B7\u03B5\x03\x02\x02\x02\u03B7\u03B8\x03\x02\x02\x02\u03B8" +
    "\u03C1\x03\x02\x02\x02\u03B9\u03B7\x03\x02\x02\x02\u03BA\u03BE\x05T+\x02" +
    "\u03BB\u03BD\x07\xBD\x02\x02\u03BC\u03BB\x03\x02\x02\x02\u03BD\u03C0\x03" +
    "\x02\x02\x02\u03BE\u03BC\x03\x02\x02\x02\u03BE\u03BF\x03\x02\x02\x02\u03BF" +
    "\u03C2\x03\x02\x02\x02\u03C0\u03BE\x03\x02\x02\x02\u03C1\u03BA\x03\x02" +
    "\x02\x02\u03C2\u03C3\x03\x02\x02\x02\u03C3\u03C1\x03\x02\x02\x02\u03C3" +
    "\u03C4\x03\x02\x02\x02\u03C4+\x03\x02\x02\x02\u03C5\u03C6\x07?\x02\x02" +
    "\u03C6\u03C7\x05\u014C\xA7\x02\u03C7\u03CB\x07\xA4\x02\x02\u03C8\u03CA" +
    "\x07\xBD\x02\x02\u03C9\u03C8\x03\x02\x02\x02\u03CA\u03CD\x03\x02\x02\x02" +
    "\u03CB\u03C9\x03\x02\x02\x02\u03CB\u03CC\x03\x02\x02\x02\u03CC\u03D5\x03" +
    "\x02\x02\x02\u03CD\u03CB\x03\x02\x02\x02\u03CE\u03D2\x05T+\x02\u03CF\u03D1" +
    "\x07\xBD\x02\x02\u03D0\u03CF\x03\x02\x02\x02\u03D1\u03D4\x03\x02\x02\x02" +
    "\u03D2\u03D0\x03\x02\x02\x02\u03D2\u03D3\x03\x02\x02\x02\u03D3\u03D6\x03" +
    "\x02\x02\x02\u03D4\u03D2\x03\x02\x02\x02\u03D5\u03CE\x03\x02\x02\x02\u03D6" +
    "\u03D7\x03\x02\x02\x02\u03D7\u03D5\x03\x02\x02\x02\u03D7\u03D8\x03\x02" +
    "\x02\x02\u03D8-\x03\x02\x02\x02\u03D9\u03DA\x07@\x02\x02\u03DA\u03DB\x05" +
    "\u014C\xA7\x02\u03DB\u03DF\x07\xA4\x02\x02\u03DC\u03DE\x07\xBD\x02\x02" +
    "\u03DD\u03DC\x03\x02\x02\x02\u03DE\u03E1\x03\x02\x02\x02\u03DF\u03DD\x03" +
    "\x02\x02\x02\u03DF\u03E0\x03\x02\x02\x02\u03E0\u03E9\x03\x02\x02\x02\u03E1" +
    "\u03DF\x03\x02\x02\x02\u03E2\u03E6\x05T+\x02\u03E3\u03E5\x07\xBD\x02\x02" +
    "\u03E4\u03E3\x03\x02\x02\x02\u03E5\u03E8\x03\x02\x02\x02\u03E6\u03E4\x03" +
    "\x02\x02\x02\u03E6\u03E7\x03\x02\x02\x02\u03E7\u03EA\x03\x02\x02\x02\u03E8" +
    "\u03E6\x03\x02\x02\x02\u03E9\u03E2\x03\x02\x02\x02\u03EA\u03EB\x03\x02" +
    "\x02\x02\u03EB\u03E9\x03\x02\x02\x02\u03EB\u03EC\x03\x02\x02\x02\u03EC" +
    "/\x03\x02\x02\x02\u03ED\u03EE\x07A\x02\x02\u03EE\u03EF\x05\u014C\xA7\x02" +
    "\u03EF\u03F3\x07\xA4\x02\x02\u03F0\u03F2\x07\xBD\x02\x02\u03F1\u03F0\x03" +
    "\x02\x02\x02\u03F2\u03F5\x03\x02\x02\x02\u03F3\u03F1\x03\x02\x02\x02\u03F3" +
    "\u03F4\x03\x02\x02\x02\u03F4\u03FD\x03\x02\x02\x02\u03F5\u03F3\x03\x02" +
    "\x02\x02\u03F6\u03FA\x05T+\x02\u03F7\u03F9\x07\xBD\x02\x02\u03F8\u03F7" +
    "\x03\x02\x02\x02\u03F9\u03FC\x03\x02\x02\x02\u03FA\u03F8\x03\x02\x02\x02" +
    "\u03FA\u03FB\x03\x02\x02\x02\u03FB\u03FE\x03\x02\x02\x02\u03FC\u03FA\x03" +
    "\x02\x02\x02\u03FD\u03F6\x03\x02\x02\x02\u03FE\u03FF\x03\x02\x02\x02\u03FF" +
    "\u03FD\x03\x02\x02\x02\u03FF\u0400\x03\x02\x02\x02\u04001\x03\x02\x02" +
    "\x02\u0401\u0402\x07B\x02\x02\u0402\u0403\x05\u014C\xA7\x02\u0403\u0407" +
    "\x07\xA4\x02\x02\u0404\u0406\x07\xBD\x02\x02\u0405\u0404\x03\x02\x02\x02" +
    "\u0406\u0409\x03\x02\x02\x02\u0407\u0405\x03\x02\x02\x02\u0407\u0408\x03" +
    "\x02\x02\x02\u0408\u0411\x03\x02\x02\x02\u0409\u0407\x03\x02\x02\x02\u040A" +
    "\u040E\x05T+\x02\u040B\u040D\x07\xBD\x02\x02\u040C\u040B\x03\x02\x02\x02" +
    "\u040D\u0410\x03\x02\x02\x02\u040E\u040C\x03\x02\x02\x02\u040E\u040F\x03" +
    "\x02\x02\x02\u040F\u0412\x03\x02\x02\x02\u0410\u040E\x03\x02\x02\x02\u0411" +
    "\u040A\x03\x02\x02\x02\u0412\u0413\x03\x02\x02\x02\u0413\u0411\x03\x02" +
    "\x02\x02\u0413\u0414\x03\x02\x02\x02\u04143\x03\x02\x02\x02\u0415\u0416" +
    "\x07C\x02\x02\u0416\u0417\x05\u014C\xA7\x02\u0417\u041B\x07\xA4\x02\x02" +
    "\u0418\u041A\x07\xBD\x02\x02\u0419\u0418\x03\x02\x02\x02\u041A\u041D\x03" +
    "\x02\x02\x02\u041B\u0419\x03\x02\x02\x02\u041B\u041C\x03\x02\x02\x02\u041C" +
    "\u0425\x03\x02\x02\x02\u041D\u041B\x03\x02\x02\x02\u041E\u0422\x05T+\x02" +
    "\u041F\u0421\x07\xBD\x02\x02\u0420\u041F\x03\x02\x02\x02\u0421\u0424\x03" +
    "\x02\x02\x02\u0422\u0420\x03\x02\x02\x02\u0422\u0423\x03\x02\x02\x02\u0423" +
    "\u0426\x03\x02\x02\x02\u0424\u0422\x03\x02\x02\x02\u0425\u041E\x03\x02" +
    "\x02\x02\u0426\u0427\x03\x02\x02\x02\u0427\u0425\x03\x02\x02\x02\u0427" +
    "\u0428\x03\x02\x02\x02\u04285\x03\x02\x02\x02\u0429\u042A\x07D\x02\x02" +
    "\u042A\u042B\x05\u014C\xA7\x02\u042B\u042F\x07\xA4\x02\x02\u042C\u042E" +
    "\x07\xBD\x02\x02\u042D\u042C\x03\x02\x02\x02\u042E\u0431\x03\x02\x02\x02" +
    "\u042F\u042D\x03\x02\x02\x02\u042F\u0430\x03\x02\x02\x02\u0430\u0439\x03" +
    "\x02\x02\x02\u0431\u042F\x03\x02\x02\x02\u0432\u0436\x05T+\x02\u0433\u0435" +
    "\x07\xBD\x02\x02\u0434\u0433\x03\x02\x02\x02\u0435\u0438\x03\x02\x02\x02" +
    "\u0436\u0434\x03\x02\x02\x02\u0436\u0437\x03\x02\x02\x02\u0437\u043A\x03" +
    "\x02\x02\x02\u0438\u0436\x03\x02\x02\x02\u0439\u0432\x03\x02\x02\x02\u043A" +
    "\u043B\x03\x02\x02\x02\u043B\u0439\x03\x02\x02\x02\u043B\u043C\x03\x02" +
    "\x02\x02\u043C7\x03\x02\x02\x02\u043D\u043E\x07E\x02\x02\u043E\u043F\x05" +
    "\u014C\xA7\x02\u043F\u0443\x07\xA4\x02\x02\u0440\u0442\x07\xBD\x02\x02" +
    "\u0441\u0440\x03\x02\x02\x02\u0442\u0445\x03\x02\x02\x02\u0443\u0441\x03" +
    "\x02\x02\x02\u0443\u0444\x03\x02\x02\x02\u0444\u044D\x03\x02\x02\x02\u0445" +
    "\u0443\x03\x02\x02\x02\u0446\u044A\x05T+\x02\u0447\u0449\x07\xBD\x02\x02" +
    "\u0448\u0447\x03\x02\x02\x02\u0449\u044C\x03\x02\x02\x02\u044A\u0448\x03" +
    "\x02\x02\x02\u044A\u044B\x03\x02\x02\x02\u044B\u044E\x03\x02\x02\x02\u044C" +
    "\u044A\x03\x02\x02\x02\u044D\u0446\x03\x02\x02\x02\u044E\u044F\x03\x02" +
    "\x02\x02\u044F\u044D\x03\x02\x02\x02\u044F\u0450\x03\x02\x02\x02\u0450" +
    "9\x03\x02\x02\x02\u0451\u0452\x07F\x02\x02\u0452\u0453\x05\u014C\xA7\x02" +
    "\u0453\u0457\x07\xA4\x02\x02\u0454\u0456\x07\xBD\x02\x02\u0455\u0454\x03" +
    "\x02\x02\x02\u0456\u0459\x03\x02\x02\x02\u0457\u0455\x03\x02\x02\x02\u0457" +
    "\u0458\x03\x02\x02\x02\u0458\u0461\x03\x02\x02\x02\u0459\u0457\x03\x02" +
    "\x02\x02\u045A\u045E\x05T+\x02\u045B\u045D\x07\xBD\x02\x02\u045C\u045B" +
    "\x03\x02\x02\x02\u045D\u0460\x03\x02\x02\x02\u045E\u045C\x03\x02\x02\x02" +
    "\u045E\u045F\x03\x02\x02\x02\u045F\u0462\x03\x02\x02\x02\u0460\u045E\x03" +
    "\x02\x02\x02\u0461\u045A\x03\x02\x02\x02\u0462\u0463\x03\x02\x02\x02\u0463" +
    "\u0461\x03\x02\x02\x02\u0463\u0464\x03\x02\x02\x02\u0464;\x03\x02\x02" +
    "\x02\u0465\u0466\x07G\x02\x02\u0466\u0467\x05\u014C\xA7\x02\u0467\u046B" +
    "\x07\xA4\x02\x02\u0468\u046A\x07\xBD\x02\x02\u0469\u0468\x03\x02\x02\x02" +
    "\u046A\u046D\x03\x02\x02\x02\u046B\u0469\x03\x02\x02\x02\u046B\u046C\x03" +
    "\x02\x02\x02\u046C\u0475\x03\x02\x02\x02\u046D\u046B\x03\x02\x02\x02\u046E" +
    "\u0472\x05T+\x02\u046F\u0471\x07\xBD\x02\x02\u0470\u046F\x03\x02\x02\x02" +
    "\u0471\u0474\x03\x02\x02\x02\u0472\u0470\x03\x02\x02\x02\u0472\u0473\x03" +
    "\x02\x02\x02\u0473\u0476\x03\x02\x02\x02\u0474\u0472\x03\x02\x02\x02\u0475" +
    "\u046E\x03\x02\x02\x02\u0476\u0477\x03\x02\x02\x02\u0477\u0475\x03\x02" +
    "\x02\x02\u0477\u0478\x03\x02\x02\x02\u0478=\x03\x02\x02\x02\u0479\u047A" +
    "\x07H\x02\x02\u047A\u047B\x05\u014C\xA7\x02\u047B\u047F\x07\xA4\x02\x02" +
    "\u047C\u047E\x07\xBD\x02\x02\u047D\u047C\x03\x02\x02\x02\u047E\u0481\x03" +
    "\x02\x02\x02\u047F\u047D\x03\x02\x02\x02\u047F\u0480\x03\x02\x02\x02\u0480" +
    "\u0489\x03\x02\x02\x02\u0481\u047F\x03\x02\x02\x02\u0482\u0486\x05T+\x02" +
    "\u0483\u0485\x07\xBD\x02\x02\u0484\u0483\x03\x02\x02\x02\u0485\u0488\x03" +
    "\x02\x02\x02\u0486\u0484\x03\x02\x02\x02\u0486\u0487\x03\x02\x02\x02\u0487" +
    "\u048A\x03\x02\x02\x02\u0488\u0486\x03\x02\x02\x02\u0489\u0482\x03\x02" +
    "\x02\x02\u048A\u048B\x03\x02\x02\x02\u048B\u0489\x03\x02\x02\x02\u048B" +
    "\u048C\x03\x02\x02\x02\u048C?\x03\x02\x02\x02\u048D\u048E\x07I\x02\x02" +
    "\u048E\u048F\x05\u014C\xA7\x02\u048F\u0493\x07\xA4\x02\x02\u0490\u0492" +
    "\x07\xBD\x02\x02\u0491\u0490\x03\x02\x02\x02\u0492\u0495\x03\x02\x02\x02" +
    "\u0493\u0491\x03\x02\x02\x02\u0493\u0494\x03\x02\x02\x02\u0494\u049D\x03" +
    "\x02\x02\x02\u0495\u0493\x03\x02\x02\x02\u0496\u049A\x05T+\x02\u0497\u0499" +
    "\x07\xBD\x02\x02\u0498\u0497\x03\x02\x02\x02\u0499\u049C\x03\x02\x02\x02" +
    "\u049A\u0498\x03\x02\x02\x02\u049A\u049B\x03\x02\x02\x02\u049B\u049E\x03" +
    "\x02\x02\x02\u049C\u049A\x03\x02\x02\x02\u049D\u0496\x03\x02\x02\x02\u049E" +
    "\u049F\x03\x02\x02\x02\u049F\u049D\x03\x02\x02\x02\u049F\u04A0\x03\x02" +
    "\x02\x02\u04A0A\x03\x02\x02\x02\u04A1\u04A2\x07\x87\x02\x02\u04A2\u04A3" +
    "\x05\u014C\xA7\x02\u04A3\u04A7\x07\xA4\x02\x02\u04A4\u04A6\x07\xBD\x02" +
    "\x02\u04A5\u04A4\x03\x02\x02\x02\u04A6\u04A9\x03\x02\x02\x02\u04A7\u04A5" +
    "\x03\x02\x02\x02\u04A7\u04A8\x03\x02\x02\x02\u04A8\u04B3\x03\x02\x02\x02" +
    "\u04A9\u04A7\x03\x02\x02\x02\u04AA\u04AE\x05T+\x02\u04AB\u04AD\x07\xBD" +
    "\x02\x02\u04AC\u04AB\x03\x02\x02\x02\u04AD\u04B0\x03\x02\x02\x02\u04AE" +
    "\u04AC\x03\x02\x02\x02\u04AE\u04AF\x03\x02\x02\x02\u04AF\u04B2\x03\x02" +
    "\x02\x02\u04B0\u04AE\x03\x02\x02\x02\u04B1\u04AA\x03\x02\x02\x02\u04B2" +
    "\u04B5\x03\x02\x02\x02\u04B3\u04B1\x03\x02\x02\x02\u04B3\u04B4\x03\x02" +
    "\x02\x02\u04B4\u04B7\x03\x02\x02\x02\u04B5\u04B3\x03\x02\x02\x02\u04B6" +
    "\u04B8\x05J&\x02\u04B7\u04B6\x03\x02\x02\x02\u04B8\u04B9\x03\x02\x02\x02" +
    "\u04B9\u04B7\x03\x02\x02\x02\u04B9\u04BA\x03\x02\x02\x02\u04BA\u04BB\x03" +
    "\x02\x02\x02\u04BB\u04BD\x07\xAF\x02\x02\u04BC\u04BE\x05R*\x02\u04BD\u04BC" +
    "\x03\x02\x02\x02\u04BD\u04BE\x03\x02\x02\x02\u04BE\u04C2\x03\x02\x02\x02" +
    "\u04BF\u04C1\x07\xBD\x02\x02\u04C0\u04BF\x03\x02\x02\x02\u04C1\u04C4\x03" +
    "\x02\x02\x02\u04C2\u04C0\x03\x02\x02\x02\u04C2\u04C3\x03\x02\x02\x02\u04C3" +
    "C\x03\x02\x02\x02\u04C4\u04C2\x03\x02\x02\x02\u04C5\u04C6\x07\x88\x02" +
    "\x02\u04C6\u04C7\x05\u014C\xA7\x02\u04C7\u04CB\x07\xA4\x02\x02\u04C8\u04CA" +
    "\x07\xBD\x02\x02\u04C9\u04C8\x03\x02\x02\x02\u04CA\u04CD\x03\x02\x02\x02" +
    "\u04CB\u04C9\x03\x02\x02\x02\u04CB\u04CC\x03\x02\x02\x02\u04CC\u04D7\x03" +
    "\x02\x02\x02\u04CD\u04CB\x03\x02\x02\x02\u04CE\u04D2\x05T+\x02\u04CF\u04D1" +
    "\x07\xBD\x02\x02\u04D0\u04CF\x03\x02\x02\x02\u04D1\u04D4\x03\x02\x02\x02" +
    "\u04D2\u04D0\x03\x02\x02\x02\u04D2\u04D3\x03\x02\x02\x02\u04D3\u04D6\x03" +
    "\x02\x02\x02\u04D4\u04D2\x03\x02\x02\x02\u04D5\u04CE\x03\x02\x02\x02\u04D6" +
    "\u04D9\x03\x02\x02\x02\u04D7\u04D5\x03\x02\x02\x02\u04D7\u04D8\x03\x02" +
    "\x02\x02\u04D8\u04DB\x03\x02\x02\x02\u04D9\u04D7\x03\x02\x02\x02\u04DA" +
    "\u04DC\x05J&\x02\u04DB\u04DA\x03\x02\x02\x02\u04DC\u04DD\x03\x02\x02\x02" +
    "\u04DD\u04DB\x03\x02\x02\x02\u04DD\u04DE\x03\x02\x02\x02\u04DE\u04DF\x03" +
    "\x02\x02\x02\u04DF\u04E1\x07\xAF\x02\x02\u04E0\u04E2\x05R*\x02\u04E1\u04E0" +
    "\x03\x02\x02\x02\u04E1\u04E2\x03\x02\x02\x02\u04E2\u04E6\x03\x02\x02\x02" +
    "\u04E3\u04E5\x07\xBD\x02\x02\u04E4\u04E3\x03\x02\x02\x02\u04E5\u04E8\x03" +
    "\x02\x02\x02\u04E6\u04E4\x03\x02\x02\x02\u04E6\u04E7\x03\x02\x02\x02\u04E7" +
    "E\x03\x02\x02\x02\u04E8\u04E6\x03\x02\x02\x02\u04E9\u04EA\x07\x89\x02" +
    "\x02\u04EA\u04EB\x05\u014C\xA7\x02\u04EB\u04EF\x07\xA4\x02\x02\u04EC\u04EE" +
    "\x07\xBD\x02\x02\u04ED\u04EC\x03\x02\x02\x02\u04EE\u04F1\x03\x02\x02\x02" +
    "\u04EF\u04ED\x03\x02\x02\x02\u04EF\u04F0\x03\x02\x02\x02\u04F0\u04FB\x03" +
    "\x02\x02\x02\u04F1\u04EF\x03\x02\x02\x02\u04F2\u04F6\x05T+\x02\u04F3\u04F5" +
    "\x07\xBD\x02\x02\u04F4\u04F3\x03\x02\x02\x02\u04F5\u04F8\x03\x02\x02\x02" +
    "\u04F6\u04F4\x03\x02\x02\x02\u04F6\u04F7\x03\x02\x02\x02\u04F7\u04FA\x03" +
    "\x02\x02\x02\u04F8\u04F6\x03\x02\x02\x02\u04F9\u04F2\x03\x02\x02\x02\u04FA" +
    "\u04FD\x03\x02\x02\x02\u04FB\u04F9\x03\x02\x02\x02\u04FB\u04FC\x03\x02" +
    "\x02\x02\u04FC\u04FF\x03\x02\x02\x02\u04FD\u04FB\x03\x02\x02\x02\u04FE" +
    "\u0500\x05J&\x02\u04FF\u04FE\x03\x02\x02\x02\u0500\u0501\x03\x02\x02\x02" +
    "\u0501\u04FF\x03\x02\x02\x02\u0501\u0502\x03\x02\x02\x02\u0502\u0503\x03" +
    "\x02\x02\x02\u0503\u0505\x07\xAF\x02\x02\u0504\u0506\x05R*\x02\u0505\u0504" +
    "\x03\x02\x02\x02\u0505\u0506\x03\x02\x02\x02\u0506\u050A\x03\x02\x02\x02" +
    "\u0507\u0509\x07\xBD\x02\x02\u0508\u0507\x03\x02\x02\x02\u0509\u050C\x03" +
    "\x02\x02\x02\u050A\u0508\x03\x02\x02\x02\u050A\u050B\x03\x02\x02\x02\u050B" +
    "G\x03\x02\x02\x02\u050C\u050A\x03\x02\x02\x02\u050D\u050E\x07\x8A\x02" +
    "\x02\u050E\u050F\x05\u014C\xA7\x02\u050F\u0513\x07\xA4\x02\x02\u0510\u0512" +
    "\x07\xBD\x02\x02\u0511\u0510\x03\x02\x02\x02\u0512\u0515\x03\x02\x02\x02" +
    "\u0513\u0511\x03\x02\x02\x02\u0513\u0514\x03\x02\x02\x02\u0514\u051F\x03" +
    "\x02\x02\x02\u0515\u0513\x03\x02\x02\x02\u0516\u051A\x05T+\x02\u0517\u0519" +
    "\x07\xBD\x02\x02\u0518\u0517\x03\x02\x02\x02\u0519\u051C\x03\x02\x02\x02" +
    "\u051A\u0518\x03\x02\x02\x02\u051A\u051B\x03\x02\x02\x02\u051B\u051E\x03" +
    "\x02\x02\x02\u051C\u051A\x03\x02\x02\x02\u051D\u0516\x03\x02\x02\x02\u051E" +
    "\u0521\x03\x02\x02\x02\u051F\u051D\x03\x02\x02\x02\u051F\u0520\x03\x02" +
    "\x02\x02\u0520I\x03\x02\x02\x02\u0521\u051F\x03\x02\x02\x02\u0522\u0523" +
    "\x07\xAF\x02\x02\u0523\u0524\x05L\'\x02\u0524K\x03\x02\x02\x02\u0525\u0527" +
    "\x07\xBD\x02\x02\u0526\u0525\x03\x02\x02\x02\u0527\u052A\x03\x02\x02\x02" +
    "\u0528\u0526\x03\x02\x02\x02\u0528\u0529\x03\x02\x02\x02\u0529\u052B\x03" +
    "\x02\x02\x02\u052A\u0528\x03\x02\x02\x02\u052B\u052F\x05N(\x02\u052C\u052E" +
    "\x07\xBD\x02\x02\u052D\u052C\x03\x02\x02\x02\u052E\u0531\x03\x02\x02\x02" +
    "\u052F\u052D\x03\x02\x02\x02\u052F\u0530\x03\x02\x02\x02\u0530\u0533\x03" +
    "\x02\x02\x02\u0531\u052F\x03\x02\x02\x02\u0532\u0528\x03\x02\x02\x02\u0533" +
    "\u0534\x03\x02\x02\x02\u0534\u0532\x03\x02\x02\x02\u0534\u0535\x03\x02" +
    "\x02\x02\u0535M\x03\x02\x02\x02\u0536\u053E\x05\u01A8\xD5\x02\u0537\u053E" +
    "\x05\u0196\xCC\x02\u0538\u053E\x05\u01B6\xDC\x02\u0539\u053E\x05\u01AA" +
    "\xD6\x02\u053A\u053E\x05\\/\x02\u053B\u053E\x05Z.\x02\u053C\u053E\x05" +
    "P)\x02\u053D\u0536\x03\x02\x02\x02\u053D\u0537\x03\x02\x02\x02\u053D\u0538" +
    "\x03\x02\x02\x02\u053D\u0539\x03\x02\x02\x02\u053D\u053A\x03\x02\x02\x02" +
    "\u053D\u053B\x03\x02\x02\x02\u053D\u053C\x03\x02\x02\x02\u053EO\x03\x02" +
    "\x02\x02\u053F\u0542\x07\u012B\x02\x02\u0540\u0542\x05\u01C0\xE1\x02\u0541" +
    "\u053F\x03\x02\x02\x02\u0541\u0540\x03\x02\x02\x02\u0542Q\x03\x02\x02" +
    "\x02\u0543\u0545\x07\xBD\x02\x02\u0544\u0543\x03\x02\x02\x02\u0545\u0548" +
    "\x03\x02\x02\x02\u0546\u0544\x03\x02\x02\x02\u0546\u0547\x03\x02\x02\x02" +
    "\u0547\u0549\x03\x02\x02\x02\u0548\u0546\x03\x02\x02\x02\u0549\u054B\x05" +
    "\u01C0\xE1\x02\u054A\u0546\x03\x02\x02\x02\u054B\u054C\x03\x02\x02\x02" +
    "\u054C\u054A\x03\x02\x02\x02\u054C\u054D\x03\x02\x02\x02\u054DS\x03\x02" +
    "\x02\x02\u054E\u056F\x07\u012A\x02\x02\u054F\u056F\x07\xBE\x02\x02\u0550" +
    "\u056F\x05\u01C2\xE2\x02\u0551\u056F\x05V,\x02\u0552\u056F\x05\u01A0\xD1" +
    "\x02\u0553\u056F\x05\u01A4\xD3\x02\u0554\u056F\x05\u01A2\xD2\x02\u0555" +
    "\u056F\x05\u01B6\xDC\x02\u0556\u056F\x05\u01BA\xDE\x02\u0557\u056F\x05" +
    "d3\x02\u0558\u056F\x05\u0196\xCC\x02\u0559\u056F\x05\u01AC\xD7\x02\u055A" +
    "\u056F\x05\u01A8\xD5\x02\u055B\u056F\x05\u01AA\xD6\x02\u055C\u056F\x05" +
    "\u01C0\xE1\x02\u055D\u056F\x05\u019C\xCF\x02\u055E\u056F\x05\u01AE\xD8" +
    "\x02\u055F\u056F\x05\u01B0\xD9\x02\u0560\u056F\x05\u01B2\xDA\x02\u0561" +
    "\u056F\x05\u01B4\xDB\x02\u0562\u056F\x05\u017E\xC0\x02\u0563\u056F\x05" +
    "\u0188\xC5\x02\u0564\u056F\x05\u017A\xBE\x02\u0565\u056F\x05\u016E\xB8" +
    "\x02\u0566\u056F\x05\u0170\xB9\x02\u0567\u056F\x05\u0174\xBB\x02\u0568" +
    "\u056F\x05\u0172\xBA\x02\u0569\u056F\x05\u0176\xBC\x02\u056A\u056F\x05" +
    "\u019A\xCE\x02\u056B\u056F\x05\u01BC\xDF\x02\u056C\u056F\x05\u019E\xD0" +
    "\x02\u056D\u056F\x05\u01CA\xE6\x02\u056E\u054E\x03\x02\x02\x02\u056E\u054F" +
    "\x03\x02\x02\x02\u056E\u0550\x03\x02\x02\x02\u056E\u0551\x03\x02\x02\x02" +
    "\u056E\u0552\x03\x02\x02\x02\u056E\u0553\x03\x02\x02\x02\u056E\u0554\x03" +
    "\x02\x02\x02\u056E\u0555\x03\x02\x02\x02\u056E\u0556\x03\x02\x02\x02\u056E" +
    "\u0557\x03\x02\x02\x02\u056E\u0558\x03\x02\x02\x02\u056E\u0559\x03\x02" +
    "\x02\x02\u056E\u055A\x03\x02\x02\x02\u056E\u055B\x03\x02\x02\x02\u056E" +
    "\u055C\x03\x02\x02\x02\u056E\u055D\x03\x02\x02\x02";
bitmarkParser._serializedATNSegment4 = "\u056E\u055E\x03\x02\x02\x02\u056E\u055F\x03\x02\x02\x02\u056E\u0560\x03" +
    "\x02\x02\x02\u056E\u0561\x03\x02\x02\x02\u056E\u0562\x03\x02\x02\x02\u056E" +
    "\u0563\x03\x02\x02\x02\u056E\u0564\x03\x02\x02\x02\u056E\u0565\x03\x02" +
    "\x02\x02\u056E\u0566\x03\x02\x02\x02\u056E\u0567\x03\x02\x02\x02\u056E" +
    "\u0568\x03\x02\x02\x02\u056E\u0569\x03\x02\x02\x02\u056E\u056A\x03\x02" +
    "\x02\x02\u056E\u056B\x03\x02\x02\x02\u056E\u056C\x03\x02\x02\x02\u056E" +
    "\u056D\x03\x02\x02\x02\u056FU\x03\x02\x02\x02\u0570\u0578\x05X-\x02\u0571" +
    "\u0577\x05X-\x02\u0572\u0577\x05\u01A8\xD5\x02\u0573\u0577\x05\u01AA\xD6" +
    "\x02\u0574\u0577\x05\u0196\xCC\x02\u0575\u0577\x05\u019C\xCF\x02\u0576" +
    "\u0571\x03\x02\x02\x02\u0576\u0572\x03\x02\x02\x02\u0576\u0573\x03\x02" +
    "\x02\x02\u0576\u0574\x03\x02\x02\x02\u0576\u0575\x03\x02\x02\x02\u0577" +
    "\u057A\x03\x02\x02\x02\u0578\u0576\x03\x02\x02\x02\u0578\u0579\x03\x02" +
    "\x02\x02\u0579W\x03\x02\x02\x02\u057A\u0578\x03\x02\x02\x02\u057B\u057F" +
    "\x07\x9A\x02\x02\u057C\u0580\x07\xBB\x02\x02\u057D\u0580\x07\xBC\x02\x02" +
    "\u057E\u0580\x03\x02\x02\x02\u057F\u057C\x03\x02\x02\x02\u057F\u057D\x03" +
    "\x02\x02\x02\u057F\u057E\x03\x02\x02\x02\u0580\u0584\x03\x02\x02\x02\u0581" +
    "\u0583\x05\u01C0\xE1\x02\u0582\u0581\x03\x02\x02\x02\u0583\u0586\x03\x02" +
    "\x02\x02\u0584\u0582\x03\x02\x02\x02\u0584\u0585\x03\x02\x02\x02\u0585" +
    "\u0587\x03\x02\x02\x02\u0586\u0584\x03\x02\x02\x02\u0587\u0588\x05\u01C4" +
    "\xE3\x02\u0588Y\x03\x02\x02\x02\u0589\u058B\x05\u0196\xCC\x02\u058A\u0589" +
    "\x03\x02\x02\x02\u058A\u058B\x03\x02\x02\x02\u058B\u058C\x03\x02\x02\x02" +
    "\u058C\u058E\x07\x9E\x02\x02\u058D\u058F\x05\u01C0\xE1\x02\u058E\u058D" +
    "\x03\x02\x02\x02\u058F\u0590\x03\x02\x02\x02\u0590\u058E\x03\x02\x02\x02" +
    "\u0590\u0591\x03\x02\x02\x02\u0591\u0592\x03\x02\x02\x02\u0592\u0593\x07" +
    "\xA4\x02\x02\u0593[\x03\x02\x02\x02\u0594\u0596\x05\u0196\xCC\x02\u0595" +
    "\u0594\x03\x02\x02\x02\u0595\u0596\x03\x02\x02\x02\u0596\u0597\x03\x02" +
    "\x02\x02\u0597\u0599\x07\x9F\x02\x02\u0598\u059A\x05\u01C0\xE1\x02\u0599" +
    "\u0598\x03\x02\x02\x02\u059A\u059B\x03\x02\x02\x02\u059B\u0599\x03\x02" +
    "\x02\x02\u059B\u059C\x03\x02\x02\x02\u059C\u059D\x03\x02\x02\x02\u059D" +
    "\u059E\x07\xA4\x02\x02\u059E]\x03\x02\x02\x02\u059F\u05A1\x05\u0196\xCC" +
    "\x02\u05A0\u059F\x03\x02\x02\x02\u05A0\u05A1\x03\x02\x02\x02\u05A1\u05A2" +
    "\x03\x02\x02\x02\u05A2\u05A4\x07\xA1\x02\x02\u05A3\u05A5\x05\u01C0\xE1" +
    "\x02\u05A4\u05A3\x03\x02\x02\x02\u05A5\u05A6\x03\x02\x02\x02\u05A6\u05A4" +
    "\x03\x02\x02\x02\u05A6\u05A7\x03\x02\x02\x02\u05A7\u05A8\x03\x02\x02\x02" +
    "\u05A8\u05A9\x07\xA4\x02\x02\u05A9_\x03\x02\x02\x02\u05AA\u05AB\x07\x17" +
    "\x02\x02\u05AB\u05AC\x05\u014C\xA7\x02\u05AC\u05AD\x07\xA4\x02\x02\u05AD" +
    "\u05B7\x07\xBD\x02\x02\u05AE\u05B2\x05T+\x02\u05AF\u05B1\x07\xBD\x02\x02" +
    "\u05B0\u05AF\x03\x02\x02\x02\u05B1\u05B4\x03\x02\x02\x02\u05B2\u05B0\x03" +
    "\x02\x02\x02\u05B2\u05B3\x03\x02\x02\x02\u05B3\u05B6\x03\x02\x02\x02\u05B4" +
    "\u05B2\x03\x02\x02\x02\u05B5\u05AE\x03\x02\x02\x02\u05B6\u05B9\x03\x02" +
    "\x02\x02\u05B7\u05B5\x03\x02\x02\x02\u05B7\u05B8\x03\x02\x02\x02\u05B8" +
    "\u05C3\x03\x02\x02\x02\u05B9\u05B7\x03\x02\x02\x02\u05BA\u05BC\x07\xBD" +
    "\x02\x02\u05BB\u05BA\x03\x02\x02\x02\u05BC\u05BF\x03\x02\x02\x02\u05BD" +
    "\u05BB\x03\x02\x02\x02\u05BD\u05BE\x03\x02\x02\x02\u05BE\u05C0\x03\x02" +
    "\x02\x02\u05BF\u05BD\x03\x02\x02\x02\u05C0\u05C2\x05b2\x02\u05C1\u05BD" +
    "\x03\x02\x02\x02\u05C2\u05C5\x03\x02\x02\x02\u05C3\u05C1\x03\x02\x02\x02" +
    "\u05C3\u05C4\x03\x02\x02\x02\u05C4\u05C9\x03\x02\x02\x02\u05C5\u05C3\x03" +
    "\x02\x02\x02\u05C6\u05C8\x07\xBD\x02\x02\u05C7\u05C6\x03\x02\x02\x02\u05C8" +
    "\u05CB\x03\x02\x02\x02\u05C9\u05C7\x03\x02\x02\x02\u05C9\u05CA\x03\x02" +
    "\x02\x02\u05CA\u05D9\x03\x02\x02\x02\u05CB\u05C9\x03\x02\x02\x02\u05CC" +
    "\u05D6\x05f4\x02\u05CD\u05CF\x07\xBD\x02\x02\u05CE\u05CD\x03\x02\x02\x02" +
    "\u05CF\u05D2\x03\x02\x02\x02\u05D0\u05CE\x03\x02\x02\x02\u05D0\u05D1\x03" +
    "\x02\x02\x02\u05D1\u05D3\x03\x02\x02\x02\u05D2\u05D0\x03\x02\x02\x02\u05D3" +
    "\u05D5\x05f4\x02\u05D4\u05D0\x03\x02\x02\x02\u05D5\u05D8\x03\x02\x02\x02" +
    "\u05D6\u05D4\x03\x02\x02\x02\u05D6\u05D7\x03\x02\x02\x02\u05D7\u05DA\x03" +
    "\x02\x02\x02\u05D8\u05D6\x03\x02\x02\x02\u05D9\u05CC\x03\x02\x02\x02\u05D9" +
    "\u05DA\x03\x02\x02\x02\u05DAa\x03\x02\x02\x02\u05DB\u05E3\x07\xCB\x02" +
    "\x02\u05DC\u05DE\x07\xBD\x02\x02\u05DD\u05DC\x03\x02\x02\x02\u05DD\u05DE" +
    "\x03\x02\x02\x02\u05DE\u05DF\x03\x02\x02\x02\u05DF\u05E1\x05\u01BE\xE0" +
    "\x02\u05E0\u05E2\x07\xBD\x02\x02\u05E1\u05E0\x03\x02\x02\x02\u05E1\u05E2" +
    "\x03\x02\x02\x02\u05E2\u05E4\x03\x02\x02\x02\u05E3\u05DD\x03\x02\x02\x02" +
    "\u05E3\u05E4\x03\x02\x02\x02\u05E4\u05E5\x03\x02\x02\x02\u05E5\u05E6\x07" +
    "\xA4\x02\x02\u05E6c\x03\x02\x02\x02\u05E7\u05E8\t\x05\x02\x02\u05E8e\x03" +
    "\x02\x02\x02\u05E9\u05EA\x05T+\x02\u05EAg\x03\x02\x02\x02\u05EB\u05EC" +
    "\x07\x19\x02\x02\u05EC\u05ED\x05\u014C\xA7\x02\u05ED\u05EE\x07\xA4\x02" +
    "\x02\u05EE\u05F8\x07\xBD\x02\x02\u05EF\u05F3\x05T+\x02\u05F0\u05F2\x07" +
    "\xBD\x02\x02\u05F1\u05F0\x03\x02\x02\x02\u05F2\u05F5\x03\x02\x02\x02\u05F3" +
    "\u05F1\x03\x02\x02\x02\u05F3\u05F4\x03\x02\x02\x02\u05F4\u05F7\x03\x02" +
    "\x02\x02\u05F5\u05F3\x03\x02\x02\x02\u05F6\u05EF\x03\x02\x02\x02\u05F7" +
    "\u05FA\x03\x02\x02\x02\u05F8\u05F6\x03\x02\x02\x02\u05F8\u05F9\x03\x02" +
    "\x02\x02\u05F9\u05FE\x03\x02\x02\x02\u05FA\u05F8\x03\x02\x02\x02\u05FB" +
    "\u05FD\x05j6\x02\u05FC\u05FB\x03\x02\x02\x02\u05FD\u0600\x03\x02\x02\x02" +
    "\u05FE\u05FC\x03\x02\x02\x02\u05FE\u05FF\x03\x02\x02\x02\u05FF\u0604\x03" +
    "\x02\x02\x02\u0600\u05FE\x03\x02\x02\x02\u0601\u0603\x07\xBD\x02\x02\u0602" +
    "\u0601\x03\x02\x02\x02\u0603\u0606\x03\x02\x02\x02\u0604\u0602\x03\x02" +
    "\x02\x02\u0604\u0605\x03\x02\x02\x02\u0605\u0614\x03\x02\x02\x02\u0606" +
    "\u0604\x03\x02\x02\x02\u0607\u0611\x05f4\x02\u0608\u060A\x07\xBD\x02\x02" +
    "\u0609\u0608\x03\x02\x02\x02\u060A\u060D\x03\x02\x02\x02\u060B\u0609\x03" +
    "\x02\x02\x02\u060B\u060C\x03\x02\x02\x02\u060C\u060E\x03\x02\x02\x02\u060D" +
    "\u060B\x03\x02\x02\x02\u060E\u0610\x05f4\x02\u060F\u060B\x03\x02\x02\x02" +
    "\u0610\u0613\x03\x02\x02\x02\u0611\u060F\x03\x02\x02\x02\u0611\u0612\x03" +
    "\x02\x02\x02\u0612\u0615\x03\x02\x02\x02\u0613\u0611\x03\x02\x02\x02\u0614" +
    "\u0607\x03\x02\x02\x02\u0614\u0615\x03\x02\x02\x02\u0615i\x03\x02\x02" +
    "\x02\u0616\u061A\x07\x9F\x02\x02\u0617\u0619\v\x02\x02\x02\u0618\u0617" +
    "\x03\x02\x02\x02\u0619\u061C\x03\x02\x02\x02\u061A\u061B\x03\x02\x02\x02" +
    "\u061A\u0618\x03\x02\x02\x02\u061B\u061D\x03\x02\x02\x02\u061C\u061A\x03" +
    "\x02\x02\x02\u061D\u061E\x07\xA4\x02\x02\u061E\u0629\x07\xBD\x02\x02\u061F" +
    "\u0623\x07\x9E\x02\x02\u0620\u0622\v\x02\x02\x02\u0621\u0620\x03\x02\x02" +
    "\x02\u0622\u0625\x03\x02\x02\x02\u0623\u0624\x03\x02\x02\x02\u0623\u0621" +
    "\x03\x02\x02\x02\u0624\u0626\x03\x02\x02\x02\u0625\u0623\x03\x02\x02\x02" +
    "\u0626\u0627\x07\xA4\x02\x02\u0627\u0629\x07\xBD\x02\x02\u0628\u0616\x03" +
    "\x02\x02\x02\u0628\u061F\x03\x02\x02\x02\u0629k\x03\x02\x02\x02\u062A" +
    "\u062B\x07\x1A\x02\x02\u062B\u062C\x05\u014C\xA7\x02\u062C\u062D\x07\xA4" +
    "\x02\x02\u062D\u063A\x07\xBD\x02\x02\u062E\u0631\x05T+\x02\u062F\u0631" +
    "\x05n8\x02\u0630\u062E\x03\x02\x02\x02\u0630\u062F\x03\x02\x02\x02\u0631" +
    "\u0635\x03\x02\x02\x02\u0632\u0634\x07\xBD\x02\x02\u0633\u0632\x03\x02" +
    "\x02\x02\u0634\u0637\x03\x02\x02\x02\u0635\u0633\x03\x02\x02\x02\u0635" +
    "\u0636\x03\x02\x02\x02\u0636\u0639\x03\x02\x02\x02\u0637\u0635\x03\x02" +
    "\x02\x02\u0638\u0630\x03\x02\x02\x02\u0639\u063C\x03\x02\x02\x02\u063A" +
    "\u0638\x03\x02\x02\x02\u063A\u063B\x03\x02\x02\x02\u063B\u0640\x03\x02" +
    "\x02\x02\u063C\u063A\x03\x02\x02\x02\u063D\u063F\x07\xBD\x02\x02\u063E" +
    "\u063D\x03\x02\x02\x02\u063F\u0642\x03\x02\x02\x02\u0640\u063E\x03\x02" +
    "\x02\x02\u0640\u0641\x03\x02\x02\x02\u0641\u0650\x03\x02\x02\x02\u0642" +
    "\u0640\x03\x02\x02\x02\u0643\u064D\x05f4\x02\u0644\u0646\x07\xBD\x02\x02" +
    "\u0645\u0644\x03\x02\x02\x02\u0646\u0649\x03\x02\x02\x02\u0647\u0645\x03" +
    "\x02\x02\x02\u0647\u0648\x03\x02\x02\x02\u0648\u064A\x03\x02\x02\x02\u0649" +
    "\u0647\x03\x02\x02\x02\u064A\u064C\x05f4\x02\u064B\u0647\x03\x02\x02\x02" +
    "\u064C\u064F\x03\x02\x02\x02\u064D\u064B\x03\x02\x02\x02\u064D\u064E\x03" +
    "\x02\x02\x02\u064E\u0651\x03\x02\x02\x02\u064F\u064D\x03\x02\x02\x02\u0650" +
    "\u0643\x03\x02\x02\x02\u0650\u0651\x03\x02\x02\x02\u0651m\x03\x02\x02" +
    "\x02\u0652\u0653\x07\xA0\x02\x02\u0653\u0654\x05\u01C0\xE1\x02\u0654\u0656" +
    "\x07\xA4\x02\x02\u0655\u0657\x05p9\x02\u0656\u0655\x03\x02\x02\x02\u0656" +
    "\u0657\x03\x02\x02\x02\u0657\u065D\x03\x02\x02\x02\u0658\u065C\x05\u01AA" +
    "\xD6\x02\u0659\u065C\x05\u0196\xCC\x02\u065A\u065C\x05\u01A8\xD5\x02\u065B" +
    "\u0658\x03\x02\x02\x02\u065B\u0659\x03\x02\x02\x02\u065B\u065A\x03\x02" +
    "\x02\x02\u065C\u065F\x03\x02\x02\x02\u065D\u065B\x03\x02\x02\x02\u065D" +
    "\u065E\x03\x02\x02\x02\u065Eo\x03\x02\x02\x02\u065F\u065D\x03\x02\x02" +
    "\x02\u0660\u0664\x07\xD6\x02\x02\u0661\u0663\x07\x04\x02\x02\u0662\u0661" +
    "\x03\x02\x02\x02\u0663\u0666\x03\x02\x02\x02\u0664\u0662\x03\x02\x02\x02" +
    "\u0664\u0665\x03\x02\x02\x02\u0665\u0667\x03\x02\x02\x02\u0666\u0664\x03" +
    "\x02\x02\x02\u0667\u066B\x07\xBC\x02\x02\u0668\u066A\x07\x04\x02\x02\u0669" +
    "\u0668\x03\x02\x02\x02\u066A\u066D\x03\x02\x02\x02\u066B\u0669\x03\x02" +
    "\x02\x02\u066B\u066C\x03\x02\x02\x02\u066C\u066E\x03\x02\x02\x02\u066D" +
    "\u066B\x03\x02\x02\x02\u066E\u066F\x07\xA4\x02\x02\u066Fq\x03\x02\x02" +
    "\x02\u0670\u0671\x07\x12\x02\x02\u0671\u0672\x05\u014C\xA7\x02\u0672\u0673" +
    "\x07\xA4\x02\x02\u0673\u067D\x07\xBD\x02\x02\u0674\u0678\x05T+\x02\u0675" +
    "\u0677\x07\xBD\x02\x02\u0676\u0675\x03\x02\x02\x02\u0677\u067A\x03\x02" +
    "\x02\x02\u0678\u0676\x03\x02\x02\x02\u0678\u0679\x03\x02\x02\x02\u0679" +
    "\u067C\x03\x02\x02\x02\u067A\u0678\x03\x02\x02\x02\u067B\u0674\x03\x02" +
    "\x02\x02\u067C\u067F\x03\x02\x02\x02\u067D\u067B\x03\x02\x02\x02\u067D" +
    "\u067E\x03\x02\x02\x02\u067E\u0683\x03\x02\x02\x02\u067F\u067D\x03\x02" +
    "\x02\x02\u0680\u0682\x07\xBD\x02\x02\u0681\u0680\x03\x02\x02\x02\u0682" +
    "\u0685\x03\x02\x02\x02\u0683\u0681\x03\x02\x02\x02\u0683\u0684\x03\x02" +
    "\x02\x02\u0684\u0693\x03\x02\x02\x02\u0685\u0683\x03\x02\x02\x02\u0686" +
    "\u0690\x05f4\x02\u0687\u0689\x07\xBD\x02\x02\u0688\u0687\x03\x02\x02\x02" +
    "\u0689\u068C\x03\x02\x02\x02\u068A\u0688\x03\x02\x02\x02\u068A\u068B\x03" +
    "\x02\x02\x02\u068B\u068D\x03\x02\x02\x02\u068C\u068A\x03\x02\x02\x02\u068D" +
    "\u068F\x05f4\x02\u068E\u068A\x03\x02\x02\x02\u068F\u0692\x03\x02\x02\x02" +
    "\u0690\u068E\x03\x02\x02\x02\u0690\u0691\x03\x02\x02\x02\u0691\u0694\x03" +
    "\x02\x02\x02\u0692\u0690\x03\x02\x02\x02\u0693\u0686\x03\x02\x02\x02\u0693" +
    "\u0694\x03\x02\x02\x02\u0694s\x03\x02\x02\x02\u0695\u0696\x07\x1B\x02" +
    "\x02\u0696\u0697\x05\u014C\xA7\x02\u0697\u0698\x07\xA4\x02\x02\u0698\u06A2" +
    "\x07\xBD\x02\x02\u0699\u069D\x05T+\x02\u069A\u069C\x07\xBD\x02\x02\u069B" +
    "\u069A\x03\x02\x02\x02\u069C\u069F\x03\x02\x02\x02\u069D\u069B\x03\x02" +
    "\x02\x02\u069D\u069E\x03\x02\x02\x02\u069E\u06A1\x03\x02\x02\x02\u069F" +
    "\u069D\x03\x02\x02\x02\u06A0\u0699\x03\x02\x02\x02\u06A1\u06A4\x03\x02" +
    "\x02\x02\u06A2\u06A0\x03\x02\x02\x02\u06A2\u06A3\x03\x02\x02\x02\u06A3" +
    "\u06A8\x03\x02\x02\x02\u06A4\u06A2\x03\x02\x02\x02\u06A5\u06A7\x07\xBD" +
    "\x02\x02\u06A6\u06A5\x03\x02\x02\x02\u06A7\u06AA\x03\x02\x02\x02\u06A8" +
    "\u06A6\x03\x02\x02\x02\u06A8\u06A9\x03\x02\x02\x02\u06A9\u06B8\x03\x02" +
    "\x02\x02\u06AA\u06A8\x03\x02\x02\x02\u06AB\u06B5\x05f4\x02\u06AC\u06AE" +
    "\x07\xBD\x02\x02\u06AD\u06AC\x03\x02\x02\x02\u06AE\u06B1\x03\x02\x02\x02" +
    "\u06AF\u06AD\x03\x02\x02\x02\u06AF\u06B0\x03\x02\x02\x02\u06B0\u06B2\x03" +
    "\x02\x02\x02\u06B1\u06AF\x03\x02\x02\x02\u06B2\u06B4\x05f4\x02\u06B3\u06AF" +
    "\x03\x02\x02\x02\u06B4\u06B7\x03\x02\x02\x02\u06B5\u06B3\x03\x02\x02\x02" +
    "\u06B5\u06B6\x03\x02\x02\x02\u06B6\u06B9\x03\x02\x02\x02\u06B7\u06B5\x03" +
    "\x02\x02\x02\u06B8\u06AB\x03\x02\x02\x02\u06B8\u06B9\x03\x02\x02\x02\u06B9" +
    "u\x03\x02\x02\x02\u06BA\u06BB\x07\x1C\x02\x02\u06BB\u06BC\x05\u014C\xA7" +
    "\x02\u06BC\u06BD\x07\xA4\x02\x02\u06BD\u06C7\x07\xBD\x02\x02\u06BE\u06C2" +
    "\x05T+\x02\u06BF\u06C1\x07\xBD\x02\x02\u06C0\u06BF\x03\x02\x02\x02\u06C1" +
    "\u06C4\x03\x02\x02\x02\u06C2\u06C0\x03\x02\x02\x02\u06C2\u06C3\x03\x02" +
    "\x02\x02\u06C3\u06C6\x03\x02\x02\x02\u06C4\u06C2\x03\x02\x02\x02\u06C5" +
    "\u06BE\x03\x02\x02\x02\u06C6\u06C9\x03\x02\x02\x02\u06C7\u06C5\x03\x02" +
    "\x02\x02\u06C7\u06C8\x03\x02\x02\x02\u06C8\u06CD\x03\x02\x02\x02\u06C9" +
    "\u06C7\x03\x02\x02\x02\u06CA\u06CC\x07\xBD\x02\x02\u06CB\u06CA\x03\x02" +
    "\x02\x02\u06CC\u06CF\x03\x02\x02\x02\u06CD\u06CB\x03\x02\x02\x02\u06CD" +
    "\u06CE\x03\x02\x02\x02\u06CE\u06DD\x03\x02\x02\x02\u06CF\u06CD\x03\x02" +
    "\x02\x02\u06D0\u06DA\x05f4\x02\u06D1\u06D3\x07\xBD\x02\x02\u06D2\u06D1" +
    "\x03\x02\x02\x02\u06D3\u06D6\x03\x02\x02\x02\u06D4\u06D2\x03\x02\x02\x02" +
    "\u06D4\u06D5\x03\x02\x02\x02\u06D5\u06D7\x03\x02\x02\x02\u06D6\u06D4\x03" +
    "\x02\x02\x02\u06D7\u06D9\x05f4\x02\u06D8\u06D4\x03\x02\x02\x02\u06D9\u06DC" +
    "\x03\x02\x02\x02\u06DA\u06D8\x03\x02\x02\x02\u06DA\u06DB\x03\x02\x02\x02" +
    "\u06DB\u06DE\x03\x02\x02\x02\u06DC\u06DA\x03\x02\x02\x02\u06DD\u06D0\x03" +
    "\x02\x02\x02\u06DD\u06DE\x03\x02\x02\x02\u06DEw\x03\x02\x02\x02\u06DF" +
    "\u06E0\x07\x1D\x02\x02\u06E0\u06E1\x05\u014C\xA7\x02\u06E1\u06E5\x07\xA4" +
    "\x02\x02\u06E2\u06E4\x07\xBD\x02\x02\u06E3\u06E2\x03\x02\x02\x02\u06E4" +
    "\u06E7\x03\x02\x02\x02\u06E5\u06E3\x03\x02\x02\x02\u06E5\u06E6\x03\x02" +
    "\x02\x02\u06E6\u06F1\x03\x02\x02\x02\u06E7\u06E5\x03\x02\x02\x02\u06E8" +
    "\u06EC\x05T+\x02\u06E9\u06EB\x07\xBD\x02\x02\u06EA\u06E9\x03\x02\x02\x02" +
    "\u06EB\u06EE\x03\x02\x02\x02\u06EC\u06EA\x03\x02\x02\x02\u06EC\u06ED\x03" +
    "\x02\x02\x02\u06ED\u06F0\x03\x02\x02\x02\u06EE\u06EC\x03\x02\x02\x02\u06EF" +
    "\u06E8\x03\x02\x02\x02\u06F0\u06F3\x03\x02\x02\x02\u06F1\u06EF\x03\x02" +
    "\x02\x02\u06F1\u06F2\x03\x02\x02\x02\u06F2\u06F5\x03\x02\x02\x02\u06F3" +
    "\u06F1\x03\x02\x02\x02\u06F4\u06F6\x05\u01BE\xE0\x02\u06F5\u06F4\x03\x02" +
    "\x02\x02\u06F5\u06F6\x03\x02\x02\x02\u06F6\u06FA\x03\x02\x02\x02\u06F7" +
    "\u06F9\x07\xBD\x02\x02\u06F8\u06F7\x03\x02\x02\x02\u06F9\u06FC\x03\x02" +
    "\x02\x02\u06FA\u06F8\x03\x02\x02\x02\u06FA\u06FB\x03\x02\x02\x02\u06FB" +
    "\u070A\x03\x02\x02\x02\u06FC\u06FA\x03\x02\x02\x02\u06FD\u0707\x05f4\x02" +
    "\u06FE\u0700\x07\xBD\x02\x02\u06FF\u06FE\x03\x02\x02\x02\u0700\u0703\x03" +
    "\x02\x02\x02\u0701\u06FF\x03\x02\x02\x02\u0701\u0702\x03\x02\x02\x02\u0702" +
    "\u0704\x03\x02\x02\x02\u0703\u0701\x03\x02\x02\x02\u0704\u0706\x05f4\x02" +
    "\u0705\u0701\x03\x02\x02\x02\u0706\u0709\x03\x02\x02\x02\u0707\u0705\x03" +
    "\x02\x02\x02\u0707\u0708\x03\x02\x02\x02\u0708\u070B\x03\x02\x02\x02\u0709" +
    "\u0707\x03\x02\x02\x02\u070A\u06FD\x03\x02\x02\x02\u070A\u070B\x03\x02" +
    "\x02\x02\u070By\x03\x02\x02\x02\u070C\u070D\x07\x1E\x02\x02\u070D\u070E" +
    "\x05\u014C\xA7\x02\u070E\u0710\x07\xA4\x02\x02\u070F\u0711\x07\xBD\x02" +
    "\x02\u0710\u070F\x03\x02\x02\x02\u0711\u0712\x03\x02\x02\x02\u0712\u0710" +
    "\x03\x02\x02\x02\u0712\u0713\x03\x02\x02\x02\u0713\u071D\x03\x02\x02\x02" +
    "\u0714\u0718\x05T+\x02\u0715\u0717\x07\xBD\x02\x02\u0716\u0715\x03\x02" +
    "\x02\x02\u0717\u071A\x03\x02\x02\x02\u0718\u0716\x03\x02\x02\x02\u0718" +
    "\u0719\x03\x02\x02\x02\u0719\u071C\x03\x02\x02\x02\u071A\u0718\x03\x02" +
    "\x02\x02\u071B\u0714\x03\x02\x02\x02\u071C\u071F\x03\x02\x02\x02\u071D" +
    "\u071B\x03\x02\x02\x02\u071D\u071E\x03\x02\x02\x02\u071E\u0721\x03\x02" +
    "\x02\x02\u071F\u071D\x03\x02\x02\x02\u0720\u0722\x05\u01BE\xE0\x02\u0721" +
    "\u0720\x03\x02\x02\x02\u0721\u0722\x03\x02\x02\x02\u0722\u0726\x03\x02" +
    "\x02\x02\u0723\u0725\x07\xBD\x02\x02\u0724\u0723\x03\x02\x02\x02\u0725" +
    "\u0728\x03\x02\x02\x02\u0726\u0724\x03\x02\x02\x02\u0726\u0727\x03\x02" +
    "\x02\x02\u0727\u0736\x03\x02\x02\x02\u0728\u0726\x03\x02\x02\x02\u0729" +
    "\u0733\x05f4\x02\u072A\u072C\x07\xBD\x02\x02\u072B\u072A\x03\x02\x02\x02" +
    "\u072C\u072F\x03\x02\x02\x02\u072D\u072B\x03\x02\x02\x02\u072D\u072E\x03" +
    "\x02\x02\x02\u072E\u0730\x03\x02\x02\x02\u072F\u072D\x03\x02\x02\x02\u0730" +
    "\u0732\x05f4\x02\u0731\u072D\x03\x02\x02\x02\u0732\u0735\x03\x02\x02\x02" +
    "\u0733\u0731\x03\x02\x02\x02\u0733\u0734\x03\x02\x02\x02\u0734\u0737\x03" +
    "\x02\x02\x02\u0735\u0733\x03\x02\x02\x02\u0736\u0729\x03\x02\x02\x02\u0736" +
    "\u0737\x03\x02\x02\x02\u0737{\x03\x02\x02\x02\u0738\u0739\x07\x15\x02" +
    "\x02\u0739\u073A\x05\u014C\xA7\x02\u073A\u073E\x07\xA4\x02\x02\u073B\u073D" +
    "\x07\xBD\x02\x02\u073C\u073B\x03\x02\x02\x02\u073D\u0740\x03\x02\x02\x02" +
    "\u073E\u073C\x03\x02\x02\x02\u073E\u073F\x03\x02\x02\x02\u073F\u0748\x03" +
    "\x02\x02\x02\u0740\u073E\x03\x02\x02\x02\u0741\u0745\x05T+\x02\u0742\u0744" +
    "\x07\xBD\x02\x02\u0743\u0742\x03\x02\x02\x02\u0744\u0747\x03\x02\x02\x02" +
    "\u0745\u0743\x03\x02\x02\x02\u0745\u0746\x03\x02\x02\x02\u0746\u0749\x03" +
    "\x02\x02\x02\u0747\u0745\x03\x02\x02\x02\u0748\u0741\x03\x02\x02\x02\u0749" +
    "\u074A\x03\x02\x02\x02\u074A\u0748\x03\x02\x02\x02\u074A\u074B\x03\x02" +
    "\x02\x02\u074B}\x03\x02\x02\x02\u074C\u074D\x07\x0F\x02\x02\u074D\u074E" +
    "\x05\u014C\xA7\x02\u074E\u0752\x07\xA4\x02\x02\u074F\u0751\x07\xBD\x02" +
    "\x02\u0750\u074F\x03\x02\x02\x02\u0751\u0754\x03\x02\x02\x02\u0752\u0750" +
    "\x03\x02\x02\x02\u0752\u0753\x03\x02\x02\x02\u0753\u075C\x03\x02\x02\x02" +
    "\u0754\u0752\x03\x02\x02\x02\u0755\u0759\x05T+\x02\u0756\u0758\x07\xBD" +
    "\x02\x02\u0757\u0756\x03\x02\x02\x02\u0758\u075B\x03\x02\x02\x02\u0759" +
    "\u0757\x03\x02\x02\x02\u0759\u075A\x03\x02\x02\x02\u075A\u075D\x03\x02" +
    "\x02\x02\u075B\u0759\x03\x02\x02\x02\u075C\u0755\x03\x02\x02\x02\u075D" +
    "\u075E\x03\x02\x02\x02\u075E\u075C\x03\x02\x02\x02\u075E\u075F\x03\x02" +
    "\x02\x02\u075F\x7F\x03\x02\x02\x02\u0760\u0761\x07\x10\x02\x02\u0761\u0762" +
    "\x05\u014C\xA7\x02\u0762\u0766\x07\xA4\x02\x02\u0763\u0765\x07\xBD\x02" +
    "\x02\u0764\u0763\x03\x02\x02\x02\u0765\u0768\x03\x02\x02\x02\u0766\u0764" +
    "\x03\x02\x02\x02\u0766\u0767\x03\x02\x02\x02\u0767\u0770\x03\x02\x02\x02" +
    "\u0768\u0766\x03\x02\x02\x02\u0769\u076D\x05T+\x02\u076A\u076C\x07\xBD" +
    "\x02\x02\u076B\u076A\x03\x02\x02\x02\u076C\u076F\x03\x02\x02\x02\u076D" +
    "\u076B\x03\x02\x02\x02\u076D\u076E\x03\x02\x02\x02\u076E\u0771\x03\x02" +
    "\x02\x02\u076F\u076D\x03\x02\x02\x02\u0770\u0769\x03\x02\x02\x02\u0771" +
    "\u0772\x03\x02\x02\x02\u0772\u0770\x03\x02\x02\x02\u0772\u0773\x03\x02" +
    "\x02\x02\u0773\x81\x03\x02\x02\x02\u0774\u0775\x07\x11\x02\x02\u0775\u0776" +
    "\x05\u014C\xA7\x02\u0776\u077A\x07\xA4\x02\x02\u0777\u0779\x07\xBD\x02" +
    "\x02\u0778\u0777\x03\x02\x02\x02\u0779\u077C\x03\x02\x02\x02\u077A\u0778" +
    "\x03\x02\x02\x02\u077A\u077B\x03\x02\x02\x02\u077B\u0784\x03\x02\x02\x02" +
    "\u077C\u077A\x03\x02\x02\x02\u077D\u0781\x05T+\x02\u077E\u0780\x07\xBD" +
    "\x02\x02\u077F\u077E\x03\x02\x02\x02\u0780\u0783\x03\x02\x02\x02\u0781" +
    "\u077F\x03\x02\x02\x02\u0781\u0782\x03\x02\x02\x02\u0782\u0785\x03\x02" +
    "\x02\x02\u0783\u0781\x03\x02\x02\x02\u0784\u077D\x03\x02\x02\x02\u0785" +
    "\u0786\x03\x02\x02\x02\u0786\u0784\x03\x02\x02\x02\u0786\u0787\x03\x02" +
    "\x02\x02\u0787\x83\x03\x02\x02\x02\u0788\u0789\x073\x02\x02\u0789\u078A" +
    "\x05\u014C\xA7\x02\u078A\u078E\x07\xA4\x02\x02\u078B\u078D\x07\xBD\x02" +
    "\x02\u078C\u078B\x03\x02\x02\x02\u078D\u0790\x03\x02\x02\x02\u078E\u078C" +
    "\x03\x02\x02\x02\u078E\u078F\x03\x02\x02\x02\u078F\u0798\x03\x02\x02\x02" +
    "\u0790\u078E\x03\x02\x02\x02\u0791\u0795\x05T+\x02\u0792\u0794\x07\xBD" +
    "\x02\x02\u0793\u0792\x03\x02\x02\x02\u0794\u0797\x03\x02\x02\x02\u0795" +
    "\u0793\x03\x02\x02\x02\u0795\u0796\x03\x02\x02\x02\u0796\u0799\x03\x02" +
    "\x02\x02\u0797\u0795\x03\x02\x02\x02\u0798\u0791\x03\x02\x02\x02\u0799" +
    "\u079A\x03\x02\x02\x02\u079A\u0798\x03\x02\x02\x02\u079A\u079B\x03\x02" +
    "\x02\x02\u079B\x85\x03\x02\x02\x02\u079C\u079D\x074\x02\x02\u079D\u079E" +
    "\x05\u014C\xA7\x02\u079E\u07A2\x07\xA4\x02\x02\u079F\u07A1\x07\xBD\x02" +
    "\x02\u07A0\u079F\x03\x02\x02\x02\u07A1\u07A4\x03\x02\x02\x02\u07A2\u07A0" +
    "\x03\x02\x02\x02\u07A2\u07A3\x03\x02\x02\x02\u07A3\u07AC\x03\x02\x02\x02" +
    "\u07A4\u07A2\x03\x02\x02\x02\u07A5\u07A9\x05T+\x02\u07A6\u07A8\x07\xBD" +
    "\x02\x02\u07A7\u07A6\x03\x02\x02\x02\u07A8\u07AB\x03\x02\x02\x02\u07A9" +
    "\u07A7\x03\x02\x02\x02\u07A9\u07AA\x03\x02\x02\x02\u07AA\u07AD\x03\x02" +
    "\x02\x02\u07AB\u07A9\x03\x02\x02\x02\u07AC\u07A5\x03\x02\x02\x02\u07AD" +
    "\u07AE\x03\x02\x02\x02\u07AE\u07AC\x03\x02\x02\x02\u07AE\u07AF\x03\x02" +
    "\x02\x02\u07AF\x87\x03\x02\x02\x02\u07B0\u07B1\x075\x02\x02\u07B1\u07B2" +
    "\x05\u014C\xA7\x02\u07B2\u07B6\x07\xA4\x02\x02\u07B3\u07B5\x07\xBD\x02" +
    "\x02\u07B4\u07B3\x03\x02\x02\x02\u07B5\u07B8\x03\x02\x02\x02\u07B6\u07B4" +
    "\x03\x02\x02\x02\u07B6\u07B7\x03\x02\x02\x02\u07B7\u07C0\x03\x02\x02\x02" +
    "\u07B8\u07B6\x03\x02\x02\x02\u07B9\u07BD\x05T+\x02\u07BA\u07BC\x07\xBD" +
    "\x02\x02\u07BB\u07BA\x03\x02\x02\x02\u07BC\u07BF\x03\x02\x02\x02\u07BD" +
    "\u07BB\x03\x02\x02\x02\u07BD\u07BE\x03\x02\x02\x02\u07BE\u07C1\x03\x02" +
    "\x02\x02\u07BF\u07BD\x03\x02\x02\x02\u07C0\u07B9\x03\x02\x02\x02\u07C1" +
    "\u07C2\x03\x02\x02\x02\u07C2\u07C0\x03\x02\x02\x02\u07C2\u07C3\x03\x02" +
    "\x02\x02\u07C3\x89\x03\x02\x02\x02\u07C4\u07C5\x07\x16\x02\x02\u07C5\u07C6" +
    "\x05\u014C\xA7\x02\u07C6\u07CA\x07\xA4\x02\x02\u07C7\u07C9\x07\xBD\x02" +
    "\x02\u07C8\u07C7\x03\x02\x02\x02\u07C9\u07CC\x03\x02\x02\x02\u07CA\u07C8" +
    "\x03\x02\x02\x02\u07CA\u07CB\x03\x02\x02\x02\u07CB\u07D4\x03\x02\x02\x02" +
    "\u07CC\u07CA\x03\x02\x02\x02\u07CD\u07D1\x05T+\x02\u07CE\u07D0\x07\xBD" +
    "\x02\x02\u07CF\u07CE\x03\x02\x02\x02\u07D0\u07D3\x03\x02\x02\x02\u07D1" +
    "\u07CF\x03\x02\x02\x02\u07D1\u07D2\x03\x02\x02\x02\u07D2\u07D5\x03\x02" +
    "\x02\x02\u07D3\u07D1\x03\x02\x02\x02\u07D4\u07CD\x03\x02\x02\x02\u07D5" +
    "\u07D6\x03\x02\x02\x02\u07D6\u07D4\x03\x02\x02\x02\u07D6\u07D7\x03\x02" +
    "\x02\x02\u07D7\x8B\x03\x02\x02\x02\u07D8\u07D9\x07&\x02\x02\u07D9\u07DA" +
    "\x05\u014C\xA7\x02\u07DA\u07DE\x07\xA4\x02\x02\u07DB\u07DD\x07\xBD\x02" +
    "\x02\u07DC\u07DB\x03\x02\x02\x02\u07DD\u07E0\x03\x02\x02\x02\u07DE\u07DC" +
    "\x03\x02\x02\x02\u07DE\u07DF\x03\x02\x02\x02\u07DF\u07E8\x03\x02\x02\x02" +
    "\u07E0\u07DE\x03\x02\x02\x02\u07E1\u07E5\x05T+\x02\u07E2\u07E4\x07\xBD" +
    "\x02\x02\u07E3\u07E2\x03\x02\x02\x02\u07E4\u07E7\x03\x02\x02\x02\u07E5" +
    "\u07E3\x03\x02\x02\x02\u07E5\u07E6\x03\x02\x02\x02\u07E6\u07E9\x03\x02" +
    "\x02\x02\u07E7\u07E5\x03\x02\x02\x02\u07E8\u07E1\x03\x02\x02\x02\u07E9" +
    "\u07EA\x03\x02\x02\x02\u07EA\u07E8\x03\x02\x02\x02\u07EA\u07EB\x03\x02" +
    "\x02\x02\u07EB\x8D\x03\x02\x02\x02\u07EC\u07ED\x07\'\x02\x02\u07ED\u07EE" +
    "\x05\u014C\xA7\x02\u07EE\u07F2\x07\xA4\x02\x02\u07EF\u07F1\x07\xBD\x02" +
    "\x02\u07F0\u07EF\x03\x02\x02\x02\u07F1\u07F4\x03\x02\x02\x02\u07F2\u07F0" +
    "\x03\x02\x02\x02\u07F2\u07F3\x03\x02\x02\x02\u07F3\u07FC\x03\x02\x02\x02" +
    "\u07F4\u07F2\x03\x02\x02\x02\u07F5\u07F9\x05T+\x02\u07F6\u07F8\x07\xBD" +
    "\x02\x02\u07F7\u07F6\x03\x02\x02\x02\u07F8\u07FB\x03\x02\x02\x02\u07F9" +
    "\u07F7\x03\x02\x02\x02\u07F9\u07FA\x03\x02\x02\x02\u07FA\u07FD\x03\x02" +
    "\x02\x02\u07FB\u07F9\x03\x02\x02\x02\u07FC\u07F5\x03\x02\x02\x02\u07FD" +
    "\u07FE\x03\x02\x02\x02\u07FE\u07FC\x03\x02\x02\x02\u07FE\u07FF\x03\x02" +
    "\x02\x02\u07FF\x8F\x03\x02\x02\x02\u0800\u0801\x07(\x02\x02\u0801\u0802" +
    "\x05\u014C\xA7\x02\u0802\u0806\x07\xA4\x02\x02\u0803\u0805\x07\xBD\x02" +
    "\x02\u0804\u0803\x03\x02\x02\x02\u0805\u0808\x03\x02\x02\x02\u0806\u0804" +
    "\x03\x02\x02\x02\u0806\u0807\x03\x02\x02\x02\u0807\u0810\x03\x02\x02\x02" +
    "\u0808\u0806\x03\x02\x02\x02\u0809\u080D\x05T+\x02\u080A\u080C\x07\xBD" +
    "\x02\x02\u080B\u080A\x03\x02\x02\x02\u080C\u080F\x03\x02\x02\x02\u080D" +
    "\u080B\x03\x02\x02\x02\u080D\u080E\x03\x02\x02\x02\u080E\u0811\x03\x02" +
    "\x02\x02\u080F\u080D\x03\x02\x02\x02\u0810\u0809\x03\x02\x02\x02\u0811" +
    "\u0812\x03\x02\x02\x02\u0812\u0810\x03\x02\x02\x02\u0812\u0813\x03\x02" +
    "\x02\x02\u0813\x91\x03\x02\x02\x02\u0814\u0815\x07)\x02\x02\u0815\u0816" +
    "\x05\u014C\xA7\x02\u0816\u081A\x07\xA4\x02\x02\u0817\u0819\x07\xBD\x02" +
    "\x02\u0818\u0817\x03\x02\x02\x02\u0819\u081C\x03\x02\x02\x02\u081A\u0818" +
    "\x03\x02\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\u0824\x03\x02\x02\x02" +
    "\u081C\u081A\x03\x02\x02\x02\u081D\u0821\x05T+\x02\u081E\u0820\x07\xBD" +
    "\x02\x02\u081F\u081E\x03\x02\x02\x02\u0820\u0823\x03\x02\x02\x02\u0821" +
    "\u081F\x03\x02\x02\x02\u0821\u0822\x03\x02\x02\x02\u0822\u0825\x03\x02" +
    "\x02\x02\u0823\u0821\x03\x02\x02\x02\u0824\u081D\x03\x02\x02\x02\u0825" +
    "\u0826\x03\x02\x02\x02\u0826\u0824\x03\x02\x02\x02\u0826\u0827\x03\x02" +
    "\x02\x02\u0827\x93\x03\x02\x02\x02\u0828\u0829\x07+\x02\x02\u0829\u082A" +
    "\x05\u014C\xA7\x02\u082A\u082E";
bitmarkParser._serializedATNSegment5 = "\x07\xA4\x02\x02\u082B\u082D\x07\xBD\x02\x02\u082C\u082B\x03\x02\x02\x02" +
    "\u082D\u0830\x03\x02\x02\x02\u082E\u082C\x03\x02\x02\x02\u082E\u082F\x03" +
    "\x02\x02\x02\u082F\u0838\x03\x02\x02\x02\u0830\u082E\x03\x02\x02\x02\u0831" +
    "\u0835\x05T+\x02\u0832\u0834\x07\xBD\x02\x02\u0833\u0832\x03\x02\x02\x02" +
    "\u0834\u0837\x03\x02\x02\x02\u0835\u0833\x03\x02\x02\x02\u0835\u0836\x03" +
    "\x02\x02\x02\u0836\u0839\x03\x02\x02\x02\u0837\u0835\x03\x02\x02\x02\u0838" +
    "\u0831\x03\x02\x02\x02\u0839\u083A\x03\x02\x02\x02\u083A\u0838\x03\x02" +
    "\x02\x02\u083A\u083B\x03\x02\x02\x02\u083B\x95\x03\x02\x02\x02\u083C\u083D" +
    "\x07,\x02\x02\u083D\u083E\x05\u014C\xA7\x02\u083E\u0842\x07\xA4\x02\x02" +
    "\u083F\u0841\x07\xBD\x02\x02\u0840\u083F\x03\x02\x02\x02\u0841\u0844\x03" +
    "\x02\x02\x02\u0842\u0840\x03\x02\x02\x02\u0842\u0843\x03\x02\x02\x02\u0843" +
    "\u084C\x03\x02\x02\x02\u0844\u0842\x03\x02\x02\x02\u0845\u0849\x05T+\x02" +
    "\u0846\u0848\x07\xBD\x02\x02\u0847\u0846\x03\x02\x02\x02\u0848\u084B\x03" +
    "\x02\x02\x02\u0849\u0847\x03\x02\x02\x02\u0849\u084A\x03\x02\x02\x02\u084A" +
    "\u084D\x03\x02\x02\x02\u084B\u0849\x03\x02\x02\x02\u084C\u0845\x03\x02" +
    "\x02\x02\u084D\u084E\x03\x02\x02\x02\u084E\u084C\x03\x02\x02\x02\u084E" +
    "\u084F\x03\x02\x02\x02\u084F\x97\x03\x02\x02\x02\u0850\u0851\x07-\x02" +
    "\x02\u0851\u0852\x05\u014C\xA7\x02\u0852\u0856\x07\xA4\x02\x02\u0853\u0855" +
    "\x07\xBD\x02\x02\u0854\u0853\x03\x02\x02\x02\u0855\u0858\x03\x02\x02\x02" +
    "\u0856\u0854\x03\x02\x02\x02\u0856\u0857\x03\x02\x02\x02\u0857\u0860\x03" +
    "\x02\x02\x02\u0858\u0856\x03\x02\x02\x02\u0859\u085D\x05T+\x02\u085A\u085C" +
    "\x07\xBD\x02\x02\u085B\u085A\x03\x02\x02\x02\u085C\u085F\x03\x02\x02\x02" +
    "\u085D\u085B\x03\x02\x02\x02\u085D\u085E\x03\x02\x02\x02\u085E\u0861\x03" +
    "\x02\x02\x02\u085F\u085D\x03\x02\x02\x02\u0860\u0859\x03\x02\x02\x02\u0861" +
    "\u0862\x03\x02\x02\x02\u0862\u0860\x03\x02\x02\x02\u0862\u0863\x03\x02" +
    "\x02\x02\u0863\x99\x03\x02\x02\x02\u0864\u0865\x07.\x02\x02\u0865\u0866" +
    "\x05\u014C\xA7\x02\u0866\u086A\x07\xA4\x02\x02\u0867\u0869\x07\xBD\x02" +
    "\x02\u0868\u0867\x03\x02\x02\x02\u0869\u086C\x03\x02\x02\x02\u086A\u0868" +
    "\x03\x02\x02\x02\u086A\u086B\x03\x02\x02\x02\u086B\u0874\x03\x02\x02\x02" +
    "\u086C\u086A\x03\x02\x02\x02\u086D\u0871\x05T+\x02\u086E\u0870\x07\xBD" +
    "\x02\x02\u086F\u086E\x03\x02\x02\x02\u0870\u0873\x03\x02\x02\x02\u0871" +
    "\u086F\x03\x02\x02\x02\u0871\u0872\x03\x02\x02\x02\u0872\u0875\x03\x02" +
    "\x02\x02\u0873\u0871\x03\x02\x02\x02\u0874\u086D\x03\x02\x02\x02\u0875" +
    "\u0876\x03\x02\x02\x02\u0876\u0874\x03\x02\x02\x02\u0876\u0877\x03\x02" +
    "\x02\x02\u0877\x9B\x03\x02\x02\x02\u0878\u0879\x07/\x02\x02\u0879\u087A" +
    "\x05\u014C\xA7\x02\u087A\u087E\x07\xA4\x02\x02\u087B\u087D\x07\xBD\x02" +
    "\x02\u087C\u087B\x03\x02\x02\x02\u087D\u0880\x03\x02\x02\x02\u087E\u087C" +
    "\x03\x02\x02\x02\u087E\u087F\x03\x02\x02\x02\u087F\u0888\x03\x02\x02\x02" +
    "\u0880\u087E\x03\x02\x02\x02\u0881\u0885\x05T+\x02\u0882\u0884\x07\xBD" +
    "\x02\x02\u0883\u0882\x03\x02\x02\x02\u0884\u0887\x03\x02\x02\x02\u0885" +
    "\u0883\x03\x02\x02\x02\u0885\u0886\x03\x02\x02\x02\u0886\u0889\x03\x02" +
    "\x02\x02\u0887\u0885\x03\x02\x02\x02\u0888\u0881\x03\x02\x02\x02\u0889" +
    "\u088A\x03\x02\x02\x02\u088A\u0888\x03\x02\x02\x02\u088A\u088B\x03\x02" +
    "\x02\x02\u088B\x9D\x03\x02\x02\x02\u088C\u088D\x070\x02\x02\u088D\u088E" +
    "\x05\u014C\xA7\x02\u088E\u0892\x07\xA4\x02\x02\u088F\u0891\x07\xBD\x02" +
    "\x02\u0890\u088F\x03\x02\x02\x02\u0891\u0894\x03\x02\x02\x02\u0892\u0890" +
    "\x03\x02\x02\x02\u0892\u0893\x03\x02\x02\x02\u0893\u089C\x03\x02\x02\x02" +
    "\u0894\u0892\x03\x02\x02\x02\u0895\u0899\x05T+\x02\u0896\u0898\x07\xBD" +
    "\x02\x02\u0897\u0896\x03\x02\x02\x02\u0898\u089B\x03\x02\x02\x02\u0899" +
    "\u0897\x03\x02\x02\x02\u0899\u089A\x03\x02\x02\x02\u089A\u089D\x03\x02" +
    "\x02\x02\u089B\u0899\x03\x02\x02\x02\u089C\u0895\x03\x02\x02\x02\u089D" +
    "\u089E\x03\x02\x02\x02\u089E\u089C\x03\x02\x02\x02\u089E\u089F\x03\x02" +
    "\x02\x02\u089F\x9F\x03\x02\x02\x02\u08A0\u08A1\x071\x02\x02\u08A1\u08A2" +
    "\x05\u014C\xA7\x02\u08A2\u08A6\x07\xA4\x02\x02\u08A3\u08A5\x07\xBD\x02" +
    "\x02\u08A4\u08A3\x03\x02\x02\x02\u08A5\u08A8\x03\x02\x02\x02\u08A6\u08A4" +
    "\x03\x02\x02\x02\u08A6\u08A7\x03\x02\x02\x02\u08A7\u08B0\x03\x02\x02\x02" +
    "\u08A8\u08A6\x03\x02\x02\x02\u08A9\u08AD\x05T+\x02\u08AA\u08AC\x07\xBD" +
    "\x02\x02\u08AB\u08AA\x03\x02\x02\x02\u08AC\u08AF\x03\x02\x02\x02\u08AD" +
    "\u08AB\x03\x02\x02\x02\u08AD\u08AE\x03\x02\x02\x02\u08AE\u08B1\x03\x02" +
    "\x02\x02\u08AF\u08AD\x03\x02\x02\x02\u08B0\u08A9\x03\x02\x02\x02\u08B1" +
    "\u08B2\x03\x02\x02\x02\u08B2\u08B0\x03\x02\x02\x02\u08B2\u08B3\x03\x02" +
    "\x02\x02\u08B3\xA1\x03\x02\x02\x02\u08B4\u08B5\x07*\x02\x02\u08B5\u08B6" +
    "\x05\u014C\xA7\x02\u08B6\u08BA\x07\xA4\x02\x02\u08B7\u08B9\x07\xBD\x02" +
    "\x02\u08B8\u08B7\x03\x02\x02\x02\u08B9\u08BC\x03\x02\x02\x02\u08BA\u08B8" +
    "\x03\x02\x02\x02\u08BA\u08BB\x03\x02\x02\x02\u08BB\u08C4\x03\x02\x02\x02" +
    "\u08BC\u08BA\x03\x02\x02\x02\u08BD\u08C1\x05T+\x02\u08BE\u08C0\x07\xBD" +
    "\x02\x02\u08BF\u08BE\x03\x02\x02\x02\u08C0\u08C3\x03\x02\x02\x02\u08C1" +
    "\u08BF\x03\x02\x02\x02\u08C1\u08C2\x03\x02\x02\x02\u08C2\u08C5\x03\x02" +
    "\x02\x02\u08C3\u08C1\x03\x02\x02\x02\u08C4\u08BD\x03\x02\x02\x02\u08C5" +
    "\u08C6\x03\x02\x02\x02\u08C6\u08C4\x03\x02\x02\x02\u08C6\u08C7\x03\x02" +
    "\x02\x02\u08C7\xA3\x03\x02\x02\x02\u08C8\u08C9\x072\x02\x02\u08C9\u08CA" +
    "\x05\u014C\xA7\x02\u08CA\u08CE\x07\xA4\x02\x02\u08CB\u08CD\x07\xBD\x02" +
    "\x02\u08CC\u08CB\x03\x02\x02\x02\u08CD\u08D0\x03\x02\x02\x02\u08CE\u08CC" +
    "\x03\x02\x02\x02\u08CE\u08CF\x03\x02\x02\x02\u08CF\u08D8\x03\x02\x02\x02" +
    "\u08D0\u08CE\x03\x02\x02\x02\u08D1\u08D5\x05T+\x02\u08D2\u08D4\x07\xBD" +
    "\x02\x02\u08D3\u08D2\x03\x02\x02\x02\u08D4\u08D7\x03\x02\x02\x02\u08D5" +
    "\u08D3\x03\x02\x02\x02\u08D5\u08D6\x03\x02\x02\x02\u08D6\u08D9\x03\x02" +
    "\x02\x02\u08D7\u08D5\x03\x02\x02\x02\u08D8\u08D1\x03\x02\x02\x02\u08D9" +
    "\u08DA\x03\x02\x02\x02\u08DA\u08D8\x03\x02\x02\x02\u08DA\u08DB\x03\x02" +
    "\x02\x02\u08DB\xA5\x03\x02\x02\x02\u08DC\u08DD\x07J\x02\x02\u08DD\u08DE" +
    "\x05\u014C\xA7\x02\u08DE\u08E2\x07\xA4\x02\x02\u08DF\u08E1\x07\xBD\x02" +
    "\x02\u08E0\u08DF\x03\x02\x02\x02\u08E1\u08E4\x03\x02\x02\x02\u08E2\u08E0" +
    "\x03\x02\x02\x02\u08E2\u08E3\x03\x02\x02\x02\u08E3\u08EC\x03\x02\x02\x02" +
    "\u08E4\u08E2\x03\x02\x02\x02\u08E5\u08E9\x05T+\x02\u08E6\u08E8\x07\xBD" +
    "\x02\x02\u08E7\u08E6\x03\x02\x02\x02\u08E8\u08EB\x03\x02\x02\x02\u08E9" +
    "\u08E7\x03\x02\x02\x02\u08E9\u08EA\x03\x02\x02\x02\u08EA\u08ED\x03\x02" +
    "\x02\x02\u08EB\u08E9\x03\x02\x02\x02\u08EC\u08E5\x03\x02\x02\x02\u08ED" +
    "\u08EE\x03\x02\x02\x02\u08EE\u08EC\x03\x02\x02\x02\u08EE\u08EF\x03\x02" +
    "\x02\x02\u08EF\xA7\x03\x02\x02\x02\u08F0\u08F1\x07K\x02\x02\u08F1\u08F2" +
    "\x05\u014C\xA7\x02\u08F2\u08F6\x07\xA4\x02\x02\u08F3\u08F5\x07\xBD\x02" +
    "\x02\u08F4\u08F3\x03\x02\x02\x02\u08F5\u08F8\x03\x02\x02\x02\u08F6\u08F4" +
    "\x03\x02\x02\x02\u08F6\u08F7\x03\x02\x02\x02\u08F7\u0900\x03\x02\x02\x02" +
    "\u08F8\u08F6\x03\x02\x02\x02\u08F9\u08FD\x05T+\x02\u08FA\u08FC\x07\xBD" +
    "\x02\x02\u08FB\u08FA\x03\x02\x02\x02\u08FC\u08FF\x03\x02\x02\x02\u08FD" +
    "\u08FB\x03\x02\x02\x02\u08FD\u08FE\x03\x02\x02\x02\u08FE\u0901\x03\x02" +
    "\x02\x02\u08FF\u08FD\x03\x02\x02\x02\u0900\u08F9\x03\x02\x02\x02\u0901" +
    "\u0902\x03\x02\x02\x02\u0902\u0900\x03\x02\x02\x02\u0902\u0903\x03\x02" +
    "\x02\x02\u0903\xA9\x03\x02\x02\x02\u0904\u0905\x07L\x02\x02\u0905\u0906" +
    "\x05\u0152\xAA\x02\u0906\u090A\x07\xA4\x02\x02\u0907\u0909\x07\xBD\x02" +
    "\x02\u0908\u0907\x03\x02\x02\x02\u0909\u090C\x03\x02\x02\x02\u090A\u0908" +
    "\x03\x02\x02\x02\u090A\u090B\x03\x02\x02\x02\u090B\u0914\x03\x02\x02\x02" +
    "\u090C\u090A\x03\x02\x02\x02\u090D\u0911\x05T+\x02\u090E\u0910\x07\xBD" +
    "\x02\x02\u090F\u090E\x03\x02\x02\x02\u0910\u0913\x03\x02\x02\x02\u0911" +
    "\u090F\x03\x02\x02\x02\u0911\u0912\x03\x02\x02\x02\u0912\u0915\x03\x02" +
    "\x02\x02\u0913\u0911\x03\x02\x02\x02\u0914\u090D\x03\x02\x02\x02\u0915" +
    "\u0916\x03\x02\x02\x02\u0916\u0914\x03\x02\x02\x02\u0916\u0917\x03\x02" +
    "\x02\x02\u0917\xAB\x03\x02\x02\x02\u0918\u0919\x07M\x02\x02\u0919\u091A" +
    "\x05\u0152\xAA\x02\u091A\u091E\x07\xA4\x02\x02\u091B\u091D\x07\xBD\x02" +
    "\x02\u091C\u091B\x03\x02\x02\x02\u091D\u0920\x03\x02\x02\x02\u091E\u091C" +
    "\x03\x02\x02\x02\u091E\u091F\x03\x02\x02\x02\u091F\u0928\x03\x02\x02\x02" +
    "\u0920\u091E\x03\x02\x02\x02\u0921\u0925\x05T+\x02\u0922\u0924\x07\xBD" +
    "\x02\x02\u0923\u0922\x03\x02\x02\x02\u0924\u0927\x03\x02\x02\x02\u0925" +
    "\u0923\x03\x02\x02\x02\u0925\u0926\x03\x02\x02\x02\u0926\u0929\x03\x02" +
    "\x02\x02\u0927\u0925\x03\x02\x02\x02\u0928\u0921\x03\x02\x02\x02\u0929" +
    "\u092A\x03\x02\x02\x02\u092A\u0928\x03\x02\x02\x02\u092A\u092B\x03\x02" +
    "\x02\x02\u092B\xAD\x03\x02\x02\x02\u092C\u092D\x07N\x02\x02\u092D\u092E" +
    "\x05\u0152\xAA\x02\u092E\u0932\x07\xA4\x02\x02\u092F\u0931\x07\xBD\x02" +
    "\x02\u0930\u092F\x03\x02\x02\x02\u0931\u0934\x03\x02\x02\x02\u0932\u0930" +
    "\x03\x02\x02\x02\u0932\u0933\x03\x02\x02\x02\u0933\u093C\x03\x02\x02\x02" +
    "\u0934\u0932\x03\x02\x02\x02\u0935\u0939\x05T+\x02\u0936\u0938\x07\xBD" +
    "\x02\x02\u0937\u0936\x03\x02\x02\x02\u0938\u093B\x03\x02\x02\x02\u0939" +
    "\u0937\x03\x02\x02\x02\u0939\u093A\x03\x02\x02\x02\u093A\u093D\x03\x02" +
    "\x02\x02\u093B\u0939\x03\x02\x02\x02\u093C\u0935\x03\x02\x02\x02\u093D" +
    "\u093E\x03\x02\x02\x02\u093E\u093C\x03\x02\x02\x02\u093E\u093F\x03\x02" +
    "\x02\x02\u093F\xAF\x03\x02\x02\x02\u0940\u0941\x07O\x02\x02\u0941\u0942" +
    "\x05\u0152\xAA\x02\u0942\u0946\x07\xA4\x02\x02\u0943\u0945\x07\xBD\x02" +
    "\x02\u0944\u0943\x03\x02\x02\x02\u0945\u0948\x03\x02\x02\x02\u0946\u0944" +
    "\x03\x02\x02\x02\u0946\u0947\x03\x02\x02\x02\u0947\u0950\x03\x02\x02\x02" +
    "\u0948\u0946\x03\x02\x02\x02\u0949\u094D\x05T+\x02\u094A\u094C\x07\xBD" +
    "\x02\x02\u094B\u094A\x03\x02\x02\x02\u094C\u094F\x03\x02\x02\x02\u094D" +
    "\u094B\x03\x02\x02\x02\u094D\u094E\x03\x02\x02\x02\u094E\u0951\x03\x02" +
    "\x02\x02\u094F\u094D\x03\x02\x02\x02\u0950\u0949\x03\x02\x02\x02\u0951" +
    "\u0952\x03\x02\x02\x02\u0952\u0950\x03\x02\x02\x02\u0952\u0953\x03\x02" +
    "\x02\x02\u0953\xB1\x03\x02\x02\x02\u0954\u0955\x07P\x02\x02\u0955\u0956" +
    "\x05\u0152\xAA\x02\u0956\u095A\x07\xA4\x02\x02\u0957\u0959\x07\xBD\x02" +
    "\x02\u0958\u0957\x03\x02\x02\x02\u0959\u095C\x03\x02\x02\x02\u095A\u0958" +
    "\x03\x02\x02\x02\u095A\u095B\x03\x02\x02\x02\u095B\u0964\x03\x02\x02\x02" +
    "\u095C\u095A\x03\x02\x02\x02\u095D\u0961\x05T+\x02\u095E\u0960\x07\xBD" +
    "\x02\x02\u095F\u095E\x03\x02\x02\x02\u0960\u0963\x03\x02\x02\x02\u0961" +
    "\u095F\x03\x02\x02\x02\u0961\u0962\x03\x02\x02\x02\u0962\u0965\x03\x02" +
    "\x02\x02\u0963\u0961\x03\x02\x02\x02\u0964\u095D\x03\x02\x02\x02\u0965" +
    "\u0966\x03\x02\x02\x02\u0966\u0964\x03\x02\x02\x02\u0966\u0967\x03\x02" +
    "\x02\x02\u0967\xB3\x03\x02\x02\x02\u0968\u0969\x07Q\x02\x02\u0969\u096A" +
    "\x05\u0152\xAA\x02\u096A\u096E\x07\xA4\x02\x02\u096B\u096D\x07\xBD\x02" +
    "\x02\u096C\u096B\x03\x02\x02\x02\u096D\u0970\x03\x02\x02\x02\u096E\u096C" +
    "\x03\x02\x02\x02\u096E\u096F\x03\x02\x02\x02\u096F\u0978\x03\x02\x02\x02" +
    "\u0970\u096E\x03\x02\x02\x02\u0971\u0975\x05T+\x02\u0972\u0974\x07\xBD" +
    "\x02\x02\u0973\u0972\x03\x02\x02\x02\u0974\u0977\x03\x02\x02\x02\u0975" +
    "\u0973\x03\x02\x02\x02\u0975\u0976\x03\x02\x02\x02\u0976\u0979\x03\x02" +
    "\x02\x02\u0977\u0975\x03\x02\x02\x02\u0978\u0971\x03\x02\x02\x02\u0979" +
    "\u097A\x03\x02\x02\x02\u097A\u0978\x03\x02\x02\x02\u097A\u097B\x03\x02" +
    "\x02\x02\u097B\xB5\x03\x02\x02\x02\u097C\u097D\x07R\x02\x02\u097D\u097E" +
    "\x05\u0152\xAA\x02\u097E\u0982\x07\xA4\x02\x02\u097F\u0981\x07\xBD\x02" +
    "\x02\u0980\u097F\x03\x02\x02\x02\u0981\u0984\x03\x02\x02\x02\u0982\u0980" +
    "\x03\x02\x02\x02\u0982\u0983\x03\x02\x02\x02\u0983\u098C\x03\x02\x02\x02" +
    "\u0984\u0982\x03\x02\x02\x02\u0985\u0989\x05T+\x02\u0986\u0988\x07\xBD" +
    "\x02\x02\u0987\u0986\x03\x02\x02\x02\u0988\u098B\x03\x02\x02\x02\u0989" +
    "\u0987\x03\x02\x02\x02\u0989\u098A\x03\x02\x02\x02\u098A\u098D\x03\x02" +
    "\x02\x02\u098B\u0989\x03\x02\x02\x02\u098C\u0985\x03\x02\x02\x02\u098D" +
    "\u098E\x03\x02\x02\x02\u098E\u098C\x03\x02\x02\x02\u098E\u098F\x03\x02" +
    "\x02\x02\u098F\xB7\x03\x02\x02\x02\u0990\u0991\x07S\x02\x02\u0991\u0992" +
    "\x05\u0152\xAA\x02\u0992\u0996\x07\xA4\x02\x02\u0993\u0995\x07\xBD\x02" +
    "\x02\u0994\u0993\x03\x02\x02\x02\u0995\u0998\x03\x02\x02\x02\u0996\u0994" +
    "\x03\x02\x02\x02\u0996\u0997\x03\x02\x02\x02\u0997\u09A0\x03\x02\x02\x02" +
    "\u0998\u0996\x03\x02\x02\x02\u0999\u099D\x05T+\x02\u099A\u099C\x07\xBD" +
    "\x02\x02\u099B\u099A\x03\x02\x02\x02\u099C\u099F\x03\x02\x02\x02\u099D" +
    "\u099B\x03\x02\x02\x02\u099D\u099E\x03\x02\x02\x02\u099E\u09A1\x03\x02" +
    "\x02\x02\u099F\u099D\x03\x02\x02\x02\u09A0\u0999\x03\x02\x02\x02\u09A1" +
    "\u09A2\x03\x02\x02\x02\u09A2\u09A0\x03\x02\x02\x02\u09A2\u09A3\x03\x02" +
    "\x02\x02\u09A3\xB9\x03\x02\x02\x02\u09A4\u09A5\x07T\x02\x02\u09A5\u09A6" +
    "\x05\u0152\xAA\x02\u09A6\u09AA\x07\xA4\x02\x02\u09A7\u09A9\x07\xBD\x02" +
    "\x02\u09A8\u09A7\x03\x02\x02\x02\u09A9\u09AC\x03\x02\x02\x02\u09AA\u09A8" +
    "\x03\x02\x02\x02\u09AA\u09AB\x03\x02\x02\x02\u09AB\u09B4\x03\x02\x02\x02" +
    "\u09AC\u09AA\x03\x02\x02\x02\u09AD\u09B1\x05T+\x02\u09AE\u09B0\x07\xBD" +
    "\x02\x02\u09AF\u09AE\x03\x02\x02\x02\u09B0\u09B3\x03\x02\x02\x02\u09B1" +
    "\u09AF\x03\x02\x02\x02\u09B1\u09B2\x03\x02\x02\x02\u09B2\u09B5\x03\x02" +
    "\x02\x02\u09B3\u09B1\x03\x02\x02\x02\u09B4\u09AD\x03\x02\x02\x02\u09B5" +
    "\u09B6\x03\x02\x02\x02\u09B6\u09B4\x03\x02\x02\x02\u09B6\u09B7\x03\x02" +
    "\x02\x02\u09B7\xBB\x03\x02\x02\x02\u09B8\u09B9\x07U\x02\x02\u09B9\u09BA" +
    "\x05\u0152\xAA\x02\u09BA\u09BE\x07\xA4\x02\x02\u09BB\u09BD\x07\xBD\x02" +
    "\x02\u09BC\u09BB\x03\x02\x02\x02\u09BD\u09C0\x03\x02\x02\x02\u09BE\u09BC" +
    "\x03\x02\x02\x02\u09BE\u09BF\x03\x02\x02\x02\u09BF\u09C8\x03\x02\x02\x02" +
    "\u09C0\u09BE\x03\x02\x02\x02\u09C1\u09C5\x05T+\x02\u09C2\u09C4\x07\xBD" +
    "\x02\x02\u09C3\u09C2\x03\x02\x02\x02\u09C4\u09C7\x03\x02\x02\x02\u09C5" +
    "\u09C3\x03\x02\x02\x02\u09C5\u09C6\x03\x02\x02\x02\u09C6\u09C9\x03\x02" +
    "\x02\x02\u09C7\u09C5\x03\x02\x02\x02\u09C8\u09C1\x03\x02\x02\x02\u09C9" +
    "\u09CA\x03\x02\x02\x02\u09CA\u09C8\x03\x02\x02\x02\u09CA\u09CB\x03\x02" +
    "\x02\x02\u09CB\xBD\x03\x02\x02\x02\u09CC\u09CD\x07V\x02\x02\u09CD\u09CE" +
    "\x05\u0152\xAA\x02\u09CE\u09D2\x07\xA4\x02\x02\u09CF\u09D1\x07\xBD\x02" +
    "\x02\u09D0\u09CF\x03\x02\x02\x02\u09D1\u09D4\x03\x02\x02\x02\u09D2\u09D0" +
    "\x03\x02\x02\x02\u09D2\u09D3\x03\x02\x02\x02\u09D3\u09DC\x03\x02\x02\x02" +
    "\u09D4\u09D2\x03\x02\x02\x02\u09D5\u09D9\x05T+\x02\u09D6\u09D8\x07\xBD" +
    "\x02\x02\u09D7\u09D6\x03\x02\x02\x02\u09D8\u09DB\x03\x02\x02\x02\u09D9" +
    "\u09D7\x03\x02\x02\x02\u09D9\u09DA\x03\x02\x02\x02\u09DA\u09DD\x03\x02" +
    "\x02\x02\u09DB\u09D9\x03\x02\x02\x02\u09DC\u09D5\x03\x02\x02\x02\u09DD" +
    "\u09DE\x03\x02\x02\x02\u09DE\u09DC\x03\x02\x02\x02\u09DE\u09DF\x03\x02" +
    "\x02\x02\u09DF\xBF\x03\x02\x02\x02\u09E0\u09E1\x07W\x02\x02\u09E1\u09E2" +
    "\x05\u0152\xAA\x02\u09E2\u09E6\x07\xA4\x02\x02\u09E3\u09E5\x07\xBD\x02" +
    "\x02\u09E4\u09E3\x03\x02\x02\x02\u09E5\u09E8\x03\x02\x02\x02\u09E6\u09E4" +
    "\x03\x02\x02\x02\u09E6\u09E7\x03\x02\x02\x02\u09E7\u09F0\x03\x02\x02\x02" +
    "\u09E8\u09E6\x03\x02\x02\x02\u09E9\u09ED\x05T+\x02\u09EA\u09EC\x07\xBD" +
    "\x02\x02\u09EB\u09EA\x03\x02\x02\x02\u09EC\u09EF\x03\x02\x02\x02\u09ED" +
    "\u09EB\x03\x02\x02\x02\u09ED\u09EE\x03\x02\x02\x02\u09EE\u09F1\x03\x02" +
    "\x02\x02\u09EF\u09ED\x03\x02\x02\x02\u09F0\u09E9\x03\x02\x02\x02\u09F1" +
    "\u09F2\x03\x02\x02\x02\u09F2\u09F0\x03\x02\x02\x02\u09F2\u09F3\x03\x02" +
    "\x02\x02\u09F3\xC1\x03\x02\x02\x02\u09F4\u09F5\x07X\x02\x02\u09F5\u09F6" +
    "\x05\u0152\xAA\x02\u09F6\u09FA\x07\xA4\x02\x02\u09F7\u09F9\x07\xBD\x02" +
    "\x02\u09F8\u09F7\x03\x02\x02\x02\u09F9\u09FC\x03\x02\x02\x02\u09FA\u09F8" +
    "\x03\x02\x02\x02\u09FA\u09FB\x03\x02\x02\x02\u09FB\u0A04\x03\x02\x02\x02" +
    "\u09FC\u09FA\x03\x02\x02\x02\u09FD\u0A01\x05T+\x02\u09FE\u0A00\x07\xBD" +
    "\x02\x02\u09FF\u09FE\x03\x02\x02\x02\u0A00\u0A03\x03\x02\x02\x02\u0A01" +
    "\u09FF\x03\x02\x02\x02\u0A01\u0A02\x03\x02\x02\x02\u0A02\u0A05\x03\x02" +
    "\x02\x02\u0A03\u0A01\x03\x02\x02\x02\u0A04\u09FD\x03\x02\x02\x02\u0A05" +
    "\u0A06\x03\x02\x02\x02\u0A06\u0A04\x03\x02\x02\x02\u0A06\u0A07\x03\x02" +
    "\x02\x02\u0A07\xC3\x03\x02\x02\x02\u0A08\u0A09\x07Y\x02\x02\u0A09\u0A0A" +
    "\x05\u0152\xAA\x02\u0A0A\u0A0E\x07\xA4\x02\x02\u0A0B\u0A0D\x07\xBD\x02" +
    "\x02\u0A0C\u0A0B\x03\x02\x02\x02\u0A0D\u0A10\x03\x02\x02\x02\u0A0E\u0A0C" +
    "\x03\x02\x02\x02\u0A0E\u0A0F\x03\x02\x02\x02\u0A0F\u0A18\x03\x02\x02\x02" +
    "\u0A10\u0A0E\x03\x02\x02\x02\u0A11\u0A15\x05T+\x02\u0A12\u0A14\x07\xBD" +
    "\x02\x02\u0A13\u0A12\x03\x02\x02\x02\u0A14\u0A17\x03\x02\x02\x02\u0A15" +
    "\u0A13\x03\x02\x02\x02\u0A15\u0A16\x03\x02\x02\x02\u0A16\u0A19\x03\x02" +
    "\x02\x02\u0A17\u0A15\x03\x02\x02\x02\u0A18\u0A11\x03\x02\x02\x02\u0A19" +
    "\u0A1A\x03\x02\x02\x02\u0A1A\u0A18\x03\x02\x02\x02\u0A1A\u0A1B\x03\x02" +
    "\x02\x02\u0A1B\xC5\x03\x02\x02\x02\u0A1C\u0A1D\x07Z\x02\x02\u0A1D\u0A1E" +
    "\x05\u0152\xAA\x02\u0A1E\u0A22\x07\xA4\x02\x02\u0A1F\u0A21\x07\xBD\x02" +
    "\x02\u0A20\u0A1F\x03\x02\x02\x02\u0A21\u0A24\x03\x02\x02\x02\u0A22\u0A20" +
    "\x03\x02\x02\x02\u0A22\u0A23\x03\x02\x02\x02\u0A23\u0A2C\x03\x02\x02\x02" +
    "\u0A24\u0A22\x03\x02\x02\x02\u0A25\u0A29\x05T+\x02\u0A26\u0A28\x07\xBD" +
    "\x02\x02\u0A27\u0A26\x03\x02\x02\x02\u0A28\u0A2B\x03\x02\x02\x02\u0A29" +
    "\u0A27\x03\x02\x02\x02\u0A29\u0A2A\x03\x02\x02\x02\u0A2A\u0A2D\x03\x02" +
    "\x02\x02\u0A2B\u0A29\x03\x02\x02\x02\u0A2C\u0A25\x03\x02\x02\x02\u0A2D" +
    "\u0A2E\x03\x02\x02\x02\u0A2E\u0A2C\x03\x02\x02\x02\u0A2E\u0A2F\x03\x02" +
    "\x02\x02\u0A2F\xC7\x03\x02\x02\x02\u0A30\u0A31\x07[\x02\x02\u0A31\u0A32" +
    "\x05\u0152\xAA\x02\u0A32\u0A36\x07\xA4\x02\x02\u0A33\u0A35\x07\xBD\x02" +
    "\x02\u0A34\u0A33\x03\x02\x02\x02\u0A35\u0A38\x03\x02\x02\x02\u0A36\u0A34" +
    "\x03\x02\x02\x02\u0A36\u0A37\x03\x02\x02\x02\u0A37\u0A40\x03\x02\x02\x02" +
    "\u0A38\u0A36\x03\x02\x02\x02\u0A39\u0A3D\x05T+\x02\u0A3A\u0A3C\x07\xBD" +
    "\x02\x02\u0A3B\u0A3A\x03\x02\x02\x02\u0A3C\u0A3F\x03\x02\x02\x02\u0A3D" +
    "\u0A3B\x03\x02\x02\x02\u0A3D\u0A3E\x03\x02\x02\x02\u0A3E\u0A41\x03\x02" +
    "\x02\x02\u0A3F\u0A3D\x03\x02\x02\x02\u0A40\u0A39\x03\x02\x02\x02\u0A41" +
    "\u0A42\x03\x02\x02\x02\u0A42\u0A40\x03\x02\x02\x02\u0A42\u0A43\x03\x02" +
    "\x02\x02\u0A43\xC9\x03\x02\x02\x02\u0A44\u0A45\x07\\\x02\x02\u0A45\u0A46" +
    "\x05\u0152\xAA\x02\u0A46\u0A4A\x07\xA4\x02\x02\u0A47\u0A49\x07\xBD\x02" +
    "\x02\u0A48\u0A47\x03\x02\x02\x02\u0A49\u0A4C\x03\x02\x02\x02\u0A4A\u0A48" +
    "\x03\x02\x02\x02\u0A4A\u0A4B\x03\x02\x02\x02\u0A4B\u0A54\x03\x02\x02\x02" +
    "\u0A4C\u0A4A\x03\x02\x02\x02\u0A4D\u0A51\x05T+\x02\u0A4E\u0A50\x07\xBD" +
    "\x02\x02\u0A4F\u0A4E\x03\x02\x02\x02\u0A50\u0A53\x03\x02\x02\x02\u0A51" +
    "\u0A4F\x03\x02\x02\x02\u0A51\u0A52\x03\x02\x02\x02\u0A52\u0A55\x03\x02" +
    "\x02\x02\u0A53\u0A51\x03\x02\x02\x02\u0A54\u0A4D\x03\x02\x02\x02\u0A55" +
    "\u0A56\x03\x02\x02\x02\u0A56\u0A54\x03\x02\x02\x02\u0A56\u0A57\x03\x02" +
    "\x02\x02\u0A57\xCB\x03\x02\x02\x02\u0A58\u0A59\x07]\x02\x02\u0A59\u0A5A" +
    "\x05\u0152\xAA\x02\u0A5A\u0A5E\x07\xA4\x02\x02\u0A5B\u0A5D\x07\xBD\x02" +
    "\x02\u0A5C\u0A5B\x03\x02\x02\x02\u0A5D\u0A60\x03\x02\x02\x02\u0A5E\u0A5C" +
    "\x03\x02\x02\x02\u0A5E\u0A5F\x03\x02\x02\x02\u0A5F\u0A68\x03\x02\x02\x02" +
    "\u0A60\u0A5E\x03\x02\x02\x02\u0A61\u0A65\x05T+\x02\u0A62\u0A64\x07\xBD" +
    "\x02\x02\u0A63\u0A62\x03\x02\x02\x02\u0A64\u0A67\x03\x02\x02\x02\u0A65" +
    "\u0A63\x03\x02\x02\x02\u0A65\u0A66\x03\x02\x02\x02\u0A66\u0A69\x03\x02" +
    "\x02\x02\u0A67\u0A65\x03\x02\x02\x02\u0A68\u0A61\x03\x02\x02\x02\u0A69" +
    "\u0A6A\x03\x02\x02\x02\u0A6A\u0A68\x03\x02\x02\x02\u0A6A\u0A6B\x03\x02" +
    "\x02\x02\u0A6B\xCD\x03\x02\x02\x02\u0A6C\u0A6D\x07^\x02\x02\u0A6D\u0A6E" +
    "\x05\u0152\xAA\x02\u0A6E\u0A72\x07\xA4\x02\x02\u0A6F\u0A71\x07\xBD\x02" +
    "\x02\u0A70\u0A6F\x03\x02\x02\x02\u0A71\u0A74\x03\x02\x02\x02\u0A72\u0A70" +
    "\x03\x02\x02\x02\u0A72\u0A73\x03\x02\x02\x02\u0A73\u0A7C\x03\x02\x02\x02" +
    "\u0A74\u0A72\x03\x02\x02\x02\u0A75\u0A79\x05T+\x02\u0A76\u0A78\x07\xBD" +
    "\x02\x02\u0A77\u0A76\x03\x02\x02\x02\u0A78\u0A7B\x03\x02\x02\x02\u0A79" +
    "\u0A77\x03\x02\x02\x02\u0A79\u0A7A\x03\x02\x02\x02\u0A7A\u0A7D\x03\x02" +
    "\x02\x02\u0A7B\u0A79\x03\x02\x02\x02\u0A7C\u0A75\x03\x02\x02\x02\u0A7D" +
    "\u0A7E\x03\x02\x02\x02\u0A7E\u0A7C\x03\x02\x02\x02\u0A7E\u0A7F\x03\x02" +
    "\x02\x02\u0A7F\xCF\x03\x02\x02\x02\u0A80\u0A81\x07_\x02\x02\u0A81\u0A82" +
    "\x05\u0152\xAA\x02\u0A82\u0A86\x07\xA4\x02\x02\u0A83\u0A85\x07\xBD\x02" +
    "\x02\u0A84\u0A83\x03\x02\x02\x02\u0A85\u0A88\x03\x02\x02\x02\u0A86\u0A84" +
    "\x03\x02\x02\x02\u0A86\u0A87\x03\x02\x02\x02\u0A87\u0A90\x03\x02\x02\x02" +
    "\u0A88\u0A86\x03\x02\x02\x02\u0A89\u0A8D\x05T+\x02\u0A8A\u0A8C\x07\xBD" +
    "\x02\x02\u0A8B\u0A8A\x03\x02\x02\x02\u0A8C\u0A8F\x03\x02\x02\x02\u0A8D" +
    "\u0A8B\x03\x02\x02\x02\u0A8D\u0A8E\x03\x02\x02\x02\u0A8E\u0A91\x03\x02" +
    "\x02\x02\u0A8F\u0A8D\x03\x02\x02\x02\u0A90\u0A89\x03\x02\x02\x02\u0A91" +
    "\u0A92\x03\x02\x02\x02\u0A92\u0A90\x03\x02\x02\x02\u0A92\u0A93\x03\x02" +
    "\x02\x02\u0A93\xD1\x03\x02\x02\x02\u0A94\u0A95\x07`\x02\x02\u0A95\u0A96" +
    "\x05\u0152\xAA\x02\u0A96\u0A9A\x07\xA4\x02\x02\u0A97\u0A99\x07\xBD\x02" +
    "\x02\u0A98\u0A97\x03\x02\x02\x02\u0A99\u0A9C\x03\x02\x02\x02\u0A9A\u0A98" +
    "\x03\x02\x02\x02\u0A9A\u0A9B\x03\x02\x02\x02\u0A9B\u0AA4\x03\x02\x02\x02" +
    "\u0A9C\u0A9A\x03\x02\x02\x02\u0A9D\u0AA1\x05T+\x02\u0A9E\u0AA0\x07\xBD" +
    "\x02\x02\u0A9F\u0A9E\x03\x02\x02\x02\u0AA0\u0AA3\x03\x02\x02\x02\u0AA1" +
    "\u0A9F\x03\x02\x02\x02\u0AA1\u0AA2\x03\x02\x02\x02\u0AA2\u0AA5\x03\x02" +
    "\x02\x02\u0AA3\u0AA1\x03\x02\x02\x02\u0AA4\u0A9D\x03\x02\x02\x02\u0AA5" +
    "\u0AA6\x03\x02\x02\x02\u0AA6\u0AA4\x03\x02\x02\x02\u0AA6\u0AA7\x03\x02" +
    "\x02\x02\u0AA7\xD3\x03\x02\x02\x02\u0AA8\u0AA9\x07a\x02\x02\u0AA9\u0AAA" +
    "\x05\u0152\xAA\x02\u0AAA\u0AAE\x07\xA4\x02\x02\u0AAB\u0AAD\x07\xBD\x02" +
    "\x02\u0AAC\u0AAB\x03\x02\x02\x02\u0AAD\u0AB0\x03\x02\x02\x02\u0AAE\u0AAC" +
    "\x03\x02\x02\x02\u0AAE\u0AAF\x03\x02\x02\x02\u0AAF\u0AB8\x03\x02\x02\x02" +
    "\u0AB0\u0AAE\x03\x02\x02\x02\u0AB1\u0AB5\x05T+\x02\u0AB2\u0AB4\x07\xBD" +
    "\x02\x02\u0AB3\u0AB2\x03\x02\x02\x02\u0AB4\u0AB7\x03\x02\x02\x02\u0AB5" +
    "\u0AB3\x03\x02\x02\x02\u0AB5\u0AB6\x03\x02\x02\x02\u0AB6\u0AB9\x03\x02" +
    "\x02\x02\u0AB7\u0AB5\x03\x02\x02\x02\u0AB8\u0AB1\x03\x02\x02\x02\u0AB9" +
    "\u0ABA\x03\x02\x02\x02\u0ABA\u0AB8\x03\x02\x02\x02\u0ABA\u0ABB\x03\x02" +
    "\x02\x02\u0ABB\xD5\x03\x02\x02\x02\u0ABC\u0ABD\x07b\x02\x02\u0ABD\u0ABE" +
    "\x05\u0152\xAA\x02\u0ABE\u0AC2\x07\xA4\x02\x02\u0ABF\u0AC1\x07\xBD\x02" +
    "\x02\u0AC0\u0ABF\x03\x02\x02\x02\u0AC1\u0AC4\x03\x02\x02\x02\u0AC2\u0AC0" +
    "\x03\x02\x02\x02\u0AC2\u0AC3\x03\x02\x02\x02\u0AC3\u0ACC\x03\x02\x02\x02" +
    "\u0AC4\u0AC2\x03\x02\x02\x02\u0AC5\u0AC9\x05T+\x02\u0AC6\u0AC8\x07\xBD" +
    "\x02\x02\u0AC7\u0AC6\x03\x02\x02\x02\u0AC8\u0ACB\x03\x02\x02\x02\u0AC9" +
    "\u0AC7\x03\x02\x02\x02\u0AC9\u0ACA\x03\x02\x02\x02\u0ACA\u0ACD\x03\x02" +
    "\x02\x02\u0ACB\u0AC9\x03\x02\x02\x02\u0ACC\u0AC5\x03\x02\x02\x02\u0ACD" +
    "\u0ACE\x03\x02\x02\x02\u0ACE\u0ACC\x03\x02\x02\x02\u0ACE\u0ACF\x03\x02" +
    "\x02\x02\u0ACF\xD7\x03\x02\x02\x02\u0AD0\u0AD1\x07c\x02\x02\u0AD1\u0AD2" +
    "\x05\u014C\xA7\x02\u0AD2\u0AD6\x07\xA4\x02\x02\u0AD3\u0AD5\x07\xBD\x02" +
    "\x02\u0AD4\u0AD3\x03\x02\x02\x02\u0AD5\u0AD8\x03\x02\x02\x02\u0AD6\u0AD4" +
    "\x03\x02\x02\x02\u0AD6\u0AD7\x03\x02\x02\x02\u0AD7\u0AE0\x03\x02\x02\x02" +
    "\u0AD8\u0AD6\x03\x02\x02\x02\u0AD9\u0ADD\x05T+\x02\u0ADA\u0ADC\x07\xBD" +
    "\x02\x02\u0ADB\u0ADA\x03\x02\x02\x02\u0ADC\u0ADF\x03\x02\x02\x02\u0ADD" +
    "\u0ADB\x03\x02\x02\x02\u0ADD\u0ADE\x03\x02\x02\x02\u0ADE\u0AE1\x03\x02" +
    "\x02\x02\u0ADF\u0ADD\x03\x02\x02\x02\u0AE0\u0AD9\x03\x02\x02\x02\u0AE1" +
    "\u0AE2\x03\x02\x02\x02\u0AE2\u0AE0\x03\x02\x02\x02\u0AE2\u0AE3\x03\x02" +
    "\x02\x02\u0AE3\xD9\x03\x02\x02\x02\u0AE4\u0AE5\x07d\x02\x02\u0AE5\u0AE6" +
    "\x05\u014C\xA7\x02\u0AE6\u0AEA\x07\xA4\x02\x02\u0AE7\u0AE9\x07\xBD\x02" +
    "\x02\u0AE8\u0AE7\x03\x02\x02\x02\u0AE9\u0AEC\x03\x02\x02\x02\u0AEA\u0AE8" +
    "\x03\x02\x02\x02\u0AEA\u0AEB\x03\x02\x02\x02\u0AEB\u0AF4\x03\x02\x02\x02" +
    "\u0AEC\u0AEA\x03\x02\x02\x02\u0AED\u0AF1\x05T+\x02\u0AEE\u0AF0\x07\xBD" +
    "\x02\x02\u0AEF\u0AEE\x03\x02\x02\x02\u0AF0\u0AF3\x03\x02\x02\x02\u0AF1" +
    "\u0AEF\x03\x02\x02\x02\u0AF1\u0AF2\x03\x02\x02\x02\u0AF2\u0AF5\x03\x02" +
    "\x02\x02\u0AF3\u0AF1\x03\x02\x02\x02\u0AF4\u0AED\x03\x02\x02\x02\u0AF5" +
    "\u0AF6\x03\x02\x02\x02\u0AF6\u0AF4\x03\x02\x02\x02\u0AF6\u0AF7\x03\x02" +
    "\x02\x02\u0AF7\xDB\x03\x02\x02\x02\u0AF8\u0AF9\x07e\x02\x02\u0AF9\u0AFA" +
    "\x05\u014C\xA7\x02\u0AFA\u0AFE\x07\xA4\x02\x02\u0AFB\u0AFD\x07\xBD\x02" +
    "\x02\u0AFC\u0AFB\x03\x02\x02\x02\u0AFD\u0B00\x03\x02\x02\x02\u0AFE\u0AFC" +
    "\x03\x02\x02\x02\u0AFE\u0AFF\x03\x02";
bitmarkParser._serializedATNSegment6 = "\x02\x02\u0AFF\u0B08\x03\x02\x02\x02\u0B00\u0AFE\x03\x02\x02\x02\u0B01" +
    "\u0B05\x05T+\x02\u0B02\u0B04\x07\xBD\x02\x02\u0B03\u0B02\x03\x02\x02\x02" +
    "\u0B04\u0B07\x03\x02\x02\x02\u0B05\u0B03\x03\x02\x02\x02\u0B05\u0B06\x03" +
    "\x02\x02\x02\u0B06\u0B09\x03\x02\x02\x02\u0B07\u0B05\x03\x02\x02\x02\u0B08" +
    "\u0B01\x03\x02\x02\x02\u0B09\u0B0A\x03\x02\x02\x02\u0B0A\u0B08\x03\x02" +
    "\x02\x02\u0B0A\u0B0B\x03\x02\x02\x02\u0B0B\xDD\x03\x02\x02\x02\u0B0C\u0B0D" +
    "\x07f\x02\x02\u0B0D\u0B0E\x05\u014C\xA7\x02\u0B0E\u0B12\x07\xA4\x02\x02" +
    "\u0B0F\u0B11\x07\xBD\x02\x02\u0B10\u0B0F\x03\x02\x02\x02\u0B11\u0B14\x03" +
    "\x02\x02\x02\u0B12\u0B10\x03\x02\x02\x02\u0B12\u0B13\x03\x02\x02\x02\u0B13" +
    "\u0B1C\x03\x02\x02\x02\u0B14\u0B12\x03\x02\x02\x02\u0B15\u0B19\x05T+\x02" +
    "\u0B16\u0B18\x07\xBD\x02\x02\u0B17\u0B16\x03\x02\x02\x02\u0B18\u0B1B\x03" +
    "\x02\x02\x02\u0B19\u0B17\x03\x02\x02\x02\u0B19\u0B1A\x03\x02\x02\x02\u0B1A" +
    "\u0B1D\x03\x02\x02\x02\u0B1B\u0B19\x03\x02\x02\x02\u0B1C\u0B15\x03\x02" +
    "\x02\x02\u0B1D\u0B1E\x03\x02\x02\x02\u0B1E\u0B1C\x03\x02\x02\x02\u0B1E" +
    "\u0B1F\x03\x02\x02\x02\u0B1F\xDF\x03\x02\x02\x02\u0B20\u0B21\x07g\x02" +
    "\x02\u0B21\u0B22\x05\u014C\xA7\x02\u0B22\u0B26\x07\xA4\x02\x02\u0B23\u0B25" +
    "\x07\xBD\x02\x02\u0B24\u0B23\x03\x02\x02\x02\u0B25\u0B28\x03\x02\x02\x02" +
    "\u0B26\u0B24\x03\x02\x02\x02\u0B26\u0B27\x03\x02\x02\x02\u0B27\u0B30\x03" +
    "\x02\x02\x02\u0B28\u0B26\x03\x02\x02\x02\u0B29\u0B2D\x05T+\x02\u0B2A\u0B2C" +
    "\x07\xBD\x02\x02\u0B2B\u0B2A\x03\x02\x02\x02\u0B2C\u0B2F\x03\x02\x02\x02" +
    "\u0B2D\u0B2B\x03\x02\x02\x02\u0B2D\u0B2E\x03\x02\x02\x02\u0B2E\u0B31\x03" +
    "\x02\x02\x02\u0B2F\u0B2D\x03\x02\x02\x02\u0B30\u0B29\x03\x02\x02\x02\u0B31" +
    "\u0B32\x03\x02\x02\x02\u0B32\u0B30\x03\x02\x02\x02\u0B32\u0B33\x03\x02" +
    "\x02\x02\u0B33\xE1\x03\x02\x02\x02\u0B34\u0B35\x07h\x02\x02\u0B35\u0B36" +
    "\x05\u014C\xA7\x02\u0B36\u0B3A\x07\xA4\x02\x02\u0B37\u0B39\x07\xBD\x02" +
    "\x02\u0B38\u0B37\x03\x02\x02\x02\u0B39\u0B3C\x03\x02\x02\x02\u0B3A\u0B38" +
    "\x03\x02\x02\x02\u0B3A\u0B3B\x03\x02\x02\x02\u0B3B\u0B44\x03\x02\x02\x02" +
    "\u0B3C\u0B3A\x03\x02\x02\x02\u0B3D\u0B41\x05T+\x02\u0B3E\u0B40\x07\xBD" +
    "\x02\x02\u0B3F\u0B3E\x03\x02\x02\x02\u0B40\u0B43\x03\x02\x02\x02\u0B41" +
    "\u0B3F\x03\x02\x02\x02\u0B41\u0B42\x03\x02\x02\x02\u0B42\u0B45\x03\x02" +
    "\x02\x02\u0B43\u0B41\x03\x02\x02\x02\u0B44\u0B3D\x03\x02\x02\x02\u0B45" +
    "\u0B46\x03\x02\x02\x02\u0B46\u0B44\x03\x02\x02\x02\u0B46\u0B47\x03\x02" +
    "\x02\x02\u0B47\xE3\x03\x02\x02\x02\u0B48\u0B49\x07i\x02\x02\u0B49\u0B4A" +
    "\x05\u014C\xA7\x02\u0B4A\u0B4E\x07\xA4\x02\x02\u0B4B\u0B4D\x07\xBD\x02" +
    "\x02\u0B4C\u0B4B\x03\x02\x02\x02\u0B4D\u0B50\x03\x02\x02\x02\u0B4E\u0B4C" +
    "\x03\x02\x02\x02\u0B4E\u0B4F\x03\x02\x02\x02\u0B4F\u0B58\x03\x02\x02\x02" +
    "\u0B50\u0B4E\x03\x02\x02\x02\u0B51\u0B55\x05T+\x02\u0B52\u0B54\x07\xBD" +
    "\x02\x02\u0B53\u0B52\x03\x02\x02\x02\u0B54\u0B57\x03\x02\x02\x02\u0B55" +
    "\u0B53\x03\x02\x02\x02\u0B55\u0B56\x03\x02\x02\x02\u0B56\u0B59\x03\x02" +
    "\x02\x02\u0B57\u0B55\x03\x02\x02\x02\u0B58\u0B51\x03\x02\x02\x02\u0B59" +
    "\u0B5A\x03\x02\x02\x02\u0B5A\u0B58\x03\x02\x02\x02\u0B5A\u0B5B\x03\x02" +
    "\x02\x02\u0B5B\xE5\x03\x02\x02\x02\u0B5C\u0B5D\x07j\x02\x02\u0B5D\u0B5E" +
    "\x05\u014C\xA7\x02\u0B5E\u0B62\x07\xA4\x02\x02\u0B5F\u0B61\x07\xBD\x02" +
    "\x02\u0B60\u0B5F\x03\x02\x02\x02\u0B61\u0B64\x03\x02\x02\x02\u0B62\u0B60" +
    "\x03\x02\x02\x02\u0B62\u0B63\x03\x02\x02\x02\u0B63\u0B6C\x03\x02\x02\x02" +
    "\u0B64\u0B62\x03\x02\x02\x02\u0B65\u0B69\x05T+\x02\u0B66\u0B68\x07\xBD" +
    "\x02\x02\u0B67\u0B66\x03\x02\x02\x02\u0B68\u0B6B\x03\x02\x02\x02\u0B69" +
    "\u0B67\x03\x02\x02\x02\u0B69\u0B6A\x03\x02\x02\x02\u0B6A\u0B6D\x03\x02" +
    "\x02\x02\u0B6B\u0B69\x03\x02\x02\x02\u0B6C\u0B65\x03\x02\x02\x02\u0B6D" +
    "\u0B6E\x03\x02\x02\x02\u0B6E\u0B6C\x03\x02\x02\x02\u0B6E\u0B6F\x03\x02" +
    "\x02\x02\u0B6F\xE7\x03\x02\x02\x02\u0B70\u0B71\x07k\x02\x02\u0B71\u0B72" +
    "\x05\u014C\xA7\x02\u0B72\u0B76\x07\xA4\x02\x02\u0B73\u0B75\x07\xBD\x02" +
    "\x02\u0B74\u0B73\x03\x02\x02\x02\u0B75\u0B78\x03\x02\x02\x02\u0B76\u0B74" +
    "\x03\x02\x02\x02\u0B76\u0B77\x03\x02\x02\x02\u0B77\u0B80\x03\x02\x02\x02" +
    "\u0B78\u0B76\x03\x02\x02\x02\u0B79\u0B7D\x05T+\x02\u0B7A\u0B7C\x07\xBD" +
    "\x02\x02\u0B7B\u0B7A\x03\x02\x02\x02\u0B7C\u0B7F\x03\x02\x02\x02\u0B7D" +
    "\u0B7B\x03\x02\x02\x02\u0B7D\u0B7E\x03\x02\x02\x02\u0B7E\u0B81\x03\x02" +
    "\x02\x02\u0B7F\u0B7D\x03\x02\x02\x02\u0B80\u0B79\x03\x02\x02\x02\u0B81" +
    "\u0B82\x03\x02\x02\x02\u0B82\u0B80\x03\x02\x02\x02\u0B82\u0B83\x03\x02" +
    "\x02\x02\u0B83\xE9\x03\x02\x02\x02\u0B84\u0B85\x07l\x02\x02\u0B85\u0B86" +
    "\x05\u014C\xA7\x02\u0B86\u0B8A\x07\xA4\x02\x02\u0B87\u0B89\x07\xBD\x02" +
    "\x02\u0B88\u0B87\x03\x02\x02\x02\u0B89\u0B8C\x03\x02\x02\x02\u0B8A\u0B88" +
    "\x03\x02\x02\x02\u0B8A\u0B8B\x03\x02\x02\x02\u0B8B\u0B94\x03\x02\x02\x02" +
    "\u0B8C\u0B8A\x03\x02\x02\x02\u0B8D\u0B91\x05T+\x02\u0B8E\u0B90\x07\xBD" +
    "\x02\x02\u0B8F\u0B8E\x03\x02\x02\x02\u0B90\u0B93\x03\x02\x02\x02\u0B91" +
    "\u0B8F\x03\x02\x02\x02\u0B91\u0B92\x03\x02\x02\x02\u0B92\u0B95\x03\x02" +
    "\x02\x02\u0B93\u0B91\x03\x02\x02\x02\u0B94\u0B8D\x03\x02\x02\x02\u0B95" +
    "\u0B96\x03\x02\x02\x02\u0B96\u0B94\x03\x02\x02\x02\u0B96\u0B97\x03\x02" +
    "\x02\x02\u0B97\xEB\x03\x02\x02\x02\u0B98\u0B99\x07m\x02\x02\u0B99\u0B9A" +
    "\x05\u014C\xA7\x02\u0B9A\u0B9E\x07\xA4\x02\x02\u0B9B\u0B9D\x07\xBD\x02" +
    "\x02\u0B9C\u0B9B\x03\x02\x02\x02\u0B9D\u0BA0\x03\x02\x02\x02\u0B9E\u0B9C" +
    "\x03\x02\x02\x02\u0B9E\u0B9F\x03\x02\x02\x02\u0B9F\u0BA8\x03\x02\x02\x02" +
    "\u0BA0\u0B9E\x03\x02\x02\x02\u0BA1\u0BA5\x05T+\x02\u0BA2\u0BA4\x07\xBD" +
    "\x02\x02\u0BA3\u0BA2\x03\x02\x02\x02\u0BA4\u0BA7\x03\x02\x02\x02\u0BA5" +
    "\u0BA3\x03\x02\x02\x02\u0BA5\u0BA6\x03\x02\x02\x02\u0BA6\u0BA9\x03\x02" +
    "\x02\x02\u0BA7\u0BA5\x03\x02\x02\x02\u0BA8\u0BA1\x03\x02\x02\x02\u0BA9" +
    "\u0BAA\x03\x02\x02\x02\u0BAA\u0BA8\x03\x02\x02\x02\u0BAA\u0BAB\x03\x02" +
    "\x02\x02\u0BAB\xED\x03\x02\x02\x02\u0BAC\u0BAD\x07n\x02\x02\u0BAD\u0BAE" +
    "\x05\u014C\xA7\x02\u0BAE\u0BB2\x07\xA4\x02\x02\u0BAF\u0BB1\x07\xBD\x02" +
    "\x02\u0BB0\u0BAF\x03\x02\x02\x02\u0BB1\u0BB4\x03\x02\x02\x02\u0BB2\u0BB0" +
    "\x03\x02\x02\x02\u0BB2\u0BB3\x03\x02\x02\x02\u0BB3\u0BBC\x03\x02\x02\x02" +
    "\u0BB4\u0BB2\x03\x02\x02\x02\u0BB5\u0BB9\x05T+\x02\u0BB6\u0BB8\x07\xBD" +
    "\x02\x02\u0BB7\u0BB6\x03\x02\x02\x02\u0BB8\u0BBB\x03\x02\x02\x02\u0BB9" +
    "\u0BB7\x03\x02\x02\x02\u0BB9\u0BBA\x03\x02\x02\x02\u0BBA\u0BBD\x03\x02" +
    "\x02\x02\u0BBB\u0BB9\x03\x02\x02\x02\u0BBC\u0BB5\x03\x02\x02\x02\u0BBD" +
    "\u0BBE\x03\x02\x02\x02\u0BBE\u0BBC\x03\x02\x02\x02\u0BBE\u0BBF\x03\x02" +
    "\x02\x02\u0BBF\xEF\x03\x02\x02\x02\u0BC0\u0BC1\x07o\x02\x02\u0BC1\u0BC2" +
    "\x05\u014C\xA7\x02\u0BC2\u0BC6\x07\xA4\x02\x02\u0BC3\u0BC5\x07\xBD\x02" +
    "\x02\u0BC4\u0BC3\x03\x02\x02\x02\u0BC5\u0BC8\x03\x02\x02\x02\u0BC6\u0BC4" +
    "\x03\x02\x02\x02\u0BC6\u0BC7\x03\x02\x02\x02\u0BC7\u0BD0\x03\x02\x02\x02" +
    "\u0BC8\u0BC6\x03\x02\x02\x02\u0BC9\u0BCD\x05T+\x02\u0BCA\u0BCC\x07\xBD" +
    "\x02\x02\u0BCB\u0BCA\x03\x02\x02\x02\u0BCC\u0BCF\x03\x02\x02\x02\u0BCD" +
    "\u0BCB\x03\x02\x02\x02\u0BCD\u0BCE\x03\x02\x02\x02\u0BCE\u0BD1\x03\x02" +
    "\x02\x02\u0BCF\u0BCD\x03\x02\x02\x02\u0BD0\u0BC9\x03\x02\x02\x02\u0BD1" +
    "\u0BD2\x03\x02\x02\x02\u0BD2\u0BD0\x03\x02\x02\x02\u0BD2\u0BD3\x03\x02" +
    "\x02\x02\u0BD3\xF1\x03\x02\x02\x02\u0BD4\u0BD5\x07p\x02\x02\u0BD5\u0BD6" +
    "\x05\u014C\xA7\x02\u0BD6\u0BDA\x07\xA4\x02\x02\u0BD7\u0BD9\x07\xBD\x02" +
    "\x02\u0BD8\u0BD7\x03\x02\x02\x02\u0BD9\u0BDC\x03\x02\x02\x02\u0BDA\u0BD8" +
    "\x03\x02\x02\x02\u0BDA\u0BDB\x03\x02\x02\x02\u0BDB\u0BE4\x03\x02\x02\x02" +
    "\u0BDC\u0BDA\x03\x02\x02\x02\u0BDD\u0BE1\x05T+\x02\u0BDE\u0BE0\x07\xBD" +
    "\x02\x02\u0BDF\u0BDE\x03\x02\x02\x02\u0BE0\u0BE3\x03\x02\x02\x02\u0BE1" +
    "\u0BDF\x03\x02\x02\x02\u0BE1\u0BE2\x03\x02\x02\x02\u0BE2\u0BE5\x03\x02" +
    "\x02\x02\u0BE3\u0BE1\x03\x02\x02\x02\u0BE4\u0BDD\x03\x02\x02\x02\u0BE5" +
    "\u0BE6\x03\x02\x02\x02\u0BE6\u0BE4\x03\x02\x02\x02\u0BE6\u0BE7\x03\x02" +
    "\x02\x02\u0BE7\xF3\x03\x02\x02\x02\u0BE8\u0BE9\x07q\x02\x02\u0BE9\u0BEA" +
    "\x05\u014C\xA7\x02\u0BEA\u0BEE\x07\xA4\x02\x02\u0BEB\u0BED\x07\xBD\x02" +
    "\x02\u0BEC\u0BEB\x03\x02\x02\x02\u0BED\u0BF0\x03\x02\x02\x02\u0BEE\u0BEC" +
    "\x03\x02\x02\x02\u0BEE\u0BEF\x03\x02\x02\x02\u0BEF\u0BF8\x03\x02\x02\x02" +
    "\u0BF0\u0BEE\x03\x02\x02\x02\u0BF1\u0BF5\x05T+\x02\u0BF2\u0BF4\x07\xBD" +
    "\x02\x02\u0BF3\u0BF2\x03\x02\x02\x02\u0BF4\u0BF7\x03\x02\x02\x02\u0BF5" +
    "\u0BF3\x03\x02\x02\x02\u0BF5\u0BF6\x03\x02\x02\x02\u0BF6\u0BF9\x03\x02" +
    "\x02\x02\u0BF7\u0BF5\x03\x02\x02\x02\u0BF8\u0BF1\x03\x02\x02\x02\u0BF9" +
    "\u0BFA\x03\x02\x02\x02\u0BFA\u0BF8\x03\x02\x02\x02\u0BFA\u0BFB\x03\x02" +
    "\x02\x02\u0BFB\xF5\x03\x02\x02\x02\u0BFC\u0BFD\x07r\x02\x02\u0BFD\u0BFE" +
    "\x05\u014C\xA7\x02\u0BFE\u0C02\x07\xA4\x02\x02\u0BFF\u0C01\x07\xBD\x02" +
    "\x02\u0C00\u0BFF\x03\x02\x02\x02\u0C01\u0C04\x03\x02\x02\x02\u0C02\u0C00" +
    "\x03\x02\x02\x02\u0C02\u0C03\x03\x02\x02\x02\u0C03\u0C0C\x03\x02\x02\x02" +
    "\u0C04\u0C02\x03\x02\x02\x02\u0C05\u0C09\x05T+\x02\u0C06\u0C08\x07\xBD" +
    "\x02\x02\u0C07\u0C06\x03\x02\x02\x02\u0C08\u0C0B\x03\x02\x02\x02\u0C09" +
    "\u0C07\x03\x02\x02\x02\u0C09\u0C0A\x03\x02\x02\x02\u0C0A\u0C0D\x03\x02" +
    "\x02\x02\u0C0B\u0C09\x03\x02\x02\x02\u0C0C\u0C05\x03\x02\x02\x02\u0C0D" +
    "\u0C0E\x03\x02\x02\x02\u0C0E\u0C0C\x03\x02\x02\x02\u0C0E\u0C0F\x03\x02" +
    "\x02\x02\u0C0F\xF7\x03\x02\x02\x02\u0C10\u0C11\x07s\x02\x02\u0C11\u0C12" +
    "\x05\u014C\xA7\x02\u0C12\u0C16\x07\xA4\x02\x02\u0C13\u0C15\x07\xBD\x02" +
    "\x02\u0C14\u0C13\x03\x02\x02\x02\u0C15\u0C18\x03\x02\x02\x02\u0C16\u0C14" +
    "\x03\x02\x02\x02\u0C16\u0C17\x03\x02\x02\x02\u0C17\u0C20\x03\x02\x02\x02" +
    "\u0C18\u0C16\x03\x02\x02\x02\u0C19\u0C1D\x05T+\x02\u0C1A\u0C1C\x07\xBD" +
    "\x02\x02\u0C1B\u0C1A\x03\x02\x02\x02\u0C1C\u0C1F\x03\x02\x02\x02\u0C1D" +
    "\u0C1B\x03\x02\x02\x02\u0C1D\u0C1E\x03\x02\x02\x02\u0C1E\u0C21\x03\x02" +
    "\x02\x02\u0C1F\u0C1D\x03\x02\x02\x02\u0C20\u0C19\x03\x02\x02\x02\u0C21" +
    "\u0C22\x03\x02\x02\x02\u0C22\u0C20\x03\x02\x02\x02\u0C22\u0C23\x03\x02" +
    "\x02\x02\u0C23\xF9\x03\x02\x02\x02\u0C24\u0C25\x07t\x02\x02\u0C25\u0C26" +
    "\x05\u014C\xA7\x02\u0C26\u0C2A\x07\xA4\x02\x02\u0C27\u0C29\x07\xBD\x02" +
    "\x02\u0C28\u0C27\x03\x02\x02\x02\u0C29\u0C2C\x03\x02\x02\x02\u0C2A\u0C28" +
    "\x03\x02\x02\x02\u0C2A\u0C2B\x03\x02\x02\x02\u0C2B\u0C34\x03\x02\x02\x02" +
    "\u0C2C\u0C2A\x03\x02\x02\x02\u0C2D\u0C31\x05T+\x02\u0C2E\u0C30\x07\xBD" +
    "\x02\x02\u0C2F\u0C2E\x03\x02\x02\x02\u0C30\u0C33\x03\x02\x02\x02\u0C31" +
    "\u0C2F\x03\x02\x02\x02\u0C31\u0C32\x03\x02\x02\x02\u0C32\u0C35\x03\x02" +
    "\x02\x02\u0C33\u0C31\x03\x02\x02\x02\u0C34\u0C2D\x03\x02\x02\x02\u0C35" +
    "\u0C36\x03\x02\x02\x02\u0C36\u0C34\x03\x02\x02\x02\u0C36\u0C37\x03\x02" +
    "\x02\x02\u0C37\xFB\x03\x02\x02\x02\u0C38\u0C39\x07u\x02\x02\u0C39\u0C3A" +
    "\x05\u014C\xA7\x02\u0C3A\u0C3E\x07\xA4\x02\x02\u0C3B\u0C3D\x07\xBD\x02" +
    "\x02\u0C3C\u0C3B\x03\x02\x02\x02\u0C3D\u0C40\x03\x02\x02\x02\u0C3E\u0C3C" +
    "\x03\x02\x02\x02\u0C3E\u0C3F\x03\x02\x02\x02\u0C3F\u0C48\x03\x02\x02\x02" +
    "\u0C40\u0C3E\x03\x02\x02\x02\u0C41\u0C45\x05T+\x02\u0C42\u0C44\x07\xBD" +
    "\x02\x02\u0C43\u0C42\x03\x02\x02\x02\u0C44\u0C47\x03\x02\x02\x02\u0C45" +
    "\u0C43\x03\x02\x02\x02\u0C45\u0C46\x03\x02\x02\x02\u0C46\u0C49\x03\x02" +
    "\x02\x02\u0C47\u0C45\x03\x02\x02\x02\u0C48\u0C41\x03\x02\x02\x02\u0C49" +
    "\u0C4A\x03\x02\x02\x02\u0C4A\u0C48\x03\x02\x02\x02\u0C4A\u0C4B\x03\x02" +
    "\x02\x02\u0C4B\xFD\x03\x02\x02\x02\u0C4C\u0C4D\x07v\x02\x02\u0C4D\u0C4E" +
    "\x05\u014C\xA7\x02\u0C4E\u0C52\x07\xA4\x02\x02\u0C4F\u0C51\x07\xBD\x02" +
    "\x02\u0C50\u0C4F\x03\x02\x02\x02\u0C51\u0C54\x03\x02\x02\x02\u0C52\u0C50" +
    "\x03\x02\x02\x02\u0C52\u0C53\x03\x02\x02\x02\u0C53\u0C5C\x03\x02\x02\x02" +
    "\u0C54\u0C52\x03\x02\x02\x02\u0C55\u0C59\x05T+\x02\u0C56\u0C58\x07\xBD" +
    "\x02\x02\u0C57\u0C56\x03\x02\x02\x02\u0C58\u0C5B\x03\x02\x02\x02\u0C59" +
    "\u0C57\x03\x02\x02\x02\u0C59\u0C5A\x03\x02\x02\x02\u0C5A\u0C5D\x03\x02" +
    "\x02\x02\u0C5B\u0C59\x03\x02\x02\x02\u0C5C\u0C55\x03\x02\x02\x02\u0C5D" +
    "\u0C5E\x03\x02\x02\x02\u0C5E\u0C5C\x03\x02\x02\x02\u0C5E\u0C5F\x03\x02" +
    "\x02\x02\u0C5F\xFF\x03\x02\x02\x02\u0C60\u0C61\x07w\x02\x02\u0C61\u0C62" +
    "\x05\u014C\xA7\x02\u0C62\u0C66\x07\xA4\x02\x02\u0C63\u0C65\x07\xBD\x02" +
    "\x02\u0C64\u0C63\x03\x02\x02\x02\u0C65\u0C68\x03\x02\x02\x02\u0C66\u0C64" +
    "\x03\x02\x02\x02\u0C66\u0C67\x03\x02\x02\x02\u0C67\u0C70\x03\x02\x02\x02" +
    "\u0C68\u0C66\x03\x02\x02\x02\u0C69\u0C6D\x05T+\x02\u0C6A\u0C6C\x07\xBD" +
    "\x02\x02\u0C6B\u0C6A\x03\x02\x02\x02\u0C6C\u0C6F\x03\x02\x02\x02\u0C6D" +
    "\u0C6B\x03\x02\x02\x02\u0C6D\u0C6E\x03\x02\x02\x02\u0C6E\u0C71\x03\x02" +
    "\x02\x02\u0C6F\u0C6D\x03\x02\x02\x02\u0C70\u0C69\x03\x02\x02\x02\u0C71" +
    "\u0C72\x03\x02\x02\x02\u0C72\u0C70\x03\x02\x02\x02\u0C72\u0C73\x03\x02" +
    "\x02\x02\u0C73\u0101\x03\x02\x02\x02\u0C74\u0C75\x07x\x02\x02\u0C75\u0C76" +
    "\x05\u014C\xA7\x02\u0C76\u0C7A\x07\xA4\x02\x02\u0C77\u0C79\x07\xBD\x02" +
    "\x02\u0C78\u0C77\x03\x02\x02\x02\u0C79\u0C7C\x03\x02\x02\x02\u0C7A\u0C78" +
    "\x03\x02\x02\x02\u0C7A\u0C7B\x03\x02\x02\x02\u0C7B\u0C84\x03\x02\x02\x02" +
    "\u0C7C\u0C7A\x03\x02\x02\x02\u0C7D\u0C81\x05T+\x02\u0C7E\u0C80\x07\xBD" +
    "\x02\x02\u0C7F\u0C7E\x03\x02\x02\x02\u0C80\u0C83\x03\x02\x02\x02\u0C81" +
    "\u0C7F\x03\x02\x02\x02\u0C81\u0C82\x03\x02\x02\x02\u0C82\u0C85\x03\x02" +
    "\x02\x02\u0C83\u0C81\x03\x02\x02\x02\u0C84\u0C7D\x03\x02\x02\x02\u0C85" +
    "\u0C86\x03\x02\x02\x02\u0C86\u0C84\x03\x02\x02\x02\u0C86\u0C87\x03\x02" +
    "\x02\x02\u0C87\u0103\x03\x02\x02\x02\u0C88\u0C89\x07y\x02\x02\u0C89\u0C8A" +
    "\x05\u014C\xA7\x02\u0C8A\u0C8E\x07\xA4\x02\x02\u0C8B\u0C8D\x07\xBD\x02" +
    "\x02\u0C8C\u0C8B\x03\x02\x02\x02\u0C8D\u0C90\x03\x02\x02\x02\u0C8E\u0C8C" +
    "\x03\x02\x02\x02\u0C8E\u0C8F\x03\x02\x02\x02\u0C8F\u0C98\x03\x02\x02\x02" +
    "\u0C90\u0C8E\x03\x02\x02\x02\u0C91\u0C95\x05T+\x02\u0C92\u0C94\x07\xBD" +
    "\x02\x02\u0C93\u0C92\x03\x02\x02\x02\u0C94\u0C97\x03\x02\x02\x02\u0C95" +
    "\u0C93\x03\x02\x02\x02\u0C95\u0C96\x03\x02\x02\x02\u0C96\u0C99\x03\x02" +
    "\x02\x02\u0C97\u0C95\x03\x02\x02\x02\u0C98\u0C91\x03\x02\x02\x02\u0C99" +
    "\u0C9A\x03\x02\x02\x02\u0C9A\u0C98\x03\x02\x02\x02\u0C9A\u0C9B\x03\x02" +
    "\x02\x02\u0C9B\u0105\x03\x02\x02\x02\u0C9C\u0C9D\x07z\x02\x02\u0C9D\u0C9E" +
    "\x05\u014C\xA7\x02\u0C9E\u0CA2\x07\xA4\x02\x02\u0C9F\u0CA1\x07\xBD\x02" +
    "\x02\u0CA0\u0C9F\x03\x02\x02\x02\u0CA1\u0CA4\x03\x02\x02\x02\u0CA2\u0CA0" +
    "\x03\x02\x02\x02\u0CA2\u0CA3\x03\x02\x02\x02\u0CA3\u0CAC\x03\x02\x02\x02" +
    "\u0CA4\u0CA2\x03\x02\x02\x02\u0CA5\u0CA9\x05T+\x02\u0CA6\u0CA8\x07\xBD" +
    "\x02\x02\u0CA7\u0CA6\x03\x02\x02\x02\u0CA8\u0CAB\x03\x02\x02\x02\u0CA9" +
    "\u0CA7\x03\x02\x02\x02\u0CA9\u0CAA\x03\x02\x02\x02\u0CAA\u0CAD\x03\x02" +
    "\x02\x02\u0CAB\u0CA9\x03\x02\x02\x02\u0CAC\u0CA5\x03\x02\x02\x02\u0CAD" +
    "\u0CAE\x03\x02\x02\x02\u0CAE\u0CAC\x03\x02\x02\x02\u0CAE\u0CAF\x03\x02" +
    "\x02\x02\u0CAF\u0107\x03\x02\x02\x02\u0CB0\u0CB1\x07{\x02\x02\u0CB1\u0CB2" +
    "\x05\u014C\xA7\x02\u0CB2\u0CB6\x07\xA4\x02\x02\u0CB3\u0CB5\x07\xBD\x02" +
    "\x02\u0CB4\u0CB3\x03\x02\x02\x02\u0CB5\u0CB8\x03\x02\x02\x02\u0CB6\u0CB4" +
    "\x03\x02\x02\x02\u0CB6\u0CB7\x03\x02\x02\x02\u0CB7\u0CC0\x03\x02\x02\x02" +
    "\u0CB8\u0CB6\x03\x02\x02\x02\u0CB9\u0CBD\x05T+\x02\u0CBA\u0CBC\x07\xBD" +
    "\x02\x02\u0CBB\u0CBA\x03\x02\x02\x02\u0CBC\u0CBF\x03\x02\x02\x02\u0CBD" +
    "\u0CBB\x03\x02\x02\x02\u0CBD\u0CBE\x03\x02\x02\x02\u0CBE\u0CC1\x03\x02" +
    "\x02\x02\u0CBF\u0CBD\x03\x02\x02\x02\u0CC0\u0CB9\x03\x02\x02\x02\u0CC1" +
    "\u0CC2\x03\x02\x02\x02\u0CC2\u0CC0\x03\x02\x02\x02\u0CC2\u0CC3\x03\x02" +
    "\x02\x02\u0CC3\u0109\x03\x02\x02\x02\u0CC4\u0CC5\x07|\x02\x02\u0CC5\u0CC6" +
    "\x05\u014C\xA7\x02\u0CC6\u0CCA\x07\xA4\x02\x02\u0CC7\u0CC9\x07\xBD\x02" +
    "\x02\u0CC8\u0CC7\x03\x02\x02\x02\u0CC9\u0CCC\x03\x02\x02\x02\u0CCA\u0CC8" +
    "\x03\x02\x02\x02\u0CCA\u0CCB\x03\x02\x02\x02\u0CCB\u0CD4\x03\x02\x02\x02" +
    "\u0CCC\u0CCA\x03\x02\x02\x02\u0CCD\u0CD1\x05T+\x02\u0CCE\u0CD0\x07\xBD" +
    "\x02\x02\u0CCF\u0CCE\x03\x02\x02\x02\u0CD0\u0CD3\x03\x02\x02\x02\u0CD1" +
    "\u0CCF\x03\x02\x02\x02\u0CD1\u0CD2\x03\x02\x02\x02\u0CD2\u0CD5\x03\x02" +
    "\x02\x02\u0CD3\u0CD1\x03\x02\x02\x02\u0CD4\u0CCD\x03\x02\x02\x02\u0CD5" +
    "\u0CD6\x03\x02\x02\x02\u0CD6\u0CD4\x03\x02\x02\x02\u0CD6\u0CD7\x03\x02" +
    "\x02\x02\u0CD7\u010B\x03\x02\x02\x02\u0CD8\u0CD9\x07}\x02\x02\u0CD9\u0CDA" +
    "\x05\u014C\xA7\x02\u0CDA\u0CDE\x07\xA4\x02\x02\u0CDB\u0CDD\x07\xBD\x02" +
    "\x02\u0CDC\u0CDB\x03\x02\x02\x02\u0CDD\u0CE0\x03\x02\x02\x02\u0CDE\u0CDC" +
    "\x03\x02\x02\x02\u0CDE\u0CDF\x03\x02\x02\x02\u0CDF\u0CE8\x03\x02\x02\x02" +
    "\u0CE0\u0CDE\x03\x02\x02\x02\u0CE1\u0CE5\x05T+\x02\u0CE2\u0CE4\x07\xBD" +
    "\x02\x02\u0CE3\u0CE2\x03\x02\x02\x02\u0CE4\u0CE7\x03\x02\x02\x02\u0CE5" +
    "\u0CE3\x03\x02\x02\x02\u0CE5\u0CE6\x03\x02\x02\x02\u0CE6\u0CE9\x03\x02" +
    "\x02\x02\u0CE7\u0CE5\x03\x02\x02\x02\u0CE8\u0CE1\x03\x02\x02\x02\u0CE9" +
    "\u0CEA\x03\x02\x02\x02\u0CEA\u0CE8\x03\x02\x02\x02\u0CEA\u0CEB\x03\x02" +
    "\x02\x02\u0CEB\u010D\x03\x02\x02\x02\u0CEC\u0CED\x07~\x02\x02\u0CED\u0CEE" +
    "\x05\u014C\xA7\x02\u0CEE\u0CF2\x07\xA4\x02\x02\u0CEF\u0CF1\x07\xBD\x02" +
    "\x02\u0CF0\u0CEF\x03\x02\x02\x02\u0CF1\u0CF4\x03\x02\x02\x02\u0CF2\u0CF0" +
    "\x03\x02\x02\x02\u0CF2\u0CF3\x03\x02\x02\x02\u0CF3\u0CFC\x03\x02\x02\x02" +
    "\u0CF4\u0CF2\x03\x02\x02\x02\u0CF5\u0CF9\x05T+\x02\u0CF6\u0CF8\x07\xBD" +
    "\x02\x02\u0CF7\u0CF6\x03\x02\x02\x02\u0CF8\u0CFB\x03\x02\x02\x02\u0CF9" +
    "\u0CF7\x03\x02\x02\x02\u0CF9\u0CFA\x03\x02\x02\x02\u0CFA\u0CFD\x03\x02" +
    "\x02\x02\u0CFB\u0CF9\x03\x02\x02\x02\u0CFC\u0CF5\x03\x02\x02\x02\u0CFD" +
    "\u0CFE\x03\x02\x02\x02\u0CFE\u0CFC\x03\x02\x02\x02\u0CFE\u0CFF\x03\x02" +
    "\x02\x02\u0CFF\u010F\x03\x02\x02\x02\u0D00\u0D01\x07\x7F\x02\x02\u0D01" +
    "\u0D02\x05\u014C\xA7\x02\u0D02\u0D06\x07\xA4\x02\x02\u0D03\u0D05\x07\xBD" +
    "\x02\x02\u0D04\u0D03\x03\x02\x02\x02\u0D05\u0D08\x03\x02\x02\x02\u0D06" +
    "\u0D04\x03\x02\x02\x02\u0D06\u0D07\x03\x02\x02\x02\u0D07\u0D10\x03\x02" +
    "\x02\x02\u0D08\u0D06\x03\x02\x02\x02\u0D09\u0D0D\x05T+\x02\u0D0A\u0D0C" +
    "\x07\xBD\x02\x02\u0D0B\u0D0A\x03\x02\x02\x02\u0D0C\u0D0F\x03\x02\x02\x02" +
    "\u0D0D\u0D0B\x03\x02\x02\x02\u0D0D\u0D0E\x03\x02\x02\x02\u0D0E\u0D11\x03" +
    "\x02\x02\x02\u0D0F\u0D0D\x03\x02\x02\x02\u0D10\u0D09\x03\x02\x02\x02\u0D11" +
    "\u0D12\x03\x02\x02\x02\u0D12\u0D10\x03\x02\x02\x02\u0D12\u0D13\x03\x02" +
    "\x02\x02\u0D13\u0111\x03\x02\x02\x02\u0D14\u0D15\x07\x80\x02\x02\u0D15" +
    "\u0D16\x05\u014C\xA7\x02\u0D16\u0D1A\x07\xA4\x02\x02\u0D17\u0D19\x07\xBD" +
    "\x02\x02\u0D18\u0D17\x03\x02\x02\x02\u0D19\u0D1C\x03\x02\x02\x02\u0D1A" +
    "\u0D18\x03\x02\x02\x02\u0D1A\u0D1B\x03\x02\x02\x02\u0D1B\u0D24\x03\x02" +
    "\x02\x02\u0D1C\u0D1A\x03\x02\x02\x02\u0D1D\u0D21\x05T+\x02\u0D1E\u0D20" +
    "\x07\xBD\x02\x02\u0D1F\u0D1E\x03\x02\x02\x02\u0D20\u0D23\x03\x02\x02\x02" +
    "\u0D21\u0D1F\x03\x02\x02\x02\u0D21\u0D22\x03\x02\x02\x02\u0D22\u0D25\x03" +
    "\x02\x02\x02\u0D23\u0D21\x03\x02\x02\x02\u0D24\u0D1D\x03\x02\x02\x02\u0D25" +
    "\u0D26\x03\x02\x02\x02\u0D26\u0D24\x03\x02\x02\x02\u0D26\u0D27\x03\x02" +
    "\x02\x02\u0D27\u0113\x03\x02\x02\x02\u0D28\u0D29\x07\x81\x02\x02\u0D29" +
    "\u0D2A\x05\u014C\xA7\x02\u0D2A\u0D2E\x07\xA4\x02\x02\u0D2B\u0D2D\x07\xBD" +
    "\x02\x02\u0D2C\u0D2B\x03\x02\x02\x02\u0D2D\u0D30\x03\x02\x02\x02\u0D2E" +
    "\u0D2C\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D38\x03\x02" +
    "\x02\x02\u0D30\u0D2E\x03\x02\x02\x02\u0D31\u0D35\x05T+\x02\u0D32\u0D34" +
    "\x07\xBD\x02\x02\u0D33\u0D32\x03\x02\x02\x02\u0D34\u0D37\x03\x02\x02\x02" +
    "\u0D35\u0D33\x03\x02\x02\x02\u0D35\u0D36\x03\x02\x02\x02\u0D36\u0D39\x03" +
    "\x02\x02\x02\u0D37\u0D35\x03\x02\x02\x02\u0D38\u0D31\x03\x02\x02\x02\u0D39" +
    "\u0D3A\x03\x02\x02\x02\u0D3A\u0D38\x03\x02\x02\x02\u0D3A\u0D3B\x03\x02" +
    "\x02\x02\u0D3B\u0115\x03\x02\x02\x02\u0D3C\u0D3D\x07\x82\x02\x02\u0D3D" +
    "\u0D3E\x05\u014C\xA7\x02\u0D3E\u0D42\x07\xA4\x02\x02\u0D3F\u0D41\x07\xBD" +
    "\x02\x02\u0D40\u0D3F\x03\x02\x02\x02\u0D41\u0D44\x03\x02\x02\x02\u0D42" +
    "\u0D40\x03\x02\x02\x02\u0D42\u0D43\x03\x02\x02\x02\u0D43\u0D4C\x03\x02" +
    "\x02\x02\u0D44\u0D42\x03\x02\x02\x02\u0D45\u0D49\x05T+\x02\u0D46\u0D48" +
    "\x07\xBD\x02\x02\u0D47\u0D46\x03\x02\x02\x02\u0D48\u0D4B\x03\x02\x02\x02" +
    "\u0D49\u0D47\x03\x02\x02\x02\u0D49\u0D4A\x03\x02\x02\x02\u0D4A\u0D4D\x03" +
    "\x02\x02\x02\u0D4B\u0D49\x03\x02\x02\x02\u0D4C\u0D45\x03\x02\x02\x02\u0D4D" +
    "\u0D4E\x03\x02\x02\x02\u0D4E\u0D4C\x03\x02\x02\x02\u0D4E\u0D4F\x03\x02" +
    "\x02\x02\u0D4F\u0117\x03\x02\x02\x02\u0D50\u0D51\x07\x83\x02\x02\u0D51" +
    "\u0D52\x05\u0152\xAA\x02\u0D52\u0D56\x07\xA4\x02\x02\u0D53\u0D55\x07\xBD" +
    "\x02\x02\u0D54\u0D53\x03\x02\x02\x02\u0D55\u0D58\x03\x02\x02\x02\u0D56" +
    "\u0D54\x03\x02\x02\x02\u0D56\u0D57\x03\x02\x02\x02\u0D57\u0D60\x03\x02" +
    "\x02\x02\u0D58\u0D56\x03\x02\x02\x02\u0D59\u0D5D\x05T+\x02\u0D5A\u0D5C" +
    "\x07\xBD\x02\x02\u0D5B\u0D5A\x03\x02\x02\x02\u0D5C\u0D5F\x03\x02\x02\x02" +
    "\u0D5D\u0D5B\x03\x02\x02\x02\u0D5D\u0D5E\x03\x02\x02\x02\u0D5E\u0D61\x03" +
    "\x02\x02\x02\u0D5F\u0D5D\x03\x02\x02\x02\u0D60\u0D59\x03\x02\x02\x02\u0D61" +
    "\u0D62\x03\x02\x02\x02\u0D62\u0D60\x03\x02\x02\x02\u0D62\u0D63\x03\x02" +
    "\x02\x02\u0D63\u0119\x03\x02\x02\x02\u0D64\u0D65\x07\x84\x02\x02\u0D65" +
    "\u0D66\x05\u0152\xAA\x02\u0D66\u0D6A\x07\xA4\x02\x02\u0D67\u0D69\x07\xBD" +
    "\x02\x02\u0D68\u0D67\x03\x02\x02\x02\u0D69\u0D6C\x03\x02\x02\x02\u0D6A" +
    "\u0D68\x03\x02\x02\x02\u0D6A\u0D6B\x03\x02\x02\x02\u0D6B\u0D74\x03\x02" +
    "\x02\x02\u0D6C\u0D6A\x03\x02\x02\x02\u0D6D\u0D71\x05T+\x02\u0D6E\u0D70" +
    "\x07\xBD\x02\x02\u0D6F\u0D6E\x03\x02\x02\x02\u0D70\u0D73\x03\x02\x02\x02" +
    "\u0D71\u0D6F\x03\x02\x02\x02\u0D71\u0D72\x03\x02\x02\x02\u0D72\u0D75\x03" +
    "\x02\x02\x02\u0D73\u0D71\x03\x02\x02\x02\u0D74\u0D6D\x03\x02\x02\x02\u0D75" +
    "\u0D76\x03\x02\x02\x02\u0D76\u0D74\x03\x02\x02\x02\u0D76\u0D77\x03\x02" +
    "\x02\x02\u0D77\u011B\x03\x02\x02\x02\u0D78\u0D79\x07\x85\x02\x02\u0D79" +
    "\u0D7A\x05\u0152\xAA\x02\u0D7A\u0D7E\x07\xA4\x02\x02\u0D7B\u0D7D\x07\xBD" +
    "\x02\x02\u0D7C\u0D7B\x03\x02\x02\x02\u0D7D\u0D80\x03\x02\x02\x02\u0D7E" +
    "\u0D7C\x03\x02\x02\x02\u0D7E\u0D7F\x03\x02\x02\x02\u0D7F\u0D88\x03\x02" +
    "\x02\x02\u0D80\u0D7E\x03\x02\x02\x02\u0D81\u0D85\x05T+\x02\u0D82\u0D84" +
    "\x07\xBD\x02\x02\u0D83\u0D82\x03\x02\x02\x02\u0D84\u0D87\x03\x02\x02\x02" +
    "\u0D85\u0D83\x03\x02\x02\x02\u0D85\u0D86\x03\x02\x02\x02\u0D86\u0D89\x03" +
    "\x02\x02\x02\u0D87\u0D85\x03\x02\x02\x02\u0D88\u0D81\x03\x02\x02\x02\u0D89" +
    "\u0D8A\x03\x02\x02\x02\u0D8A\u0D88\x03\x02\x02\x02\u0D8A\u0D8B\x03\x02" +
    "\x02\x02\u0D8B\u011D\x03\x02\x02\x02\u0D8C\u0D8D\x07\x86\x02\x02\u0D8D" +
    "\u0D8E\x05\u0152\xAA\x02\u0D8E\u0D92\x07\xA4\x02\x02\u0D8F\u0D91\x07\xBD" +
    "\x02\x02\u0D90\u0D8F\x03\x02\x02\x02\u0D91\u0D94\x03\x02\x02\x02\u0D92" +
    "\u0D90\x03\x02\x02\x02\u0D92\u0D93\x03\x02\x02\x02\u0D93\u0D9C\x03\x02" +
    "\x02\x02\u0D94\u0D92\x03\x02\x02\x02\u0D95\u0D99\x05T+\x02\u0D96\u0D98" +
    "\x07\xBD\x02\x02\u0D97\u0D96\x03\x02\x02\x02\u0D98\u0D9B\x03\x02\x02\x02" +
    "\u0D99\u0D97\x03\x02\x02\x02\u0D99\u0D9A\x03\x02\x02\x02\u0D9A\u0D9D\x03" +
    "\x02\x02\x02\u0D9B\u0D99\x03\x02\x02\x02\u0D9C\u0D95\x03\x02\x02\x02\u0D9D" +
    "\u0D9E\x03\x02\x02\x02\u0D9E\u0D9C\x03\x02\x02\x02\u0D9E\u0D9F\x03\x02" +
    "\x02\x02\u0D9F\u011F\x03\x02\x02\x02\u0DA0\u0DA1\x07\x8B\x02\x02\u0DA1" +
    "\u0DA2\x05\u014C\xA7\x02\u0DA2\u0DA6\x07\xA4\x02\x02\u0DA3\u0DA5\x07\xBD" +
    "\x02\x02\u0DA4\u0DA3\x03\x02\x02\x02\u0DA5\u0DA8\x03\x02\x02\x02\u0DA6" +
    "\u0DA4\x03\x02\x02\x02\u0DA6\u0DA7\x03\x02\x02\x02\u0DA7\u0DB0\x03\x02" +
    "\x02\x02\u0DA8\u0DA6\x03\x02\x02\x02\u0DA9\u0DAD\x05T+\x02\u0DAA\u0DAC" +
    "\x07\xBD\x02\x02\u0DAB\u0DAA\x03\x02\x02\x02\u0DAC\u0DAF\x03\x02\x02\x02" +
    "\u0DAD\u0DAB\x03\x02\x02\x02\u0DAD\u0DAE\x03\x02\x02\x02\u0DAE\u0DB1\x03" +
    "\x02\x02\x02\u0DAF\u0DAD\x03\x02\x02\x02\u0DB0\u0DA9\x03\x02\x02\x02\u0DB1" +
    "\u0DB2\x03\x02\x02\x02\u0DB2\u0DB0\x03\x02\x02\x02\u0DB2\u0DB3\x03\x02" +
    "\x02\x02\u0DB3\u0121\x03\x02\x02\x02\u0DB4\u0DB5\x07\x8C\x02\x02\u0DB5" +
    "\u0DB6\x05\u014C\xA7\x02\u0DB6\u0DBA\x07\xA4\x02\x02\u0DB7\u0DB9\x07\xBD" +
    "\x02\x02\u0DB8\u0DB7\x03\x02\x02\x02\u0DB9\u0DBC\x03\x02\x02\x02\u0DBA" +
    "\u0DB8\x03\x02\x02\x02\u0DBA\u0DBB\x03\x02\x02\x02\u0DBB\u0DC4\x03\x02" +
    "\x02\x02\u0DBC\u0DBA\x03\x02\x02\x02\u0DBD\u0DC1\x05T+\x02\u0DBE\u0DC0" +
    "\x07\xBD\x02\x02\u0DBF\u0DBE\x03\x02\x02\x02\u0DC0\u0DC3\x03\x02\x02\x02" +
    "\u0DC1\u0DBF\x03\x02\x02\x02\u0DC1\u0DC2\x03\x02\x02\x02\u0DC2\u0DC5\x03" +
    "\x02\x02\x02\u0DC3\u0DC1\x03\x02\x02\x02\u0DC4\u0DBD\x03\x02\x02\x02\u0DC5" +
    "\u0DC6\x03\x02\x02\x02\u0DC6\u0DC4\x03\x02\x02\x02\u0DC6\u0DC7\x03\x02" +
    "\x02\x02\u0DC7\u0123\x03\x02\x02\x02\u0DC8\u0DC9\x07\x8D\x02\x02\u0DC9" +
    "\u0DCA\x05\u014C\xA7\x02\u0DCA\u0DCE\x07\xA4\x02\x02\u0DCB\u0DCD\x07\xBD" +
    "\x02\x02\u0DCC\u0DCB\x03\x02\x02\x02\u0DCD\u0DD0\x03\x02\x02\x02\u0DCE" +
    "\u0DCC\x03\x02\x02\x02\u0DCE\u0DCF\x03\x02\x02\x02\u0DCF\u0DD8\x03\x02" +
    "\x02\x02\u0DD0\u0DCE\x03\x02\x02\x02\u0DD1\u0DD5\x05T+\x02\u0DD2\u0DD4" +
    "\x07\xBD\x02\x02\u0DD3\u0DD2\x03\x02\x02\x02";
bitmarkParser._serializedATNSegment7 = "\u0DD4\u0DD7\x03\x02\x02\x02\u0DD5\u0DD3\x03\x02\x02\x02\u0DD5\u0DD6\x03" +
    "\x02\x02\x02\u0DD6\u0DD9\x03\x02\x02\x02\u0DD7\u0DD5\x03\x02\x02\x02\u0DD8" +
    "\u0DD1\x03\x02\x02\x02\u0DD9\u0DDA\x03\x02\x02\x02\u0DDA\u0DD8\x03\x02" +
    "\x02\x02\u0DDA\u0DDB\x03\x02\x02\x02\u0DDB\u0125\x03\x02\x02\x02\u0DDC" +
    "\u0DDD\x07\x8F\x02\x02\u0DDD\u0DDE\x05\u014C\xA7\x02\u0DDE\u0DE2\x07\xA4" +
    "\x02\x02\u0DDF\u0DE1\x07\xBD\x02\x02\u0DE0\u0DDF\x03\x02\x02\x02\u0DE1" +
    "\u0DE4\x03\x02\x02\x02\u0DE2\u0DE0\x03\x02\x02\x02\u0DE2\u0DE3\x03\x02" +
    "\x02\x02\u0DE3\u0DEC\x03\x02\x02\x02\u0DE4\u0DE2\x03\x02\x02\x02\u0DE5" +
    "\u0DE9\x05T+\x02\u0DE6\u0DE8\x07\xBD\x02\x02\u0DE7\u0DE6\x03\x02\x02\x02" +
    "\u0DE8\u0DEB\x03\x02\x02\x02\u0DE9\u0DE7\x03\x02\x02\x02\u0DE9\u0DEA\x03" +
    "\x02\x02\x02\u0DEA\u0DED\x03\x02\x02\x02\u0DEB\u0DE9\x03\x02\x02\x02\u0DEC" +
    "\u0DE5\x03\x02\x02\x02\u0DED\u0DEE\x03\x02\x02\x02\u0DEE\u0DEC\x03\x02" +
    "\x02\x02\u0DEE\u0DEF\x03\x02\x02\x02\u0DEF\u0127\x03\x02\x02\x02\u0DF0" +
    "\u0DF1\x07\x8E\x02\x02\u0DF1\u0DF2\x05\u0152\xAA\x02\u0DF2\u0DF6\x07\xA4" +
    "\x02\x02\u0DF3\u0DF5\x07\xBD\x02\x02\u0DF4\u0DF3\x03\x02\x02\x02\u0DF5" +
    "\u0DF8\x03\x02\x02\x02\u0DF6\u0DF4\x03\x02\x02\x02\u0DF6\u0DF7\x03\x02" +
    "\x02\x02\u0DF7\u0E00\x03\x02\x02\x02\u0DF8\u0DF6\x03\x02\x02\x02\u0DF9" +
    "\u0DFD\x05T+\x02\u0DFA\u0DFC\x07\xBD\x02\x02\u0DFB\u0DFA\x03\x02\x02\x02" +
    "\u0DFC\u0DFF\x03\x02\x02\x02\u0DFD\u0DFB\x03\x02\x02\x02\u0DFD\u0DFE\x03" +
    "\x02\x02\x02\u0DFE\u0E01\x03\x02\x02\x02\u0DFF\u0DFD\x03\x02\x02\x02\u0E00" +
    "\u0DF9\x03\x02\x02\x02\u0E01\u0E02\x03\x02\x02\x02\u0E02\u0E00\x03\x02" +
    "\x02\x02\u0E02\u0E03\x03\x02\x02\x02\u0E03\u0129\x03\x02\x02\x02\u0E04" +
    "\u0E05\x07\x90\x02\x02\u0E05\u0E06\x05\u014C\xA7\x02\u0E06\u0E0A\x07\xA4" +
    "\x02\x02\u0E07\u0E09\x07\xBD\x02\x02\u0E08\u0E07\x03\x02\x02\x02\u0E09" +
    "\u0E0C\x03\x02\x02\x02\u0E0A\u0E08\x03\x02\x02\x02\u0E0A\u0E0B\x03\x02" +
    "\x02\x02\u0E0B\u0E14\x03\x02\x02\x02\u0E0C\u0E0A\x03\x02\x02\x02\u0E0D" +
    "\u0E11\x05T+\x02\u0E0E\u0E10\x07\xBD\x02\x02\u0E0F\u0E0E\x03\x02\x02\x02" +
    "\u0E10\u0E13\x03\x02\x02\x02\u0E11\u0E0F\x03\x02\x02\x02\u0E11\u0E12\x03" +
    "\x02\x02\x02\u0E12\u0E15\x03\x02\x02\x02\u0E13\u0E11\x03\x02\x02\x02\u0E14" +
    "\u0E0D\x03\x02\x02\x02\u0E15\u0E16\x03\x02\x02\x02\u0E16\u0E14\x03\x02" +
    "\x02\x02\u0E16\u0E17\x03\x02\x02\x02\u0E17\u012B\x03\x02\x02\x02\u0E18" +
    "\u0E19\x07\x91\x02\x02\u0E19\u0E1A\x05\u014C\xA7\x02\u0E1A\u0E1E\x07\xA4" +
    "\x02\x02\u0E1B\u0E1D\x07\xBD\x02\x02\u0E1C\u0E1B\x03\x02\x02\x02\u0E1D" +
    "\u0E20\x03\x02\x02\x02\u0E1E\u0E1C\x03\x02\x02\x02\u0E1E\u0E1F\x03\x02" +
    "\x02\x02\u0E1F\u0E28\x03\x02\x02\x02\u0E20\u0E1E\x03\x02\x02\x02\u0E21" +
    "\u0E25\x05T+\x02\u0E22\u0E24\x07\xBD\x02\x02\u0E23\u0E22\x03\x02\x02\x02" +
    "\u0E24\u0E27\x03\x02\x02\x02\u0E25\u0E23\x03\x02\x02\x02\u0E25\u0E26\x03" +
    "\x02\x02\x02\u0E26\u0E29\x03\x02\x02\x02\u0E27\u0E25\x03\x02\x02\x02\u0E28" +
    "\u0E21\x03\x02\x02\x02\u0E29\u0E2A\x03\x02\x02\x02\u0E2A\u0E28\x03\x02" +
    "\x02\x02\u0E2A\u0E2B\x03\x02\x02\x02\u0E2B\u012D\x03\x02\x02\x02\u0E2C" +
    "\u0E2D\x07\x92\x02\x02\u0E2D\u0E2E\x05\u014C\xA7\x02\u0E2E\u0E32\x07\xA4" +
    "\x02\x02\u0E2F\u0E31\x07\xBD\x02\x02\u0E30\u0E2F\x03\x02\x02\x02\u0E31" +
    "\u0E34\x03\x02\x02\x02\u0E32\u0E30\x03\x02\x02\x02\u0E32\u0E33\x03\x02" +
    "\x02\x02\u0E33\u0E3C\x03\x02\x02\x02\u0E34\u0E32\x03\x02\x02\x02\u0E35" +
    "\u0E39\x05T+\x02\u0E36\u0E38\x07\xBD\x02\x02\u0E37\u0E36\x03\x02\x02\x02" +
    "\u0E38\u0E3B\x03\x02\x02\x02\u0E39\u0E37\x03\x02\x02\x02\u0E39\u0E3A\x03" +
    "\x02\x02\x02\u0E3A\u0E3D\x03\x02\x02\x02\u0E3B\u0E39\x03\x02\x02\x02\u0E3C" +
    "\u0E35\x03\x02\x02\x02\u0E3D\u0E3E\x03\x02\x02\x02\u0E3E\u0E3C\x03\x02" +
    "\x02\x02\u0E3E\u0E3F\x03\x02\x02\x02\u0E3F\u012F\x03\x02\x02\x02\u0E40" +
    "\u0E41\x07\x93\x02\x02\u0E41\u0E42\x05\u014C\xA7\x02\u0E42\u0E46\x07\xA4" +
    "\x02\x02\u0E43\u0E45\x07\xBD\x02\x02\u0E44\u0E43\x03\x02\x02\x02\u0E45" +
    "\u0E48\x03\x02\x02\x02\u0E46\u0E44\x03\x02\x02\x02\u0E46\u0E47\x03\x02" +
    "\x02\x02\u0E47\u0E50\x03\x02\x02\x02\u0E48\u0E46\x03\x02\x02\x02\u0E49" +
    "\u0E4D\x05T+\x02\u0E4A\u0E4C\x07\xBD\x02\x02\u0E4B\u0E4A\x03\x02\x02\x02" +
    "\u0E4C\u0E4F\x03\x02\x02\x02\u0E4D\u0E4B\x03\x02\x02\x02\u0E4D\u0E4E\x03" +
    "\x02\x02\x02\u0E4E\u0E51\x03\x02\x02\x02\u0E4F\u0E4D\x03\x02\x02\x02\u0E50" +
    "\u0E49\x03\x02\x02\x02\u0E51\u0E52\x03\x02\x02\x02\u0E52\u0E50\x03\x02" +
    "\x02\x02\u0E52\u0E53\x03\x02\x02\x02\u0E53\u0131\x03\x02\x02\x02\u0E54" +
    "\u0E55\x07\x94\x02\x02\u0E55\u0E56\x05\u014C\xA7\x02\u0E56\u0E5A\x07\xA4" +
    "\x02\x02\u0E57\u0E59\x07\xBD\x02\x02\u0E58\u0E57\x03\x02\x02\x02\u0E59" +
    "\u0E5C\x03\x02\x02\x02\u0E5A\u0E58\x03\x02\x02\x02\u0E5A\u0E5B\x03\x02" +
    "\x02\x02\u0E5B\u0E64\x03\x02\x02\x02\u0E5C\u0E5A\x03\x02\x02\x02\u0E5D" +
    "\u0E61\x05T+\x02\u0E5E\u0E60\x07\xBD\x02\x02\u0E5F\u0E5E\x03\x02\x02\x02" +
    "\u0E60\u0E63\x03\x02\x02\x02\u0E61\u0E5F\x03\x02\x02\x02\u0E61\u0E62\x03" +
    "\x02\x02\x02\u0E62\u0E65\x03\x02\x02\x02\u0E63\u0E61\x03\x02\x02\x02\u0E64" +
    "\u0E5D\x03\x02\x02\x02\u0E65\u0E66\x03\x02\x02\x02\u0E66\u0E64\x03\x02" +
    "\x02\x02\u0E66\u0E67\x03\x02\x02\x02\u0E67\u0133\x03\x02\x02\x02\u0E68" +
    "\u0E69\x07\x18\x02\x02\u0E69\u0E6A\x05\u014C\xA7\x02\u0E6A\u0E6E\x07\xA4" +
    "\x02\x02\u0E6B\u0E6D\x07\xBD\x02\x02\u0E6C\u0E6B\x03\x02\x02\x02\u0E6D" +
    "\u0E70\x03\x02\x02\x02\u0E6E\u0E6C\x03\x02\x02\x02\u0E6E\u0E6F\x03\x02" +
    "\x02\x02\u0E6F\u0E78\x03\x02\x02\x02\u0E70\u0E6E\x03\x02\x02\x02\u0E71" +
    "\u0E75\x05T+\x02\u0E72\u0E74\x07\xBD\x02\x02\u0E73\u0E72\x03\x02\x02\x02" +
    "\u0E74\u0E77\x03\x02\x02\x02\u0E75\u0E73\x03\x02\x02\x02\u0E75\u0E76\x03" +
    "\x02\x02\x02\u0E76\u0E79\x03\x02\x02\x02\u0E77\u0E75\x03\x02\x02\x02\u0E78" +
    "\u0E71\x03\x02\x02\x02\u0E79\u0E7A\x03\x02\x02\x02\u0E7A\u0E78\x03\x02" +
    "\x02\x02\u0E7A\u0E7B\x03\x02\x02\x02\u0E7B\u0135\x03\x02\x02\x02\u0E7C" +
    "\u0E7D\x07\x1F\x02\x02\u0E7D\u0E7E\x05\u014C\xA7\x02\u0E7E\u0E89\x07\xA4" +
    "\x02\x02\u0E7F\u0E80\t\x06\x02\x02\u0E80\u0E86\x05\u0138\x9D\x02\u0E81" +
    "\u0E82\x05\u01C6\xE4\x02\u0E82\u0E83\x05\u0138\x9D\x02\u0E83\u0E85\x03" +
    "\x02\x02\x02\u0E84\u0E81\x03\x02\x02\x02\u0E85\u0E88\x03\x02\x02\x02\u0E86" +
    "\u0E84\x03\x02\x02\x02\u0E86\u0E87\x03\x02\x02\x02\u0E87\u0E8A\x03\x02" +
    "\x02\x02\u0E88\u0E86\x03\x02\x02\x02\u0E89\u0E7F\x03\x02\x02\x02\u0E8A" +
    "\u0E8B\x03\x02\x02\x02\u0E8B\u0E89\x03\x02\x02\x02\u0E8B\u0E8C\x03\x02" +
    "\x02\x02\u0E8C\u0E8D\x03\x02\x02\x02\u0E8D\u0E91\t\x06\x02\x02\u0E8E\u0E90" +
    "\x07\xBD\x02\x02\u0E8F\u0E8E\x03\x02\x02\x02\u0E90\u0E93\x03\x02\x02\x02" +
    "\u0E91\u0E8F\x03\x02\x02\x02\u0E91\u0E92\x03\x02\x02\x02\u0E92\u0EA1\x03" +
    "\x02\x02\x02\u0E93\u0E91\x03\x02\x02\x02\u0E94\u0E9E\x05f4\x02\u0E95\u0E97" +
    "\x07\xBD\x02\x02\u0E96\u0E95\x03\x02\x02\x02\u0E97\u0E9A\x03\x02\x02\x02" +
    "\u0E98\u0E96\x03\x02\x02\x02\u0E98\u0E99\x03\x02\x02\x02\u0E99\u0E9B\x03" +
    "\x02\x02\x02\u0E9A\u0E98\x03\x02\x02\x02\u0E9B\u0E9D\x05f4\x02\u0E9C\u0E98" +
    "\x03\x02\x02\x02\u0E9D\u0EA0\x03\x02\x02\x02\u0E9E\u0E9C\x03\x02\x02\x02" +
    "\u0E9E\u0E9F\x03\x02\x02\x02\u0E9F\u0EA2\x03\x02\x02\x02\u0EA0\u0E9E\x03" +
    "\x02\x02\x02\u0EA1\u0E94\x03\x02\x02\x02\u0EA1\u0EA2\x03\x02\x02\x02\u0EA2" +
    "\u0137\x03\x02\x02\x02\u0EA3\u0EAB\x05\u01C8\xE5\x02\u0EA4\u0EAB\x05\u01A8" +
    "\xD5\x02\u0EA5\u0EAB\x05\u0188\xC5\x02\u0EA6\u0EAB\x05V,\x02\u0EA7\u0EAB" +
    "\x05Z.\x02\u0EA8\u0EAB\x05\\/\x02\u0EA9\u0EAB\x05^0\x02\u0EAA\u0EA3\x03" +
    "\x02\x02\x02\u0EAA\u0EA4\x03\x02\x02\x02\u0EAA\u0EA5\x03\x02\x02\x02\u0EAA" +
    "\u0EA6\x03\x02\x02\x02\u0EAA\u0EA7\x03\x02\x02\x02\u0EAA\u0EA8\x03\x02" +
    "\x02\x02\u0EAA\u0EA9\x03\x02\x02\x02\u0EAB\u0EAC\x03\x02\x02\x02\u0EAC" +
    "\u0EAA\x03\x02\x02\x02\u0EAC\u0EAD\x03\x02\x02\x02\u0EAD\u0139\x03\x02" +
    "\x02\x02\u0EAE\u0EAF\x07!\x02\x02\u0EAF\u0EB0\x05\u014C\xA7\x02\u0EB0" +
    "\u0EB4\x07\xA4\x02\x02\u0EB1\u0EB3\x07\xBD\x02\x02\u0EB2\u0EB1\x03\x02" +
    "\x02\x02\u0EB3\u0EB6\x03\x02\x02\x02\u0EB4\u0EB2\x03\x02\x02\x02\u0EB4" +
    "\u0EB5\x03\x02\x02\x02\u0EB5\u0EC0\x03\x02\x02\x02\u0EB6\u0EB4\x03\x02" +
    "\x02\x02\u0EB7\u0EBB\x05T+\x02\u0EB8\u0EBA\x07\xBD\x02\x02\u0EB9\u0EB8" +
    "\x03\x02\x02\x02\u0EBA\u0EBD\x03\x02\x02\x02\u0EBB\u0EB9\x03\x02\x02\x02" +
    "\u0EBB\u0EBC\x03\x02\x02\x02\u0EBC\u0EBF\x03\x02\x02\x02\u0EBD\u0EBB\x03" +
    "\x02\x02\x02\u0EBE\u0EB7\x03\x02\x02\x02\u0EBF\u0EC2\x03\x02\x02\x02\u0EC0" +
    "\u0EBE\x03\x02\x02\x02\u0EC0\u0EC1\x03\x02\x02\x02\u0EC1\u0ECB\x03\x02" +
    "\x02\x02\u0EC2\u0EC0\x03\x02\x02\x02\u0EC3\u0EC4\t\x06\x02\x02\u0EC4\u0EC7" +
    "\x05\u01C0\xE1\x02\u0EC5\u0EC6\x07\xBD\x02\x02\u0EC6\u0EC8\x05\u013C\x9F" +
    "\x02\u0EC7\u0EC5\x03\x02\x02\x02\u0EC8\u0EC9\x03\x02\x02\x02\u0EC9\u0EC7" +
    "\x03\x02\x02\x02\u0EC9\u0ECA\x03\x02\x02\x02\u0ECA\u0ECC\x03\x02\x02\x02" +
    "\u0ECB\u0EC3\x03\x02\x02\x02\u0ECC\u0ECD\x03\x02\x02\x02\u0ECD\u0ECB\x03" +
    "\x02\x02\x02\u0ECD\u0ECE\x03\x02\x02\x02\u0ECE\u0ECF\x03\x02\x02\x02\u0ECF" +
    "\u0ED3\t\x06\x02\x02\u0ED0\u0ED2\x07\xBD\x02\x02\u0ED1\u0ED0\x03\x02\x02" +
    "\x02\u0ED2\u0ED5\x03\x02\x02\x02\u0ED3\u0ED1\x03\x02\x02\x02\u0ED3\u0ED4" +
    "\x03\x02\x02\x02\u0ED4\u0EE3\x03\x02\x02\x02\u0ED5\u0ED3\x03\x02\x02\x02" +
    "\u0ED6\u0EE0\x05f4\x02\u0ED7\u0ED9\x07\xBD\x02\x02\u0ED8\u0ED7\x03\x02" +
    "\x02\x02\u0ED9\u0EDC\x03\x02\x02\x02\u0EDA\u0ED8\x03\x02\x02\x02\u0EDA" +
    "\u0EDB\x03\x02\x02\x02\u0EDB\u0EDD\x03\x02\x02\x02\u0EDC\u0EDA\x03\x02" +
    "\x02\x02\u0EDD\u0EDF\x05f4\x02\u0EDE\u0EDA\x03\x02\x02\x02\u0EDF\u0EE2" +
    "\x03\x02\x02\x02\u0EE0\u0EDE\x03\x02\x02\x02\u0EE0\u0EE1\x03\x02\x02\x02" +
    "\u0EE1\u0EE4\x03\x02\x02\x02\u0EE2\u0EE0\x03\x02\x02\x02\u0EE3\u0ED6\x03" +
    "\x02\x02\x02\u0EE3\u0EE4\x03\x02\x02\x02\u0EE4\u013B\x03\x02\x02\x02\u0EE5" +
    "\u0EE6\x07\x96\x02\x02\u0EE6\u0EE7\x05\u01C0\xE1\x02\u0EE7\u0EE9\x07\xA4" +
    "\x02\x02\u0EE8\u0EEA\x05\u014A\xA6\x02\u0EE9\u0EE8\x03\x02\x02\x02\u0EE9" +
    "\u0EEA\x03\x02\x02\x02\u0EEA\u013D\x03\x02\x02\x02\u0EEB\u0EEC\x07\"\x02" +
    "\x02\u0EEC\u0EED\x05\u014C\xA7\x02\u0EED\u0EF1\x07\xA4\x02\x02\u0EEE\u0EF0" +
    "\x07\xBD\x02\x02\u0EEF\u0EEE\x03\x02\x02\x02\u0EF0\u0EF3\x03\x02\x02\x02" +
    "\u0EF1\u0EEF\x03\x02\x02\x02\u0EF1\u0EF2\x03\x02\x02\x02\u0EF2\u0EFD\x03" +
    "\x02\x02\x02\u0EF3\u0EF1\x03\x02\x02\x02\u0EF4\u0EF8\x05T+\x02\u0EF5\u0EF7" +
    "\x07\xBD\x02\x02\u0EF6\u0EF5\x03\x02\x02\x02\u0EF7\u0EFA\x03\x02\x02\x02" +
    "\u0EF8\u0EF6\x03\x02\x02\x02\u0EF8\u0EF9\x03\x02\x02\x02\u0EF9\u0EFC\x03" +
    "\x02\x02\x02\u0EFA\u0EF8\x03\x02\x02\x02\u0EFB\u0EF4\x03\x02\x02\x02\u0EFC" +
    "\u0EFF\x03\x02\x02\x02\u0EFD\u0EFB\x03\x02\x02\x02\u0EFD\u0EFE\x03\x02" +
    "\x02\x02\u0EFE\u0F0F\x03\x02\x02\x02\u0EFF\u0EFD\x03\x02\x02\x02\u0F00" +
    "\u0F02\t\x06\x02\x02\u0F01\u0F03\x05\u01C0\xE1\x02\u0F02\u0F01\x03\x02" +
    "\x02\x02\u0F02\u0F03\x03\x02\x02\x02\u0F03\u0F0B\x03\x02\x02\x02\u0F04" +
    "\u0F06\x07\xBD\x02\x02\u0F05\u0F04\x03\x02\x02\x02\u0F06\u0F09\x03\x02" +
    "\x02\x02\u0F07\u0F05\x03\x02\x02\x02\u0F07\u0F08\x03\x02\x02\x02\u0F08" +
    "\u0F0A\x03\x02\x02\x02\u0F09\u0F07\x03\x02\x02\x02\u0F0A\u0F0C\x05\u013C" +
    "\x9F\x02\u0F0B\u0F07\x03\x02\x02\x02\u0F0C\u0F0D\x03\x02\x02\x02\u0F0D" +
    "\u0F0B\x03\x02\x02\x02\u0F0D\u0F0E\x03\x02\x02\x02\u0F0E\u0F10\x03\x02" +
    "\x02\x02\u0F0F\u0F00\x03\x02\x02\x02\u0F10\u0F11\x03\x02\x02\x02\u0F11" +
    "\u0F0F\x03\x02\x02\x02\u0F11\u0F12\x03\x02\x02\x02\u0F12\u0F13\x03\x02" +
    "\x02\x02\u0F13\u0F14\t\x06\x02\x02\u0F14\u013F\x03\x02\x02\x02\u0F15\u0F16" +
    "\x07#\x02\x02\u0F16\u0F17\x05\u014C\xA7\x02\u0F17\u0F1B\x07\xA4\x02\x02" +
    "\u0F18\u0F1A\x07\xBD\x02\x02\u0F19\u0F18\x03\x02\x02\x02\u0F1A\u0F1D\x03" +
    "\x02\x02\x02\u0F1B\u0F19\x03\x02\x02\x02\u0F1B\u0F1C\x03\x02\x02\x02\u0F1C" +
    "\u0F27\x03\x02\x02\x02\u0F1D\u0F1B\x03\x02\x02\x02\u0F1E\u0F22\x05T+\x02" +
    "\u0F1F\u0F21\x07\xBD\x02\x02\u0F20\u0F1F\x03\x02\x02\x02\u0F21\u0F24\x03" +
    "\x02\x02\x02\u0F22\u0F20\x03\x02\x02\x02\u0F22\u0F23\x03\x02\x02\x02\u0F23" +
    "\u0F26\x03\x02\x02\x02\u0F24\u0F22\x03\x02\x02\x02\u0F25\u0F1E\x03\x02" +
    "\x02\x02\u0F26\u0F29\x03\x02\x02\x02\u0F27\u0F25\x03\x02\x02\x02\u0F27" +
    "\u0F28\x03\x02\x02\x02\u0F28\u0F32\x03\x02\x02\x02\u0F29\u0F27\x03\x02" +
    "\x02\x02\u0F2A\u0F2B\t\x06\x02\x02\u0F2B\u0F2E\x05\u01C0\xE1\x02\u0F2C" +
    "\u0F2D\x07\xBD\x02\x02\u0F2D\u0F2F\x05\u013C\x9F\x02\u0F2E\u0F2C\x03\x02" +
    "\x02\x02\u0F2F\u0F30\x03\x02\x02\x02\u0F30\u0F2E\x03\x02\x02\x02\u0F30" +
    "\u0F31\x03\x02\x02\x02\u0F31\u0F33\x03\x02\x02\x02\u0F32\u0F2A\x03\x02" +
    "\x02\x02\u0F33\u0F34\x03\x02\x02\x02\u0F34\u0F32\x03\x02\x02\x02\u0F34" +
    "\u0F35\x03\x02\x02\x02\u0F35\u0F36\x03\x02\x02\x02\u0F36\u0F37\t\x06\x02" +
    "\x02\u0F37\u0141\x03\x02\x02\x02\u0F38\u0F39\x07$\x02\x02\u0F39\u0F3A" +
    "\x05\u014C\xA7\x02\u0F3A\u0F3E\x07\xA4\x02\x02\u0F3B\u0F3D\x07\xBD\x02" +
    "\x02\u0F3C\u0F3B\x03\x02\x02\x02\u0F3D\u0F40\x03\x02\x02\x02\u0F3E\u0F3C" +
    "\x03\x02\x02\x02\u0F3E\u0F3F\x03\x02\x02\x02\u0F3F\u0F4A\x03\x02\x02\x02" +
    "\u0F40\u0F3E\x03\x02\x02\x02\u0F41\u0F45\x05T+\x02\u0F42\u0F44\x07\xBD" +
    "\x02\x02\u0F43\u0F42\x03\x02\x02\x02\u0F44\u0F47\x03\x02\x02\x02\u0F45" +
    "\u0F43\x03\x02\x02\x02\u0F45\u0F46\x03\x02\x02\x02\u0F46\u0F49\x03\x02" +
    "\x02\x02\u0F47\u0F45\x03\x02\x02\x02\u0F48\u0F41\x03\x02\x02\x02\u0F49" +
    "\u0F4C\x03\x02\x02\x02\u0F4A\u0F48\x03\x02\x02\x02\u0F4A\u0F4B\x03\x02" +
    "\x02\x02\u0F4B\u0F55\x03\x02\x02\x02\u0F4C\u0F4A\x03\x02\x02\x02\u0F4D" +
    "\u0F4E\t\x06\x02\x02\u0F4E\u0F51\x05\u01C0\xE1\x02\u0F4F\u0F50\x07\xBD" +
    "\x02\x02\u0F50\u0F52\x05\u013C\x9F\x02\u0F51\u0F4F\x03\x02\x02\x02\u0F52" +
    "\u0F53\x03\x02\x02\x02\u0F53\u0F51\x03\x02\x02\x02\u0F53\u0F54\x03\x02" +
    "\x02\x02\u0F54\u0F56\x03\x02\x02\x02\u0F55\u0F4D\x03\x02\x02\x02\u0F56" +
    "\u0F57\x03\x02\x02\x02\u0F57\u0F55\x03\x02\x02\x02\u0F57\u0F58\x03\x02" +
    "\x02\x02\u0F58\u0F59\x03\x02\x02\x02\u0F59\u0F5A\t\x06\x02\x02\u0F5A\u0143" +
    "\x03\x02\x02\x02\u0F5B\u0F5C\x07%\x02\x02\u0F5C\u0F5D\x05\u014C\xA7\x02" +
    "\u0F5D\u0F61\x07\xA4\x02\x02\u0F5E\u0F60\x07\xBD\x02\x02\u0F5F\u0F5E\x03" +
    "\x02\x02\x02\u0F60\u0F63\x03\x02\x02\x02\u0F61\u0F5F\x03\x02\x02\x02\u0F61" +
    "\u0F62\x03\x02\x02\x02\u0F62\u0F6D\x03\x02\x02\x02\u0F63\u0F61\x03\x02" +
    "\x02\x02\u0F64\u0F68\x05T+\x02\u0F65\u0F67\x07\xBD\x02\x02\u0F66\u0F65" +
    "\x03\x02\x02\x02\u0F67\u0F6A\x03\x02\x02\x02\u0F68\u0F66\x03\x02\x02\x02" +
    "\u0F68\u0F69\x03\x02\x02\x02\u0F69\u0F6C\x03\x02\x02\x02\u0F6A\u0F68\x03" +
    "\x02\x02\x02\u0F6B\u0F64\x03\x02\x02\x02\u0F6C\u0F6F\x03\x02\x02\x02\u0F6D" +
    "\u0F6B\x03\x02\x02\x02\u0F6D\u0F6E\x03\x02\x02\x02\u0F6E\u0F78\x03\x02" +
    "\x02\x02\u0F6F\u0F6D\x03\x02\x02\x02\u0F70\u0F71\t\x06\x02\x02\u0F71\u0F74" +
    "\x05\u01C0\xE1\x02\u0F72\u0F73\x07\xBD\x02\x02\u0F73\u0F75\x05\u013C\x9F" +
    "\x02\u0F74\u0F72\x03\x02\x02\x02\u0F75\u0F76\x03\x02\x02\x02\u0F76\u0F74" +
    "\x03\x02\x02\x02\u0F76\u0F77\x03\x02\x02\x02\u0F77\u0F79\x03\x02\x02\x02" +
    "\u0F78\u0F70\x03\x02\x02\x02\u0F79\u0F7A\x03\x02\x02\x02\u0F7A\u0F78\x03" +
    "\x02\x02\x02\u0F7A\u0F7B\x03\x02\x02\x02\u0F7B\u0F7C\x03\x02\x02\x02\u0F7C" +
    "\u0F7D\t\x06\x02\x02\u0F7D\u0145\x03\x02\x02\x02\u0F7E\u0F7F\x07 \x02" +
    "\x02\u0F7F\u0F80\x05\u014C\xA7\x02\u0F80\u0F84\x07\xA4\x02\x02\u0F81\u0F83" +
    "\x07\xBD\x02\x02\u0F82\u0F81\x03\x02\x02\x02\u0F83\u0F86\x03\x02\x02\x02" +
    "\u0F84\u0F82\x03\x02\x02\x02\u0F84\u0F85\x03\x02\x02\x02\u0F85\u0F90\x03" +
    "\x02\x02\x02\u0F86\u0F84\x03\x02\x02\x02\u0F87\u0F8B\x05T+\x02\u0F88\u0F8A" +
    "\x07\xBD\x02\x02\u0F89\u0F88\x03\x02\x02\x02\u0F8A\u0F8D\x03\x02\x02\x02" +
    "\u0F8B\u0F89\x03\x02\x02\x02\u0F8B\u0F8C\x03\x02\x02\x02\u0F8C\u0F8F\x03" +
    "\x02\x02\x02\u0F8D\u0F8B\x03\x02\x02\x02\u0F8E\u0F87\x03\x02\x02\x02\u0F8F" +
    "\u0F92\x03\x02\x02\x02\u0F90\u0F8E\x03\x02\x02\x02\u0F90\u0F91\x03\x02" +
    "\x02\x02\u0F91\u0FA0\x03\x02\x02\x02\u0F92\u0F90\x03\x02\x02\x02\u0F93" +
    "\u0F94\t\x06\x02\x02\u0F94\u0F9C\x05\u0148\xA5\x02\u0F95\u0F97\x07\xBD" +
    "\x02\x02\u0F96\u0F95\x03\x02\x02\x02\u0F97\u0F9A\x03\x02\x02\x02\u0F98" +
    "\u0F96\x03\x02\x02\x02\u0F98\u0F99\x03\x02\x02\x02\u0F99\u0F9B\x03\x02" +
    "\x02\x02\u0F9A\u0F98\x03\x02\x02\x02\u0F9B\u0F9D\x05\u013C\x9F\x02\u0F9C" +
    "\u0F98\x03\x02\x02\x02\u0F9D\u0F9E\x03\x02\x02\x02\u0F9E\u0F9C\x03\x02" +
    "\x02\x02\u0F9E\u0F9F\x03\x02\x02\x02\u0F9F\u0FA1\x03\x02\x02\x02\u0FA0" +
    "\u0F93\x03\x02\x02\x02\u0FA1\u0FA2\x03\x02\x02\x02\u0FA2\u0FA0\x03\x02" +
    "\x02\x02\u0FA2\u0FA3\x03\x02\x02\x02\u0FA3\u0FA4\x03\x02\x02\x02\u0FA4" +
    "\u0FA8\t\x06\x02\x02\u0FA5\u0FA7\x07\xBD\x02\x02\u0FA6\u0FA5\x03\x02\x02" +
    "\x02\u0FA7\u0FAA\x03\x02\x02\x02\u0FA8\u0FA6\x03\x02\x02\x02\u0FA8\u0FA9" +
    "\x03\x02\x02\x02\u0FA9\u0FB8\x03\x02\x02\x02\u0FAA\u0FA8\x03\x02\x02\x02" +
    "\u0FAB\u0FB5\x05f4\x02\u0FAC\u0FAE\x07\xBD\x02\x02\u0FAD\u0FAC\x03\x02" +
    "\x02\x02\u0FAE\u0FB1\x03\x02\x02\x02\u0FAF\u0FAD\x03\x02\x02\x02\u0FAF" +
    "\u0FB0\x03\x02\x02\x02\u0FB0\u0FB2\x03\x02\x02\x02\u0FB1\u0FAF\x03\x02" +
    "\x02\x02\u0FB2\u0FB4\x05f4\x02\u0FB3\u0FAF\x03\x02\x02\x02\u0FB4\u0FB7" +
    "\x03\x02\x02\x02\u0FB5\u0FB3\x03\x02\x02\x02\u0FB5\u0FB6\x03\x02\x02\x02" +
    "\u0FB6\u0FB9\x03\x02\x02\x02\u0FB7\u0FB5\x03\x02\x02\x02\u0FB8\u0FAB\x03" +
    "\x02\x02\x02\u0FB8\u0FB9\x03\x02\x02\x02\u0FB9\u0147\x03\x02\x02\x02\u0FBA" +
    "\u0FBC\n\x07\x02\x02\u0FBB\u0FBA\x03\x02\x02\x02\u0FBC\u0FBD\x03\x02\x02" +
    "\x02\u0FBD\u0FBB\x03\x02\x02\x02\u0FBD\u0FBE\x03\x02\x02\x02\u0FBE\u0149" +
    "\x03\x02\x02\x02\u0FBF\u0FC0\x07\xD2\x02\x02\u0FC0\u0FC1\x07\xBB\x02\x02" +
    "\u0FC1\u0FC2\x07\xA4\x02\x02\u0FC2\u014B\x03\x02\x02\x02\u0FC3\u0FC5\x05" +
    "\u014E\xA8\x02\u0FC4\u0FC3\x03\x02\x02\x02\u0FC5\u0FC8\x03\x02\x02\x02" +
    "\u0FC6\u0FC4\x03\x02\x02\x02\u0FC6\u0FC7\x03\x02\x02\x02\u0FC7\u0FCE\x03" +
    "\x02\x02\x02\u0FC8\u0FC6\x03\x02\x02\x02\u0FC9\u0FCD\x07\u0116\x02\x02" +
    "\u0FCA\u0FCD\x07\u0117\x02\x02\u0FCB\u0FCD\x05\u0150\xA9\x02\u0FCC\u0FC9" +
    "\x03\x02\x02\x02\u0FCC\u0FCA\x03\x02\x02\x02\u0FCC\u0FCB\x03\x02\x02\x02" +
    "\u0FCD\u0FD0\x03\x02\x02\x02\u0FCE\u0FCC\x03\x02\x02\x02\u0FCE\u0FCF\x03" +
    "\x02\x02\x02\u0FCF\u014D\x03\x02\x02\x02\u0FD0\u0FCE\x03\x02\x02\x02\u0FD1" +
    "\u0FD2\t\b\x02\x02\u0FD2\u014F\x03\x02\x02\x02\u0FD3\u0FDD\x05\u0154\xAB" +
    "\x02\u0FD4\u0FDD\x05\u018C\xC7\x02\u0FD5\u0FDD\x05\u0156\xAC\x02\u0FD6" +
    "\u0FDD\x05\u0158\xAD\x02\u0FD7\u0FDD\x05\u015A\xAE\x02\u0FD8\u0FDD\x05" +
    "\u015C\xAF\x02\u0FD9\u0FDD\x05\u015E\xB0\x02\u0FDA\u0FDD\x05\u0160\xB1" +
    "\x02\u0FDB\u0FDD\x07\xEB\x02\x02\u0FDC\u0FD3\x03\x02\x02\x02\u0FDC\u0FD4" +
    "\x03\x02\x02\x02\u0FDC\u0FD5\x03\x02\x02\x02\u0FDC\u0FD6\x03\x02\x02\x02" +
    "\u0FDC\u0FD7\x03\x02\x02\x02\u0FDC\u0FD8\x03\x02\x02\x02\u0FDC\u0FD9\x03" +
    "\x02\x02\x02\u0FDC\u0FDA\x03\x02\x02\x02\u0FDC\u0FDB\x03\x02\x02\x02\u0FDD" +
    "\u0151\x03\x02\x02\x02\u0FDE\u0FE4\x07\u0114\x02\x02\u0FDF\u0FE4\x07\u0115" +
    "\x02\x02\u0FE0\u0FE4\x07\u0116\x02\x02\u0FE1\u0FE4\x07\u0117\x02\x02\u0FE2" +
    "\u0FE4\x03\x02\x02\x02\u0FE3\u0FDE\x03\x02\x02\x02\u0FE3\u0FDF\x03\x02" +
    "\x02\x02\u0FE3\u0FE0\x03\x02\x02\x02\u0FE3\u0FE1\x03\x02\x02\x02\u0FE3" +
    "\u0FE2\x03\x02\x02\x02\u0FE4\u0153\x03\x02\x02\x02\u0FE5\u0FE8\x07\xE2" +
    "\x02\x02\u0FE6\u0FE9\x07\xB6\x02\x02\u0FE7\u0FE9\x07\u0127\x02\x02\u0FE8" +
    "\u0FE6\x03\x02\x02\x02\u0FE8\u0FE7\x03\x02\x02\x02\u0FE8\u0FE9\x03\x02" +
    "\x02\x02\u0FE9\u0FF4\x03\x02\x02\x02\u0FEA\u0FEC\x07\xF9\x02\x02\u0FEB" +
    "\u0FED\x07\xB6\x02\x02\u0FEC\u0FEB\x03\x02\x02\x02\u0FEC\u0FED\x03\x02" +
    "\x02\x02\u0FED\u0FF4\x03\x02\x02\x02\u0FEE\u0FF0\x07\xE3\x02\x02\u0FEF" +
    "\u0FF1\x07\xB6\x02\x02\u0FF0\u0FEF\x03\x02\x02\x02\u0FF0\u0FF1\x03\x02" +
    "\x02\x02\u0FF1\u0FF4\x03\x02\x02\x02\u0FF2\u0FF4\x07\xE4\x02\x02\u0FF3" +
    "\u0FE5\x03\x02\x02\x02\u0FF3\u0FEA\x03\x02\x02\x02\u0FF3\u0FEE\x03\x02" +
    "\x02\x02\u0FF3\u0FF2\x03\x02\x02\x02\u0FF4\u0155\x03\x02\x02\x02\u0FF5" +
    "\u0FF8\t\t\x02\x02\u0FF6\u0FF7\x07\xA5\x02\x02\u0FF7\u0FF9\x07\xB8\x02" +
    "\x02\u0FF8\u0FF6\x03\x02\x02\x02\u0FF8\u0FF9\x03\x02\x02\x02\u0FF9\u0157" +
    "\x03\x02\x02\x02\u0FFA\u0FFB\t\n\x02\x02\u0FFB\u0159\x03\x02\x02\x02\u0FFC" +
    "\u0FFD\t\v\x02\x02\u0FFD\u015B\x03\x02\x02\x02\u0FFE\u0FFF\t\f\x02\x02" +
    "\u0FFF\u015D\x03\x02\x02\x02\u1000\u1001\t\r\x02\x02\u1001\u015F\x03\x02" +
    "\x02\x02\u1002\u1003\t\x0E\x02\x02\u1003\u0161\x03\x02\x02\x02\u1004\u1005" +
    "\t\x0F\x02\x02\u1005\u0163\x03\x02\x02\x02\u1006\u1007\t\x10\x02\x02\u1007" +
    "\u0165\x03\x02\x02\x02\u1008\u1009\t\x11\x02\x02\u1009\u0167\x03\x02\x02" +
    "\x02\u100A\u100B\t\x12\x02\x02\u100B\u0169\x03\x02\x02\x02\u100C\u100F" +
    "\x07\xF0\x02\x02\u100D\u100E\x07\xA5\x02\x02\u100E\u1010\x07\xB8\x02\x02" +
    "\u100F\u100D\x03\x02\x02\x02\u100F\u1010\x03\x02\x02\x02\u1010\u101C\x03" +
    "\x02\x02\x02\u1011\u1014\x07\u0103\x02\x02\u1012\u1013\x07\xA5\x02\x02" +
    "\u1013\u1015\x07\xB8\x02\x02\u1014\u1012\x03\x02\x02\x02\u1014\u1015\x03" +
    "\x02\x02\x02\u1015\u101C\x03\x02\x02\x02\u1016\u1019\x07\u0110\x02\x02" +
    "\u1017\u1018\x07\xA5\x02\x02\u1018\u101A\x07\xB8\x02\x02\u1019\u1017\x03" +
    "\x02\x02\x02\u1019\u101A\x03\x02\x02\x02\u101A\u101C\x03\x02\x02\x02\u101B" +
    "\u100C\x03\x02\x02\x02\u101B\u1011\x03\x02\x02\x02\u101B\u1016\x03\x02" +
    "\x02\x02\u101C\u016B\x03\x02\x02\x02\u101D\u101E\t\x13\x02\x02\u101E\u016D" +
    "\x03\x02\x02\x02\u101F\u1020\x05\u0162\xB2\x02\u1020\u1021\x07\xA5\x02" +
    "\x02\u1021\u1022\x05\u0194\xCB\x02\u1022\u1023\x07\xA4\x02\x02\u1023\u1026" +
    "\x03\x02\x02\x02\u1024\u1026\x07\xB9\x02\x02\u1025\u101F\x03\x02\x02\x02" +
    "\u1025\u1024\x03\x02\x02\x02\u1026\u016F\x03\x02\x02\x02\u1027\u1028\x05" +
    "\u0164\xB3\x02\u1028\u1029\x07\xA5\x02\x02\u1029\u102A\x05\u0194\xCB\x02" +
    "\u102A\u102F\x07\xA4\x02\x02\u102B\u102C\x07\xD5\x02\x02\u102C\u102D\x05" +
    "\u01C8\xE5\x02\u102D\u102E\x07\xA4\x02\x02\u102E\u1030\x03\x02\x02\x02" +
    "\u102F\u102B\x03\x02\x02\x02\u102F\u1030\x03\x02\x02\x02\u1030\u0171\x03" +
    "\x02\x02\x02\u1031\u1032\x05\u0168\xB5\x02\u1032\u1033\x07\xA5\x02\x02" +
    "\u1033\u1034\x05\u0194\xCB\x02\u1034\u1039\x07\xA4\x02\x02\u1035\u1036" +
    "\x07\xD5\x02\x02\u1036\u1037\x05\u01C8\xE5\x02\u1037\u1038\x07\xA4\x02" +
    "\x02\u1038\u103A\x03\x02\x02\x02\u1039\u1035\x03\x02\x02\x02\u1039\u103A" +
    "\x03\x02\x02\x02\u103A\u0173\x03\x02\x02\x02\u103B\u103C\x05\u0166\xB4" +
    "\x02\u103C\u103F\x07\xA5\x02\x02\u103D\u1040\x05\u0194\xCB\x02\u103E\u1040" +
    "\x05\u0192\xCA\x02\u103F\u103D\x03\x02\x02\x02\u103F\u103E\x03\x02\x02" +
    "\x02\u1040\u1041\x03\x02\x02\x02\u1041\u1046\x07\xA4\x02\x02\u1042\u1043" +
    "\x07\xD5\x02\x02\u1043\u1044\x05\u01C8\xE5\x02\u1044\u1045\x07\xA4\x02" +
    "\x02\u1045\u1047\x03\x02\x02\x02\u1046\u1042\x03\x02\x02\x02\u1046\u1047" +
    "\x03\x02\x02\x02\u1047\u0175\x03\x02\x02\x02\u1048\u104C\x05\u0178\xBD" +
    "\x02\u1049\u104B\x05\u0190\xC9\x02\u104A\u1049\x03\x02\x02\x02\u104B\u104E" +
    "\x03\x02\x02\x02\u104C\u104A\x03\x02\x02\x02\u104C\u104D\x03\x02\x02\x02" +
    "\u104D\u0177\x03\x02\x02\x02\u104E\u104C\x03\x02\x02\x02\u104F\u1050\x05" +
    "\u016C\xB7\x02\u1050\u1054\x07\xA5\x02\x02\u1051\u1053\x07\x04\x02\x02" +
    "\u1052\u1051\x03\x02\x02\x02\u1053\u1056\x03\x02\x02\x02\u1054\u1052\x03" +
    "\x02\x02\x02\u1054\u1055\x03\x02\x02\x02\u1055\u1057\x03\x02\x02\x02\u1056" +
    "\u1054\x03\x02\x02\x02\u1057\u1058\x05\u0194\xCB\x02\u1058\u1059\x07\xA4" +
    "\x02\x02\u1059\u0179\x03\x02\x02\x02\u105A\u105E\x05\u017C\xBF\x02\u105B" +
    "\u105D\x05\u0190\xC9\x02\u105C\u105B\x03\x02\x02\x02\u105D\u1060\x03\x02" +
    "\x02\x02\u105E\u105C\x03\x02\x02\x02\u105E\u105F\x03\x02\x02\x02\u105F" +
    "\u017B\x03\x02\x02\x02\u1060\u105E\x03\x02\x02\x02\u1061\u1062\x05\u016A" +
    "\xB6\x02\u1062\u1063\x07\xA5\x02\x02\u1063\u1064\x05\u0194\xCB\x02\u1064" +
    "\u1069\x07\xA4\x02\x02\u1065\u1066\x07\xD5\x02\x02\u1066\u1067\x05\u01C8" +
    "\xE5\x02\u1067\u1068\x07\xA4\x02\x02\u1068\u106A\x03\x02\x02\x02\u1069" +
    "\u1065\x03\x02\x02\x02\u1069\u106A\x03\x02\x02\x02\u106A\u017D\x03\x02" +
    "\x02\x02\u106B\u106F\x05\u0180\xC1\x02\u106C\u106E\x05\u0184\xC3\x02\u106D" +
    "\u106C\x03\x02\x02\x02\u106E\u1071\x03\x02\x02\x02\u106F\u106D\x03\x02" +
    "\x02\x02\u106F\u1070\x03\x02\x02\x02\u1070\u1074\x03\x02\x02\x02\u1071" +
    "\u106F\x03\x02\x02\x02\u1072\u1073\x07\xBD\x02\x02\u1073\u1075\x07\xD7" +
    "\x02\x02\u1074\u1072\x03\x02\x02\x02\u1074\u1075\x03\x02\x02\x02\u1075" +
    "\u017F\x03\x02\x02\x02\u1076\u1077\x05\u0182\xC2\x02\u1077\u107B\x07\xA5" +
    "\x02\x02\u1078\u107A\x07\x04\x02\x02\u1079\u1078\x03\x02\x02\x02\u107A" +
    "\u107D\x03\x02\x02\x02\u107B\u1079\x03\x02\x02\x02\u107B\u107C\x03\x02" +
    "\x02\x02\u107C\u107E\x03\x02\x02\x02\u107D\u107B\x03\x02\x02\x02\u107E" +
    "\u107F\x05\u0194\xCB\x02\u107F\u1080\x07\xA4\x02\x02\u1080\u0181\x03\x02" +
    "\x02\x02\u1081\u1084\x07\xED\x02\x02\u1082\u1085\x07\xB6\x02\x02\u1083" +
    "\u1085\x07\u0127\x02\x02\u1084\u1082\x03\x02\x02\x02\u1084\u1083\x03\x02" +
    "\x02\x02\u1084\u1085\x03\x02\x02\x02\u1085\u1090\x03\x02\x02\x02\u1086" +
    "\u1088\x07\u0102\x02\x02\u1087\u1089\x07\xB6\x02\x02\u1088\u1087\x03\x02" +
    "\x02\x02\u1088\u1089\x03\x02\x02\x02\u1089\u1090\x03\x02\x02\x02\u108A" +
    "\u108C\x07\xEE\x02\x02\u108B\u108D\x07\xB6\x02\x02\u108C\u108B\x03\x02" +
    "\x02\x02\u108C\u108D\x03\x02\x02\x02\u108D\u1090\x03\x02\x02\x02\u108E" +
    "\u1090\x07\xEF\x02\x02\u108F\u1081\x03\x02\x02\x02\u108F\u1086\x03\x02" +
    "\x02\x02\u108F\u108A\x03\x02\x02\x02\u108F\u108E\x03\x02\x02\x02\u1090" +
    "\u0183\x03\x02\x02\x02\u1091\u1092\x07\xD3\x02\x02\u1092\u1093\x07\xA5" +
    "\x02\x02\u1093\u1094";
bitmarkParser._serializedATNSegment8 = "\x05\u0194\xCB\x02\u1094\u1095\x07\xA4\x02\x02\u1095\u10A3\x03\x02\x02" +
    "\x02\u1096\u1097\t\x14\x02\x02\u1097\u1098\x07\xA5\x02\x02\u1098\u1099" +
    "\x07\xBB\x02\x02\u1099\u10A3\x07\xA4\x02\x02\u109A\u109E\t\x15\x02\x02" +
    "\u109B\u109D\v\x02\x02\x02\u109C\u109B\x03\x02\x02\x02\u109D\u10A0\x03" +
    "\x02\x02\x02\u109E\u109F\x03\x02\x02\x02\u109E\u109C\x03\x02\x02\x02\u109F" +
    "\u10A1\x03\x02\x02\x02\u10A0\u109E\x03\x02\x02\x02\u10A1\u10A3\x07\xA4" +
    "\x02\x02\u10A2\u1091\x03\x02\x02\x02\u10A2\u1096\x03\x02\x02\x02\u10A2" +
    "\u109A\x03\x02\x02\x02\u10A3\u0185\x03\x02\x02\x02\u10A4\u10A5\x07\xD3" +
    "\x02\x02\u10A5\u10A6\x07\xA5\x02\x02\u10A6\u10A7\x05\u0194\xCB\x02\u10A7" +
    "\u10A8\x07\xA4\x02\x02\u10A8\u10B6\x03\x02\x02\x02\u10A9\u10AA\t\x14\x02" +
    "\x02\u10AA\u10AB\x07\xA5\x02\x02\u10AB\u10AC\x07\xBB\x02\x02\u10AC\u10B6" +
    "\x07\xA4\x02\x02\u10AD\u10B1\t\x15\x02\x02\u10AE\u10B0\v\x02\x02\x02\u10AF" +
    "\u10AE\x03\x02\x02\x02\u10B0\u10B3\x03\x02\x02\x02\u10B1\u10B2\x03\x02" +
    "\x02\x02\u10B1\u10AF\x03\x02\x02\x02\u10B2\u10B4\x03\x02\x02\x02\u10B3" +
    "\u10B1\x03\x02\x02\x02\u10B4\u10B6\x07\xA4\x02\x02\u10B5\u10A4\x03\x02" +
    "\x02\x02\u10B5\u10A9\x03\x02\x02\x02\u10B5\u10AD\x03\x02\x02\x02\u10B6" +
    "\u0187\x03\x02\x02\x02\u10B7\u10BB\x05\u018A\xC6\x02\u10B8\u10BA\x05\u0190" +
    "\xC9\x02\u10B9\u10B8\x03\x02\x02\x02\u10BA\u10BD\x03\x02\x02\x02\u10BB" +
    "\u10B9\x03\x02\x02\x02\u10BB\u10BC\x03\x02\x02\x02\u10BC\u0189\x03\x02" +
    "\x02\x02\u10BD\u10BB\x03\x02\x02\x02\u10BE\u10BF\x05\u018E\xC8\x02\u10BF" +
    "\u10C0\x07\xA5\x02\x02\u10C0\u10C1\x05\u0194\xCB\x02\u10C1\u10C6\x07\xA4" +
    "\x02\x02\u10C2\u10C3\x07\xD5\x02\x02\u10C3\u10C4\x05\u01C8\xE5\x02\u10C4" +
    "\u10C5\x07\xA4\x02\x02\u10C5\u10C7\x03\x02\x02\x02\u10C6\u10C2\x03\x02" +
    "\x02\x02\u10C6\u10C7\x03\x02\x02\x02\u10C7\u018B\x03\x02\x02\x02\u10C8" +
    "\u10CB\x07\xE1\x02\x02\u10C9\u10CA\x07\xA5\x02\x02\u10CA\u10CC\x07\xB7" +
    "\x02\x02\u10CB\u10C9\x03\x02\x02\x02\u10CB\u10CC\x03\x02\x02\x02\u10CC" +
    "\u10D3\x03\x02\x02\x02\u10CD\u10D0\x07\xF8\x02\x02\u10CE\u10CF\x07\xA5" +
    "\x02\x02\u10CF\u10D1\x07\xB7\x02\x02\u10D0\u10CE\x03\x02\x02\x02\u10D0" +
    "\u10D1\x03\x02\x02\x02\u10D1\u10D3\x03\x02\x02\x02\u10D2\u10C8\x03\x02" +
    "\x02\x02\u10D2\u10CD\x03\x02\x02\x02\u10D3\u018D\x03\x02\x02\x02\u10D4" +
    "\u10D7\x07\xEC\x02\x02\u10D5\u10D6\x07\xA5\x02\x02\u10D6\u10D8\x07\xB7" +
    "\x02\x02\u10D7\u10D5\x03\x02\x02\x02\u10D7\u10D8\x03\x02\x02\x02\u10D8" +
    "\u10E4\x03\x02\x02\x02\u10D9\u10DC\x07\u0101\x02\x02\u10DA\u10DB\x07\xA5" +
    "\x02\x02\u10DB\u10DD\x07\xB7\x02\x02\u10DC\u10DA\x03\x02\x02\x02\u10DC" +
    "\u10DD\x03\x02\x02\x02\u10DD\u10E4\x03\x02\x02\x02\u10DE\u10E1\x07\u0111" +
    "\x02\x02\u10DF\u10E0\x07\xA5\x02\x02\u10E0\u10E2\x07\xB7\x02\x02\u10E1" +
    "\u10DF\x03\x02\x02\x02\u10E1\u10E2\x03\x02\x02\x02\u10E2\u10E4\x03\x02" +
    "\x02\x02\u10E3\u10D4\x03\x02\x02\x02\u10E3\u10D9\x03\x02\x02\x02\u10E3" +
    "\u10DE\x03\x02\x02\x02\u10E4\u018F\x03\x02\x02\x02\u10E5\u10E6\x07\x9D" +
    "\x02\x02\u10E6\u10E9\x05\u01C0\xE1\x02\u10E7\u10E9\x07\xD3\x02\x02\u10E8" +
    "\u10E5\x03\x02\x02\x02\u10E8\u10E7\x03\x02\x02\x02\u10E9\u10EA\x03\x02" +
    "\x02\x02\u10EA\u10EE\x07\xA5\x02\x02\u10EB\u10ED\x07\x04\x02\x02\u10EC" +
    "\u10EB\x03\x02\x02\x02\u10ED\u10F0\x03\x02\x02\x02\u10EE\u10EC\x03\x02" +
    "\x02\x02\u10EE\u10EF\x03\x02\x02\x02\u10EF\u10F3\x03\x02\x02\x02\u10F0" +
    "\u10EE\x03\x02\x02\x02\u10F1\u10F4\x05\u01C0\xE1\x02\u10F2\u10F4\x07\xBD" +
    "\x02\x02\u10F3\u10F1\x03\x02\x02\x02\u10F3\u10F2\x03\x02\x02\x02\u10F4" +
    "\u10F5\x03\x02\x02\x02\u10F5\u10F3\x03\x02\x02\x02\u10F5\u10F6\x03\x02" +
    "\x02\x02\u10F6\u10F7\x03\x02\x02\x02\u10F7\u1105\x07\xA4\x02\x02\u10F8" +
    "\u10F9\t\x14\x02\x02\u10F9\u10FA\x07\xA5\x02\x02\u10FA\u10FB\x07\xBB\x02" +
    "\x02\u10FB\u1105\x07\xA4\x02\x02\u10FC\u1100\t\x15\x02\x02\u10FD\u10FF" +
    "\v\x02\x02\x02\u10FE\u10FD\x03\x02\x02\x02\u10FF\u1102\x03\x02\x02\x02" +
    "\u1100\u1101\x03\x02\x02\x02\u1100\u10FE\x03\x02\x02\x02\u1101\u1103\x03" +
    "\x02\x02\x02\u1102\u1100\x03\x02\x02\x02\u1103\u1105\x07\xA4\x02\x02\u1104" +
    "\u10E8\x03\x02\x02\x02\u1104\u10F8\x03\x02\x02\x02\u1104\u10FC\x03\x02" +
    "\x02\x02\u1105\u0191\x03\x02\x02\x02\u1106\u1107\x07\u0126\x02\x02\u1107" +
    "\u1108\x07\xA8\x02\x02\u1108\u1109\x07\xBB\x02\x02\u1109\u0193\x03\x02" +
    "\x02\x02\u110A\u110B\x07\u0129\x02\x02\u110B\u0195\x03\x02\x02\x02\u110C" +
    "\u110D\x07\xA3\x02\x02\u110D\u1115\x07\xA4\x02\x02\u110E\u1110\x07\x04" +
    "\x02\x02\u110F\u110E\x03\x02\x02\x02\u1110\u1113\x03\x02\x02\x02\u1111" +
    "\u110F\x03\x02\x02\x02\u1111\u1112\x03\x02\x02\x02\u1112\u1114\x03\x02" +
    "\x02\x02\u1113\u1111\x03\x02\x02\x02\u1114\u1116\x05\u0198\xCD\x02\u1115" +
    "\u1111\x03\x02\x02\x02\u1115\u1116\x03\x02\x02\x02\u1116\u112B\x03\x02" +
    "\x02\x02\u1117\u1118\x07\xA3\x02\x02\u1118\u111D\x05\u01C0\xE1\x02\u1119" +
    "\u111C\x07\xA5\x02\x02\u111A\u111C\x05\u01C8\xE5\x02\u111B\u1119\x03\x02" +
    "\x02\x02\u111B\u111A\x03\x02\x02\x02\u111C\u111F\x03\x02\x02\x02\u111D" +
    "\u111B\x03\x02\x02\x02\u111D\u111E\x03\x02\x02\x02\u111E\u1120\x03\x02" +
    "\x02\x02\u111F\u111D\x03\x02\x02\x02\u1120\u1128\x07\xA4\x02\x02\u1121" +
    "\u1123\x07\x04\x02\x02\u1122\u1121\x03\x02\x02\x02\u1123\u1126\x03\x02" +
    "\x02\x02\u1124\u1122\x03\x02\x02\x02\u1124\u1125\x03\x02\x02\x02\u1125" +
    "\u1127\x03\x02\x02\x02\u1126\u1124\x03\x02\x02\x02\u1127\u1129\x05\u0198" +
    "\xCD\x02\u1128\u1124\x03\x02\x02\x02\u1128\u1129\x03\x02\x02\x02\u1129" +
    "\u112B\x03\x02\x02\x02\u112A\u110C\x03\x02\x02\x02\u112A\u1117\x03\x02" +
    "\x02\x02\u112B\u0197\x03\x02\x02\x02\u112C\u112D\x07\xA3\x02\x02\u112D" +
    "\u1132\x05\u01C0\xE1\x02\u112E\u1131\x07\xA5\x02\x02\u112F\u1131\x05\u01C8" +
    "\xE5\x02\u1130\u112E\x03\x02\x02\x02\u1130\u112F\x03\x02\x02\x02\u1131" +
    "\u1134\x03\x02\x02\x02\u1132\u1130\x03\x02\x02\x02\u1132\u1133\x03\x02" +
    "\x02\x02\u1133\u1135\x03\x02\x02\x02\u1134\u1132\x03\x02\x02\x02\u1135" +
    "\u1136\x07\xA4\x02\x02\u1136\u0199\x03\x02\x02\x02\u1137\u1139\x07\x97" +
    "\x02\x02\u1138\u113A\x05\u01C0\xE1\x02\u1139\u1138\x03\x02\x02\x02\u1139" +
    "\u113A\x03\x02\x02\x02\u113A\u113B\x03\x02\x02\x02\u113B\u1142\x07\xA4" +
    "\x02\x02\u113C\u113E\x07\x98\x02\x02\u113D\u113F\x05\u01C0\xE1\x02\u113E" +
    "\u113D\x03\x02\x02\x02\u113E\u113F\x03\x02\x02\x02\u113F\u1140\x03\x02" +
    "\x02\x02\u1140\u1142\x07\xA4\x02\x02\u1141\u1137\x03\x02\x02\x02\u1141" +
    "\u113C\x03\x02\x02\x02\u1142\u019B\x03\x02\x02\x02\u1143\u114B\x07\xCC" +
    "\x02\x02\u1144\u114B\x07\xCA\x02\x02\u1145\u1147\x07\xCB\x02\x02\u1146" +
    "\u1148\x07\xC0\x02\x02\u1147\u1146\x03\x02\x02\x02\u1147\u1148\x03\x02" +
    "\x02\x02\u1148\u1149\x03\x02\x02\x02\u1149\u114B\x07\x02\x02\x03\u114A" +
    "\u1143\x03\x02\x02\x02\u114A\u1144\x03\x02\x02\x02\u114A\u1145\x03\x02" +
    "\x02\x02\u114B\u019D\x03\x02\x02\x02\u114C\u114E\x07\xF7\x02\x02\u114D" +
    "\u114F\x05\u01C0\xE1\x02\u114E\u114D\x03\x02\x02\x02\u114E\u114F\x03\x02" +
    "\x02\x02\u114F\u1165\x03\x02\x02\x02\u1150\u115A\x05\u01C0\xE1\x02\u1151" +
    "\u1155\x07\xBD\x02\x02\u1152\u1154\x07\x04\x02\x02\u1153\u1152\x03\x02" +
    "\x02\x02\u1154\u1157\x03\x02\x02\x02\u1155\u1153\x03\x02\x02\x02\u1155" +
    "\u1156\x03\x02\x02\x02\u1156\u1159\x03\x02\x02\x02\u1157\u1155\x03\x02" +
    "\x02\x02\u1158\u1151\x03\x02\x02\x02\u1159\u115C\x03\x02\x02\x02\u115A" +
    "\u1158\x03\x02\x02\x02\u115A\u115B\x03\x02\x02\x02\u115B\u1160\x03\x02" +
    "\x02\x02\u115C\u115A\x03\x02\x02\x02\u115D\u115F\x07\xBD\x02\x02\u115E" +
    "\u115D\x03\x02\x02\x02\u115F\u1162\x03\x02\x02\x02\u1160\u115E\x03\x02" +
    "\x02\x02\u1160\u1161\x03\x02\x02\x02\u1161\u1164\x03\x02\x02\x02\u1162" +
    "\u1160\x03\x02\x02\x02\u1163\u1150\x03\x02\x02\x02\u1164\u1167\x03\x02" +
    "\x02\x02\u1165\u1163\x03\x02\x02\x02\u1165\u1166\x03\x02\x02\x02\u1166" +
    "\u1168\x03\x02\x02\x02\u1167\u1165\x03\x02\x02\x02\u1168\u1174\x07\xA4" +
    "\x02\x02\u1169\u116F\x07\xF7\x02\x02\u116A\u116E\x05\u01C0\xE1\x02\u116B" +
    "\u116E\x07\xBD\x02\x02\u116C\u116E\x07\x04\x02\x02\u116D\u116A\x03\x02" +
    "\x02\x02\u116D\u116B\x03\x02\x02\x02\u116D\u116C\x03\x02\x02\x02\u116E" +
    "\u1171\x03\x02\x02\x02\u116F\u116D\x03\x02\x02\x02\u116F\u1170\x03\x02" +
    "\x02\x02\u1170\u1172\x03\x02\x02\x02\u1171\u116F\x03\x02\x02\x02\u1172" +
    "\u1174\x07\x02\x02\x03\u1173\u114C\x03\x02\x02\x02\u1173\u1169\x03\x02" +
    "\x02\x02\u1174\u019F\x03\x02\x02\x02\u1175\u117A\x07\xC4\x02\x02\u1176" +
    "\u117B\x05\u01C0\xE1\x02\u1177\u117B\x07\xA5\x02\x02\u1178\u117B\x07\u0129" +
    "\x02\x02\u1179\u117B\x07\xBD\x02\x02\u117A\u1176\x03\x02\x02\x02\u117A" +
    "\u1177\x03\x02\x02\x02\u117A\u1178\x03\x02\x02\x02\u117A\u1179\x03\x02" +
    "\x02\x02\u117B\u117C\x03\x02\x02\x02\u117C\u117A\x03\x02\x02\x02\u117C" +
    "\u117D\x03\x02\x02\x02\u117D\u117E\x03\x02\x02\x02\u117E\u118C\x07\xA4" +
    "\x02\x02\u117F\u1187\x07\xC4\x02\x02\u1180\u1186\x05\u01C0\xE1\x02\u1181" +
    "\u1186\x07\xA5\x02\x02\u1182\u1186\x07\u0129\x02\x02\u1183\u1186\x07\xBD" +
    "\x02\x02\u1184\u1186\x07\x04\x02\x02\u1185\u1180\x03\x02\x02\x02\u1185" +
    "\u1181\x03\x02\x02\x02\u1185\u1182\x03\x02\x02\x02\u1185\u1183\x03\x02" +
    "\x02\x02\u1185\u1184\x03\x02\x02\x02\u1186\u1189\x03\x02\x02\x02\u1187" +
    "\u1185\x03\x02\x02\x02\u1187\u1188\x03\x02\x02\x02\u1188\u118A\x03\x02" +
    "\x02\x02\u1189\u1187\x03\x02\x02\x02\u118A\u118C\x07\x02\x02\x03\u118B" +
    "\u1175\x03\x02\x02\x02\u118B\u117F\x03\x02\x02\x02\u118C\u01A1\x03\x02" +
    "\x02\x02\u118D\u118E\x07\xC3\x02\x02\u118E\u118F\x05\u01C0\xE1\x02\u118F" +
    "\u1190\x07\xA4\x02\x02\u1190\u01A3\x03\x02\x02\x02\u1191\u1195\x07\xDE" +
    "\x02\x02\u1192\u1196\x05\u01C0\xE1\x02\u1193\u1196\x07\xA5\x02\x02\u1194" +
    "\u1196\x07\xBD\x02\x02\u1195\u1192\x03\x02\x02\x02\u1195\u1193\x03\x02" +
    "\x02\x02\u1195\u1194\x03\x02\x02\x02\u1196\u1197\x03\x02\x02\x02\u1197" +
    "\u1195\x03\x02\x02\x02\u1197\u1198\x03\x02\x02\x02\u1198\u1199\x03\x02" +
    "\x02\x02\u1199\u119B\x07\xA4\x02\x02\u119A\u119C\x05\u01A6\xD4\x02\u119B" +
    "\u119A\x03\x02\x02\x02\u119B\u119C\x03\x02\x02\x02\u119C\u01A5\x03\x02" +
    "\x02\x02\u119D\u11A1\x07\xDE\x02\x02\u119E\u11A2\x05\u01C0\xE1\x02\u119F" +
    "\u11A2\x07\xA5\x02\x02\u11A0\u11A2\x07\xBD\x02\x02\u11A1\u119E\x03\x02" +
    "\x02\x02\u11A1\u119F\x03\x02\x02\x02\u11A1\u11A0\x03\x02\x02\x02\u11A2" +
    "\u11A3\x03\x02\x02\x02\u11A3\u11A1\x03\x02\x02\x02\u11A3\u11A4\x03\x02" +
    "\x02\x02\u11A4\u11A5\x03\x02\x02\x02\u11A5\u11A6\x07\xA4\x02\x02\u11A6" +
    "\u01A7\x03\x02\x02\x02\u11A7\u11AB\x07\x9B\x02\x02\u11A8\u11AA\x07\xBD" +
    "\x02\x02\u11A9\u11A8\x03\x02\x02\x02\u11AA\u11AD\x03\x02\x02\x02\u11AB" +
    "\u11A9\x03\x02\x02\x02\u11AB\u11AC\x03\x02\x02\x02\u11AC\u11AF\x03\x02" +
    "\x02\x02\u11AD\u11AB\x03\x02\x02\x02\u11AE\u11B0\x05\u01C0\xE1\x02\u11AF" +
    "\u11AE\x03\x02\x02\x02\u11AF\u11B0\x03\x02\x02\x02\u11B0\u11C6\x03\x02" +
    "\x02\x02\u11B1\u11BB\x05\u01C0\xE1\x02\u11B2\u11B6\x07\xBD\x02\x02\u11B3" +
    "\u11B5\x07\x04\x02\x02\u11B4\u11B3\x03\x02\x02\x02\u11B5\u11B8\x03\x02" +
    "\x02\x02\u11B6\u11B4\x03\x02\x02\x02\u11B6\u11B7\x03\x02\x02\x02\u11B7" +
    "\u11BA\x03\x02\x02\x02\u11B8\u11B6\x03\x02\x02\x02\u11B9\u11B2\x03\x02" +
    "\x02\x02\u11BA\u11BD\x03\x02\x02\x02\u11BB\u11B9\x03\x02\x02\x02\u11BB" +
    "\u11BC\x03\x02\x02\x02\u11BC\u11C1\x03\x02\x02\x02\u11BD\u11BB\x03\x02" +
    "\x02\x02\u11BE\u11C0\x07\xBD\x02\x02\u11BF\u11BE\x03\x02\x02\x02\u11C0" +
    "\u11C3\x03\x02\x02\x02\u11C1\u11BF\x03\x02\x02\x02\u11C1\u11C2\x03\x02" +
    "\x02\x02\u11C2\u11C5\x03\x02\x02\x02\u11C3\u11C1\x03\x02\x02\x02\u11C4" +
    "\u11B1\x03\x02\x02\x02\u11C5\u11C8\x03\x02\x02\x02\u11C6\u11C4\x03\x02" +
    "\x02\x02\u11C6\u11C7\x03\x02\x02\x02\u11C7\u11C9\x03\x02\x02\x02\u11C8" +
    "\u11C6\x03\x02\x02\x02\u11C9\u11D6\x07\xA4\x02\x02\u11CA\u11CE\x07\x9B" +
    "\x02\x02\u11CB\u11CD\x07\xBD\x02\x02\u11CC\u11CB\x03\x02\x02\x02\u11CD" +
    "\u11D0\x03\x02\x02\x02\u11CE\u11CC\x03\x02\x02\x02\u11CE\u11CF\x03\x02" +
    "\x02\x02\u11CF\u11D2\x03\x02\x02\x02\u11D0\u11CE\x03\x02\x02\x02\u11D1" +
    "\u11D3\x05\u01C0\xE1\x02\u11D2\u11D1\x03\x02\x02\x02\u11D2\u11D3\x03\x02" +
    "\x02\x02\u11D3\u11D4\x03\x02\x02\x02\u11D4\u11D6\x07\x02\x02\x03\u11D5" +
    "\u11A7\x03\x02\x02\x02\u11D5\u11CA\x03\x02\x02\x02\u11D6\u01A9\x03\x02" +
    "\x02\x02\u11D7\u11D9\x07\x9C\x02\x02\u11D8\u11DA\n\x16\x02\x02\u11D9\u11D8" +
    "\x03\x02\x02\x02\u11DA\u11DB\x03\x02\x02\x02\u11DB\u11D9\x03\x02\x02\x02" +
    "\u11DB\u11DC\x03\x02\x02\x02\u11DC\u11DD\x03\x02\x02\x02\u11DD\u11DE\x07" +
    "\xA4\x02\x02\u11DE\u01AB\x03\x02\x02\x02\u11DF\u11E2\x07\xA2\x02\x02\u11E0" +
    "\u11E3\x05\u01C0\xE1\x02\u11E1\u11E3\x07\xBD\x02\x02\u11E2\u11E0\x03\x02" +
    "\x02\x02\u11E2\u11E1\x03\x02\x02\x02\u11E3\u11E4\x03\x02\x02\x02\u11E4" +
    "\u11E2\x03\x02\x02\x02\u11E4\u11E5\x03\x02\x02\x02\u11E5\u11E6\x03\x02" +
    "\x02\x02\u11E6\u11EC\x07\xA4\x02\x02\u11E7\u11E8\x07\xA2\x02\x02\u11E8" +
    "\u11E9\x05\u01C0\xE1\x02\u11E9\u11EA\x07\x02\x02\x03\u11EA\u11EC\x03\x02" +
    "\x02\x02\u11EB\u11DF\x03\x02\x02\x02\u11EB\u11E7\x03\x02\x02\x02\u11EC" +
    "\u01AD\x03\x02\x02\x02\u11ED\u11EE\x07\xD0\x02\x02\u11EE\u11EF\x05\u01C0" +
    "\xE1\x02\u11EF\u11F0\x07\xA4\x02\x02\u11F0\u11F6\x03\x02\x02\x02\u11F1" +
    "\u11F2\x07\xD1\x02\x02\u11F2\u11F3\x05\u01C0\xE1\x02\u11F3\u11F4\x07\xA4" +
    "\x02\x02\u11F4\u11F6\x03\x02\x02\x02\u11F5\u11ED\x03\x02\x02\x02\u11F5" +
    "\u11F1\x03\x02\x02\x02\u11F6\u01AF\x03\x02\x02\x02\u11F7\u11F8\x07\xC7" +
    "\x02\x02\u11F8\u11F9\x07\xA5\x02\x02\u11F9\u11FA\x07\xBB\x02\x02\u11FA" +
    "\u1201\x07\xA4\x02\x02\u11FB\u11FC\x07\xC7\x02\x02\u11FC\u11FD\x07\xA5" +
    "\x02\x02\u11FD\u11FE\x05\u01C0\xE1\x02\u11FE\u11FF\x07\xA4\x02\x02\u11FF" +
    "\u1201\x03\x02\x02\x02\u1200\u11F7\x03\x02\x02\x02\u1200\u11FB\x03\x02" +
    "\x02\x02\u1201\u01B1\x03\x02\x02\x02\u1202\u1203\x07\xDC\x02\x02\u1203" +
    "\u1204\x05\u01C0\xE1\x02\u1204\u1205\x07\xA4\x02\x02\u1205\u01B3\x03\x02" +
    "\x02\x02\u1206\u1207\x07\xDD\x02\x02\u1207\u1208\x05\u01C0\xE1\x02\u1208" +
    "\u1209\x07\xA4\x02\x02\u1209\u01B5\x03\x02\x02\x02\u120A\u1214\x05\u01B8" +
    "\xDD\x02\u120B\u120D\x07\xBD\x02\x02\u120C\u120B\x03\x02\x02\x02\u120D" +
    "\u1210\x03\x02\x02\x02\u120E\u120C\x03\x02\x02\x02\u120E\u120F\x03\x02" +
    "\x02\x02\u120F\u1211\x03\x02\x02\x02\u1210\u120E\x03\x02\x02\x02\u1211" +
    "\u1213\x05\u01B8\xDD\x02\u1212\u120E\x03\x02\x02\x02\u1213\u1216\x03\x02" +
    "\x02\x02\u1214\u1212\x03\x02\x02\x02\u1214\u1215\x03\x02\x02\x02\u1215" +
    "\u01B7\x03\x02\x02\x02\u1216\u1214\x03\x02\x02\x02\u1217\u1218\x07\x9D" +
    "\x02\x02\u1218\u1219\x05\u01C0\xE1\x02\u1219\u121A\t\x17\x02\x02\u121A" +
    "\u1220\x05\u01C0\xE1\x02\u121B\u121F\x07\xBD\x02\x02\u121C\u121F\x07\xA5" +
    "\x02\x02\u121D\u121F\x05\u01C0\xE1\x02\u121E\u121B\x03\x02\x02\x02\u121E" +
    "\u121C\x03\x02\x02\x02\u121E\u121D\x03\x02\x02\x02\u121F\u1222\x03\x02" +
    "\x02\x02\u1220\u121E\x03\x02\x02\x02\u1220\u1221\x03\x02\x02\x02\u1221" +
    "\u1223\x03\x02\x02\x02\u1222\u1220\x03\x02\x02\x02\u1223\u1224\x07\xA4" +
    "\x02\x02\u1224\u122E\x03\x02\x02\x02\u1225\u1229\x07\xDA\x02\x02\u1226" +
    "\u1228\v\x02\x02\x02\u1227\u1226\x03\x02\x02\x02\u1228\u122B\x03\x02\x02" +
    "\x02\u1229\u122A\x03\x02\x02\x02\u1229\u1227\x03\x02\x02\x02\u122A\u122C" +
    "\x03\x02\x02\x02\u122B\u1229\x03\x02\x02\x02\u122C\u122E\x07\xA4\x02\x02" +
    "\u122D\u1217\x03\x02\x02\x02\u122D\u1225\x03\x02\x02\x02\u122E\u01B9\x03" +
    "\x02\x02\x02\u122F\u1233\x07\x95\x02\x02\u1230\u1234\x05\u01C0\xE1\x02" +
    "\u1231\u1234\x07\xA5\x02\x02\u1232\u1234\x07\xBD\x02\x02\u1233\u1230\x03" +
    "\x02\x02\x02\u1233\u1231\x03\x02\x02\x02\u1233\u1232\x03\x02\x02\x02\u1234" +
    "\u1235\x03\x02\x02\x02\u1235\u1233\x03\x02\x02\x02\u1235\u1236\x03\x02" +
    "\x02\x02\u1236\u1237\x03\x02\x02\x02\u1237\u1243\x07\xA4\x02\x02\u1238" +
    "\u123E\x07\x95\x02\x02\u1239\u123D\x05\u01C0\xE1\x02\u123A\u123D\x07\xA5" +
    "\x02\x02\u123B\u123D\x07\xBD\x02\x02\u123C\u1239\x03\x02\x02\x02\u123C" +
    "\u123A\x03\x02\x02\x02\u123C\u123B\x03\x02\x02\x02\u123D\u1240\x03\x02" +
    "\x02\x02\u123E\u123C\x03\x02\x02\x02\u123E\u123F\x03\x02\x02\x02\u123F" +
    "\u1241\x03\x02\x02\x02\u1240\u123E\x03\x02\x02\x02\u1241\u1243\x07\x02" +
    "\x02\x03\u1242\u122F\x03\x02\x02\x02\u1242\u1238\x03\x02\x02\x02\u1243" +
    "\u01BB\x03\x02\x02\x02\u1244\u1246\x07\x99\x02\x02\u1245\u1247\x05\u01C0" +
    "\xE1\x02\u1246\u1245\x03\x02\x02\x02\u1246\u1247\x03\x02\x02\x02\u1247" +
    "\u1248\x03\x02\x02\x02\u1248\u1249\x07\xA4\x02\x02\u1249\u01BD\x03\x02" +
    "\x02\x02\u124A\u124C\x05\u01C0\xE1\x02\u124B\u124D\x07\xBD\x02\x02\u124C" +
    "\u124B\x03\x02\x02\x02\u124C\u124D\x03\x02\x02\x02\u124D\u124F\x03\x02" +
    "\x02\x02\u124E\u124A\x03\x02\x02\x02\u124F\u1250\x03\x02\x02\x02\u1250" +
    "\u124E\x03\x02\x02\x02\u1250\u1251\x03\x02\x02\x02\u1251\u01BF\x03\x02" +
    "\x02\x02\u1252\u1259\x07\xBC\x02\x02\u1253\u1255\x07\x04\x02\x02\u1254" +
    "\u1253\x03\x02\x02\x02\u1255\u1256\x03\x02\x02\x02\u1256\u1254\x03\x02" +
    "\x02\x02\u1256\u1257\x03\x02\x02\x02\u1257\u1258\x03\x02\x02\x02\u1258" +
    "\u125A\x07\xBB\x02\x02\u1259\u1254\x03\x02\x02\x02\u1259\u125A\x03\x02" +
    "\x02\x02\u125A\u1280\x03\x02\x02\x02\u125B\u1262\x05\u01C8\xE5\x02\u125C" +
    "\u125E\x07\x04\x02\x02\u125D\u125C\x03\x02\x02\x02\u125E\u125F\x03\x02" +
    "\x02\x02\u125F\u125D\x03\x02\x02\x02\u125F\u1260\x03\x02\x02\x02\u1260" +
    "\u1261\x03\x02\x02\x02\u1261\u1263\x07\xBB\x02\x02\u1262\u125D\x03\x02" +
    "\x02\x02\u1262\u1263\x03\x02\x02\x02\u1263\u1280\x03\x02\x02\x02\u1264" +
    "\u1280\x07\xBB\x02\x02\u1265\u1266\x07\xA0\x02\x02\u1266\u1267\x05\u01C0" +
    "\xE1\x02\u1267\u1268\x07\xA4\x02\x02\u1268\u1280\x03\x02\x02\x02\u1269" +
    "\u126B\x07\x04\x02\x02\u126A\u1269\x03\x02\x02\x02\u126B\u126E\x03\x02" +
    "\x02\x02\u126C\u126A\x03\x02\x02\x02\u126C\u126D\x03\x02\x02\x02\u126D" +
    "\u126F\x03\x02\x02\x02\u126E\u126C\x03\x02\x02\x02\u126F\u1273\x07\xA5" +
    "\x02\x02\u1270\u1272\x07\x04\x02\x02\u1271\u1270\x03\x02\x02\x02\u1272" +
    "\u1275\x03\x02\x02\x02\u1273\u1271\x03\x02\x02\x02\u1273\u1274\x03\x02" +
    "\x02\x02\u1274\u1280\x03\x02\x02\x02\u1275\u1273\x03\x02\x02\x02\u1276" +
    "\u127A\x07\xA6\x02\x02\u1277\u1279\x07\x04\x02\x02\u1278\u1277\x03\x02" +
    "\x02\x02\u1279\u127C\x03\x02\x02\x02\u127A\u1278\x03\x02\x02\x02\u127A" +
    "\u127B\x03\x02\x02\x02\u127B\u1280\x03\x02\x02\x02\u127C\u127A\x03\x02" +
    "\x02\x02\u127D\u1280\x07\xAE\x02\x02\u127E\u1280\x07\u0129\x02\x02\u127F" +
    "\u1252\x03\x02\x02\x02\u127F\u125B\x03\x02\x02\x02\u127F\u1264\x03\x02" +
    "\x02\x02\u127F\u1265\x03\x02\x02\x02\u127F\u126C\x03\x02\x02\x02\u127F" +
    "\u1276\x03\x02\x02\x02\u127F\u127D\x03\x02\x02\x02\u127F\u127E\x03\x02" +
    "\x02\x02\u1280\u01C1\x03\x02\x02\x02\u1281\u1282\x07\xB5\x02\x02\u1282" +
    "\u01C3\x03\x02\x02\x02\u1283\u1284\x07\xA4\x02\x02\u1284\u01C5\x03\x02" +
    "\x02\x02\u1285\u1286\t\x18\x02\x02\u1286\u01C7\x03\x02\x02\x02\u1287\u12A6" +
    "\x05\u01CC\xE7\x02\u1288\u12A6\x07\xBE\x02\x02\u1289\u12A6\x07\xC1\x02" +
    "\x02\u128A\u12A6\x07\xBF\x02\x02\u128B\u12A6\x07\xA6\x02\x02\u128C\u128D" +
    "\x07\xAA\x02\x02\u128D\u12A6\n\x19\x02\x02\u128E\u128F\x07\xAB\x02\x02" +
    "\u128F\u12A6\n\x1A\x02\x02\u1290\u12A6\x07\xAD\x02\x02\u1291\u12A6\x07" +
    "\xAC\x02\x02\u1292\u12A6\x07\xE6\x02\x02\u1293\u12A6\x07\xFB\x02\x02\u1294" +
    "\u12A6\x07\xE7\x02\x02\u1295\u12A6\x07\xFC\x02\x02\u1296\u12A6\x07\xE9" +
    "\x02\x02\u1297\u12A6\x07\xFF\x02\x02\u1298\u12A6\x07\xE2\x02\x02\u1299" +
    "\u12A6\x07\xF9\x02\x02\u129A\u12A6\x07\xE1\x02\x02\u129B\u12A6\x07\xF8" +
    "\x02\x02\u129C\u12A6\x07\xE5\x02\x02\u129D\u12A6\x07\xFA\x02\x02\u129E" +
    "\u12A6\x07\xE8\x02\x02\u129F\u12A6\x07\xFE\x02\x02\u12A0\u12A6\x07\xEA" +
    "\x02\x02\u12A1\u12A6\x07\u0100\x02\x02\u12A2\u12A6\x07\u0114\x02\x02\u12A3" +
    "\u12A6\x07\u0115\x02\x02\u12A4\u12A6\x07\xB3\x02\x02\u12A5\u1287\x03\x02" +
    "\x02\x02\u12A5\u1288\x03\x02\x02\x02\u12A5\u1289\x03\x02\x02\x02\u12A5" +
    "\u128A\x03\x02\x02\x02\u12A5\u128B\x03\x02\x02\x02\u12A5\u128C\x03\x02" +
    "\x02\x02\u12A5\u128E\x03\x02\x02\x02\u12A5\u1290\x03\x02\x02\x02\u12A5" +
    "\u1291\x03\x02\x02\x02\u12A5\u1292\x03\x02\x02\x02\u12A5\u1293\x03\x02" +
    "\x02\x02\u12A5\u1294\x03\x02\x02\x02\u12A5\u1295\x03\x02\x02\x02\u12A5" +
    "\u1296\x03\x02\x02\x02\u12A5\u1297\x03\x02\x02\x02\u12A5\u1298\x03\x02" +
    "\x02\x02\u12A5\u1299\x03\x02\x02\x02\u12A5\u129A\x03\x02\x02\x02\u12A5" +
    "\u129B\x03\x02\x02\x02\u12A5\u129C\x03\x02\x02\x02\u12A5\u129D\x03\x02" +
    "\x02\x02\u12A5\u129E\x03\x02\x02\x02\u12A5\u129F\x03\x02\x02\x02\u12A5" +
    "\u12A0\x03\x02\x02\x02\u12A5\u12A1\x03\x02\x02\x02\u12A5\u12A2\x03\x02" +
    "\x02\x02\u12A5\u12A3\x03\x02\x02\x02\u12A5\u12A4\x03\x02\x02\x02\u12A6" +
    "\u12A7\x03\x02\x02\x02\u12A7\u12A5\x03\x02\x02\x02\u12A7\u12A8\x03\x02" +
    "\x02\x02\u12A8\u01C9\x03\x02\x02\x02\u12A9\u12AA\x07\x04\x02\x02\u12AA" +
    "\u01CB\x03\x02\x02\x02\u12AB\u12AC\x07\xC0\x02\x02\u12AC\u01CD\x03\x02" +
    "\x02\x02\u0288\u01D2\u01D8\u01DD\u01E2\u01E9\u0279\u0281\u0288\u028D\u0295" +
    "\u029B\u02A1\u02A7\u02B0\u02B7\u02BC\u02C4\u02CB\u02D0\u02D8\u02DF\u02E4" +
    "\u02EC\u02F3\u02F8\u02FC\u0303\u030A\u0311\u0317\u031D\u0325\u032E\u0332" +
    "\u033B\u033D\u0342\u0348\u0351\u0353\u0358\u035E\u0367\u036E\u0373\u037B" +
    "\u0382\u0387\u038F\u0396\u039B\u03A3\u03AA\u03AF\u03B7\u03BE\u03C3\u03CB" +
    "\u03D2\u03D7\u03DF\u03E6\u03EB\u03F3\u03FA\u03FF\u0407\u040E\u0413\u041B" +
    "\u0422\u0427\u042F\u0436\u043B\u0443\u044A\u044F\u0457\u045E\u0463\u046B" +
    "\u0472\u0477\u047F\u0486\u048B\u0493\u049A\u049F\u04A7\u04AE\u04B3\u04B9" +
    "\u04BD\u04C2\u04CB\u04D2\u04D7\u04DD\u04E1\u04E6\u04EF\u04F6\u04FB\u0501" +
    "\u0505\u050A\u0513\u051A\u051F\u0528\u052F\u0534\u053D\u0541\u0546\u054C" +
    "\u056E\u0576\u0578\u057F\u0584\u058A\u0590\u0595\u059B\u05A0\u05A6\u05B2" +
    "\u05B7\u05BD\u05C3\u05C9\u05D0\u05D6\u05D9\u05DD\u05E1\u05E3\u05F3\u05F8" +
    "\u05FE\u0604\u060B\u0611\u0614\u061A\u0623\u0628\u0630\u0635\u063A\u0640" +
    "\u0647\u064D\u0650\u0656\u065B\u065D\u0664\u066B\u0678\u067D\u0683\u068A" +
    "\u0690\u0693\u069D\u06A2\u06A8\u06AF\u06B5\u06B8\u06C2\u06C7\u06CD\u06D4" +
    "\u06DA\u06DD\u06E5\u06EC\u06F1\u06F5\u06FA\u0701\u0707\u070A\u0712\u0718" +
    "\u071D\u0721\u0726\u072D\u0733\u0736\u073E\u0745\u074A\u0752\u0759\u075E" +
    "\u0766\u076D\u0772\u077A\u0781\u0786\u078E\u0795\u079A\u07A2\u07A9\u07AE" +
    "\u07B6\u07BD\u07C2\u07CA\u07D1\u07D6\u07DE\u07E5\u07EA\u07F2\u07F9\u07FE" +
    "\u0806\u080D\u0812\u081A\u0821\u0826\u082E\u0835\u083A\u0842\u0849\u084E" +
    "\u0856\u085D\u0862\u086A\u0871\u0876\u087E\u0885\u088A\u0892\u0899\u089E" +
    "\u08A6\u08AD\u08B2\u08BA\u08C1\u08C6\u08CE\u08D5\u08DA\u08E2\u08E9\u08EE" +
    "\u08F6\u08FD\u0902\u090A\u0911\u0916\u091E\u0925\u092A\u0932\u0939\u093E" +
    "\u0946\u094D\u0952\u095A\u0961\u0966\u096E\u0975\u097A\u0982\u0989\u098E" +
    "\u0996\u099D\u09A2\u09AA\u09B1\u09B6\u09BE\u09C5\u09CA\u09D2\u09D9\u09DE" +
    "\u09E6\u09ED\u09F2\u09FA\u0A01\u0A06\u0A0E\u0A15\u0A1A\u0A22\u0A29\u0A2E" +
    "\u0A36\u0A3D\u0A42\u0A4A\u0A51\u0A56\u0A5E\u0A65\u0A6A\u0A72\u0A79\u0A7E" +
    "\u0A86\u0A8D\u0A92\u0A9A\u0AA1\u0AA6\u0AAE\u0AB5\u0ABA\u0AC2\u0AC9\u0ACE" +
    "\u0AD6\u0ADD\u0AE2\u0AEA\u0AF1\u0AF6\u0AFE\u0B05\u0B0A\u0B12\u0B19\u0B1E" +
    "\u0B26\u0B2D\u0B32\u0B3A\u0B41\u0B46\u0B4E\u0B55\u0B5A\u0B62\u0B69\u0B6E" +
    "\u0B76\u0B7D\u0B82\u0B8A\u0B91\u0B96\u0B9E\u0BA5\u0BAA\u0BB2\u0BB9\u0BBE" +
    "\u0BC6\u0BCD\u0BD2\u0BDA\u0BE1\u0BE6\u0BEE\u0BF5\u0BFA\u0C02\u0C09\u0C0E" +
    "\u0C16\u0C1D\u0C22\u0C2A\u0C31\u0C36\u0C3E\u0C45\u0C4A\u0C52\u0C59\u0C5E" +
    "\u0C66\u0C6D\u0C72\u0C7A\u0C81\u0C86\u0C8E\u0C95\u0C9A\u0CA2\u0CA9\u0CAE" +
    "\u0CB6\u0CBD\u0CC2\u0CCA\u0CD1\u0CD6\u0CDE\u0CE5\u0CEA\u0CF2\u0CF9\u0CFE" +
    "\u0D06\u0D0D\u0D12\u0D1A\u0D21\u0D26\u0D2E\u0D35\u0D3A\u0D42\u0D49\u0D4E" +
    "\u0D56\u0D5D\u0D62\u0D6A\u0D71\u0D76\u0D7E\u0D85\u0D8A\u0D92\u0D99\u0D9E" +
    "\u0DA6\u0DAD\u0DB2\u0DBA\u0DC1\u0DC6\u0DCE\u0DD5\u0DDA\u0DE2\u0DE9\u0DEE" +
    "\u0DF6\u0DFD\u0E02\u0E0A\u0E11\u0E16\u0E1E\u0E25\u0E2A\u0E32\u0E39\u0E3E" +
    "\u0E46\u0E4D\u0E52\u0E5A\u0E61\u0E66\u0E6E\u0E75\u0E7A\u0E86\u0E8B\u0E91" +
    "\u0E98\u0E9E\u0EA1\u0EAA\u0EAC\u0EB4\u0EBB\u0EC0\u0EC9\u0ECD\u0ED3\u0EDA" +
    "\u0EE0\u0EE3\u0EE9\u0EF1\u0EF8\u0EFD\u0F02\u0F07\u0F0D\u0F11\u0F1B\u0F22" +
    "\u0F27\u0F30\u0F34\u0F3E\u0F45\u0F4A\u0F53\u0F57\u0F61\u0F68\u0F6D\u0F76" +
    "\u0F7A\u0F84\u0F8B\u0F90\u0F98\u0F9E\u0FA2\u0FA8\u0FAF\u0FB5\u0FB8\u0FBD" +
    "\u0FC6\u0FCC\u0FCE\u0FDC\u0FE3\u0FE8\u0FEC\u0FF0\u0FF3\u0FF8\u100F\u1014" +
    "\u1019\u101B\u1025\u102F\u1039\u103F\u1046\u104C\u1054\u105E\u1069\u106F" +
    "\u1074\u107B\u1084\u1088\u108C\u108F\u109E\u10A2\u10B1\u10B5\u10BB\u10C6" +
    "\u10CB\u10D0\u10D2\u10D7\u10DC\u10E1\u10E3\u10E8\u10EE\u10F3\u10F5\u1100" +
    "\u1104\u1111\u1115\u111B\u111D\u1124\u1128\u112A\u1130\u1132\u1139\u113E" +
    "\u1141\u1147\u114A\u114E\u1155\u115A\u1160\u1165\u116D\u116F\u1173\u117A" +
    "\u117C\u1185\u1187\u118B\u1195\u1197\u119B\u11A1\u11A3\u11AB\u11AF\u11B6" +
    "\u11BB\u11C1\u11C6\u11CE\u11D2\u11D5\u11DB\u11E2\u11E4\u11EB\u11F5\u1200" +
    "\u120E\u1214\u121E\u1220\u1229\u122D\u1233\u1235\u123C\u123E\u1242\u1246" +
    "\u124C\u1250\u1256\u1259\u125F\u1262\u126C\u1273\u127A\u127F\u12A5\u12A7";
bitmarkParser._serializedATN = Utils.join([
    bitmarkParser._serializedATNSegment0,
    bitmarkParser._serializedATNSegment1,
    bitmarkParser._serializedATNSegment2,
    bitmarkParser._serializedATNSegment3,
    bitmarkParser._serializedATNSegment4,
    bitmarkParser._serializedATNSegment5,
    bitmarkParser._serializedATNSegment6,
    bitmarkParser._serializedATNSegment7,
    bitmarkParser._serializedATNSegment8,
], "");
export class BitmarkContext extends ParserRuleContext {
    EOF() { return this.getToken(bitmarkParser.EOF, 0); }
    bitmark_(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bitmark_Context);
        }
        else {
            return this.getRuleContext(i, Bitmark_Context);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitmark; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitmark) {
            listener.enterBitmark(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitmark) {
            listener.exitBitmark(this);
        }
    }
}
export class Bitmark_Context extends ParserRuleContext {
    bit() {
        return this.tryGetRuleContext(0, BitContext);
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitmark_; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitmark_) {
            listener.enterBitmark_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitmark_) {
            listener.exitBitmark_(this);
        }
    }
}
export class BitContext extends ParserRuleContext {
    book() {
        return this.tryGetRuleContext(0, BookContext);
    }
    chapter() {
        return this.tryGetRuleContext(0, ChapterContext);
    }
    ai_prompt() {
        return this.tryGetRuleContext(0, Ai_promptContext);
    }
    note_ai() {
        return this.tryGetRuleContext(0, Note_aiContext);
    }
    summary_ai() {
        return this.tryGetRuleContext(0, Summary_aiContext);
    }
    article_ai() {
        return this.tryGetRuleContext(0, Article_aiContext);
    }
    summary() {
        return this.tryGetRuleContext(0, SummaryContext);
    }
    toc() {
        return this.tryGetRuleContext(0, TocContext);
    }
    bit_alias() {
        return this.tryGetRuleContext(0, Bit_aliasContext);
    }
    internal_link() {
        return this.tryGetRuleContext(0, Internal_linkContext);
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    group_born() {
        return this.tryGetRuleContext(0, Group_bornContext);
    }
    group_died() {
        return this.tryGetRuleContext(0, Group_diedContext);
    }
    essay() {
        return this.tryGetRuleContext(0, EssayContext);
    }
    correction() {
        return this.tryGetRuleContext(0, CorrectionContext);
    }
    mark_() {
        return this.tryGetRuleContext(0, Mark_Context);
    }
    take_picture() {
        return this.tryGetRuleContext(0, Take_pictureContext);
    }
    take_audio() {
        return this.tryGetRuleContext(0, Take_audioContext);
    }
    record_audio() {
        return this.tryGetRuleContext(0, Record_audioContext);
    }
    preparation_note() {
        return this.tryGetRuleContext(0, Preparation_noteContext);
    }
    assignment() {
        return this.tryGetRuleContext(0, AssignmentContext);
    }
    article() {
        return this.tryGetRuleContext(0, ArticleContext);
    }
    statement() {
        return this.tryGetRuleContext(0, StatementContext);
    }
    details() {
        return this.tryGetRuleContext(0, DetailsContext);
    }
    sample_solution() {
        return this.tryGetRuleContext(0, Sample_solutionContext);
    }
    buttoncopytext() {
        return this.tryGetRuleContext(0, ButtoncopytextContext);
    }
    wbtcontinue() {
        return this.tryGetRuleContext(0, WbtcontinueContext);
    }
    learningpathdetails() {
        return this.tryGetRuleContext(0, LearningpathdetailsContext);
    }
    note() {
        return this.tryGetRuleContext(0, NoteContext);
    }
    info() {
        return this.tryGetRuleContext(0, InfoContext);
    }
    warning() {
        return this.tryGetRuleContext(0, WarningContext);
    }
    remark() {
        return this.tryGetRuleContext(0, RemarkContext);
    }
    hintbit() {
        return this.tryGetRuleContext(0, HintbitContext);
    }
    help() {
        return this.tryGetRuleContext(0, HelpContext);
    }
    danger() {
        return this.tryGetRuleContext(0, DangerContext);
    }
    bug() {
        return this.tryGetRuleContext(0, BugContext);
    }
    sidenote() {
        return this.tryGetRuleContext(0, SidenoteContext);
    }
    stickynote() {
        return this.tryGetRuleContext(0, StickynoteContext);
    }
    quote() {
        return this.tryGetRuleContext(0, QuoteContext);
    }
    footnote() {
        return this.tryGetRuleContext(0, FootnoteContext);
    }
    examplebit() {
        return this.tryGetRuleContext(0, ExamplebitContext);
    }
    page() {
        return this.tryGetRuleContext(0, PageContext);
    }
    message() {
        return this.tryGetRuleContext(0, MessageContext);
    }
    bot_interview() {
        return this.tryGetRuleContext(0, Bot_interviewContext);
    }
    self_assessment() {
        return this.tryGetRuleContext(0, Self_assessmentContext);
    }
    rating() {
        return this.tryGetRuleContext(0, RatingContext);
    }
    survey() {
        return this.tryGetRuleContext(0, SurveyContext);
    }
    survey_1() {
        return this.tryGetRuleContext(0, Survey_1Context);
    }
    survey_anonymous() {
        return this.tryGetRuleContext(0, Survey_anonymousContext);
    }
    survey_anonymous_1() {
        return this.tryGetRuleContext(0, Survey_anonymous_1Context);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    vendor_padlet_embed() {
        return this.tryGetRuleContext(0, Vendor_padlet_embedContext);
    }
    scorm() {
        return this.tryGetRuleContext(0, ScormContext);
    }
    learning_path_lti() {
        return this.tryGetRuleContext(0, Learning_path_ltiContext);
    }
    learning_path_step() {
        return this.tryGetRuleContext(0, Learning_path_stepContext);
    }
    learning_path_book() {
        return this.tryGetRuleContext(0, Learning_path_bookContext);
    }
    learning_path_sign() {
        return this.tryGetRuleContext(0, Learning_path_signContext);
    }
    learning_path_video_call() {
        return this.tryGetRuleContext(0, Learning_path_video_callContext);
    }
    learning_path_learning_goal() {
        return this.tryGetRuleContext(0, Learning_path_learning_goalContext);
    }
    learning_path_closing() {
        return this.tryGetRuleContext(0, Learning_path_closingContext);
    }
    learning_path_feedback() {
        return this.tryGetRuleContext(0, Learning_path_feedbackContext);
    }
    learning_path_bot_training() {
        return this.tryGetRuleContext(0, Learning_path_bot_trainingContext);
    }
    learning_path_external_link() {
        return this.tryGetRuleContext(0, Learning_path_external_linkContext);
    }
    learning_path_classroom_training() {
        return this.tryGetRuleContext(0, Learning_path_classroom_trainingContext);
    }
    learning_path_classroom_event() {
        return this.tryGetRuleContext(0, Learning_path_classroom_eventContext);
    }
    bot_action_send() {
        return this.tryGetRuleContext(0, Bot_action_sendContext);
    }
    bot_action_announce() {
        return this.tryGetRuleContext(0, Bot_action_announceContext);
    }
    bot_action_save() {
        return this.tryGetRuleContext(0, Bot_action_saveContext);
    }
    bot_action_remind() {
        return this.tryGetRuleContext(0, Bot_action_remindContext);
    }
    bot_action_response() {
        return this.tryGetRuleContext(0, Bot_action_responseContext);
    }
    bot_action_true_false() {
        return this.tryGetRuleContext(0, Bot_action_true_falseContext);
    }
    bot_action_rating_number() {
        return this.tryGetRuleContext(0, Bot_action_rating_numberContext);
    }
    bot_action_rating_stars() {
        return this.tryGetRuleContext(0, Bot_action_rating_starsContext);
    }
    bit_image() {
        return this.tryGetRuleContext(0, Bit_imageContext);
    }
    bit_imageLink() {
        return this.tryGetRuleContext(0, Bit_imageLinkContext);
    }
    bit_imageZoom() {
        return this.tryGetRuleContext(0, Bit_imageZoomContext);
    }
    bit_imagePrototype() {
        return this.tryGetRuleContext(0, Bit_imagePrototypeContext);
    }
    bit_imageSuperWide() {
        return this.tryGetRuleContext(0, Bit_imageSuperWideContext);
    }
    bit_audio() {
        return this.tryGetRuleContext(0, Bit_audioContext);
    }
    bit_audioLink() {
        return this.tryGetRuleContext(0, Bit_audioLinkContext);
    }
    bit_audioEmbed() {
        return this.tryGetRuleContext(0, Bit_audioEmbedContext);
    }
    bit_video() {
        return this.tryGetRuleContext(0, Bit_videoContext);
    }
    bit_videoLink() {
        return this.tryGetRuleContext(0, Bit_videoLinkContext);
    }
    bit_videoEmbed() {
        return this.tryGetRuleContext(0, Bit_videoEmbedContext);
    }
    bit_videoPortrait() {
        return this.tryGetRuleContext(0, Bit_videoPortraitContext);
    }
    bit_videoLandscape() {
        return this.tryGetRuleContext(0, Bit_videoLandscapeContext);
    }
    bit_stillImageFilm() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmContext);
    }
    bit_stillImageFilmLink() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmLinkContext);
    }
    bit_stillImageFilmEmbed() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmEmbedContext);
    }
    bit_document() {
        return this.tryGetRuleContext(0, Bit_documentContext);
    }
    bit_documentLink() {
        return this.tryGetRuleContext(0, Bit_documentLinkContext);
    }
    bit_documentEmbed() {
        return this.tryGetRuleContext(0, Bit_documentEmbedContext);
    }
    bit_documentDownload() {
        return this.tryGetRuleContext(0, Bit_documentDownloadContext);
    }
    bit_websiteLink() {
        return this.tryGetRuleContext(0, Bit_websiteLinkContext);
    }
    bit_appLink() {
        return this.tryGetRuleContext(0, Bit_appLinkContext);
    }
    bit_editorial() {
        return this.tryGetRuleContext(0, Bit_editorialContext);
    }
    book_frontispiece() {
        return this.tryGetRuleContext(0, Book_frontispieceContext);
    }
    book_title() {
        return this.tryGetRuleContext(0, Book_titleContext);
    }
    book_copyright() {
        return this.tryGetRuleContext(0, Book_copyrightContext);
    }
    book_dedication() {
        return this.tryGetRuleContext(0, Book_dedicationContext);
    }
    book_forword() {
        return this.tryGetRuleContext(0, Book_forwordContext);
    }
    book_preface() {
        return this.tryGetRuleContext(0, Book_prefaceContext);
    }
    book_prologue() {
        return this.tryGetRuleContext(0, Book_prologueContext);
    }
    book_epilogue() {
        return this.tryGetRuleContext(0, Book_epilogueContext);
    }
    book_introduction() {
        return this.tryGetRuleContext(0, Book_introductionContext);
    }
    book_inciting_incident() {
        return this.tryGetRuleContext(0, Book_inciting_incidentContext);
    }
    book_conclusion() {
        return this.tryGetRuleContext(0, Book_conclusionContext);
    }
    book_afterword() {
        return this.tryGetRuleContext(0, Book_afterwordContext);
    }
    book_postscript() {
        return this.tryGetRuleContext(0, Book_postscriptContext);
    }
    book_appendix() {
        return this.tryGetRuleContext(0, Book_appendixContext);
    }
    book_addendum() {
        return this.tryGetRuleContext(0, Book_addendumContext);
    }
    book_acknowledgments() {
        return this.tryGetRuleContext(0, Book_acknowledgmentsContext);
    }
    book_list_of_contributors() {
        return this.tryGetRuleContext(0, Book_list_of_contributorsContext);
    }
    book_bibliography() {
        return this.tryGetRuleContext(0, Book_bibliographyContext);
    }
    book_reference_list() {
        return this.tryGetRuleContext(0, Book_reference_listContext);
    }
    book_endnotes() {
        return this.tryGetRuleContext(0, Book_endnotesContext);
    }
    book_notes() {
        return this.tryGetRuleContext(0, Book_notesContext);
    }
    book_copyright_permissions() {
        return this.tryGetRuleContext(0, Book_copyright_permissionsContext);
    }
    book_teaser() {
        return this.tryGetRuleContext(0, Book_teaserContext);
    }
    book_auther_bio() {
        return this.tryGetRuleContext(0, Book_auther_bioContext);
    }
    book_request_for_a_book_review() {
        return this.tryGetRuleContext(0, Book_request_for_a_book_reviewContext);
    }
    book_coming_soon() {
        return this.tryGetRuleContext(0, Book_coming_soonContext);
    }
    book_read_more() {
        return this.tryGetRuleContext(0, Book_read_moreContext);
    }
    book_summary() {
        return this.tryGetRuleContext(0, Book_summaryContext);
    }
    book_epigraph() {
        return this.tryGetRuleContext(0, Book_epigraphContext);
    }
    code() {
        return this.tryGetRuleContext(0, CodeContext);
    }
    card1() {
        return this.tryGetRuleContext(0, Card1Context);
    }
    question1() {
        return this.tryGetRuleContext(0, Question1Context);
    }
    screenshot() {
        return this.tryGetRuleContext(0, ScreenshotContext);
    }
    focus_image() {
        return this.tryGetRuleContext(0, Focus_imageContext);
    }
    photo() {
        return this.tryGetRuleContext(0, PhotoContext);
    }
    browser_image() {
        return this.tryGetRuleContext(0, Browser_imageContext);
    }
    chapter_subject_matter() {
        return this.tryGetRuleContext(0, Chapter_subject_matterContext);
    }
    release_note() {
        return this.tryGetRuleContext(0, Release_noteContext);
    }
    conclusion() {
        return this.tryGetRuleContext(0, ConclusionContext);
    }
    featured() {
        return this.tryGetRuleContext(0, FeaturedContext);
    }
    vendor_amcharts_5_chart() {
        return this.tryGetRuleContext(0, Vendor_amcharts_5_chartContext);
    }
    newspaper_article() {
        return this.tryGetRuleContext(0, Newspaper_articleContext);
    }
    blog_article() {
        return this.tryGetRuleContext(0, Blog_articleContext);
    }
    book_article() {
        return this.tryGetRuleContext(0, Book_articleContext);
    }
    notebook_article() {
        return this.tryGetRuleContext(0, Notebook_articleContext);
    }
    workbook_article() {
        return this.tryGetRuleContext(0, Workbook_articleContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit) {
            listener.enterBit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit) {
            listener.exitBit(this);
        }
    }
}
export class BookContext extends ParserRuleContext {
    BitBook() { return this.getToken(bitmarkParser.BitBook, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook) {
            listener.enterBook(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook) {
            listener.exitBook(this);
        }
    }
}
export class ChapterContext extends ParserRuleContext {
    BitChapter() { return this.getToken(bitmarkParser.BitChapter, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_chapter; }
    // @Override
    enterRule(listener) {
        if (listener.enterChapter) {
            listener.enterChapter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChapter) {
            listener.exitChapter(this);
        }
    }
}
export class Ai_promptContext extends ParserRuleContext {
    BitAiPrompt() { return this.getToken(bitmarkParser.BitAiPrompt, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_ai_prompt; }
    // @Override
    enterRule(listener) {
        if (listener.enterAi_prompt) {
            listener.enterAi_prompt(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAi_prompt) {
            listener.exitAi_prompt(this);
        }
    }
}
export class Note_aiContext extends ParserRuleContext {
    BitNoteAi() { return this.getToken(bitmarkParser.BitNoteAi, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_note_ai; }
    // @Override
    enterRule(listener) {
        if (listener.enterNote_ai) {
            listener.enterNote_ai(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNote_ai) {
            listener.exitNote_ai(this);
        }
    }
}
export class Summary_aiContext extends ParserRuleContext {
    BitSummayAi() { return this.getToken(bitmarkParser.BitSummayAi, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_summary_ai; }
    // @Override
    enterRule(listener) {
        if (listener.enterSummary_ai) {
            listener.enterSummary_ai(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSummary_ai) {
            listener.exitSummary_ai(this);
        }
    }
}
export class Article_aiContext extends ParserRuleContext {
    BitArticleAi() { return this.getToken(bitmarkParser.BitArticleAi, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_article_ai; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticle_ai) {
            listener.enterArticle_ai(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticle_ai) {
            listener.exitArticle_ai(this);
        }
    }
}
export class TocContext extends ParserRuleContext {
    BitToc() { return this.getToken(bitmarkParser.BitToc, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_toc; }
    // @Override
    enterRule(listener) {
        if (listener.enterToc) {
            listener.enterToc(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitToc) {
            listener.exitToc(this);
        }
    }
}
export class SummaryContext extends ParserRuleContext {
    BitSummary() { return this.getToken(bitmarkParser.BitSummary, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    title_etc() {
        return this.getRuleContext(0, Title_etcContext);
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_summary; }
    // @Override
    enterRule(listener) {
        if (listener.enterSummary) {
            listener.enterSummary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSummary) {
            listener.exitSummary(this);
        }
    }
}
export class Internal_linkContext extends ParserRuleContext {
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    BitIntlink() { return this.tryGetToken(bitmarkParser.BitIntlink, 0); }
    BitIntRef() { return this.tryGetToken(bitmarkParser.BitIntRef, 0); }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_internal_link; }
    // @Override
    enterRule(listener) {
        if (listener.enterInternal_link) {
            listener.enterInternal_link(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInternal_link) {
            listener.exitInternal_link(this);
        }
    }
}
export class Bit_aliasContext extends ParserRuleContext {
    BitAlias() { return this.getToken(bitmarkParser.BitAlias, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    angleref() {
        return this.getRuleContext(0, AnglerefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_alias; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_alias) {
            listener.enterBit_alias(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_alias) {
            listener.exitBit_alias(this);
        }
    }
}
export class Title_etcContext extends ParserRuleContext {
    title(i) {
        if (i === undefined) {
            return this.getRuleContexts(TitleContext);
        }
        else {
            return this.getRuleContext(i, TitleContext);
        }
    }
    atdef(i) {
        if (i === undefined) {
            return this.getRuleContexts(AtdefContext);
        }
        else {
            return this.getRuleContext(i, AtdefContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    angleref(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnglerefContext);
        }
        else {
            return this.getRuleContext(i, AnglerefContext);
        }
    }
    anchor(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnchorContext);
        }
        else {
            return this.getRuleContext(i, AnchorContext);
        }
    }
    progress(i) {
        if (i === undefined) {
            return this.getRuleContexts(ProgressContext);
        }
        else {
            return this.getRuleContext(i, ProgressContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_title_etc; }
    // @Override
    enterRule(listener) {
        if (listener.enterTitle_etc) {
            listener.enterTitle_etc(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTitle_etc) {
            listener.exitTitle_etc(this);
        }
    }
}
export class Group_bornContext extends ParserRuleContext {
    BitGroups() { return this.getToken(bitmarkParser.BitGroups, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    lines(i) {
        if (i === undefined) {
            return this.getRuleContexts(LinesContext);
        }
        else {
            return this.getRuleContext(i, LinesContext);
        }
    }
    OPR(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPR);
        }
        else {
            return this.getToken(bitmarkParser.OPR, i);
        }
    }
    OPHASH(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPHASH);
        }
        else {
            return this.getToken(bitmarkParser.OPHASH, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_group_born; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroup_born) {
            listener.enterGroup_born(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroup_born) {
            listener.exitGroup_born(this);
        }
    }
}
export class Group_diedContext extends ParserRuleContext {
    BitGroupt() { return this.getToken(bitmarkParser.BitGroupt, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    lines(i) {
        if (i === undefined) {
            return this.getRuleContexts(LinesContext);
        }
        else {
            return this.getRuleContext(i, LinesContext);
        }
    }
    OPR(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPR);
        }
        else {
            return this.getToken(bitmarkParser.OPR, i);
        }
    }
    OPHASH(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPHASH);
        }
        else {
            return this.getToken(bitmarkParser.OPHASH, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_group_died; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroup_died) {
            listener.enterGroup_died(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroup_died) {
            listener.exitGroup_died(this);
        }
    }
}
export class Learning_path_ltiContext extends ParserRuleContext {
    BitLearningPathLti() { return this.getToken(bitmarkParser.BitLearningPathLti, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_lti; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_lti) {
            listener.enterLearning_path_lti(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_lti) {
            listener.exitLearning_path_lti(this);
        }
    }
}
export class Learning_path_stepContext extends ParserRuleContext {
    BitLearningPathStep() { return this.getToken(bitmarkParser.BitLearningPathStep, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_step; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_step) {
            listener.enterLearning_path_step(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_step) {
            listener.exitLearning_path_step(this);
        }
    }
}
export class Learning_path_bookContext extends ParserRuleContext {
    BitLearningPathBook() { return this.getToken(bitmarkParser.BitLearningPathBook, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_book; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_book) {
            listener.enterLearning_path_book(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_book) {
            listener.exitLearning_path_book(this);
        }
    }
}
export class Learning_path_signContext extends ParserRuleContext {
    BitLearningPathSign() { return this.getToken(bitmarkParser.BitLearningPathSign, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_sign; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_sign) {
            listener.enterLearning_path_sign(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_sign) {
            listener.exitLearning_path_sign(this);
        }
    }
}
export class Learning_path_video_callContext extends ParserRuleContext {
    BitLearningPathVideoCall() { return this.getToken(bitmarkParser.BitLearningPathVideoCall, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_video_call; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_video_call) {
            listener.enterLearning_path_video_call(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_video_call) {
            listener.exitLearning_path_video_call(this);
        }
    }
}
export class Learning_path_learning_goalContext extends ParserRuleContext {
    BitLearningPathLearningGoal() { return this.getToken(bitmarkParser.BitLearningPathLearningGoal, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_learning_goal; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_learning_goal) {
            listener.enterLearning_path_learning_goal(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_learning_goal) {
            listener.exitLearning_path_learning_goal(this);
        }
    }
}
export class Learning_path_closingContext extends ParserRuleContext {
    BitLearningPathClosing() { return this.getToken(bitmarkParser.BitLearningPathClosing, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_closing; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_closing) {
            listener.enterLearning_path_closing(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_closing) {
            listener.exitLearning_path_closing(this);
        }
    }
}
export class Learning_path_feedbackContext extends ParserRuleContext {
    BitLearningPathFeedback() { return this.getToken(bitmarkParser.BitLearningPathFeedback, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_feedback; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_feedback) {
            listener.enterLearning_path_feedback(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_feedback) {
            listener.exitLearning_path_feedback(this);
        }
    }
}
export class Learning_path_bot_trainingContext extends ParserRuleContext {
    BitLearningPathBotTraining() { return this.getToken(bitmarkParser.BitLearningPathBotTraining, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_bot_training; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_bot_training) {
            listener.enterLearning_path_bot_training(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_bot_training) {
            listener.exitLearning_path_bot_training(this);
        }
    }
}
export class Learning_path_external_linkContext extends ParserRuleContext {
    BitLearningPathExternalLink() { return this.getToken(bitmarkParser.BitLearningPathExternalLink, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_external_link; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_external_link) {
            listener.enterLearning_path_external_link(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_external_link) {
            listener.exitLearning_path_external_link(this);
        }
    }
}
export class Learning_path_classroom_trainingContext extends ParserRuleContext {
    BitLearningPathClassroomTraining() { return this.getToken(bitmarkParser.BitLearningPathClassroomTraining, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_classroom_training; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_classroom_training) {
            listener.enterLearning_path_classroom_training(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_classroom_training) {
            listener.exitLearning_path_classroom_training(this);
        }
    }
}
export class Learning_path_classroom_eventContext extends ParserRuleContext {
    BitLearningPathClassroomEvent() { return this.getToken(bitmarkParser.BitLearningPathClassroomEvent, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_classroom_event; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_classroom_event) {
            listener.enterLearning_path_classroom_event(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_classroom_event) {
            listener.exitLearning_path_classroom_event(this);
        }
    }
}
export class Bot_action_sendContext extends ParserRuleContext {
    BitBotActionSend() { return this.getToken(bitmarkParser.BitBotActionSend, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_send; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_send) {
            listener.enterBot_action_send(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_send) {
            listener.exitBot_action_send(this);
        }
    }
}
export class Bot_action_announceContext extends ParserRuleContext {
    BitBotActionAnnounce() { return this.getToken(bitmarkParser.BitBotActionAnnounce, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_announce; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_announce) {
            listener.enterBot_action_announce(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_announce) {
            listener.exitBot_action_announce(this);
        }
    }
}
export class Bot_action_saveContext extends ParserRuleContext {
    BitBotActionSave() { return this.getToken(bitmarkParser.BitBotActionSave, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_save; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_save) {
            listener.enterBot_action_save(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_save) {
            listener.exitBot_action_save(this);
        }
    }
}
export class Bot_action_remindContext extends ParserRuleContext {
    BitBotActionRemind() { return this.getToken(bitmarkParser.BitBotActionRemind, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_remind; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_remind) {
            listener.enterBot_action_remind(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_remind) {
            listener.exitBot_action_remind(this);
        }
    }
}
export class Bot_action_responseContext extends ParserRuleContext {
    BitBotActionResponse() { return this.getToken(bitmarkParser.BitBotActionResponse, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    bot_action(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_actionContext);
        }
        else {
            return this.getRuleContext(i, Bot_actionContext);
        }
    }
    footer() {
        return this.tryGetRuleContext(0, FooterContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_response; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_response) {
            listener.enterBot_action_response(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_response) {
            listener.exitBot_action_response(this);
        }
    }
}
export class Bot_action_true_falseContext extends ParserRuleContext {
    BitBotActionTrueFalse() { return this.getToken(bitmarkParser.BitBotActionTrueFalse, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    bot_action(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_actionContext);
        }
        else {
            return this.getRuleContext(i, Bot_actionContext);
        }
    }
    footer() {
        return this.tryGetRuleContext(0, FooterContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_true_false; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_true_false) {
            listener.enterBot_action_true_false(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_true_false) {
            listener.exitBot_action_true_false(this);
        }
    }
}
export class Bot_action_rating_numberContext extends ParserRuleContext {
    BitBotActionRatingNumber() { return this.getToken(bitmarkParser.BitBotActionRatingNumber, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    bot_action(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_actionContext);
        }
        else {
            return this.getRuleContext(i, Bot_actionContext);
        }
    }
    footer() {
        return this.tryGetRuleContext(0, FooterContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_rating_number; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_rating_number) {
            listener.enterBot_action_rating_number(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_rating_number) {
            listener.exitBot_action_rating_number(this);
        }
    }
}
export class Bot_action_rating_starsContext extends ParserRuleContext {
    BitBotActionRatingStars() { return this.getToken(bitmarkParser.BitBotActionRatingStars, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_rating_stars; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_rating_stars) {
            listener.enterBot_action_rating_stars(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_rating_stars) {
            listener.exitBot_action_rating_stars(this);
        }
    }
}
export class Bot_actionContext extends ParserRuleContext {
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    bo_actions() {
        return this.getRuleContext(0, Bo_actionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action) {
            listener.enterBot_action(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action) {
            listener.exitBot_action(this);
        }
    }
}
export class Bo_actionsContext extends ParserRuleContext {
    boacts(i) {
        if (i === undefined) {
            return this.getRuleContexts(BoactsContext);
        }
        else {
            return this.getRuleContext(i, BoactsContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bo_actions; }
    // @Override
    enterRule(listener) {
        if (listener.enterBo_actions) {
            listener.enterBo_actions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBo_actions) {
            listener.exitBo_actions(this);
        }
    }
}
export class BoactsContext extends ParserRuleContext {
    instruction() {
        return this.tryGetRuleContext(0, InstructionContext);
    }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    choice_minus() {
        return this.tryGetRuleContext(0, Choice_minusContext);
    }
    choice_plus() {
        return this.tryGetRuleContext(0, Choice_plusContext);
    }
    feedback() {
        return this.tryGetRuleContext(0, FeedbackContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_boacts; }
    // @Override
    enterRule(listener) {
        if (listener.enterBoacts) {
            listener.enterBoacts(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBoacts) {
            listener.exitBoacts(this);
        }
    }
}
export class FeedbackContext extends ParserRuleContext {
    ENCLBARS() { return this.tryGetToken(bitmarkParser.ENCLBARS, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_feedback; }
    // @Override
    enterRule(listener) {
        if (listener.enterFeedback) {
            listener.enterFeedback(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFeedback) {
            listener.exitFeedback(this);
        }
    }
}
export class FooterContext extends ParserRuleContext {
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_footer; }
    // @Override
    enterRule(listener) {
        if (listener.enterFooter) {
            listener.enterFooter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFooter) {
            listener.exitFooter(this);
        }
    }
}
export class BitElemContext extends ParserRuleContext {
    LIST_LINE() { return this.tryGetToken(bitmarkParser.LIST_LINE, 0); }
    NOTBITMARK() { return this.tryGetToken(bitmarkParser.NOTBITMARK, 0); }
    dclines() {
        return this.tryGetRuleContext(0, DclinesContext);
    }
    gap() {
        return this.tryGetRuleContext(0, GapContext);
    }
    reference() {
        return this.tryGetRuleContext(0, ReferenceContext);
    }
    dateprop() {
        return this.tryGetRuleContext(0, DatepropContext);
    }
    progress() {
        return this.tryGetRuleContext(0, ProgressContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    dollarans() {
        return this.tryGetRuleContext(0, DollaransContext);
    }
    partans() {
        return this.tryGetRuleContext(0, PartansContext);
    }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    title() {
        return this.tryGetRuleContext(0, TitleContext);
    }
    instruction() {
        return this.tryGetRuleContext(0, InstructionContext);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    example() {
        return this.tryGetRuleContext(0, ExampleContext);
    }
    bool_label() {
        return this.tryGetRuleContext(0, Bool_labelContext);
    }
    progress_points() {
        return this.tryGetRuleContext(0, Progress_pointsContext);
    }
    istracked() {
        return this.tryGetRuleContext(0, IstrackedContext);
    }
    isinfoonly() {
        return this.tryGetRuleContext(0, IsinfoonlyContext);
    }
    imagebit() {
        return this.tryGetRuleContext(0, ImagebitContext);
    }
    audiobit() {
        return this.tryGetRuleContext(0, AudiobitContext);
    }
    videobit() {
        return this.tryGetRuleContext(0, VideobitContext);
    }
    articlebit() {
        return this.tryGetRuleContext(0, ArticlebitContext);
    }
    documentbit() {
        return this.tryGetRuleContext(0, DocumentbitContext);
    }
    appbit() {
        return this.tryGetRuleContext(0, AppbitContext);
    }
    websitebit() {
        return this.tryGetRuleContext(0, WebsitebitContext);
    }
    stillimagefilmbit() {
        return this.tryGetRuleContext(0, StillimagefilmbitContext);
    }
    angleref() {
        return this.tryGetRuleContext(0, AnglerefContext);
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    bracketed_text() {
        return this.tryGetRuleContext(0, Bracketed_textContext);
    }
    sp() {
        return this.tryGetRuleContext(0, SpContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitElem; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitElem) {
            listener.enterBitElem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitElem) {
            listener.exitBitElem(this);
        }
    }
}
export class GapContext extends ParserRuleContext {
    single_gap(i) {
        if (i === undefined) {
            return this.getRuleContexts(Single_gapContext);
        }
        else {
            return this.getRuleContext(i, Single_gapContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    hint(i) {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }
        else {
            return this.getRuleContext(i, HintContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    example(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExampleContext);
        }
        else {
            return this.getRuleContext(i, ExampleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_gap; }
    // @Override
    enterRule(listener) {
        if (listener.enterGap) {
            listener.enterGap(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGap) {
            listener.exitGap(this);
        }
    }
}
export class Single_gapContext extends ParserRuleContext {
    OPU() { return this.getToken(bitmarkParser.OPU, 0); }
    clnsp() {
        return this.getRuleContext(0, ClnspContext);
    }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    STRING() { return this.tryGetToken(bitmarkParser.STRING, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_single_gap; }
    // @Override
    enterRule(listener) {
        if (listener.enterSingle_gap) {
            listener.enterSingle_gap(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSingle_gap) {
            listener.exitSingle_gap(this);
        }
    }
}
export class Choice_plusContext extends ParserRuleContext {
    OPP() { return this.getToken(bitmarkParser.OPP, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_plus; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_plus) {
            listener.enterChoice_plus(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_plus) {
            listener.exitChoice_plus(this);
        }
    }
}
export class Choice_minusContext extends ParserRuleContext {
    OPM() { return this.getToken(bitmarkParser.OPM, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_minus; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_minus) {
            listener.enterChoice_minus(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_minus) {
            listener.exitChoice_minus(this);
        }
    }
}
export class Choice_starContext extends ParserRuleContext {
    OPR() { return this.getToken(bitmarkParser.OPR, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_star; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_star) {
            listener.enterChoice_star(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_star) {
            listener.exitChoice_star(this);
        }
    }
}
export class EssayContext extends ParserRuleContext {
    BitEssay() { return this.getToken(bitmarkParser.BitEssay, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    ml_example(i) {
        if (i === undefined) {
            return this.getRuleContexts(Ml_exampleContext);
        }
        else {
            return this.getRuleContext(i, Ml_exampleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_essay; }
    // @Override
    enterRule(listener) {
        if (listener.enterEssay) {
            listener.enterEssay(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEssay) {
            listener.exitEssay(this);
        }
    }
}
export class Ml_exampleContext extends ParserRuleContext {
    AtExamplecol() { return this.getToken(bitmarkParser.AtExamplecol, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_ml_example; }
    // @Override
    enterRule(listener) {
        if (listener.enterMl_example) {
            listener.enterMl_example(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMl_example) {
            listener.exitMl_example(this);
        }
    }
}
export class PartansContext extends ParserRuleContext {
    AtPartialAnswerS() { return this.tryGetToken(bitmarkParser.AtPartialAnswerS, 0); }
    AtPartialAnswer() { return this.tryGetToken(bitmarkParser.AtPartialAnswer, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_partans; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartans) {
            listener.enterPartans(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartans) {
            listener.exitPartans(this);
        }
    }
}
export class ResourceContext extends ParserRuleContext {
    bitElem() {
        return this.getRuleContext(0, BitElemContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource) {
            listener.enterResource(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource) {
            listener.exitResource(this);
        }
    }
}
export class CorrectionContext extends ParserRuleContext {
    BitCorrection() { return this.getToken(bitmarkParser.BitCorrection, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    corrs(i) {
        if (i === undefined) {
            return this.getRuleContexts(CorrsContext);
        }
        else {
            return this.getRuleContext(i, CorrsContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_correction; }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrection) {
            listener.enterCorrection(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrection) {
            listener.exitCorrection(this);
        }
    }
}
export class CorrsContext extends ParserRuleContext {
    OPM() { return this.tryGetToken(bitmarkParser.OPM, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL() { return this.getToken(bitmarkParser.NL, 0); }
    OPP() { return this.tryGetToken(bitmarkParser.OPP, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_corrs; }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrs) {
            listener.enterCorrs(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrs) {
            listener.exitCorrs(this);
        }
    }
}
export class Mark_Context extends ParserRuleContext {
    BitMark() { return this.getToken(bitmarkParser.BitMark, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    mark_text(i) {
        if (i === undefined) {
            return this.getRuleContexts(Mark_textContext);
        }
        else {
            return this.getRuleContext(i, Mark_textContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_) {
            listener.enterMark_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_) {
            listener.exitMark_(this);
        }
    }
}
export class Mark_textContext extends ParserRuleContext {
    OPS() { return this.getToken(bitmarkParser.OPS, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    mark_color() {
        return this.tryGetRuleContext(0, Mark_colorContext);
    }
    hint(i) {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }
        else {
            return this.getRuleContext(i, HintContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_text; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_text) {
            listener.enterMark_text(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_text) {
            listener.exitMark_text(this);
        }
    }
}
export class Mark_colorContext extends ParserRuleContext {
    OPAMARK() { return this.getToken(bitmarkParser.OPAMARK, 0); }
    STRING() { return this.getToken(bitmarkParser.STRING, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_color; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_color) {
            listener.enterMark_color(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_color) {
            listener.exitMark_color(this);
        }
    }
}
export class Take_audioContext extends ParserRuleContext {
    BitTakeAudio() { return this.getToken(bitmarkParser.BitTakeAudio, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_take_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterTake_audio) {
            listener.enterTake_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTake_audio) {
            listener.exitTake_audio(this);
        }
    }
}
export class Take_pictureContext extends ParserRuleContext {
    BitTakepic() { return this.getToken(bitmarkParser.BitTakepic, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_take_picture; }
    // @Override
    enterRule(listener) {
        if (listener.enterTake_picture) {
            listener.enterTake_picture(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTake_picture) {
            listener.exitTake_picture(this);
        }
    }
}
export class Record_audioContext extends ParserRuleContext {
    BitRecaud() { return this.getToken(bitmarkParser.BitRecaud, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_record_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterRecord_audio) {
            listener.enterRecord_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRecord_audio) {
            listener.exitRecord_audio(this);
        }
    }
}
export class Preparation_noteContext extends ParserRuleContext {
    BitPrepnote() { return this.getToken(bitmarkParser.BitPrepnote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_preparation_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterPreparation_note) {
            listener.enterPreparation_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPreparation_note) {
            listener.exitPreparation_note(this);
        }
    }
}
export class AssignmentContext extends ParserRuleContext {
    BitAssign() { return this.getToken(bitmarkParser.BitAssign, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_assignment; }
    // @Override
    enterRule(listener) {
        if (listener.enterAssignment) {
            listener.enterAssignment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAssignment) {
            listener.exitAssignment(this);
        }
    }
}
export class ArticleContext extends ParserRuleContext {
    BitArticle() { return this.getToken(bitmarkParser.BitArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticle) {
            listener.enterArticle(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticle) {
            listener.exitArticle(this);
        }
    }
}
export class StatementContext extends ParserRuleContext {
    BitStatement() { return this.getToken(bitmarkParser.BitStatement, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_statement; }
    // @Override
    enterRule(listener) {
        if (listener.enterStatement) {
            listener.enterStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStatement) {
            listener.exitStatement(this);
        }
    }
}
export class DetailsContext extends ParserRuleContext {
    BitDetails() { return this.getToken(bitmarkParser.BitDetails, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_details; }
    // @Override
    enterRule(listener) {
        if (listener.enterDetails) {
            listener.enterDetails(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDetails) {
            listener.exitDetails(this);
        }
    }
}
export class Sample_solutionContext extends ParserRuleContext {
    BitSampleSolution() { return this.getToken(bitmarkParser.BitSampleSolution, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sample_solution; }
    // @Override
    enterRule(listener) {
        if (listener.enterSample_solution) {
            listener.enterSample_solution(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSample_solution) {
            listener.exitSample_solution(this);
        }
    }
}
export class ButtoncopytextContext extends ParserRuleContext {
    BitButtonCopytext() { return this.getToken(bitmarkParser.BitButtonCopytext, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_buttoncopytext; }
    // @Override
    enterRule(listener) {
        if (listener.enterButtoncopytext) {
            listener.enterButtoncopytext(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitButtoncopytext) {
            listener.exitButtoncopytext(this);
        }
    }
}
export class WbtcontinueContext extends ParserRuleContext {
    BitWbtContinue() { return this.getToken(bitmarkParser.BitWbtContinue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_wbtcontinue; }
    // @Override
    enterRule(listener) {
        if (listener.enterWbtcontinue) {
            listener.enterWbtcontinue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWbtcontinue) {
            listener.exitWbtcontinue(this);
        }
    }
}
export class LearningpathdetailsContext extends ParserRuleContext {
    BitLearningPathDetails() { return this.getToken(bitmarkParser.BitLearningPathDetails, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learningpathdetails; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearningpathdetails) {
            listener.enterLearningpathdetails(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearningpathdetails) {
            listener.exitLearningpathdetails(this);
        }
    }
}
export class PageContext extends ParserRuleContext {
    BitPage() { return this.getToken(bitmarkParser.BitPage, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_page; }
    // @Override
    enterRule(listener) {
        if (listener.enterPage) {
            listener.enterPage(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPage) {
            listener.exitPage(this);
        }
    }
}
export class NoteContext extends ParserRuleContext {
    BitNote() { return this.getToken(bitmarkParser.BitNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterNote) {
            listener.enterNote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNote) {
            listener.exitNote(this);
        }
    }
}
export class InfoContext extends ParserRuleContext {
    BitInfo() { return this.getToken(bitmarkParser.BitInfo, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_info; }
    // @Override
    enterRule(listener) {
        if (listener.enterInfo) {
            listener.enterInfo(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInfo) {
            listener.exitInfo(this);
        }
    }
}
export class WarningContext extends ParserRuleContext {
    BitWarning() { return this.getToken(bitmarkParser.BitWarning, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_warning; }
    // @Override
    enterRule(listener) {
        if (listener.enterWarning) {
            listener.enterWarning(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWarning) {
            listener.exitWarning(this);
        }
    }
}
export class RemarkContext extends ParserRuleContext {
    BitRemark() { return this.getToken(bitmarkParser.BitRemark, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_remark; }
    // @Override
    enterRule(listener) {
        if (listener.enterRemark) {
            listener.enterRemark(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRemark) {
            listener.exitRemark(this);
        }
    }
}
export class HelpContext extends ParserRuleContext {
    BitHelp() { return this.getToken(bitmarkParser.BitHelp, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_help; }
    // @Override
    enterRule(listener) {
        if (listener.enterHelp) {
            listener.enterHelp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHelp) {
            listener.exitHelp(this);
        }
    }
}
export class DangerContext extends ParserRuleContext {
    BitDanger() { return this.getToken(bitmarkParser.BitDanger, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_danger; }
    // @Override
    enterRule(listener) {
        if (listener.enterDanger) {
            listener.enterDanger(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDanger) {
            listener.exitDanger(this);
        }
    }
}
export class BugContext extends ParserRuleContext {
    BitBug() { return this.getToken(bitmarkParser.BitBug, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bug; }
    // @Override
    enterRule(listener) {
        if (listener.enterBug) {
            listener.enterBug(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBug) {
            listener.exitBug(this);
        }
    }
}
export class SidenoteContext extends ParserRuleContext {
    BitSidenote() { return this.getToken(bitmarkParser.BitSidenote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sidenote; }
    // @Override
    enterRule(listener) {
        if (listener.enterSidenote) {
            listener.enterSidenote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSidenote) {
            listener.exitSidenote(this);
        }
    }
}
export class StickynoteContext extends ParserRuleContext {
    BitStickynote() { return this.getToken(bitmarkParser.BitStickynote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stickynote; }
    // @Override
    enterRule(listener) {
        if (listener.enterStickynote) {
            listener.enterStickynote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStickynote) {
            listener.exitStickynote(this);
        }
    }
}
export class QuoteContext extends ParserRuleContext {
    BitQuote() { return this.getToken(bitmarkParser.BitQuote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_quote; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuote) {
            listener.enterQuote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuote) {
            listener.exitQuote(this);
        }
    }
}
export class FootnoteContext extends ParserRuleContext {
    BitFootnote() { return this.getToken(bitmarkParser.BitFootnote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_footnote; }
    // @Override
    enterRule(listener) {
        if (listener.enterFootnote) {
            listener.enterFootnote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFootnote) {
            listener.exitFootnote(this);
        }
    }
}
export class HintbitContext extends ParserRuleContext {
    BitHint() { return this.getToken(bitmarkParser.BitHint, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_hintbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterHintbit) {
            listener.enterHintbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHintbit) {
            listener.exitHintbit(this);
        }
    }
}
export class ExamplebitContext extends ParserRuleContext {
    BitExample() { return this.getToken(bitmarkParser.BitExample, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_examplebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterExamplebit) {
            listener.enterExamplebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExamplebit) {
            listener.exitExamplebit(this);
        }
    }
}
export class Vendor_padlet_embedContext extends ParserRuleContext {
    BitVendorPadletEmbed() { return this.getToken(bitmarkParser.BitVendorPadletEmbed, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_padlet_embed; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_padlet_embed) {
            listener.enterVendor_padlet_embed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_padlet_embed) {
            listener.exitVendor_padlet_embed(this);
        }
    }
}
export class ScormContext extends ParserRuleContext {
    BitScorm() { return this.getToken(bitmarkParser.BitScorm, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_scorm; }
    // @Override
    enterRule(listener) {
        if (listener.enterScorm) {
            listener.enterScorm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitScorm) {
            listener.exitScorm(this);
        }
    }
}
export class Bit_imageContext extends ParserRuleContext {
    BitImage() { return this.getToken(bitmarkParser.BitImage, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_image) {
            listener.enterBit_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_image) {
            listener.exitBit_image(this);
        }
    }
}
export class Bit_imageLinkContext extends ParserRuleContext {
    BitImageLink() { return this.getToken(bitmarkParser.BitImageLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageLink) {
            listener.enterBit_imageLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageLink) {
            listener.exitBit_imageLink(this);
        }
    }
}
export class Bit_imageZoomContext extends ParserRuleContext {
    BitImageZoom() { return this.getToken(bitmarkParser.BitImageZoom, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageZoom; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageZoom) {
            listener.enterBit_imageZoom(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageZoom) {
            listener.exitBit_imageZoom(this);
        }
    }
}
export class Bit_imagePrototypeContext extends ParserRuleContext {
    BitImagePrototype() { return this.getToken(bitmarkParser.BitImagePrototype, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imagePrototype; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imagePrototype) {
            listener.enterBit_imagePrototype(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imagePrototype) {
            listener.exitBit_imagePrototype(this);
        }
    }
}
export class Bit_imageSuperWideContext extends ParserRuleContext {
    BitImageSuperWide() { return this.getToken(bitmarkParser.BitImageSuperWide, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageSuperWide; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageSuperWide) {
            listener.enterBit_imageSuperWide(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageSuperWide) {
            listener.exitBit_imageSuperWide(this);
        }
    }
}
export class Bit_audioContext extends ParserRuleContext {
    BitAudio() { return this.getToken(bitmarkParser.BitAudio, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audio) {
            listener.enterBit_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audio) {
            listener.exitBit_audio(this);
        }
    }
}
export class Bit_audioLinkContext extends ParserRuleContext {
    BitAudioLink() { return this.getToken(bitmarkParser.BitAudioLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audioLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audioLink) {
            listener.enterBit_audioLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audioLink) {
            listener.exitBit_audioLink(this);
        }
    }
}
export class Bit_audioEmbedContext extends ParserRuleContext {
    BitAudioEmbed() { return this.getToken(bitmarkParser.BitAudioEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audioEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audioEmbed) {
            listener.enterBit_audioEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audioEmbed) {
            listener.exitBit_audioEmbed(this);
        }
    }
}
export class Bit_videoContext extends ParserRuleContext {
    BitVideo() { return this.getToken(bitmarkParser.BitVideo, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_video; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_video) {
            listener.enterBit_video(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_video) {
            listener.exitBit_video(this);
        }
    }
}
export class Bit_videoLinkContext extends ParserRuleContext {
    BitVideoLink() { return this.getToken(bitmarkParser.BitVideoLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoLink) {
            listener.enterBit_videoLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoLink) {
            listener.exitBit_videoLink(this);
        }
    }
}
export class Bit_videoEmbedContext extends ParserRuleContext {
    BitVideoEmbed() { return this.getToken(bitmarkParser.BitVideoEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoEmbed) {
            listener.enterBit_videoEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoEmbed) {
            listener.exitBit_videoEmbed(this);
        }
    }
}
export class Bit_videoPortraitContext extends ParserRuleContext {
    BitVideoPortrait() { return this.getToken(bitmarkParser.BitVideoPortrait, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoPortrait; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoPortrait) {
            listener.enterBit_videoPortrait(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoPortrait) {
            listener.exitBit_videoPortrait(this);
        }
    }
}
export class Bit_videoLandscapeContext extends ParserRuleContext {
    BitVideoLandscape() { return this.getToken(bitmarkParser.BitVideoLandscape, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoLandscape; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoLandscape) {
            listener.enterBit_videoLandscape(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoLandscape) {
            listener.exitBit_videoLandscape(this);
        }
    }
}
export class Bit_stillImageFilmContext extends ParserRuleContext {
    BitStillImageFilm() { return this.getToken(bitmarkParser.BitStillImageFilm, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilm; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilm) {
            listener.enterBit_stillImageFilm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilm) {
            listener.exitBit_stillImageFilm(this);
        }
    }
}
export class Bit_stillImageFilmLinkContext extends ParserRuleContext {
    BitStillImageFilmLink() { return this.getToken(bitmarkParser.BitStillImageFilmLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilmLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilmLink) {
            listener.enterBit_stillImageFilmLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilmLink) {
            listener.exitBit_stillImageFilmLink(this);
        }
    }
}
export class Bit_stillImageFilmEmbedContext extends ParserRuleContext {
    BitStillImageFilmEmbed() { return this.getToken(bitmarkParser.BitStillImageFilmEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilmEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilmEmbed) {
            listener.enterBit_stillImageFilmEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilmEmbed) {
            listener.exitBit_stillImageFilmEmbed(this);
        }
    }
}
export class Bit_websiteLinkContext extends ParserRuleContext {
    BitWebsiteLink() { return this.getToken(bitmarkParser.BitWebsiteLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_websiteLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_websiteLink) {
            listener.enterBit_websiteLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_websiteLink) {
            listener.exitBit_websiteLink(this);
        }
    }
}
export class Bit_documentContext extends ParserRuleContext {
    BitDocument() { return this.getToken(bitmarkParser.BitDocument, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_document; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_document) {
            listener.enterBit_document(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_document) {
            listener.exitBit_document(this);
        }
    }
}
export class Bit_documentLinkContext extends ParserRuleContext {
    BitDocumentLink() { return this.getToken(bitmarkParser.BitDocumentLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentLink) {
            listener.enterBit_documentLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentLink) {
            listener.exitBit_documentLink(this);
        }
    }
}
export class Bit_documentEmbedContext extends ParserRuleContext {
    BitDocumentEmbed() { return this.getToken(bitmarkParser.BitDocumentEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentEmbed) {
            listener.enterBit_documentEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentEmbed) {
            listener.exitBit_documentEmbed(this);
        }
    }
}
export class Bit_documentDownloadContext extends ParserRuleContext {
    BitDocumentDownload() { return this.getToken(bitmarkParser.BitDocumentDownload, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentDownload; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentDownload) {
            listener.enterBit_documentDownload(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentDownload) {
            listener.exitBit_documentDownload(this);
        }
    }
}
export class Bit_appLinkContext extends ParserRuleContext {
    BitAppLink() { return this.getToken(bitmarkParser.BitAppLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_appLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_appLink) {
            listener.enterBit_appLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_appLink) {
            listener.exitBit_appLink(this);
        }
    }
}
export class Bit_editorialContext extends ParserRuleContext {
    BitEditorial() { return this.getToken(bitmarkParser.BitEditorial, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_editorial; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_editorial) {
            listener.enterBit_editorial(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_editorial) {
            listener.exitBit_editorial(this);
        }
    }
}
export class Book_frontispieceContext extends ParserRuleContext {
    BitBookFrontispiece() { return this.getToken(bitmarkParser.BitBookFrontispiece, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_frontispiece; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_frontispiece) {
            listener.enterBook_frontispiece(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_frontispiece) {
            listener.exitBook_frontispiece(this);
        }
    }
}
export class Book_titleContext extends ParserRuleContext {
    BitBookTitle() { return this.getToken(bitmarkParser.BitBookTitle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_title; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_title) {
            listener.enterBook_title(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_title) {
            listener.exitBook_title(this);
        }
    }
}
export class Book_copyrightContext extends ParserRuleContext {
    BitBookCopyright() { return this.getToken(bitmarkParser.BitBookCopyright, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_copyright; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_copyright) {
            listener.enterBook_copyright(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_copyright) {
            listener.exitBook_copyright(this);
        }
    }
}
export class Book_dedicationContext extends ParserRuleContext {
    BitBookDedication() { return this.getToken(bitmarkParser.BitBookDedication, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_dedication; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_dedication) {
            listener.enterBook_dedication(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_dedication) {
            listener.exitBook_dedication(this);
        }
    }
}
export class Book_forwordContext extends ParserRuleContext {
    BitBookForword() { return this.getToken(bitmarkParser.BitBookForword, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_forword; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_forword) {
            listener.enterBook_forword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_forword) {
            listener.exitBook_forword(this);
        }
    }
}
export class Book_prefaceContext extends ParserRuleContext {
    BitBookPreface() { return this.getToken(bitmarkParser.BitBookPreface, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_preface; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_preface) {
            listener.enterBook_preface(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_preface) {
            listener.exitBook_preface(this);
        }
    }
}
export class Book_prologueContext extends ParserRuleContext {
    BitBookPrologue() { return this.getToken(bitmarkParser.BitBookPrologue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_prologue; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_prologue) {
            listener.enterBook_prologue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_prologue) {
            listener.exitBook_prologue(this);
        }
    }
}
export class Book_epilogueContext extends ParserRuleContext {
    BitBookEpilogue() { return this.getToken(bitmarkParser.BitBookEpilogue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_epilogue; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_epilogue) {
            listener.enterBook_epilogue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_epilogue) {
            listener.exitBook_epilogue(this);
        }
    }
}
export class Book_introductionContext extends ParserRuleContext {
    BitBookIntroduction() { return this.getToken(bitmarkParser.BitBookIntroduction, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_introduction; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_introduction) {
            listener.enterBook_introduction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_introduction) {
            listener.exitBook_introduction(this);
        }
    }
}
export class Book_inciting_incidentContext extends ParserRuleContext {
    BitBookIncitingIncident() { return this.getToken(bitmarkParser.BitBookIncitingIncident, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_inciting_incident; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_inciting_incident) {
            listener.enterBook_inciting_incident(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_inciting_incident) {
            listener.exitBook_inciting_incident(this);
        }
    }
}
export class Book_conclusionContext extends ParserRuleContext {
    BitBookConclusion() { return this.getToken(bitmarkParser.BitBookConclusion, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_conclusion; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_conclusion) {
            listener.enterBook_conclusion(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_conclusion) {
            listener.exitBook_conclusion(this);
        }
    }
}
export class Book_afterwordContext extends ParserRuleContext {
    BitBookAfterword() { return this.getToken(bitmarkParser.BitBookAfterword, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_afterword; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_afterword) {
            listener.enterBook_afterword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_afterword) {
            listener.exitBook_afterword(this);
        }
    }
}
export class Book_postscriptContext extends ParserRuleContext {
    BitBookPostscript() { return this.getToken(bitmarkParser.BitBookPostscript, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_postscript; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_postscript) {
            listener.enterBook_postscript(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_postscript) {
            listener.exitBook_postscript(this);
        }
    }
}
export class Book_appendixContext extends ParserRuleContext {
    BitBookappendix() { return this.getToken(bitmarkParser.BitBookappendix, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_appendix; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_appendix) {
            listener.enterBook_appendix(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_appendix) {
            listener.exitBook_appendix(this);
        }
    }
}
export class Book_addendumContext extends ParserRuleContext {
    BitBookAddendum() { return this.getToken(bitmarkParser.BitBookAddendum, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_addendum; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_addendum) {
            listener.enterBook_addendum(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_addendum) {
            listener.exitBook_addendum(this);
        }
    }
}
export class Book_acknowledgmentsContext extends ParserRuleContext {
    BitBookAcknowledgments() { return this.getToken(bitmarkParser.BitBookAcknowledgments, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_acknowledgments; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_acknowledgments) {
            listener.enterBook_acknowledgments(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_acknowledgments) {
            listener.exitBook_acknowledgments(this);
        }
    }
}
export class Book_list_of_contributorsContext extends ParserRuleContext {
    BitBookListOfContributors() { return this.getToken(bitmarkParser.BitBookListOfContributors, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_list_of_contributors; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_list_of_contributors) {
            listener.enterBook_list_of_contributors(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_list_of_contributors) {
            listener.exitBook_list_of_contributors(this);
        }
    }
}
export class Book_bibliographyContext extends ParserRuleContext {
    BitBookBibliography() { return this.getToken(bitmarkParser.BitBookBibliography, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_bibliography; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_bibliography) {
            listener.enterBook_bibliography(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_bibliography) {
            listener.exitBook_bibliography(this);
        }
    }
}
export class Book_reference_listContext extends ParserRuleContext {
    BitBookReferenceList() { return this.getToken(bitmarkParser.BitBookReferenceList, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_reference_list; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_reference_list) {
            listener.enterBook_reference_list(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_reference_list) {
            listener.exitBook_reference_list(this);
        }
    }
}
export class Book_endnotesContext extends ParserRuleContext {
    BitBookEndnotes() { return this.getToken(bitmarkParser.BitBookEndnotes, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_endnotes; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_endnotes) {
            listener.enterBook_endnotes(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_endnotes) {
            listener.exitBook_endnotes(this);
        }
    }
}
export class Book_notesContext extends ParserRuleContext {
    BitBookNotes() { return this.getToken(bitmarkParser.BitBookNotes, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_notes; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_notes) {
            listener.enterBook_notes(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_notes) {
            listener.exitBook_notes(this);
        }
    }
}
export class Book_copyright_permissionsContext extends ParserRuleContext {
    BitBookCopyrightPermissions() { return this.getToken(bitmarkParser.BitBookCopyrightPermissions, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_copyright_permissions; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_copyright_permissions) {
            listener.enterBook_copyright_permissions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_copyright_permissions) {
            listener.exitBook_copyright_permissions(this);
        }
    }
}
export class Book_teaserContext extends ParserRuleContext {
    BitBookTeaser() { return this.getToken(bitmarkParser.BitBookTeaser, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_teaser; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_teaser) {
            listener.enterBook_teaser(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_teaser) {
            listener.exitBook_teaser(this);
        }
    }
}
export class Book_auther_bioContext extends ParserRuleContext {
    BitBookAutherBio() { return this.getToken(bitmarkParser.BitBookAutherBio, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_auther_bio; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_auther_bio) {
            listener.enterBook_auther_bio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_auther_bio) {
            listener.exitBook_auther_bio(this);
        }
    }
}
export class Book_request_for_a_book_reviewContext extends ParserRuleContext {
    BitBookRequestForABookReview() { return this.getToken(bitmarkParser.BitBookRequestForABookReview, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_request_for_a_book_review; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_request_for_a_book_review) {
            listener.enterBook_request_for_a_book_review(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_request_for_a_book_review) {
            listener.exitBook_request_for_a_book_review(this);
        }
    }
}
export class Book_coming_soonContext extends ParserRuleContext {
    BitBookComingSoon() { return this.getToken(bitmarkParser.BitBookComingSoon, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_coming_soon; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_coming_soon) {
            listener.enterBook_coming_soon(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_coming_soon) {
            listener.exitBook_coming_soon(this);
        }
    }
}
export class Book_read_moreContext extends ParserRuleContext {
    BitBookReadMore() { return this.getToken(bitmarkParser.BitBookReadMore, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_read_more; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_read_more) {
            listener.enterBook_read_more(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_read_more) {
            listener.exitBook_read_more(this);
        }
    }
}
export class Book_summaryContext extends ParserRuleContext {
    BitBookSummary() { return this.getToken(bitmarkParser.BitBookSummary, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_summary; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_summary) {
            listener.enterBook_summary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_summary) {
            listener.exitBook_summary(this);
        }
    }
}
export class Book_epigraphContext extends ParserRuleContext {
    BitBookEpigraph() { return this.getToken(bitmarkParser.BitBookEpigraph, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_epigraph; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_epigraph) {
            listener.enterBook_epigraph(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_epigraph) {
            listener.exitBook_epigraph(this);
        }
    }
}
export class CodeContext extends ParserRuleContext {
    BitCode() { return this.getToken(bitmarkParser.BitCode, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_code; }
    // @Override
    enterRule(listener) {
        if (listener.enterCode) {
            listener.enterCode(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCode) {
            listener.exitCode(this);
        }
    }
}
export class Card1Context extends ParserRuleContext {
    BitCard1() { return this.getToken(bitmarkParser.BitCard1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_card1; }
    // @Override
    enterRule(listener) {
        if (listener.enterCard1) {
            listener.enterCard1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCard1) {
            listener.exitCard1(this);
        }
    }
}
export class Question1Context extends ParserRuleContext {
    BitQuestion1() { return this.getToken(bitmarkParser.BitQuestion1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_question1; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuestion1) {
            listener.enterQuestion1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuestion1) {
            listener.exitQuestion1(this);
        }
    }
}
export class ScreenshotContext extends ParserRuleContext {
    BitScreenshot() { return this.getToken(bitmarkParser.BitScreenshot, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_screenshot; }
    // @Override
    enterRule(listener) {
        if (listener.enterScreenshot) {
            listener.enterScreenshot(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitScreenshot) {
            listener.exitScreenshot(this);
        }
    }
}
export class Focus_imageContext extends ParserRuleContext {
    BitFocusImage() { return this.getToken(bitmarkParser.BitFocusImage, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_focus_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterFocus_image) {
            listener.enterFocus_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFocus_image) {
            listener.exitFocus_image(this);
        }
    }
}
export class PhotoContext extends ParserRuleContext {
    BitPhoto() { return this.getToken(bitmarkParser.BitPhoto, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_photo; }
    // @Override
    enterRule(listener) {
        if (listener.enterPhoto) {
            listener.enterPhoto(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPhoto) {
            listener.exitPhoto(this);
        }
    }
}
export class Browser_imageContext extends ParserRuleContext {
    BitBrowserImage() { return this.getToken(bitmarkParser.BitBrowserImage, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_browser_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterBrowser_image) {
            listener.enterBrowser_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBrowser_image) {
            listener.exitBrowser_image(this);
        }
    }
}
export class Chapter_subject_matterContext extends ParserRuleContext {
    BitChapterSubjectMatter() { return this.getToken(bitmarkParser.BitChapterSubjectMatter, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_chapter_subject_matter; }
    // @Override
    enterRule(listener) {
        if (listener.enterChapter_subject_matter) {
            listener.enterChapter_subject_matter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChapter_subject_matter) {
            listener.exitChapter_subject_matter(this);
        }
    }
}
export class Release_noteContext extends ParserRuleContext {
    BitReleaseNote() { return this.getToken(bitmarkParser.BitReleaseNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_release_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterRelease_note) {
            listener.enterRelease_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRelease_note) {
            listener.exitRelease_note(this);
        }
    }
}
export class ConclusionContext extends ParserRuleContext {
    BitConclusion() { return this.getToken(bitmarkParser.BitConclusion, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_conclusion; }
    // @Override
    enterRule(listener) {
        if (listener.enterConclusion) {
            listener.enterConclusion(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConclusion) {
            listener.exitConclusion(this);
        }
    }
}
export class FeaturedContext extends ParserRuleContext {
    BitFeatured() { return this.getToken(bitmarkParser.BitFeatured, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_featured; }
    // @Override
    enterRule(listener) {
        if (listener.enterFeatured) {
            listener.enterFeatured(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFeatured) {
            listener.exitFeatured(this);
        }
    }
}
export class Vendor_amcharts_5_chartContext extends ParserRuleContext {
    BitVendorAmcharts5Chart() { return this.getToken(bitmarkParser.BitVendorAmcharts5Chart, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_amcharts_5_chart; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_amcharts_5_chart) {
            listener.enterVendor_amcharts_5_chart(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_amcharts_5_chart) {
            listener.exitVendor_amcharts_5_chart(this);
        }
    }
}
export class Newspaper_articleContext extends ParserRuleContext {
    BitNewspaperArticle() { return this.getToken(bitmarkParser.BitNewspaperArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_newspaper_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterNewspaper_article) {
            listener.enterNewspaper_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNewspaper_article) {
            listener.exitNewspaper_article(this);
        }
    }
}
export class Blog_articleContext extends ParserRuleContext {
    BitBlogArticle() { return this.getToken(bitmarkParser.BitBlogArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_blog_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterBlog_article) {
            listener.enterBlog_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBlog_article) {
            listener.exitBlog_article(this);
        }
    }
}
export class Book_articleContext extends ParserRuleContext {
    BitBookArticle() { return this.getToken(bitmarkParser.BitBookArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_article) {
            listener.enterBook_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_article) {
            listener.exitBook_article(this);
        }
    }
}
export class Notebook_articleContext extends ParserRuleContext {
    BitNotebookArticle() { return this.getToken(bitmarkParser.BitNotebookArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_notebook_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterNotebook_article) {
            listener.enterNotebook_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNotebook_article) {
            listener.exitNotebook_article(this);
        }
    }
}
export class Workbook_articleContext extends ParserRuleContext {
    BitWorkbookArticle() { return this.getToken(bitmarkParser.BitWorkbookArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_workbook_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterWorkbook_article) {
            listener.enterWorkbook_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWorkbook_article) {
            listener.exitWorkbook_article(this);
        }
    }
}
export class MessageContext extends ParserRuleContext {
    BitMessage() { return this.getToken(bitmarkParser.BitMessage, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_message; }
    // @Override
    enterRule(listener) {
        if (listener.enterMessage) {
            listener.enterMessage(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMessage) {
            listener.exitMessage(this);
        }
    }
}
export class Bot_interviewContext extends ParserRuleContext {
    BitBotint() { return this.getToken(bitmarkParser.BitBotint, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    bot_choice(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_choiceContext);
        }
        else {
            return this.getRuleContext(i, Bot_choiceContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    sspl(i) {
        if (i === undefined) {
            return this.getRuleContexts(SsplContext);
        }
        else {
            return this.getRuleContext(i, SsplContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_interview; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_interview) {
            listener.enterBot_interview(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_interview) {
            listener.exitBot_interview(this);
        }
    }
}
export class Bot_choiceContext extends ParserRuleContext {
    words(i) {
        if (i === undefined) {
            return this.getRuleContexts(WordsContext);
        }
        else {
            return this.getRuleContext(i, WordsContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    audiobit(i) {
        if (i === undefined) {
            return this.getRuleContexts(AudiobitContext);
        }
        else {
            return this.getRuleContext(i, AudiobitContext);
        }
    }
    gap(i) {
        if (i === undefined) {
            return this.getRuleContexts(GapContext);
        }
        else {
            return this.getRuleContext(i, GapContext);
        }
    }
    choice_plus(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_plusContext);
        }
        else {
            return this.getRuleContext(i, Choice_plusContext);
        }
    }
    choice_minus(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_minusContext);
        }
        else {
            return this.getRuleContext(i, Choice_minusContext);
        }
    }
    choice_star(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_starContext);
        }
        else {
            return this.getRuleContext(i, Choice_starContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_choice; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_choice) {
            listener.enterBot_choice(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_choice) {
            listener.exitBot_choice(this);
        }
    }
}
export class RatingContext extends ParserRuleContext {
    BitRating() { return this.getToken(bitmarkParser.BitRating, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_rating; }
    // @Override
    enterRule(listener) {
        if (listener.enterRating) {
            listener.enterRating(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRating) {
            listener.exitRating(this);
        }
    }
}
export class Bullet_itemContext extends ParserRuleContext {
    OPBUL() { return this.getToken(bitmarkParser.OPBUL, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    atpoint() {
        return this.tryGetRuleContext(0, AtpointContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bullet_item; }
    // @Override
    enterRule(listener) {
        if (listener.enterBullet_item) {
            listener.enterBullet_item(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBullet_item) {
            listener.exitBullet_item(this);
        }
    }
}
export class SurveyContext extends ParserRuleContext {
    BitSurvey() { return this.getToken(bitmarkParser.BitSurvey, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey) {
            listener.enterSurvey(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey) {
            listener.exitSurvey(this);
        }
    }
}
export class Survey_1Context extends ParserRuleContext {
    BitSurvey1() { return this.getToken(bitmarkParser.BitSurvey1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_1; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_1) {
            listener.enterSurvey_1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_1) {
            listener.exitSurvey_1(this);
        }
    }
}
export class Survey_anonymousContext extends ParserRuleContext {
    BitSurveyanon() { return this.getToken(bitmarkParser.BitSurveyanon, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_anonymous; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_anonymous) {
            listener.enterSurvey_anonymous(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_anonymous) {
            listener.exitSurvey_anonymous(this);
        }
    }
}
export class Survey_anonymous_1Context extends ParserRuleContext {
    BitSurveyanon1() { return this.getToken(bitmarkParser.BitSurveyanon1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_anonymous_1; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_anonymous_1) {
            listener.enterSurvey_anonymous_1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_anonymous_1) {
            listener.exitSurvey_anonymous_1(this);
        }
    }
}
export class Self_assessmentContext extends ParserRuleContext {
    BitSelfassess() { return this.getToken(bitmarkParser.BitSelfassess, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    self_assess_s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(Self_assess_s_and_wContext);
        }
        else {
            return this.getRuleContext(i, Self_assess_s_and_wContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_self_assessment; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelf_assessment) {
            listener.enterSelf_assessment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelf_assessment) {
            listener.exitSelf_assessment(this);
        }
    }
}
export class Self_assess_s_and_wContext extends ParserRuleContext {
    OPBUL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPBUL);
        }
        else {
            return this.getToken(bitmarkParser.OPBUL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_self_assess_s_and_w; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelf_assess_s_and_w) {
            listener.enterSelf_assess_s_and_w(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelf_assess_s_and_w) {
            listener.exitSelf_assess_s_and_w(this);
        }
    }
}
export class AtpointContext extends ParserRuleContext {
    AtPoints() { return this.getToken(bitmarkParser.AtPoints, 0); }
    NUMERIC() { return this.getToken(bitmarkParser.NUMERIC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atpoint; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtpoint) {
            listener.enterAtpoint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtpoint) {
            listener.exitAtpoint(this);
        }
    }
}
export class FormatContext extends ParserRuleContext {
    resource_format(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_formatContext);
        }
        else {
            return this.getRuleContext(i, Resource_formatContext);
        }
    }
    ColonText(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.ColonText);
        }
        else {
            return this.getToken(bitmarkParser.ColonText, i);
        }
    }
    ColonJson(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.ColonJson);
        }
        else {
            return this.getToken(bitmarkParser.ColonJson, i);
        }
    }
    resource_format_extra(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_format_extraContext);
        }
        else {
            return this.getRuleContext(i, Resource_format_extraContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormat) {
            listener.enterFormat(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormat) {
            listener.exitFormat(this);
        }
    }
}
export class Resource_formatContext extends ParserRuleContext {
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    Prosemirror() { return this.tryGetToken(bitmarkParser.Prosemirror, 0); }
    Placeholder() { return this.tryGetToken(bitmarkParser.Placeholder, 0); }
    ColonJson() { return this.tryGetToken(bitmarkParser.ColonJson, 0); }
    AmpArticle() { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
    AmpDocument() { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
    AmpWebsite() { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
    AmpStillImageFilm() { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
    AmpAudioLink() { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
    AmpImageLink() { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
    AmpVideoLink() { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
    AmpArticleLink() { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
    AmpDocumentLink() { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
    AmpAppLink() { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
    AmpWebsiteLink() { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
    AmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
    AmpVideoEmbed() { return this.tryGetToken(bitmarkParser.AmpVideoEmbed, 0); }
    AmpAudioEmbed() { return this.tryGetToken(bitmarkParser.AmpAudioEmbed, 0); }
    AmpDocumentEmbed() { return this.tryGetToken(bitmarkParser.AmpDocumentEmbed, 0); }
    AmpStillImageFilmEmbed() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmEmbed, 0); }
    AmpDocumentDownload() { return this.tryGetToken(bitmarkParser.AmpDocumentDownload, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_format) {
            listener.enterResource_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_format) {
            listener.exitResource_format(this);
        }
    }
}
export class Resource_format_extraContext extends ParserRuleContext {
    image_format() {
        return this.tryGetRuleContext(0, Image_formatContext);
    }
    audio_format() {
        return this.tryGetRuleContext(0, Audio_formatContext);
    }
    video_format() {
        return this.tryGetRuleContext(0, Video_formatContext);
    }
    article_format() {
        return this.tryGetRuleContext(0, Article_formatContext);
    }
    document_format() {
        return this.tryGetRuleContext(0, Document_formatContext);
    }
    app_format() {
        return this.tryGetRuleContext(0, App_formatContext);
    }
    website_format() {
        return this.tryGetRuleContext(0, Website_formatContext);
    }
    stillimagefilm_format() {
        return this.tryGetRuleContext(0, Stillimagefilm_formatContext);
    }
    AmpPdf() { return this.tryGetToken(bitmarkParser.AmpPdf, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_format_extra; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_format_extra) {
            listener.enterResource_format_extra(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_format_extra) {
            listener.exitResource_format_extra(this);
        }
    }
}
export class Format2Context extends ParserRuleContext {
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    ColonText() { return this.tryGetToken(bitmarkParser.ColonText, 0); }
    ColonJson() { return this.tryGetToken(bitmarkParser.ColonJson, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_format2; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormat2) {
            listener.enterFormat2(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormat2) {
            listener.exitFormat2(this);
        }
    }
}
export class Image_formatContext extends ParserRuleContext {
    AmpImage() { return this.tryGetToken(bitmarkParser.AmpImage, 0); }
    Image_type() { return this.tryGetToken(bitmarkParser.Image_type, 0); }
    DotArticleAtt() { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
    AmpImageLink() { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
    AmpImageZoom() { return this.tryGetToken(bitmarkParser.AmpImageZoom, 0); }
    AmpImageWAudio() { return this.tryGetToken(bitmarkParser.AmpImageWAudio, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_format) {
            listener.enterImage_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_format) {
            listener.exitImage_format(this);
        }
    }
}
export class Video_formatContext extends ParserRuleContext {
    AmpVideo() { return this.tryGetToken(bitmarkParser.AmpVideo, 0); }
    AmpVideoLink() { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
    AmpVideoEmbed() { return this.tryGetToken(bitmarkParser.AmpVideoEmbed, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Video_type() { return this.tryGetToken(bitmarkParser.Video_type, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_format) {
            listener.enterVideo_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_format) {
            listener.exitVideo_format(this);
        }
    }
}
export class Article_formatContext extends ParserRuleContext {
    AmpArticle() { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
    AmpArticleLink() { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_article_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticle_format) {
            listener.enterArticle_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticle_format) {
            listener.exitArticle_format(this);
        }
    }
}
export class Document_formatContext extends ParserRuleContext {
    AmpDocument() { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
    AmpDocumentLink() { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
    AmpDocumentDownload() { return this.tryGetToken(bitmarkParser.AmpDocumentDownload, 0); }
    AmpDocumentEmbed() { return this.tryGetToken(bitmarkParser.AmpDocumentEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_document_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterDocument_format) {
            listener.enterDocument_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDocument_format) {
            listener.exitDocument_format(this);
        }
    }
}
export class App_formatContext extends ParserRuleContext {
    AmpApp() { return this.tryGetToken(bitmarkParser.AmpApp, 0); }
    AmpAppLink() { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_format) {
            listener.enterApp_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_format) {
            listener.exitApp_format(this);
        }
    }
}
export class Website_formatContext extends ParserRuleContext {
    AmpWebsite() { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
    AmpWebsiteLink() { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_website_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterWebsite_format) {
            listener.enterWebsite_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWebsite_format) {
            listener.exitWebsite_format(this);
        }
    }
}
export class Stillimagefilm_formatContext extends ParserRuleContext {
    AmpStillImageFilm() { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
    AmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
    AmpStillImageFilmEmbed() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimagefilm_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimagefilm_format) {
            listener.enterStillimagefilm_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimagefilm_format) {
            listener.exitStillimagefilm_format(this);
        }
    }
}
export class Op_article_formatContext extends ParserRuleContext {
    OpAmpArticleLink() { return this.tryGetToken(bitmarkParser.OpAmpArticleLink, 0); }
    OpAmpArticle() { return this.tryGetToken(bitmarkParser.OpAmpArticle, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_article_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_article_format) {
            listener.enterOp_article_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_article_format) {
            listener.exitOp_article_format(this);
        }
    }
}
export class Op_document_formatContext extends ParserRuleContext {
    OpAmpDocumentLink() { return this.tryGetToken(bitmarkParser.OpAmpDocumentLink, 0); }
    OpAmpDocument() { return this.tryGetToken(bitmarkParser.OpAmpDocument, 0); }
    OpAmpDocumentDownload() { return this.tryGetToken(bitmarkParser.OpAmpDocumentDownload, 0); }
    OpAmpDocumentEmbed() { return this.tryGetToken(bitmarkParser.OpAmpDocumentEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_document_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_document_format) {
            listener.enterOp_document_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_document_format) {
            listener.exitOp_document_format(this);
        }
    }
}
export class Op_app_formatContext extends ParserRuleContext {
    OpAmpApp() { return this.tryGetToken(bitmarkParser.OpAmpApp, 0); }
    OpAmpAppLink() { return this.tryGetToken(bitmarkParser.OpAmpAppLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_app_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_app_format) {
            listener.enterOp_app_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_app_format) {
            listener.exitOp_app_format(this);
        }
    }
}
export class Op_website_formatContext extends ParserRuleContext {
    OpAmpWebsite() { return this.tryGetToken(bitmarkParser.OpAmpWebsite, 0); }
    OpAmpWebsiteLink() { return this.tryGetToken(bitmarkParser.OpAmpWebsiteLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_website_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_website_format) {
            listener.enterOp_website_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_website_format) {
            listener.exitOp_website_format(this);
        }
    }
}
export class Op_video_formatContext extends ParserRuleContext {
    OpAmpVideo() { return this.tryGetToken(bitmarkParser.OpAmpVideo, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Video_type() { return this.tryGetToken(bitmarkParser.Video_type, 0); }
    OpAmpVideoLink() { return this.tryGetToken(bitmarkParser.OpAmpVideoLink, 0); }
    OpAmpVideoEmbed() { return this.tryGetToken(bitmarkParser.OpAmpVideoEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_video_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_video_format) {
            listener.enterOp_video_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_video_format) {
            listener.exitOp_video_format(this);
        }
    }
}
export class Op_stillimagefilm_formatContext extends ParserRuleContext {
    OpAmpStillImageFilm() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilm, 0); }
    OpAmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmLink, 0); }
    OpAmpStillImageFilmEmbed() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_stillimagefilm_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_stillimagefilm_format) {
            listener.enterOp_stillimagefilm_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_stillimagefilm_format) {
            listener.exitOp_stillimagefilm_format(this);
        }
    }
}
export class ArticlebitContext extends ParserRuleContext {
    op_article_format() {
        return this.tryGetRuleContext(0, Op_article_formatContext);
    }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    ArticleText() { return this.tryGetToken(bitmarkParser.ArticleText, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_articlebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticlebit) {
            listener.enterArticlebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticlebit) {
            listener.exitArticlebit(this);
        }
    }
}
export class DocumentbitContext extends ParserRuleContext {
    op_document_format() {
        return this.getRuleContext(0, Op_document_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_documentbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterDocumentbit) {
            listener.enterDocumentbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDocumentbit) {
            listener.exitDocumentbit(this);
        }
    }
}
export class WebsitebitContext extends ParserRuleContext {
    op_website_format() {
        return this.getRuleContext(0, Op_website_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_websitebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterWebsitebit) {
            listener.enterWebsitebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWebsitebit) {
            listener.exitWebsitebit(this);
        }
    }
}
export class AppbitContext extends ParserRuleContext {
    op_app_format() {
        return this.getRuleContext(0, Op_app_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    telephone() {
        return this.tryGetRuleContext(0, TelephoneContext);
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_appbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterAppbit) {
            listener.enterAppbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAppbit) {
            listener.exitAppbit(this);
        }
    }
}
export class StillimagefilmbitContext extends ParserRuleContext {
    stillimg_one() {
        return this.getRuleContext(0, Stillimg_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimagefilmbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimagefilmbit) {
            listener.enterStillimagefilmbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimagefilmbit) {
            listener.exitStillimagefilmbit(this);
        }
    }
}
export class Stillimg_oneContext extends ParserRuleContext {
    op_stillimagefilm_format() {
        return this.getRuleContext(0, Op_stillimagefilm_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimg_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimg_one) {
            listener.enterStillimg_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimg_one) {
            listener.exitStillimg_one(this);
        }
    }
}
export class VideobitContext extends ParserRuleContext {
    video_one() {
        return this.getRuleContext(0, Video_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_videobit; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideobit) {
            listener.enterVideobit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideobit) {
            listener.exitVideobit(this);
        }
    }
}
export class Video_oneContext extends ParserRuleContext {
    op_video_format() {
        return this.getRuleContext(0, Op_video_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_one) {
            listener.enterVideo_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_one) {
            listener.exitVideo_one(this);
        }
    }
}
export class ImagebitContext extends ParserRuleContext {
    image_one() {
        return this.getRuleContext(0, Image_oneContext);
    }
    image_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Image_chainedContext);
        }
        else {
            return this.getRuleContext(i, Image_chainedContext);
        }
    }
    NL() { return this.tryGetToken(bitmarkParser.NL, 0); }
    ShowInIndex() { return this.tryGetToken(bitmarkParser.ShowInIndex, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_imagebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterImagebit) {
            listener.enterImagebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImagebit) {
            listener.exitImagebit(this);
        }
    }
}
export class Image_oneContext extends ParserRuleContext {
    op_image_format() {
        return this.getRuleContext(0, Op_image_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_one) {
            listener.enterImage_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_one) {
            listener.exitImage_one(this);
        }
    }
}
export class Op_image_formatContext extends ParserRuleContext {
    OpAmpImage() { return this.tryGetToken(bitmarkParser.OpAmpImage, 0); }
    Image_type() { return this.tryGetToken(bitmarkParser.Image_type, 0); }
    DotArticleAtt() { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
    OpAmpImageLink() { return this.tryGetToken(bitmarkParser.OpAmpImageLink, 0); }
    OpAmpImageZoom() { return this.tryGetToken(bitmarkParser.OpAmpImageZoom, 0); }
    OpAmpImageWAudio() { return this.tryGetToken(bitmarkParser.OpAmpImageWAudio, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_image_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_image_format) {
            listener.enterOp_image_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_image_format) {
            listener.exitOp_image_format(this);
        }
    }
}
export class Image_chainedContext extends ParserRuleContext {
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_chained) {
            listener.enterImage_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_chained) {
            listener.exitImage_chained(this);
        }
    }
}
export class Image_chained4matchContext extends ParserRuleContext {
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_chained4match; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_chained4match) {
            listener.enterImage_chained4match(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_chained4match) {
            listener.exitImage_chained4match(this);
        }
    }
}
export class AudiobitContext extends ParserRuleContext {
    audio_one() {
        return this.getRuleContext(0, Audio_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audiobit; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudiobit) {
            listener.enterAudiobit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudiobit) {
            listener.exitAudiobit(this);
        }
    }
}
export class Audio_oneContext extends ParserRuleContext {
    op_audio_format() {
        return this.getRuleContext(0, Op_audio_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audio_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudio_one) {
            listener.enterAudio_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudio_one) {
            listener.exitAudio_one(this);
        }
    }
}
export class Audio_formatContext extends ParserRuleContext {
    AmpAudio() { return this.tryGetToken(bitmarkParser.AmpAudio, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Audio_type() { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
    AmpAudioLink() { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audio_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudio_format) {
            listener.enterAudio_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudio_format) {
            listener.exitAudio_format(this);
        }
    }
}
export class Op_audio_formatContext extends ParserRuleContext {
    OpAmpAudio() { return this.tryGetToken(bitmarkParser.OpAmpAudio, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Audio_type() { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
    OpAmpAudioLink() { return this.tryGetToken(bitmarkParser.OpAmpAudioLink, 0); }
    OpAmpAudioEmbed() { return this.tryGetToken(bitmarkParser.OpAmpAudioEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_audio_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_audio_format) {
            listener.enterOp_audio_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_audio_format) {
            listener.exitOp_audio_format(this);
        }
    }
}
export class Resource_chainedContext extends ParserRuleContext {
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    OPA() { return this.tryGetToken(bitmarkParser.OPA, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_chained) {
            listener.enterResource_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_chained) {
            listener.exitResource_chained(this);
        }
    }
}
export class TelephoneContext extends ParserRuleContext {
    TEL() { return this.getToken(bitmarkParser.TEL, 0); }
    PLUS() { return this.getToken(bitmarkParser.PLUS, 0); }
    NUMERIC() { return this.getToken(bitmarkParser.NUMERIC, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_telephone; }
    // @Override
    enterRule(listener) {
        if (listener.enterTelephone) {
            listener.enterTelephone(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTelephone) {
            listener.exitTelephone(this);
        }
    }
}
export class UrlContext extends ParserRuleContext {
    URL() { return this.getToken(bitmarkParser.URL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_url; }
    // @Override
    enterRule(listener) {
        if (listener.enterUrl) {
            listener.enterUrl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUrl) {
            listener.exitUrl(this);
        }
    }
}
export class ItemContext extends ParserRuleContext {
    OPC() { return this.getToken(bitmarkParser.OPC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    lead() {
        return this.tryGetRuleContext(0, LeadContext);
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    words(i) {
        if (i === undefined) {
            return this.getRuleContexts(WordsContext);
        }
        else {
            return this.getRuleContext(i, WordsContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_item; }
    // @Override
    enterRule(listener) {
        if (listener.enterItem) {
            listener.enterItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitItem) {
            listener.exitItem(this);
        }
    }
}
export class LeadContext extends ParserRuleContext {
    OPC() { return this.getToken(bitmarkParser.OPC, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    words(i) {
        if (i === undefined) {
            return this.getRuleContexts(WordsContext);
        }
        else {
            return this.getRuleContext(i, WordsContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lead; }
    // @Override
    enterRule(listener) {
        if (listener.enterLead) {
            listener.enterLead(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLead) {
            listener.exitLead(this);
        }
    }
}
export class AnglerefContext extends ParserRuleContext {
    OPRANGLES() { return this.tryGetToken(bitmarkParser.OPRANGLES, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    OPRANGLEL() { return this.tryGetToken(bitmarkParser.OPRANGLEL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_angleref; }
    // @Override
    enterRule(listener) {
        if (listener.enterAngleref) {
            listener.enterAngleref(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAngleref) {
            listener.exitAngleref(this);
        }
    }
}
export class ExampleContext extends ParserRuleContext {
    AtExamplecl() { return this.tryGetToken(bitmarkParser.AtExamplecl, 0); }
    AtExampleWithStr() { return this.tryGetToken(bitmarkParser.AtExampleWithStr, 0); }
    AtExamplecol() { return this.tryGetToken(bitmarkParser.AtExamplecol, 0); }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    SENTENCE() { return this.tryGetToken(bitmarkParser.SENTENCE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_example; }
    // @Override
    enterRule(listener) {
        if (listener.enterExample) {
            listener.enterExample(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExample) {
            listener.exitExample(this);
        }
    }
}
export class Bracketed_textContext extends ParserRuleContext {
    BracEnclose() { return this.getToken(bitmarkParser.BracEnclose, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bracketed_text; }
    // @Override
    enterRule(listener) {
        if (listener.enterBracketed_text) {
            listener.enterBracketed_text(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBracketed_text) {
            listener.exitBracketed_text(this);
        }
    }
}
export class ReferenceContext extends ParserRuleContext {
    AtReference() { return this.getToken(bitmarkParser.AtReference, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    URL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.URL);
        }
        else {
            return this.getToken(bitmarkParser.URL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_reference; }
    // @Override
    enterRule(listener) {
        if (listener.enterReference) {
            listener.enterReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReference) {
            listener.exitReference(this);
        }
    }
}
export class ProgressContext extends ParserRuleContext {
    AtProgress() { return this.getToken(bitmarkParser.AtProgress, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_progress; }
    // @Override
    enterRule(listener) {
        if (listener.enterProgress) {
            listener.enterProgress(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProgress) {
            listener.exitProgress(this);
        }
    }
}
export class DatepropContext extends ParserRuleContext {
    AtDate() { return this.getToken(bitmarkParser.AtDate, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    dateprop_chained() {
        return this.tryGetRuleContext(0, Dateprop_chainedContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dateprop; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateprop) {
            listener.enterDateprop(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateprop) {
            listener.exitDateprop(this);
        }
    }
}
export class Dateprop_chainedContext extends ParserRuleContext {
    AtDate() { return this.getToken(bitmarkParser.AtDate, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dateprop_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateprop_chained) {
            listener.enterDateprop_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateprop_chained) {
            listener.exitDateprop_chained(this);
        }
    }
}
export class InstructionContext extends ParserRuleContext {
    OPB() { return this.getToken(bitmarkParser.OPB, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_instruction; }
    // @Override
    enterRule(listener) {
        if (listener.enterInstruction) {
            listener.enterInstruction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInstruction) {
            listener.exitInstruction(this);
        }
    }
}
export class HintContext extends ParserRuleContext {
    OPQ() { return this.getToken(bitmarkParser.OPQ, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_hint; }
    // @Override
    enterRule(listener) {
        if (listener.enterHint) {
            listener.enterHint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHint) {
            listener.exitHint(this);
        }
    }
}
export class TitleContext extends ParserRuleContext {
    OPHASH() { return this.getToken(bitmarkParser.OPHASH, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_title; }
    // @Override
    enterRule(listener) {
        if (listener.enterTitle) {
            listener.enterTitle(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTitle) {
            listener.exitTitle(this);
        }
    }
}
export class Bool_labelContext extends ParserRuleContext {
    AtLabeltrue() { return this.tryGetToken(bitmarkParser.AtLabeltrue, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    AtLabelfalse() { return this.tryGetToken(bitmarkParser.AtLabelfalse, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bool_label; }
    // @Override
    enterRule(listener) {
        if (listener.enterBool_label) {
            listener.enterBool_label(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBool_label) {
            listener.exitBool_label(this);
        }
    }
}
export class Progress_pointsContext extends ParserRuleContext {
    AtProgressPoints() { return this.getToken(bitmarkParser.AtProgressPoints, 0); }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_progress_points; }
    // @Override
    enterRule(listener) {
        if (listener.enterProgress_points) {
            listener.enterProgress_points(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProgress_points) {
            listener.exitProgress_points(this);
        }
    }
}
export class IstrackedContext extends ParserRuleContext {
    OpAtIsTracked() { return this.getToken(bitmarkParser.OpAtIsTracked, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_istracked; }
    // @Override
    enterRule(listener) {
        if (listener.enterIstracked) {
            listener.enterIstracked(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIstracked) {
            listener.exitIstracked(this);
        }
    }
}
export class IsinfoonlyContext extends ParserRuleContext {
    OpAtIsInfoOnly() { return this.getToken(bitmarkParser.OpAtIsInfoOnly, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_isinfoonly; }
    // @Override
    enterRule(listener) {
        if (listener.enterIsinfoonly) {
            listener.enterIsinfoonly(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIsinfoonly) {
            listener.exitIsinfoonly(this);
        }
    }
}
export class AtdefContext extends ParserRuleContext {
    atdef_(i) {
        if (i === undefined) {
            return this.getRuleContexts(Atdef_Context);
        }
        else {
            return this.getRuleContext(i, Atdef_Context);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atdef; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtdef) {
            listener.enterAtdef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtdef) {
            listener.exitAtdef(this);
        }
    }
}
export class Atdef_Context extends ParserRuleContext {
    OPA() { return this.tryGetToken(bitmarkParser.OPA, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    DBLCOLON() { return this.tryGetToken(bitmarkParser.DBLCOLON, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atdef_; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtdef_) {
            listener.enterAtdef_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtdef_) {
            listener.exitAtdef_(this);
        }
    }
}
export class DollaransContext extends ParserRuleContext {
    OPDOLL() { return this.getToken(bitmarkParser.OPDOLL, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dollarans; }
    // @Override
    enterRule(listener) {
        if (listener.enterDollarans) {
            listener.enterDollarans(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDollarans) {
            listener.exitDollarans(this);
        }
    }
}
export class AnchorContext extends ParserRuleContext {
    OPDANGLE() { return this.getToken(bitmarkParser.OPDANGLE, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_anchor; }
    // @Override
    enterRule(listener) {
        if (listener.enterAnchor) {
            listener.enterAnchor(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAnchor) {
            listener.exitAnchor(this);
        }
    }
}
export class LinesContext extends ParserRuleContext {
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lines; }
    // @Override
    enterRule(listener) {
        if (listener.enterLines) {
            listener.enterLines(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLines) {
            listener.exitLines(this);
        }
    }
}
export class S_and_wContext extends ParserRuleContext {
    STRING() { return this.tryGetToken(bitmarkParser.STRING, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    OPS() { return this.tryGetToken(bitmarkParser.OPS, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    AMP() { return this.tryGetToken(bitmarkParser.AMP, 0); }
    DBLEQ() { return this.tryGetToken(bitmarkParser.DBLEQ, 0); }
    URL() { return this.tryGetToken(bitmarkParser.URL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_s_and_w; }
    // @Override
    enterRule(listener) {
        if (listener.enterS_and_w) {
            listener.enterS_and_w(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitS_and_w) {
            listener.exitS_and_w(this);
        }
    }
}
export class DclinesContext extends ParserRuleContext {
    DCANY() { return this.getToken(bitmarkParser.DCANY, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dclines; }
    // @Override
    enterRule(listener) {
        if (listener.enterDclines) {
            listener.enterDclines(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDclines) {
            listener.exitDclines(this);
        }
    }
}
export class ClnspContext extends ParserRuleContext {
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_clnsp; }
    // @Override
    enterRule(listener) {
        if (listener.enterClnsp) {
            listener.enterClnsp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitClnsp) {
            listener.exitClnsp(this);
        }
    }
}
export class SsplContext extends ParserRuleContext {
    SSPL() { return this.tryGetToken(bitmarkParser.SSPL, 0); }
    SSPL2() { return this.tryGetToken(bitmarkParser.SSPL2, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sspl; }
    // @Override
    enterRule(listener) {
        if (listener.enterSspl) {
            listener.enterSspl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSspl) {
            listener.exitSspl(this);
        }
    }
}
export class WordsContext extends ParserRuleContext {
    sentence(i) {
        if (i === undefined) {
            return this.getRuleContexts(SentenceContext);
        }
        else {
            return this.getRuleContext(i, SentenceContext);
        }
    }
    NOTBITMARK(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NOTBITMARK);
        }
        else {
            return this.getToken(bitmarkParser.NOTBITMARK, i);
        }
    }
    BARSTRING(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BARSTRING);
        }
        else {
            return this.getToken(bitmarkParser.BARSTRING, i);
        }
    }
    ELIPSIS(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.ELIPSIS);
        }
        else {
            return this.getToken(bitmarkParser.ELIPSIS, i);
        }
    }
    AMP(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AMP);
        }
        else {
            return this.getToken(bitmarkParser.AMP, i);
        }
    }
    Greater(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.Greater);
        }
        else {
            return this.getToken(bitmarkParser.Greater, i);
        }
    }
    Less(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.Less);
        }
        else {
            return this.getToken(bitmarkParser.Less, i);
        }
    }
    RightArrow(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.RightArrow);
        }
        else {
            return this.getToken(bitmarkParser.RightArrow, i);
        }
    }
    RightAngle(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.RightAngle);
        }
        else {
            return this.getToken(bitmarkParser.RightAngle, i);
        }
    }
    AmpArticle(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpArticle);
        }
        else {
            return this.getToken(bitmarkParser.AmpArticle, i);
        }
    }
    AmpArticleLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpArticleLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpArticleLink, i);
        }
    }
    AmpDocument(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpDocument);
        }
        else {
            return this.getToken(bitmarkParser.AmpDocument, i);
        }
    }
    AmpDocumentLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpDocumentLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpDocumentLink, i);
        }
    }
    AmpWebsite(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpWebsite);
        }
        else {
            return this.getToken(bitmarkParser.AmpWebsite, i);
        }
    }
    AmpWebsiteLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpWebsiteLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpWebsiteLink, i);
        }
    }
    AmpImage(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpImage);
        }
        else {
            return this.getToken(bitmarkParser.AmpImage, i);
        }
    }
    AmpImageLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpImageLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpImageLink, i);
        }
    }
    AmpAudio(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAudio);
        }
        else {
            return this.getToken(bitmarkParser.AmpAudio, i);
        }
    }
    AmpAudioLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAudioLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpAudioLink, i);
        }
    }
    AmpVideo(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpVideo);
        }
        else {
            return this.getToken(bitmarkParser.AmpVideo, i);
        }
    }
    AmpVideoLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpVideoLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpVideoLink, i);
        }
    }
    AmpApp(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpApp);
        }
        else {
            return this.getToken(bitmarkParser.AmpApp, i);
        }
    }
    AmpAppLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAppLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpAppLink, i);
        }
    }
    AmpStillImageFilm(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpStillImageFilm);
        }
        else {
            return this.getToken(bitmarkParser.AmpStillImageFilm, i);
        }
    }
    AmpStillImageFilmLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpStillImageFilmLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpStillImageFilmLink, i);
        }
    }
    BitmarkMinus(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BitmarkMinus);
        }
        else {
            return this.getToken(bitmarkParser.BitmarkMinus, i);
        }
    }
    BitmarkPlus(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BitmarkPlus);
        }
        else {
            return this.getToken(bitmarkParser.BitmarkPlus, i);
        }
    }
    QUOTE_INDEX(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.QUOTE_INDEX);
        }
        else {
            return this.getToken(bitmarkParser.QUOTE_INDEX, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_words; }
    // @Override
    enterRule(listener) {
        if (listener.enterWords) {
            listener.enterWords(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWords) {
            listener.exitWords(this);
        }
    }
}
export class SpContext extends ParserRuleContext {
    S() { return this.getToken(bitmarkParser.S, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sp; }
    // @Override
    enterRule(listener) {
        if (listener.enterSp) {
            listener.enterSp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSp) {
            listener.exitSp(this);
        }
    }
}
export class SentenceContext extends ParserRuleContext {
    SENTENCE() { return this.getToken(bitmarkParser.SENTENCE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sentence; }
    // @Override
    enterRule(listener) {
        if (listener.enterSentence) {
            listener.enterSentence(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSentence) {
            listener.exitSentence(this);
        }
    }
}
