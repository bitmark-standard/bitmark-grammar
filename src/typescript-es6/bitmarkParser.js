// Generated from ./typescript//bitmarkParser.g4 by ANTLR 4.7.3-SNAPSHOT
import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { Token } from "antlr4ts/Token";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";
import * as Utils from "antlr4ts/misc/Utils";
let bitmarkParser = /** @class */ (() => {
    class bitmarkParser extends Parser {
        constructor(input) {
            super(input);
            this._interp = new ParserATNSimulator(bitmarkParser._ATN, this);
        }
        // @Override
        // @NotNull
        get vocabulary() {
            return bitmarkParser.VOCABULARY;
        }
        // tslint:enable:no-trailing-whitespace
        // @Override
        get grammarFileName() { return "bitmarkParser.g4"; }
        // @Override
        get ruleNames() { return bitmarkParser.ruleNames; }
        // @Override
        get serializedATN() { return bitmarkParser._serializedATN; }
        // @RuleVersion(0)
        bitmark() {
            let _localctx = new BitmarkContext(this._ctx, this.state);
            this.enterRule(_localctx, 0, bitmarkParser.RULE_bitmark);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 415;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        {
                            {
                                this.state = 402;
                                this.bitmark_();
                                this.state = 412;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 406;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.S) {
                                                    {
                                                        {
                                                            this.state = 403;
                                                            this.match(bitmarkParser.S);
                                                        }
                                                    }
                                                    this.state = 408;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 409;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 414;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
                                }
                            }
                        }
                        this.state = 417;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitDocup) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitBotint) | (1 << bitmarkParser.BitSelfassess))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitRating - 32)) | (1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)) | (1 << (bitmarkParser.BitLearningPathBotTraining - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitLearningPathExternalLink - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomEvent - 64)) | (1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)) | (1 << (bitmarkParser.BitEditorial - 64)) | (1 << (bitmarkParser.BitBookFrontispiece - 64)) | (1 << (bitmarkParser.BitBookTitle - 64)) | (1 << (bitmarkParser.BitBookCopyright - 64)) | (1 << (bitmarkParser.BitBookDedication - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)) | (1 << (bitmarkParser.BitQuestion1 - 96)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPDANGLE - 130)) | (1 << (bitmarkParser.OPQ - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                    this.state = 422;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 419;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 424;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 425;
                    this.match(bitmarkParser.EOF);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bitmark_() {
            let _localctx = new Bitmark_Context(this._ctx, this.state);
            this.enterRule(_localctx, 2, bitmarkParser.RULE_bitmark_);
            try {
                this.state = 429;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.BitBook:
                    case bitmarkParser.BitChapter:
                    case bitmarkParser.BitToc:
                    case bitmarkParser.BitSummary:
                    case bitmarkParser.BitIntlink:
                    case bitmarkParser.BitIntRef:
                    case bitmarkParser.BitAlias:
                    case bitmarkParser.BitGroups:
                    case bitmarkParser.BitGroupt:
                    case bitmarkParser.BitStatement:
                    case bitmarkParser.BitDetails:
                    case bitmarkParser.BitSampleSolution:
                    case bitmarkParser.BitTakeAudio:
                    case bitmarkParser.BitArticle:
                    case bitmarkParser.BitPage:
                    case bitmarkParser.BitEssay:
                    case bitmarkParser.BitMessage:
                    case bitmarkParser.BitCorrection:
                    case bitmarkParser.BitMark:
                    case bitmarkParser.BitDocup:
                    case bitmarkParser.BitTakepic:
                    case bitmarkParser.BitRecaud:
                    case bitmarkParser.BitPrepnote:
                    case bitmarkParser.BitAssign:
                    case bitmarkParser.BitBotint:
                    case bitmarkParser.BitSelfassess:
                    case bitmarkParser.BitRating:
                    case bitmarkParser.BitSurvey:
                    case bitmarkParser.BitSurvey1:
                    case bitmarkParser.BitSurveyanon:
                    case bitmarkParser.BitSurveyanon1:
                    case bitmarkParser.BitNote:
                    case bitmarkParser.BitInfo:
                    case bitmarkParser.BitWarning:
                    case bitmarkParser.BitRemark:
                    case bitmarkParser.BitHint:
                    case bitmarkParser.BitHelp:
                    case bitmarkParser.BitDanger:
                    case bitmarkParser.BitBug:
                    case bitmarkParser.BitSidenote:
                    case bitmarkParser.BitStickynote:
                    case bitmarkParser.BitQuote:
                    case bitmarkParser.BitFootnote:
                    case bitmarkParser.BitExample:
                    case bitmarkParser.BitButtonCopytext:
                    case bitmarkParser.BitWbtContinue:
                    case bitmarkParser.BitLearningPathDetails:
                    case bitmarkParser.BitLearningPathLti:
                    case bitmarkParser.BitLearningPathStep:
                    case bitmarkParser.BitLearningPathBook:
                    case bitmarkParser.BitLearningPathSign:
                    case bitmarkParser.BitLearningPathVideoCall:
                    case bitmarkParser.BitLearningPathLearningGoal:
                    case bitmarkParser.BitLearningPathClosing:
                    case bitmarkParser.BitLearningPathFeedback:
                    case bitmarkParser.BitLearningPathBotTraining:
                    case bitmarkParser.BitLearningPathExternalLink:
                    case bitmarkParser.BitLearningPathClassroomTraining:
                    case bitmarkParser.BitLearningPathClassroomEvent:
                    case bitmarkParser.BitBotActionSend:
                    case bitmarkParser.BitBotActionAnnounce:
                    case bitmarkParser.BitBotActionSave:
                    case bitmarkParser.BitBotActionRemind:
                    case bitmarkParser.BitVendorPadletEmbed:
                    case bitmarkParser.BitScorm:
                    case bitmarkParser.BitImage:
                    case bitmarkParser.BitImageLink:
                    case bitmarkParser.BitImageZoom:
                    case bitmarkParser.BitAudio:
                    case bitmarkParser.BitAudioLink:
                    case bitmarkParser.BitAudioEmbed:
                    case bitmarkParser.BitVideo:
                    case bitmarkParser.BitVideoLink:
                    case bitmarkParser.BitVideoEmbed:
                    case bitmarkParser.BitStillImageFilm:
                    case bitmarkParser.BitStillImageFilmLink:
                    case bitmarkParser.BitStillImageFilmEmbed:
                    case bitmarkParser.BitWebsiteLink:
                    case bitmarkParser.BitDocument:
                    case bitmarkParser.BitDocumentLink:
                    case bitmarkParser.BitDocumentEmbed:
                    case bitmarkParser.BitDocumentDownload:
                    case bitmarkParser.BitAppLink:
                    case bitmarkParser.BitEditorial:
                    case bitmarkParser.BitBookFrontispiece:
                    case bitmarkParser.BitBookTitle:
                    case bitmarkParser.BitBookCopyright:
                    case bitmarkParser.BitBookDedication:
                    case bitmarkParser.BitBookForword:
                    case bitmarkParser.BitBookPreface:
                    case bitmarkParser.BitBookPrologue:
                    case bitmarkParser.BitBookEpilogue:
                    case bitmarkParser.BitBookIntroduction:
                    case bitmarkParser.BitBookIncitingIncident:
                    case bitmarkParser.BitBookConclusion:
                    case bitmarkParser.BitBookAfterword:
                    case bitmarkParser.BitBookPostscript:
                    case bitmarkParser.BitBookappendix:
                    case bitmarkParser.BitBookAddendum:
                    case bitmarkParser.BitBookAcknowledgments:
                    case bitmarkParser.BitBookListOfContributors:
                    case bitmarkParser.BitBookBibliography:
                    case bitmarkParser.BitBookReferenceList:
                    case bitmarkParser.BitBookEndnotes:
                    case bitmarkParser.BitBookNotes:
                    case bitmarkParser.BitBookCopyrightPermissions:
                    case bitmarkParser.BitBookTeaser:
                    case bitmarkParser.BitBookAutherBio:
                    case bitmarkParser.BitBookRequestForABookReview:
                    case bitmarkParser.BitBookComingSoon:
                    case bitmarkParser.BitBookReadMore:
                    case bitmarkParser.BitBookSummary:
                    case bitmarkParser.BitBookEpigraph:
                    case bitmarkParser.BitCode:
                    case bitmarkParser.BitCard1:
                    case bitmarkParser.BitQuestion1:
                    case bitmarkParser.OPDANGLE:
                    case bitmarkParser.OPQ:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 427;
                            this.bit();
                        }
                        break;
                    case bitmarkParser.S:
                    case bitmarkParser.OPESC:
                    case bitmarkParser.OPS:
                    case bitmarkParser.COLON:
                    case bitmarkParser.AMP:
                    case bitmarkParser.Greater:
                    case bitmarkParser.Less:
                    case bitmarkParser.RightAngle:
                    case bitmarkParser.RightArrow:
                    case bitmarkParser.DBLEQ:
                    case bitmarkParser.QUOTE_INDEX:
                    case bitmarkParser.NUMERIC:
                    case bitmarkParser.STRING:
                    case bitmarkParser.SENTENCE:
                    case bitmarkParser.AmpAudio:
                    case bitmarkParser.AmpImage:
                    case bitmarkParser.AmpVideo:
                    case bitmarkParser.AmpArticle:
                    case bitmarkParser.AmpDocument:
                    case bitmarkParser.AmpApp:
                    case bitmarkParser.AmpWebsite:
                    case bitmarkParser.AmpStillImageFilm:
                    case bitmarkParser.AmpAudioLink:
                    case bitmarkParser.AmpImageLink:
                    case bitmarkParser.AmpVideoLink:
                    case bitmarkParser.AmpArticleLink:
                    case bitmarkParser.AmpDocumentLink:
                    case bitmarkParser.AmpAppLink:
                    case bitmarkParser.AmpWebsiteLink:
                    case bitmarkParser.AmpStillImageFilmLink:
                    case bitmarkParser.BitmarkMinus:
                    case bitmarkParser.BitmarkPlus:
                    case bitmarkParser.URL:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 428;
                            this.lines();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit() {
            let _localctx = new BitContext(this._ctx, this.state);
            this.enterRule(_localctx, 4, bitmarkParser.RULE_bit);
            try {
                this.state = 548;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.BitBook:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 431;
                            this.book();
                        }
                        break;
                    case bitmarkParser.BitChapter:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 432;
                            this.chapter();
                        }
                        break;
                    case bitmarkParser.BitSummary:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 433;
                            this.summary();
                        }
                        break;
                    case bitmarkParser.BitToc:
                        this.enterOuterAlt(_localctx, 4);
                        {
                            this.state = 434;
                            this.toc();
                        }
                        break;
                    case bitmarkParser.BitAlias:
                        this.enterOuterAlt(_localctx, 5);
                        {
                            this.state = 435;
                            this.bit_alias();
                        }
                        break;
                    case bitmarkParser.BitIntlink:
                    case bitmarkParser.BitIntRef:
                        this.enterOuterAlt(_localctx, 6);
                        {
                            this.state = 436;
                            this.internal_link();
                        }
                        break;
                    case bitmarkParser.OPDANGLE:
                        this.enterOuterAlt(_localctx, 7);
                        {
                            this.state = 437;
                            this.anchor();
                        }
                        break;
                    case bitmarkParser.BitGroups:
                        this.enterOuterAlt(_localctx, 8);
                        {
                            this.state = 438;
                            this.group_born();
                        }
                        break;
                    case bitmarkParser.BitGroupt:
                        this.enterOuterAlt(_localctx, 9);
                        {
                            this.state = 439;
                            this.group_died();
                        }
                        break;
                    case bitmarkParser.BitEssay:
                        this.enterOuterAlt(_localctx, 10);
                        {
                            this.state = 440;
                            this.essay();
                        }
                        break;
                    case bitmarkParser.BitCorrection:
                        this.enterOuterAlt(_localctx, 11);
                        {
                            this.state = 441;
                            this.correction();
                        }
                        break;
                    case bitmarkParser.BitMark:
                        this.enterOuterAlt(_localctx, 12);
                        {
                            this.state = 442;
                            this.mark_();
                        }
                        break;
                    case bitmarkParser.BitDocup:
                        this.enterOuterAlt(_localctx, 13);
                        {
                            this.state = 443;
                            this.document_upload();
                        }
                        break;
                    case bitmarkParser.BitTakepic:
                        this.enterOuterAlt(_localctx, 14);
                        {
                            this.state = 444;
                            this.take_picture();
                        }
                        break;
                    case bitmarkParser.BitTakeAudio:
                        this.enterOuterAlt(_localctx, 15);
                        {
                            this.state = 445;
                            this.take_audio();
                        }
                        break;
                    case bitmarkParser.BitRecaud:
                        this.enterOuterAlt(_localctx, 16);
                        {
                            this.state = 446;
                            this.record_audio();
                        }
                        break;
                    case bitmarkParser.BitPrepnote:
                        this.enterOuterAlt(_localctx, 17);
                        {
                            this.state = 447;
                            this.preparation_note();
                        }
                        break;
                    case bitmarkParser.BitAssign:
                        this.enterOuterAlt(_localctx, 18);
                        {
                            this.state = 448;
                            this.assignment();
                        }
                        break;
                    case bitmarkParser.BitArticle:
                        this.enterOuterAlt(_localctx, 19);
                        {
                            this.state = 449;
                            this.article();
                        }
                        break;
                    case bitmarkParser.BitStatement:
                        this.enterOuterAlt(_localctx, 20);
                        {
                            this.state = 450;
                            this.statement();
                        }
                        break;
                    case bitmarkParser.BitDetails:
                        this.enterOuterAlt(_localctx, 21);
                        {
                            this.state = 451;
                            this.details();
                        }
                        break;
                    case bitmarkParser.BitSampleSolution:
                        this.enterOuterAlt(_localctx, 22);
                        {
                            this.state = 452;
                            this.sample_solution();
                        }
                        break;
                    case bitmarkParser.BitButtonCopytext:
                        this.enterOuterAlt(_localctx, 23);
                        {
                            this.state = 453;
                            this.buttoncopytext();
                        }
                        break;
                    case bitmarkParser.BitWbtContinue:
                        this.enterOuterAlt(_localctx, 24);
                        {
                            this.state = 454;
                            this.wbtcontinue();
                        }
                        break;
                    case bitmarkParser.BitLearningPathDetails:
                        this.enterOuterAlt(_localctx, 25);
                        {
                            this.state = 455;
                            this.learningpathdetails();
                        }
                        break;
                    case bitmarkParser.BitNote:
                        this.enterOuterAlt(_localctx, 26);
                        {
                            this.state = 456;
                            this.note();
                        }
                        break;
                    case bitmarkParser.BitInfo:
                        this.enterOuterAlt(_localctx, 27);
                        {
                            this.state = 457;
                            this.info();
                        }
                        break;
                    case bitmarkParser.BitWarning:
                        this.enterOuterAlt(_localctx, 28);
                        {
                            this.state = 458;
                            this.warning();
                        }
                        break;
                    case bitmarkParser.BitRemark:
                        this.enterOuterAlt(_localctx, 29);
                        {
                            this.state = 459;
                            this.remark();
                        }
                        break;
                    case bitmarkParser.BitHint:
                        this.enterOuterAlt(_localctx, 30);
                        {
                            this.state = 460;
                            this.hintbit();
                        }
                        break;
                    case bitmarkParser.BitHelp:
                        this.enterOuterAlt(_localctx, 31);
                        {
                            this.state = 461;
                            this.help();
                        }
                        break;
                    case bitmarkParser.BitDanger:
                        this.enterOuterAlt(_localctx, 32);
                        {
                            this.state = 462;
                            this.danger();
                        }
                        break;
                    case bitmarkParser.BitBug:
                        this.enterOuterAlt(_localctx, 33);
                        {
                            this.state = 463;
                            this.bug();
                        }
                        break;
                    case bitmarkParser.BitSidenote:
                        this.enterOuterAlt(_localctx, 34);
                        {
                            this.state = 464;
                            this.sidenote();
                        }
                        break;
                    case bitmarkParser.BitStickynote:
                        this.enterOuterAlt(_localctx, 35);
                        {
                            this.state = 465;
                            this.stickynote();
                        }
                        break;
                    case bitmarkParser.BitQuote:
                        this.enterOuterAlt(_localctx, 36);
                        {
                            this.state = 466;
                            this.quote();
                        }
                        break;
                    case bitmarkParser.BitFootnote:
                        this.enterOuterAlt(_localctx, 37);
                        {
                            this.state = 467;
                            this.footnote();
                        }
                        break;
                    case bitmarkParser.BitExample:
                        this.enterOuterAlt(_localctx, 38);
                        {
                            this.state = 468;
                            this.examplebit();
                        }
                        break;
                    case bitmarkParser.BitPage:
                        this.enterOuterAlt(_localctx, 39);
                        {
                            this.state = 469;
                            this.page();
                        }
                        break;
                    case bitmarkParser.BitMessage:
                        this.enterOuterAlt(_localctx, 40);
                        {
                            this.state = 470;
                            this.message();
                        }
                        break;
                    case bitmarkParser.BitBotint:
                        this.enterOuterAlt(_localctx, 41);
                        {
                            this.state = 471;
                            this.bot_interview();
                        }
                        break;
                    case bitmarkParser.BitSelfassess:
                        this.enterOuterAlt(_localctx, 42);
                        {
                            this.state = 472;
                            this.self_assessment();
                        }
                        break;
                    case bitmarkParser.BitRating:
                        this.enterOuterAlt(_localctx, 43);
                        {
                            this.state = 473;
                            this.rating();
                        }
                        break;
                    case bitmarkParser.BitSurvey:
                        this.enterOuterAlt(_localctx, 44);
                        {
                            this.state = 474;
                            this.survey();
                        }
                        break;
                    case bitmarkParser.BitSurvey1:
                        this.enterOuterAlt(_localctx, 45);
                        {
                            this.state = 475;
                            this.survey_1();
                        }
                        break;
                    case bitmarkParser.BitSurveyanon:
                        this.enterOuterAlt(_localctx, 46);
                        {
                            this.state = 476;
                            this.survey_anonymous();
                        }
                        break;
                    case bitmarkParser.BitSurveyanon1:
                        this.enterOuterAlt(_localctx, 47);
                        {
                            this.state = 477;
                            this.survey_anonymous_1();
                        }
                        break;
                    case bitmarkParser.OPQ:
                        this.enterOuterAlt(_localctx, 48);
                        {
                            this.state = 478;
                            this.hint();
                        }
                        break;
                    case bitmarkParser.BitVendorPadletEmbed:
                        this.enterOuterAlt(_localctx, 49);
                        {
                            this.state = 479;
                            this.vendor_padlet_embed();
                        }
                        break;
                    case bitmarkParser.BitScorm:
                        this.enterOuterAlt(_localctx, 50);
                        {
                            this.state = 480;
                            this.scorm();
                        }
                        break;
                    case bitmarkParser.BitLearningPathLti:
                        this.enterOuterAlt(_localctx, 51);
                        {
                            this.state = 481;
                            this.learning_path_lti();
                        }
                        break;
                    case bitmarkParser.BitLearningPathStep:
                        this.enterOuterAlt(_localctx, 52);
                        {
                            this.state = 482;
                            this.learning_path_step();
                        }
                        break;
                    case bitmarkParser.BitLearningPathBook:
                        this.enterOuterAlt(_localctx, 53);
                        {
                            this.state = 483;
                            this.learning_path_book();
                        }
                        break;
                    case bitmarkParser.BitLearningPathSign:
                        this.enterOuterAlt(_localctx, 54);
                        {
                            this.state = 484;
                            this.learning_path_sign();
                        }
                        break;
                    case bitmarkParser.BitLearningPathVideoCall:
                        this.enterOuterAlt(_localctx, 55);
                        {
                            this.state = 485;
                            this.learning_path_video_call();
                        }
                        break;
                    case bitmarkParser.BitLearningPathLearningGoal:
                        this.enterOuterAlt(_localctx, 56);
                        {
                            this.state = 486;
                            this.learning_path_learning_goal();
                        }
                        break;
                    case bitmarkParser.BitLearningPathClosing:
                        this.enterOuterAlt(_localctx, 57);
                        {
                            this.state = 487;
                            this.learning_path_closing();
                        }
                        break;
                    case bitmarkParser.BitLearningPathFeedback:
                        this.enterOuterAlt(_localctx, 58);
                        {
                            this.state = 488;
                            this.learning_path_feedback();
                        }
                        break;
                    case bitmarkParser.BitLearningPathBotTraining:
                        this.enterOuterAlt(_localctx, 59);
                        {
                            this.state = 489;
                            this.learning_path_bot_training();
                        }
                        break;
                    case bitmarkParser.BitLearningPathExternalLink:
                        this.enterOuterAlt(_localctx, 60);
                        {
                            this.state = 490;
                            this.learning_path_external_link();
                        }
                        break;
                    case bitmarkParser.BitLearningPathClassroomTraining:
                        this.enterOuterAlt(_localctx, 61);
                        {
                            this.state = 491;
                            this.learning_path_classroom_training();
                        }
                        break;
                    case bitmarkParser.BitLearningPathClassroomEvent:
                        this.enterOuterAlt(_localctx, 62);
                        {
                            this.state = 492;
                            this.learning_path_classroom_event();
                        }
                        break;
                    case bitmarkParser.BitBotActionSend:
                        this.enterOuterAlt(_localctx, 63);
                        {
                            this.state = 493;
                            this.bot_action_send();
                        }
                        break;
                    case bitmarkParser.BitBotActionAnnounce:
                        this.enterOuterAlt(_localctx, 64);
                        {
                            this.state = 494;
                            this.bot_action_announce();
                        }
                        break;
                    case bitmarkParser.BitBotActionSave:
                        this.enterOuterAlt(_localctx, 65);
                        {
                            this.state = 495;
                            this.bot_action_save();
                        }
                        break;
                    case bitmarkParser.BitBotActionRemind:
                        this.enterOuterAlt(_localctx, 66);
                        {
                            this.state = 496;
                            this.bot_action_remind();
                        }
                        break;
                    case bitmarkParser.BitImage:
                        this.enterOuterAlt(_localctx, 67);
                        {
                            this.state = 497;
                            this.bit_image();
                        }
                        break;
                    case bitmarkParser.BitImageLink:
                        this.enterOuterAlt(_localctx, 68);
                        {
                            this.state = 498;
                            this.bit_imageLink();
                        }
                        break;
                    case bitmarkParser.BitImageZoom:
                        this.enterOuterAlt(_localctx, 69);
                        {
                            this.state = 499;
                            this.bit_imageZoom();
                        }
                        break;
                    case bitmarkParser.BitAudio:
                        this.enterOuterAlt(_localctx, 70);
                        {
                            this.state = 500;
                            this.bit_audio();
                        }
                        break;
                    case bitmarkParser.BitAudioLink:
                        this.enterOuterAlt(_localctx, 71);
                        {
                            this.state = 501;
                            this.bit_audioLink();
                        }
                        break;
                    case bitmarkParser.BitAudioEmbed:
                        this.enterOuterAlt(_localctx, 72);
                        {
                            this.state = 502;
                            this.bit_audioEmbed();
                        }
                        break;
                    case bitmarkParser.BitVideo:
                        this.enterOuterAlt(_localctx, 73);
                        {
                            this.state = 503;
                            this.bit_video();
                        }
                        break;
                    case bitmarkParser.BitVideoLink:
                        this.enterOuterAlt(_localctx, 74);
                        {
                            this.state = 504;
                            this.bit_videoLink();
                        }
                        break;
                    case bitmarkParser.BitVideoEmbed:
                        this.enterOuterAlt(_localctx, 75);
                        {
                            this.state = 505;
                            this.bit_videoEmbed();
                        }
                        break;
                    case bitmarkParser.BitStillImageFilm:
                        this.enterOuterAlt(_localctx, 76);
                        {
                            this.state = 506;
                            this.bit_stillImageFilm();
                        }
                        break;
                    case bitmarkParser.BitStillImageFilmLink:
                        this.enterOuterAlt(_localctx, 77);
                        {
                            this.state = 507;
                            this.bit_stillImageFilmLink();
                        }
                        break;
                    case bitmarkParser.BitStillImageFilmEmbed:
                        this.enterOuterAlt(_localctx, 78);
                        {
                            this.state = 508;
                            this.bit_stillImageFilmEmbed();
                        }
                        break;
                    case bitmarkParser.BitDocument:
                        this.enterOuterAlt(_localctx, 79);
                        {
                            this.state = 509;
                            this.bit_document();
                        }
                        break;
                    case bitmarkParser.BitDocumentLink:
                        this.enterOuterAlt(_localctx, 80);
                        {
                            this.state = 510;
                            this.bit_documentLink();
                        }
                        break;
                    case bitmarkParser.BitDocumentEmbed:
                        this.enterOuterAlt(_localctx, 81);
                        {
                            this.state = 511;
                            this.bit_documentEmbed();
                        }
                        break;
                    case bitmarkParser.BitDocumentDownload:
                        this.enterOuterAlt(_localctx, 82);
                        {
                            this.state = 512;
                            this.bit_documentDownload();
                        }
                        break;
                    case bitmarkParser.BitWebsiteLink:
                        this.enterOuterAlt(_localctx, 83);
                        {
                            this.state = 513;
                            this.bit_websiteLink();
                        }
                        break;
                    case bitmarkParser.BitAppLink:
                        this.enterOuterAlt(_localctx, 84);
                        {
                            this.state = 514;
                            this.bit_appLink();
                        }
                        break;
                    case bitmarkParser.BitEditorial:
                        this.enterOuterAlt(_localctx, 85);
                        {
                            this.state = 515;
                            this.bit_editorial();
                        }
                        break;
                    case bitmarkParser.BitBookFrontispiece:
                        this.enterOuterAlt(_localctx, 86);
                        {
                            this.state = 516;
                            this.book_frontispiece();
                        }
                        break;
                    case bitmarkParser.BitBookTitle:
                        this.enterOuterAlt(_localctx, 87);
                        {
                            this.state = 517;
                            this.book_title();
                        }
                        break;
                    case bitmarkParser.BitBookCopyright:
                        this.enterOuterAlt(_localctx, 88);
                        {
                            this.state = 518;
                            this.book_copyright();
                        }
                        break;
                    case bitmarkParser.BitBookDedication:
                        this.enterOuterAlt(_localctx, 89);
                        {
                            this.state = 519;
                            this.book_dedication();
                        }
                        break;
                    case bitmarkParser.BitBookForword:
                        this.enterOuterAlt(_localctx, 90);
                        {
                            this.state = 520;
                            this.book_forword();
                        }
                        break;
                    case bitmarkParser.BitBookPreface:
                        this.enterOuterAlt(_localctx, 91);
                        {
                            this.state = 521;
                            this.book_preface();
                        }
                        break;
                    case bitmarkParser.BitBookPrologue:
                        this.enterOuterAlt(_localctx, 92);
                        {
                            this.state = 522;
                            this.book_prologue();
                        }
                        break;
                    case bitmarkParser.BitBookEpilogue:
                        this.enterOuterAlt(_localctx, 93);
                        {
                            this.state = 523;
                            this.book_epilogue();
                        }
                        break;
                    case bitmarkParser.BitBookIntroduction:
                        this.enterOuterAlt(_localctx, 94);
                        {
                            this.state = 524;
                            this.book_introduction();
                        }
                        break;
                    case bitmarkParser.BitBookIncitingIncident:
                        this.enterOuterAlt(_localctx, 95);
                        {
                            this.state = 525;
                            this.book_inciting_incident();
                        }
                        break;
                    case bitmarkParser.BitBookConclusion:
                        this.enterOuterAlt(_localctx, 96);
                        {
                            this.state = 526;
                            this.book_conclusion();
                        }
                        break;
                    case bitmarkParser.BitBookAfterword:
                        this.enterOuterAlt(_localctx, 97);
                        {
                            this.state = 527;
                            this.book_afterword();
                        }
                        break;
                    case bitmarkParser.BitBookPostscript:
                        this.enterOuterAlt(_localctx, 98);
                        {
                            this.state = 528;
                            this.book_postscript();
                        }
                        break;
                    case bitmarkParser.BitBookappendix:
                        this.enterOuterAlt(_localctx, 99);
                        {
                            this.state = 529;
                            this.book_appendix();
                        }
                        break;
                    case bitmarkParser.BitBookAddendum:
                        this.enterOuterAlt(_localctx, 100);
                        {
                            this.state = 530;
                            this.book_addendum();
                        }
                        break;
                    case bitmarkParser.BitBookAcknowledgments:
                        this.enterOuterAlt(_localctx, 101);
                        {
                            this.state = 531;
                            this.book_acknowledgments();
                        }
                        break;
                    case bitmarkParser.BitBookListOfContributors:
                        this.enterOuterAlt(_localctx, 102);
                        {
                            this.state = 532;
                            this.book_list_of_contributors();
                        }
                        break;
                    case bitmarkParser.BitBookBibliography:
                        this.enterOuterAlt(_localctx, 103);
                        {
                            this.state = 533;
                            this.book_bibliography();
                        }
                        break;
                    case bitmarkParser.BitBookReferenceList:
                        this.enterOuterAlt(_localctx, 104);
                        {
                            this.state = 534;
                            this.book_reference_list();
                        }
                        break;
                    case bitmarkParser.BitBookEndnotes:
                        this.enterOuterAlt(_localctx, 105);
                        {
                            this.state = 535;
                            this.book_endnotes();
                        }
                        break;
                    case bitmarkParser.BitBookNotes:
                        this.enterOuterAlt(_localctx, 106);
                        {
                            this.state = 536;
                            this.book_notes();
                        }
                        break;
                    case bitmarkParser.BitBookCopyrightPermissions:
                        this.enterOuterAlt(_localctx, 107);
                        {
                            this.state = 537;
                            this.book_copyright_permissions();
                        }
                        break;
                    case bitmarkParser.BitBookTeaser:
                        this.enterOuterAlt(_localctx, 108);
                        {
                            this.state = 538;
                            this.book_teaser();
                        }
                        break;
                    case bitmarkParser.BitBookAutherBio:
                        this.enterOuterAlt(_localctx, 109);
                        {
                            this.state = 539;
                            this.book_auther_bio();
                        }
                        break;
                    case bitmarkParser.BitBookRequestForABookReview:
                        this.enterOuterAlt(_localctx, 110);
                        {
                            this.state = 540;
                            this.book_request_for_a_book_review();
                        }
                        break;
                    case bitmarkParser.BitBookComingSoon:
                        this.enterOuterAlt(_localctx, 111);
                        {
                            this.state = 541;
                            this.book_coming_soon();
                        }
                        break;
                    case bitmarkParser.BitBookReadMore:
                        this.enterOuterAlt(_localctx, 112);
                        {
                            this.state = 542;
                            this.book_read_more();
                        }
                        break;
                    case bitmarkParser.BitBookSummary:
                        this.enterOuterAlt(_localctx, 113);
                        {
                            this.state = 543;
                            this.book_summary();
                        }
                        break;
                    case bitmarkParser.BitBookEpigraph:
                        this.enterOuterAlt(_localctx, 114);
                        {
                            this.state = 544;
                            this.book_epigraph();
                        }
                        break;
                    case bitmarkParser.BitCode:
                        this.enterOuterAlt(_localctx, 115);
                        {
                            this.state = 545;
                            this.code();
                        }
                        break;
                    case bitmarkParser.BitCard1:
                        this.enterOuterAlt(_localctx, 116);
                        {
                            this.state = 546;
                            this.card1();
                        }
                        break;
                    case bitmarkParser.BitQuestion1:
                        this.enterOuterAlt(_localctx, 117);
                        {
                            this.state = 547;
                            this.question1();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book() {
            let _localctx = new BookContext(this._ctx, this.state);
            this.enterRule(_localctx, 6, bitmarkParser.RULE_book);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 550;
                    this.match(bitmarkParser.BitBook);
                    this.state = 552;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
                        case 1:
                            {
                                this.state = 551;
                                this.format();
                            }
                            break;
                    }
                    this.state = 554;
                    this.match(bitmarkParser.CL);
                    this.state = 562;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 558;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        while (_la === bitmarkParser.NL) {
                                            {
                                                {
                                                    this.state = 555;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                            this.state = 560;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                        this.state = 561;
                                        this.bitElem();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 564;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        chapter() {
            let _localctx = new ChapterContext(this._ctx, this.state);
            this.enterRule(_localctx, 8, bitmarkParser.RULE_chapter);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 566;
                    this.match(bitmarkParser.BitChapter);
                    this.state = 568;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 9, this._ctx)) {
                        case 1:
                            {
                                this.state = 567;
                                this.format();
                            }
                            break;
                    }
                    this.state = 570;
                    this.match(bitmarkParser.CL);
                    this.state = 574;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 571;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 576;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 580;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 11, this._ctx)) {
                        case 1:
                            {
                                this.state = 577;
                                this.anchor();
                                this.state = 578;
                                this.match(bitmarkParser.NL);
                            }
                            break;
                    }
                    this.state = 582;
                    this.resource();
                    this.state = 592;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 586;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 583;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 588;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 589;
                                    this.resource();
                                }
                            }
                        }
                        this.state = 594;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        toc() {
            let _localctx = new TocContext(this._ctx, this.state);
            this.enterRule(_localctx, 10, bitmarkParser.RULE_toc);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 595;
                    this.match(bitmarkParser.BitToc);
                    this.state = 597;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                        {
                            this.state = 596;
                            this.s_and_w();
                        }
                    }
                    this.state = 599;
                    this.match(bitmarkParser.CL);
                    this.state = 600;
                    this.match(bitmarkParser.NL);
                    this.state = 604;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.OPA || _la === bitmarkParser.OpAtCopyright) {
                        {
                            this.state = 601;
                            this.atdef();
                            this.state = 602;
                            this.match(bitmarkParser.NL);
                        }
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        summary() {
            let _localctx = new SummaryContext(this._ctx, this.state);
            this.enterRule(_localctx, 12, bitmarkParser.RULE_summary);
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 606;
                    this.match(bitmarkParser.BitSummary);
                    this.state = 607;
                    this.match(bitmarkParser.CL);
                    this.state = 611;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 608;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 613;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
                    }
                    this.state = 614;
                    this.title_etc();
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        internal_link() {
            let _localctx = new Internal_linkContext(this._ctx, this.state);
            this.enterRule(_localctx, 14, bitmarkParser.RULE_internal_link);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 616;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.BitIntlink || _la === bitmarkParser.BitIntRef)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 618;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
                        {
                            this.state = 617;
                            _la = this._input.LA(1);
                            if (!(_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    this.state = 620;
                    this.match(bitmarkParser.CL);
                    this.state = 630;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 624;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 621;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 626;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 627;
                                    this.bitElem();
                                }
                            }
                        }
                        this.state = 632;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_alias() {
            let _localctx = new Bit_aliasContext(this._ctx, this.state);
            this.enterRule(_localctx, 16, bitmarkParser.RULE_bit_alias);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 633;
                    this.match(bitmarkParser.BitAlias);
                    this.state = 634;
                    this.match(bitmarkParser.CL);
                    this.state = 635;
                    this.angleref();
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        title_etc() {
            let _localctx = new Title_etcContext(this._ctx, this.state);
            this.enterRule(_localctx, 18, bitmarkParser.RULE_title_etc);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 651;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 638;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === bitmarkParser.NL) {
                                        {
                                            this.state = 637;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 647;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case bitmarkParser.OPHASH:
                                            {
                                                this.state = 640;
                                                this.title();
                                            }
                                            break;
                                        case bitmarkParser.OPA:
                                        case bitmarkParser.OpAtCopyright:
                                            {
                                                this.state = 641;
                                                this.atdef();
                                            }
                                            break;
                                        case bitmarkParser.OPC:
                                            {
                                                this.state = 642;
                                                this.item();
                                            }
                                            break;
                                        case bitmarkParser.OPB:
                                            {
                                                this.state = 643;
                                                this.instruction();
                                            }
                                            break;
                                        case bitmarkParser.OPRANGLES:
                                        case bitmarkParser.OPRANGLEL:
                                            {
                                                this.state = 644;
                                                this.angleref();
                                            }
                                            break;
                                        case bitmarkParser.OPDANGLE:
                                            {
                                                this.state = 645;
                                                this.anchor();
                                            }
                                            break;
                                        case bitmarkParser.AtProgress:
                                            {
                                                this.state = 646;
                                                this.progress();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                            }
                        }
                        this.state = 653;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        group_born() {
            let _localctx = new Group_bornContext(this._ctx, this.state);
            this.enterRule(_localctx, 20, bitmarkParser.RULE_group_born);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 654;
                    this.match(bitmarkParser.BitGroups);
                    this.state = 655;
                    this.match(bitmarkParser.CL);
                    this.state = 665;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 656;
                                        this.match(bitmarkParser.NL);
                                        this.state = 657;
                                        _la = this._input.LA(1);
                                        if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 660;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        do {
                                            {
                                                this.state = 660;
                                                this._errHandler.sync(this);
                                                switch (this.interpreter.adaptivePredict(this._input, 23, this._ctx)) {
                                                    case 1:
                                                        {
                                                            this.state = 658;
                                                            this.s_and_w();
                                                        }
                                                        break;
                                                    case 2:
                                                        {
                                                            this.state = 659;
                                                            this.match(bitmarkParser.COLON);
                                                        }
                                                        break;
                                                }
                                            }
                                            this.state = 662;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                                        this.state = 664;
                                        this.match(bitmarkParser.CL);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 667;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 669;
                    this.match(bitmarkParser.NL);
                    this.state = 673;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 26, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 670;
                                    this.lines();
                                }
                            }
                        }
                        this.state = 675;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 26, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        group_died() {
            let _localctx = new Group_diedContext(this._ctx, this.state);
            this.enterRule(_localctx, 22, bitmarkParser.RULE_group_died);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 676;
                    this.match(bitmarkParser.BitGroupt);
                    this.state = 677;
                    this.match(bitmarkParser.CL);
                    this.state = 687;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 678;
                                        this.match(bitmarkParser.NL);
                                        this.state = 679;
                                        _la = this._input.LA(1);
                                        if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 682;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        do {
                                            {
                                                this.state = 682;
                                                this._errHandler.sync(this);
                                                switch (this.interpreter.adaptivePredict(this._input, 27, this._ctx)) {
                                                    case 1:
                                                        {
                                                            this.state = 680;
                                                            this.s_and_w();
                                                        }
                                                        break;
                                                    case 2:
                                                        {
                                                            this.state = 681;
                                                            this.match(bitmarkParser.COLON);
                                                        }
                                                        break;
                                                }
                                            }
                                            this.state = 684;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                                        this.state = 686;
                                        this.match(bitmarkParser.CL);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 689;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 29, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 691;
                    this.match(bitmarkParser.NL);
                    this.state = 695;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 692;
                                    this.lines();
                                }
                            }
                        }
                        this.state = 697;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_lti() {
            let _localctx = new Learning_path_ltiContext(this._ctx, this.state);
            this.enterRule(_localctx, 24, bitmarkParser.RULE_learning_path_lti);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 698;
                    this.match(bitmarkParser.BitLearningPathLti);
                    this.state = 699;
                    this.format();
                    this.state = 700;
                    this.match(bitmarkParser.CL);
                    this.state = 704;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 701;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 706;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 714;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 707;
                                        this.bitElem();
                                        this.state = 711;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 708;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 713;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 716;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_step() {
            let _localctx = new Learning_path_stepContext(this._ctx, this.state);
            this.enterRule(_localctx, 26, bitmarkParser.RULE_learning_path_step);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 718;
                    this.match(bitmarkParser.BitLearningPathStep);
                    this.state = 719;
                    this.format();
                    this.state = 720;
                    this.match(bitmarkParser.CL);
                    this.state = 724;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 721;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 726;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 734;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 727;
                                        this.bitElem();
                                        this.state = 731;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 728;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 733;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 736;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_book() {
            let _localctx = new Learning_path_bookContext(this._ctx, this.state);
            this.enterRule(_localctx, 28, bitmarkParser.RULE_learning_path_book);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 738;
                    this.match(bitmarkParser.BitLearningPathBook);
                    this.state = 739;
                    this.format();
                    this.state = 740;
                    this.match(bitmarkParser.CL);
                    this.state = 744;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 741;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 746;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 754;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 747;
                                        this.bitElem();
                                        this.state = 751;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 748;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 753;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 756;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 39, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_sign() {
            let _localctx = new Learning_path_signContext(this._ctx, this.state);
            this.enterRule(_localctx, 30, bitmarkParser.RULE_learning_path_sign);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 758;
                    this.match(bitmarkParser.BitLearningPathSign);
                    this.state = 759;
                    this.format();
                    this.state = 760;
                    this.match(bitmarkParser.CL);
                    this.state = 764;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 761;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 766;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 774;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 767;
                                        this.bitElem();
                                        this.state = 771;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 768;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 773;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 776;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_video_call() {
            let _localctx = new Learning_path_video_callContext(this._ctx, this.state);
            this.enterRule(_localctx, 32, bitmarkParser.RULE_learning_path_video_call);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 778;
                    this.match(bitmarkParser.BitLearningPathVideoCall);
                    this.state = 779;
                    this.format();
                    this.state = 780;
                    this.match(bitmarkParser.CL);
                    this.state = 784;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 781;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 786;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 794;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 787;
                                        this.bitElem();
                                        this.state = 791;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 788;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 793;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 796;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 45, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_learning_goal() {
            let _localctx = new Learning_path_learning_goalContext(this._ctx, this.state);
            this.enterRule(_localctx, 34, bitmarkParser.RULE_learning_path_learning_goal);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 798;
                    this.match(bitmarkParser.BitLearningPathLearningGoal);
                    this.state = 799;
                    this.format();
                    this.state = 800;
                    this.match(bitmarkParser.CL);
                    this.state = 804;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 801;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 806;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 814;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 807;
                                        this.bitElem();
                                        this.state = 811;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 808;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 813;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 816;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_closing() {
            let _localctx = new Learning_path_closingContext(this._ctx, this.state);
            this.enterRule(_localctx, 36, bitmarkParser.RULE_learning_path_closing);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 818;
                    this.match(bitmarkParser.BitLearningPathClosing);
                    this.state = 819;
                    this.format();
                    this.state = 820;
                    this.match(bitmarkParser.CL);
                    this.state = 824;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 821;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 826;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 834;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 827;
                                        this.bitElem();
                                        this.state = 831;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 828;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 833;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 836;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 51, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_feedback() {
            let _localctx = new Learning_path_feedbackContext(this._ctx, this.state);
            this.enterRule(_localctx, 38, bitmarkParser.RULE_learning_path_feedback);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 838;
                    this.match(bitmarkParser.BitLearningPathFeedback);
                    this.state = 839;
                    this.format();
                    this.state = 840;
                    this.match(bitmarkParser.CL);
                    this.state = 844;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 841;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 846;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 854;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 847;
                                        this.bitElem();
                                        this.state = 851;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 848;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 853;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 856;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 54, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_bot_training() {
            let _localctx = new Learning_path_bot_trainingContext(this._ctx, this.state);
            this.enterRule(_localctx, 40, bitmarkParser.RULE_learning_path_bot_training);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 858;
                    this.match(bitmarkParser.BitLearningPathBotTraining);
                    this.state = 859;
                    this.format();
                    this.state = 860;
                    this.match(bitmarkParser.CL);
                    this.state = 864;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 861;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 866;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 874;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 867;
                                        this.bitElem();
                                        this.state = 871;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 868;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 873;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 876;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 57, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_external_link() {
            let _localctx = new Learning_path_external_linkContext(this._ctx, this.state);
            this.enterRule(_localctx, 42, bitmarkParser.RULE_learning_path_external_link);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 878;
                    this.match(bitmarkParser.BitLearningPathExternalLink);
                    this.state = 879;
                    this.format();
                    this.state = 880;
                    this.match(bitmarkParser.CL);
                    this.state = 884;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 881;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 886;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 894;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 887;
                                        this.bitElem();
                                        this.state = 891;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 888;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 893;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 896;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_classroom_training() {
            let _localctx = new Learning_path_classroom_trainingContext(this._ctx, this.state);
            this.enterRule(_localctx, 44, bitmarkParser.RULE_learning_path_classroom_training);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 898;
                    this.match(bitmarkParser.BitLearningPathClassroomTraining);
                    this.state = 899;
                    this.format();
                    this.state = 900;
                    this.match(bitmarkParser.CL);
                    this.state = 904;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 901;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 906;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 914;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 907;
                                        this.bitElem();
                                        this.state = 911;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 908;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 913;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 916;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learning_path_classroom_event() {
            let _localctx = new Learning_path_classroom_eventContext(this._ctx, this.state);
            this.enterRule(_localctx, 46, bitmarkParser.RULE_learning_path_classroom_event);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 918;
                    this.match(bitmarkParser.BitLearningPathClassroomEvent);
                    this.state = 919;
                    this.format();
                    this.state = 920;
                    this.match(bitmarkParser.CL);
                    this.state = 924;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 921;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 926;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 934;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 927;
                                        this.bitElem();
                                        this.state = 931;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 928;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 933;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 936;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 66, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bot_action_send() {
            let _localctx = new Bot_action_sendContext(this._ctx, this.state);
            this.enterRule(_localctx, 48, bitmarkParser.RULE_bot_action_send);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 938;
                    this.match(bitmarkParser.BitBotActionSend);
                    this.state = 939;
                    this.format();
                    this.state = 940;
                    this.match(bitmarkParser.CL);
                    this.state = 944;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 941;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 946;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 954;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 947;
                                        this.bitElem();
                                        this.state = 951;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 948;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 953;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 956;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 69, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bot_action_announce() {
            let _localctx = new Bot_action_announceContext(this._ctx, this.state);
            this.enterRule(_localctx, 50, bitmarkParser.RULE_bot_action_announce);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 958;
                    this.match(bitmarkParser.BitBotActionAnnounce);
                    this.state = 959;
                    this.format();
                    this.state = 960;
                    this.match(bitmarkParser.CL);
                    this.state = 964;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 961;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 966;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 974;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 967;
                                        this.bitElem();
                                        this.state = 971;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 968;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 973;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 976;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 72, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bot_action_save() {
            let _localctx = new Bot_action_saveContext(this._ctx, this.state);
            this.enterRule(_localctx, 52, bitmarkParser.RULE_bot_action_save);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 978;
                    this.match(bitmarkParser.BitBotActionSave);
                    this.state = 979;
                    this.format();
                    this.state = 980;
                    this.match(bitmarkParser.CL);
                    this.state = 984;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 981;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 986;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 994;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 987;
                                        this.bitElem();
                                        this.state = 991;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 988;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 993;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 996;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 75, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bot_action_remind() {
            let _localctx = new Bot_action_remindContext(this._ctx, this.state);
            this.enterRule(_localctx, 54, bitmarkParser.RULE_bot_action_remind);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 998;
                    this.match(bitmarkParser.BitBotActionRemind);
                    this.state = 999;
                    this.format();
                    this.state = 1000;
                    this.match(bitmarkParser.CL);
                    this.state = 1004;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1001;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1006;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1014;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1007;
                                        this.bitElem();
                                        this.state = 1011;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1008;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1013;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1016;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 78, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bitElem() {
            let _localctx = new BitElemContext(this._ctx, this.state);
            this.enterRule(_localctx, 56, bitmarkParser.RULE_bitElem);
            try {
                this.state = 1049;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 79, this._ctx)) {
                    case 1:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 1018;
                            this.match(bitmarkParser.LIST_LINE);
                        }
                        break;
                    case 2:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 1019;
                            this.dclines();
                        }
                        break;
                    case 3:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 1020;
                            this.gap();
                        }
                        break;
                    case 4:
                        this.enterOuterAlt(_localctx, 4);
                        {
                            this.state = 1021;
                            this.reference();
                        }
                        break;
                    case 5:
                        this.enterOuterAlt(_localctx, 5);
                        {
                            this.state = 1022;
                            this.dateprop();
                        }
                        break;
                    case 6:
                        this.enterOuterAlt(_localctx, 6);
                        {
                            this.state = 1023;
                            this.progress();
                        }
                        break;
                    case 7:
                        this.enterOuterAlt(_localctx, 7);
                        {
                            this.state = 1024;
                            this.atdef();
                        }
                        break;
                    case 8:
                        this.enterOuterAlt(_localctx, 8);
                        {
                            this.state = 1025;
                            this.dollarans();
                        }
                        break;
                    case 9:
                        this.enterOuterAlt(_localctx, 9);
                        {
                            this.state = 1026;
                            this.partans();
                        }
                        break;
                    case 10:
                        this.enterOuterAlt(_localctx, 10);
                        {
                            this.state = 1027;
                            this.item();
                        }
                        break;
                    case 11:
                        this.enterOuterAlt(_localctx, 11);
                        {
                            this.state = 1028;
                            this.title();
                        }
                        break;
                    case 12:
                        this.enterOuterAlt(_localctx, 12);
                        {
                            this.state = 1029;
                            this.instruction();
                        }
                        break;
                    case 13:
                        this.enterOuterAlt(_localctx, 13);
                        {
                            this.state = 1030;
                            this.hint();
                        }
                        break;
                    case 14:
                        this.enterOuterAlt(_localctx, 14);
                        {
                            this.state = 1031;
                            this.s_and_w();
                        }
                        break;
                    case 15:
                        this.enterOuterAlt(_localctx, 15);
                        {
                            this.state = 1032;
                            this.example();
                        }
                        break;
                    case 16:
                        this.enterOuterAlt(_localctx, 16);
                        {
                            this.state = 1033;
                            this.bool_label();
                        }
                        break;
                    case 17:
                        this.enterOuterAlt(_localctx, 17);
                        {
                            this.state = 1034;
                            this.progress_points();
                        }
                        break;
                    case 18:
                        this.enterOuterAlt(_localctx, 18);
                        {
                            this.state = 1035;
                            this.istracked();
                        }
                        break;
                    case 19:
                        this.enterOuterAlt(_localctx, 19);
                        {
                            this.state = 1036;
                            this.isinfoonly();
                        }
                        break;
                    case 20:
                        this.enterOuterAlt(_localctx, 20);
                        {
                            this.state = 1037;
                            this.imagebit();
                        }
                        break;
                    case 21:
                        this.enterOuterAlt(_localctx, 21);
                        {
                            this.state = 1038;
                            this.audiobit();
                        }
                        break;
                    case 22:
                        this.enterOuterAlt(_localctx, 22);
                        {
                            this.state = 1039;
                            this.videobit();
                        }
                        break;
                    case 23:
                        this.enterOuterAlt(_localctx, 23);
                        {
                            this.state = 1040;
                            this.articlebit();
                        }
                        break;
                    case 24:
                        this.enterOuterAlt(_localctx, 24);
                        {
                            this.state = 1041;
                            this.documentbit();
                        }
                        break;
                    case 25:
                        this.enterOuterAlt(_localctx, 25);
                        {
                            this.state = 1042;
                            this.appbit();
                        }
                        break;
                    case 26:
                        this.enterOuterAlt(_localctx, 26);
                        {
                            this.state = 1043;
                            this.websitebit();
                        }
                        break;
                    case 27:
                        this.enterOuterAlt(_localctx, 27);
                        {
                            this.state = 1044;
                            this.stillimagefilmbit();
                        }
                        break;
                    case 28:
                        this.enterOuterAlt(_localctx, 28);
                        {
                            this.state = 1045;
                            this.angleref();
                        }
                        break;
                    case 29:
                        this.enterOuterAlt(_localctx, 29);
                        {
                            this.state = 1046;
                            this.anchor();
                        }
                        break;
                    case 30:
                        this.enterOuterAlt(_localctx, 30);
                        {
                            this.state = 1047;
                            this.bracketed_text();
                        }
                        break;
                    case 31:
                        this.enterOuterAlt(_localctx, 31);
                        {
                            this.state = 1048;
                            this.sp();
                        }
                        break;
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        gap() {
            let _localctx = new GapContext(this._ctx, this.state);
            this.enterRule(_localctx, 58, bitmarkParser.RULE_gap);
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1051;
                    this.single_gap();
                    this.state = 1059;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 81, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                this.state = 1057;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.OPU:
                                        {
                                            this.state = 1052;
                                            this.single_gap();
                                        }
                                        break;
                                    case bitmarkParser.OPB:
                                        {
                                            this.state = 1053;
                                            this.instruction();
                                        }
                                        break;
                                    case bitmarkParser.OPQ:
                                        {
                                            this.state = 1054;
                                            this.hint();
                                        }
                                        break;
                                    case bitmarkParser.OPC:
                                        {
                                            this.state = 1055;
                                            this.item();
                                        }
                                        break;
                                    case bitmarkParser.AtExampleWithStr:
                                    case bitmarkParser.AtExamplecol:
                                    case bitmarkParser.AtExamplecl:
                                        {
                                            this.state = 1056;
                                            this.example();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                        }
                        this.state = 1061;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 81, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        single_gap() {
            let _localctx = new Single_gapContext(this._ctx, this.state);
            this.enterRule(_localctx, 60, bitmarkParser.RULE_single_gap);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1062;
                    this.match(bitmarkParser.OPU);
                    this.state = 1066;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 82, this._ctx)) {
                        case 1:
                            {
                                this.state = 1063;
                                this.match(bitmarkParser.NUMERIC);
                            }
                            break;
                        case 2:
                            {
                                this.state = 1064;
                                this.match(bitmarkParser.STRING);
                            }
                            break;
                        case 3:
                            // tslint:disable-next-line:no-empty
                            {
                            }
                            break;
                    }
                    this.state = 1071;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                        {
                            {
                                this.state = 1068;
                                this.s_and_w();
                            }
                        }
                        this.state = 1073;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1074;
                    this.clnsp();
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        choice_plus() {
            let _localctx = new Choice_plusContext(this._ctx, this.state);
            this.enterRule(_localctx, 62, bitmarkParser.RULE_choice_plus);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1077;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.OPC) {
                        {
                            this.state = 1076;
                            this.item();
                        }
                    }
                    this.state = 1079;
                    this.match(bitmarkParser.OPP);
                    this.state = 1081;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        {
                            {
                                this.state = 1080;
                                this.s_and_w();
                            }
                        }
                        this.state = 1083;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                    this.state = 1085;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        choice_minus() {
            let _localctx = new Choice_minusContext(this._ctx, this.state);
            this.enterRule(_localctx, 64, bitmarkParser.RULE_choice_minus);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1088;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.OPC) {
                        {
                            this.state = 1087;
                            this.item();
                        }
                    }
                    this.state = 1090;
                    this.match(bitmarkParser.OPM);
                    this.state = 1092;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        {
                            {
                                this.state = 1091;
                                this.s_and_w();
                            }
                        }
                        this.state = 1094;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                    this.state = 1096;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        choice_star() {
            let _localctx = new Choice_starContext(this._ctx, this.state);
            this.enterRule(_localctx, 66, bitmarkParser.RULE_choice_star);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1099;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.OPC) {
                        {
                            this.state = 1098;
                            this.item();
                        }
                    }
                    this.state = 1101;
                    this.match(bitmarkParser.OPR);
                    this.state = 1103;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        {
                            {
                                this.state = 1102;
                                this.s_and_w();
                            }
                        }
                        this.state = 1105;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                    this.state = 1107;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        essay() {
            let _localctx = new EssayContext(this._ctx, this.state);
            this.enterRule(_localctx, 68, bitmarkParser.RULE_essay);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1109;
                    this.match(bitmarkParser.BitEssay);
                    this.state = 1110;
                    this.format();
                    this.state = 1111;
                    this.match(bitmarkParser.CL);
                    this.state = 1112;
                    this.match(bitmarkParser.NL);
                    this.state = 1122;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 91, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    {
                                        this.state = 1113;
                                        this.bitElem();
                                    }
                                    this.state = 1117;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 90, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1114;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1119;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 90, this._ctx);
                                    }
                                }
                            }
                        }
                        this.state = 1124;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 91, this._ctx);
                    }
                    this.state = 1134;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 93, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1128;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 1125;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 1130;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    {
                                        this.state = 1131;
                                        this.ml_example();
                                    }
                                }
                            }
                        }
                        this.state = 1136;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 93, this._ctx);
                    }
                    this.state = 1140;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1137;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 1142;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
                    }
                    this.state = 1156;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 97, this._ctx)) {
                        case 1:
                            {
                                this.state = 1143;
                                this.resource();
                                this.state = 1153;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 96, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1147;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 1144;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 1149;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 1150;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 1155;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 96, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        ml_example() {
            let _localctx = new Ml_exampleContext(this._ctx, this.state);
            this.enterRule(_localctx, 70, bitmarkParser.RULE_ml_example);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1158;
                    this.match(bitmarkParser.AtExamplecol);
                    this.state = 1166;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                        {
                            this.state = 1160;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.NL) {
                                {
                                    this.state = 1159;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            this.state = 1162;
                            this.lines();
                            this.state = 1164;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.NL) {
                                {
                                    this.state = 1163;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                    }
                    this.state = 1168;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        partans() {
            let _localctx = new PartansContext(this._ctx, this.state);
            this.enterRule(_localctx, 72, bitmarkParser.RULE_partans);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1170;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.AtPartialAnswerS || _la === bitmarkParser.AtPartialAnswer)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        resource() {
            let _localctx = new ResourceContext(this._ctx, this.state);
            this.enterRule(_localctx, 74, bitmarkParser.RULE_resource);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1172;
                    this.bitElem();
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        correction() {
            let _localctx = new CorrectionContext(this._ctx, this.state);
            this.enterRule(_localctx, 76, bitmarkParser.RULE_correction);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1174;
                    this.match(bitmarkParser.BitCorrection);
                    this.state = 1175;
                    this.format();
                    this.state = 1176;
                    this.match(bitmarkParser.CL);
                    this.state = 1177;
                    this.match(bitmarkParser.NL);
                    this.state = 1187;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 102, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1178;
                                    this.bitElem();
                                    this.state = 1182;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1179;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1184;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
                                    }
                                }
                            }
                        }
                        this.state = 1189;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 102, this._ctx);
                    }
                    this.state = 1193;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.OPP || _la === bitmarkParser.OPM) {
                        {
                            {
                                this.state = 1190;
                                this.corrs();
                            }
                        }
                        this.state = 1195;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1199;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 104, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1196;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 1201;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 104, this._ctx);
                    }
                    this.state = 1215;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 107, this._ctx)) {
                        case 1:
                            {
                                this.state = 1202;
                                this.resource();
                                this.state = 1212;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 106, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1206;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 1203;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 1208;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 1209;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 1214;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 106, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        corrs() {
            let _localctx = new CorrsContext(this._ctx, this.state);
            this.enterRule(_localctx, 78, bitmarkParser.RULE_corrs);
            try {
                let _alt;
                this.state = 1235;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.OPM:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 1217;
                            this.match(bitmarkParser.OPM);
                            this.state = 1221;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
                            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1 + 1) {
                                    {
                                        {
                                            this.state = 1218;
                                            this.matchWildcard();
                                        }
                                    }
                                }
                                this.state = 1223;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
                            }
                            this.state = 1224;
                            this.match(bitmarkParser.CL);
                            this.state = 1225;
                            this.match(bitmarkParser.NL);
                        }
                        break;
                    case bitmarkParser.OPP:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 1226;
                            this.match(bitmarkParser.OPP);
                            this.state = 1230;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
                            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1 + 1) {
                                    {
                                        {
                                            this.state = 1227;
                                            this.matchWildcard();
                                        }
                                    }
                                }
                                this.state = 1232;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
                            }
                            this.state = 1233;
                            this.match(bitmarkParser.CL);
                            this.state = 1234;
                            this.match(bitmarkParser.NL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        mark_() {
            let _localctx = new Mark_Context(this._ctx, this.state);
            this.enterRule(_localctx, 80, bitmarkParser.RULE_mark_);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1237;
                    this.match(bitmarkParser.BitMark);
                    this.state = 1238;
                    this.format();
                    this.state = 1239;
                    this.match(bitmarkParser.CL);
                    this.state = 1240;
                    this.match(bitmarkParser.NL);
                    this.state = 1253;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 113, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1243;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 111, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 1241;
                                                this.bitElem();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 1242;
                                                this.mark_text();
                                            }
                                            break;
                                    }
                                    this.state = 1248;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 112, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1245;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1250;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 112, this._ctx);
                                    }
                                }
                            }
                        }
                        this.state = 1255;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 113, this._ctx);
                    }
                    this.state = 1259;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 114, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1256;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 1261;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 114, this._ctx);
                    }
                    this.state = 1275;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 117, this._ctx)) {
                        case 1:
                            {
                                this.state = 1262;
                                this.resource();
                                this.state = 1272;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 116, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1266;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 1263;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 1268;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 1269;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 1274;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 116, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        mark_text() {
            let _localctx = new Mark_textContext(this._ctx, this.state);
            this.enterRule(_localctx, 82, bitmarkParser.RULE_mark_text);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1277;
                    this.match(bitmarkParser.OPS);
                    this.state = 1278;
                    this.s_and_w();
                    this.state = 1279;
                    this.match(bitmarkParser.CL);
                    this.state = 1281;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.OPAMARK) {
                        {
                            this.state = 1280;
                            this.mark_color();
                        }
                    }
                    this.state = 1288;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                this.state = 1286;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.OPQ:
                                        {
                                            this.state = 1283;
                                            this.hint();
                                        }
                                        break;
                                    case bitmarkParser.OPC:
                                        {
                                            this.state = 1284;
                                            this.item();
                                        }
                                        break;
                                    case bitmarkParser.OPB:
                                        {
                                            this.state = 1285;
                                            this.instruction();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                        }
                        this.state = 1290;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        mark_color() {
            let _localctx = new Mark_colorContext(this._ctx, this.state);
            this.enterRule(_localctx, 84, bitmarkParser.RULE_mark_color);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1291;
                    this.match(bitmarkParser.OPAMARK);
                    this.state = 1295;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S) {
                        {
                            {
                                this.state = 1292;
                                this.match(bitmarkParser.S);
                            }
                        }
                        this.state = 1297;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1298;
                    this.match(bitmarkParser.STRING);
                    this.state = 1302;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S) {
                        {
                            {
                                this.state = 1299;
                                this.match(bitmarkParser.S);
                            }
                        }
                        this.state = 1304;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1305;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        document_upload() {
            let _localctx = new Document_uploadContext(this._ctx, this.state);
            this.enterRule(_localctx, 86, bitmarkParser.RULE_document_upload);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1307;
                    this.match(bitmarkParser.BitDocup);
                    this.state = 1309;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 125)) & ~0x1F) === 0 && ((1 << (_la - 125)) & ((1 << (bitmarkParser.Image_type - 125)) | (1 << (bitmarkParser.Audio_type - 125)) | (1 << (bitmarkParser.Video_type - 125)))) !== 0)) {
                        {
                            this.state = 1308;
                            _la = this._input.LA(1);
                            if (!(((((_la - 125)) & ~0x1F) === 0 && ((1 << (_la - 125)) & ((1 << (bitmarkParser.Image_type - 125)) | (1 << (bitmarkParser.Audio_type - 125)) | (1 << (bitmarkParser.Video_type - 125)))) !== 0))) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    this.state = 1311;
                    this.match(bitmarkParser.CL);
                    this.state = 1312;
                    this.match(bitmarkParser.NL);
                    this.state = 1322;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 125, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1313;
                                    this.bitElem();
                                    this.state = 1317;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 124, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1314;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1319;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 124, this._ctx);
                                    }
                                }
                            }
                        }
                        this.state = 1324;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 125, this._ctx);
                    }
                    this.state = 1328;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 126, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1325;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 1330;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 126, this._ctx);
                    }
                    this.state = 1344;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 129, this._ctx)) {
                        case 1:
                            {
                                this.state = 1331;
                                this.resource();
                                this.state = 1341;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 128, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1335;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 1332;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 1337;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 1338;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 1343;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 128, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        take_audio() {
            let _localctx = new Take_audioContext(this._ctx, this.state);
            this.enterRule(_localctx, 88, bitmarkParser.RULE_take_audio);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1346;
                    this.match(bitmarkParser.BitTakeAudio);
                    this.state = 1347;
                    this.format();
                    this.state = 1348;
                    this.match(bitmarkParser.CL);
                    this.state = 1349;
                    this.match(bitmarkParser.NL);
                    this.state = 1359;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 131, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1350;
                                    this.bitElem();
                                    this.state = 1354;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1351;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1356;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
                                    }
                                }
                            }
                        }
                        this.state = 1361;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 131, this._ctx);
                    }
                    this.state = 1365;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1362;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 1367;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
                    }
                    this.state = 1381;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 135, this._ctx)) {
                        case 1:
                            {
                                this.state = 1368;
                                this.resource();
                                this.state = 1378;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1372;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 1369;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 1374;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 1375;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 1380;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        take_picture() {
            let _localctx = new Take_pictureContext(this._ctx, this.state);
            this.enterRule(_localctx, 90, bitmarkParser.RULE_take_picture);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1383;
                    this.match(bitmarkParser.BitTakepic);
                    this.state = 1384;
                    this.format();
                    this.state = 1385;
                    this.match(bitmarkParser.CL);
                    this.state = 1386;
                    this.match(bitmarkParser.NL);
                    this.state = 1396;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 137, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1387;
                                    this.bitElem();
                                    this.state = 1391;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 136, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1388;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1393;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 136, this._ctx);
                                    }
                                }
                            }
                        }
                        this.state = 1398;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 137, this._ctx);
                    }
                    this.state = 1402;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 138, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1399;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 1404;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 138, this._ctx);
                    }
                    this.state = 1418;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 141, this._ctx)) {
                        case 1:
                            {
                                this.state = 1405;
                                this.resource();
                                this.state = 1415;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1409;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 1406;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 1411;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 1412;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 1417;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        record_audio() {
            let _localctx = new Record_audioContext(this._ctx, this.state);
            this.enterRule(_localctx, 92, bitmarkParser.RULE_record_audio);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1420;
                    this.match(bitmarkParser.BitRecaud);
                    this.state = 1421;
                    this.format();
                    this.state = 1422;
                    this.match(bitmarkParser.CL);
                    this.state = 1423;
                    this.match(bitmarkParser.NL);
                    this.state = 1433;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1424;
                                    this.bitElem();
                                    this.state = 1428;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1425;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1430;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
                                    }
                                }
                            }
                        }
                        this.state = 1435;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
                    }
                    this.state = 1439;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1436;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 1441;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
                    }
                    this.state = 1455;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 147, this._ctx)) {
                        case 1:
                            {
                                this.state = 1442;
                                this.resource();
                                this.state = 1452;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 146, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1446;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 1443;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 1448;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 1449;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 1454;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 146, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        preparation_note() {
            let _localctx = new Preparation_noteContext(this._ctx, this.state);
            this.enterRule(_localctx, 94, bitmarkParser.RULE_preparation_note);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1457;
                    this.match(bitmarkParser.BitPrepnote);
                    this.state = 1458;
                    this.format();
                    this.state = 1459;
                    this.match(bitmarkParser.CL);
                    this.state = 1463;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1460;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 1465;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
                    }
                    this.state = 1475;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 150, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1466;
                                    this.bitElem();
                                    this.state = 1470;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1467;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1472;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
                                    }
                                }
                            }
                        }
                        this.state = 1477;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 150, this._ctx);
                    }
                    this.state = 1479;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 151, this._ctx)) {
                        case 1:
                            {
                                this.state = 1478;
                                this.lines();
                            }
                            break;
                    }
                    this.state = 1484;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1481;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 1486;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
                    }
                    this.state = 1500;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 155, this._ctx)) {
                        case 1:
                            {
                                this.state = 1487;
                                this.resource();
                                this.state = 1497;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 154, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1491;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 1488;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 1493;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 1494;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 1499;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 154, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        assignment() {
            let _localctx = new AssignmentContext(this._ctx, this.state);
            this.enterRule(_localctx, 96, bitmarkParser.RULE_assignment);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1502;
                    this.match(bitmarkParser.BitAssign);
                    this.state = 1503;
                    this.format();
                    this.state = 1504;
                    this.match(bitmarkParser.CL);
                    this.state = 1506;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1505;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1508;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 156, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 1519;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 158, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1510;
                                    this.bitElem();
                                    this.state = 1514;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 157, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1511;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1516;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 157, this._ctx);
                                    }
                                }
                            }
                        }
                        this.state = 1521;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 158, this._ctx);
                    }
                    this.state = 1523;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 159, this._ctx)) {
                        case 1:
                            {
                                this.state = 1522;
                                this.lines();
                            }
                            break;
                    }
                    this.state = 1528;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 160, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 1525;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 1530;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 160, this._ctx);
                    }
                    this.state = 1544;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 163, this._ctx)) {
                        case 1:
                            {
                                this.state = 1531;
                                this.resource();
                                this.state = 1541;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1535;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 1532;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 1537;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 1538;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 1543;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        article() {
            let _localctx = new ArticleContext(this._ctx, this.state);
            this.enterRule(_localctx, 98, bitmarkParser.RULE_article);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1546;
                    this.match(bitmarkParser.BitArticle);
                    this.state = 1547;
                    this.format();
                    this.state = 1548;
                    this.match(bitmarkParser.CL);
                    this.state = 1552;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1549;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1554;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1562;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1555;
                                        this.bitElem();
                                        this.state = 1559;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1556;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1561;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1564;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        statement() {
            let _localctx = new StatementContext(this._ctx, this.state);
            this.enterRule(_localctx, 100, bitmarkParser.RULE_statement);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1566;
                    this.match(bitmarkParser.BitStatement);
                    this.state = 1567;
                    this.format();
                    this.state = 1568;
                    this.match(bitmarkParser.CL);
                    this.state = 1572;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1569;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1574;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1582;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1575;
                                        this.bitElem();
                                        this.state = 1579;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1576;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1581;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1584;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        details() {
            let _localctx = new DetailsContext(this._ctx, this.state);
            this.enterRule(_localctx, 102, bitmarkParser.RULE_details);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1586;
                    this.match(bitmarkParser.BitDetails);
                    this.state = 1587;
                    this.format();
                    this.state = 1588;
                    this.match(bitmarkParser.CL);
                    this.state = 1592;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1589;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1594;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1602;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1595;
                                        this.bitElem();
                                        this.state = 1599;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1596;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1601;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1604;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 172, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        sample_solution() {
            let _localctx = new Sample_solutionContext(this._ctx, this.state);
            this.enterRule(_localctx, 104, bitmarkParser.RULE_sample_solution);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1606;
                    this.match(bitmarkParser.BitSampleSolution);
                    this.state = 1607;
                    this.format();
                    this.state = 1608;
                    this.match(bitmarkParser.CL);
                    this.state = 1612;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1609;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1614;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1622;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1615;
                                        this.bitElem();
                                        this.state = 1619;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 174, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1616;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1621;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 174, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1624;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        buttoncopytext() {
            let _localctx = new ButtoncopytextContext(this._ctx, this.state);
            this.enterRule(_localctx, 106, bitmarkParser.RULE_buttoncopytext);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1626;
                    this.match(bitmarkParser.BitButtonCopytext);
                    this.state = 1627;
                    this.format();
                    this.state = 1628;
                    this.match(bitmarkParser.CL);
                    this.state = 1632;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1629;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1634;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1642;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1635;
                                        this.bitElem();
                                        this.state = 1639;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 177, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1636;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1641;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 177, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1644;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        wbtcontinue() {
            let _localctx = new WbtcontinueContext(this._ctx, this.state);
            this.enterRule(_localctx, 108, bitmarkParser.RULE_wbtcontinue);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1646;
                    this.match(bitmarkParser.BitWbtContinue);
                    this.state = 1647;
                    this.format();
                    this.state = 1648;
                    this.match(bitmarkParser.CL);
                    this.state = 1652;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1649;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1654;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1662;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1655;
                                        this.bitElem();
                                        this.state = 1659;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 180, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1656;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1661;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 180, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1664;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        learningpathdetails() {
            let _localctx = new LearningpathdetailsContext(this._ctx, this.state);
            this.enterRule(_localctx, 110, bitmarkParser.RULE_learningpathdetails);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1666;
                    this.match(bitmarkParser.BitLearningPathDetails);
                    this.state = 1667;
                    this.format();
                    this.state = 1668;
                    this.match(bitmarkParser.CL);
                    this.state = 1672;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1669;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1674;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1682;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1675;
                                        this.bitElem();
                                        this.state = 1679;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 183, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1676;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1681;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 183, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1684;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 184, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        page() {
            let _localctx = new PageContext(this._ctx, this.state);
            this.enterRule(_localctx, 112, bitmarkParser.RULE_page);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1686;
                    this.match(bitmarkParser.BitPage);
                    this.state = 1687;
                    this.format();
                    this.state = 1688;
                    this.match(bitmarkParser.CL);
                    this.state = 1692;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1689;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1694;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1702;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1695;
                                        this.bitElem();
                                        this.state = 1699;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1696;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1701;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1704;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 187, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        note() {
            let _localctx = new NoteContext(this._ctx, this.state);
            this.enterRule(_localctx, 114, bitmarkParser.RULE_note);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1706;
                    this.match(bitmarkParser.BitNote);
                    this.state = 1707;
                    this.format();
                    this.state = 1708;
                    this.match(bitmarkParser.CL);
                    this.state = 1712;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1709;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1714;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1722;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1715;
                                        this.bitElem();
                                        this.state = 1719;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1716;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1721;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1724;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        info() {
            let _localctx = new InfoContext(this._ctx, this.state);
            this.enterRule(_localctx, 116, bitmarkParser.RULE_info);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1726;
                    this.match(bitmarkParser.BitInfo);
                    this.state = 1727;
                    this.format();
                    this.state = 1728;
                    this.match(bitmarkParser.CL);
                    this.state = 1732;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1729;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1734;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1742;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1735;
                                        this.bitElem();
                                        this.state = 1739;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1736;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1741;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1744;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 193, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        warning() {
            let _localctx = new WarningContext(this._ctx, this.state);
            this.enterRule(_localctx, 118, bitmarkParser.RULE_warning);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1746;
                    this.match(bitmarkParser.BitWarning);
                    this.state = 1747;
                    this.format();
                    this.state = 1748;
                    this.match(bitmarkParser.CL);
                    this.state = 1752;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1749;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1754;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1762;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1755;
                                        this.bitElem();
                                        this.state = 1759;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1756;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1761;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1764;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 196, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        remark() {
            let _localctx = new RemarkContext(this._ctx, this.state);
            this.enterRule(_localctx, 120, bitmarkParser.RULE_remark);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1766;
                    this.match(bitmarkParser.BitRemark);
                    this.state = 1767;
                    this.format();
                    this.state = 1768;
                    this.match(bitmarkParser.CL);
                    this.state = 1772;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1769;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1774;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1782;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1775;
                                        this.bitElem();
                                        this.state = 1779;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1776;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1781;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1784;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 199, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        help() {
            let _localctx = new HelpContext(this._ctx, this.state);
            this.enterRule(_localctx, 122, bitmarkParser.RULE_help);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1786;
                    this.match(bitmarkParser.BitHelp);
                    this.state = 1787;
                    this.format();
                    this.state = 1788;
                    this.match(bitmarkParser.CL);
                    this.state = 1792;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1789;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1794;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1802;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1795;
                                        this.bitElem();
                                        this.state = 1799;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1796;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1801;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1804;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        danger() {
            let _localctx = new DangerContext(this._ctx, this.state);
            this.enterRule(_localctx, 124, bitmarkParser.RULE_danger);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1806;
                    this.match(bitmarkParser.BitDanger);
                    this.state = 1807;
                    this.format();
                    this.state = 1808;
                    this.match(bitmarkParser.CL);
                    this.state = 1812;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1809;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1814;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1822;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1815;
                                        this.bitElem();
                                        this.state = 1819;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1816;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1821;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1824;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 205, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bug() {
            let _localctx = new BugContext(this._ctx, this.state);
            this.enterRule(_localctx, 126, bitmarkParser.RULE_bug);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1826;
                    this.match(bitmarkParser.BitBug);
                    this.state = 1827;
                    this.format();
                    this.state = 1828;
                    this.match(bitmarkParser.CL);
                    this.state = 1832;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1829;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1834;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1842;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1835;
                                        this.bitElem();
                                        this.state = 1839;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1836;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1841;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1844;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 208, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        sidenote() {
            let _localctx = new SidenoteContext(this._ctx, this.state);
            this.enterRule(_localctx, 128, bitmarkParser.RULE_sidenote);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1846;
                    this.match(bitmarkParser.BitSidenote);
                    this.state = 1847;
                    this.format();
                    this.state = 1848;
                    this.match(bitmarkParser.CL);
                    this.state = 1852;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1849;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1854;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1862;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1855;
                                        this.bitElem();
                                        this.state = 1859;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 210, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1856;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1861;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 210, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1864;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        stickynote() {
            let _localctx = new StickynoteContext(this._ctx, this.state);
            this.enterRule(_localctx, 130, bitmarkParser.RULE_stickynote);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1866;
                    this.match(bitmarkParser.BitStickynote);
                    this.state = 1867;
                    this.format();
                    this.state = 1868;
                    this.match(bitmarkParser.CL);
                    this.state = 1872;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1869;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1874;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1882;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1875;
                                        this.bitElem();
                                        this.state = 1879;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1876;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1881;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1884;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 214, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        quote() {
            let _localctx = new QuoteContext(this._ctx, this.state);
            this.enterRule(_localctx, 132, bitmarkParser.RULE_quote);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1886;
                    this.match(bitmarkParser.BitQuote);
                    this.state = 1887;
                    this.format();
                    this.state = 1888;
                    this.match(bitmarkParser.CL);
                    this.state = 1892;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1889;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1894;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1902;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1895;
                                        this.bitElem();
                                        this.state = 1899;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1896;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1901;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1904;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 217, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        footnote() {
            let _localctx = new FootnoteContext(this._ctx, this.state);
            this.enterRule(_localctx, 134, bitmarkParser.RULE_footnote);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1906;
                    this.match(bitmarkParser.BitFootnote);
                    this.state = 1907;
                    this.format();
                    this.state = 1908;
                    this.match(bitmarkParser.CL);
                    this.state = 1912;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1909;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1914;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1922;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1915;
                                        this.bitElem();
                                        this.state = 1919;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1916;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1921;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1924;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 220, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        hintbit() {
            let _localctx = new HintbitContext(this._ctx, this.state);
            this.enterRule(_localctx, 136, bitmarkParser.RULE_hintbit);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1926;
                    this.match(bitmarkParser.BitHint);
                    this.state = 1927;
                    this.format();
                    this.state = 1928;
                    this.match(bitmarkParser.CL);
                    this.state = 1932;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1929;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1934;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1942;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1935;
                                        this.bitElem();
                                        this.state = 1939;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1936;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1941;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1944;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 223, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        examplebit() {
            let _localctx = new ExamplebitContext(this._ctx, this.state);
            this.enterRule(_localctx, 138, bitmarkParser.RULE_examplebit);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1946;
                    this.match(bitmarkParser.BitExample);
                    this.state = 1947;
                    this.format();
                    this.state = 1948;
                    this.match(bitmarkParser.CL);
                    this.state = 1952;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1949;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1954;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1962;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1955;
                                        this.bitElem();
                                        this.state = 1959;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1956;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1961;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1964;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        vendor_padlet_embed() {
            let _localctx = new Vendor_padlet_embedContext(this._ctx, this.state);
            this.enterRule(_localctx, 140, bitmarkParser.RULE_vendor_padlet_embed);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1966;
                    this.match(bitmarkParser.BitVendorPadletEmbed);
                    this.state = 1967;
                    this.format();
                    this.state = 1968;
                    this.match(bitmarkParser.CL);
                    this.state = 1972;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1969;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1974;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1982;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1975;
                                        this.bitElem();
                                        this.state = 1979;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1976;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 1981;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 1984;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        scorm() {
            let _localctx = new ScormContext(this._ctx, this.state);
            this.enterRule(_localctx, 142, bitmarkParser.RULE_scorm);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 1986;
                    this.match(bitmarkParser.BitScorm);
                    this.state = 1987;
                    this.format();
                    this.state = 1988;
                    this.match(bitmarkParser.CL);
                    this.state = 1992;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 1989;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1994;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2002;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1995;
                                        this.bitElem();
                                        this.state = 1999;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 1996;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2001;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2004;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_image() {
            let _localctx = new Bit_imageContext(this._ctx, this.state);
            this.enterRule(_localctx, 144, bitmarkParser.RULE_bit_image);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2006;
                    this.match(bitmarkParser.BitImage);
                    this.state = 2007;
                    this.format2();
                    this.state = 2008;
                    this.match(bitmarkParser.CL);
                    this.state = 2012;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2009;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2014;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2022;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2015;
                                        this.bitElem();
                                        this.state = 2019;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2016;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2021;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2024;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_imageLink() {
            let _localctx = new Bit_imageLinkContext(this._ctx, this.state);
            this.enterRule(_localctx, 146, bitmarkParser.RULE_bit_imageLink);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2026;
                    this.match(bitmarkParser.BitImageLink);
                    this.state = 2027;
                    this.format2();
                    this.state = 2028;
                    this.match(bitmarkParser.CL);
                    this.state = 2032;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2029;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2034;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2042;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2035;
                                        this.bitElem();
                                        this.state = 2039;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2036;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2041;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2044;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 238, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_imageZoom() {
            let _localctx = new Bit_imageZoomContext(this._ctx, this.state);
            this.enterRule(_localctx, 148, bitmarkParser.RULE_bit_imageZoom);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2046;
                    this.match(bitmarkParser.BitImageZoom);
                    this.state = 2047;
                    this.format2();
                    this.state = 2048;
                    this.match(bitmarkParser.CL);
                    this.state = 2052;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2049;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2054;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2062;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2055;
                                        this.bitElem();
                                        this.state = 2059;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 240, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2056;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2061;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 240, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2064;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_audio() {
            let _localctx = new Bit_audioContext(this._ctx, this.state);
            this.enterRule(_localctx, 150, bitmarkParser.RULE_bit_audio);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2066;
                    this.match(bitmarkParser.BitAudio);
                    this.state = 2067;
                    this.format2();
                    this.state = 2068;
                    this.match(bitmarkParser.CL);
                    this.state = 2072;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2069;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2074;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2082;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2075;
                                        this.bitElem();
                                        this.state = 2079;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2076;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2081;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2084;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_audioLink() {
            let _localctx = new Bit_audioLinkContext(this._ctx, this.state);
            this.enterRule(_localctx, 152, bitmarkParser.RULE_bit_audioLink);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2086;
                    this.match(bitmarkParser.BitAudioLink);
                    this.state = 2087;
                    this.format2();
                    this.state = 2088;
                    this.match(bitmarkParser.CL);
                    this.state = 2092;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2089;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2094;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2102;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2095;
                                        this.bitElem();
                                        this.state = 2099;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2096;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2101;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2104;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 247, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_audioEmbed() {
            let _localctx = new Bit_audioEmbedContext(this._ctx, this.state);
            this.enterRule(_localctx, 154, bitmarkParser.RULE_bit_audioEmbed);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2106;
                    this.match(bitmarkParser.BitAudioEmbed);
                    this.state = 2107;
                    this.format2();
                    this.state = 2108;
                    this.match(bitmarkParser.CL);
                    this.state = 2112;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2109;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2114;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2122;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2115;
                                        this.bitElem();
                                        this.state = 2119;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2116;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2121;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2124;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 250, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_video() {
            let _localctx = new Bit_videoContext(this._ctx, this.state);
            this.enterRule(_localctx, 156, bitmarkParser.RULE_bit_video);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2126;
                    this.match(bitmarkParser.BitVideo);
                    this.state = 2127;
                    this.format2();
                    this.state = 2128;
                    this.match(bitmarkParser.CL);
                    this.state = 2132;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2129;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2134;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2142;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2135;
                                        this.bitElem();
                                        this.state = 2139;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2136;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2141;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2144;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 253, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_videoLink() {
            let _localctx = new Bit_videoLinkContext(this._ctx, this.state);
            this.enterRule(_localctx, 158, bitmarkParser.RULE_bit_videoLink);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2146;
                    this.match(bitmarkParser.BitVideoLink);
                    this.state = 2147;
                    this.format2();
                    this.state = 2148;
                    this.match(bitmarkParser.CL);
                    this.state = 2152;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2149;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2154;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2162;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2155;
                                        this.bitElem();
                                        this.state = 2159;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2156;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2161;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2164;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_videoEmbed() {
            let _localctx = new Bit_videoEmbedContext(this._ctx, this.state);
            this.enterRule(_localctx, 160, bitmarkParser.RULE_bit_videoEmbed);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2166;
                    this.match(bitmarkParser.BitVideoEmbed);
                    this.state = 2167;
                    this.format2();
                    this.state = 2168;
                    this.match(bitmarkParser.CL);
                    this.state = 2172;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2169;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2174;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2182;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2175;
                                        this.bitElem();
                                        this.state = 2179;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2176;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2181;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2184;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_stillImageFilm() {
            let _localctx = new Bit_stillImageFilmContext(this._ctx, this.state);
            this.enterRule(_localctx, 162, bitmarkParser.RULE_bit_stillImageFilm);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2186;
                    this.match(bitmarkParser.BitStillImageFilm);
                    this.state = 2187;
                    this.format2();
                    this.state = 2188;
                    this.match(bitmarkParser.CL);
                    this.state = 2192;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2189;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2194;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2202;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2195;
                                        this.bitElem();
                                        this.state = 2199;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2196;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2201;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2204;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_stillImageFilmLink() {
            let _localctx = new Bit_stillImageFilmLinkContext(this._ctx, this.state);
            this.enterRule(_localctx, 164, bitmarkParser.RULE_bit_stillImageFilmLink);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2206;
                    this.match(bitmarkParser.BitStillImageFilmLink);
                    this.state = 2207;
                    this.format2();
                    this.state = 2208;
                    this.match(bitmarkParser.CL);
                    this.state = 2212;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2209;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2214;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2222;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2215;
                                        this.bitElem();
                                        this.state = 2219;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2216;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2221;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2224;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 265, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_stillImageFilmEmbed() {
            let _localctx = new Bit_stillImageFilmEmbedContext(this._ctx, this.state);
            this.enterRule(_localctx, 166, bitmarkParser.RULE_bit_stillImageFilmEmbed);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2226;
                    this.match(bitmarkParser.BitStillImageFilmEmbed);
                    this.state = 2227;
                    this.format2();
                    this.state = 2228;
                    this.match(bitmarkParser.CL);
                    this.state = 2232;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2229;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2234;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2242;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2235;
                                        this.bitElem();
                                        this.state = 2239;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 267, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2236;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2241;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 267, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2244;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_websiteLink() {
            let _localctx = new Bit_websiteLinkContext(this._ctx, this.state);
            this.enterRule(_localctx, 168, bitmarkParser.RULE_bit_websiteLink);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2246;
                    this.match(bitmarkParser.BitWebsiteLink);
                    this.state = 2247;
                    this.format2();
                    this.state = 2248;
                    this.match(bitmarkParser.CL);
                    this.state = 2252;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2249;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2254;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2262;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2255;
                                        this.bitElem();
                                        this.state = 2259;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 270, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2256;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2261;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 270, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2264;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_document() {
            let _localctx = new Bit_documentContext(this._ctx, this.state);
            this.enterRule(_localctx, 170, bitmarkParser.RULE_bit_document);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2266;
                    this.match(bitmarkParser.BitDocument);
                    this.state = 2267;
                    this.format2();
                    this.state = 2268;
                    this.match(bitmarkParser.CL);
                    this.state = 2272;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2269;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2274;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2282;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2275;
                                        this.bitElem();
                                        this.state = 2279;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 273, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2276;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2281;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 273, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2284;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_documentLink() {
            let _localctx = new Bit_documentLinkContext(this._ctx, this.state);
            this.enterRule(_localctx, 172, bitmarkParser.RULE_bit_documentLink);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2286;
                    this.match(bitmarkParser.BitDocumentLink);
                    this.state = 2287;
                    this.format2();
                    this.state = 2288;
                    this.match(bitmarkParser.CL);
                    this.state = 2292;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2289;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2294;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2302;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2295;
                                        this.bitElem();
                                        this.state = 2299;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 276, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2296;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2301;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 276, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2304;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_documentEmbed() {
            let _localctx = new Bit_documentEmbedContext(this._ctx, this.state);
            this.enterRule(_localctx, 174, bitmarkParser.RULE_bit_documentEmbed);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2306;
                    this.match(bitmarkParser.BitDocumentEmbed);
                    this.state = 2307;
                    this.format2();
                    this.state = 2308;
                    this.match(bitmarkParser.CL);
                    this.state = 2312;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2309;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2314;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2322;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2315;
                                        this.bitElem();
                                        this.state = 2319;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 279, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2316;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2321;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 279, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2324;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 280, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_documentDownload() {
            let _localctx = new Bit_documentDownloadContext(this._ctx, this.state);
            this.enterRule(_localctx, 176, bitmarkParser.RULE_bit_documentDownload);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2326;
                    this.match(bitmarkParser.BitDocumentDownload);
                    this.state = 2327;
                    this.format2();
                    this.state = 2328;
                    this.match(bitmarkParser.CL);
                    this.state = 2332;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2329;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2334;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2342;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2335;
                                        this.bitElem();
                                        this.state = 2339;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 282, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2336;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2341;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 282, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2344;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_appLink() {
            let _localctx = new Bit_appLinkContext(this._ctx, this.state);
            this.enterRule(_localctx, 178, bitmarkParser.RULE_bit_appLink);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2346;
                    this.match(bitmarkParser.BitAppLink);
                    this.state = 2347;
                    this.format2();
                    this.state = 2348;
                    this.match(bitmarkParser.CL);
                    this.state = 2352;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2349;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2354;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2362;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2355;
                                        this.bitElem();
                                        this.state = 2359;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2356;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2361;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2364;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bit_editorial() {
            let _localctx = new Bit_editorialContext(this._ctx, this.state);
            this.enterRule(_localctx, 180, bitmarkParser.RULE_bit_editorial);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2366;
                    this.match(bitmarkParser.BitEditorial);
                    this.state = 2367;
                    this.format2();
                    this.state = 2368;
                    this.match(bitmarkParser.CL);
                    this.state = 2372;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2369;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2374;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2382;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2375;
                                        this.bitElem();
                                        this.state = 2379;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 288, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2376;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2381;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 288, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2384;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_frontispiece() {
            let _localctx = new Book_frontispieceContext(this._ctx, this.state);
            this.enterRule(_localctx, 182, bitmarkParser.RULE_book_frontispiece);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2386;
                    this.match(bitmarkParser.BitBookFrontispiece);
                    this.state = 2387;
                    this.format();
                    this.state = 2388;
                    this.match(bitmarkParser.CL);
                    this.state = 2392;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2389;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2394;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2402;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2395;
                                        this.bitElem();
                                        this.state = 2399;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2396;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2401;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2404;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 292, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_title() {
            let _localctx = new Book_titleContext(this._ctx, this.state);
            this.enterRule(_localctx, 184, bitmarkParser.RULE_book_title);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2406;
                    this.match(bitmarkParser.BitBookTitle);
                    this.state = 2407;
                    this.format();
                    this.state = 2408;
                    this.match(bitmarkParser.CL);
                    this.state = 2412;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2409;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2414;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2422;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2415;
                                        this.bitElem();
                                        this.state = 2419;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2416;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2421;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2424;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_copyright() {
            let _localctx = new Book_copyrightContext(this._ctx, this.state);
            this.enterRule(_localctx, 186, bitmarkParser.RULE_book_copyright);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2426;
                    this.match(bitmarkParser.BitBookCopyright);
                    this.state = 2427;
                    this.format();
                    this.state = 2428;
                    this.match(bitmarkParser.CL);
                    this.state = 2432;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2429;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2434;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2442;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2435;
                                        this.bitElem();
                                        this.state = 2439;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2436;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2441;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2444;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_dedication() {
            let _localctx = new Book_dedicationContext(this._ctx, this.state);
            this.enterRule(_localctx, 188, bitmarkParser.RULE_book_dedication);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2446;
                    this.match(bitmarkParser.BitBookDedication);
                    this.state = 2447;
                    this.format();
                    this.state = 2448;
                    this.match(bitmarkParser.CL);
                    this.state = 2452;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2449;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2454;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2462;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2455;
                                        this.bitElem();
                                        this.state = 2459;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2456;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2461;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2464;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_forword() {
            let _localctx = new Book_forwordContext(this._ctx, this.state);
            this.enterRule(_localctx, 190, bitmarkParser.RULE_book_forword);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2466;
                    this.match(bitmarkParser.BitBookForword);
                    this.state = 2467;
                    this.format();
                    this.state = 2468;
                    this.match(bitmarkParser.CL);
                    this.state = 2472;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2469;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2474;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2482;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2475;
                                        this.bitElem();
                                        this.state = 2479;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2476;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2481;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2484;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 304, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_preface() {
            let _localctx = new Book_prefaceContext(this._ctx, this.state);
            this.enterRule(_localctx, 192, bitmarkParser.RULE_book_preface);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2486;
                    this.match(bitmarkParser.BitBookPreface);
                    this.state = 2487;
                    this.format();
                    this.state = 2488;
                    this.match(bitmarkParser.CL);
                    this.state = 2492;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2489;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2494;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2502;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2495;
                                        this.bitElem();
                                        this.state = 2499;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2496;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2501;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2504;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_prologue() {
            let _localctx = new Book_prologueContext(this._ctx, this.state);
            this.enterRule(_localctx, 194, bitmarkParser.RULE_book_prologue);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2506;
                    this.match(bitmarkParser.BitBookPrologue);
                    this.state = 2507;
                    this.format();
                    this.state = 2508;
                    this.match(bitmarkParser.CL);
                    this.state = 2512;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2509;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2514;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2522;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2515;
                                        this.bitElem();
                                        this.state = 2519;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2516;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2521;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2524;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 310, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_epilogue() {
            let _localctx = new Book_epilogueContext(this._ctx, this.state);
            this.enterRule(_localctx, 196, bitmarkParser.RULE_book_epilogue);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2526;
                    this.match(bitmarkParser.BitBookEpilogue);
                    this.state = 2527;
                    this.format();
                    this.state = 2528;
                    this.match(bitmarkParser.CL);
                    this.state = 2532;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2529;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2534;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2542;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2535;
                                        this.bitElem();
                                        this.state = 2539;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2536;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2541;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2544;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_introduction() {
            let _localctx = new Book_introductionContext(this._ctx, this.state);
            this.enterRule(_localctx, 198, bitmarkParser.RULE_book_introduction);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2546;
                    this.match(bitmarkParser.BitBookIntroduction);
                    this.state = 2547;
                    this.format();
                    this.state = 2548;
                    this.match(bitmarkParser.CL);
                    this.state = 2552;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2549;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2554;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2562;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2555;
                                        this.bitElem();
                                        this.state = 2559;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2556;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2561;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2564;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_inciting_incident() {
            let _localctx = new Book_inciting_incidentContext(this._ctx, this.state);
            this.enterRule(_localctx, 200, bitmarkParser.RULE_book_inciting_incident);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2566;
                    this.match(bitmarkParser.BitBookIncitingIncident);
                    this.state = 2567;
                    this.format();
                    this.state = 2568;
                    this.match(bitmarkParser.CL);
                    this.state = 2572;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2569;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2574;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2582;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2575;
                                        this.bitElem();
                                        this.state = 2579;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2576;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2581;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2584;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_conclusion() {
            let _localctx = new Book_conclusionContext(this._ctx, this.state);
            this.enterRule(_localctx, 202, bitmarkParser.RULE_book_conclusion);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2586;
                    this.match(bitmarkParser.BitBookConclusion);
                    this.state = 2587;
                    this.format();
                    this.state = 2588;
                    this.match(bitmarkParser.CL);
                    this.state = 2592;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2589;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2594;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2602;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2595;
                                        this.bitElem();
                                        this.state = 2599;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2596;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2601;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2604;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_afterword() {
            let _localctx = new Book_afterwordContext(this._ctx, this.state);
            this.enterRule(_localctx, 204, bitmarkParser.RULE_book_afterword);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2606;
                    this.match(bitmarkParser.BitBookAfterword);
                    this.state = 2607;
                    this.format();
                    this.state = 2608;
                    this.match(bitmarkParser.CL);
                    this.state = 2612;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2609;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2614;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2622;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2615;
                                        this.bitElem();
                                        this.state = 2619;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2616;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2621;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2624;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 325, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_postscript() {
            let _localctx = new Book_postscriptContext(this._ctx, this.state);
            this.enterRule(_localctx, 206, bitmarkParser.RULE_book_postscript);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2626;
                    this.match(bitmarkParser.BitBookPostscript);
                    this.state = 2627;
                    this.format();
                    this.state = 2628;
                    this.match(bitmarkParser.CL);
                    this.state = 2632;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2629;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2634;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2642;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2635;
                                        this.bitElem();
                                        this.state = 2639;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2636;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2641;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2644;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_appendix() {
            let _localctx = new Book_appendixContext(this._ctx, this.state);
            this.enterRule(_localctx, 208, bitmarkParser.RULE_book_appendix);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2646;
                    this.match(bitmarkParser.BitBookappendix);
                    this.state = 2647;
                    this.format();
                    this.state = 2648;
                    this.match(bitmarkParser.CL);
                    this.state = 2652;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2649;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2654;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2662;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2655;
                                        this.bitElem();
                                        this.state = 2659;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2656;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2661;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2664;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 331, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_addendum() {
            let _localctx = new Book_addendumContext(this._ctx, this.state);
            this.enterRule(_localctx, 210, bitmarkParser.RULE_book_addendum);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2666;
                    this.match(bitmarkParser.BitBookAddendum);
                    this.state = 2667;
                    this.format();
                    this.state = 2668;
                    this.match(bitmarkParser.CL);
                    this.state = 2672;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2669;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2674;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2682;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2675;
                                        this.bitElem();
                                        this.state = 2679;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2676;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2681;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2684;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 334, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_acknowledgments() {
            let _localctx = new Book_acknowledgmentsContext(this._ctx, this.state);
            this.enterRule(_localctx, 212, bitmarkParser.RULE_book_acknowledgments);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2686;
                    this.match(bitmarkParser.BitBookAcknowledgments);
                    this.state = 2687;
                    this.format();
                    this.state = 2688;
                    this.match(bitmarkParser.CL);
                    this.state = 2692;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2689;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2694;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2702;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2695;
                                        this.bitElem();
                                        this.state = 2699;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 336, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2696;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2701;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 336, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2704;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_list_of_contributors() {
            let _localctx = new Book_list_of_contributorsContext(this._ctx, this.state);
            this.enterRule(_localctx, 214, bitmarkParser.RULE_book_list_of_contributors);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2706;
                    this.match(bitmarkParser.BitBookListOfContributors);
                    this.state = 2707;
                    this.format();
                    this.state = 2708;
                    this.match(bitmarkParser.CL);
                    this.state = 2712;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2709;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2714;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2722;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2715;
                                        this.bitElem();
                                        this.state = 2719;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2716;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2721;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2724;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 340, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_bibliography() {
            let _localctx = new Book_bibliographyContext(this._ctx, this.state);
            this.enterRule(_localctx, 216, bitmarkParser.RULE_book_bibliography);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2726;
                    this.match(bitmarkParser.BitBookBibliography);
                    this.state = 2727;
                    this.format();
                    this.state = 2728;
                    this.match(bitmarkParser.CL);
                    this.state = 2732;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2729;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2734;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2742;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2735;
                                        this.bitElem();
                                        this.state = 2739;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2736;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2741;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2744;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_reference_list() {
            let _localctx = new Book_reference_listContext(this._ctx, this.state);
            this.enterRule(_localctx, 218, bitmarkParser.RULE_book_reference_list);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2746;
                    this.match(bitmarkParser.BitBookReferenceList);
                    this.state = 2747;
                    this.format();
                    this.state = 2748;
                    this.match(bitmarkParser.CL);
                    this.state = 2752;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2749;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2754;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2762;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2755;
                                        this.bitElem();
                                        this.state = 2759;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2756;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2761;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2764;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_endnotes() {
            let _localctx = new Book_endnotesContext(this._ctx, this.state);
            this.enterRule(_localctx, 220, bitmarkParser.RULE_book_endnotes);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2766;
                    this.match(bitmarkParser.BitBookEndnotes);
                    this.state = 2767;
                    this.format();
                    this.state = 2768;
                    this.match(bitmarkParser.CL);
                    this.state = 2772;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2769;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2774;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2782;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2775;
                                        this.bitElem();
                                        this.state = 2779;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2776;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2781;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2784;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 349, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_notes() {
            let _localctx = new Book_notesContext(this._ctx, this.state);
            this.enterRule(_localctx, 222, bitmarkParser.RULE_book_notes);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2786;
                    this.match(bitmarkParser.BitBookNotes);
                    this.state = 2787;
                    this.format();
                    this.state = 2788;
                    this.match(bitmarkParser.CL);
                    this.state = 2792;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2789;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2794;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2802;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2795;
                                        this.bitElem();
                                        this.state = 2799;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 351, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2796;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2801;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 351, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2804;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_copyright_permissions() {
            let _localctx = new Book_copyright_permissionsContext(this._ctx, this.state);
            this.enterRule(_localctx, 224, bitmarkParser.RULE_book_copyright_permissions);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2806;
                    this.match(bitmarkParser.BitBookCopyrightPermissions);
                    this.state = 2807;
                    this.format();
                    this.state = 2808;
                    this.match(bitmarkParser.CL);
                    this.state = 2812;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2809;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2814;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2822;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2815;
                                        this.bitElem();
                                        this.state = 2819;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2816;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2821;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2824;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 355, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_teaser() {
            let _localctx = new Book_teaserContext(this._ctx, this.state);
            this.enterRule(_localctx, 226, bitmarkParser.RULE_book_teaser);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2826;
                    this.match(bitmarkParser.BitBookTeaser);
                    this.state = 2827;
                    this.format();
                    this.state = 2828;
                    this.match(bitmarkParser.CL);
                    this.state = 2832;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2829;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2834;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2842;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2835;
                                        this.bitElem();
                                        this.state = 2839;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2836;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2841;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2844;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_auther_bio() {
            let _localctx = new Book_auther_bioContext(this._ctx, this.state);
            this.enterRule(_localctx, 228, bitmarkParser.RULE_book_auther_bio);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2846;
                    this.match(bitmarkParser.BitBookAutherBio);
                    this.state = 2847;
                    this.format();
                    this.state = 2848;
                    this.match(bitmarkParser.CL);
                    this.state = 2852;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2849;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2854;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2862;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2855;
                                        this.bitElem();
                                        this.state = 2859;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 360, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2856;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2861;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 360, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2864;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_request_for_a_book_review() {
            let _localctx = new Book_request_for_a_book_reviewContext(this._ctx, this.state);
            this.enterRule(_localctx, 230, bitmarkParser.RULE_book_request_for_a_book_review);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2866;
                    this.match(bitmarkParser.BitBookRequestForABookReview);
                    this.state = 2867;
                    this.format();
                    this.state = 2868;
                    this.match(bitmarkParser.CL);
                    this.state = 2872;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2869;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2874;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2882;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2875;
                                        this.bitElem();
                                        this.state = 2879;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2876;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2881;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2884;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_coming_soon() {
            let _localctx = new Book_coming_soonContext(this._ctx, this.state);
            this.enterRule(_localctx, 232, bitmarkParser.RULE_book_coming_soon);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2886;
                    this.match(bitmarkParser.BitBookComingSoon);
                    this.state = 2887;
                    this.format();
                    this.state = 2888;
                    this.match(bitmarkParser.CL);
                    this.state = 2892;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2889;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2894;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2902;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2895;
                                        this.bitElem();
                                        this.state = 2899;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 366, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2896;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2901;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 366, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2904;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_read_more() {
            let _localctx = new Book_read_moreContext(this._ctx, this.state);
            this.enterRule(_localctx, 234, bitmarkParser.RULE_book_read_more);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2906;
                    this.match(bitmarkParser.BitBookReadMore);
                    this.state = 2907;
                    this.format();
                    this.state = 2908;
                    this.match(bitmarkParser.CL);
                    this.state = 2912;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2909;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2914;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2922;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2915;
                                        this.bitElem();
                                        this.state = 2919;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2916;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2921;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2924;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_summary() {
            let _localctx = new Book_summaryContext(this._ctx, this.state);
            this.enterRule(_localctx, 236, bitmarkParser.RULE_book_summary);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2926;
                    this.match(bitmarkParser.BitBookSummary);
                    this.state = 2927;
                    this.format();
                    this.state = 2928;
                    this.match(bitmarkParser.CL);
                    this.state = 2932;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2929;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2934;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2942;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2935;
                                        this.bitElem();
                                        this.state = 2939;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2936;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2941;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2944;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 373, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        book_epigraph() {
            let _localctx = new Book_epigraphContext(this._ctx, this.state);
            this.enterRule(_localctx, 238, bitmarkParser.RULE_book_epigraph);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2946;
                    this.match(bitmarkParser.BitBookEpigraph);
                    this.state = 2947;
                    this.format();
                    this.state = 2948;
                    this.match(bitmarkParser.CL);
                    this.state = 2952;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2949;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2954;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2962;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2955;
                                        this.bitElem();
                                        this.state = 2959;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 375, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2956;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2961;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 375, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2964;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 376, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        code() {
            let _localctx = new CodeContext(this._ctx, this.state);
            this.enterRule(_localctx, 240, bitmarkParser.RULE_code);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2966;
                    this.match(bitmarkParser.BitCode);
                    this.state = 2967;
                    this.format();
                    this.state = 2968;
                    this.match(bitmarkParser.CL);
                    this.state = 2972;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2969;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2974;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2982;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2975;
                                        this.bitElem();
                                        this.state = 2979;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2976;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 2981;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 2984;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 379, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        card1() {
            let _localctx = new Card1Context(this._ctx, this.state);
            this.enterRule(_localctx, 242, bitmarkParser.RULE_card1);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 2986;
                    this.match(bitmarkParser.BitCard1);
                    this.state = 2987;
                    this.format();
                    this.state = 2988;
                    this.match(bitmarkParser.CL);
                    this.state = 2992;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 2989;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 2994;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3002;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 2995;
                                        this.bitElem();
                                        this.state = 2999;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 2996;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 3001;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3004;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        question1() {
            let _localctx = new Question1Context(this._ctx, this.state);
            this.enterRule(_localctx, 244, bitmarkParser.RULE_question1);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3006;
                    this.match(bitmarkParser.BitQuestion1);
                    this.state = 3007;
                    this.format();
                    this.state = 3008;
                    this.match(bitmarkParser.CL);
                    this.state = 3012;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 3009;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 3014;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3022;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3015;
                                        this.bitElem();
                                        this.state = 3019;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 3016;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 3021;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3024;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        message() {
            let _localctx = new MessageContext(this._ctx, this.state);
            this.enterRule(_localctx, 246, bitmarkParser.RULE_message);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3026;
                    this.match(bitmarkParser.BitMessage);
                    this.state = 3027;
                    this.format();
                    this.state = 3028;
                    this.match(bitmarkParser.CL);
                    this.state = 3032;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 3029;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 3034;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3042;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3035;
                                        this.bitElem();
                                        this.state = 3039;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 3036;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 3041;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3044;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bot_interview() {
            let _localctx = new Bot_interviewContext(this._ctx, this.state);
            this.enterRule(_localctx, 248, bitmarkParser.RULE_bot_interview);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3046;
                    this.match(bitmarkParser.BitBotint);
                    this.state = 3047;
                    this.format();
                    this.state = 3048;
                    this.match(bitmarkParser.CL);
                    this.state = 3059;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3049;
                                        _la = this._input.LA(1);
                                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 3050;
                                        this.bot_choice();
                                        this.state = 3056;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        while (_la === bitmarkParser.SSPL || _la === bitmarkParser.SSPL2) {
                                            {
                                                {
                                                    this.state = 3051;
                                                    this.sspl();
                                                    this.state = 3052;
                                                    this.bot_choice();
                                                }
                                            }
                                            this.state = 3058;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3061;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 390, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 3063;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3067;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 3064;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 3069;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
                    }
                    this.state = 3083;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 394, this._ctx)) {
                        case 1:
                            {
                                this.state = 3070;
                                this.resource();
                                this.state = 3080;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3074;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 3071;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 3076;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 3077;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 3082;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bot_choice() {
            let _localctx = new Bot_choiceContext(this._ctx, this.state);
            this.enterRule(_localctx, 250, bitmarkParser.RULE_bot_choice);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3092;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        {
                            this.state = 3092;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 395, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3085;
                                        this.words();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 3086;
                                        this.instruction();
                                    }
                                    break;
                                case 3:
                                    {
                                        this.state = 3087;
                                        this.audiobit();
                                    }
                                    break;
                                case 4:
                                    {
                                        this.state = 3088;
                                        this.gap();
                                    }
                                    break;
                                case 5:
                                    {
                                        this.state = 3089;
                                        this.choice_plus();
                                    }
                                    break;
                                case 6:
                                    {
                                        this.state = 3090;
                                        this.choice_minus();
                                    }
                                    break;
                                case 7:
                                    {
                                        this.state = 3091;
                                        this.choice_star();
                                    }
                                    break;
                            }
                        }
                        this.state = 3094;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.OPU - 134)) | (1 << (bitmarkParser.OPB - 134)) | (1 << (bitmarkParser.OPP - 134)) | (1 << (bitmarkParser.OPM - 134)) | (1 << (bitmarkParser.OPR - 134)) | (1 << (bitmarkParser.OPC - 134)) | (1 << (bitmarkParser.AMP - 134)) | (1 << (bitmarkParser.Greater - 134)) | (1 << (bitmarkParser.Less - 134)) | (1 << (bitmarkParser.RightAngle - 134)) | (1 << (bitmarkParser.RightArrow - 134)) | (1 << (bitmarkParser.QUOTE_INDEX - 134)))) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & ((1 << (bitmarkParser.SENTENCE - 166)) | (1 << (bitmarkParser.AmpAudio - 166)) | (1 << (bitmarkParser.AmpImage - 166)))) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.AmpVideo - 200)) | (1 << (bitmarkParser.AmpArticle - 200)) | (1 << (bitmarkParser.AmpDocument - 200)) | (1 << (bitmarkParser.AmpApp - 200)) | (1 << (bitmarkParser.AmpWebsite - 200)) | (1 << (bitmarkParser.AmpStillImageFilm - 200)) | (1 << (bitmarkParser.OpAmpAudio - 200)) | (1 << (bitmarkParser.AmpAudioLink - 200)) | (1 << (bitmarkParser.AmpImageLink - 200)) | (1 << (bitmarkParser.AmpVideoLink - 200)) | (1 << (bitmarkParser.AmpArticleLink - 200)) | (1 << (bitmarkParser.AmpDocumentLink - 200)) | (1 << (bitmarkParser.AmpAppLink - 200)) | (1 << (bitmarkParser.AmpWebsiteLink - 200)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 200)) | (1 << (bitmarkParser.OpAmpAudioLink - 200)))) !== 0) || _la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        rating() {
            let _localctx = new RatingContext(this._ctx, this.state);
            this.enterRule(_localctx, 252, bitmarkParser.RULE_rating);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3096;
                    this.match(bitmarkParser.BitRating);
                    this.state = 3097;
                    this.format();
                    this.state = 3098;
                    this.match(bitmarkParser.CL);
                    this.state = 3102;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 3099;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 3104;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3114;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.OPDOLL - 128)) | (1 << (bitmarkParser.OPESC - 128)) | (1 << (bitmarkParser.OPRANGLES - 128)) | (1 << (bitmarkParser.OPRANGLEL - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPU - 128)) | (1 << (bitmarkParser.OPB - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPA - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.OPHASH - 128)) | (1 << (bitmarkParser.OPC - 128)) | (1 << (bitmarkParser.COLON - 128)) | (1 << (bitmarkParser.AMP - 128)) | (1 << (bitmarkParser.Greater - 128)) | (1 << (bitmarkParser.Less - 128)) | (1 << (bitmarkParser.RightAngle - 128)) | (1 << (bitmarkParser.RightArrow - 128)) | (1 << (bitmarkParser.DBLEQ - 128)) | (1 << (bitmarkParser.QUOTE_INDEX - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.DCANY - 160)) | (1 << (bitmarkParser.ArticleText - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.AtProgress - 160)) | (1 << (bitmarkParser.AtReference - 160)) | (1 << (bitmarkParser.AtProgressPoints - 160)) | (1 << (bitmarkParser.AtExampleWithStr - 160)) | (1 << (bitmarkParser.AtExamplecol - 160)) | (1 << (bitmarkParser.AtExamplecl - 160)) | (1 << (bitmarkParser.AtPartialAnswerS - 160)) | (1 << (bitmarkParser.AtPartialAnswer - 160)) | (1 << (bitmarkParser.AtLabeltrue - 160)) | (1 << (bitmarkParser.AtLabelfalse - 160)) | (1 << (bitmarkParser.OpAtCopyright - 160)) | (1 << (bitmarkParser.OpAtIsTracked - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.OpAtIsInfoOnly - 192)) | (1 << (bitmarkParser.AtDate - 192)) | (1 << (bitmarkParser.AmpAudio - 192)) | (1 << (bitmarkParser.AmpImage - 192)) | (1 << (bitmarkParser.AmpVideo - 192)) | (1 << (bitmarkParser.AmpArticle - 192)) | (1 << (bitmarkParser.AmpDocument - 192)) | (1 << (bitmarkParser.AmpApp - 192)) | (1 << (bitmarkParser.AmpWebsite - 192)) | (1 << (bitmarkParser.AmpStillImageFilm - 192)) | (1 << (bitmarkParser.OpAmpAudio - 192)) | (1 << (bitmarkParser.OpAmpImage - 192)) | (1 << (bitmarkParser.OpAmpImageZoom - 192)) | (1 << (bitmarkParser.OpAmpImageWAudio - 192)) | (1 << (bitmarkParser.OpAmpVideo - 192)) | (1 << (bitmarkParser.OpAmpArticle - 192)) | (1 << (bitmarkParser.OpAmpDocument - 192)) | (1 << (bitmarkParser.OpAmpApp - 192)) | (1 << (bitmarkParser.OpAmpWebsite - 192)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 192)) | (1 << (bitmarkParser.BracEnclose - 192)) | (1 << (bitmarkParser.AmpAudioLink - 192)) | (1 << (bitmarkParser.AmpImageLink - 192)) | (1 << (bitmarkParser.AmpVideoLink - 192)) | (1 << (bitmarkParser.AmpArticleLink - 192)) | (1 << (bitmarkParser.AmpDocumentLink - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.AmpAppLink - 224)) | (1 << (bitmarkParser.AmpWebsiteLink - 224)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.OpAmpAudioLink - 224)) | (1 << (bitmarkParser.OpAmpImageLink - 224)) | (1 << (bitmarkParser.OpAmpVideoLink - 224)) | (1 << (bitmarkParser.OpAmpArticleLink - 224)) | (1 << (bitmarkParser.OpAmpDocumentLink - 224)) | (1 << (bitmarkParser.OpAmpAppLink - 224)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 224)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.BitmarkMinus - 224)) | (1 << (bitmarkParser.BitmarkPlus - 224)) | (1 << (bitmarkParser.URL - 224)))) !== 0) || _la === bitmarkParser.LIST_LINE) {
                        {
                            {
                                this.state = 3105;
                                this.bitElem();
                                this.state = 3109;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 3106;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 3111;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            }
                        }
                        this.state = 3116;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3125;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3117;
                                        _la = this._input.LA(1);
                                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 3118;
                                        this.s_and_w();
                                        this.state = 3121;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        do {
                                            {
                                                {
                                                    this.state = 3119;
                                                    this.match(bitmarkParser.NL);
                                                    this.state = 3120;
                                                    this.bullet_item();
                                                }
                                            }
                                            this.state = 3123;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        } while (_la === bitmarkParser.NL);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3127;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 401, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 3129;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3133;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 3130;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 3135;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                    }
                    this.state = 3149;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 405, this._ctx)) {
                        case 1:
                            {
                                this.state = 3136;
                                this.resource();
                                this.state = 3146;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3140;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 3137;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 3142;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 3143;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 3148;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bullet_item() {
            let _localctx = new Bullet_itemContext(this._ctx, this.state);
            this.enterRule(_localctx, 254, bitmarkParser.RULE_bullet_item);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3151;
                    this.match(bitmarkParser.OPBUL);
                    this.state = 3152;
                    this.s_and_w();
                    this.state = 3153;
                    this.match(bitmarkParser.CL);
                    this.state = 3155;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.AtPoints) {
                        {
                            this.state = 3154;
                            this.atpoint();
                        }
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        survey() {
            let _localctx = new SurveyContext(this._ctx, this.state);
            this.enterRule(_localctx, 256, bitmarkParser.RULE_survey);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3157;
                    this.match(bitmarkParser.BitSurvey);
                    this.state = 3158;
                    this.format();
                    this.state = 3159;
                    this.match(bitmarkParser.CL);
                    this.state = 3163;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 3160;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 3165;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3175;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.OPDOLL - 128)) | (1 << (bitmarkParser.OPESC - 128)) | (1 << (bitmarkParser.OPRANGLES - 128)) | (1 << (bitmarkParser.OPRANGLEL - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPU - 128)) | (1 << (bitmarkParser.OPB - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPA - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.OPHASH - 128)) | (1 << (bitmarkParser.OPC - 128)) | (1 << (bitmarkParser.COLON - 128)) | (1 << (bitmarkParser.AMP - 128)) | (1 << (bitmarkParser.Greater - 128)) | (1 << (bitmarkParser.Less - 128)) | (1 << (bitmarkParser.RightAngle - 128)) | (1 << (bitmarkParser.RightArrow - 128)) | (1 << (bitmarkParser.DBLEQ - 128)) | (1 << (bitmarkParser.QUOTE_INDEX - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.DCANY - 160)) | (1 << (bitmarkParser.ArticleText - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.AtProgress - 160)) | (1 << (bitmarkParser.AtReference - 160)) | (1 << (bitmarkParser.AtProgressPoints - 160)) | (1 << (bitmarkParser.AtExampleWithStr - 160)) | (1 << (bitmarkParser.AtExamplecol - 160)) | (1 << (bitmarkParser.AtExamplecl - 160)) | (1 << (bitmarkParser.AtPartialAnswerS - 160)) | (1 << (bitmarkParser.AtPartialAnswer - 160)) | (1 << (bitmarkParser.AtLabeltrue - 160)) | (1 << (bitmarkParser.AtLabelfalse - 160)) | (1 << (bitmarkParser.OpAtCopyright - 160)) | (1 << (bitmarkParser.OpAtIsTracked - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.OpAtIsInfoOnly - 192)) | (1 << (bitmarkParser.AtDate - 192)) | (1 << (bitmarkParser.AmpAudio - 192)) | (1 << (bitmarkParser.AmpImage - 192)) | (1 << (bitmarkParser.AmpVideo - 192)) | (1 << (bitmarkParser.AmpArticle - 192)) | (1 << (bitmarkParser.AmpDocument - 192)) | (1 << (bitmarkParser.AmpApp - 192)) | (1 << (bitmarkParser.AmpWebsite - 192)) | (1 << (bitmarkParser.AmpStillImageFilm - 192)) | (1 << (bitmarkParser.OpAmpAudio - 192)) | (1 << (bitmarkParser.OpAmpImage - 192)) | (1 << (bitmarkParser.OpAmpImageZoom - 192)) | (1 << (bitmarkParser.OpAmpImageWAudio - 192)) | (1 << (bitmarkParser.OpAmpVideo - 192)) | (1 << (bitmarkParser.OpAmpArticle - 192)) | (1 << (bitmarkParser.OpAmpDocument - 192)) | (1 << (bitmarkParser.OpAmpApp - 192)) | (1 << (bitmarkParser.OpAmpWebsite - 192)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 192)) | (1 << (bitmarkParser.BracEnclose - 192)) | (1 << (bitmarkParser.AmpAudioLink - 192)) | (1 << (bitmarkParser.AmpImageLink - 192)) | (1 << (bitmarkParser.AmpVideoLink - 192)) | (1 << (bitmarkParser.AmpArticleLink - 192)) | (1 << (bitmarkParser.AmpDocumentLink - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.AmpAppLink - 224)) | (1 << (bitmarkParser.AmpWebsiteLink - 224)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.OpAmpAudioLink - 224)) | (1 << (bitmarkParser.OpAmpImageLink - 224)) | (1 << (bitmarkParser.OpAmpVideoLink - 224)) | (1 << (bitmarkParser.OpAmpArticleLink - 224)) | (1 << (bitmarkParser.OpAmpDocumentLink - 224)) | (1 << (bitmarkParser.OpAmpAppLink - 224)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 224)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.BitmarkMinus - 224)) | (1 << (bitmarkParser.BitmarkPlus - 224)) | (1 << (bitmarkParser.URL - 224)))) !== 0) || _la === bitmarkParser.LIST_LINE) {
                        {
                            {
                                this.state = 3166;
                                this.bitElem();
                                this.state = 3170;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 3167;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 3172;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            }
                        }
                        this.state = 3177;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3193;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3178;
                                        _la = this._input.LA(1);
                                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 3180;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                                            {
                                                this.state = 3179;
                                                this.s_and_w();
                                            }
                                        }
                                        this.state = 3189;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        do {
                                            {
                                                {
                                                    this.state = 3185;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                    while (_la === bitmarkParser.NL) {
                                                        {
                                                            {
                                                                this.state = 3182;
                                                                this.match(bitmarkParser.NL);
                                                            }
                                                        }
                                                        this.state = 3187;
                                                        this._errHandler.sync(this);
                                                        _la = this._input.LA(1);
                                                    }
                                                    this.state = 3188;
                                                    this.bullet_item();
                                                }
                                            }
                                            this.state = 3191;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        } while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3195;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 3197;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        survey_1() {
            let _localctx = new Survey_1Context(this._ctx, this.state);
            this.enterRule(_localctx, 258, bitmarkParser.RULE_survey_1);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3199;
                    this.match(bitmarkParser.BitSurvey1);
                    this.state = 3200;
                    this.format();
                    this.state = 3201;
                    this.match(bitmarkParser.CL);
                    this.state = 3205;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 3202;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 3207;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3217;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.OPDOLL - 128)) | (1 << (bitmarkParser.OPESC - 128)) | (1 << (bitmarkParser.OPRANGLES - 128)) | (1 << (bitmarkParser.OPRANGLEL - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPU - 128)) | (1 << (bitmarkParser.OPB - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPA - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.OPHASH - 128)) | (1 << (bitmarkParser.OPC - 128)) | (1 << (bitmarkParser.COLON - 128)) | (1 << (bitmarkParser.AMP - 128)) | (1 << (bitmarkParser.Greater - 128)) | (1 << (bitmarkParser.Less - 128)) | (1 << (bitmarkParser.RightAngle - 128)) | (1 << (bitmarkParser.RightArrow - 128)) | (1 << (bitmarkParser.DBLEQ - 128)) | (1 << (bitmarkParser.QUOTE_INDEX - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.DCANY - 160)) | (1 << (bitmarkParser.ArticleText - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.AtProgress - 160)) | (1 << (bitmarkParser.AtReference - 160)) | (1 << (bitmarkParser.AtProgressPoints - 160)) | (1 << (bitmarkParser.AtExampleWithStr - 160)) | (1 << (bitmarkParser.AtExamplecol - 160)) | (1 << (bitmarkParser.AtExamplecl - 160)) | (1 << (bitmarkParser.AtPartialAnswerS - 160)) | (1 << (bitmarkParser.AtPartialAnswer - 160)) | (1 << (bitmarkParser.AtLabeltrue - 160)) | (1 << (bitmarkParser.AtLabelfalse - 160)) | (1 << (bitmarkParser.OpAtCopyright - 160)) | (1 << (bitmarkParser.OpAtIsTracked - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.OpAtIsInfoOnly - 192)) | (1 << (bitmarkParser.AtDate - 192)) | (1 << (bitmarkParser.AmpAudio - 192)) | (1 << (bitmarkParser.AmpImage - 192)) | (1 << (bitmarkParser.AmpVideo - 192)) | (1 << (bitmarkParser.AmpArticle - 192)) | (1 << (bitmarkParser.AmpDocument - 192)) | (1 << (bitmarkParser.AmpApp - 192)) | (1 << (bitmarkParser.AmpWebsite - 192)) | (1 << (bitmarkParser.AmpStillImageFilm - 192)) | (1 << (bitmarkParser.OpAmpAudio - 192)) | (1 << (bitmarkParser.OpAmpImage - 192)) | (1 << (bitmarkParser.OpAmpImageZoom - 192)) | (1 << (bitmarkParser.OpAmpImageWAudio - 192)) | (1 << (bitmarkParser.OpAmpVideo - 192)) | (1 << (bitmarkParser.OpAmpArticle - 192)) | (1 << (bitmarkParser.OpAmpDocument - 192)) | (1 << (bitmarkParser.OpAmpApp - 192)) | (1 << (bitmarkParser.OpAmpWebsite - 192)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 192)) | (1 << (bitmarkParser.BracEnclose - 192)) | (1 << (bitmarkParser.AmpAudioLink - 192)) | (1 << (bitmarkParser.AmpImageLink - 192)) | (1 << (bitmarkParser.AmpVideoLink - 192)) | (1 << (bitmarkParser.AmpArticleLink - 192)) | (1 << (bitmarkParser.AmpDocumentLink - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.AmpAppLink - 224)) | (1 << (bitmarkParser.AmpWebsiteLink - 224)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.OpAmpAudioLink - 224)) | (1 << (bitmarkParser.OpAmpImageLink - 224)) | (1 << (bitmarkParser.OpAmpVideoLink - 224)) | (1 << (bitmarkParser.OpAmpArticleLink - 224)) | (1 << (bitmarkParser.OpAmpDocumentLink - 224)) | (1 << (bitmarkParser.OpAmpAppLink - 224)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 224)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.BitmarkMinus - 224)) | (1 << (bitmarkParser.BitmarkPlus - 224)) | (1 << (bitmarkParser.URL - 224)))) !== 0) || _la === bitmarkParser.LIST_LINE) {
                        {
                            {
                                this.state = 3208;
                                this.bitElem();
                                this.state = 3212;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 3209;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 3214;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            }
                        }
                        this.state = 3219;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3228;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3220;
                                        _la = this._input.LA(1);
                                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 3221;
                                        this.s_and_w();
                                        this.state = 3224;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        do {
                                            {
                                                {
                                                    this.state = 3222;
                                                    this.match(bitmarkParser.NL);
                                                    this.state = 3223;
                                                    this.bullet_item();
                                                }
                                            }
                                            this.state = 3226;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        } while (_la === bitmarkParser.NL);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3230;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 3232;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        survey_anonymous() {
            let _localctx = new Survey_anonymousContext(this._ctx, this.state);
            this.enterRule(_localctx, 260, bitmarkParser.RULE_survey_anonymous);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3234;
                    this.match(bitmarkParser.BitSurveyanon);
                    this.state = 3235;
                    this.format();
                    this.state = 3236;
                    this.match(bitmarkParser.CL);
                    this.state = 3240;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 3237;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 3242;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3252;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.OPDOLL - 128)) | (1 << (bitmarkParser.OPESC - 128)) | (1 << (bitmarkParser.OPRANGLES - 128)) | (1 << (bitmarkParser.OPRANGLEL - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPU - 128)) | (1 << (bitmarkParser.OPB - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPA - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.OPHASH - 128)) | (1 << (bitmarkParser.OPC - 128)) | (1 << (bitmarkParser.COLON - 128)) | (1 << (bitmarkParser.AMP - 128)) | (1 << (bitmarkParser.Greater - 128)) | (1 << (bitmarkParser.Less - 128)) | (1 << (bitmarkParser.RightAngle - 128)) | (1 << (bitmarkParser.RightArrow - 128)) | (1 << (bitmarkParser.DBLEQ - 128)) | (1 << (bitmarkParser.QUOTE_INDEX - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.DCANY - 160)) | (1 << (bitmarkParser.ArticleText - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.AtProgress - 160)) | (1 << (bitmarkParser.AtReference - 160)) | (1 << (bitmarkParser.AtProgressPoints - 160)) | (1 << (bitmarkParser.AtExampleWithStr - 160)) | (1 << (bitmarkParser.AtExamplecol - 160)) | (1 << (bitmarkParser.AtExamplecl - 160)) | (1 << (bitmarkParser.AtPartialAnswerS - 160)) | (1 << (bitmarkParser.AtPartialAnswer - 160)) | (1 << (bitmarkParser.AtLabeltrue - 160)) | (1 << (bitmarkParser.AtLabelfalse - 160)) | (1 << (bitmarkParser.OpAtCopyright - 160)) | (1 << (bitmarkParser.OpAtIsTracked - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.OpAtIsInfoOnly - 192)) | (1 << (bitmarkParser.AtDate - 192)) | (1 << (bitmarkParser.AmpAudio - 192)) | (1 << (bitmarkParser.AmpImage - 192)) | (1 << (bitmarkParser.AmpVideo - 192)) | (1 << (bitmarkParser.AmpArticle - 192)) | (1 << (bitmarkParser.AmpDocument - 192)) | (1 << (bitmarkParser.AmpApp - 192)) | (1 << (bitmarkParser.AmpWebsite - 192)) | (1 << (bitmarkParser.AmpStillImageFilm - 192)) | (1 << (bitmarkParser.OpAmpAudio - 192)) | (1 << (bitmarkParser.OpAmpImage - 192)) | (1 << (bitmarkParser.OpAmpImageZoom - 192)) | (1 << (bitmarkParser.OpAmpImageWAudio - 192)) | (1 << (bitmarkParser.OpAmpVideo - 192)) | (1 << (bitmarkParser.OpAmpArticle - 192)) | (1 << (bitmarkParser.OpAmpDocument - 192)) | (1 << (bitmarkParser.OpAmpApp - 192)) | (1 << (bitmarkParser.OpAmpWebsite - 192)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 192)) | (1 << (bitmarkParser.BracEnclose - 192)) | (1 << (bitmarkParser.AmpAudioLink - 192)) | (1 << (bitmarkParser.AmpImageLink - 192)) | (1 << (bitmarkParser.AmpVideoLink - 192)) | (1 << (bitmarkParser.AmpArticleLink - 192)) | (1 << (bitmarkParser.AmpDocumentLink - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.AmpAppLink - 224)) | (1 << (bitmarkParser.AmpWebsiteLink - 224)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.OpAmpAudioLink - 224)) | (1 << (bitmarkParser.OpAmpImageLink - 224)) | (1 << (bitmarkParser.OpAmpVideoLink - 224)) | (1 << (bitmarkParser.OpAmpArticleLink - 224)) | (1 << (bitmarkParser.OpAmpDocumentLink - 224)) | (1 << (bitmarkParser.OpAmpAppLink - 224)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 224)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.BitmarkMinus - 224)) | (1 << (bitmarkParser.BitmarkPlus - 224)) | (1 << (bitmarkParser.URL - 224)))) !== 0) || _la === bitmarkParser.LIST_LINE) {
                        {
                            {
                                this.state = 3243;
                                this.bitElem();
                                this.state = 3247;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 3244;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 3249;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            }
                        }
                        this.state = 3254;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3263;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3255;
                                        _la = this._input.LA(1);
                                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 3256;
                                        this.s_and_w();
                                        this.state = 3259;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        do {
                                            {
                                                {
                                                    this.state = 3257;
                                                    this.match(bitmarkParser.NL);
                                                    this.state = 3258;
                                                    this.bullet_item();
                                                }
                                            }
                                            this.state = 3261;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        } while (_la === bitmarkParser.NL);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3265;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 3267;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        survey_anonymous_1() {
            let _localctx = new Survey_anonymous_1Context(this._ctx, this.state);
            this.enterRule(_localctx, 262, bitmarkParser.RULE_survey_anonymous_1);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3269;
                    this.match(bitmarkParser.BitSurveyanon1);
                    this.state = 3270;
                    this.format();
                    this.state = 3271;
                    this.match(bitmarkParser.CL);
                    this.state = 3275;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 3272;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 3277;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3287;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.OPDOLL - 128)) | (1 << (bitmarkParser.OPESC - 128)) | (1 << (bitmarkParser.OPRANGLES - 128)) | (1 << (bitmarkParser.OPRANGLEL - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPU - 128)) | (1 << (bitmarkParser.OPB - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPA - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.OPHASH - 128)) | (1 << (bitmarkParser.OPC - 128)) | (1 << (bitmarkParser.COLON - 128)) | (1 << (bitmarkParser.AMP - 128)) | (1 << (bitmarkParser.Greater - 128)) | (1 << (bitmarkParser.Less - 128)) | (1 << (bitmarkParser.RightAngle - 128)) | (1 << (bitmarkParser.RightArrow - 128)) | (1 << (bitmarkParser.DBLEQ - 128)) | (1 << (bitmarkParser.QUOTE_INDEX - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.DCANY - 160)) | (1 << (bitmarkParser.ArticleText - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.AtProgress - 160)) | (1 << (bitmarkParser.AtReference - 160)) | (1 << (bitmarkParser.AtProgressPoints - 160)) | (1 << (bitmarkParser.AtExampleWithStr - 160)) | (1 << (bitmarkParser.AtExamplecol - 160)) | (1 << (bitmarkParser.AtExamplecl - 160)) | (1 << (bitmarkParser.AtPartialAnswerS - 160)) | (1 << (bitmarkParser.AtPartialAnswer - 160)) | (1 << (bitmarkParser.AtLabeltrue - 160)) | (1 << (bitmarkParser.AtLabelfalse - 160)) | (1 << (bitmarkParser.OpAtCopyright - 160)) | (1 << (bitmarkParser.OpAtIsTracked - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.OpAtIsInfoOnly - 192)) | (1 << (bitmarkParser.AtDate - 192)) | (1 << (bitmarkParser.AmpAudio - 192)) | (1 << (bitmarkParser.AmpImage - 192)) | (1 << (bitmarkParser.AmpVideo - 192)) | (1 << (bitmarkParser.AmpArticle - 192)) | (1 << (bitmarkParser.AmpDocument - 192)) | (1 << (bitmarkParser.AmpApp - 192)) | (1 << (bitmarkParser.AmpWebsite - 192)) | (1 << (bitmarkParser.AmpStillImageFilm - 192)) | (1 << (bitmarkParser.OpAmpAudio - 192)) | (1 << (bitmarkParser.OpAmpImage - 192)) | (1 << (bitmarkParser.OpAmpImageZoom - 192)) | (1 << (bitmarkParser.OpAmpImageWAudio - 192)) | (1 << (bitmarkParser.OpAmpVideo - 192)) | (1 << (bitmarkParser.OpAmpArticle - 192)) | (1 << (bitmarkParser.OpAmpDocument - 192)) | (1 << (bitmarkParser.OpAmpApp - 192)) | (1 << (bitmarkParser.OpAmpWebsite - 192)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 192)) | (1 << (bitmarkParser.BracEnclose - 192)) | (1 << (bitmarkParser.AmpAudioLink - 192)) | (1 << (bitmarkParser.AmpImageLink - 192)) | (1 << (bitmarkParser.AmpVideoLink - 192)) | (1 << (bitmarkParser.AmpArticleLink - 192)) | (1 << (bitmarkParser.AmpDocumentLink - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.AmpAppLink - 224)) | (1 << (bitmarkParser.AmpWebsiteLink - 224)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.OpAmpAudioLink - 224)) | (1 << (bitmarkParser.OpAmpImageLink - 224)) | (1 << (bitmarkParser.OpAmpVideoLink - 224)) | (1 << (bitmarkParser.OpAmpArticleLink - 224)) | (1 << (bitmarkParser.OpAmpDocumentLink - 224)) | (1 << (bitmarkParser.OpAmpAppLink - 224)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 224)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.BitmarkMinus - 224)) | (1 << (bitmarkParser.BitmarkPlus - 224)) | (1 << (bitmarkParser.URL - 224)))) !== 0) || _la === bitmarkParser.LIST_LINE) {
                        {
                            {
                                this.state = 3278;
                                this.bitElem();
                                this.state = 3282;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 3279;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 3284;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            }
                        }
                        this.state = 3289;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3298;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3290;
                                        _la = this._input.LA(1);
                                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 3291;
                                        this.s_and_w();
                                        this.state = 3294;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        do {
                                            {
                                                {
                                                    this.state = 3292;
                                                    this.match(bitmarkParser.NL);
                                                    this.state = 3293;
                                                    this.bullet_item();
                                                }
                                            }
                                            this.state = 3296;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        } while (_la === bitmarkParser.NL);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3300;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 428, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 3302;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        self_assessment() {
            let _localctx = new Self_assessmentContext(this._ctx, this.state);
            this.enterRule(_localctx, 264, bitmarkParser.RULE_self_assessment);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3304;
                    this.match(bitmarkParser.BitSelfassess);
                    this.state = 3305;
                    this.format();
                    this.state = 3306;
                    this.match(bitmarkParser.CL);
                    this.state = 3310;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.NL) {
                        {
                            {
                                this.state = 3307;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 3312;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3322;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.OPDOLL - 128)) | (1 << (bitmarkParser.OPESC - 128)) | (1 << (bitmarkParser.OPRANGLES - 128)) | (1 << (bitmarkParser.OPRANGLEL - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPU - 128)) | (1 << (bitmarkParser.OPB - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPA - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.OPHASH - 128)) | (1 << (bitmarkParser.OPC - 128)) | (1 << (bitmarkParser.COLON - 128)) | (1 << (bitmarkParser.AMP - 128)) | (1 << (bitmarkParser.Greater - 128)) | (1 << (bitmarkParser.Less - 128)) | (1 << (bitmarkParser.RightAngle - 128)) | (1 << (bitmarkParser.RightArrow - 128)) | (1 << (bitmarkParser.DBLEQ - 128)) | (1 << (bitmarkParser.QUOTE_INDEX - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.DCANY - 160)) | (1 << (bitmarkParser.ArticleText - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.AtProgress - 160)) | (1 << (bitmarkParser.AtReference - 160)) | (1 << (bitmarkParser.AtProgressPoints - 160)) | (1 << (bitmarkParser.AtExampleWithStr - 160)) | (1 << (bitmarkParser.AtExamplecol - 160)) | (1 << (bitmarkParser.AtExamplecl - 160)) | (1 << (bitmarkParser.AtPartialAnswerS - 160)) | (1 << (bitmarkParser.AtPartialAnswer - 160)) | (1 << (bitmarkParser.AtLabeltrue - 160)) | (1 << (bitmarkParser.AtLabelfalse - 160)) | (1 << (bitmarkParser.OpAtCopyright - 160)) | (1 << (bitmarkParser.OpAtIsTracked - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.OpAtIsInfoOnly - 192)) | (1 << (bitmarkParser.AtDate - 192)) | (1 << (bitmarkParser.AmpAudio - 192)) | (1 << (bitmarkParser.AmpImage - 192)) | (1 << (bitmarkParser.AmpVideo - 192)) | (1 << (bitmarkParser.AmpArticle - 192)) | (1 << (bitmarkParser.AmpDocument - 192)) | (1 << (bitmarkParser.AmpApp - 192)) | (1 << (bitmarkParser.AmpWebsite - 192)) | (1 << (bitmarkParser.AmpStillImageFilm - 192)) | (1 << (bitmarkParser.OpAmpAudio - 192)) | (1 << (bitmarkParser.OpAmpImage - 192)) | (1 << (bitmarkParser.OpAmpImageZoom - 192)) | (1 << (bitmarkParser.OpAmpImageWAudio - 192)) | (1 << (bitmarkParser.OpAmpVideo - 192)) | (1 << (bitmarkParser.OpAmpArticle - 192)) | (1 << (bitmarkParser.OpAmpDocument - 192)) | (1 << (bitmarkParser.OpAmpApp - 192)) | (1 << (bitmarkParser.OpAmpWebsite - 192)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 192)) | (1 << (bitmarkParser.BracEnclose - 192)) | (1 << (bitmarkParser.AmpAudioLink - 192)) | (1 << (bitmarkParser.AmpImageLink - 192)) | (1 << (bitmarkParser.AmpVideoLink - 192)) | (1 << (bitmarkParser.AmpArticleLink - 192)) | (1 << (bitmarkParser.AmpDocumentLink - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.AmpAppLink - 224)) | (1 << (bitmarkParser.AmpWebsiteLink - 224)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.OpAmpAudioLink - 224)) | (1 << (bitmarkParser.OpAmpImageLink - 224)) | (1 << (bitmarkParser.OpAmpVideoLink - 224)) | (1 << (bitmarkParser.OpAmpArticleLink - 224)) | (1 << (bitmarkParser.OpAmpDocumentLink - 224)) | (1 << (bitmarkParser.OpAmpAppLink - 224)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 224)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.BitmarkMinus - 224)) | (1 << (bitmarkParser.BitmarkPlus - 224)) | (1 << (bitmarkParser.URL - 224)))) !== 0) || _la === bitmarkParser.LIST_LINE) {
                        {
                            {
                                this.state = 3313;
                                this.bitElem();
                                this.state = 3317;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 3314;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 3319;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            }
                        }
                        this.state = 3324;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3338;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3325;
                                        _la = this._input.LA(1);
                                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 3326;
                                        this.self_assess_s_and_w();
                                        this.state = 3334;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        do {
                                            {
                                                {
                                                    this.state = 3330;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                    while (_la === bitmarkParser.NL) {
                                                        {
                                                            {
                                                                this.state = 3327;
                                                                this.match(bitmarkParser.NL);
                                                            }
                                                        }
                                                        this.state = 3332;
                                                        this._errHandler.sync(this);
                                                        _la = this._input.LA(1);
                                                    }
                                                    this.state = 3333;
                                                    this.bullet_item();
                                                }
                                            }
                                            this.state = 3336;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        } while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3340;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 3342;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3346;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 3343;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                        }
                        this.state = 3348;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
                    }
                    this.state = 3362;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 438, this._ctx)) {
                        case 1:
                            {
                                this.state = 3349;
                                this.resource();
                                this.state = 3359;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
                                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3353;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 3350;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 3355;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 3356;
                                                this.resource();
                                            }
                                        }
                                    }
                                    this.state = 3361;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        self_assess_s_and_w() {
            let _localctx = new Self_assess_s_and_wContext(this._ctx, this.state);
            this.enterRule(_localctx, 266, bitmarkParser.RULE_self_assess_s_and_w);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3365;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3364;
                                        _la = this._input.LA(1);
                                        if (_la <= 0 || (_la === bitmarkParser.OPBUL)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 3367;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 439, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        atpoint() {
            let _localctx = new AtpointContext(this._ctx, this.state);
            this.enterRule(_localctx, 268, bitmarkParser.RULE_atpoint);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3369;
                    this.match(bitmarkParser.AtPoints);
                    this.state = 3370;
                    this.match(bitmarkParser.NUMERIC);
                    this.state = 3371;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        format() {
            let _localctx = new FormatContext(this._ctx, this.state);
            this.enterRule(_localctx, 270, bitmarkParser.RULE_format);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3376;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 3373;
                                    this.resource_format();
                                }
                            }
                        }
                        this.state = 3378;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
                    }
                    this.state = 3383;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpImageZoom - 196)) | (1 << (bitmarkParser.AmpImageWAudio - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpPdf - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || _la === bitmarkParser.ColonText) {
                        {
                            this.state = 3381;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.ColonText:
                                    {
                                        this.state = 3379;
                                        this.match(bitmarkParser.ColonText);
                                    }
                                    break;
                                case bitmarkParser.AmpAudio:
                                case bitmarkParser.AmpImage:
                                case bitmarkParser.AmpImageZoom:
                                case bitmarkParser.AmpImageWAudio:
                                case bitmarkParser.AmpVideo:
                                case bitmarkParser.AmpArticle:
                                case bitmarkParser.AmpDocument:
                                case bitmarkParser.AmpApp:
                                case bitmarkParser.AmpWebsite:
                                case bitmarkParser.AmpStillImageFilm:
                                case bitmarkParser.AmpPdf:
                                case bitmarkParser.AmpAudioLink:
                                case bitmarkParser.AmpImageLink:
                                case bitmarkParser.AmpVideoLink:
                                case bitmarkParser.AmpArticleLink:
                                case bitmarkParser.AmpDocumentLink:
                                case bitmarkParser.AmpAppLink:
                                case bitmarkParser.AmpWebsiteLink:
                                case bitmarkParser.AmpStillImageFilmLink:
                                    {
                                        this.state = 3380;
                                        this.resource_format_extra();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        this.state = 3385;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        resource_format() {
            let _localctx = new Resource_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 272, bitmarkParser.RULE_resource_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3386;
                    _la = this._input.LA(1);
                    if (!(((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (bitmarkParser.AmpArticle - 201)) | (1 << (bitmarkParser.AmpDocument - 201)) | (1 << (bitmarkParser.AmpWebsite - 201)) | (1 << (bitmarkParser.AmpStillImageFilm - 201)) | (1 << (bitmarkParser.AmpAudioLink - 201)) | (1 << (bitmarkParser.AmpImageLink - 201)) | (1 << (bitmarkParser.AmpVideoLink - 201)) | (1 << (bitmarkParser.AmpArticleLink - 201)) | (1 << (bitmarkParser.AmpDocumentLink - 201)) | (1 << (bitmarkParser.AmpAppLink - 201)) | (1 << (bitmarkParser.AmpWebsiteLink - 201)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 201)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.Prosemirror - 235)) | (1 << (bitmarkParser.Placeholder - 235)))) !== 0))) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        resource_format_extra() {
            let _localctx = new Resource_format_extraContext(this._ctx, this.state);
            this.enterRule(_localctx, 274, bitmarkParser.RULE_resource_format_extra);
            try {
                this.state = 3397;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.AmpImage:
                    case bitmarkParser.AmpImageZoom:
                    case bitmarkParser.AmpImageWAudio:
                    case bitmarkParser.AmpImageLink:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3388;
                            this.image_format();
                        }
                        break;
                    case bitmarkParser.AmpAudio:
                    case bitmarkParser.AmpAudioLink:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3389;
                            this.audio_format();
                        }
                        break;
                    case bitmarkParser.AmpVideo:
                    case bitmarkParser.AmpVideoLink:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 3390;
                            this.video_format();
                        }
                        break;
                    case bitmarkParser.AmpArticle:
                    case bitmarkParser.AmpArticleLink:
                        this.enterOuterAlt(_localctx, 4);
                        {
                            this.state = 3391;
                            this.article_format();
                        }
                        break;
                    case bitmarkParser.AmpDocument:
                    case bitmarkParser.AmpDocumentLink:
                        this.enterOuterAlt(_localctx, 5);
                        {
                            this.state = 3392;
                            this.document_format();
                        }
                        break;
                    case bitmarkParser.AmpApp:
                    case bitmarkParser.AmpAppLink:
                        this.enterOuterAlt(_localctx, 6);
                        {
                            this.state = 3393;
                            this.app_format();
                        }
                        break;
                    case bitmarkParser.AmpWebsite:
                    case bitmarkParser.AmpWebsiteLink:
                        this.enterOuterAlt(_localctx, 7);
                        {
                            this.state = 3394;
                            this.website_format();
                        }
                        break;
                    case bitmarkParser.AmpStillImageFilm:
                    case bitmarkParser.AmpStillImageFilmLink:
                        this.enterOuterAlt(_localctx, 8);
                        {
                            this.state = 3395;
                            this.stillimagefilm_format();
                        }
                        break;
                    case bitmarkParser.AmpPdf:
                        this.enterOuterAlt(_localctx, 9);
                        {
                            this.state = 3396;
                            this.match(bitmarkParser.AmpPdf);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        format2() {
            let _localctx = new Format2Context(this._ctx, this.state);
            this.enterRule(_localctx, 276, bitmarkParser.RULE_format2);
            try {
                this.state = 3403;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.BitmarkMinus:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3399;
                            this.match(bitmarkParser.BitmarkMinus);
                        }
                        break;
                    case bitmarkParser.BitmarkPlus:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3400;
                            this.match(bitmarkParser.BitmarkPlus);
                        }
                        break;
                    case bitmarkParser.ColonText:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 3401;
                            this.match(bitmarkParser.ColonText);
                        }
                        break;
                    case bitmarkParser.CL:
                        this.enterOuterAlt(_localctx, 4);
                        // tslint:disable-next-line:no-empty
                        {
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        image_format() {
            let _localctx = new Image_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 278, bitmarkParser.RULE_image_format);
            let _la;
            try {
                this.state = 3419;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.AmpImage:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3405;
                            this.match(bitmarkParser.AmpImage);
                            this.state = 3408;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.Image_type:
                                    {
                                        {
                                            this.state = 3406;
                                            this.match(bitmarkParser.Image_type);
                                        }
                                    }
                                    break;
                                case bitmarkParser.DotArticleAtt:
                                    {
                                        {
                                            this.state = 3407;
                                            this.match(bitmarkParser.DotArticleAtt);
                                        }
                                    }
                                    break;
                                case bitmarkParser.CL:
                                case bitmarkParser.AmpAudio:
                                case bitmarkParser.AmpImage:
                                case bitmarkParser.AmpImageZoom:
                                case bitmarkParser.AmpImageWAudio:
                                case bitmarkParser.AmpVideo:
                                case bitmarkParser.AmpArticle:
                                case bitmarkParser.AmpDocument:
                                case bitmarkParser.AmpApp:
                                case bitmarkParser.AmpWebsite:
                                case bitmarkParser.AmpStillImageFilm:
                                case bitmarkParser.AmpPdf:
                                case bitmarkParser.AmpAudioLink:
                                case bitmarkParser.AmpImageLink:
                                case bitmarkParser.AmpVideoLink:
                                case bitmarkParser.AmpArticleLink:
                                case bitmarkParser.AmpDocumentLink:
                                case bitmarkParser.AmpAppLink:
                                case bitmarkParser.AmpWebsiteLink:
                                case bitmarkParser.AmpStillImageFilmLink:
                                case bitmarkParser.ColonText:
                                    break;
                                default:
                                    break;
                            }
                        }
                        break;
                    case bitmarkParser.AmpImageLink:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3410;
                            this.match(bitmarkParser.AmpImageLink);
                            this.state = 3412;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.Image_type) {
                                {
                                    this.state = 3411;
                                    this.match(bitmarkParser.Image_type);
                                }
                            }
                        }
                        break;
                    case bitmarkParser.AmpImageZoom:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 3414;
                            this.match(bitmarkParser.AmpImageZoom);
                            this.state = 3416;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.Image_type) {
                                {
                                    this.state = 3415;
                                    this.match(bitmarkParser.Image_type);
                                }
                            }
                        }
                        break;
                    case bitmarkParser.AmpImageWAudio:
                        this.enterOuterAlt(_localctx, 4);
                        {
                            this.state = 3418;
                            this.match(bitmarkParser.AmpImageWAudio);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        video_format() {
            let _localctx = new Video_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 280, bitmarkParser.RULE_video_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3421;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.AmpVideo || _la === bitmarkParser.AmpVideoLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3424;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.COLON) {
                        {
                            this.state = 3422;
                            this.match(bitmarkParser.COLON);
                            this.state = 3423;
                            this.match(bitmarkParser.Video_type);
                        }
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        article_format() {
            let _localctx = new Article_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 282, bitmarkParser.RULE_article_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3426;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.AmpArticle || _la === bitmarkParser.AmpArticleLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        document_format() {
            let _localctx = new Document_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 284, bitmarkParser.RULE_document_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3428;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.AmpDocument || _la === bitmarkParser.AmpDocumentLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        app_format() {
            let _localctx = new App_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 286, bitmarkParser.RULE_app_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3430;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.AmpApp || _la === bitmarkParser.AmpAppLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        website_format() {
            let _localctx = new Website_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 288, bitmarkParser.RULE_website_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3432;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.AmpWebsite || _la === bitmarkParser.AmpWebsiteLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        stillimagefilm_format() {
            let _localctx = new Stillimagefilm_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 290, bitmarkParser.RULE_stillimagefilm_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3434;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.AmpStillImageFilm || _la === bitmarkParser.AmpStillImageFilmLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        op_article_format() {
            let _localctx = new Op_article_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 292, bitmarkParser.RULE_op_article_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3436;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.OpAmpArticle || _la === bitmarkParser.OpAmpArticleLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        op_document_format() {
            let _localctx = new Op_document_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 294, bitmarkParser.RULE_op_document_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3438;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.OpAmpDocument || _la === bitmarkParser.OpAmpDocumentLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        op_app_format() {
            let _localctx = new Op_app_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 296, bitmarkParser.RULE_op_app_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3440;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.OpAmpApp || _la === bitmarkParser.OpAmpAppLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        op_website_format() {
            let _localctx = new Op_website_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 298, bitmarkParser.RULE_op_website_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3442;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.OpAmpWebsite || _la === bitmarkParser.OpAmpWebsiteLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        op_video_format() {
            let _localctx = new Op_video_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 300, bitmarkParser.RULE_op_video_format);
            try {
                this.state = 3454;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.OpAmpVideo:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3444;
                            this.match(bitmarkParser.OpAmpVideo);
                            this.state = 3447;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 450, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3445;
                                        this.match(bitmarkParser.COLON);
                                        this.state = 3446;
                                        this.match(bitmarkParser.Video_type);
                                    }
                                    break;
                            }
                        }
                        break;
                    case bitmarkParser.OpAmpVideoLink:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3449;
                            this.match(bitmarkParser.OpAmpVideoLink);
                            this.state = 3452;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 451, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3450;
                                        this.match(bitmarkParser.COLON);
                                        this.state = 3451;
                                        this.match(bitmarkParser.Video_type);
                                    }
                                    break;
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        op_stillimagefilm_format() {
            let _localctx = new Op_stillimagefilm_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 302, bitmarkParser.RULE_op_stillimagefilm_format);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3456;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.OpAmpStillImageFilm || _la === bitmarkParser.OpAmpStillImageFilmLink)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        articlebit() {
            let _localctx = new ArticlebitContext(this._ctx, this.state);
            this.enterRule(_localctx, 304, bitmarkParser.RULE_articlebit);
            try {
                this.state = 3464;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.OpAmpArticle:
                    case bitmarkParser.OpAmpArticleLink:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3458;
                            this.op_article_format();
                            this.state = 3459;
                            this.match(bitmarkParser.COLON);
                            this.state = 3460;
                            this.url();
                            this.state = 3461;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case bitmarkParser.ArticleText:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3463;
                            this.match(bitmarkParser.ArticleText);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        documentbit() {
            let _localctx = new DocumentbitContext(this._ctx, this.state);
            this.enterRule(_localctx, 306, bitmarkParser.RULE_documentbit);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3466;
                    this.op_document_format();
                    this.state = 3467;
                    this.match(bitmarkParser.COLON);
                    this.state = 3468;
                    this.url();
                    this.state = 3469;
                    this.match(bitmarkParser.CL);
                    this.state = 3474;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.OPATALT) {
                        {
                            this.state = 3470;
                            this.match(bitmarkParser.OPATALT);
                            this.state = 3471;
                            this.words();
                            this.state = 3472;
                            this.match(bitmarkParser.CL);
                        }
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        websitebit() {
            let _localctx = new WebsitebitContext(this._ctx, this.state);
            this.enterRule(_localctx, 308, bitmarkParser.RULE_websitebit);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3476;
                    this.op_website_format();
                    this.state = 3477;
                    this.match(bitmarkParser.COLON);
                    this.state = 3478;
                    this.url();
                    this.state = 3479;
                    this.match(bitmarkParser.CL);
                    this.state = 3484;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.OPATALT) {
                        {
                            this.state = 3480;
                            this.match(bitmarkParser.OPATALT);
                            this.state = 3481;
                            this.words();
                            this.state = 3482;
                            this.match(bitmarkParser.CL);
                        }
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        appbit() {
            let _localctx = new AppbitContext(this._ctx, this.state);
            this.enterRule(_localctx, 310, bitmarkParser.RULE_appbit);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3486;
                    this.op_app_format();
                    this.state = 3487;
                    this.match(bitmarkParser.COLON);
                    this.state = 3490;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case bitmarkParser.URL:
                            {
                                this.state = 3488;
                                this.url();
                            }
                            break;
                        case bitmarkParser.TEL:
                            {
                                this.state = 3489;
                                this.telephone();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.state = 3492;
                    this.match(bitmarkParser.CL);
                    this.state = 3497;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.OPATALT) {
                        {
                            this.state = 3493;
                            this.match(bitmarkParser.OPATALT);
                            this.state = 3494;
                            this.words();
                            this.state = 3495;
                            this.match(bitmarkParser.CL);
                        }
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        stillimagefilmbit() {
            let _localctx = new StillimagefilmbitContext(this._ctx, this.state);
            this.enterRule(_localctx, 312, bitmarkParser.RULE_stillimagefilmbit);
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3499;
                    this.stillimg_one();
                    this.state = 3503;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 3500;
                                    this.resource_chained();
                                }
                            }
                        }
                        this.state = 3505;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        stillimg_one() {
            let _localctx = new Stillimg_oneContext(this._ctx, this.state);
            this.enterRule(_localctx, 314, bitmarkParser.RULE_stillimg_one);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3506;
                    this.op_stillimagefilm_format();
                    this.state = 3507;
                    this.match(bitmarkParser.COLON);
                    this.state = 3511;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S) {
                        {
                            {
                                this.state = 3508;
                                this.match(bitmarkParser.S);
                            }
                        }
                        this.state = 3513;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3514;
                    this.url();
                    this.state = 3515;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        videobit() {
            let _localctx = new VideobitContext(this._ctx, this.state);
            this.enterRule(_localctx, 316, bitmarkParser.RULE_videobit);
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3517;
                    this.video_one();
                    this.state = 3521;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 3518;
                                    this.resource_chained();
                                }
                            }
                        }
                        this.state = 3523;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        video_one() {
            let _localctx = new Video_oneContext(this._ctx, this.state);
            this.enterRule(_localctx, 318, bitmarkParser.RULE_video_one);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3524;
                    this.op_video_format();
                    this.state = 3525;
                    this.match(bitmarkParser.COLON);
                    this.state = 3526;
                    this.url();
                    this.state = 3527;
                    this.match(bitmarkParser.CL);
                    this.state = 3532;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 461, this._ctx)) {
                        case 1:
                            {
                                this.state = 3528;
                                this.match(bitmarkParser.OPATALT);
                                this.state = 3529;
                                this.words();
                                this.state = 3530;
                                this.match(bitmarkParser.CL);
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        imagebit() {
            let _localctx = new ImagebitContext(this._ctx, this.state);
            this.enterRule(_localctx, 320, bitmarkParser.RULE_imagebit);
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3534;
                    this.image_one();
                    this.state = 3538;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 462, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 3535;
                                    this.image_chained();
                                }
                            }
                        }
                        this.state = 3540;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 462, this._ctx);
                    }
                    this.state = 3543;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 463, this._ctx)) {
                        case 1:
                            {
                                this.state = 3541;
                                this.match(bitmarkParser.NL);
                                this.state = 3542;
                                this.match(bitmarkParser.ShowInIndex);
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        image_one() {
            let _localctx = new Image_oneContext(this._ctx, this.state);
            this.enterRule(_localctx, 322, bitmarkParser.RULE_image_one);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3545;
                    this.op_image_format();
                    this.state = 3546;
                    this.match(bitmarkParser.COLON);
                    this.state = 3550;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === bitmarkParser.S) {
                        {
                            {
                                this.state = 3547;
                                this.match(bitmarkParser.S);
                            }
                        }
                        this.state = 3552;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3553;
                    this.url();
                    this.state = 3554;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        op_image_format() {
            let _localctx = new Op_image_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 324, bitmarkParser.RULE_op_image_format);
            let _la;
            try {
                this.state = 3570;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.OpAmpImage:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3556;
                            this.match(bitmarkParser.OpAmpImage);
                            this.state = 3559;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.Image_type:
                                    {
                                        {
                                            this.state = 3557;
                                            this.match(bitmarkParser.Image_type);
                                        }
                                    }
                                    break;
                                case bitmarkParser.DotArticleAtt:
                                    {
                                        {
                                            this.state = 3558;
                                            this.match(bitmarkParser.DotArticleAtt);
                                        }
                                    }
                                    break;
                                case bitmarkParser.COLON:
                                    break;
                                default:
                                    break;
                            }
                        }
                        break;
                    case bitmarkParser.OpAmpImageLink:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3561;
                            this.match(bitmarkParser.OpAmpImageLink);
                            this.state = 3563;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.Image_type) {
                                {
                                    this.state = 3562;
                                    this.match(bitmarkParser.Image_type);
                                }
                            }
                        }
                        break;
                    case bitmarkParser.OpAmpImageZoom:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 3565;
                            this.match(bitmarkParser.OpAmpImageZoom);
                            this.state = 3567;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.Image_type) {
                                {
                                    this.state = 3566;
                                    this.match(bitmarkParser.Image_type);
                                }
                            }
                        }
                        break;
                    case bitmarkParser.OpAmpImageWAudio:
                        this.enterOuterAlt(_localctx, 4);
                        {
                            this.state = 3569;
                            this.match(bitmarkParser.OpAmpImageWAudio);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        image_chained() {
            let _localctx = new Image_chainedContext(this._ctx, this.state);
            this.enterRule(_localctx, 326, bitmarkParser.RULE_image_chained);
            let _la;
            try {
                let _alt;
                this.state = 3589;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.AtSrc:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3572;
                            this.match(bitmarkParser.AtSrc);
                            this.state = 3573;
                            this.match(bitmarkParser.COLON);
                            this.state = 3574;
                            this.url();
                            this.state = 3575;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case bitmarkParser.AtWidth:
                    case bitmarkParser.AtHeight:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3577;
                            _la = this._input.LA(1);
                            if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 3578;
                            this.match(bitmarkParser.COLON);
                            this.state = 3579;
                            this.match(bitmarkParser.NUMERIC);
                            this.state = 3580;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case bitmarkParser.OPATALT:
                    case bitmarkParser.OpAtCaption:
                    case bitmarkParser.OpAtLicense:
                    case bitmarkParser.OpAtCopyright:
                    case bitmarkParser.OpAtSearch:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 3581;
                            _la = this._input.LA(1);
                            if (!(((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (bitmarkParser.OPATALT - 184)) | (1 << (bitmarkParser.OpAtCaption - 184)) | (1 << (bitmarkParser.OpAtLicense - 184)) | (1 << (bitmarkParser.OpAtCopyright - 184)) | (1 << (bitmarkParser.OpAtSearch - 184)))) !== 0))) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 3585;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
                            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1 + 1) {
                                    {
                                        {
                                            this.state = 3582;
                                            this.matchWildcard();
                                        }
                                    }
                                }
                                this.state = 3587;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
                            }
                            this.state = 3588;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        image_chained4match() {
            let _localctx = new Image_chained4matchContext(this._ctx, this.state);
            this.enterRule(_localctx, 328, bitmarkParser.RULE_image_chained4match);
            let _la;
            try {
                let _alt;
                this.state = 3608;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.AtSrc:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3591;
                            this.match(bitmarkParser.AtSrc);
                            this.state = 3592;
                            this.match(bitmarkParser.COLON);
                            this.state = 3593;
                            this.url();
                            this.state = 3594;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case bitmarkParser.AtWidth:
                    case bitmarkParser.AtHeight:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3596;
                            _la = this._input.LA(1);
                            if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 3597;
                            this.match(bitmarkParser.COLON);
                            this.state = 3598;
                            this.match(bitmarkParser.NUMERIC);
                            this.state = 3599;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case bitmarkParser.OPATALT:
                    case bitmarkParser.OpAtCaption:
                    case bitmarkParser.OpAtLicense:
                    case bitmarkParser.OpAtCopyright:
                    case bitmarkParser.OpAtSearch:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 3600;
                            _la = this._input.LA(1);
                            if (!(((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (bitmarkParser.OPATALT - 184)) | (1 << (bitmarkParser.OpAtCaption - 184)) | (1 << (bitmarkParser.OpAtLicense - 184)) | (1 << (bitmarkParser.OpAtCopyright - 184)) | (1 << (bitmarkParser.OpAtSearch - 184)))) !== 0))) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 3604;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
                            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1 + 1) {
                                    {
                                        {
                                            this.state = 3601;
                                            this.matchWildcard();
                                        }
                                    }
                                }
                                this.state = 3606;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
                            }
                            this.state = 3607;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        audiobit() {
            let _localctx = new AudiobitContext(this._ctx, this.state);
            this.enterRule(_localctx, 330, bitmarkParser.RULE_audiobit);
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3610;
                    this.audio_one();
                    this.state = 3614;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 473, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 3611;
                                    this.resource_chained();
                                }
                            }
                        }
                        this.state = 3616;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 473, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        audio_one() {
            let _localctx = new Audio_oneContext(this._ctx, this.state);
            this.enterRule(_localctx, 332, bitmarkParser.RULE_audio_one);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3617;
                    this.op_audio_format();
                    this.state = 3618;
                    this.match(bitmarkParser.COLON);
                    this.state = 3619;
                    this.url();
                    this.state = 3620;
                    this.match(bitmarkParser.CL);
                    this.state = 3625;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 474, this._ctx)) {
                        case 1:
                            {
                                this.state = 3621;
                                this.match(bitmarkParser.OPATALT);
                                this.state = 3622;
                                this.words();
                                this.state = 3623;
                                this.match(bitmarkParser.CL);
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        audio_format() {
            let _localctx = new Audio_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 334, bitmarkParser.RULE_audio_format);
            let _la;
            try {
                this.state = 3637;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.AmpAudio:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3627;
                            this.match(bitmarkParser.AmpAudio);
                            this.state = 3630;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.COLON) {
                                {
                                    this.state = 3628;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 3629;
                                    this.match(bitmarkParser.Audio_type);
                                }
                            }
                        }
                        break;
                    case bitmarkParser.AmpAudioLink:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3632;
                            this.match(bitmarkParser.AmpAudioLink);
                            this.state = 3635;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.COLON) {
                                {
                                    this.state = 3633;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 3634;
                                    this.match(bitmarkParser.Audio_type);
                                }
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        op_audio_format() {
            let _localctx = new Op_audio_formatContext(this._ctx, this.state);
            this.enterRule(_localctx, 336, bitmarkParser.RULE_op_audio_format);
            try {
                this.state = 3649;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.OpAmpAudio:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3639;
                            this.match(bitmarkParser.OpAmpAudio);
                            this.state = 3642;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 478, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3640;
                                        this.match(bitmarkParser.COLON);
                                        this.state = 3641;
                                        this.match(bitmarkParser.Audio_type);
                                    }
                                    break;
                            }
                        }
                        break;
                    case bitmarkParser.OpAmpAudioLink:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3644;
                            this.match(bitmarkParser.OpAmpAudioLink);
                            this.state = 3647;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 479, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3645;
                                        this.match(bitmarkParser.COLON);
                                        this.state = 3646;
                                        this.match(bitmarkParser.Audio_type);
                                    }
                                    break;
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        resource_chained() {
            let _localctx = new Resource_chainedContext(this._ctx, this.state);
            this.enterRule(_localctx, 338, bitmarkParser.RULE_resource_chained);
            let _la;
            try {
                let _alt;
                this.state = 3682;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.OPA:
                    case bitmarkParser.AtSrc:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3654;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.OPA:
                                    {
                                        this.state = 3651;
                                        this.match(bitmarkParser.OPA);
                                        this.state = 3652;
                                        this.s_and_w();
                                    }
                                    break;
                                case bitmarkParser.AtSrc:
                                    {
                                        this.state = 3653;
                                        this.match(bitmarkParser.AtSrc);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            this.state = 3656;
                            this.match(bitmarkParser.COLON);
                            this.state = 3660;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 482, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 3657;
                                            this.match(bitmarkParser.S);
                                        }
                                    }
                                }
                                this.state = 3662;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 482, this._ctx);
                            }
                            this.state = 3665;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    this.state = 3665;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case bitmarkParser.S:
                                        case bitmarkParser.OPESC:
                                        case bitmarkParser.OPS:
                                        case bitmarkParser.COLON:
                                        case bitmarkParser.AMP:
                                        case bitmarkParser.Greater:
                                        case bitmarkParser.Less:
                                        case bitmarkParser.RightAngle:
                                        case bitmarkParser.RightArrow:
                                        case bitmarkParser.DBLEQ:
                                        case bitmarkParser.QUOTE_INDEX:
                                        case bitmarkParser.NUMERIC:
                                        case bitmarkParser.STRING:
                                        case bitmarkParser.SENTENCE:
                                        case bitmarkParser.AmpAudio:
                                        case bitmarkParser.AmpImage:
                                        case bitmarkParser.AmpVideo:
                                        case bitmarkParser.AmpArticle:
                                        case bitmarkParser.AmpDocument:
                                        case bitmarkParser.AmpApp:
                                        case bitmarkParser.AmpWebsite:
                                        case bitmarkParser.AmpStillImageFilm:
                                        case bitmarkParser.AmpAudioLink:
                                        case bitmarkParser.AmpImageLink:
                                        case bitmarkParser.AmpVideoLink:
                                        case bitmarkParser.AmpArticleLink:
                                        case bitmarkParser.AmpDocumentLink:
                                        case bitmarkParser.AmpAppLink:
                                        case bitmarkParser.AmpWebsiteLink:
                                        case bitmarkParser.AmpStillImageFilmLink:
                                        case bitmarkParser.BitmarkMinus:
                                        case bitmarkParser.BitmarkPlus:
                                        case bitmarkParser.URL:
                                            {
                                                this.state = 3663;
                                                this.s_and_w();
                                            }
                                            break;
                                        case bitmarkParser.NL:
                                            {
                                                this.state = 3664;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                this.state = 3667;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                            this.state = 3669;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case bitmarkParser.AtWidth:
                    case bitmarkParser.AtHeight:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3670;
                            _la = this._input.LA(1);
                            if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 3671;
                            this.match(bitmarkParser.COLON);
                            this.state = 3672;
                            this.match(bitmarkParser.NUMERIC);
                            this.state = 3673;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case bitmarkParser.OPATALT:
                    case bitmarkParser.OpAtCaption:
                    case bitmarkParser.OpAtLicense:
                    case bitmarkParser.OpAtCopyright:
                    case bitmarkParser.OpAtSearch:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 3674;
                            _la = this._input.LA(1);
                            if (!(((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (bitmarkParser.OPATALT - 184)) | (1 << (bitmarkParser.OpAtCaption - 184)) | (1 << (bitmarkParser.OpAtLicense - 184)) | (1 << (bitmarkParser.OpAtCopyright - 184)) | (1 << (bitmarkParser.OpAtSearch - 184)))) !== 0))) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 3678;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 485, this._ctx);
                            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1 + 1) {
                                    {
                                        {
                                            this.state = 3675;
                                            this.matchWildcard();
                                        }
                                    }
                                }
                                this.state = 3680;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 485, this._ctx);
                            }
                            this.state = 3681;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        telephone() {
            let _localctx = new TelephoneContext(this._ctx, this.state);
            this.enterRule(_localctx, 340, bitmarkParser.RULE_telephone);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3684;
                    this.match(bitmarkParser.TEL);
                    this.state = 3685;
                    this.match(bitmarkParser.PLUS);
                    this.state = 3686;
                    this.match(bitmarkParser.NUMERIC);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        url() {
            let _localctx = new UrlContext(this._ctx, this.state);
            this.enterRule(_localctx, 342, bitmarkParser.RULE_url);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3688;
                    this.match(bitmarkParser.URL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        item() {
            let _localctx = new ItemContext(this._ctx, this.state);
            this.enterRule(_localctx, 344, bitmarkParser.RULE_item);
            let _la;
            try {
                this.state = 3720;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 493, this._ctx)) {
                    case 1:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3690;
                            this.match(bitmarkParser.OPC);
                            this.state = 3691;
                            this.match(bitmarkParser.CL);
                            this.state = 3699;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 488, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3695;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        while (_la === bitmarkParser.S) {
                                            {
                                                {
                                                    this.state = 3692;
                                                    this.match(bitmarkParser.S);
                                                }
                                            }
                                            this.state = 3697;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                        this.state = 3698;
                                        this.lead();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3701;
                            this.match(bitmarkParser.OPC);
                            this.state = 3702;
                            this.s_and_w();
                            this.state = 3707;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (((((_la - 145)) & ~0x1F) === 0 && ((1 << (_la - 145)) & ((1 << (bitmarkParser.COLON - 145)) | (1 << (bitmarkParser.AMP - 145)) | (1 << (bitmarkParser.Greater - 145)) | (1 << (bitmarkParser.Less - 145)) | (1 << (bitmarkParser.RightAngle - 145)) | (1 << (bitmarkParser.RightArrow - 145)) | (1 << (bitmarkParser.QUOTE_INDEX - 145)) | (1 << (bitmarkParser.SENTENCE - 145)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || _la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
                                {
                                    this.state = 3705;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case bitmarkParser.COLON:
                                            {
                                                this.state = 3703;
                                                this.match(bitmarkParser.COLON);
                                            }
                                            break;
                                        case bitmarkParser.AMP:
                                        case bitmarkParser.Greater:
                                        case bitmarkParser.Less:
                                        case bitmarkParser.RightAngle:
                                        case bitmarkParser.RightArrow:
                                        case bitmarkParser.QUOTE_INDEX:
                                        case bitmarkParser.SENTENCE:
                                        case bitmarkParser.AmpAudio:
                                        case bitmarkParser.AmpImage:
                                        case bitmarkParser.AmpVideo:
                                        case bitmarkParser.AmpArticle:
                                        case bitmarkParser.AmpDocument:
                                        case bitmarkParser.AmpApp:
                                        case bitmarkParser.AmpWebsite:
                                        case bitmarkParser.AmpStillImageFilm:
                                        case bitmarkParser.AmpAudioLink:
                                        case bitmarkParser.AmpImageLink:
                                        case bitmarkParser.AmpVideoLink:
                                        case bitmarkParser.AmpArticleLink:
                                        case bitmarkParser.AmpDocumentLink:
                                        case bitmarkParser.AmpAppLink:
                                        case bitmarkParser.AmpWebsiteLink:
                                        case bitmarkParser.AmpStillImageFilmLink:
                                        case bitmarkParser.BitmarkMinus:
                                        case bitmarkParser.BitmarkPlus:
                                            {
                                                this.state = 3704;
                                                this.words();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                this.state = 3709;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 3710;
                            this.match(bitmarkParser.CL);
                            this.state = 3718;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 492, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3714;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        while (_la === bitmarkParser.S) {
                                            {
                                                {
                                                    this.state = 3711;
                                                    this.match(bitmarkParser.S);
                                                }
                                            }
                                            this.state = 3716;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                        this.state = 3717;
                                        this.lead();
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        lead() {
            let _localctx = new LeadContext(this._ctx, this.state);
            this.enterRule(_localctx, 346, bitmarkParser.RULE_lead);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3722;
                    this.match(bitmarkParser.OPC);
                    this.state = 3723;
                    this.s_and_w();
                    this.state = 3728;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (((((_la - 145)) & ~0x1F) === 0 && ((1 << (_la - 145)) & ((1 << (bitmarkParser.COLON - 145)) | (1 << (bitmarkParser.AMP - 145)) | (1 << (bitmarkParser.Greater - 145)) | (1 << (bitmarkParser.Less - 145)) | (1 << (bitmarkParser.RightAngle - 145)) | (1 << (bitmarkParser.RightArrow - 145)) | (1 << (bitmarkParser.QUOTE_INDEX - 145)) | (1 << (bitmarkParser.SENTENCE - 145)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || _la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
                        {
                            this.state = 3726;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.COLON:
                                    {
                                        this.state = 3724;
                                        this.match(bitmarkParser.COLON);
                                    }
                                    break;
                                case bitmarkParser.AMP:
                                case bitmarkParser.Greater:
                                case bitmarkParser.Less:
                                case bitmarkParser.RightAngle:
                                case bitmarkParser.RightArrow:
                                case bitmarkParser.QUOTE_INDEX:
                                case bitmarkParser.SENTENCE:
                                case bitmarkParser.AmpAudio:
                                case bitmarkParser.AmpImage:
                                case bitmarkParser.AmpVideo:
                                case bitmarkParser.AmpArticle:
                                case bitmarkParser.AmpDocument:
                                case bitmarkParser.AmpApp:
                                case bitmarkParser.AmpWebsite:
                                case bitmarkParser.AmpStillImageFilm:
                                case bitmarkParser.AmpAudioLink:
                                case bitmarkParser.AmpImageLink:
                                case bitmarkParser.AmpVideoLink:
                                case bitmarkParser.AmpArticleLink:
                                case bitmarkParser.AmpDocumentLink:
                                case bitmarkParser.AmpAppLink:
                                case bitmarkParser.AmpWebsiteLink:
                                case bitmarkParser.AmpStillImageFilmLink:
                                case bitmarkParser.BitmarkMinus:
                                case bitmarkParser.BitmarkPlus:
                                    {
                                        this.state = 3725;
                                        this.words();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        this.state = 3730;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3731;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        angleref() {
            let _localctx = new AnglerefContext(this._ctx, this.state);
            this.enterRule(_localctx, 348, bitmarkParser.RULE_angleref);
            let _la;
            try {
                this.state = 3743;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.OPRANGLES:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3733;
                            this.match(bitmarkParser.OPRANGLES);
                            this.state = 3735;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                                {
                                    this.state = 3734;
                                    this.s_and_w();
                                }
                            }
                            this.state = 3737;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case bitmarkParser.OPRANGLEL:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3738;
                            this.match(bitmarkParser.OPRANGLEL);
                            this.state = 3740;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                                {
                                    this.state = 3739;
                                    this.s_and_w();
                                }
                            }
                            this.state = 3742;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        example() {
            let _localctx = new ExampleContext(this._ctx, this.state);
            this.enterRule(_localctx, 350, bitmarkParser.RULE_example);
            let _la;
            try {
                this.state = 3752;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.AtExamplecl:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3745;
                            this.match(bitmarkParser.AtExamplecl);
                        }
                        break;
                    case bitmarkParser.AtExampleWithStr:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3746;
                            this.match(bitmarkParser.AtExampleWithStr);
                        }
                        break;
                    case bitmarkParser.AtExamplecol:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 3747;
                            this.match(bitmarkParser.AtExamplecol);
                            this.state = 3749;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.SENTENCE) {
                                {
                                    this.state = 3748;
                                    this.match(bitmarkParser.SENTENCE);
                                }
                            }
                            this.state = 3751;
                            this.match(bitmarkParser.EOF);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bracketed_text() {
            let _localctx = new Bracketed_textContext(this._ctx, this.state);
            this.enterRule(_localctx, 352, bitmarkParser.RULE_bracketed_text);
            let _la;
            try {
                let _alt;
                this.state = 3793;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 508, this._ctx)) {
                    case 1:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3754;
                            this.match(bitmarkParser.BracEnclose);
                            this.state = 3756;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 501, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3755;
                                        this.s_and_w();
                                    }
                                    break;
                            }
                            this.state = 3779;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                                {
                                    {
                                        this.state = 3758;
                                        this.s_and_w();
                                        this.state = 3768;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 503, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 3759;
                                                        this.match(bitmarkParser.NL);
                                                        this.state = 3763;
                                                        this._errHandler.sync(this);
                                                        _alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
                                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                                            if (_alt === 1) {
                                                                {
                                                                    {
                                                                        this.state = 3760;
                                                                        this.match(bitmarkParser.S);
                                                                    }
                                                                }
                                                            }
                                                            this.state = 3765;
                                                            this._errHandler.sync(this);
                                                            _alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
                                                        }
                                                    }
                                                }
                                            }
                                            this.state = 3770;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 503, this._ctx);
                                        }
                                        this.state = 3774;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        while (_la === bitmarkParser.NL) {
                                            {
                                                {
                                                    this.state = 3771;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                            this.state = 3776;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                    }
                                }
                                this.state = 3781;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 3782;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case 2:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3783;
                            this.match(bitmarkParser.BracEnclose);
                            this.state = 3789;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                                {
                                    this.state = 3787;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 506, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 3784;
                                                this.s_and_w();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 3785;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                        case 3:
                                            {
                                                this.state = 3786;
                                                this.match(bitmarkParser.S);
                                            }
                                            break;
                                    }
                                }
                                this.state = 3791;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 3792;
                            this.match(bitmarkParser.EOF);
                        }
                        break;
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        reference() {
            let _localctx = new ReferenceContext(this._ctx, this.state);
            this.enterRule(_localctx, 354, bitmarkParser.RULE_reference);
            let _la;
            try {
                this.state = 3817;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 513, this._ctx)) {
                    case 1:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3795;
                            this.match(bitmarkParser.AtReference);
                            this.state = 3800;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    this.state = 3800;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 509, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 3796;
                                                this.s_and_w();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 3797;
                                                this.match(bitmarkParser.COLON);
                                            }
                                            break;
                                        case 3:
                                            {
                                                this.state = 3798;
                                                this.match(bitmarkParser.URL);
                                            }
                                            break;
                                        case 4:
                                            {
                                                this.state = 3799;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                    }
                                }
                                this.state = 3802;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                            this.state = 3804;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case 2:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3805;
                            this.match(bitmarkParser.AtReference);
                            this.state = 3813;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                                {
                                    this.state = 3811;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 511, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 3806;
                                                this.s_and_w();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 3807;
                                                this.match(bitmarkParser.COLON);
                                            }
                                            break;
                                        case 3:
                                            {
                                                this.state = 3808;
                                                this.match(bitmarkParser.URL);
                                            }
                                            break;
                                        case 4:
                                            {
                                                this.state = 3809;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                        case 5:
                                            {
                                                this.state = 3810;
                                                this.match(bitmarkParser.S);
                                            }
                                            break;
                                    }
                                }
                                this.state = 3815;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 3816;
                            this.match(bitmarkParser.EOF);
                        }
                        break;
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        progress() {
            let _localctx = new ProgressContext(this._ctx, this.state);
            this.enterRule(_localctx, 356, bitmarkParser.RULE_progress);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3819;
                    this.match(bitmarkParser.AtProgress);
                    this.state = 3820;
                    this.s_and_w();
                    this.state = 3821;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        dateprop() {
            let _localctx = new DatepropContext(this._ctx, this.state);
            this.enterRule(_localctx, 358, bitmarkParser.RULE_dateprop);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3823;
                    this.match(bitmarkParser.AtDate);
                    this.state = 3827;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        {
                            this.state = 3827;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 514, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3824;
                                        this.s_and_w();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 3825;
                                        this.match(bitmarkParser.COLON);
                                    }
                                    break;
                                case 3:
                                    {
                                        this.state = 3826;
                                        this.match(bitmarkParser.NL);
                                    }
                                    break;
                            }
                        }
                        this.state = 3829;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                    this.state = 3831;
                    this.match(bitmarkParser.CL);
                    this.state = 3833;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 516, this._ctx)) {
                        case 1:
                            {
                                this.state = 3832;
                                this.dateprop_chained();
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        dateprop_chained() {
            let _localctx = new Dateprop_chainedContext(this._ctx, this.state);
            this.enterRule(_localctx, 360, bitmarkParser.RULE_dateprop_chained);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3835;
                    this.match(bitmarkParser.AtDate);
                    this.state = 3839;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        {
                            this.state = 3839;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 517, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3836;
                                        this.s_and_w();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 3837;
                                        this.match(bitmarkParser.COLON);
                                    }
                                    break;
                                case 3:
                                    {
                                        this.state = 3838;
                                        this.match(bitmarkParser.NL);
                                    }
                                    break;
                            }
                        }
                        this.state = 3841;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                    this.state = 3843;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        instruction() {
            let _localctx = new InstructionContext(this._ctx, this.state);
            this.enterRule(_localctx, 362, bitmarkParser.RULE_instruction);
            let _la;
            try {
                let _alt;
                this.state = 3879;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 525, this._ctx)) {
                    case 1:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3845;
                            this.match(bitmarkParser.OPB);
                            this.state = 3847;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 519, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3846;
                                        this.s_and_w();
                                    }
                                    break;
                            }
                            this.state = 3870;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                                {
                                    {
                                        this.state = 3849;
                                        this.s_and_w();
                                        this.state = 3859;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 521, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 3850;
                                                        this.match(bitmarkParser.NL);
                                                        this.state = 3854;
                                                        this._errHandler.sync(this);
                                                        _alt = this.interpreter.adaptivePredict(this._input, 520, this._ctx);
                                                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                                            if (_alt === 1) {
                                                                {
                                                                    {
                                                                        this.state = 3851;
                                                                        this.match(bitmarkParser.S);
                                                                    }
                                                                }
                                                            }
                                                            this.state = 3856;
                                                            this._errHandler.sync(this);
                                                            _alt = this.interpreter.adaptivePredict(this._input, 520, this._ctx);
                                                        }
                                                    }
                                                }
                                            }
                                            this.state = 3861;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 521, this._ctx);
                                        }
                                        this.state = 3865;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        while (_la === bitmarkParser.NL) {
                                            {
                                                {
                                                    this.state = 3862;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                            this.state = 3867;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                    }
                                }
                                this.state = 3872;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 3873;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case 2:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3874;
                            this.match(bitmarkParser.OPB);
                            this.state = 3876;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                                {
                                    this.state = 3875;
                                    this.s_and_w();
                                }
                            }
                            this.state = 3878;
                            this.match(bitmarkParser.EOF);
                        }
                        break;
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        hint() {
            let _localctx = new HintContext(this._ctx, this.state);
            this.enterRule(_localctx, 364, bitmarkParser.RULE_hint);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3881;
                    this.match(bitmarkParser.OPQ);
                    this.state = 3883;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        {
                            {
                                this.state = 3882;
                                _la = this._input.LA(1);
                                if (_la <= 0 || (_la === bitmarkParser.CL)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 3885;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & ((1 << (bitmarkParser.OPDOT - 1)) | (1 << (bitmarkParser.S - 1)) | (1 << (bitmarkParser.BitBook - 1)) | (1 << (bitmarkParser.BitChapter - 1)) | (1 << (bitmarkParser.BitToc - 1)) | (1 << (bitmarkParser.BitSummary - 1)) | (1 << (bitmarkParser.BitIntlink - 1)) | (1 << (bitmarkParser.BitIntRef - 1)) | (1 << (bitmarkParser.BitAlias - 1)) | (1 << (bitmarkParser.BitGroups - 1)) | (1 << (bitmarkParser.BitGroupt - 1)) | (1 << (bitmarkParser.BitPlaceholder - 1)) | (1 << (bitmarkParser.BitStatement - 1)) | (1 << (bitmarkParser.BitDetails - 1)) | (1 << (bitmarkParser.BitSampleSolution - 1)) | (1 << (bitmarkParser.BitTakeAudio - 1)) | (1 << (bitmarkParser.CLOZE - 1)) | (1 << (bitmarkParser.MATCH - 1)) | (1 << (bitmarkParser.BitArticle - 1)) | (1 << (bitmarkParser.BitPage - 1)) | (1 << (bitmarkParser.BitEssay - 1)) | (1 << (bitmarkParser.BitMessage - 1)) | (1 << (bitmarkParser.BitCorrection - 1)) | (1 << (bitmarkParser.BitMark - 1)) | (1 << (bitmarkParser.BitDocup - 1)) | (1 << (bitmarkParser.BitTakepic - 1)) | (1 << (bitmarkParser.BitRecaud - 1)) | (1 << (bitmarkParser.BitPrepnote - 1)) | (1 << (bitmarkParser.BitAssign - 1)) | (1 << (bitmarkParser.BitBotint - 1)) | (1 << (bitmarkParser.BitSelfassess - 1)) | (1 << (bitmarkParser.BitRating - 1)))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (bitmarkParser.BitSurvey - 33)) | (1 << (bitmarkParser.BitSurvey1 - 33)) | (1 << (bitmarkParser.BitSurveyanon - 33)) | (1 << (bitmarkParser.BitSurveyanon1 - 33)) | (1 << (bitmarkParser.BitVocabulary - 33)) | (1 << (bitmarkParser.BitVocabulary1 - 33)) | (1 << (bitmarkParser.BitNote - 33)) | (1 << (bitmarkParser.BitInfo - 33)) | (1 << (bitmarkParser.BitWarning - 33)) | (1 << (bitmarkParser.BitRemark - 33)) | (1 << (bitmarkParser.BitHint - 33)) | (1 << (bitmarkParser.BitHelp - 33)) | (1 << (bitmarkParser.BitDanger - 33)) | (1 << (bitmarkParser.BitBug - 33)) | (1 << (bitmarkParser.BitSidenote - 33)) | (1 << (bitmarkParser.BitStickynote - 33)) | (1 << (bitmarkParser.BitQuote - 33)) | (1 << (bitmarkParser.BitFootnote - 33)) | (1 << (bitmarkParser.BitExample - 33)) | (1 << (bitmarkParser.BitButtonCopytext - 33)) | (1 << (bitmarkParser.BitWbtContinue - 33)) | (1 << (bitmarkParser.BitLearningPathDetails - 33)) | (1 << (bitmarkParser.BitLearningPathLti - 33)) | (1 << (bitmarkParser.BitLearningPathStep - 33)) | (1 << (bitmarkParser.BitLearningPathBook - 33)) | (1 << (bitmarkParser.BitLearningPathSign - 33)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 33)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 33)) | (1 << (bitmarkParser.BitLearningPathClosing - 33)) | (1 << (bitmarkParser.BitLearningPathFeedback - 33)) | (1 << (bitmarkParser.BitLearningPathBotTraining - 33)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (bitmarkParser.BitLearningPathClassroomTraining - 65)) | (1 << (bitmarkParser.BitLearningPathClassroomEvent - 65)) | (1 << (bitmarkParser.BitBotActionSend - 65)) | (1 << (bitmarkParser.BitBotActionAnnounce - 65)) | (1 << (bitmarkParser.BitBotActionSave - 65)) | (1 << (bitmarkParser.BitBotActionRemind - 65)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 65)) | (1 << (bitmarkParser.BitScorm - 65)) | (1 << (bitmarkParser.BitImage - 65)) | (1 << (bitmarkParser.BitImageLink - 65)) | (1 << (bitmarkParser.BitImageZoom - 65)) | (1 << (bitmarkParser.BitAudio - 65)) | (1 << (bitmarkParser.BitAudioLink - 65)) | (1 << (bitmarkParser.BitAudioEmbed - 65)) | (1 << (bitmarkParser.BitVideo - 65)) | (1 << (bitmarkParser.BitVideoLink - 65)) | (1 << (bitmarkParser.BitVideoEmbed - 65)) | (1 << (bitmarkParser.BitStillImageFilm - 65)) | (1 << (bitmarkParser.BitStillImageFilmLink - 65)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 65)) | (1 << (bitmarkParser.BitWebsiteLink - 65)) | (1 << (bitmarkParser.BitDocument - 65)) | (1 << (bitmarkParser.BitDocumentLink - 65)) | (1 << (bitmarkParser.BitDocumentEmbed - 65)) | (1 << (bitmarkParser.BitDocumentDownload - 65)) | (1 << (bitmarkParser.BitAppLink - 65)) | (1 << (bitmarkParser.BitEditorial - 65)) | (1 << (bitmarkParser.BitBookFrontispiece - 65)) | (1 << (bitmarkParser.BitBookTitle - 65)) | (1 << (bitmarkParser.BitBookCopyright - 65)) | (1 << (bitmarkParser.BitBookDedication - 65)) | (1 << (bitmarkParser.BitBookForword - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.BitBookPreface - 97)) | (1 << (bitmarkParser.BitBookPrologue - 97)) | (1 << (bitmarkParser.BitBookEpilogue - 97)) | (1 << (bitmarkParser.BitBookIntroduction - 97)) | (1 << (bitmarkParser.BitBookIncitingIncident - 97)) | (1 << (bitmarkParser.BitBookConclusion - 97)) | (1 << (bitmarkParser.BitBookAfterword - 97)) | (1 << (bitmarkParser.BitBookPostscript - 97)) | (1 << (bitmarkParser.BitBookappendix - 97)) | (1 << (bitmarkParser.BitBookAddendum - 97)) | (1 << (bitmarkParser.BitBookAcknowledgments - 97)) | (1 << (bitmarkParser.BitBookListOfContributors - 97)) | (1 << (bitmarkParser.BitBookBibliography - 97)) | (1 << (bitmarkParser.BitBookReferenceList - 97)) | (1 << (bitmarkParser.BitBookEndnotes - 97)) | (1 << (bitmarkParser.BitBookNotes - 97)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 97)) | (1 << (bitmarkParser.BitBookTeaser - 97)) | (1 << (bitmarkParser.BitBookAutherBio - 97)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 97)) | (1 << (bitmarkParser.BitBookComingSoon - 97)) | (1 << (bitmarkParser.BitBookReadMore - 97)) | (1 << (bitmarkParser.BitBookSummary - 97)) | (1 << (bitmarkParser.BitBookEpigraph - 97)) | (1 << (bitmarkParser.BitCode - 97)) | (1 << (bitmarkParser.BitCard1 - 97)) | (1 << (bitmarkParser.BitQuestion1 - 97)) | (1 << (bitmarkParser.COMMENT - 97)) | (1 << (bitmarkParser.Image_type - 97)) | (1 << (bitmarkParser.Audio_type - 97)) | (1 << (bitmarkParser.Video_type - 97)) | (1 << (bitmarkParser.OPDOLL - 97)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.OPBUL - 129)) | (1 << (bitmarkParser.OPESC - 129)) | (1 << (bitmarkParser.OPRANGLES - 129)) | (1 << (bitmarkParser.OPRANGLEL - 129)) | (1 << (bitmarkParser.OPDANGLE - 129)) | (1 << (bitmarkParser.OPU - 129)) | (1 << (bitmarkParser.OPB - 129)) | (1 << (bitmarkParser.OPQ - 129)) | (1 << (bitmarkParser.OPA - 129)) | (1 << (bitmarkParser.OPP - 129)) | (1 << (bitmarkParser.OPM - 129)) | (1 << (bitmarkParser.OPS - 129)) | (1 << (bitmarkParser.OPR - 129)) | (1 << (bitmarkParser.OPHASH - 129)) | (1 << (bitmarkParser.OPC - 129)) | (1 << (bitmarkParser.COLON - 129)) | (1 << (bitmarkParser.AMP - 129)) | (1 << (bitmarkParser.DBLCOLON - 129)) | (1 << (bitmarkParser.PLUS - 129)) | (1 << (bitmarkParser.DotAt - 129)) | (1 << (bitmarkParser.Greater - 129)) | (1 << (bitmarkParser.Less - 129)) | (1 << (bitmarkParser.RightAngle - 129)) | (1 << (bitmarkParser.RightArrow - 129)) | (1 << (bitmarkParser.DBLEQ - 129)) | (1 << (bitmarkParser.HSPL - 129)) | (1 << (bitmarkParser.HSPL2 - 129)) | (1 << (bitmarkParser.SSPL - 129)) | (1 << (bitmarkParser.SSPL2 - 129)) | (1 << (bitmarkParser.QUOTE_INDEX - 129)) | (1 << (bitmarkParser.DCANY - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (bitmarkParser.ArticleText - 161)) | (1 << (bitmarkParser.NOTCL - 161)) | (1 << (bitmarkParser.NUMERIC - 161)) | (1 << (bitmarkParser.STRING - 161)) | (1 << (bitmarkParser.NL - 161)) | (1 << (bitmarkParser.SENTENCE - 161)) | (1 << (bitmarkParser.OPAT - 161)) | (1 << (bitmarkParser.AtProgress - 161)) | (1 << (bitmarkParser.AtReference - 161)) | (1 << (bitmarkParser.AtWidth - 161)) | (1 << (bitmarkParser.AtHeight - 161)) | (1 << (bitmarkParser.AtProgressPoints - 161)) | (1 << (bitmarkParser.AtShortanswer - 161)) | (1 << (bitmarkParser.AtLonganswer - 161)) | (1 << (bitmarkParser.AtExampleWithStr - 161)) | (1 << (bitmarkParser.AtExamplecol - 161)) | (1 << (bitmarkParser.AtExamplecl - 161)) | (1 << (bitmarkParser.AtPartialAnswerS - 161)) | (1 << (bitmarkParser.AtPartialAnswer - 161)) | (1 << (bitmarkParser.AtLabeltrue - 161)) | (1 << (bitmarkParser.AtLabelfalse - 161)) | (1 << (bitmarkParser.AtPoints - 161)) | (1 << (bitmarkParser.AtSrc - 161)) | (1 << (bitmarkParser.OPATALT - 161)) | (1 << (bitmarkParser.OPAMARK - 161)) | (1 << (bitmarkParser.ShowInIndex - 161)) | (1 << (bitmarkParser.OpAtCaption - 161)) | (1 << (bitmarkParser.OpAtLicense - 161)) | (1 << (bitmarkParser.OpAtCopyright - 161)) | (1 << (bitmarkParser.OpAtSearch - 161)) | (1 << (bitmarkParser.OpAtIsTracked - 161)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (bitmarkParser.AtDate - 193)) | (1 << (bitmarkParser.Http - 193)) | (1 << (bitmarkParser.Https - 193)) | (1 << (bitmarkParser.AmpAudio - 193)) | (1 << (bitmarkParser.AmpImage - 193)) | (1 << (bitmarkParser.AmpImageZoom - 193)) | (1 << (bitmarkParser.AmpImageWAudio - 193)) | (1 << (bitmarkParser.AmpVideo - 193)) | (1 << (bitmarkParser.AmpArticle - 193)) | (1 << (bitmarkParser.AmpDocument - 193)) | (1 << (bitmarkParser.AmpApp - 193)) | (1 << (bitmarkParser.AmpWebsite - 193)) | (1 << (bitmarkParser.AmpStillImageFilm - 193)) | (1 << (bitmarkParser.AmpPdf - 193)) | (1 << (bitmarkParser.OpAmpAudio - 193)) | (1 << (bitmarkParser.OpAmpImage - 193)) | (1 << (bitmarkParser.OpAmpImageZoom - 193)) | (1 << (bitmarkParser.OpAmpImageWAudio - 193)) | (1 << (bitmarkParser.OpAmpVideo - 193)) | (1 << (bitmarkParser.OpAmpArticle - 193)) | (1 << (bitmarkParser.OpAmpArticleAtt - 193)) | (1 << (bitmarkParser.OpAmpDocument - 193)) | (1 << (bitmarkParser.OpAmpApp - 193)) | (1 << (bitmarkParser.OpAmpWebsite - 193)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 193)) | (1 << (bitmarkParser.BracEnclose - 193)) | (1 << (bitmarkParser.AmpAudioLink - 193)) | (1 << (bitmarkParser.AmpImageLink - 193)) | (1 << (bitmarkParser.AmpVideoLink - 193)) | (1 << (bitmarkParser.AmpArticleLink - 193)) | (1 << (bitmarkParser.AmpDocumentLink - 193)) | (1 << (bitmarkParser.AmpAppLink - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (bitmarkParser.AmpWebsiteLink - 225)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 225)) | (1 << (bitmarkParser.OpAmpAudioLink - 225)) | (1 << (bitmarkParser.OpAmpImageLink - 225)) | (1 << (bitmarkParser.OpAmpVideoLink - 225)) | (1 << (bitmarkParser.OpAmpArticleLink - 225)) | (1 << (bitmarkParser.OpAmpDocumentLink - 225)) | (1 << (bitmarkParser.OpAmpAppLink - 225)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 225)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 225)) | (1 << (bitmarkParser.BitmarkMinus - 225)) | (1 << (bitmarkParser.BitmarkPlus - 225)) | (1 << (bitmarkParser.ColonText - 225)) | (1 << (bitmarkParser.Prosemirror - 225)) | (1 << (bitmarkParser.Placeholder - 225)) | (1 << (bitmarkParser.BASIC - 225)) | (1 << (bitmarkParser.JPG - 225)) | (1 << (bitmarkParser.PNG - 225)) | (1 << (bitmarkParser.GIF - 225)) | (1 << (bitmarkParser.SVG - 225)) | (1 << (bitmarkParser.MP2 - 225)) | (1 << (bitmarkParser.MP3 - 225)) | (1 << (bitmarkParser.MP4 - 225)) | (1 << (bitmarkParser.FLV - 225)) | (1 << (bitmarkParser.WMV - 225)) | (1 << (bitmarkParser.MPEG - 225)) | (1 << (bitmarkParser.MPG - 225)) | (1 << (bitmarkParser.TEL - 225)) | (1 << (bitmarkParser.DotArticleAtt - 225)) | (1 << (bitmarkParser.STAR - 225)) | (1 << (bitmarkParser.URL - 225)) | (1 << (bitmarkParser.LIST_LINE - 225)))) !== 0));
                    this.state = 3887;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        title() {
            let _localctx = new TitleContext(this._ctx, this.state);
            this.enterRule(_localctx, 366, bitmarkParser.RULE_title);
            let _la;
            try {
                this.state = 3901;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 529, this._ctx)) {
                    case 1:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3889;
                            this.match(bitmarkParser.OPHASH);
                            this.state = 3892;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    this.state = 3892;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case bitmarkParser.S:
                                        case bitmarkParser.OPESC:
                                        case bitmarkParser.OPS:
                                        case bitmarkParser.COLON:
                                        case bitmarkParser.AMP:
                                        case bitmarkParser.Greater:
                                        case bitmarkParser.Less:
                                        case bitmarkParser.RightAngle:
                                        case bitmarkParser.RightArrow:
                                        case bitmarkParser.DBLEQ:
                                        case bitmarkParser.QUOTE_INDEX:
                                        case bitmarkParser.NUMERIC:
                                        case bitmarkParser.STRING:
                                        case bitmarkParser.SENTENCE:
                                        case bitmarkParser.AmpAudio:
                                        case bitmarkParser.AmpImage:
                                        case bitmarkParser.AmpVideo:
                                        case bitmarkParser.AmpArticle:
                                        case bitmarkParser.AmpDocument:
                                        case bitmarkParser.AmpApp:
                                        case bitmarkParser.AmpWebsite:
                                        case bitmarkParser.AmpStillImageFilm:
                                        case bitmarkParser.AmpAudioLink:
                                        case bitmarkParser.AmpImageLink:
                                        case bitmarkParser.AmpVideoLink:
                                        case bitmarkParser.AmpArticleLink:
                                        case bitmarkParser.AmpDocumentLink:
                                        case bitmarkParser.AmpAppLink:
                                        case bitmarkParser.AmpWebsiteLink:
                                        case bitmarkParser.AmpStillImageFilmLink:
                                        case bitmarkParser.BitmarkMinus:
                                        case bitmarkParser.BitmarkPlus:
                                        case bitmarkParser.URL:
                                            {
                                                this.state = 3890;
                                                this.s_and_w();
                                            }
                                            break;
                                        case bitmarkParser.NL:
                                            {
                                                this.state = 3891;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                this.state = 3894;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                            this.state = 3896;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case 2:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3897;
                            this.match(bitmarkParser.OPHASH);
                            this.state = 3898;
                            this.s_and_w();
                            this.state = 3899;
                            this.match(bitmarkParser.EOF);
                        }
                        break;
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bool_label() {
            let _localctx = new Bool_labelContext(this._ctx, this.state);
            this.enterRule(_localctx, 368, bitmarkParser.RULE_bool_label);
            try {
                this.state = 3911;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.AtLabeltrue:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3903;
                            this.match(bitmarkParser.AtLabeltrue);
                            this.state = 3904;
                            this.s_and_w();
                            this.state = 3905;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case bitmarkParser.AtLabelfalse:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3907;
                            this.match(bitmarkParser.AtLabelfalse);
                            this.state = 3908;
                            this.s_and_w();
                            this.state = 3909;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        progress_points() {
            let _localctx = new Progress_pointsContext(this._ctx, this.state);
            this.enterRule(_localctx, 370, bitmarkParser.RULE_progress_points);
            try {
                this.state = 3922;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 531, this._ctx)) {
                    case 1:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3913;
                            this.match(bitmarkParser.AtProgressPoints);
                            this.state = 3914;
                            this.match(bitmarkParser.COLON);
                            this.state = 3915;
                            this.match(bitmarkParser.NUMERIC);
                            this.state = 3916;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case 2:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3917;
                            this.match(bitmarkParser.AtProgressPoints);
                            this.state = 3918;
                            this.match(bitmarkParser.COLON);
                            this.state = 3919;
                            this.s_and_w();
                            this.state = 3920;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        istracked() {
            let _localctx = new IstrackedContext(this._ctx, this.state);
            this.enterRule(_localctx, 372, bitmarkParser.RULE_istracked);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3924;
                    this.match(bitmarkParser.OpAtIsTracked);
                    this.state = 3925;
                    this.s_and_w();
                    this.state = 3926;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        isinfoonly() {
            let _localctx = new IsinfoonlyContext(this._ctx, this.state);
            this.enterRule(_localctx, 374, bitmarkParser.RULE_isinfoonly);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3928;
                    this.match(bitmarkParser.OpAtIsInfoOnly);
                    this.state = 3929;
                    this.s_and_w();
                    this.state = 3930;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        atdef() {
            let _localctx = new AtdefContext(this._ctx, this.state);
            this.enterRule(_localctx, 376, bitmarkParser.RULE_atdef);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3932;
                    this.atdef_();
                    this.state = 3942;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 533, this._ctx);
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                                {
                                    this.state = 3936;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 3933;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 3938;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 3939;
                                    this.atdef_();
                                }
                            }
                        }
                        this.state = 3944;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 533, this._ctx);
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        atdef_() {
            let _localctx = new Atdef_Context(this._ctx, this.state);
            this.enterRule(_localctx, 378, bitmarkParser.RULE_atdef_);
            let _la;
            try {
                let _alt;
                this.state = 3967;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.OPA:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3945;
                            this.match(bitmarkParser.OPA);
                            this.state = 3946;
                            this.s_and_w();
                            this.state = 3947;
                            _la = this._input.LA(1);
                            if (!(_la === bitmarkParser.COLON || _la === bitmarkParser.DBLCOLON)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 3948;
                            this.s_and_w();
                            this.state = 3954;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                                {
                                    this.state = 3952;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 534, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 3949;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 3950;
                                                this.match(bitmarkParser.COLON);
                                            }
                                            break;
                                        case 3:
                                            {
                                                this.state = 3951;
                                                this.s_and_w();
                                            }
                                            break;
                                    }
                                }
                                this.state = 3956;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 3957;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case bitmarkParser.OpAtCopyright:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3959;
                            this.match(bitmarkParser.OpAtCopyright);
                            this.state = 3963;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 536, this._ctx);
                            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1 + 1) {
                                    {
                                        {
                                            this.state = 3960;
                                            this.matchWildcard();
                                        }
                                    }
                                }
                                this.state = 3965;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 536, this._ctx);
                            }
                            this.state = 3966;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        dollarans() {
            let _localctx = new DollaransContext(this._ctx, this.state);
            this.enterRule(_localctx, 380, bitmarkParser.RULE_dollarans);
            let _la;
            try {
                this.state = 3988;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 542, this._ctx)) {
                    case 1:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 3969;
                            this.match(bitmarkParser.OPDOLL);
                            this.state = 3973;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    this.state = 3973;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 538, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 3970;
                                                this.s_and_w();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 3971;
                                                this.match(bitmarkParser.COLON);
                                            }
                                            break;
                                        case 3:
                                            {
                                                this.state = 3972;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                    }
                                }
                                this.state = 3975;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0));
                            this.state = 3977;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case 2:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 3978;
                            this.match(bitmarkParser.OPDOLL);
                            this.state = 3984;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.NL - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                                {
                                    this.state = 3982;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 540, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 3979;
                                                this.s_and_w();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 3980;
                                                this.match(bitmarkParser.COLON);
                                            }
                                            break;
                                        case 3:
                                            {
                                                this.state = 3981;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                    }
                                }
                                this.state = 3986;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 3987;
                            this.match(bitmarkParser.EOF);
                        }
                        break;
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        anchor() {
            let _localctx = new AnchorContext(this._ctx, this.state);
            this.enterRule(_localctx, 382, bitmarkParser.RULE_anchor);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 3990;
                    this.match(bitmarkParser.OPDANGLE);
                    this.state = 3992;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === bitmarkParser.S || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (bitmarkParser.OPESC - 130)) | (1 << (bitmarkParser.OPS - 130)) | (1 << (bitmarkParser.COLON - 130)) | (1 << (bitmarkParser.AMP - 130)) | (1 << (bitmarkParser.Greater - 130)) | (1 << (bitmarkParser.Less - 130)) | (1 << (bitmarkParser.RightAngle - 130)) | (1 << (bitmarkParser.RightArrow - 130)) | (1 << (bitmarkParser.DBLEQ - 130)) | (1 << (bitmarkParser.QUOTE_INDEX - 130)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (bitmarkParser.NUMERIC - 163)) | (1 << (bitmarkParser.STRING - 163)) | (1 << (bitmarkParser.SENTENCE - 163)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (bitmarkParser.AmpAudio - 196)) | (1 << (bitmarkParser.AmpImage - 196)) | (1 << (bitmarkParser.AmpVideo - 196)) | (1 << (bitmarkParser.AmpArticle - 196)) | (1 << (bitmarkParser.AmpDocument - 196)) | (1 << (bitmarkParser.AmpApp - 196)) | (1 << (bitmarkParser.AmpWebsite - 196)) | (1 << (bitmarkParser.AmpStillImageFilm - 196)) | (1 << (bitmarkParser.AmpAudioLink - 196)) | (1 << (bitmarkParser.AmpImageLink - 196)) | (1 << (bitmarkParser.AmpVideoLink - 196)) | (1 << (bitmarkParser.AmpArticleLink - 196)) | (1 << (bitmarkParser.AmpDocumentLink - 196)) | (1 << (bitmarkParser.AmpAppLink - 196)) | (1 << (bitmarkParser.AmpWebsiteLink - 196)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 196)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (bitmarkParser.BitmarkMinus - 235)) | (1 << (bitmarkParser.BitmarkPlus - 235)) | (1 << (bitmarkParser.URL - 235)))) !== 0)) {
                        {
                            this.state = 3991;
                            this.s_and_w();
                        }
                    }
                    this.state = 3994;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        lines() {
            let _localctx = new LinesContext(this._ctx, this.state);
            this.enterRule(_localctx, 384, bitmarkParser.RULE_lines);
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 4000;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 3996;
                                        this.s_and_w();
                                        this.state = 3998;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 544, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 3997;
                                                    this.match(bitmarkParser.NL);
                                                }
                                                break;
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 4002;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        s_and_w() {
            let _localctx = new S_and_wContext(this._ctx, this.state);
            this.enterRule(_localctx, 386, bitmarkParser.RULE_s_and_w);
            let _la;
            try {
                let _alt;
                this.state = 4050;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 553, this._ctx)) {
                    case 1:
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 4004;
                            this.match(bitmarkParser.STRING);
                            this.state = 4011;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 547, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4006;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        do {
                                            {
                                                {
                                                    this.state = 4005;
                                                    this.match(bitmarkParser.S);
                                                }
                                            }
                                            this.state = 4008;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        } while (_la === bitmarkParser.S);
                                        this.state = 4010;
                                        this.match(bitmarkParser.NUMERIC);
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        this.enterOuterAlt(_localctx, 2);
                        {
                            this.state = 4013;
                            this.words();
                            this.state = 4020;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 549, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4015;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        do {
                                            {
                                                {
                                                    this.state = 4014;
                                                    this.match(bitmarkParser.S);
                                                }
                                            }
                                            this.state = 4017;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        } while (_la === bitmarkParser.S);
                                        this.state = 4019;
                                        this.match(bitmarkParser.NUMERIC);
                                    }
                                    break;
                            }
                        }
                        break;
                    case 3:
                        this.enterOuterAlt(_localctx, 3);
                        {
                            this.state = 4022;
                            this.match(bitmarkParser.NUMERIC);
                        }
                        break;
                    case 4:
                        this.enterOuterAlt(_localctx, 4);
                        {
                            this.state = 4023;
                            this.match(bitmarkParser.OPS);
                            this.state = 4024;
                            this.s_and_w();
                            this.state = 4025;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                    case 5:
                        this.enterOuterAlt(_localctx, 5);
                        {
                            this.state = 4030;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.S) {
                                {
                                    {
                                        this.state = 4027;
                                        this.match(bitmarkParser.S);
                                    }
                                }
                                this.state = 4032;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 4033;
                            this.match(bitmarkParser.COLON);
                            this.state = 4037;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 4034;
                                            this.match(bitmarkParser.S);
                                        }
                                    }
                                }
                                this.state = 4039;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
                            }
                        }
                        break;
                    case 6:
                        this.enterOuterAlt(_localctx, 6);
                        {
                            this.state = 4040;
                            this.match(bitmarkParser.AMP);
                            this.state = 4044;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 4041;
                                            this.match(bitmarkParser.S);
                                        }
                                    }
                                }
                                this.state = 4046;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
                            }
                        }
                        break;
                    case 7:
                        this.enterOuterAlt(_localctx, 7);
                        {
                            this.state = 4047;
                            this.match(bitmarkParser.DBLEQ);
                        }
                        break;
                    case 8:
                        this.enterOuterAlt(_localctx, 8);
                        {
                            this.state = 4048;
                            this.match(bitmarkParser.URL);
                        }
                        break;
                    case 9:
                        this.enterOuterAlt(_localctx, 9);
                        {
                            this.state = 4049;
                            this.bracket_escaped();
                        }
                        break;
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        dclines() {
            let _localctx = new DclinesContext(this._ctx, this.state);
            this.enterRule(_localctx, 388, bitmarkParser.RULE_dclines);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 4052;
                    this.match(bitmarkParser.DCANY);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        bracket_escaped() {
            let _localctx = new Bracket_escapedContext(this._ctx, this.state);
            this.enterRule(_localctx, 390, bitmarkParser.RULE_bracket_escaped);
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 4054;
                    this.match(bitmarkParser.OPESC);
                    this.state = 4056;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 4055;
                                        this.s_and_w();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 4058;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 554, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                    this.state = 4061;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 555, this._ctx)) {
                        case 1:
                            {
                                this.state = 4060;
                                this.match(bitmarkParser.CL);
                            }
                            break;
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        clnsp() {
            let _localctx = new ClnspContext(this._ctx, this.state);
            this.enterRule(_localctx, 392, bitmarkParser.RULE_clnsp);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 4063;
                    this.match(bitmarkParser.CL);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        sspl() {
            let _localctx = new SsplContext(this._ctx, this.state);
            this.enterRule(_localctx, 394, bitmarkParser.RULE_sspl);
            let _la;
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 4065;
                    _la = this._input.LA(1);
                    if (!(_la === bitmarkParser.SSPL || _la === bitmarkParser.SSPL2)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                        }
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        words() {
            let _localctx = new WordsContext(this._ctx, this.state);
            this.enterRule(_localctx, 396, bitmarkParser.RULE_words);
            let _la;
            try {
                let _alt;
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 4094;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    this.state = 4094;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case bitmarkParser.SENTENCE:
                                            {
                                                this.state = 4067;
                                                this.sentence();
                                            }
                                            break;
                                        case bitmarkParser.AMP:
                                            {
                                                this.state = 4068;
                                                this.match(bitmarkParser.AMP);
                                            }
                                            break;
                                        case bitmarkParser.Greater:
                                            {
                                                this.state = 4069;
                                                this.match(bitmarkParser.Greater);
                                                this.state = 4070;
                                                _la = this._input.LA(1);
                                                if (_la <= 0 || (_la === bitmarkParser.Greater)) {
                                                    this._errHandler.recoverInline(this);
                                                }
                                                else {
                                                    if (this._input.LA(1) === Token.EOF) {
                                                        this.matchedEOF = true;
                                                    }
                                                    this._errHandler.reportMatch(this);
                                                    this.consume();
                                                }
                                            }
                                            break;
                                        case bitmarkParser.Less:
                                            {
                                                this.state = 4071;
                                                this.match(bitmarkParser.Less);
                                                this.state = 4072;
                                                _la = this._input.LA(1);
                                                if (_la <= 0 || (_la === bitmarkParser.Less)) {
                                                    this._errHandler.recoverInline(this);
                                                }
                                                else {
                                                    if (this._input.LA(1) === Token.EOF) {
                                                        this.matchedEOF = true;
                                                    }
                                                    this._errHandler.reportMatch(this);
                                                    this.consume();
                                                }
                                            }
                                            break;
                                        case bitmarkParser.RightArrow:
                                            {
                                                this.state = 4073;
                                                this.match(bitmarkParser.RightArrow);
                                            }
                                            break;
                                        case bitmarkParser.RightAngle:
                                            {
                                                this.state = 4074;
                                                this.match(bitmarkParser.RightAngle);
                                            }
                                            break;
                                        case bitmarkParser.AmpArticle:
                                            {
                                                this.state = 4075;
                                                this.match(bitmarkParser.AmpArticle);
                                            }
                                            break;
                                        case bitmarkParser.AmpArticleLink:
                                            {
                                                this.state = 4076;
                                                this.match(bitmarkParser.AmpArticleLink);
                                            }
                                            break;
                                        case bitmarkParser.AmpDocument:
                                            {
                                                this.state = 4077;
                                                this.match(bitmarkParser.AmpDocument);
                                            }
                                            break;
                                        case bitmarkParser.AmpDocumentLink:
                                            {
                                                this.state = 4078;
                                                this.match(bitmarkParser.AmpDocumentLink);
                                            }
                                            break;
                                        case bitmarkParser.AmpWebsite:
                                            {
                                                this.state = 4079;
                                                this.match(bitmarkParser.AmpWebsite);
                                            }
                                            break;
                                        case bitmarkParser.AmpWebsiteLink:
                                            {
                                                this.state = 4080;
                                                this.match(bitmarkParser.AmpWebsiteLink);
                                            }
                                            break;
                                        case bitmarkParser.AmpImage:
                                            {
                                                this.state = 4081;
                                                this.match(bitmarkParser.AmpImage);
                                            }
                                            break;
                                        case bitmarkParser.AmpImageLink:
                                            {
                                                this.state = 4082;
                                                this.match(bitmarkParser.AmpImageLink);
                                            }
                                            break;
                                        case bitmarkParser.AmpAudio:
                                            {
                                                this.state = 4083;
                                                this.match(bitmarkParser.AmpAudio);
                                            }
                                            break;
                                        case bitmarkParser.AmpAudioLink:
                                            {
                                                this.state = 4084;
                                                this.match(bitmarkParser.AmpAudioLink);
                                            }
                                            break;
                                        case bitmarkParser.AmpVideo:
                                            {
                                                this.state = 4085;
                                                this.match(bitmarkParser.AmpVideo);
                                            }
                                            break;
                                        case bitmarkParser.AmpVideoLink:
                                            {
                                                this.state = 4086;
                                                this.match(bitmarkParser.AmpVideoLink);
                                            }
                                            break;
                                        case bitmarkParser.AmpApp:
                                            {
                                                this.state = 4087;
                                                this.match(bitmarkParser.AmpApp);
                                            }
                                            break;
                                        case bitmarkParser.AmpAppLink:
                                            {
                                                this.state = 4088;
                                                this.match(bitmarkParser.AmpAppLink);
                                            }
                                            break;
                                        case bitmarkParser.AmpStillImageFilm:
                                            {
                                                this.state = 4089;
                                                this.match(bitmarkParser.AmpStillImageFilm);
                                            }
                                            break;
                                        case bitmarkParser.AmpStillImageFilmLink:
                                            {
                                                this.state = 4090;
                                                this.match(bitmarkParser.AmpStillImageFilmLink);
                                            }
                                            break;
                                        case bitmarkParser.BitmarkMinus:
                                            {
                                                this.state = 4091;
                                                this.match(bitmarkParser.BitmarkMinus);
                                            }
                                            break;
                                        case bitmarkParser.BitmarkPlus:
                                            {
                                                this.state = 4092;
                                                this.match(bitmarkParser.BitmarkPlus);
                                            }
                                            break;
                                        case bitmarkParser.QUOTE_INDEX:
                                            {
                                                this.state = 4093;
                                                this.match(bitmarkParser.QUOTE_INDEX);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.state = 4096;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        sp() {
            let _localctx = new SpContext(this._ctx, this.state);
            this.enterRule(_localctx, 398, bitmarkParser.RULE_sp);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 4098;
                    this.match(bitmarkParser.S);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        // @RuleVersion(0)
        sentence() {
            let _localctx = new SentenceContext(this._ctx, this.state);
            this.enterRule(_localctx, 400, bitmarkParser.RULE_sentence);
            try {
                this.enterOuterAlt(_localctx, 1);
                {
                    this.state = 4100;
                    this.match(bitmarkParser.SENTENCE);
                }
            }
            catch (re) {
                if (re instanceof RecognitionException) {
                    _localctx.exception = re;
                    this._errHandler.reportError(this, re);
                    this._errHandler.recover(this, re);
                }
                else {
                    throw re;
                }
            }
            finally {
                this.exitRule();
            }
            return _localctx;
        }
        static get _ATN() {
            if (!bitmarkParser.__ATN) {
                bitmarkParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(bitmarkParser._serializedATN));
            }
            return bitmarkParser.__ATN;
        }
    }
    bitmarkParser.OPDOT = 1;
    bitmarkParser.S = 2;
    bitmarkParser.BitBook = 3;
    bitmarkParser.BitChapter = 4;
    bitmarkParser.BitToc = 5;
    bitmarkParser.BitSummary = 6;
    bitmarkParser.BitIntlink = 7;
    bitmarkParser.BitIntRef = 8;
    bitmarkParser.BitAlias = 9;
    bitmarkParser.BitGroups = 10;
    bitmarkParser.BitGroupt = 11;
    bitmarkParser.BitPlaceholder = 12;
    bitmarkParser.BitStatement = 13;
    bitmarkParser.BitDetails = 14;
    bitmarkParser.BitSampleSolution = 15;
    bitmarkParser.BitTakeAudio = 16;
    bitmarkParser.CLOZE = 17;
    bitmarkParser.MATCH = 18;
    bitmarkParser.BitArticle = 19;
    bitmarkParser.BitPage = 20;
    bitmarkParser.BitEssay = 21;
    bitmarkParser.BitMessage = 22;
    bitmarkParser.BitCorrection = 23;
    bitmarkParser.BitMark = 24;
    bitmarkParser.BitDocup = 25;
    bitmarkParser.BitTakepic = 26;
    bitmarkParser.BitRecaud = 27;
    bitmarkParser.BitPrepnote = 28;
    bitmarkParser.BitAssign = 29;
    bitmarkParser.BitBotint = 30;
    bitmarkParser.BitSelfassess = 31;
    bitmarkParser.BitRating = 32;
    bitmarkParser.BitSurvey = 33;
    bitmarkParser.BitSurvey1 = 34;
    bitmarkParser.BitSurveyanon = 35;
    bitmarkParser.BitSurveyanon1 = 36;
    bitmarkParser.BitVocabulary = 37;
    bitmarkParser.BitVocabulary1 = 38;
    bitmarkParser.BitNote = 39;
    bitmarkParser.BitInfo = 40;
    bitmarkParser.BitWarning = 41;
    bitmarkParser.BitRemark = 42;
    bitmarkParser.BitHint = 43;
    bitmarkParser.BitHelp = 44;
    bitmarkParser.BitDanger = 45;
    bitmarkParser.BitBug = 46;
    bitmarkParser.BitSidenote = 47;
    bitmarkParser.BitStickynote = 48;
    bitmarkParser.BitQuote = 49;
    bitmarkParser.BitFootnote = 50;
    bitmarkParser.BitExample = 51;
    bitmarkParser.BitButtonCopytext = 52;
    bitmarkParser.BitWbtContinue = 53;
    bitmarkParser.BitLearningPathDetails = 54;
    bitmarkParser.BitLearningPathLti = 55;
    bitmarkParser.BitLearningPathStep = 56;
    bitmarkParser.BitLearningPathBook = 57;
    bitmarkParser.BitLearningPathSign = 58;
    bitmarkParser.BitLearningPathVideoCall = 59;
    bitmarkParser.BitLearningPathLearningGoal = 60;
    bitmarkParser.BitLearningPathClosing = 61;
    bitmarkParser.BitLearningPathFeedback = 62;
    bitmarkParser.BitLearningPathBotTraining = 63;
    bitmarkParser.BitLearningPathExternalLink = 64;
    bitmarkParser.BitLearningPathClassroomTraining = 65;
    bitmarkParser.BitLearningPathClassroomEvent = 66;
    bitmarkParser.BitBotActionSend = 67;
    bitmarkParser.BitBotActionAnnounce = 68;
    bitmarkParser.BitBotActionSave = 69;
    bitmarkParser.BitBotActionRemind = 70;
    bitmarkParser.BitVendorPadletEmbed = 71;
    bitmarkParser.BitScorm = 72;
    bitmarkParser.BitImage = 73;
    bitmarkParser.BitImageLink = 74;
    bitmarkParser.BitImageZoom = 75;
    bitmarkParser.BitAudio = 76;
    bitmarkParser.BitAudioLink = 77;
    bitmarkParser.BitAudioEmbed = 78;
    bitmarkParser.BitVideo = 79;
    bitmarkParser.BitVideoLink = 80;
    bitmarkParser.BitVideoEmbed = 81;
    bitmarkParser.BitStillImageFilm = 82;
    bitmarkParser.BitStillImageFilmLink = 83;
    bitmarkParser.BitStillImageFilmEmbed = 84;
    bitmarkParser.BitWebsiteLink = 85;
    bitmarkParser.BitDocument = 86;
    bitmarkParser.BitDocumentLink = 87;
    bitmarkParser.BitDocumentEmbed = 88;
    bitmarkParser.BitDocumentDownload = 89;
    bitmarkParser.BitAppLink = 90;
    bitmarkParser.BitEditorial = 91;
    bitmarkParser.BitBookFrontispiece = 92;
    bitmarkParser.BitBookTitle = 93;
    bitmarkParser.BitBookCopyright = 94;
    bitmarkParser.BitBookDedication = 95;
    bitmarkParser.BitBookForword = 96;
    bitmarkParser.BitBookPreface = 97;
    bitmarkParser.BitBookPrologue = 98;
    bitmarkParser.BitBookEpilogue = 99;
    bitmarkParser.BitBookIntroduction = 100;
    bitmarkParser.BitBookIncitingIncident = 101;
    bitmarkParser.BitBookConclusion = 102;
    bitmarkParser.BitBookAfterword = 103;
    bitmarkParser.BitBookPostscript = 104;
    bitmarkParser.BitBookappendix = 105;
    bitmarkParser.BitBookAddendum = 106;
    bitmarkParser.BitBookAcknowledgments = 107;
    bitmarkParser.BitBookListOfContributors = 108;
    bitmarkParser.BitBookBibliography = 109;
    bitmarkParser.BitBookReferenceList = 110;
    bitmarkParser.BitBookEndnotes = 111;
    bitmarkParser.BitBookNotes = 112;
    bitmarkParser.BitBookCopyrightPermissions = 113;
    bitmarkParser.BitBookTeaser = 114;
    bitmarkParser.BitBookAutherBio = 115;
    bitmarkParser.BitBookRequestForABookReview = 116;
    bitmarkParser.BitBookComingSoon = 117;
    bitmarkParser.BitBookReadMore = 118;
    bitmarkParser.BitBookSummary = 119;
    bitmarkParser.BitBookEpigraph = 120;
    bitmarkParser.BitCode = 121;
    bitmarkParser.BitCard1 = 122;
    bitmarkParser.BitQuestion1 = 123;
    bitmarkParser.COMMENT = 124;
    bitmarkParser.Image_type = 125;
    bitmarkParser.Audio_type = 126;
    bitmarkParser.Video_type = 127;
    bitmarkParser.OPDOLL = 128;
    bitmarkParser.OPBUL = 129;
    bitmarkParser.OPESC = 130;
    bitmarkParser.OPRANGLES = 131;
    bitmarkParser.OPRANGLEL = 132;
    bitmarkParser.OPDANGLE = 133;
    bitmarkParser.OPU = 134;
    bitmarkParser.OPB = 135;
    bitmarkParser.OPQ = 136;
    bitmarkParser.OPA = 137;
    bitmarkParser.OPP = 138;
    bitmarkParser.OPM = 139;
    bitmarkParser.OPS = 140;
    bitmarkParser.OPR = 141;
    bitmarkParser.OPHASH = 142;
    bitmarkParser.OPC = 143;
    bitmarkParser.CL = 144;
    bitmarkParser.COLON = 145;
    bitmarkParser.AMP = 146;
    bitmarkParser.DBLCOLON = 147;
    bitmarkParser.PLUS = 148;
    bitmarkParser.DotAt = 149;
    bitmarkParser.Greater = 150;
    bitmarkParser.Less = 151;
    bitmarkParser.RightAngle = 152;
    bitmarkParser.RightArrow = 153;
    bitmarkParser.DBLEQ = 154;
    bitmarkParser.HSPL = 155;
    bitmarkParser.HSPL2 = 156;
    bitmarkParser.SSPL = 157;
    bitmarkParser.SSPL2 = 158;
    bitmarkParser.QUOTE_INDEX = 159;
    bitmarkParser.DCANY = 160;
    bitmarkParser.ArticleText = 161;
    bitmarkParser.NOTCL = 162;
    bitmarkParser.NUMERIC = 163;
    bitmarkParser.STRING = 164;
    bitmarkParser.NL = 165;
    bitmarkParser.SENTENCE = 166;
    bitmarkParser.OPAT = 167;
    bitmarkParser.AtProgress = 168;
    bitmarkParser.AtReference = 169;
    bitmarkParser.AtWidth = 170;
    bitmarkParser.AtHeight = 171;
    bitmarkParser.AtProgressPoints = 172;
    bitmarkParser.AtShortanswer = 173;
    bitmarkParser.AtLonganswer = 174;
    bitmarkParser.AtExampleWithStr = 175;
    bitmarkParser.AtExamplecol = 176;
    bitmarkParser.AtExamplecl = 177;
    bitmarkParser.AtPartialAnswerS = 178;
    bitmarkParser.AtPartialAnswer = 179;
    bitmarkParser.AtLabeltrue = 180;
    bitmarkParser.AtLabelfalse = 181;
    bitmarkParser.AtPoints = 182;
    bitmarkParser.AtSrc = 183;
    bitmarkParser.OPATALT = 184;
    bitmarkParser.OPAMARK = 185;
    bitmarkParser.ShowInIndex = 186;
    bitmarkParser.OpAtCaption = 187;
    bitmarkParser.OpAtLicense = 188;
    bitmarkParser.OpAtCopyright = 189;
    bitmarkParser.OpAtSearch = 190;
    bitmarkParser.OpAtIsTracked = 191;
    bitmarkParser.OpAtIsInfoOnly = 192;
    bitmarkParser.AtDate = 193;
    bitmarkParser.Http = 194;
    bitmarkParser.Https = 195;
    bitmarkParser.AmpAudio = 196;
    bitmarkParser.AmpImage = 197;
    bitmarkParser.AmpImageZoom = 198;
    bitmarkParser.AmpImageWAudio = 199;
    bitmarkParser.AmpVideo = 200;
    bitmarkParser.AmpArticle = 201;
    bitmarkParser.AmpDocument = 202;
    bitmarkParser.AmpApp = 203;
    bitmarkParser.AmpWebsite = 204;
    bitmarkParser.AmpStillImageFilm = 205;
    bitmarkParser.AmpPdf = 206;
    bitmarkParser.OpAmpAudio = 207;
    bitmarkParser.OpAmpImage = 208;
    bitmarkParser.OpAmpImageZoom = 209;
    bitmarkParser.OpAmpImageWAudio = 210;
    bitmarkParser.OpAmpVideo = 211;
    bitmarkParser.OpAmpArticle = 212;
    bitmarkParser.OpAmpArticleAtt = 213;
    bitmarkParser.OpAmpDocument = 214;
    bitmarkParser.OpAmpApp = 215;
    bitmarkParser.OpAmpWebsite = 216;
    bitmarkParser.OpAmpStillImageFilm = 217;
    bitmarkParser.BracEnclose = 218;
    bitmarkParser.AmpAudioLink = 219;
    bitmarkParser.AmpImageLink = 220;
    bitmarkParser.AmpVideoLink = 221;
    bitmarkParser.AmpArticleLink = 222;
    bitmarkParser.AmpDocumentLink = 223;
    bitmarkParser.AmpAppLink = 224;
    bitmarkParser.AmpWebsiteLink = 225;
    bitmarkParser.AmpStillImageFilmLink = 226;
    bitmarkParser.OpAmpAudioLink = 227;
    bitmarkParser.OpAmpImageLink = 228;
    bitmarkParser.OpAmpVideoLink = 229;
    bitmarkParser.OpAmpArticleLink = 230;
    bitmarkParser.OpAmpDocumentLink = 231;
    bitmarkParser.OpAmpAppLink = 232;
    bitmarkParser.OpAmpWebsiteLink = 233;
    bitmarkParser.OpAmpStillImageFilmLink = 234;
    bitmarkParser.BitmarkMinus = 235;
    bitmarkParser.BitmarkPlus = 236;
    bitmarkParser.ColonText = 237;
    bitmarkParser.Prosemirror = 238;
    bitmarkParser.Placeholder = 239;
    bitmarkParser.BASIC = 240;
    bitmarkParser.JPG = 241;
    bitmarkParser.PNG = 242;
    bitmarkParser.GIF = 243;
    bitmarkParser.SVG = 244;
    bitmarkParser.MP2 = 245;
    bitmarkParser.MP3 = 246;
    bitmarkParser.MP4 = 247;
    bitmarkParser.FLV = 248;
    bitmarkParser.WMV = 249;
    bitmarkParser.MPEG = 250;
    bitmarkParser.MPG = 251;
    bitmarkParser.TEL = 252;
    bitmarkParser.DotArticleAtt = 253;
    bitmarkParser.STAR = 254;
    bitmarkParser.URL = 255;
    bitmarkParser.LIST_LINE = 256;
    bitmarkParser.RULE_bitmark = 0;
    bitmarkParser.RULE_bitmark_ = 1;
    bitmarkParser.RULE_bit = 2;
    bitmarkParser.RULE_book = 3;
    bitmarkParser.RULE_chapter = 4;
    bitmarkParser.RULE_toc = 5;
    bitmarkParser.RULE_summary = 6;
    bitmarkParser.RULE_internal_link = 7;
    bitmarkParser.RULE_bit_alias = 8;
    bitmarkParser.RULE_title_etc = 9;
    bitmarkParser.RULE_group_born = 10;
    bitmarkParser.RULE_group_died = 11;
    bitmarkParser.RULE_learning_path_lti = 12;
    bitmarkParser.RULE_learning_path_step = 13;
    bitmarkParser.RULE_learning_path_book = 14;
    bitmarkParser.RULE_learning_path_sign = 15;
    bitmarkParser.RULE_learning_path_video_call = 16;
    bitmarkParser.RULE_learning_path_learning_goal = 17;
    bitmarkParser.RULE_learning_path_closing = 18;
    bitmarkParser.RULE_learning_path_feedback = 19;
    bitmarkParser.RULE_learning_path_bot_training = 20;
    bitmarkParser.RULE_learning_path_external_link = 21;
    bitmarkParser.RULE_learning_path_classroom_training = 22;
    bitmarkParser.RULE_learning_path_classroom_event = 23;
    bitmarkParser.RULE_bot_action_send = 24;
    bitmarkParser.RULE_bot_action_announce = 25;
    bitmarkParser.RULE_bot_action_save = 26;
    bitmarkParser.RULE_bot_action_remind = 27;
    bitmarkParser.RULE_bitElem = 28;
    bitmarkParser.RULE_gap = 29;
    bitmarkParser.RULE_single_gap = 30;
    bitmarkParser.RULE_choice_plus = 31;
    bitmarkParser.RULE_choice_minus = 32;
    bitmarkParser.RULE_choice_star = 33;
    bitmarkParser.RULE_essay = 34;
    bitmarkParser.RULE_ml_example = 35;
    bitmarkParser.RULE_partans = 36;
    bitmarkParser.RULE_resource = 37;
    bitmarkParser.RULE_correction = 38;
    bitmarkParser.RULE_corrs = 39;
    bitmarkParser.RULE_mark_ = 40;
    bitmarkParser.RULE_mark_text = 41;
    bitmarkParser.RULE_mark_color = 42;
    bitmarkParser.RULE_document_upload = 43;
    bitmarkParser.RULE_take_audio = 44;
    bitmarkParser.RULE_take_picture = 45;
    bitmarkParser.RULE_record_audio = 46;
    bitmarkParser.RULE_preparation_note = 47;
    bitmarkParser.RULE_assignment = 48;
    bitmarkParser.RULE_article = 49;
    bitmarkParser.RULE_statement = 50;
    bitmarkParser.RULE_details = 51;
    bitmarkParser.RULE_sample_solution = 52;
    bitmarkParser.RULE_buttoncopytext = 53;
    bitmarkParser.RULE_wbtcontinue = 54;
    bitmarkParser.RULE_learningpathdetails = 55;
    bitmarkParser.RULE_page = 56;
    bitmarkParser.RULE_note = 57;
    bitmarkParser.RULE_info = 58;
    bitmarkParser.RULE_warning = 59;
    bitmarkParser.RULE_remark = 60;
    bitmarkParser.RULE_help = 61;
    bitmarkParser.RULE_danger = 62;
    bitmarkParser.RULE_bug = 63;
    bitmarkParser.RULE_sidenote = 64;
    bitmarkParser.RULE_stickynote = 65;
    bitmarkParser.RULE_quote = 66;
    bitmarkParser.RULE_footnote = 67;
    bitmarkParser.RULE_hintbit = 68;
    bitmarkParser.RULE_examplebit = 69;
    bitmarkParser.RULE_vendor_padlet_embed = 70;
    bitmarkParser.RULE_scorm = 71;
    bitmarkParser.RULE_bit_image = 72;
    bitmarkParser.RULE_bit_imageLink = 73;
    bitmarkParser.RULE_bit_imageZoom = 74;
    bitmarkParser.RULE_bit_audio = 75;
    bitmarkParser.RULE_bit_audioLink = 76;
    bitmarkParser.RULE_bit_audioEmbed = 77;
    bitmarkParser.RULE_bit_video = 78;
    bitmarkParser.RULE_bit_videoLink = 79;
    bitmarkParser.RULE_bit_videoEmbed = 80;
    bitmarkParser.RULE_bit_stillImageFilm = 81;
    bitmarkParser.RULE_bit_stillImageFilmLink = 82;
    bitmarkParser.RULE_bit_stillImageFilmEmbed = 83;
    bitmarkParser.RULE_bit_websiteLink = 84;
    bitmarkParser.RULE_bit_document = 85;
    bitmarkParser.RULE_bit_documentLink = 86;
    bitmarkParser.RULE_bit_documentEmbed = 87;
    bitmarkParser.RULE_bit_documentDownload = 88;
    bitmarkParser.RULE_bit_appLink = 89;
    bitmarkParser.RULE_bit_editorial = 90;
    bitmarkParser.RULE_book_frontispiece = 91;
    bitmarkParser.RULE_book_title = 92;
    bitmarkParser.RULE_book_copyright = 93;
    bitmarkParser.RULE_book_dedication = 94;
    bitmarkParser.RULE_book_forword = 95;
    bitmarkParser.RULE_book_preface = 96;
    bitmarkParser.RULE_book_prologue = 97;
    bitmarkParser.RULE_book_epilogue = 98;
    bitmarkParser.RULE_book_introduction = 99;
    bitmarkParser.RULE_book_inciting_incident = 100;
    bitmarkParser.RULE_book_conclusion = 101;
    bitmarkParser.RULE_book_afterword = 102;
    bitmarkParser.RULE_book_postscript = 103;
    bitmarkParser.RULE_book_appendix = 104;
    bitmarkParser.RULE_book_addendum = 105;
    bitmarkParser.RULE_book_acknowledgments = 106;
    bitmarkParser.RULE_book_list_of_contributors = 107;
    bitmarkParser.RULE_book_bibliography = 108;
    bitmarkParser.RULE_book_reference_list = 109;
    bitmarkParser.RULE_book_endnotes = 110;
    bitmarkParser.RULE_book_notes = 111;
    bitmarkParser.RULE_book_copyright_permissions = 112;
    bitmarkParser.RULE_book_teaser = 113;
    bitmarkParser.RULE_book_auther_bio = 114;
    bitmarkParser.RULE_book_request_for_a_book_review = 115;
    bitmarkParser.RULE_book_coming_soon = 116;
    bitmarkParser.RULE_book_read_more = 117;
    bitmarkParser.RULE_book_summary = 118;
    bitmarkParser.RULE_book_epigraph = 119;
    bitmarkParser.RULE_code = 120;
    bitmarkParser.RULE_card1 = 121;
    bitmarkParser.RULE_question1 = 122;
    bitmarkParser.RULE_message = 123;
    bitmarkParser.RULE_bot_interview = 124;
    bitmarkParser.RULE_bot_choice = 125;
    bitmarkParser.RULE_rating = 126;
    bitmarkParser.RULE_bullet_item = 127;
    bitmarkParser.RULE_survey = 128;
    bitmarkParser.RULE_survey_1 = 129;
    bitmarkParser.RULE_survey_anonymous = 130;
    bitmarkParser.RULE_survey_anonymous_1 = 131;
    bitmarkParser.RULE_self_assessment = 132;
    bitmarkParser.RULE_self_assess_s_and_w = 133;
    bitmarkParser.RULE_atpoint = 134;
    bitmarkParser.RULE_format = 135;
    bitmarkParser.RULE_resource_format = 136;
    bitmarkParser.RULE_resource_format_extra = 137;
    bitmarkParser.RULE_format2 = 138;
    bitmarkParser.RULE_image_format = 139;
    bitmarkParser.RULE_video_format = 140;
    bitmarkParser.RULE_article_format = 141;
    bitmarkParser.RULE_document_format = 142;
    bitmarkParser.RULE_app_format = 143;
    bitmarkParser.RULE_website_format = 144;
    bitmarkParser.RULE_stillimagefilm_format = 145;
    bitmarkParser.RULE_op_article_format = 146;
    bitmarkParser.RULE_op_document_format = 147;
    bitmarkParser.RULE_op_app_format = 148;
    bitmarkParser.RULE_op_website_format = 149;
    bitmarkParser.RULE_op_video_format = 150;
    bitmarkParser.RULE_op_stillimagefilm_format = 151;
    bitmarkParser.RULE_articlebit = 152;
    bitmarkParser.RULE_documentbit = 153;
    bitmarkParser.RULE_websitebit = 154;
    bitmarkParser.RULE_appbit = 155;
    bitmarkParser.RULE_stillimagefilmbit = 156;
    bitmarkParser.RULE_stillimg_one = 157;
    bitmarkParser.RULE_videobit = 158;
    bitmarkParser.RULE_video_one = 159;
    bitmarkParser.RULE_imagebit = 160;
    bitmarkParser.RULE_image_one = 161;
    bitmarkParser.RULE_op_image_format = 162;
    bitmarkParser.RULE_image_chained = 163;
    bitmarkParser.RULE_image_chained4match = 164;
    bitmarkParser.RULE_audiobit = 165;
    bitmarkParser.RULE_audio_one = 166;
    bitmarkParser.RULE_audio_format = 167;
    bitmarkParser.RULE_op_audio_format = 168;
    bitmarkParser.RULE_resource_chained = 169;
    bitmarkParser.RULE_telephone = 170;
    bitmarkParser.RULE_url = 171;
    bitmarkParser.RULE_item = 172;
    bitmarkParser.RULE_lead = 173;
    bitmarkParser.RULE_angleref = 174;
    bitmarkParser.RULE_example = 175;
    bitmarkParser.RULE_bracketed_text = 176;
    bitmarkParser.RULE_reference = 177;
    bitmarkParser.RULE_progress = 178;
    bitmarkParser.RULE_dateprop = 179;
    bitmarkParser.RULE_dateprop_chained = 180;
    bitmarkParser.RULE_instruction = 181;
    bitmarkParser.RULE_hint = 182;
    bitmarkParser.RULE_title = 183;
    bitmarkParser.RULE_bool_label = 184;
    bitmarkParser.RULE_progress_points = 185;
    bitmarkParser.RULE_istracked = 186;
    bitmarkParser.RULE_isinfoonly = 187;
    bitmarkParser.RULE_atdef = 188;
    bitmarkParser.RULE_atdef_ = 189;
    bitmarkParser.RULE_dollarans = 190;
    bitmarkParser.RULE_anchor = 191;
    bitmarkParser.RULE_lines = 192;
    bitmarkParser.RULE_s_and_w = 193;
    bitmarkParser.RULE_dclines = 194;
    bitmarkParser.RULE_bracket_escaped = 195;
    bitmarkParser.RULE_clnsp = 196;
    bitmarkParser.RULE_sspl = 197;
    bitmarkParser.RULE_words = 198;
    bitmarkParser.RULE_sp = 199;
    bitmarkParser.RULE_sentence = 200;
    // tslint:disable:no-trailing-whitespace
    bitmarkParser.ruleNames = [
        "bitmark", "bitmark_", "bit", "book", "chapter", "toc", "summary", "internal_link",
        "bit_alias", "title_etc", "group_born", "group_died", "learning_path_lti",
        "learning_path_step", "learning_path_book", "learning_path_sign", "learning_path_video_call",
        "learning_path_learning_goal", "learning_path_closing", "learning_path_feedback",
        "learning_path_bot_training", "learning_path_external_link", "learning_path_classroom_training",
        "learning_path_classroom_event", "bot_action_send", "bot_action_announce",
        "bot_action_save", "bot_action_remind", "bitElem", "gap", "single_gap",
        "choice_plus", "choice_minus", "choice_star", "essay", "ml_example", "partans",
        "resource", "correction", "corrs", "mark_", "mark_text", "mark_color",
        "document_upload", "take_audio", "take_picture", "record_audio", "preparation_note",
        "assignment", "article", "statement", "details", "sample_solution", "buttoncopytext",
        "wbtcontinue", "learningpathdetails", "page", "note", "info", "warning",
        "remark", "help", "danger", "bug", "sidenote", "stickynote", "quote",
        "footnote", "hintbit", "examplebit", "vendor_padlet_embed", "scorm", "bit_image",
        "bit_imageLink", "bit_imageZoom", "bit_audio", "bit_audioLink", "bit_audioEmbed",
        "bit_video", "bit_videoLink", "bit_videoEmbed", "bit_stillImageFilm",
        "bit_stillImageFilmLink", "bit_stillImageFilmEmbed", "bit_websiteLink",
        "bit_document", "bit_documentLink", "bit_documentEmbed", "bit_documentDownload",
        "bit_appLink", "bit_editorial", "book_frontispiece", "book_title", "book_copyright",
        "book_dedication", "book_forword", "book_preface", "book_prologue", "book_epilogue",
        "book_introduction", "book_inciting_incident", "book_conclusion", "book_afterword",
        "book_postscript", "book_appendix", "book_addendum", "book_acknowledgments",
        "book_list_of_contributors", "book_bibliography", "book_reference_list",
        "book_endnotes", "book_notes", "book_copyright_permissions", "book_teaser",
        "book_auther_bio", "book_request_for_a_book_review", "book_coming_soon",
        "book_read_more", "book_summary", "book_epigraph", "code", "card1", "question1",
        "message", "bot_interview", "bot_choice", "rating", "bullet_item", "survey",
        "survey_1", "survey_anonymous", "survey_anonymous_1", "self_assessment",
        "self_assess_s_and_w", "atpoint", "format", "resource_format", "resource_format_extra",
        "format2", "image_format", "video_format", "article_format", "document_format",
        "app_format", "website_format", "stillimagefilm_format", "op_article_format",
        "op_document_format", "op_app_format", "op_website_format", "op_video_format",
        "op_stillimagefilm_format", "articlebit", "documentbit", "websitebit",
        "appbit", "stillimagefilmbit", "stillimg_one", "videobit", "video_one",
        "imagebit", "image_one", "op_image_format", "image_chained", "image_chained4match",
        "audiobit", "audio_one", "audio_format", "op_audio_format", "resource_chained",
        "telephone", "url", "item", "lead", "angleref", "example", "bracketed_text",
        "reference", "progress", "dateprop", "dateprop_chained", "instruction",
        "hint", "title", "bool_label", "progress_points", "istracked", "isinfoonly",
        "atdef", "atdef_", "dollarans", "anchor", "lines", "s_and_w", "dclines",
        "bracket_escaped", "clnsp", "sspl", "words", "sp", "sentence",
    ];
    bitmarkParser._LITERAL_NAMES = [
        undefined, "'[.'", undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, "'CLOZE'", "'MATCH'", undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, "':'", "'&'", "'::'",
        "'+'", "'.@'", "'>'", "'<'", "'\u25BA'", "'\u2192'", "'=='", undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, "'[@'", undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, "'http://'", "'https://'", "'&audio'",
        "'&image'", "'&image-zoom'", "'&imageWithAudio'", "'&video'", "'&article'",
        "'&document'", "'&app'", "'&website'", "'&stillImageFilm'", "'&pdf'",
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, "'&audioLink'",
        "'&imageLink'", "'&videoLink'", "'&articleLink'", "'&documentLink'", "'&appLink'",
        "'&websiteLink'", "'&stillImageFilmLink'", undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, "':bitmark--'",
        "':bitmark++'", "':text'", "':prosemirror'", "':placeholder'", "':basic'",
        "':jpg'", "':png'", "':gif'", "':svg'", "':mp2'", "':mp3'", "':mp4'",
        "':flv'", "':wmv'", "':mpeg'", "':mpg'", "'tel:'", "'.article-attachment'",
        "'*'",
    ];
    bitmarkParser._SYMBOLIC_NAMES = [
        undefined, "OPDOT", "S", "BitBook", "BitChapter", "BitToc", "BitSummary",
        "BitIntlink", "BitIntRef", "BitAlias", "BitGroups", "BitGroupt", "BitPlaceholder",
        "BitStatement", "BitDetails", "BitSampleSolution", "BitTakeAudio", "CLOZE",
        "MATCH", "BitArticle", "BitPage", "BitEssay", "BitMessage", "BitCorrection",
        "BitMark", "BitDocup", "BitTakepic", "BitRecaud", "BitPrepnote", "BitAssign",
        "BitBotint", "BitSelfassess", "BitRating", "BitSurvey", "BitSurvey1",
        "BitSurveyanon", "BitSurveyanon1", "BitVocabulary", "BitVocabulary1",
        "BitNote", "BitInfo", "BitWarning", "BitRemark", "BitHint", "BitHelp",
        "BitDanger", "BitBug", "BitSidenote", "BitStickynote", "BitQuote", "BitFootnote",
        "BitExample", "BitButtonCopytext", "BitWbtContinue", "BitLearningPathDetails",
        "BitLearningPathLti", "BitLearningPathStep", "BitLearningPathBook", "BitLearningPathSign",
        "BitLearningPathVideoCall", "BitLearningPathLearningGoal", "BitLearningPathClosing",
        "BitLearningPathFeedback", "BitLearningPathBotTraining", "BitLearningPathExternalLink",
        "BitLearningPathClassroomTraining", "BitLearningPathClassroomEvent", "BitBotActionSend",
        "BitBotActionAnnounce", "BitBotActionSave", "BitBotActionRemind", "BitVendorPadletEmbed",
        "BitScorm", "BitImage", "BitImageLink", "BitImageZoom", "BitAudio", "BitAudioLink",
        "BitAudioEmbed", "BitVideo", "BitVideoLink", "BitVideoEmbed", "BitStillImageFilm",
        "BitStillImageFilmLink", "BitStillImageFilmEmbed", "BitWebsiteLink", "BitDocument",
        "BitDocumentLink", "BitDocumentEmbed", "BitDocumentDownload", "BitAppLink",
        "BitEditorial", "BitBookFrontispiece", "BitBookTitle", "BitBookCopyright",
        "BitBookDedication", "BitBookForword", "BitBookPreface", "BitBookPrologue",
        "BitBookEpilogue", "BitBookIntroduction", "BitBookIncitingIncident", "BitBookConclusion",
        "BitBookAfterword", "BitBookPostscript", "BitBookappendix", "BitBookAddendum",
        "BitBookAcknowledgments", "BitBookListOfContributors", "BitBookBibliography",
        "BitBookReferenceList", "BitBookEndnotes", "BitBookNotes", "BitBookCopyrightPermissions",
        "BitBookTeaser", "BitBookAutherBio", "BitBookRequestForABookReview", "BitBookComingSoon",
        "BitBookReadMore", "BitBookSummary", "BitBookEpigraph", "BitCode", "BitCard1",
        "BitQuestion1", "COMMENT", "Image_type", "Audio_type", "Video_type", "OPDOLL",
        "OPBUL", "OPESC", "OPRANGLES", "OPRANGLEL", "OPDANGLE", "OPU", "OPB",
        "OPQ", "OPA", "OPP", "OPM", "OPS", "OPR", "OPHASH", "OPC", "CL", "COLON",
        "AMP", "DBLCOLON", "PLUS", "DotAt", "Greater", "Less", "RightAngle", "RightArrow",
        "DBLEQ", "HSPL", "HSPL2", "SSPL", "SSPL2", "QUOTE_INDEX", "DCANY", "ArticleText",
        "NOTCL", "NUMERIC", "STRING", "NL", "SENTENCE", "OPAT", "AtProgress",
        "AtReference", "AtWidth", "AtHeight", "AtProgressPoints", "AtShortanswer",
        "AtLonganswer", "AtExampleWithStr", "AtExamplecol", "AtExamplecl", "AtPartialAnswerS",
        "AtPartialAnswer", "AtLabeltrue", "AtLabelfalse", "AtPoints", "AtSrc",
        "OPATALT", "OPAMARK", "ShowInIndex", "OpAtCaption", "OpAtLicense", "OpAtCopyright",
        "OpAtSearch", "OpAtIsTracked", "OpAtIsInfoOnly", "AtDate", "Http", "Https",
        "AmpAudio", "AmpImage", "AmpImageZoom", "AmpImageWAudio", "AmpVideo",
        "AmpArticle", "AmpDocument", "AmpApp", "AmpWebsite", "AmpStillImageFilm",
        "AmpPdf", "OpAmpAudio", "OpAmpImage", "OpAmpImageZoom", "OpAmpImageWAudio",
        "OpAmpVideo", "OpAmpArticle", "OpAmpArticleAtt", "OpAmpDocument", "OpAmpApp",
        "OpAmpWebsite", "OpAmpStillImageFilm", "BracEnclose", "AmpAudioLink",
        "AmpImageLink", "AmpVideoLink", "AmpArticleLink", "AmpDocumentLink", "AmpAppLink",
        "AmpWebsiteLink", "AmpStillImageFilmLink", "OpAmpAudioLink", "OpAmpImageLink",
        "OpAmpVideoLink", "OpAmpArticleLink", "OpAmpDocumentLink", "OpAmpAppLink",
        "OpAmpWebsiteLink", "OpAmpStillImageFilmLink", "BitmarkMinus", "BitmarkPlus",
        "ColonText", "Prosemirror", "Placeholder", "BASIC", "JPG", "PNG", "GIF",
        "SVG", "MP2", "MP3", "MP4", "FLV", "WMV", "MPEG", "MPG", "TEL", "DotArticleAtt",
        "STAR", "URL", "LIST_LINE",
    ];
    bitmarkParser.VOCABULARY = new VocabularyImpl(bitmarkParser._LITERAL_NAMES, bitmarkParser._SYMBOLIC_NAMES, []);
    bitmarkParser._serializedATNSegments = 8;
    bitmarkParser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0102\u1009\x04" +
        "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
        "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
        "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
        "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
        "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
        "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
        "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
        "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
        "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
        "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
        "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
        "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
        "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
        "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
        "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
        "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
        "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
        "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
        "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
        "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
        "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
        "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
        "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
        "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
        "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
        "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
        "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
        "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
        "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
        "\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
        "\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
        "\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x03\x02\x03\x02\x07\x02\u0197" +
        "\n\x02\f\x02\x0E\x02\u019A\v\x02\x03\x02\x07\x02\u019D\n\x02\f\x02\x0E" +
        "\x02\u01A0\v\x02\x06\x02\u01A2\n\x02\r\x02\x0E\x02\u01A3\x03\x02\x07\x02" +
        "\u01A7\n\x02\f\x02\x0E\x02\u01AA\v\x02\x03\x02\x03\x02\x03\x03\x03\x03" +
        "\x05\x03\u01B0\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x05\x04\u0227\n\x04\x03\x05\x03\x05\x05\x05\u022B" +
        "\n\x05\x03\x05\x03\x05\x07\x05\u022F\n\x05\f\x05\x0E\x05\u0232\v\x05\x03" +
        "\x05\x06\x05\u0235\n\x05\r\x05\x0E\x05\u0236\x03\x06\x03\x06\x05\x06\u023B" +
        "\n\x06\x03\x06\x03\x06\x07\x06\u023F\n\x06\f\x06\x0E\x06\u0242\v\x06\x03" +
        "\x06\x03\x06\x03\x06\x05\x06\u0247\n\x06\x03\x06\x03\x06\x07\x06\u024B" +
        "\n\x06\f\x06\x0E\x06\u024E\v\x06\x03\x06\x07\x06\u0251\n\x06\f\x06\x0E" +
        "\x06\u0254\v\x06\x03\x07\x03\x07\x05\x07\u0258\n\x07\x03\x07\x03\x07\x03" +
        "\x07\x03\x07\x03\x07\x05\x07\u025F\n\x07\x03\b\x03\b\x03\b\x07\b\u0264" +
        "\n\b\f\b\x0E\b\u0267\v\b\x03\b\x03\b\x03\t\x03\t\x05\t\u026D\n\t\x03\t" +
        "\x03\t\x07\t\u0271\n\t\f\t\x0E\t\u0274\v\t\x03\t\x07\t\u0277\n\t\f\t\x0E" +
        "\t\u027A\v\t\x03\n\x03\n\x03\n\x03\n\x03\v\x05\v\u0281\n\v\x03\v\x03\v" +
        "\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v\u028A\n\v\x07\v\u028C\n\v\f\v\x0E" +
        "\v\u028F\v\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x06\f\u0297\n\f\r\f\x0E" +
        "\f\u0298\x03\f\x06\f\u029C\n\f\r\f\x0E\f\u029D\x03\f\x03\f\x07\f\u02A2" +
        "\n\f\f\f\x0E\f\u02A5\v\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x06\r\u02AD" +
        "\n\r\r\r\x0E\r\u02AE\x03\r\x06\r\u02B2\n\r\r\r\x0E\r\u02B3\x03\r\x03\r" +
        "\x07\r\u02B8\n\r\f\r\x0E\r\u02BB\v\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x07" +
        "\x0E\u02C1\n\x0E\f\x0E\x0E\x0E\u02C4\v\x0E\x03\x0E\x03\x0E\x07\x0E\u02C8" +
        "\n\x0E\f\x0E\x0E\x0E\u02CB\v\x0E\x06\x0E\u02CD\n\x0E\r\x0E\x0E\x0E\u02CE" +
        "\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F\u02D5\n\x0F\f\x0F\x0E\x0F\u02D8" +
        "\v\x0F\x03\x0F\x03\x0F\x07\x0F\u02DC\n\x0F\f\x0F\x0E\x0F\u02DF\v\x0F\x06" +
        "\x0F\u02E1\n\x0F\r\x0F\x0E\x0F\u02E2\x03\x10\x03\x10\x03\x10\x03\x10\x07" +
        "\x10\u02E9\n\x10\f\x10\x0E\x10\u02EC\v\x10\x03\x10\x03\x10\x07\x10\u02F0" +
        "\n\x10\f\x10\x0E\x10\u02F3\v\x10\x06\x10\u02F5\n\x10\r\x10\x0E\x10\u02F6" +
        "\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11\u02FD\n\x11\f\x11\x0E\x11\u0300" +
        "\v\x11\x03\x11\x03\x11\x07\x11\u0304\n\x11\f\x11\x0E\x11\u0307\v\x11\x06" +
        "\x11\u0309\n\x11\r\x11\x0E\x11\u030A\x03\x12\x03\x12\x03\x12\x03\x12\x07" +
        "\x12\u0311\n\x12\f\x12\x0E\x12\u0314\v\x12\x03\x12\x03\x12\x07\x12\u0318" +
        "\n\x12\f\x12\x0E\x12\u031B\v\x12\x06\x12\u031D\n\x12\r\x12\x0E\x12\u031E" +
        "\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13\u0325\n\x13\f\x13\x0E\x13\u0328" +
        "\v\x13\x03\x13\x03\x13\x07\x13\u032C\n\x13\f\x13\x0E\x13\u032F\v\x13\x06" +
        "\x13\u0331\n\x13\r\x13\x0E\x13\u0332\x03\x14\x03\x14\x03\x14\x03\x14\x07" +
        "\x14\u0339\n\x14\f\x14\x0E\x14\u033C\v\x14\x03\x14\x03\x14\x07\x14\u0340" +
        "\n\x14\f\x14\x0E\x14\u0343\v\x14\x06\x14\u0345\n\x14\r\x14\x0E\x14\u0346" +
        "\x03\x15\x03\x15\x03\x15\x03\x15\x07\x15\u034D\n\x15\f\x15\x0E\x15\u0350" +
        "\v\x15\x03\x15\x03\x15\x07\x15\u0354\n\x15\f\x15\x0E\x15\u0357\v\x15\x06" +
        "\x15\u0359\n\x15\r\x15\x0E\x15\u035A\x03\x16\x03\x16\x03\x16\x03\x16\x07" +
        "\x16\u0361\n\x16\f\x16\x0E\x16\u0364\v\x16\x03\x16\x03\x16\x07\x16\u0368" +
        "\n\x16\f\x16\x0E\x16\u036B\v\x16\x06\x16\u036D\n\x16\r\x16\x0E\x16\u036E" +
        "\x03\x17\x03\x17\x03\x17\x03\x17\x07\x17\u0375\n\x17\f\x17\x0E\x17\u0378" +
        "\v\x17\x03\x17\x03\x17\x07\x17\u037C\n\x17\f\x17\x0E\x17\u037F\v\x17\x06" +
        "\x17\u0381\n\x17\r\x17\x0E\x17\u0382\x03\x18\x03\x18\x03\x18\x03\x18\x07" +
        "\x18\u0389\n\x18\f\x18\x0E\x18\u038C\v\x18\x03\x18\x03\x18\x07\x18\u0390" +
        "\n\x18\f\x18\x0E\x18\u0393\v\x18\x06\x18\u0395\n\x18\r\x18\x0E\x18\u0396" +
        "\x03\x19\x03\x19\x03\x19\x03\x19\x07\x19\u039D\n\x19\f\x19\x0E\x19\u03A0" +
        "\v\x19\x03\x19\x03\x19\x07\x19\u03A4\n\x19\f\x19\x0E\x19\u03A7\v\x19\x06" +
        "\x19\u03A9\n\x19\r\x19\x0E\x19\u03AA\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07" +
        "\x1A\u03B1\n\x1A\f\x1A\x0E\x1A\u03B4\v\x1A\x03\x1A\x03\x1A\x07\x1A\u03B8" +
        "\n\x1A\f\x1A\x0E\x1A\u03BB\v\x1A\x06\x1A\u03BD\n\x1A\r\x1A\x0E\x1A\u03BE" +
        "\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x07\x1B\u03C5\n\x1B\f\x1B\x0E\x1B\u03C8" +
        "\v\x1B\x03\x1B\x03\x1B\x07\x1B\u03CC\n\x1B\f\x1B\x0E\x1B\u03CF\v\x1B\x06" +
        "\x1B\u03D1\n\x1B\r\x1B\x0E\x1B\u03D2\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x07" +
        "\x1C\u03D9\n\x1C\f\x1C\x0E\x1C\u03DC\v\x1C\x03\x1C\x03\x1C\x07\x1C\u03E0" +
        "\n\x1C\f\x1C\x0E\x1C\u03E3\v\x1C\x06\x1C\u03E5\n\x1C\r\x1C\x0E\x1C\u03E6" +
        "\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u03ED\n\x1D\f\x1D\x0E\x1D\u03F0" +
        "\v\x1D\x03\x1D\x03\x1D\x07\x1D\u03F4\n\x1D\f\x1D\x0E\x1D\u03F7\v\x1D\x06" +
        "\x1D\u03F9\n\x1D\r\x1D\x0E\x1D\u03FA\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03" +
        "\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03" +
        "\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03" +
        "\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05" +
        "\x1E\u041C\n\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F" +
        "\u0424\n\x1F\f\x1F\x0E\x1F\u0427\v\x1F\x03 \x03 \x03 \x03 \x05 \u042D" +
        "\n \x03 \x07 \u0430\n \f \x0E \u0433\v \x03 \x03 \x03!\x05!\u0438\n!\x03" +
        "!\x03!\x06!\u043C\n!\r!\x0E!\u043D\x03!\x03!\x03\"\x05\"\u0443\n\"\x03" +
        "\"\x03\"\x06\"\u0447\n\"\r\"\x0E\"\u0448\x03\"\x03\"\x03#\x05#\u044E\n" +
        "#\x03#\x03#\x06#\u0452\n#\r#\x0E#\u0453\x03#\x03#\x03$\x03$\x03$\x03$" +
        "\x03$\x03$\x07$\u045E\n$\f$\x0E$\u0461\v$\x07$\u0463\n$\f$\x0E$\u0466" +
        "\v$\x03$\x07$\u0469\n$\f$\x0E$\u046C\v$\x03$\x07$\u046F\n$\f$\x0E$\u0472" +
        "\v$\x03$\x07$\u0475\n$\f$\x0E$\u0478\v$\x03$\x03$\x07$\u047C\n$\f$\x0E" +
        "$\u047F\v$\x03$\x07$\u0482\n$\f$\x0E$\u0485\v$\x05$\u0487\n$\x03%\x03" +
        "%\x05%\u048B\n%\x03%\x03%\x05%\u048F\n%\x05%\u0491\n%\x03%\x03%\x03&\x03" +
        "&\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03(\x07(\u049F\n(\f(\x0E(\u04A2" +
        "\v(\x07(\u04A4\n(\f(\x0E(\u04A7\v(\x03(\x07(\u04AA\n(\f(\x0E(\u04AD\v" +
        "(\x03(\x07(\u04B0\n(\f(\x0E(\u04B3\v(\x03(\x03(\x07(\u04B7\n(\f(\x0E(" +
        "\u04BA\v(\x03(\x07(\u04BD\n(\f(\x0E(\u04C0\v(\x05(\u04C2\n(\x03)\x03)" +
        "\x07)\u04C6\n)\f)\x0E)\u04C9\v)\x03)\x03)\x03)\x03)\x07)\u04CF\n)\f)\x0E" +
        ")\u04D2\v)\x03)\x03)\x05)\u04D6\n)\x03*\x03*\x03*\x03*\x03*\x03*\x05*" +
        "\u04DE\n*\x03*\x07*\u04E1\n*\f*\x0E*\u04E4\v*\x07*\u04E6\n*\f*\x0E*\u04E9" +
        "\v*\x03*\x07*\u04EC\n*\f*\x0E*\u04EF\v*\x03*\x03*\x07*\u04F3\n*\f*\x0E" +
        "*\u04F6\v*\x03*\x07*\u04F9\n*\f*\x0E*\u04FC\v*\x05*\u04FE\n*\x03+\x03" +
        "+\x03+\x03+\x05+\u0504\n+\x03+\x03+\x03+\x07+\u0509\n+\f+\x0E+\u050C\v" +
        "+\x03,\x03,\x07,\u0510\n,\f,\x0E,\u0513\v,\x03,\x03,\x07,\u0517\n,\f," +
        "\x0E,\u051A\v,\x03,\x03,\x03-\x03-\x05-\u0520\n-\x03-\x03-\x03-\x03-\x07" +
        "-\u0526\n-\f-\x0E-\u0529\v-\x07-\u052B\n-\f-\x0E-\u052E\v-\x03-\x07-\u0531" +
        "\n-\f-\x0E-\u0534\v-\x03-\x03-\x07-\u0538\n-\f-\x0E-\u053B\v-\x03-\x07" +
        "-\u053E\n-\f-\x0E-\u0541\v-\x05-\u0543\n-\x03.\x03.\x03.\x03.\x03.\x03" +
        ".\x07.\u054B\n.\f.\x0E.\u054E\v.\x07.\u0550\n.\f.\x0E.\u0553\v.\x03.\x07" +
        ".\u0556\n.\f.\x0E.\u0559\v.\x03.\x03.\x07.\u055D\n.\f.\x0E.\u0560\v.\x03" +
        ".\x07.\u0563\n.\f.\x0E.\u0566\v.\x05.\u0568\n.\x03/\x03/\x03/\x03/\x03" +
        "/\x03/\x07/\u0570\n/\f/\x0E/\u0573\v/\x07/\u0575\n/\f/\x0E/\u0578\v/\x03" +
        "/\x07/\u057B\n/\f/\x0E/\u057E\v/\x03/\x03/\x07/\u0582\n/\f/\x0E/\u0585" +
        "\v/\x03/\x07/\u0588\n/\f/\x0E/\u058B\v/\x05/\u058D\n/\x030\x030\x030\x03" +
        "0\x030\x030\x070\u0595\n0\f0\x0E0\u0598\v0\x070\u059A\n0\f0\x0E0\u059D" +
        "\v0\x030\x070\u05A0\n0\f0\x0E0\u05A3\v0\x030\x030\x070\u05A7\n0\f0\x0E" +
        "0\u05AA\v0\x030\x070\u05AD\n0\f0\x0E0\u05B0\v0\x050\u05B2\n0\x031\x03" +
        "1\x031\x031\x071\u05B8\n1\f1\x0E1\u05BB\v1\x031\x031\x071\u05BF\n1\f1" +
        "\x0E1\u05C2\v1\x071\u05C4\n1\f1\x0E1\u05C7\v1\x031\x051\u05CA\n1\x031" +
        "\x071\u05CD\n1\f1\x0E1\u05D0\v1\x031\x031\x071\u05D4\n1\f1\x0E1\u05D7" +
        "\v1\x031\x071\u05DA\n1\f1\x0E1\u05DD\v1\x051\u05DF\n1\x032\x032\x032\x03" +
        "2\x062\u05E5\n2\r2\x0E2\u05E6\x032\x032\x072\u05EB\n2\f2\x0E2\u05EE\v" +
        "2\x072\u05F0\n2\f2\x0E2\u05F3\v2\x032\x052\u05F6\n2\x032\x072\u05F9\n" +
        "2\f2\x0E2\u05FC\v2\x032\x032\x072\u0600\n2\f2\x0E2\u0603\v2\x032\x072" +
        "\u0606\n2\f2\x0E2\u0609\v2\x052\u060B\n2\x033\x033\x033\x033\x073\u0611" +
        "\n3\f3\x0E3\u0614\v3\x033\x033\x073\u0618\n3\f3\x0E3\u061B\v3\x063\u061D" +
        "\n3\r3\x0E3\u061E\x034\x034\x034\x034\x074\u0625\n4\f4\x0E4\u0628\v4\x03" +
        "4\x034\x074\u062C\n4\f4\x0E4\u062F\v4\x064\u0631\n4\r4\x0E4\u0632\x03" +
        "5\x035\x035\x035\x075\u0639\n5\f5\x0E5\u063C\v5\x035\x035\x075\u0640\n" +
        "5\f5\x0E5\u0643\v5\x065\u0645\n5\r5\x0E5\u0646\x036\x036\x036\x036\x07" +
        "6\u064D\n6\f6\x0E6\u0650\v6\x036\x036\x076\u0654\n6\f6\x0E6\u0657\v6\x06" +
        "6\u0659\n6\r6\x0E6\u065A\x037\x037\x037\x037\x077\u0661\n7\f7\x0E7\u0664" +
        "\v7\x037\x037\x077\u0668\n7\f7\x0E7\u066B\v7\x067\u066D\n7\r7\x0E7\u066E" +
        "\x038\x038\x038\x038\x078\u0675\n8\f8\x0E8\u0678\v8\x038\x038\x078\u067C" +
        "\n8\f8\x0E8\u067F\v8\x068\u0681\n8\r8\x0E8\u0682\x039\x039\x039\x039\x07" +
        "9\u0689\n9\f9\x0E9\u068C\v9\x039\x039\x079\u0690\n9\f9\x0E9\u0693\v9\x06" +
        "9\u0695\n9\r9\x0E9\u0696\x03:\x03:\x03:\x03:\x07:\u069D\n:\f:\x0E:\u06A0" +
        "\v:\x03:\x03:\x07:\u06A4\n:\f:\x0E:\u06A7\v:\x06:\u06A9\n:\r:\x0E:\u06AA" +
        "\x03;\x03;\x03;\x03;\x07;\u06B1\n;\f;\x0E;\u06B4\v;\x03;\x03;\x07;\u06B8" +
        "\n;\f;\x0E;\u06BB\v;\x06;\u06BD\n;\r;\x0E;\u06BE\x03<\x03<\x03<\x03<\x07" +
        "<\u06C5\n<\f<\x0E<\u06C8\v<\x03<\x03<\x07<\u06CC\n<\f<\x0E<\u06CF\v<\x06" +
        "<\u06D1\n<\r<\x0E<\u06D2\x03=\x03=\x03=\x03=\x07=\u06D9\n=\f=\x0E=\u06DC" +
        "\v=\x03=\x03=\x07=\u06E0\n=\f=\x0E=\u06E3\v=\x06=\u06E5\n=\r=\x0E=\u06E6" +
        "\x03>\x03>\x03>\x03>\x07>\u06ED\n>\f>\x0E>\u06F0\v>\x03>\x03>\x07>\u06F4" +
        "\n>\f>\x0E>\u06F7\v>\x06>\u06F9\n>\r>\x0E>\u06FA\x03?\x03?\x03?\x03?\x07" +
        "?\u0701\n?\f?\x0E?\u0704\v?\x03?\x03?\x07?\u0708\n?\f?\x0E?\u070B\v?\x06" +
        "?\u070D\n?\r?\x0E?\u070E\x03@\x03@\x03@\x03@\x07@\u0715\n@\f@\x0E@\u0718" +
        "\v@\x03@\x03@\x07@\u071C\n@\f@\x0E@\u071F\v@\x06@\u0721\n@\r@\x0E@\u0722" +
        "\x03A\x03A\x03A\x03A\x07A\u0729\nA\fA\x0EA\u072C\vA\x03A\x03A\x07A\u0730" +
        "\nA\fA\x0EA\u0733\vA\x06A\u0735\nA\rA\x0EA\u0736\x03B\x03B\x03B\x03B\x07" +
        "B\u073D\nB\fB\x0EB\u0740\vB\x03B\x03B\x07B\u0744\nB\fB\x0EB\u0747\vB\x06" +
        "B\u0749\nB\rB\x0EB\u074A\x03C\x03C\x03C\x03C\x07C\u0751\nC\fC\x0EC\u0754" +
        "\vC\x03C\x03C\x07C\u0758\nC\fC\x0EC\u075B\vC\x06C\u075D\nC\rC\x0EC\u075E" +
        "\x03D\x03D\x03D\x03D\x07D\u0765\nD\fD\x0ED\u0768\vD\x03D\x03D\x07D\u076C" +
        "\nD\fD\x0ED\u076F\vD\x06D\u0771\nD\rD\x0ED\u0772\x03E\x03E\x03E\x03E\x07" +
        "E\u0779\nE\fE\x0EE\u077C\vE\x03E\x03E\x07E\u0780\nE\fE\x0EE\u0783\vE\x06" +
        "E\u0785\nE\rE\x0EE\u0786\x03F\x03F\x03F\x03F\x07F\u078D\nF\fF\x0EF\u0790" +
        "\vF\x03F\x03F\x07F\u0794\nF\fF\x0EF\u0797\vF\x06F\u0799\nF\rF\x0EF\u079A" +
        "\x03G\x03G\x03G\x03G\x07G\u07A1\nG\fG\x0EG\u07A4\vG\x03G\x03G\x07G\u07A8" +
        "\nG\fG\x0EG\u07AB\vG\x06G\u07AD\nG\rG\x0EG\u07AE\x03H\x03H\x03H\x03H\x07" +
        "H\u07B5\nH\fH\x0EH\u07B8\vH\x03H\x03H\x07H\u07BC\nH\fH\x0EH\u07BF\vH\x06" +
        "H\u07C1\nH\rH\x0EH\u07C2\x03I\x03I\x03I\x03I\x07I\u07C9\nI\fI\x0EI\u07CC" +
        "\vI\x03I\x03I\x07I\u07D0\nI\fI\x0EI\u07D3\vI\x06I\u07D5\nI\rI\x0EI\u07D6" +
        "\x03J\x03J\x03J\x03J\x07J\u07DD\nJ\fJ\x0EJ\u07E0\vJ\x03J\x03J\x07J\u07E4" +
        "\nJ\fJ\x0EJ\u07E7\vJ\x06J\u07E9\nJ\rJ\x0EJ\u07EA\x03K\x03K\x03K\x03K\x07" +
        "K\u07F1\nK\fK\x0EK\u07F4\vK\x03K\x03K\x07K\u07F8\nK\fK\x0EK\u07FB\vK\x06" +
        "K\u07FD\nK\rK\x0EK\u07FE\x03L\x03L\x03L\x03L\x07L\u0805\nL\fL\x0EL\u0808" +
        "\vL\x03L\x03L\x07L\u080C\nL\fL\x0EL\u080F\vL\x06L\u0811\nL\rL\x0EL\u0812" +
        "\x03M\x03M\x03M\x03M\x07M\u0819\nM\fM\x0EM\u081C\vM\x03M\x03M\x07M\u0820" +
        "\nM\fM\x0EM\u0823\vM\x06M\u0825\nM\rM\x0EM\u0826\x03N\x03N\x03N\x03N\x07" +
        "N\u082D\nN\fN\x0EN\u0830\vN\x03N\x03N\x07N\u0834\nN\fN\x0EN\u0837\vN\x06" +
        "N\u0839\nN\rN\x0EN\u083A\x03O\x03O\x03O\x03O\x07O\u0841\nO\fO\x0EO\u0844" +
        "\vO\x03O\x03O\x07O\u0848\nO\fO\x0EO\u084B\vO\x06O\u084D\nO\rO\x0EO\u084E" +
        "\x03P\x03P\x03P\x03P\x07P\u0855\nP\fP\x0EP\u0858\vP\x03P\x03P\x07P\u085C" +
        "\nP\fP\x0EP\u085F\vP\x06P\u0861\nP\rP\x0EP\u0862\x03Q\x03Q\x03Q\x03Q\x07" +
        "Q\u0869\nQ\fQ\x0EQ\u086C\vQ\x03Q\x03Q\x07Q\u0870\nQ\fQ\x0EQ\u0873\vQ\x06" +
        "Q\u0875\nQ\rQ\x0EQ\u0876\x03R\x03R\x03R\x03R\x07R\u087D\nR\fR\x0ER\u0880" +
        "\vR\x03R\x03R\x07R\u0884\nR\fR\x0ER\u0887\vR\x06R\u0889\nR\rR\x0ER\u088A" +
        "\x03S\x03S\x03S\x03S\x07S\u0891\nS\fS\x0ES\u0894\vS\x03S\x03S\x07S\u0898" +
        "\nS\fS\x0ES\u089B\vS\x06S\u089D\nS\rS\x0ES\u089E\x03T\x03T\x03T\x03T\x07" +
        "T\u08A5\nT\fT\x0ET\u08A8\vT\x03T\x03T\x07T\u08AC\nT\fT\x0ET\u08AF\vT\x06" +
        "T\u08B1\nT\rT\x0ET\u08B2\x03U\x03U\x03U\x03U\x07U\u08B9\nU\fU\x0EU\u08BC" +
        "\vU\x03U\x03U\x07U\u08C0\nU\fU\x0EU\u08C3\vU\x06U\u08C5\nU\rU\x0EU";
    bitmarkParser._serializedATNSegment1 = "\u08C6\x03V\x03V\x03V\x03V\x07V\u08CD\nV\fV\x0EV\u08D0\vV\x03V\x03V\x07" +
        "V\u08D4\nV\fV\x0EV\u08D7\vV\x06V\u08D9\nV\rV\x0EV\u08DA\x03W\x03W\x03" +
        "W\x03W\x07W\u08E1\nW\fW\x0EW\u08E4\vW\x03W\x03W\x07W\u08E8\nW\fW\x0EW" +
        "\u08EB\vW\x06W\u08ED\nW\rW\x0EW\u08EE\x03X\x03X\x03X\x03X\x07X\u08F5\n" +
        "X\fX\x0EX\u08F8\vX\x03X\x03X\x07X\u08FC\nX\fX\x0EX\u08FF\vX\x06X\u0901" +
        "\nX\rX\x0EX\u0902\x03Y\x03Y\x03Y\x03Y\x07Y\u0909\nY\fY\x0EY\u090C\vY\x03" +
        "Y\x03Y\x07Y\u0910\nY\fY\x0EY\u0913\vY\x06Y\u0915\nY\rY\x0EY\u0916\x03" +
        "Z\x03Z\x03Z\x03Z\x07Z\u091D\nZ\fZ\x0EZ\u0920\vZ\x03Z\x03Z\x07Z\u0924\n" +
        "Z\fZ\x0EZ\u0927\vZ\x06Z\u0929\nZ\rZ\x0EZ\u092A\x03[\x03[\x03[\x03[\x07" +
        "[\u0931\n[\f[\x0E[\u0934\v[\x03[\x03[\x07[\u0938\n[\f[\x0E[\u093B\v[\x06" +
        "[\u093D\n[\r[\x0E[\u093E\x03\\\x03\\\x03\\\x03\\\x07\\\u0945\n\\\f\\\x0E" +
        "\\\u0948\v\\\x03\\\x03\\\x07\\\u094C\n\\\f\\\x0E\\\u094F\v\\\x06\\\u0951" +
        "\n\\\r\\\x0E\\\u0952\x03]\x03]\x03]\x03]\x07]\u0959\n]\f]\x0E]\u095C\v" +
        "]\x03]\x03]\x07]\u0960\n]\f]\x0E]\u0963\v]\x06]\u0965\n]\r]\x0E]\u0966" +
        "\x03^\x03^\x03^\x03^\x07^\u096D\n^\f^\x0E^\u0970\v^\x03^\x03^\x07^\u0974" +
        "\n^\f^\x0E^\u0977\v^\x06^\u0979\n^\r^\x0E^\u097A\x03_\x03_\x03_\x03_\x07" +
        "_\u0981\n_\f_\x0E_\u0984\v_\x03_\x03_\x07_\u0988\n_\f_\x0E_\u098B\v_\x06" +
        "_\u098D\n_\r_\x0E_\u098E\x03`\x03`\x03`\x03`\x07`\u0995\n`\f`\x0E`\u0998" +
        "\v`\x03`\x03`\x07`\u099C\n`\f`\x0E`\u099F\v`\x06`\u09A1\n`\r`\x0E`\u09A2" +
        "\x03a\x03a\x03a\x03a\x07a\u09A9\na\fa\x0Ea\u09AC\va\x03a\x03a\x07a\u09B0" +
        "\na\fa\x0Ea\u09B3\va\x06a\u09B5\na\ra\x0Ea\u09B6\x03b\x03b\x03b\x03b\x07" +
        "b\u09BD\nb\fb\x0Eb\u09C0\vb\x03b\x03b\x07b\u09C4\nb\fb\x0Eb\u09C7\vb\x06" +
        "b\u09C9\nb\rb\x0Eb\u09CA\x03c\x03c\x03c\x03c\x07c\u09D1\nc\fc\x0Ec\u09D4" +
        "\vc\x03c\x03c\x07c\u09D8\nc\fc\x0Ec\u09DB\vc\x06c\u09DD\nc\rc\x0Ec\u09DE" +
        "\x03d\x03d\x03d\x03d\x07d\u09E5\nd\fd\x0Ed\u09E8\vd\x03d\x03d\x07d\u09EC" +
        "\nd\fd\x0Ed\u09EF\vd\x06d\u09F1\nd\rd\x0Ed\u09F2\x03e\x03e\x03e\x03e\x07" +
        "e\u09F9\ne\fe\x0Ee\u09FC\ve\x03e\x03e\x07e\u0A00\ne\fe\x0Ee\u0A03\ve\x06" +
        "e\u0A05\ne\re\x0Ee\u0A06\x03f\x03f\x03f\x03f\x07f\u0A0D\nf\ff\x0Ef\u0A10" +
        "\vf\x03f\x03f\x07f\u0A14\nf\ff\x0Ef\u0A17\vf\x06f\u0A19\nf\rf\x0Ef\u0A1A" +
        "\x03g\x03g\x03g\x03g\x07g\u0A21\ng\fg\x0Eg\u0A24\vg\x03g\x03g\x07g\u0A28" +
        "\ng\fg\x0Eg\u0A2B\vg\x06g\u0A2D\ng\rg\x0Eg\u0A2E\x03h\x03h\x03h\x03h\x07" +
        "h\u0A35\nh\fh\x0Eh\u0A38\vh\x03h\x03h\x07h\u0A3C\nh\fh\x0Eh\u0A3F\vh\x06" +
        "h\u0A41\nh\rh\x0Eh\u0A42\x03i\x03i\x03i\x03i\x07i\u0A49\ni\fi\x0Ei\u0A4C" +
        "\vi\x03i\x03i\x07i\u0A50\ni\fi\x0Ei\u0A53\vi\x06i\u0A55\ni\ri\x0Ei\u0A56" +
        "\x03j\x03j\x03j\x03j\x07j\u0A5D\nj\fj\x0Ej\u0A60\vj\x03j\x03j\x07j\u0A64" +
        "\nj\fj\x0Ej\u0A67\vj\x06j\u0A69\nj\rj\x0Ej\u0A6A\x03k\x03k\x03k\x03k\x07" +
        "k\u0A71\nk\fk\x0Ek\u0A74\vk\x03k\x03k\x07k\u0A78\nk\fk\x0Ek\u0A7B\vk\x06" +
        "k\u0A7D\nk\rk\x0Ek\u0A7E\x03l\x03l\x03l\x03l\x07l\u0A85\nl\fl\x0El\u0A88" +
        "\vl\x03l\x03l\x07l\u0A8C\nl\fl\x0El\u0A8F\vl\x06l\u0A91\nl\rl\x0El\u0A92" +
        "\x03m\x03m\x03m\x03m\x07m\u0A99\nm\fm\x0Em\u0A9C\vm\x03m\x03m\x07m\u0AA0" +
        "\nm\fm\x0Em\u0AA3\vm\x06m\u0AA5\nm\rm\x0Em\u0AA6\x03n\x03n\x03n\x03n\x07" +
        "n\u0AAD\nn\fn\x0En\u0AB0\vn\x03n\x03n\x07n\u0AB4\nn\fn\x0En\u0AB7\vn\x06" +
        "n\u0AB9\nn\rn\x0En\u0ABA\x03o\x03o\x03o\x03o\x07o\u0AC1\no\fo\x0Eo\u0AC4" +
        "\vo\x03o\x03o\x07o\u0AC8\no\fo\x0Eo\u0ACB\vo\x06o\u0ACD\no\ro\x0Eo\u0ACE" +
        "\x03p\x03p\x03p\x03p\x07p\u0AD5\np\fp\x0Ep\u0AD8\vp\x03p\x03p\x07p\u0ADC" +
        "\np\fp\x0Ep\u0ADF\vp\x06p\u0AE1\np\rp\x0Ep\u0AE2\x03q\x03q\x03q\x03q\x07" +
        "q\u0AE9\nq\fq\x0Eq\u0AEC\vq\x03q\x03q\x07q\u0AF0\nq\fq\x0Eq\u0AF3\vq\x06" +
        "q\u0AF5\nq\rq\x0Eq\u0AF6\x03r\x03r\x03r\x03r\x07r\u0AFD\nr\fr\x0Er\u0B00" +
        "\vr\x03r\x03r\x07r\u0B04\nr\fr\x0Er\u0B07\vr\x06r\u0B09\nr\rr\x0Er\u0B0A" +
        "\x03s\x03s\x03s\x03s\x07s\u0B11\ns\fs\x0Es\u0B14\vs\x03s\x03s\x07s\u0B18" +
        "\ns\fs\x0Es\u0B1B\vs\x06s\u0B1D\ns\rs\x0Es\u0B1E\x03t\x03t\x03t\x03t\x07" +
        "t\u0B25\nt\ft\x0Et\u0B28\vt\x03t\x03t\x07t\u0B2C\nt\ft\x0Et\u0B2F\vt\x06" +
        "t\u0B31\nt\rt\x0Et\u0B32\x03u\x03u\x03u\x03u\x07u\u0B39\nu\fu\x0Eu\u0B3C" +
        "\vu\x03u\x03u\x07u\u0B40\nu\fu\x0Eu\u0B43\vu\x06u\u0B45\nu\ru\x0Eu\u0B46" +
        "\x03v\x03v\x03v\x03v\x07v\u0B4D\nv\fv\x0Ev\u0B50\vv\x03v\x03v\x07v\u0B54" +
        "\nv\fv\x0Ev\u0B57\vv\x06v\u0B59\nv\rv\x0Ev\u0B5A\x03w\x03w\x03w\x03w\x07" +
        "w\u0B61\nw\fw\x0Ew\u0B64\vw\x03w\x03w\x07w\u0B68\nw\fw\x0Ew\u0B6B\vw\x06" +
        "w\u0B6D\nw\rw\x0Ew\u0B6E\x03x\x03x\x03x\x03x\x07x\u0B75\nx\fx\x0Ex\u0B78" +
        "\vx\x03x\x03x\x07x\u0B7C\nx\fx\x0Ex\u0B7F\vx\x06x\u0B81\nx\rx\x0Ex\u0B82" +
        "\x03y\x03y\x03y\x03y\x07y\u0B89\ny\fy\x0Ey\u0B8C\vy\x03y\x03y\x07y\u0B90" +
        "\ny\fy\x0Ey\u0B93\vy\x06y\u0B95\ny\ry\x0Ey\u0B96\x03z\x03z\x03z\x03z\x07" +
        "z\u0B9D\nz\fz\x0Ez\u0BA0\vz\x03z\x03z\x07z\u0BA4\nz\fz\x0Ez\u0BA7\vz\x06" +
        "z\u0BA9\nz\rz\x0Ez\u0BAA\x03{\x03{\x03{\x03{\x07{\u0BB1\n{\f{\x0E{\u0BB4" +
        "\v{\x03{\x03{\x07{\u0BB8\n{\f{\x0E{\u0BBB\v{\x06{\u0BBD\n{\r{\x0E{\u0BBE" +
        "\x03|\x03|\x03|\x03|\x07|\u0BC5\n|\f|\x0E|\u0BC8\v|\x03|\x03|\x07|\u0BCC" +
        "\n|\f|\x0E|\u0BCF\v|\x06|\u0BD1\n|\r|\x0E|\u0BD2\x03}\x03}\x03}\x03}\x07" +
        "}\u0BD9\n}\f}\x0E}\u0BDC\v}\x03}\x03}\x07}\u0BE0\n}\f}\x0E}\u0BE3\v}\x06" +
        "}\u0BE5\n}\r}\x0E}\u0BE6\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x07~" +
        "\u0BF1\n~\f~\x0E~\u0BF4\v~\x06~\u0BF6\n~\r~\x0E~\u0BF7\x03~\x03~\x07~" +
        "\u0BFC\n~\f~\x0E~\u0BFF\v~\x03~\x03~\x07~\u0C03\n~\f~\x0E~\u0C06\v~\x03" +
        "~\x07~\u0C09\n~\f~\x0E~\u0C0C\v~\x05~\u0C0E\n~\x03\x7F\x03\x7F\x03\x7F" +
        "\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x06\x7F\u0C17\n\x7F\r\x7F\x0E\x7F\u0C18" +
        "\x03\x80\x03\x80\x03\x80\x03\x80\x07\x80\u0C1F\n\x80\f\x80\x0E\x80\u0C22" +
        "\v\x80\x03\x80\x03\x80\x07\x80\u0C26\n\x80\f\x80\x0E\x80\u0C29\v\x80\x07" +
        "\x80\u0C2B\n\x80\f\x80\x0E\x80\u0C2E\v\x80\x03\x80\x03\x80\x03\x80\x03" +
        "\x80\x06\x80\u0C34\n\x80\r\x80\x0E\x80\u0C35\x06\x80\u0C38\n\x80\r\x80" +
        "\x0E\x80\u0C39\x03\x80\x03\x80\x07\x80\u0C3E\n\x80\f\x80\x0E\x80\u0C41" +
        "\v\x80\x03\x80\x03\x80\x07\x80\u0C45\n\x80\f\x80\x0E\x80\u0C48\v\x80\x03" +
        "\x80\x07\x80\u0C4B\n\x80\f\x80\x0E\x80\u0C4E\v\x80\x05\x80\u0C50\n\x80" +
        "\x03\x81\x03\x81\x03\x81\x03\x81\x05\x81\u0C56\n\x81\x03\x82\x03\x82\x03" +
        "\x82\x03\x82\x07\x82\u0C5C\n\x82\f\x82\x0E\x82\u0C5F\v\x82\x03\x82\x03" +
        "\x82\x07\x82\u0C63\n\x82\f\x82\x0E\x82\u0C66\v\x82\x07\x82\u0C68\n\x82" +
        "\f\x82\x0E\x82\u0C6B\v\x82\x03\x82\x03\x82\x05\x82\u0C6F\n\x82\x03\x82" +
        "\x07\x82\u0C72\n\x82\f\x82\x0E\x82\u0C75\v\x82\x03\x82\x06\x82\u0C78\n" +
        "\x82\r\x82\x0E\x82\u0C79\x06\x82\u0C7C\n\x82\r\x82\x0E\x82\u0C7D\x03\x82" +
        "\x03\x82\x03\x83\x03\x83\x03\x83\x03\x83\x07\x83\u0C86\n\x83\f\x83\x0E" +
        "\x83\u0C89\v\x83\x03\x83\x03\x83\x07\x83\u0C8D\n\x83\f\x83\x0E\x83\u0C90" +
        "\v\x83\x07\x83\u0C92\n\x83\f\x83\x0E\x83\u0C95\v\x83\x03\x83\x03\x83\x03" +
        "\x83\x03\x83\x06\x83\u0C9B\n\x83\r\x83\x0E\x83\u0C9C\x06\x83\u0C9F\n\x83" +
        "\r\x83\x0E\x83\u0CA0\x03\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x84\x07" +
        "\x84\u0CA9\n\x84\f\x84\x0E\x84\u0CAC\v\x84\x03\x84\x03\x84\x07\x84\u0CB0" +
        "\n\x84\f\x84\x0E\x84\u0CB3\v\x84\x07\x84\u0CB5\n\x84\f\x84\x0E\x84\u0CB8" +
        "\v\x84\x03\x84\x03\x84\x03\x84\x03\x84\x06\x84\u0CBE\n\x84\r\x84\x0E\x84" +
        "\u0CBF\x06\x84\u0CC2\n\x84\r\x84\x0E\x84\u0CC3\x03\x84\x03\x84\x03\x85" +
        "\x03\x85\x03\x85\x03\x85\x07\x85\u0CCC\n\x85\f\x85\x0E\x85\u0CCF\v\x85" +
        "\x03\x85\x03\x85\x07\x85\u0CD3\n\x85\f\x85\x0E\x85\u0CD6\v\x85\x07\x85" +
        "\u0CD8\n\x85\f\x85\x0E\x85\u0CDB\v\x85\x03\x85\x03\x85\x03\x85\x03\x85" +
        "\x06\x85\u0CE1\n\x85\r\x85\x0E\x85\u0CE2\x06\x85\u0CE5\n\x85\r\x85\x0E" +
        "\x85\u0CE6\x03\x85\x03\x85\x03\x86\x03\x86\x03\x86\x03\x86\x07\x86\u0CEF" +
        "\n\x86\f\x86\x0E\x86\u0CF2\v\x86\x03\x86\x03\x86\x07\x86\u0CF6\n\x86\f" +
        "\x86\x0E\x86\u0CF9\v\x86\x07\x86\u0CFB\n\x86\f\x86\x0E\x86\u0CFE\v\x86" +
        "\x03\x86\x03\x86\x03\x86\x07\x86\u0D03\n\x86\f\x86\x0E\x86\u0D06\v\x86" +
        "\x03\x86\x06\x86\u0D09\n\x86\r\x86\x0E\x86\u0D0A\x06\x86\u0D0D\n\x86\r" +
        "\x86\x0E\x86\u0D0E\x03\x86\x03\x86\x07\x86\u0D13\n\x86\f\x86\x0E\x86\u0D16" +
        "\v\x86\x03\x86\x03\x86\x07\x86\u0D1A\n\x86\f\x86\x0E\x86\u0D1D\v\x86\x03" +
        "\x86\x07\x86\u0D20\n\x86\f\x86\x0E\x86\u0D23\v\x86\x05\x86\u0D25\n\x86" +
        "\x03\x87\x06\x87\u0D28\n\x87\r\x87\x0E\x87\u0D29\x03\x88\x03\x88\x03\x88" +
        "\x03\x88\x03\x89\x07\x89\u0D31\n\x89\f\x89\x0E\x89\u0D34\v\x89\x03\x89" +
        "\x03\x89\x07\x89\u0D38\n\x89\f\x89\x0E\x89\u0D3B\v\x89\x03\x8A\x03\x8A" +
        "\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B" +
        "\x05\x8B\u0D48\n\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x05\x8C\u0D4E\n\x8C" +
        "\x03\x8D\x03\x8D\x03\x8D\x05\x8D\u0D53\n\x8D\x03\x8D\x03\x8D\x05\x8D\u0D57" +
        "\n\x8D\x03\x8D\x03\x8D\x05\x8D\u0D5B\n\x8D\x03\x8D\x05\x8D\u0D5E\n\x8D" +
        "\x03\x8E\x03\x8E\x03\x8E\x05\x8E\u0D63\n\x8E\x03\x8F\x03\x8F\x03\x90\x03" +
        "\x90\x03\x91\x03\x91\x03\x92\x03\x92\x03\x93\x03\x93\x03\x94\x03\x94\x03" +
        "\x95\x03\x95\x03\x96\x03\x96\x03\x97\x03\x97\x03\x98\x03\x98\x03\x98\x05" +
        "\x98\u0D7A\n\x98\x03\x98\x03\x98\x03\x98\x05\x98\u0D7F\n\x98\x05\x98\u0D81" +
        "\n\x98\x03\x99\x03\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A" +
        "\x05\x9A\u0D8B\n\x9A\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03" +
        "\x9B\x03\x9B\x05\x9B\u0D95\n\x9B\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C" +
        "\x03\x9C\x03\x9C\x03\x9C\x05\x9C\u0D9F\n\x9C\x03\x9D\x03\x9D\x03\x9D\x03" +
        "\x9D\x05\x9D\u0DA5\n\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x05\x9D" +
        "\u0DAC\n\x9D\x03\x9E\x03\x9E\x07\x9E\u0DB0\n\x9E\f\x9E\x0E\x9E\u0DB3\v" +
        "\x9E\x03\x9F\x03\x9F\x03\x9F\x07\x9F\u0DB8\n\x9F\f\x9F\x0E\x9F\u0DBB\v" +
        "\x9F\x03\x9F\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x07\xA0\u0DC2\n\xA0\f\xA0" +
        "\x0E\xA0\u0DC5\v\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03" +
        "\xA1\x03\xA1\x05\xA1\u0DCF\n\xA1\x03\xA2\x03\xA2\x07\xA2\u0DD3\n\xA2\f" +
        "\xA2\x0E\xA2\u0DD6\v\xA2\x03\xA2\x03\xA2\x05\xA2\u0DDA\n\xA2\x03\xA3\x03" +
        "\xA3\x03\xA3\x07\xA3\u0DDF\n\xA3\f\xA3\x0E\xA3\u0DE2\v\xA3\x03\xA3\x03" +
        "\xA3\x03\xA3\x03\xA4\x03\xA4\x03\xA4\x05\xA4\u0DEA\n\xA4\x03\xA4\x03\xA4" +
        "\x05\xA4\u0DEE\n\xA4\x03\xA4\x03\xA4\x05\xA4\u0DF2\n\xA4\x03\xA4\x05\xA4" +
        "\u0DF5\n\xA4\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03" +
        "\xA5\x03\xA5\x03\xA5\x03\xA5\x07\xA5\u0E02\n\xA5\f\xA5\x0E\xA5\u0E05\v" +
        "\xA5\x03\xA5\x05\xA5\u0E08\n\xA5\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6" +
        "\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x07\xA6\u0E15\n\xA6\f" +
        "\xA6\x0E\xA6\u0E18\v\xA6\x03\xA6\x05\xA6\u0E1B\n\xA6\x03\xA7\x03\xA7\x07" +
        "\xA7\u0E1F\n\xA7\f\xA7\x0E\xA7\u0E22\v\xA7\x03\xA8\x03\xA8\x03\xA8\x03" +
        "\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x05\xA8\u0E2C\n\xA8\x03\xA9\x03\xA9" +
        "\x03\xA9\x05\xA9\u0E31\n\xA9\x03\xA9\x03\xA9\x03\xA9\x05\xA9\u0E36\n\xA9" +
        "\x05\xA9\u0E38\n\xA9\x03\xAA\x03\xAA\x03\xAA\x05\xAA\u0E3D\n\xAA\x03\xAA" +
        "\x03\xAA\x03\xAA\x05\xAA\u0E42\n\xAA\x05\xAA\u0E44\n\xAA\x03\xAB\x03\xAB" +
        "\x03\xAB\x05\xAB\u0E49\n\xAB\x03\xAB\x03\xAB\x07\xAB\u0E4D\n\xAB\f\xAB" +
        "\x0E\xAB\u0E50\v\xAB\x03\xAB\x03\xAB\x06\xAB\u0E54\n\xAB\r\xAB\x0E\xAB" +
        "\u0E55\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x07\xAB" +
        "\u0E5F\n\xAB\f\xAB\x0E\xAB\u0E62\v\xAB\x03\xAB\x05\xAB\u0E65\n\xAB\x03" +
        "\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03\xAE\x07" +
        "\xAE\u0E70\n\xAE\f\xAE\x0E\xAE\u0E73\v\xAE\x03\xAE\x05\xAE\u0E76\n\xAE" +
        "\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x07\xAE\u0E7C\n\xAE\f\xAE\x0E\xAE\u0E7F" +
        "\v\xAE\x03\xAE\x03\xAE\x07\xAE\u0E83\n\xAE\f\xAE\x0E\xAE\u0E86\v\xAE\x03" +
        "\xAE\x05\xAE\u0E89\n\xAE\x05\xAE\u0E8B\n\xAE\x03\xAF\x03\xAF\x03\xAF\x03" +
        "\xAF\x07\xAF\u0E91\n\xAF\f\xAF\x0E\xAF\u0E94\v\xAF\x03\xAF\x03\xAF\x03" +
        "\xB0\x03\xB0\x05\xB0\u0E9A\n\xB0\x03\xB0\x03\xB0\x03\xB0\x05\xB0\u0E9F" +
        "\n\xB0\x03\xB0\x05\xB0\u0EA2\n\xB0\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x05" +
        "\xB1\u0EA8\n\xB1\x03\xB1\x05\xB1\u0EAB\n\xB1\x03\xB2\x03\xB2\x05\xB2\u0EAF" +
        "\n\xB2\x03\xB2\x03\xB2\x03\xB2\x07\xB2\u0EB4\n\xB2\f\xB2\x0E\xB2\u0EB7" +
        "\v\xB2\x07\xB2\u0EB9\n\xB2\f\xB2\x0E\xB2\u0EBC\v\xB2\x03\xB2\x07\xB2\u0EBF" +
        "\n\xB2\f\xB2\x0E\xB2\u0EC2\v\xB2\x07\xB2\u0EC4\n\xB2\f\xB2\x0E\xB2\u0EC7" +
        "\v\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x07\xB2\u0ECE\n\xB2\f\xB2" +
        "\x0E\xB2\u0ED1\v\xB2\x03\xB2\x05\xB2\u0ED4\n\xB2\x03\xB3\x03\xB3\x03\xB3" +
        "\x03\xB3\x03\xB3\x06\xB3\u0EDB\n\xB3\r\xB3\x0E\xB3\u0EDC\x03\xB3\x03\xB3" +
        "\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x07\xB3\u0EE6\n\xB3\f\xB3\x0E" +
        "\xB3\u0EE9\v\xB3\x03\xB3\x05\xB3\u0EEC\n\xB3\x03\xB4\x03\xB4\x03\xB4\x03" +
        "\xB4\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x06\xB5\u0EF6\n\xB5\r\xB5\x0E\xB5" +
        "\u0EF7\x03\xB5\x03\xB5\x05\xB5\u0EFC\n\xB5\x03\xB6\x03\xB6\x03\xB6\x03" +
        "\xB6\x06\xB6\u0F02\n\xB6\r\xB6\x0E\xB6\u0F03\x03\xB6\x03\xB6\x03\xB7\x03" +
        "\xB7\x05\xB7\u0F0A\n\xB7\x03\xB7\x03\xB7\x03\xB7\x07\xB7\u0F0F\n\xB7\f" +
        "\xB7\x0E\xB7\u0F12\v\xB7\x07\xB7\u0F14\n\xB7\f\xB7\x0E\xB7\u0F17\v\xB7" +
        "\x03\xB7\x07\xB7\u0F1A\n\xB7\f\xB7\x0E\xB7\u0F1D\v\xB7\x07\xB7\u0F1F\n" +
        "\xB7\f\xB7\x0E\xB7\u0F22\v\xB7\x03\xB7\x03\xB7\x03\xB7\x05\xB7\u0F27\n" +
        "\xB7\x03\xB7\x05\xB7\u0F2A\n\xB7\x03\xB8\x03\xB8\x06\xB8\u0F2E\n\xB8\r" +
        "\xB8\x0E\xB8\u0F2F\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x03\xB9\x06\xB9\u0F37" +
        "\n\xB9\r\xB9\x0E\xB9\u0F38\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x05" +
        "\xB9\u0F40\n\xB9\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA" +
        "\x03\xBA\x05\xBA\u0F4A\n\xBA\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03" +
        "\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u0F55\n\xBB\x03\xBC\x03\xBC\x03\xBC" +
        "\x03\xBC\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBE\x03\xBE\x07\xBE\u0F61" +
        "\n\xBE\f\xBE\x0E\xBE\u0F64\v\xBE\x03\xBE\x07\xBE\u0F67\n\xBE\f\xBE\x0E" +
        "\xBE\u0F6A\v\xBE\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF" +
        "\x07\xBF\u0F73\n\xBF\f\xBF\x0E\xBF\u0F76\v\xBF\x03\xBF\x03\xBF\x03\xBF" +
        "\x03\xBF\x07\xBF\u0F7C\n\xBF\f\xBF\x0E\xBF\u0F7F\v\xBF\x03\xBF\x05\xBF" +
        "\u0F82\n\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x06\xC0\u0F88\n\xC0\r\xC0" +
        "\x0E\xC0\u0F89\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x07\xC0\u0F91\n" +
        "\xC0\f\xC0\x0E\xC0\u0F94\v\xC0\x03\xC0\x05\xC0\u0F97\n\xC0\x03\xC1\x03" +
        "\xC1\x05\xC1\u0F9B\n\xC1\x03\xC1\x03\xC1\x03\xC2\x03\xC2\x05\xC2\u0FA1" +
        "\n\xC2\x06\xC2\u0FA3\n\xC2\r\xC2\x0E\xC2\u0FA4\x03\xC3\x03\xC3\x06\xC3" +
        "\u0FA9\n\xC3\r\xC3\x0E\xC3\u0FAA\x03\xC3\x05\xC3\u0FAE\n\xC3\x03\xC3\x03" +
        "\xC3\x06\xC3\u0FB2\n\xC3\r\xC3\x0E\xC3\u0FB3\x03\xC3\x05\xC3\u0FB7\n\xC3" +
        "\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x07\xC3\u0FBF\n\xC3\f" +
        "\xC3\x0E\xC3\u0FC2\v\xC3\x03\xC3\x03\xC3\x07\xC3\u0FC6\n\xC3\f\xC3\x0E" +
        "\xC3\u0FC9\v\xC3\x03\xC3\x03\xC3\x07\xC3\u0FCD\n\xC3\f\xC3\x0E\xC3\u0FD0" +
        "\v\xC3\x03\xC3\x03\xC3\x03\xC3\x05\xC3\u0FD5\n\xC3\x03\xC4\x03\xC4\x03" +
        "\xC5\x03\xC5\x06\xC5\u0FDB\n\xC5\r\xC5\x0E\xC5\u0FDC\x03\xC5\x05\xC5\u0FE0" +
        "\n\xC5\x03\xC6\x03\xC6\x03\xC7\x03\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8" +
        "\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8" +
        "\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8" +
        "\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x06\xC8\u1001\n\xC8\r\xC8\x0E" +
        "\xC8\u1002\x03\xC9\x03\xC9\x03\xCA\x03\xCA\x03\xCA\b\u04C7\u04D0\u0E03" +
        "\u0E16\u0E60\u0F7D\x02\x02\xCB\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02" +
        "\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02" +
        " \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02" +
        "<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02" +
        "X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02" +
        "t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02" +
        "\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02" +
        "\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02" +
        "\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02" +
        "\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02" +
        "\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02" +
        "\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02" +
        "\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02" +
        "\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02" +
        "\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02" +
        "\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02" +
        "\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02" +
        "\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02" +
        "\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02" +
        "\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02" +
        "\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02" +
        "\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02" +
        "\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02" +
        "\u0192\x02\x02\x1C\x03\x02\t\n\x03\x02\xED\xEE\x03\x02\x8F\x90\x03\x02" +
        "\xB4\xB5\x03\x02\x7F\x81\x03\x02\x9D\x9E\x03\x02\x83\x83\x07\x02\xCB\xCC" +
        "\xCE\xCF\xDD\xE4\xED\xEE\xF0\xF1\x04\x02\xCA\xCA\xDF\xDF\x04\x02\xCB\xCB" +
        "\xE0\xE0\x04\x02\xCC\xCC\xE1\xE1\x04\x02\xCD\xCD\xE2\xE2\x04\x02\xCE\xCE" +
        "\xE3\xE3\x04\x02\xCF\xCF\xE4\xE4\x04\x02\xD6\xD6\xE8\xE8\x04\x02\xD8\xD8" +
        "\xE9\xE9\x04\x02\xD9\xD9\xEA\xEA\x04\x02\xDA\xDA\xEB\xEB\x04\x02\xDB\xDB" +
        "\xEC\xEC\x03\x02\xAC\xAD\x04\x02\xBA\xBA\xBD\xC0\x03\x02\x92\x92\x04\x02" +
        "\x93\x93\x95\x95\x03\x02\x9F\xA0\x03\x02\x98\x98\x03\x02\x99\x99\x02\u1248" +
        "\x02\u01A1\x03\x02\x02\x02\x04\u01AF\x03\x02\x02\x02\x06\u0226\x03\x02" +
        "\x02\x02\b\u0228\x03\x02\x02\x02\n\u0238\x03\x02\x02\x02\f\u0255\x03\x02" +
        "\x02\x02\x0E\u0260\x03\x02\x02\x02\x10\u026A\x03\x02\x02\x02\x12\u027B" +
        "\x03\x02\x02\x02\x14\u028D\x03\x02\x02\x02\x16\u0290\x03\x02\x02\x02\x18" +
        "\u02A6\x03\x02\x02\x02\x1A\u02BC\x03\x02\x02\x02\x1C\u02D0\x03\x02\x02" +
        "\x02\x1E\u02E4\x03\x02\x02\x02 \u02F8\x03\x02\x02\x02\"\u030C\x03\x02" +
        "\x02\x02$\u0320\x03\x02\x02\x02&\u0334\x03\x02\x02\x02(\u0348\x03\x02" +
        "\x02\x02*\u035C\x03\x02\x02\x02,\u0370\x03\x02\x02\x02.\u0384\x03\x02" +
        "\x02\x020\u0398\x03\x02\x02\x022\u03AC\x03\x02\x02\x024\u03C0\x03\x02" +
        "\x02\x026\u03D4\x03\x02\x02\x028\u03E8\x03\x02\x02\x02:\u041B\x03\x02" +
        "\x02\x02<\u041D\x03\x02\x02\x02>\u0428\x03\x02\x02\x02@\u0437\x03\x02" +
        "\x02\x02B\u0442\x03\x02\x02\x02D\u044D\x03\x02\x02\x02F\u0457\x03\x02" +
        "\x02\x02H\u0488\x03\x02\x02\x02J\u0494\x03\x02\x02\x02L\u0496\x03\x02" +
        "\x02\x02N\u0498\x03\x02\x02\x02P\u04D5\x03\x02\x02\x02R\u04D7\x03\x02" +
        "\x02\x02";
    bitmarkParser._serializedATNSegment2 = "T\u04FF\x03\x02\x02\x02V\u050D\x03\x02\x02\x02X\u051D\x03\x02\x02\x02" +
        "Z\u0544\x03\x02\x02\x02\\\u0569\x03\x02\x02\x02^\u058E\x03\x02\x02\x02" +
        "`\u05B3\x03\x02\x02\x02b\u05E0\x03\x02\x02\x02d\u060C\x03\x02\x02\x02" +
        "f\u0620\x03\x02\x02\x02h\u0634\x03\x02\x02\x02j\u0648\x03\x02\x02\x02" +
        "l\u065C\x03\x02\x02\x02n\u0670\x03\x02\x02\x02p\u0684\x03\x02\x02\x02" +
        "r\u0698\x03\x02\x02\x02t\u06AC\x03\x02\x02\x02v\u06C0\x03\x02\x02\x02" +
        "x\u06D4\x03\x02\x02\x02z\u06E8\x03\x02\x02\x02|\u06FC\x03\x02\x02\x02" +
        "~\u0710\x03\x02\x02\x02\x80\u0724\x03\x02\x02\x02\x82\u0738\x03\x02\x02" +
        "\x02\x84\u074C\x03\x02\x02\x02\x86\u0760\x03\x02\x02\x02\x88\u0774\x03" +
        "\x02\x02\x02\x8A\u0788\x03\x02\x02\x02\x8C\u079C\x03\x02\x02\x02\x8E\u07B0" +
        "\x03\x02\x02\x02\x90\u07C4\x03\x02\x02\x02\x92\u07D8\x03\x02\x02\x02\x94" +
        "\u07EC\x03\x02\x02\x02\x96\u0800\x03\x02\x02\x02\x98\u0814\x03\x02\x02" +
        "\x02\x9A\u0828\x03\x02\x02\x02\x9C\u083C\x03\x02\x02\x02\x9E\u0850\x03" +
        "\x02\x02\x02\xA0\u0864\x03\x02\x02\x02\xA2\u0878\x03\x02\x02\x02\xA4\u088C" +
        "\x03\x02\x02\x02\xA6\u08A0\x03\x02\x02\x02\xA8\u08B4\x03\x02\x02\x02\xAA" +
        "\u08C8\x03\x02\x02\x02\xAC\u08DC\x03\x02\x02\x02\xAE\u08F0\x03\x02\x02" +
        "\x02\xB0\u0904\x03\x02\x02\x02\xB2\u0918\x03\x02\x02\x02\xB4\u092C\x03" +
        "\x02\x02\x02\xB6\u0940\x03\x02\x02\x02\xB8\u0954\x03\x02\x02\x02\xBA\u0968" +
        "\x03\x02\x02\x02\xBC\u097C\x03\x02\x02\x02\xBE\u0990\x03\x02\x02\x02\xC0" +
        "\u09A4\x03\x02\x02\x02\xC2\u09B8\x03\x02\x02\x02\xC4\u09CC\x03\x02\x02" +
        "\x02\xC6\u09E0\x03\x02\x02\x02\xC8\u09F4\x03\x02\x02\x02\xCA\u0A08\x03" +
        "\x02\x02\x02\xCC\u0A1C\x03\x02\x02\x02\xCE\u0A30\x03\x02\x02\x02\xD0\u0A44" +
        "\x03\x02\x02\x02\xD2\u0A58\x03\x02\x02\x02\xD4\u0A6C\x03\x02\x02\x02\xD6" +
        "\u0A80\x03\x02\x02\x02\xD8\u0A94\x03\x02\x02\x02\xDA\u0AA8\x03\x02\x02" +
        "\x02\xDC\u0ABC\x03\x02\x02\x02\xDE\u0AD0\x03\x02\x02\x02\xE0\u0AE4\x03" +
        "\x02\x02\x02\xE2\u0AF8\x03\x02\x02\x02\xE4\u0B0C\x03\x02\x02\x02\xE6\u0B20" +
        "\x03\x02\x02\x02\xE8\u0B34\x03\x02\x02\x02\xEA\u0B48\x03\x02\x02\x02\xEC" +
        "\u0B5C\x03\x02\x02\x02\xEE\u0B70\x03\x02\x02\x02\xF0\u0B84\x03\x02\x02" +
        "\x02\xF2\u0B98\x03\x02\x02\x02\xF4\u0BAC\x03\x02\x02\x02\xF6\u0BC0\x03" +
        "\x02\x02\x02\xF8\u0BD4\x03\x02\x02\x02\xFA\u0BE8\x03\x02\x02\x02\xFC\u0C16" +
        "\x03\x02\x02\x02\xFE\u0C1A\x03\x02\x02\x02\u0100\u0C51\x03\x02\x02\x02" +
        "\u0102\u0C57\x03\x02\x02\x02\u0104\u0C81\x03\x02\x02\x02\u0106\u0CA4\x03" +
        "\x02\x02\x02\u0108\u0CC7\x03\x02\x02\x02\u010A\u0CEA\x03\x02\x02\x02\u010C" +
        "\u0D27\x03\x02\x02\x02\u010E\u0D2B\x03\x02\x02\x02\u0110\u0D32\x03\x02" +
        "\x02\x02\u0112\u0D3C\x03\x02\x02\x02\u0114\u0D47\x03\x02\x02\x02\u0116" +
        "\u0D4D\x03\x02\x02\x02\u0118\u0D5D\x03\x02\x02\x02\u011A\u0D5F\x03\x02" +
        "\x02\x02\u011C\u0D64\x03\x02\x02\x02\u011E\u0D66\x03\x02\x02\x02\u0120" +
        "\u0D68\x03\x02\x02\x02\u0122\u0D6A\x03\x02\x02\x02\u0124\u0D6C\x03\x02" +
        "\x02\x02\u0126\u0D6E\x03\x02\x02\x02\u0128\u0D70\x03\x02\x02\x02\u012A" +
        "\u0D72\x03\x02\x02\x02\u012C\u0D74\x03\x02\x02\x02\u012E\u0D80\x03\x02" +
        "\x02\x02\u0130\u0D82\x03\x02\x02\x02\u0132\u0D8A\x03\x02\x02\x02\u0134" +
        "\u0D8C\x03\x02\x02\x02\u0136\u0D96\x03\x02\x02\x02\u0138\u0DA0\x03\x02" +
        "\x02\x02\u013A\u0DAD\x03\x02\x02\x02\u013C\u0DB4\x03\x02\x02\x02\u013E" +
        "\u0DBF\x03\x02\x02\x02\u0140\u0DC6\x03\x02\x02\x02\u0142\u0DD0\x03\x02" +
        "\x02\x02\u0144\u0DDB\x03\x02\x02\x02\u0146\u0DF4\x03\x02\x02\x02\u0148" +
        "\u0E07\x03\x02\x02\x02\u014A\u0E1A\x03\x02\x02\x02\u014C\u0E1C\x03\x02" +
        "\x02\x02\u014E\u0E23\x03\x02\x02\x02\u0150\u0E37\x03\x02\x02\x02\u0152" +
        "\u0E43\x03\x02\x02\x02\u0154\u0E64\x03\x02\x02\x02\u0156\u0E66\x03\x02" +
        "\x02\x02\u0158\u0E6A\x03\x02\x02\x02\u015A\u0E8A\x03\x02\x02\x02\u015C" +
        "\u0E8C\x03\x02\x02\x02\u015E\u0EA1\x03\x02\x02\x02\u0160\u0EAA\x03\x02" +
        "\x02\x02\u0162\u0ED3\x03\x02\x02\x02\u0164\u0EEB\x03\x02\x02\x02\u0166" +
        "\u0EED\x03\x02\x02\x02\u0168\u0EF1\x03\x02\x02\x02\u016A\u0EFD\x03\x02" +
        "\x02\x02\u016C\u0F29\x03\x02\x02\x02\u016E\u0F2B\x03\x02\x02\x02\u0170" +
        "\u0F3F\x03\x02\x02\x02\u0172\u0F49\x03\x02\x02\x02\u0174\u0F54\x03\x02" +
        "\x02\x02\u0176\u0F56\x03\x02\x02\x02\u0178\u0F5A\x03\x02\x02\x02\u017A" +
        "\u0F5E\x03\x02\x02\x02\u017C\u0F81\x03\x02\x02\x02\u017E\u0F96\x03\x02" +
        "\x02\x02\u0180\u0F98\x03\x02\x02\x02\u0182\u0FA2\x03\x02\x02\x02\u0184" +
        "\u0FD4\x03\x02\x02\x02\u0186\u0FD6\x03\x02\x02\x02\u0188\u0FD8\x03\x02" +
        "\x02\x02\u018A\u0FE1\x03\x02\x02\x02\u018C\u0FE3\x03\x02\x02\x02\u018E" +
        "\u1000\x03\x02\x02\x02\u0190\u1004\x03\x02\x02\x02\u0192\u1006\x03\x02" +
        "\x02\x02\u0194\u019E\x05\x04\x03\x02\u0195\u0197\x07\x04\x02\x02\u0196" +
        "\u0195\x03\x02\x02\x02\u0197\u019A\x03\x02\x02\x02\u0198\u0196\x03\x02" +
        "\x02\x02\u0198\u0199\x03\x02\x02\x02\u0199\u019B\x03\x02\x02\x02\u019A" +
        "\u0198\x03\x02\x02\x02\u019B\u019D\x07\xA7\x02\x02\u019C\u0198\x03\x02" +
        "\x02\x02\u019D\u01A0\x03\x02\x02\x02\u019E\u019C\x03\x02\x02\x02\u019E" +
        "\u019F\x03\x02\x02\x02\u019F\u01A2\x03\x02\x02\x02\u01A0\u019E\x03\x02" +
        "\x02\x02\u01A1\u0194\x03\x02\x02\x02\u01A2\u01A3\x03\x02\x02\x02\u01A3" +
        "\u01A1\x03\x02\x02\x02\u01A3\u01A4\x03\x02\x02\x02\u01A4\u01A8\x03\x02" +
        "\x02\x02\u01A5\u01A7\x07\xA7\x02\x02\u01A6\u01A5\x03\x02\x02\x02\u01A7" +
        "\u01AA\x03\x02\x02\x02\u01A8\u01A6\x03\x02\x02\x02\u01A8\u01A9\x03\x02" +
        "\x02\x02\u01A9\u01AB\x03\x02\x02\x02\u01AA\u01A8\x03\x02\x02\x02\u01AB" +
        "\u01AC\x07\x02\x02\x03\u01AC\x03\x03\x02\x02\x02\u01AD\u01B0\x05\x06\x04" +
        "\x02\u01AE\u01B0\x05\u0182\xC2\x02\u01AF\u01AD\x03\x02\x02\x02\u01AF\u01AE" +
        "\x03\x02\x02\x02\u01B0\x05\x03\x02\x02\x02\u01B1\u0227\x05\b\x05\x02\u01B2" +
        "\u0227\x05\n\x06\x02\u01B3\u0227\x05\x0E\b\x02\u01B4\u0227\x05\f\x07\x02" +
        "\u01B5\u0227\x05\x12\n\x02\u01B6\u0227\x05\x10\t\x02\u01B7\u0227\x05\u0180" +
        "\xC1\x02\u01B8\u0227\x05\x16\f\x02\u01B9\u0227\x05\x18\r\x02\u01BA\u0227" +
        "\x05F$\x02\u01BB\u0227\x05N(\x02\u01BC\u0227\x05R*\x02\u01BD\u0227\x05" +
        "X-\x02\u01BE\u0227\x05\\/\x02\u01BF\u0227\x05Z.\x02\u01C0\u0227\x05^0" +
        "\x02\u01C1\u0227\x05`1\x02\u01C2\u0227\x05b2\x02\u01C3\u0227\x05d3\x02" +
        "\u01C4\u0227\x05f4\x02\u01C5\u0227\x05h5\x02\u01C6\u0227\x05j6\x02\u01C7" +
        "\u0227\x05l7\x02\u01C8\u0227\x05n8\x02\u01C9\u0227\x05p9\x02\u01CA\u0227" +
        "\x05t;\x02\u01CB\u0227\x05v<\x02\u01CC\u0227\x05x=\x02\u01CD\u0227\x05" +
        "z>\x02\u01CE\u0227\x05\x8AF\x02\u01CF\u0227\x05|?\x02\u01D0\u0227\x05" +
        "~@\x02\u01D1\u0227\x05\x80A\x02\u01D2\u0227\x05\x82B\x02\u01D3\u0227\x05" +
        "\x84C\x02\u01D4\u0227\x05\x86D\x02\u01D5\u0227\x05\x88E\x02\u01D6\u0227" +
        "\x05\x8CG\x02\u01D7\u0227\x05r:\x02\u01D8\u0227\x05\xF8}\x02\u01D9\u0227" +
        "\x05\xFA~\x02\u01DA\u0227\x05\u010A\x86\x02\u01DB\u0227\x05\xFE\x80\x02" +
        "\u01DC\u0227\x05\u0102\x82\x02\u01DD\u0227\x05\u0104\x83\x02\u01DE\u0227" +
        "\x05\u0106\x84\x02\u01DF\u0227\x05\u0108\x85\x02\u01E0\u0227\x05\u016E" +
        "\xB8\x02\u01E1\u0227\x05\x8EH\x02\u01E2\u0227\x05\x90I\x02\u01E3\u0227" +
        "\x05\x1A\x0E\x02\u01E4\u0227\x05\x1C\x0F\x02\u01E5\u0227\x05\x1E\x10\x02" +
        "\u01E6\u0227\x05 \x11\x02\u01E7\u0227\x05\"\x12\x02\u01E8\u0227\x05$\x13" +
        "\x02\u01E9\u0227\x05&\x14\x02\u01EA\u0227\x05(\x15\x02\u01EB\u0227\x05" +
        "*\x16\x02\u01EC\u0227\x05,\x17\x02\u01ED\u0227\x05.\x18\x02\u01EE\u0227" +
        "\x050\x19\x02\u01EF\u0227\x052\x1A\x02\u01F0\u0227\x054\x1B\x02\u01F1" +
        "\u0227\x056\x1C\x02\u01F2\u0227\x058\x1D\x02\u01F3\u0227\x05\x92J\x02" +
        "\u01F4\u0227\x05\x94K\x02\u01F5\u0227\x05\x96L\x02\u01F6\u0227\x05\x98" +
        "M\x02\u01F7\u0227\x05\x9AN\x02\u01F8\u0227\x05\x9CO\x02\u01F9\u0227\x05" +
        "\x9EP\x02\u01FA\u0227\x05\xA0Q\x02\u01FB\u0227\x05\xA2R\x02\u01FC\u0227" +
        "\x05\xA4S\x02\u01FD\u0227\x05\xA6T\x02\u01FE\u0227\x05\xA8U\x02\u01FF" +
        "\u0227\x05\xACW\x02\u0200\u0227\x05\xAEX\x02\u0201\u0227\x05\xB0Y\x02" +
        "\u0202\u0227\x05\xB2Z\x02\u0203\u0227\x05\xAAV\x02\u0204\u0227\x05\xB4" +
        "[\x02\u0205\u0227\x05\xB6\\\x02\u0206\u0227\x05\xB8]\x02\u0207\u0227\x05" +
        "\xBA^\x02\u0208\u0227\x05\xBC_\x02\u0209\u0227\x05\xBE`\x02\u020A\u0227" +
        "\x05\xC0a\x02\u020B\u0227\x05\xC2b\x02\u020C\u0227\x05\xC4c\x02\u020D" +
        "\u0227\x05\xC6d\x02\u020E\u0227\x05\xC8e\x02\u020F\u0227\x05\xCAf\x02" +
        "\u0210\u0227\x05\xCCg\x02\u0211\u0227\x05\xCEh\x02\u0212\u0227\x05\xD0" +
        "i\x02\u0213\u0227\x05\xD2j\x02\u0214\u0227\x05\xD4k\x02\u0215\u0227\x05" +
        "\xD6l\x02\u0216\u0227\x05\xD8m\x02\u0217\u0227\x05\xDAn\x02\u0218\u0227" +
        "\x05\xDCo\x02\u0219\u0227\x05\xDEp\x02\u021A\u0227\x05\xE0q\x02\u021B" +
        "\u0227\x05\xE2r\x02\u021C\u0227\x05\xE4s\x02\u021D\u0227\x05\xE6t\x02" +
        "\u021E\u0227\x05\xE8u\x02\u021F\u0227\x05\xEAv\x02\u0220\u0227\x05\xEC" +
        "w\x02\u0221\u0227\x05\xEEx\x02\u0222\u0227\x05\xF0y\x02\u0223\u0227\x05" +
        "\xF2z\x02\u0224\u0227\x05\xF4{\x02\u0225\u0227\x05\xF6|\x02\u0226\u01B1" +
        "\x03\x02\x02\x02\u0226\u01B2\x03\x02\x02\x02\u0226\u01B3\x03\x02\x02\x02" +
        "\u0226\u01B4\x03\x02\x02\x02\u0226\u01B5\x03\x02\x02\x02\u0226\u01B6\x03" +
        "\x02\x02\x02\u0226\u01B7\x03\x02\x02\x02\u0226\u01B8\x03\x02\x02\x02\u0226" +
        "\u01B9\x03\x02\x02\x02\u0226\u01BA\x03\x02\x02\x02\u0226\u01BB\x03\x02" +
        "\x02\x02\u0226\u01BC\x03\x02\x02\x02\u0226\u01BD\x03\x02\x02\x02\u0226" +
        "\u01BE\x03\x02\x02\x02\u0226\u01BF\x03\x02\x02\x02\u0226\u01C0\x03\x02" +
        "\x02\x02\u0226\u01C1\x03\x02\x02\x02\u0226\u01C2\x03\x02\x02\x02\u0226" +
        "\u01C3\x03\x02\x02\x02\u0226\u01C4\x03\x02\x02\x02\u0226\u01C5\x03\x02" +
        "\x02\x02\u0226\u01C6\x03\x02\x02\x02\u0226\u01C7\x03\x02\x02\x02\u0226" +
        "\u01C8\x03\x02\x02\x02\u0226\u01C9\x03\x02\x02\x02\u0226\u01CA\x03\x02" +
        "\x02\x02\u0226\u01CB\x03\x02\x02\x02\u0226\u01CC\x03\x02\x02\x02\u0226" +
        "\u01CD\x03\x02\x02\x02\u0226\u01CE\x03\x02\x02\x02\u0226\u01CF\x03\x02" +
        "\x02\x02\u0226\u01D0\x03\x02\x02\x02\u0226\u01D1\x03\x02\x02\x02\u0226" +
        "\u01D2\x03\x02\x02\x02\u0226\u01D3\x03\x02\x02\x02\u0226\u01D4\x03\x02" +
        "\x02\x02\u0226\u01D5\x03\x02\x02\x02\u0226\u01D6\x03\x02\x02\x02\u0226" +
        "\u01D7\x03\x02\x02\x02\u0226\u01D8\x03\x02\x02\x02\u0226\u01D9\x03\x02" +
        "\x02\x02\u0226\u01DA\x03\x02\x02\x02\u0226\u01DB\x03\x02\x02\x02\u0226" +
        "\u01DC\x03\x02\x02\x02\u0226\u01DD\x03\x02\x02\x02\u0226\u01DE\x03\x02" +
        "\x02\x02\u0226\u01DF\x03\x02\x02\x02\u0226\u01E0\x03\x02\x02\x02\u0226" +
        "\u01E1\x03\x02\x02\x02\u0226\u01E2\x03\x02\x02\x02\u0226\u01E3\x03\x02" +
        "\x02\x02\u0226\u01E4\x03\x02\x02\x02\u0226\u01E5\x03\x02\x02\x02\u0226" +
        "\u01E6\x03\x02\x02\x02\u0226\u01E7\x03\x02\x02\x02\u0226\u01E8\x03\x02" +
        "\x02\x02\u0226\u01E9\x03\x02\x02\x02\u0226\u01EA\x03\x02\x02\x02\u0226" +
        "\u01EB\x03\x02\x02\x02\u0226\u01EC\x03\x02\x02\x02\u0226\u01ED\x03\x02" +
        "\x02\x02\u0226\u01EE\x03\x02\x02\x02\u0226\u01EF\x03\x02\x02\x02\u0226" +
        "\u01F0\x03\x02\x02\x02\u0226\u01F1\x03\x02\x02\x02\u0226\u01F2\x03\x02" +
        "\x02\x02\u0226\u01F3\x03\x02\x02\x02\u0226\u01F4\x03\x02\x02\x02\u0226" +
        "\u01F5\x03\x02\x02\x02\u0226\u01F6\x03\x02\x02\x02\u0226\u01F7\x03\x02" +
        "\x02\x02\u0226\u01F8\x03\x02\x02\x02\u0226\u01F9\x03\x02\x02\x02\u0226" +
        "\u01FA\x03\x02\x02\x02\u0226\u01FB\x03\x02\x02\x02\u0226\u01FC\x03\x02" +
        "\x02\x02\u0226\u01FD\x03\x02\x02\x02\u0226\u01FE\x03\x02\x02\x02\u0226" +
        "\u01FF\x03\x02\x02\x02\u0226\u0200\x03\x02\x02\x02\u0226\u0201\x03\x02" +
        "\x02\x02\u0226\u0202\x03\x02\x02\x02\u0226\u0203\x03\x02\x02\x02\u0226" +
        "\u0204\x03\x02\x02\x02\u0226\u0205\x03\x02\x02\x02\u0226\u0206\x03\x02" +
        "\x02\x02\u0226\u0207\x03\x02\x02\x02\u0226\u0208\x03\x02\x02\x02\u0226" +
        "\u0209\x03\x02\x02\x02\u0226\u020A\x03\x02\x02\x02\u0226\u020B\x03\x02" +
        "\x02\x02\u0226\u020C\x03\x02\x02\x02\u0226\u020D\x03\x02\x02\x02\u0226" +
        "\u020E\x03\x02\x02\x02\u0226\u020F\x03\x02\x02\x02\u0226\u0210\x03\x02" +
        "\x02\x02\u0226\u0211\x03\x02\x02\x02\u0226\u0212\x03\x02\x02\x02\u0226" +
        "\u0213\x03\x02\x02\x02\u0226\u0214\x03\x02\x02\x02\u0226\u0215\x03\x02" +
        "\x02\x02\u0226\u0216\x03\x02\x02\x02\u0226\u0217\x03\x02\x02\x02\u0226" +
        "\u0218\x03\x02\x02\x02\u0226\u0219\x03\x02\x02\x02\u0226\u021A\x03\x02" +
        "\x02\x02\u0226\u021B\x03\x02\x02\x02\u0226\u021C\x03\x02\x02\x02\u0226" +
        "\u021D\x03\x02\x02\x02\u0226\u021E\x03\x02\x02\x02\u0226\u021F\x03\x02" +
        "\x02\x02\u0226\u0220\x03\x02\x02\x02\u0226\u0221\x03\x02\x02\x02\u0226" +
        "\u0222\x03\x02\x02\x02\u0226\u0223\x03\x02\x02\x02\u0226\u0224\x03\x02" +
        "\x02\x02\u0226\u0225\x03\x02\x02\x02\u0227\x07\x03\x02\x02\x02\u0228\u022A" +
        "\x07\x05\x02\x02\u0229\u022B\x05\u0110\x89\x02\u022A\u0229\x03\x02\x02" +
        "\x02\u022A\u022B\x03\x02\x02\x02\u022B\u022C\x03\x02\x02\x02\u022C\u0234" +
        "\x07\x92\x02\x02\u022D\u022F\x07\xA7\x02\x02\u022E\u022D\x03\x02\x02\x02" +
        "\u022F\u0232\x03\x02\x02\x02\u0230\u022E\x03\x02\x02\x02\u0230\u0231\x03" +
        "\x02\x02\x02\u0231\u0233\x03\x02\x02\x02\u0232\u0230\x03\x02\x02\x02\u0233" +
        "\u0235\x05:\x1E\x02\u0234\u0230\x03\x02\x02\x02\u0235\u0236\x03\x02\x02" +
        "\x02\u0236\u0234\x03\x02\x02\x02\u0236\u0237\x03\x02\x02\x02\u0237\t\x03" +
        "\x02\x02\x02\u0238\u023A\x07\x06\x02\x02\u0239\u023B\x05\u0110\x89\x02" +
        "\u023A\u0239\x03\x02\x02\x02\u023A\u023B\x03\x02\x02\x02\u023B\u023C\x03" +
        "\x02\x02\x02\u023C\u0240\x07\x92\x02\x02\u023D\u023F\x07\xA7\x02\x02\u023E" +
        "\u023D\x03\x02\x02\x02\u023F\u0242\x03\x02\x02\x02\u0240\u023E\x03\x02" +
        "\x02\x02\u0240\u0241\x03\x02\x02\x02\u0241\u0246\x03\x02\x02\x02\u0242" +
        "\u0240\x03\x02\x02\x02\u0243\u0244\x05\u0180\xC1\x02\u0244\u0245\x07\xA7" +
        "\x02\x02\u0245\u0247\x03\x02\x02\x02\u0246\u0243\x03\x02\x02\x02\u0246" +
        "\u0247\x03\x02\x02\x02\u0247\u0248\x03\x02\x02\x02\u0248\u0252\x05L\'" +
        "\x02\u0249\u024B\x07\xA7\x02\x02\u024A\u0249\x03\x02\x02\x02\u024B\u024E" +
        "\x03\x02\x02\x02\u024C\u024A\x03\x02\x02\x02\u024C\u024D\x03\x02\x02\x02" +
        "\u024D\u024F\x03\x02\x02\x02\u024E\u024C\x03\x02\x02\x02\u024F\u0251\x05" +
        "L\'\x02\u0250\u024C\x03\x02\x02\x02\u0251\u0254\x03\x02\x02\x02\u0252" +
        "\u0250\x03\x02\x02\x02\u0252\u0253\x03\x02\x02\x02\u0253\v\x03\x02\x02" +
        "\x02\u0254\u0252\x03\x02\x02\x02\u0255\u0257\x07\x07\x02\x02\u0256\u0258" +
        "\x05\u0184\xC3\x02\u0257\u0256\x03\x02\x02\x02\u0257\u0258\x03\x02\x02" +
        "\x02\u0258\u0259\x03\x02\x02\x02\u0259\u025A\x07\x92\x02\x02\u025A\u025E" +
        "\x07\xA7\x02\x02\u025B\u025C\x05\u017A\xBE\x02\u025C\u025D\x07\xA7\x02" +
        "\x02\u025D\u025F\x03\x02\x02\x02\u025E\u025B\x03\x02\x02\x02\u025E\u025F" +
        "\x03\x02\x02\x02\u025F\r\x03\x02\x02\x02\u0260\u0261\x07\b\x02\x02\u0261" +
        "\u0265\x07\x92\x02\x02\u0262\u0264\x07\xA7\x02\x02\u0263\u0262\x03\x02" +
        "\x02\x02\u0264\u0267\x03\x02\x02\x02\u0265\u0263\x03\x02\x02\x02\u0265" +
        "\u0266\x03\x02\x02\x02\u0266\u0268\x03\x02\x02\x02\u0267\u0265\x03\x02" +
        "\x02\x02\u0268\u0269\x05\x14\v\x02\u0269\x0F\x03\x02\x02\x02\u026A\u026C" +
        "\t\x02\x02\x02\u026B\u026D\t\x03\x02\x02\u026C\u026B\x03\x02\x02\x02\u026C" +
        "\u026D\x03\x02\x02\x02\u026D\u026E\x03\x02\x02\x02\u026E\u0278\x07\x92" +
        "\x02\x02\u026F\u0271\x07\xA7\x02\x02\u0270\u026F\x03\x02\x02\x02\u0271" +
        "\u0274\x03\x02\x02\x02\u0272\u0270\x03\x02\x02\x02\u0272\u0273\x03\x02" +
        "\x02\x02\u0273\u0275\x03\x02\x02\x02\u0274\u0272\x03\x02\x02\x02\u0275" +
        "\u0277\x05:\x1E\x02\u0276\u0272\x03\x02\x02\x02\u0277\u027A\x03\x02\x02" +
        "\x02\u0278\u0276\x03\x02\x02\x02\u0278\u0279\x03\x02\x02\x02\u0279\x11" +
        "\x03\x02\x02\x02\u027A\u0278\x03\x02\x02\x02\u027B\u027C\x07\v\x02\x02" +
        "\u027C\u027D\x07\x92\x02\x02\u027D\u027E\x05\u015E\xB0\x02\u027E\x13\x03" +
        "\x02\x02\x02\u027F\u0281\x07\xA7\x02\x02\u0280\u027F\x03\x02\x02\x02\u0280" +
        "\u0281\x03\x02\x02\x02\u0281\u0289\x03\x02\x02\x02\u0282\u028A\x05\u0170" +
        "\xB9\x02\u0283\u028A\x05\u017A\xBE\x02\u0284\u028A\x05\u015A\xAE\x02\u0285" +
        "\u028A\x05\u016C\xB7\x02\u0286\u028A\x05\u015E\xB0\x02\u0287\u028A\x05" +
        "\u0180\xC1\x02\u0288\u028A\x05\u0166\xB4\x02\u0289\u0282\x03\x02\x02\x02" +
        "\u0289\u0283\x03\x02\x02\x02\u0289\u0284\x03\x02\x02\x02\u0289\u0285\x03" +
        "\x02\x02\x02\u0289\u0286\x03\x02\x02\x02\u0289\u0287\x03\x02\x02\x02\u0289" +
        "\u0288\x03\x02\x02\x02\u028A\u028C\x03\x02\x02\x02\u028B\u0280\x03\x02" +
        "\x02\x02\u028C\u028F\x03\x02\x02\x02\u028D\u028B\x03\x02\x02\x02\u028D" +
        "\u028E\x03\x02\x02\x02\u028E\x15\x03\x02\x02\x02\u028F\u028D\x03\x02\x02" +
        "\x02\u0290\u0291\x07\f\x02\x02\u0291\u029B\x07\x92\x02\x02\u0292\u0293" +
        "\x07\xA7\x02\x02\u0293\u0296\t\x04\x02\x02\u0294\u0297\x05\u0184\xC3\x02" +
        "\u0295\u0297\x07\x93\x02\x02\u0296\u0294\x03\x02\x02\x02\u0296\u0295\x03" +
        "\x02\x02\x02\u0297\u0298\x03\x02\x02\x02\u0298\u0296\x03\x02\x02\x02\u0298" +
        "\u0299\x03\x02\x02\x02\u0299\u029A\x03\x02\x02\x02\u029A\u029C\x07\x92" +
        "\x02\x02\u029B\u0292\x03\x02\x02\x02\u029C\u029D\x03\x02\x02\x02\u029D" +
        "\u029B\x03\x02\x02\x02\u029D\u029E\x03\x02\x02\x02\u029E\u029F\x03\x02" +
        "\x02\x02\u029F\u02A3\x07\xA7\x02\x02\u02A0\u02A2\x05\u0182\xC2\x02\u02A1" +
        "\u02A0\x03\x02\x02\x02\u02A2\u02A5\x03\x02\x02\x02\u02A3\u02A1\x03\x02" +
        "\x02\x02\u02A3\u02A4\x03\x02\x02\x02\u02A4\x17\x03\x02\x02\x02\u02A5\u02A3" +
        "\x03\x02\x02\x02\u02A6\u02A7\x07\r\x02\x02\u02A7\u02B1\x07\x92\x02\x02" +
        "\u02A8\u02A9\x07\xA7\x02\x02\u02A9\u02AC\t\x04\x02\x02\u02AA\u02AD\x05" +
        "\u0184\xC3\x02\u02AB\u02AD\x07\x93\x02\x02\u02AC\u02AA\x03\x02\x02\x02" +
        "\u02AC\u02AB\x03\x02\x02\x02\u02AD\u02AE\x03\x02\x02\x02\u02AE\u02AC\x03" +
        "\x02\x02\x02\u02AE\u02AF\x03\x02\x02\x02\u02AF\u02B0\x03\x02\x02\x02\u02B0" +
        "\u02B2\x07\x92\x02\x02\u02B1\u02A8\x03\x02\x02\x02\u02B2\u02B3\x03\x02" +
        "\x02\x02\u02B3\u02B1\x03\x02\x02\x02\u02B3\u02B4\x03\x02\x02\x02\u02B4" +
        "\u02B5\x03\x02\x02\x02\u02B5\u02B9\x07\xA7\x02\x02\u02B6\u02B8\x05\u0182" +
        "\xC2\x02\u02B7\u02B6\x03\x02\x02\x02\u02B8\u02BB\x03\x02\x02\x02\u02B9" +
        "\u02B7\x03\x02\x02\x02\u02B9\u02BA\x03\x02\x02\x02\u02BA\x19\x03\x02\x02" +
        "\x02\u02BB\u02B9\x03\x02\x02\x02\u02BC\u02BD\x079\x02\x02\u02BD\u02BE" +
        "\x05\u0110\x89\x02\u02BE\u02C2\x07\x92\x02\x02\u02BF\u02C1\x07\xA7\x02" +
        "\x02\u02C0\u02BF\x03\x02\x02\x02\u02C1\u02C4\x03\x02\x02\x02\u02C2\u02C0" +
        "\x03\x02\x02\x02\u02C2\u02C3\x03\x02\x02\x02\u02C3\u02CC\x03\x02\x02\x02" +
        "\u02C4\u02C2\x03\x02\x02\x02\u02C5\u02C9\x05:\x1E\x02\u02C6\u02C8\x07" +
        "\xA7\x02\x02\u02C7\u02C6\x03\x02\x02\x02\u02C8\u02CB\x03\x02\x02\x02\u02C9" +
        "\u02C7\x03\x02\x02\x02\u02C9\u02CA\x03\x02\x02\x02\u02CA\u02CD\x03\x02" +
        "\x02\x02\u02CB\u02C9\x03\x02\x02\x02\u02CC\u02C5\x03\x02\x02\x02\u02CD" +
        "\u02CE\x03\x02\x02\x02\u02CE\u02CC\x03\x02\x02\x02\u02CE\u02CF\x03\x02" +
        "\x02\x02\u02CF\x1B\x03\x02\x02\x02\u02D0\u02D1\x07:\x02\x02\u02D1\u02D2" +
        "\x05\u0110\x89\x02\u02D2\u02D6\x07\x92\x02\x02\u02D3\u02D5\x07\xA7\x02" +
        "\x02\u02D4\u02D3\x03\x02\x02\x02\u02D5\u02D8\x03\x02\x02\x02\u02D6\u02D4" +
        "\x03\x02\x02\x02\u02D6\u02D7\x03\x02\x02\x02\u02D7\u02E0\x03\x02\x02\x02" +
        "\u02D8\u02D6\x03\x02\x02\x02\u02D9\u02DD\x05:\x1E\x02\u02DA\u02DC\x07" +
        "\xA7\x02\x02\u02DB\u02DA\x03\x02\x02\x02\u02DC\u02DF\x03\x02\x02\x02\u02DD" +
        "\u02DB\x03\x02\x02\x02\u02DD\u02DE\x03\x02\x02\x02\u02DE\u02E1\x03\x02" +
        "\x02\x02\u02DF\u02DD\x03\x02\x02\x02\u02E0\u02D9\x03\x02\x02\x02\u02E1" +
        "\u02E2\x03\x02\x02\x02\u02E2\u02E0\x03\x02\x02\x02\u02E2\u02E3\x03\x02" +
        "\x02\x02\u02E3\x1D\x03\x02\x02\x02\u02E4\u02E5\x07;\x02\x02\u02E5\u02E6" +
        "\x05\u0110\x89\x02\u02E6\u02EA\x07\x92\x02\x02\u02E7\u02E9\x07\xA7\x02" +
        "\x02\u02E8\u02E7\x03\x02\x02\x02\u02E9\u02EC\x03\x02\x02\x02\u02EA\u02E8" +
        "\x03\x02\x02\x02\u02EA\u02EB\x03\x02\x02\x02\u02EB\u02F4\x03\x02\x02\x02" +
        "\u02EC\u02EA\x03\x02\x02\x02\u02ED\u02F1\x05:\x1E\x02\u02EE\u02F0\x07" +
        "\xA7\x02\x02\u02EF\u02EE\x03\x02\x02\x02\u02F0\u02F3\x03\x02\x02\x02\u02F1" +
        "\u02EF\x03\x02\x02\x02\u02F1\u02F2\x03\x02\x02\x02\u02F2\u02F5\x03\x02" +
        "\x02\x02\u02F3\u02F1\x03\x02\x02\x02\u02F4\u02ED\x03\x02\x02\x02\u02F5" +
        "\u02F6\x03\x02\x02\x02\u02F6\u02F4\x03\x02\x02\x02\u02F6\u02F7\x03\x02" +
        "\x02\x02\u02F7\x1F\x03\x02\x02\x02\u02F8\u02F9\x07<\x02\x02\u02F9\u02FA" +
        "\x05\u0110\x89\x02\u02FA\u02FE\x07\x92\x02\x02\u02FB\u02FD\x07\xA7\x02" +
        "\x02\u02FC\u02FB\x03\x02\x02\x02\u02FD\u0300\x03\x02\x02\x02\u02FE\u02FC" +
        "\x03\x02\x02\x02\u02FE\u02FF\x03\x02\x02\x02\u02FF\u0308\x03\x02\x02\x02" +
        "\u0300\u02FE\x03\x02\x02\x02\u0301\u0305\x05:\x1E\x02\u0302\u0304\x07" +
        "\xA7\x02\x02\u0303\u0302\x03\x02\x02\x02\u0304\u0307\x03\x02\x02\x02\u0305" +
        "\u0303\x03\x02\x02\x02\u0305\u0306\x03\x02\x02\x02\u0306\u0309\x03\x02" +
        "\x02\x02\u0307\u0305\x03\x02\x02\x02\u0308\u0301\x03\x02\x02\x02\u0309" +
        "\u030A\x03\x02\x02\x02\u030A\u0308\x03\x02\x02\x02\u030A\u030B\x03\x02" +
        "\x02\x02\u030B!\x03\x02\x02\x02\u030C\u030D\x07=\x02\x02\u030D\u030E\x05" +
        "\u0110\x89\x02\u030E\u0312\x07\x92\x02\x02\u030F\u0311\x07\xA7\x02\x02" +
        "\u0310\u030F\x03\x02\x02\x02\u0311\u0314\x03\x02\x02\x02\u0312\u0310\x03" +
        "\x02\x02\x02\u0312\u0313\x03\x02\x02\x02\u0313\u031C\x03\x02\x02\x02\u0314" +
        "\u0312\x03\x02\x02\x02\u0315\u0319\x05:\x1E\x02\u0316\u0318\x07\xA7\x02" +
        "\x02\u0317\u0316\x03\x02\x02\x02\u0318\u031B\x03\x02\x02\x02\u0319\u0317" +
        "\x03\x02\x02\x02\u0319\u031A\x03\x02\x02\x02\u031A\u031D\x03\x02\x02\x02" +
        "\u031B\u0319\x03\x02\x02\x02\u031C\u0315\x03\x02\x02\x02\u031D\u031E\x03" +
        "\x02\x02\x02\u031E\u031C\x03\x02\x02\x02\u031E\u031F\x03\x02\x02\x02\u031F" +
        "#\x03\x02\x02\x02\u0320\u0321\x07>\x02\x02\u0321\u0322\x05\u0110\x89\x02" +
        "\u0322\u0326\x07\x92\x02\x02\u0323\u0325\x07\xA7\x02\x02\u0324\u0323\x03" +
        "\x02\x02\x02\u0325\u0328\x03\x02\x02\x02\u0326\u0324\x03\x02\x02\x02\u0326" +
        "\u0327\x03\x02\x02\x02\u0327\u0330\x03\x02\x02\x02\u0328\u0326\x03\x02" +
        "\x02\x02\u0329\u032D\x05:\x1E\x02\u032A\u032C\x07\xA7\x02\x02\u032B\u032A" +
        "\x03\x02\x02\x02\u032C\u032F\x03\x02\x02\x02\u032D\u032B\x03\x02\x02\x02" +
        "\u032D\u032E\x03\x02\x02\x02\u032E\u0331\x03\x02\x02\x02\u032F\u032D\x03" +
        "\x02\x02\x02\u0330\u0329\x03\x02\x02\x02\u0331\u0332\x03\x02\x02\x02\u0332" +
        "\u0330\x03\x02\x02\x02\u0332\u0333\x03\x02\x02\x02\u0333%\x03\x02\x02" +
        "\x02\u0334\u0335\x07?\x02\x02\u0335\u0336\x05\u0110\x89\x02\u0336\u033A" +
        "\x07\x92\x02\x02\u0337\u0339\x07\xA7\x02\x02\u0338\u0337\x03\x02\x02\x02" +
        "\u0339\u033C\x03\x02\x02\x02\u033A\u0338\x03\x02\x02\x02\u033A\u033B\x03" +
        "\x02\x02\x02\u033B\u0344\x03\x02\x02\x02\u033C\u033A\x03\x02\x02\x02\u033D" +
        "\u0341\x05:\x1E\x02\u033E\u0340\x07\xA7\x02\x02\u033F\u033E\x03\x02\x02" +
        "\x02\u0340\u0343\x03\x02\x02\x02\u0341\u033F\x03\x02\x02\x02\u0341\u0342" +
        "\x03\x02\x02\x02\u0342\u0345\x03\x02\x02\x02\u0343\u0341\x03\x02\x02\x02" +
        "\u0344\u033D\x03\x02\x02\x02\u0345\u0346\x03\x02\x02\x02\u0346\u0344\x03" +
        "\x02\x02\x02\u0346\u0347\x03\x02\x02\x02\u0347\'\x03\x02\x02\x02\u0348" +
        "\u0349\x07@\x02\x02\u0349\u034A\x05\u0110\x89\x02\u034A\u034E\x07\x92" +
        "\x02\x02\u034B\u034D\x07\xA7\x02\x02\u034C\u034B\x03\x02\x02\x02\u034D" +
        "\u0350\x03\x02\x02\x02\u034E\u034C\x03\x02\x02\x02\u034E\u034F\x03\x02" +
        "\x02\x02\u034F\u0358\x03\x02\x02\x02\u0350\u034E\x03\x02\x02\x02\u0351" +
        "\u0355\x05:\x1E\x02\u0352\u0354\x07\xA7\x02\x02\u0353\u0352\x03\x02\x02" +
        "\x02\u0354\u0357\x03\x02\x02\x02\u0355\u0353\x03\x02\x02\x02\u0355\u0356" +
        "\x03\x02\x02\x02\u0356\u0359\x03\x02\x02\x02\u0357\u0355\x03\x02\x02\x02" +
        "\u0358\u0351\x03\x02\x02\x02\u0359\u035A\x03\x02\x02\x02\u035A\u0358\x03" +
        "\x02\x02\x02\u035A\u035B\x03\x02\x02\x02\u035B)\x03\x02\x02\x02\u035C" +
        "\u035D\x07A\x02\x02\u035D\u035E\x05\u0110\x89\x02\u035E\u0362\x07\x92" +
        "\x02\x02\u035F\u0361\x07\xA7\x02\x02\u0360\u035F\x03\x02\x02\x02\u0361" +
        "\u0364\x03\x02\x02\x02\u0362\u0360\x03\x02\x02\x02\u0362\u0363\x03\x02" +
        "\x02\x02\u0363\u036C\x03\x02\x02\x02\u0364\u0362\x03\x02\x02\x02\u0365" +
        "\u0369\x05:\x1E\x02\u0366\u0368\x07\xA7\x02\x02\u0367\u0366\x03\x02\x02" +
        "\x02\u0368\u036B\x03\x02\x02\x02\u0369\u0367\x03\x02\x02\x02\u0369\u036A" +
        "\x03\x02\x02\x02\u036A\u036D\x03\x02\x02\x02\u036B\u0369\x03\x02\x02\x02" +
        "\u036C\u0365\x03\x02\x02\x02\u036D\u036E\x03\x02\x02\x02\u036E\u036C\x03" +
        "\x02\x02\x02\u036E\u036F\x03\x02\x02\x02\u036F+\x03\x02\x02\x02\u0370" +
        "\u0371\x07B\x02\x02\u0371\u0372\x05\u0110\x89\x02\u0372\u0376\x07\x92" +
        "\x02\x02\u0373\u0375\x07\xA7\x02\x02\u0374\u0373\x03\x02\x02\x02\u0375" +
        "\u0378\x03\x02\x02\x02\u0376\u0374\x03\x02\x02\x02\u0376\u0377\x03\x02" +
        "\x02\x02\u0377\u0380\x03\x02\x02\x02\u0378\u0376\x03\x02\x02\x02\u0379" +
        "\u037D\x05:\x1E\x02\u037A\u037C\x07\xA7\x02\x02\u037B\u037A\x03\x02\x02" +
        "\x02\u037C\u037F\x03\x02\x02\x02\u037D\u037B\x03\x02\x02\x02\u037D\u037E" +
        "\x03\x02\x02\x02\u037E\u0381\x03\x02\x02\x02\u037F\u037D\x03\x02\x02\x02" +
        "\u0380\u0379\x03\x02\x02\x02\u0381\u0382";
    bitmarkParser._serializedATNSegment3 = "\x03\x02\x02\x02\u0382\u0380\x03\x02\x02\x02\u0382\u0383\x03\x02\x02\x02" +
        "\u0383-\x03\x02\x02\x02\u0384\u0385\x07C\x02\x02\u0385\u0386\x05\u0110" +
        "\x89\x02\u0386\u038A\x07\x92\x02\x02\u0387\u0389\x07\xA7\x02\x02\u0388" +
        "\u0387\x03\x02\x02\x02\u0389\u038C\x03\x02\x02\x02\u038A\u0388\x03\x02" +
        "\x02\x02\u038A\u038B\x03\x02\x02\x02\u038B\u0394\x03\x02\x02\x02\u038C" +
        "\u038A\x03\x02\x02\x02\u038D\u0391\x05:\x1E\x02\u038E\u0390\x07\xA7\x02" +
        "\x02\u038F\u038E\x03\x02\x02\x02\u0390\u0393\x03\x02\x02\x02\u0391\u038F" +
        "\x03\x02\x02\x02\u0391\u0392\x03\x02\x02\x02\u0392\u0395\x03\x02\x02\x02" +
        "\u0393\u0391\x03\x02\x02\x02\u0394\u038D\x03\x02\x02\x02\u0395\u0396\x03" +
        "\x02\x02\x02\u0396\u0394\x03\x02\x02\x02\u0396\u0397\x03\x02\x02\x02\u0397" +
        "/\x03\x02\x02\x02\u0398\u0399\x07D\x02\x02\u0399\u039A\x05\u0110\x89\x02" +
        "\u039A\u039E\x07\x92\x02\x02\u039B\u039D\x07\xA7\x02\x02\u039C\u039B\x03" +
        "\x02\x02\x02\u039D\u03A0\x03\x02\x02\x02\u039E\u039C\x03\x02\x02\x02\u039E" +
        "\u039F\x03\x02\x02\x02\u039F\u03A8\x03\x02\x02\x02\u03A0\u039E\x03\x02" +
        "\x02\x02\u03A1\u03A5\x05:\x1E\x02\u03A2\u03A4\x07\xA7\x02\x02\u03A3\u03A2" +
        "\x03\x02\x02\x02\u03A4\u03A7\x03\x02\x02\x02\u03A5\u03A3\x03\x02\x02\x02" +
        "\u03A5\u03A6\x03\x02\x02\x02\u03A6\u03A9\x03\x02\x02\x02\u03A7\u03A5\x03" +
        "\x02\x02\x02\u03A8\u03A1\x03\x02\x02\x02\u03A9\u03AA\x03\x02\x02\x02\u03AA" +
        "\u03A8\x03\x02\x02\x02\u03AA\u03AB\x03\x02\x02\x02\u03AB1\x03\x02\x02" +
        "\x02\u03AC\u03AD\x07E\x02\x02\u03AD\u03AE\x05\u0110\x89\x02\u03AE\u03B2" +
        "\x07\x92\x02\x02\u03AF\u03B1\x07\xA7\x02\x02\u03B0\u03AF\x03\x02\x02\x02" +
        "\u03B1\u03B4\x03\x02\x02\x02\u03B2\u03B0\x03\x02\x02\x02\u03B2\u03B3\x03" +
        "\x02\x02\x02\u03B3\u03BC\x03\x02\x02\x02\u03B4\u03B2\x03\x02\x02\x02\u03B5" +
        "\u03B9\x05:\x1E\x02\u03B6\u03B8\x07\xA7\x02\x02\u03B7\u03B6\x03\x02\x02" +
        "\x02\u03B8\u03BB\x03\x02\x02\x02\u03B9\u03B7\x03\x02\x02\x02\u03B9\u03BA" +
        "\x03\x02\x02\x02\u03BA\u03BD\x03\x02\x02\x02\u03BB\u03B9\x03\x02\x02\x02" +
        "\u03BC\u03B5\x03\x02\x02\x02\u03BD\u03BE\x03\x02\x02\x02\u03BE\u03BC\x03" +
        "\x02\x02\x02\u03BE\u03BF\x03\x02\x02\x02\u03BF3\x03\x02\x02\x02\u03C0" +
        "\u03C1\x07F\x02\x02\u03C1\u03C2\x05\u0110\x89\x02\u03C2\u03C6\x07\x92" +
        "\x02\x02\u03C3\u03C5\x07\xA7\x02\x02\u03C4\u03C3\x03\x02\x02\x02\u03C5" +
        "\u03C8\x03\x02\x02\x02\u03C6\u03C4\x03\x02\x02\x02\u03C6\u03C7\x03\x02" +
        "\x02\x02\u03C7\u03D0\x03\x02\x02\x02\u03C8\u03C6\x03\x02\x02\x02\u03C9" +
        "\u03CD\x05:\x1E\x02\u03CA\u03CC\x07\xA7\x02\x02\u03CB\u03CA\x03\x02\x02" +
        "\x02\u03CC\u03CF\x03\x02\x02\x02\u03CD\u03CB\x03\x02\x02\x02\u03CD\u03CE" +
        "\x03\x02\x02\x02\u03CE\u03D1\x03\x02\x02\x02\u03CF\u03CD\x03\x02\x02\x02" +
        "\u03D0\u03C9\x03\x02\x02\x02\u03D1\u03D2\x03\x02\x02\x02\u03D2\u03D0\x03" +
        "\x02\x02\x02\u03D2\u03D3\x03\x02\x02\x02\u03D35\x03\x02\x02\x02\u03D4" +
        "\u03D5\x07G\x02\x02\u03D5\u03D6\x05\u0110\x89\x02\u03D6\u03DA\x07\x92" +
        "\x02\x02\u03D7\u03D9\x07\xA7\x02\x02\u03D8\u03D7\x03\x02\x02\x02\u03D9" +
        "\u03DC\x03\x02\x02\x02\u03DA\u03D8\x03\x02\x02\x02\u03DA\u03DB\x03\x02" +
        "\x02\x02\u03DB\u03E4\x03\x02\x02\x02\u03DC\u03DA\x03\x02\x02\x02\u03DD" +
        "\u03E1\x05:\x1E\x02\u03DE\u03E0\x07\xA7\x02\x02\u03DF\u03DE\x03\x02\x02" +
        "\x02\u03E0\u03E3\x03\x02\x02\x02\u03E1\u03DF\x03\x02\x02\x02\u03E1\u03E2" +
        "\x03\x02\x02\x02\u03E2\u03E5\x03\x02\x02\x02\u03E3\u03E1\x03\x02\x02\x02" +
        "\u03E4\u03DD\x03\x02\x02\x02\u03E5\u03E6\x03\x02\x02\x02\u03E6\u03E4\x03" +
        "\x02\x02\x02\u03E6\u03E7\x03\x02\x02\x02\u03E77\x03\x02\x02\x02\u03E8" +
        "\u03E9\x07H\x02\x02\u03E9\u03EA\x05\u0110\x89\x02\u03EA\u03EE\x07\x92" +
        "\x02\x02\u03EB\u03ED\x07\xA7\x02\x02\u03EC\u03EB\x03\x02\x02\x02\u03ED" +
        "\u03F0\x03\x02\x02\x02\u03EE\u03EC\x03\x02\x02\x02\u03EE\u03EF\x03\x02" +
        "\x02\x02\u03EF\u03F8\x03\x02\x02\x02\u03F0\u03EE\x03\x02\x02\x02\u03F1" +
        "\u03F5\x05:\x1E\x02\u03F2\u03F4\x07\xA7\x02\x02\u03F3\u03F2\x03\x02\x02" +
        "\x02\u03F4\u03F7\x03\x02\x02\x02\u03F5\u03F3\x03\x02\x02\x02\u03F5\u03F6" +
        "\x03\x02\x02\x02\u03F6\u03F9\x03\x02\x02\x02\u03F7\u03F5\x03\x02\x02\x02" +
        "\u03F8\u03F1\x03\x02\x02\x02\u03F9\u03FA\x03\x02\x02\x02\u03FA\u03F8\x03" +
        "\x02\x02\x02\u03FA\u03FB\x03\x02\x02\x02\u03FB9\x03\x02\x02\x02\u03FC" +
        "\u041C\x07\u0102\x02\x02\u03FD\u041C\x05\u0186\xC4\x02\u03FE\u041C\x05" +
        "<\x1F\x02\u03FF\u041C\x05\u0164\xB3\x02\u0400\u041C\x05\u0168\xB5\x02" +
        "\u0401\u041C\x05\u0166\xB4\x02\u0402\u041C\x05\u017A\xBE\x02\u0403\u041C" +
        "\x05\u017E\xC0\x02\u0404\u041C\x05J&\x02\u0405\u041C\x05\u015A\xAE\x02" +
        "\u0406\u041C\x05\u0170\xB9\x02\u0407\u041C\x05\u016C\xB7\x02\u0408\u041C" +
        "\x05\u016E\xB8\x02\u0409\u041C\x05\u0184\xC3\x02\u040A\u041C\x05\u0160" +
        "\xB1\x02\u040B\u041C\x05\u0172\xBA\x02\u040C\u041C\x05\u0174\xBB\x02\u040D" +
        "\u041C\x05\u0176\xBC\x02\u040E\u041C\x05\u0178\xBD\x02\u040F\u041C\x05" +
        "\u0142\xA2\x02\u0410\u041C\x05\u014C\xA7\x02\u0411\u041C\x05\u013E\xA0" +
        "\x02\u0412\u041C\x05\u0132\x9A\x02\u0413\u041C\x05\u0134\x9B\x02\u0414" +
        "\u041C\x05\u0138\x9D\x02\u0415\u041C\x05\u0136\x9C\x02\u0416\u041C\x05" +
        "\u013A\x9E\x02\u0417\u041C\x05\u015E\xB0\x02\u0418\u041C\x05\u0180\xC1" +
        "\x02\u0419\u041C\x05\u0162\xB2\x02\u041A\u041C\x05\u0190\xC9\x02\u041B" +
        "\u03FC\x03\x02\x02\x02\u041B\u03FD\x03\x02\x02\x02\u041B\u03FE\x03\x02" +
        "\x02\x02\u041B\u03FF\x03\x02\x02\x02\u041B\u0400\x03\x02\x02\x02\u041B" +
        "\u0401\x03\x02\x02\x02\u041B\u0402\x03\x02\x02\x02\u041B\u0403\x03\x02" +
        "\x02\x02\u041B\u0404\x03\x02\x02\x02\u041B\u0405\x03\x02\x02\x02\u041B" +
        "\u0406\x03\x02\x02\x02\u041B\u0407\x03\x02\x02\x02\u041B\u0408\x03\x02" +
        "\x02\x02\u041B\u0409\x03\x02\x02\x02\u041B\u040A\x03\x02\x02\x02\u041B" +
        "\u040B\x03\x02\x02\x02\u041B\u040C\x03\x02\x02\x02\u041B\u040D\x03\x02" +
        "\x02\x02\u041B\u040E\x03\x02\x02\x02\u041B\u040F\x03\x02\x02\x02\u041B" +
        "\u0410\x03\x02\x02\x02\u041B\u0411\x03\x02\x02\x02\u041B\u0412\x03\x02" +
        "\x02\x02\u041B\u0413\x03\x02\x02\x02\u041B\u0414\x03\x02\x02\x02\u041B" +
        "\u0415\x03\x02\x02\x02\u041B\u0416\x03\x02\x02\x02\u041B\u0417\x03\x02" +
        "\x02\x02\u041B\u0418\x03\x02\x02\x02\u041B\u0419\x03\x02\x02\x02\u041B" +
        "\u041A\x03\x02\x02\x02\u041C;\x03\x02\x02\x02\u041D\u0425\x05> \x02\u041E" +
        "\u0424\x05> \x02\u041F\u0424\x05\u016C\xB7\x02\u0420\u0424\x05\u016E\xB8" +
        "\x02\u0421\u0424\x05\u015A\xAE\x02\u0422\u0424\x05\u0160\xB1\x02\u0423" +
        "\u041E\x03\x02\x02\x02\u0423\u041F\x03\x02\x02\x02\u0423\u0420\x03\x02" +
        "\x02\x02\u0423\u0421\x03\x02\x02\x02\u0423\u0422\x03\x02\x02\x02\u0424" +
        "\u0427\x03\x02\x02\x02\u0425\u0423\x03\x02\x02\x02\u0425\u0426\x03\x02" +
        "\x02\x02\u0426=\x03\x02\x02\x02\u0427\u0425\x03\x02\x02\x02\u0428\u042C" +
        "\x07\x88\x02\x02\u0429\u042D\x07\xA5\x02\x02\u042A\u042D\x07\xA6\x02\x02" +
        "\u042B\u042D\x03\x02\x02\x02\u042C\u0429\x03\x02\x02\x02\u042C\u042A\x03" +
        "\x02\x02\x02\u042C\u042B\x03\x02\x02\x02\u042D\u0431\x03\x02\x02\x02\u042E" +
        "\u0430\x05\u0184\xC3\x02\u042F\u042E\x03\x02\x02\x02\u0430\u0433\x03\x02" +
        "\x02\x02\u0431\u042F\x03\x02\x02\x02\u0431\u0432\x03\x02\x02\x02\u0432" +
        "\u0434\x03\x02\x02\x02\u0433\u0431\x03\x02\x02\x02\u0434\u0435\x05\u018A" +
        "\xC6\x02\u0435?\x03\x02\x02\x02\u0436\u0438\x05\u015A\xAE\x02\u0437\u0436" +
        "\x03\x02\x02\x02\u0437\u0438\x03\x02\x02\x02\u0438\u0439\x03\x02\x02\x02" +
        "\u0439\u043B\x07\x8C\x02\x02\u043A\u043C\x05\u0184\xC3\x02\u043B\u043A" +
        "\x03\x02\x02\x02\u043C\u043D\x03\x02\x02\x02\u043D\u043B\x03\x02\x02\x02" +
        "\u043D\u043E\x03\x02\x02\x02\u043E\u043F\x03\x02\x02\x02\u043F\u0440\x07" +
        "\x92\x02\x02\u0440A\x03\x02\x02\x02\u0441\u0443\x05\u015A\xAE\x02\u0442" +
        "\u0441\x03\x02\x02\x02\u0442\u0443\x03\x02\x02\x02\u0443\u0444\x03\x02" +
        "\x02\x02\u0444\u0446\x07\x8D\x02\x02\u0445\u0447\x05\u0184\xC3\x02\u0446" +
        "\u0445\x03\x02\x02\x02\u0447\u0448\x03\x02\x02\x02\u0448\u0446\x03\x02" +
        "\x02\x02\u0448\u0449\x03\x02\x02\x02\u0449\u044A\x03\x02\x02\x02\u044A" +
        "\u044B\x07\x92\x02\x02\u044BC\x03\x02\x02\x02\u044C\u044E\x05\u015A\xAE" +
        "\x02\u044D\u044C\x03\x02\x02\x02\u044D\u044E\x03\x02\x02\x02\u044E\u044F" +
        "\x03\x02\x02\x02\u044F\u0451\x07\x8F\x02\x02\u0450\u0452\x05\u0184\xC3" +
        "\x02\u0451\u0450\x03\x02\x02\x02\u0452\u0453\x03\x02\x02\x02\u0453\u0451" +
        "\x03\x02\x02\x02\u0453\u0454\x03\x02\x02\x02\u0454\u0455\x03\x02\x02\x02" +
        "\u0455\u0456\x07\x92\x02\x02\u0456E\x03\x02\x02\x02\u0457\u0458\x07\x17" +
        "\x02\x02\u0458\u0459\x05\u0110\x89\x02\u0459\u045A\x07\x92\x02\x02\u045A" +
        "\u0464\x07\xA7\x02\x02\u045B\u045F\x05:\x1E\x02\u045C\u045E\x07\xA7\x02" +
        "\x02\u045D\u045C\x03\x02\x02\x02\u045E\u0461\x03\x02\x02\x02\u045F\u045D" +
        "\x03\x02\x02\x02\u045F\u0460\x03\x02\x02\x02\u0460\u0463\x03\x02\x02\x02" +
        "\u0461\u045F\x03\x02\x02\x02\u0462\u045B\x03\x02\x02\x02\u0463\u0466\x03" +
        "\x02\x02\x02\u0464\u0462\x03\x02\x02\x02\u0464\u0465\x03\x02\x02\x02\u0465" +
        "\u0470\x03\x02\x02\x02\u0466\u0464\x03\x02\x02\x02\u0467\u0469\x07\xA7" +
        "\x02\x02\u0468\u0467\x03\x02\x02\x02\u0469\u046C\x03\x02\x02\x02\u046A" +
        "\u0468\x03\x02\x02\x02\u046A\u046B\x03\x02\x02\x02\u046B\u046D\x03\x02" +
        "\x02\x02\u046C\u046A\x03\x02\x02\x02\u046D\u046F\x05H%\x02\u046E\u046A" +
        "\x03\x02\x02\x02\u046F\u0472\x03\x02\x02\x02\u0470\u046E\x03\x02\x02\x02" +
        "\u0470\u0471\x03\x02\x02\x02\u0471\u0476\x03\x02\x02\x02\u0472\u0470\x03" +
        "\x02\x02\x02\u0473\u0475\x07\xA7\x02\x02\u0474\u0473\x03\x02\x02\x02\u0475" +
        "\u0478\x03\x02\x02\x02\u0476\u0474\x03\x02\x02\x02\u0476\u0477\x03\x02" +
        "\x02\x02\u0477\u0486\x03\x02\x02\x02\u0478\u0476\x03\x02\x02\x02\u0479" +
        "\u0483\x05L\'\x02\u047A\u047C\x07\xA7\x02\x02\u047B\u047A\x03\x02\x02" +
        "\x02\u047C\u047F\x03\x02\x02\x02\u047D\u047B\x03\x02\x02\x02\u047D\u047E" +
        "\x03\x02\x02\x02\u047E\u0480\x03\x02\x02\x02\u047F\u047D\x03\x02\x02\x02" +
        "\u0480\u0482\x05L\'\x02\u0481\u047D\x03\x02\x02\x02\u0482\u0485\x03\x02" +
        "\x02\x02\u0483\u0481\x03\x02\x02\x02\u0483\u0484\x03\x02\x02\x02\u0484" +
        "\u0487\x03\x02\x02\x02\u0485\u0483\x03\x02\x02\x02\u0486\u0479\x03\x02" +
        "\x02\x02\u0486\u0487\x03\x02\x02\x02\u0487G\x03\x02\x02\x02\u0488\u0490" +
        "\x07\xB2\x02\x02\u0489\u048B\x07\xA7\x02\x02\u048A\u0489\x03\x02\x02\x02" +
        "\u048A\u048B\x03\x02\x02\x02\u048B\u048C\x03\x02\x02\x02\u048C\u048E\x05" +
        "\u0182\xC2\x02\u048D\u048F\x07\xA7\x02\x02\u048E\u048D\x03\x02\x02\x02" +
        "\u048E\u048F\x03\x02\x02\x02\u048F\u0491\x03\x02\x02\x02\u0490\u048A\x03" +
        "\x02\x02\x02\u0490\u0491\x03\x02\x02\x02\u0491\u0492\x03\x02\x02\x02\u0492" +
        "\u0493\x07\x92\x02\x02\u0493I\x03\x02\x02\x02\u0494\u0495\t\x05\x02\x02" +
        "\u0495K\x03\x02\x02\x02\u0496\u0497\x05:\x1E\x02\u0497M\x03\x02\x02\x02" +
        "\u0498\u0499\x07\x19\x02\x02\u0499\u049A\x05\u0110\x89\x02\u049A\u049B" +
        "\x07\x92\x02\x02\u049B\u04A5\x07\xA7\x02\x02\u049C\u04A0\x05:\x1E\x02" +
        "\u049D\u049F\x07\xA7\x02\x02\u049E\u049D\x03\x02\x02\x02\u049F\u04A2\x03" +
        "\x02\x02\x02\u04A0\u049E\x03\x02\x02\x02\u04A0\u04A1\x03\x02\x02\x02\u04A1" +
        "\u04A4\x03\x02\x02\x02\u04A2\u04A0\x03\x02\x02\x02\u04A3\u049C\x03\x02" +
        "\x02\x02\u04A4\u04A7\x03\x02\x02\x02\u04A5\u04A3\x03\x02\x02\x02\u04A5" +
        "\u04A6\x03\x02\x02\x02\u04A6\u04AB\x03\x02\x02\x02\u04A7\u04A5\x03\x02" +
        "\x02\x02\u04A8\u04AA\x05P)\x02\u04A9\u04A8\x03\x02\x02\x02\u04AA\u04AD" +
        "\x03\x02\x02\x02\u04AB\u04A9\x03\x02\x02\x02\u04AB\u04AC\x03\x02\x02\x02" +
        "\u04AC\u04B1\x03\x02\x02\x02\u04AD\u04AB\x03\x02\x02\x02\u04AE\u04B0\x07" +
        "\xA7\x02\x02\u04AF\u04AE\x03\x02\x02\x02\u04B0\u04B3\x03\x02\x02\x02\u04B1" +
        "\u04AF\x03\x02\x02\x02\u04B1\u04B2\x03\x02\x02\x02\u04B2\u04C1\x03\x02" +
        "\x02\x02\u04B3\u04B1\x03\x02\x02\x02\u04B4\u04BE\x05L\'\x02\u04B5\u04B7" +
        "\x07\xA7\x02\x02\u04B6\u04B5\x03\x02\x02\x02\u04B7\u04BA\x03\x02\x02\x02" +
        "\u04B8\u04B6\x03\x02\x02\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04BB\x03" +
        "\x02\x02\x02\u04BA\u04B8\x03\x02\x02\x02\u04BB\u04BD\x05L\'\x02\u04BC" +
        "\u04B8\x03\x02\x02\x02\u04BD\u04C0\x03\x02\x02\x02\u04BE\u04BC\x03\x02" +
        "\x02\x02\u04BE\u04BF\x03\x02\x02\x02\u04BF\u04C2\x03\x02\x02\x02\u04C0" +
        "\u04BE\x03\x02\x02\x02\u04C1\u04B4\x03\x02\x02\x02\u04C1\u04C2\x03\x02" +
        "\x02\x02\u04C2O\x03\x02\x02\x02\u04C3\u04C7\x07\x8D\x02\x02\u04C4\u04C6" +
        "\v\x02\x02\x02\u04C5\u04C4\x03\x02\x02\x02\u04C6\u04C9\x03\x02\x02\x02" +
        "\u04C7\u04C8\x03\x02\x02\x02\u04C7\u04C5\x03\x02\x02\x02\u04C8\u04CA\x03" +
        "\x02\x02\x02\u04C9\u04C7\x03\x02\x02\x02\u04CA\u04CB\x07\x92\x02\x02\u04CB" +
        "\u04D6\x07\xA7\x02\x02\u04CC\u04D0\x07\x8C\x02\x02\u04CD\u04CF\v\x02\x02" +
        "\x02\u04CE\u04CD\x03\x02\x02\x02\u04CF\u04D2\x03\x02\x02\x02\u04D0\u04D1" +
        "\x03\x02\x02\x02\u04D0\u04CE\x03\x02\x02\x02\u04D1\u04D3\x03\x02\x02\x02" +
        "\u04D2\u04D0\x03\x02\x02\x02\u04D3\u04D4\x07\x92\x02\x02\u04D4\u04D6\x07" +
        "\xA7\x02\x02\u04D5\u04C3\x03\x02\x02\x02\u04D5\u04CC\x03\x02\x02\x02\u04D6" +
        "Q\x03\x02\x02\x02\u04D7\u04D8\x07\x1A\x02\x02\u04D8\u04D9\x05\u0110\x89" +
        "\x02\u04D9\u04DA\x07\x92\x02\x02\u04DA\u04E7\x07\xA7\x02\x02\u04DB\u04DE" +
        "\x05:\x1E\x02\u04DC\u04DE\x05T+\x02\u04DD\u04DB\x03\x02\x02\x02\u04DD" +
        "\u04DC\x03\x02\x02\x02\u04DE\u04E2\x03\x02\x02\x02\u04DF\u04E1\x07\xA7" +
        "\x02\x02\u04E0\u04DF\x03\x02\x02\x02\u04E1\u04E4\x03\x02\x02\x02\u04E2" +
        "\u04E0\x03\x02\x02\x02\u04E2\u04E3\x03\x02\x02\x02\u04E3\u04E6\x03\x02" +
        "\x02\x02\u04E4\u04E2\x03\x02\x02\x02\u04E5\u04DD\x03\x02\x02\x02\u04E6" +
        "\u04E9\x03\x02\x02\x02\u04E7\u04E5\x03\x02\x02\x02\u04E7\u04E8\x03\x02" +
        "\x02\x02\u04E8\u04ED\x03\x02\x02\x02\u04E9\u04E7\x03\x02\x02\x02\u04EA" +
        "\u04EC\x07\xA7\x02\x02\u04EB\u04EA\x03\x02\x02\x02\u04EC\u04EF\x03\x02" +
        "\x02\x02\u04ED\u04EB\x03\x02\x02\x02\u04ED\u04EE\x03\x02\x02\x02\u04EE" +
        "\u04FD\x03\x02\x02\x02\u04EF\u04ED\x03\x02\x02\x02\u04F0\u04FA\x05L\'" +
        "\x02\u04F1\u04F3\x07\xA7\x02\x02\u04F2\u04F1\x03\x02\x02\x02\u04F3\u04F6" +
        "\x03\x02\x02\x02\u04F4\u04F2\x03\x02\x02\x02\u04F4\u04F5\x03\x02\x02\x02" +
        "\u04F5\u04F7\x03\x02\x02\x02\u04F6\u04F4\x03\x02\x02\x02\u04F7\u04F9\x05" +
        "L\'\x02\u04F8\u04F4\x03\x02\x02\x02\u04F9\u04FC\x03\x02\x02\x02\u04FA" +
        "\u04F8\x03\x02\x02\x02\u04FA\u04FB\x03\x02\x02\x02\u04FB\u04FE\x03\x02" +
        "\x02\x02\u04FC\u04FA\x03\x02\x02\x02\u04FD\u04F0\x03\x02\x02\x02\u04FD" +
        "\u04FE\x03\x02\x02\x02\u04FES\x03\x02\x02\x02\u04FF\u0500\x07\x8E\x02" +
        "\x02\u0500\u0501\x05\u0184\xC3\x02\u0501\u0503\x07\x92\x02\x02\u0502\u0504" +
        "\x05V,\x02\u0503\u0502\x03\x02\x02\x02\u0503\u0504\x03\x02\x02\x02\u0504" +
        "\u050A\x03\x02\x02\x02\u0505\u0509\x05\u016E\xB8\x02\u0506\u0509\x05\u015A" +
        "\xAE\x02\u0507\u0509\x05\u016C\xB7\x02\u0508\u0505\x03\x02\x02\x02\u0508" +
        "\u0506\x03\x02\x02\x02\u0508\u0507\x03\x02\x02\x02\u0509\u050C\x03\x02" +
        "\x02\x02\u050A\u0508\x03\x02\x02\x02\u050A\u050B\x03\x02\x02\x02\u050B" +
        "U\x03\x02\x02\x02\u050C\u050A\x03\x02\x02\x02\u050D\u0511\x07\xBB\x02" +
        "\x02\u050E\u0510\x07\x04\x02\x02\u050F\u050E\x03\x02\x02\x02\u0510\u0513" +
        "\x03\x02\x02\x02\u0511\u050F\x03\x02\x02\x02\u0511\u0512\x03\x02\x02\x02" +
        "\u0512\u0514\x03\x02\x02\x02\u0513\u0511\x03\x02\x02\x02\u0514\u0518\x07" +
        "\xA6\x02\x02\u0515\u0517\x07\x04\x02\x02\u0516\u0515\x03\x02\x02\x02\u0517" +
        "\u051A\x03\x02\x02\x02\u0518\u0516\x03\x02\x02\x02\u0518\u0519\x03\x02" +
        "\x02\x02\u0519\u051B\x03\x02\x02\x02\u051A\u0518\x03\x02\x02\x02\u051B" +
        "\u051C\x07\x92\x02\x02\u051CW\x03\x02\x02\x02\u051D\u051F\x07\x1B\x02" +
        "\x02\u051E\u0520\t\x06\x02\x02\u051F\u051E\x03\x02\x02\x02\u051F\u0520" +
        "\x03\x02\x02\x02\u0520\u0521\x03\x02\x02\x02\u0521\u0522\x07\x92\x02\x02" +
        "\u0522\u052C\x07\xA7\x02\x02\u0523\u0527\x05:\x1E\x02\u0524\u0526\x07" +
        "\xA7\x02\x02\u0525\u0524\x03\x02\x02\x02\u0526\u0529\x03\x02\x02\x02\u0527" +
        "\u0525\x03\x02\x02\x02\u0527\u0528\x03\x02\x02\x02\u0528\u052B\x03\x02" +
        "\x02\x02\u0529\u0527\x03\x02\x02\x02\u052A\u0523\x03\x02\x02\x02\u052B" +
        "\u052E\x03\x02\x02\x02\u052C\u052A\x03\x02\x02\x02\u052C\u052D\x03\x02" +
        "\x02\x02\u052D\u0532\x03\x02\x02\x02\u052E\u052C\x03\x02\x02\x02\u052F" +
        "\u0531\x07\xA7\x02\x02\u0530\u052F\x03\x02\x02\x02\u0531\u0534\x03\x02" +
        "\x02\x02\u0532\u0530\x03\x02\x02\x02\u0532\u0533\x03\x02\x02\x02\u0533" +
        "\u0542\x03\x02\x02\x02\u0534\u0532\x03\x02\x02\x02\u0535\u053F\x05L\'" +
        "\x02\u0536\u0538\x07\xA7\x02\x02\u0537\u0536\x03\x02\x02\x02\u0538\u053B" +
        "\x03\x02\x02\x02\u0539\u0537\x03\x02\x02\x02\u0539\u053A\x03\x02\x02\x02" +
        "\u053A\u053C\x03\x02\x02\x02\u053B\u0539\x03\x02\x02\x02\u053C\u053E\x05" +
        "L\'\x02\u053D\u0539\x03\x02\x02\x02\u053E\u0541\x03\x02\x02\x02\u053F" +
        "\u053D\x03\x02\x02\x02\u053F\u0540\x03\x02\x02\x02\u0540\u0543\x03\x02" +
        "\x02\x02\u0541\u053F\x03\x02\x02\x02\u0542\u0535\x03\x02\x02\x02\u0542" +
        "\u0543\x03\x02\x02\x02\u0543Y\x03\x02\x02\x02\u0544\u0545\x07\x12\x02" +
        "\x02\u0545\u0546\x05\u0110\x89\x02\u0546\u0547\x07\x92\x02\x02\u0547\u0551" +
        "\x07\xA7\x02\x02\u0548\u054C\x05:\x1E\x02\u0549\u054B\x07\xA7\x02\x02" +
        "\u054A\u0549\x03\x02\x02\x02\u054B\u054E\x03\x02\x02\x02\u054C\u054A\x03" +
        "\x02\x02\x02\u054C\u054D\x03\x02\x02\x02\u054D\u0550\x03\x02\x02\x02\u054E" +
        "\u054C\x03\x02\x02\x02\u054F\u0548\x03\x02\x02\x02\u0550\u0553\x03\x02" +
        "\x02\x02\u0551\u054F\x03\x02\x02\x02\u0551\u0552\x03\x02\x02\x02\u0552" +
        "\u0557\x03\x02\x02\x02\u0553\u0551\x03\x02\x02\x02\u0554\u0556\x07\xA7" +
        "\x02\x02\u0555\u0554\x03\x02\x02\x02\u0556\u0559\x03\x02\x02\x02\u0557" +
        "\u0555\x03\x02\x02\x02\u0557\u0558\x03\x02\x02\x02\u0558\u0567\x03\x02" +
        "\x02\x02\u0559\u0557\x03\x02\x02\x02\u055A\u0564\x05L\'\x02\u055B\u055D" +
        "\x07\xA7\x02\x02\u055C\u055B\x03\x02\x02\x02\u055D\u0560\x03\x02\x02\x02" +
        "\u055E\u055C\x03\x02\x02\x02\u055E\u055F\x03\x02\x02\x02\u055F\u0561\x03" +
        "\x02\x02\x02\u0560\u055E\x03\x02\x02\x02\u0561\u0563\x05L\'\x02\u0562" +
        "\u055E\x03\x02\x02\x02\u0563\u0566\x03\x02\x02\x02\u0564\u0562\x03\x02" +
        "\x02\x02\u0564\u0565\x03\x02\x02\x02\u0565\u0568\x03\x02\x02\x02\u0566" +
        "\u0564\x03\x02\x02\x02\u0567\u055A\x03\x02\x02\x02\u0567\u0568\x03\x02" +
        "\x02\x02\u0568[\x03\x02\x02\x02\u0569\u056A\x07\x1C\x02\x02\u056A\u056B" +
        "\x05\u0110\x89\x02\u056B\u056C\x07\x92\x02\x02\u056C\u0576\x07\xA7\x02" +
        "\x02\u056D\u0571\x05:\x1E\x02\u056E\u0570\x07\xA7\x02\x02\u056F\u056E" +
        "\x03\x02\x02\x02\u0570\u0573\x03\x02\x02\x02\u0571\u056F\x03\x02\x02\x02" +
        "\u0571\u0572\x03\x02\x02\x02\u0572\u0575\x03\x02\x02\x02\u0573\u0571\x03" +
        "\x02\x02\x02\u0574\u056D\x03\x02\x02\x02\u0575\u0578\x03\x02\x02\x02\u0576" +
        "\u0574\x03\x02\x02\x02\u0576\u0577\x03\x02\x02\x02\u0577\u057C\x03\x02" +
        "\x02\x02\u0578\u0576\x03\x02\x02\x02\u0579\u057B\x07\xA7\x02\x02\u057A" +
        "\u0579\x03\x02\x02\x02\u057B\u057E\x03\x02\x02\x02\u057C\u057A\x03\x02" +
        "\x02\x02\u057C\u057D\x03\x02\x02\x02\u057D\u058C\x03\x02\x02\x02\u057E" +
        "\u057C\x03\x02\x02\x02\u057F\u0589\x05L\'\x02\u0580\u0582\x07\xA7\x02" +
        "\x02\u0581\u0580\x03\x02\x02\x02\u0582\u0585\x03\x02\x02\x02\u0583\u0581" +
        "\x03\x02\x02\x02\u0583\u0584\x03\x02\x02\x02\u0584\u0586\x03\x02\x02\x02" +
        "\u0585\u0583\x03\x02\x02\x02\u0586\u0588\x05L\'\x02\u0587\u0583\x03\x02" +
        "\x02\x02\u0588\u058B\x03\x02\x02\x02\u0589\u0587\x03\x02\x02\x02\u0589" +
        "\u058A\x03\x02\x02\x02\u058A\u058D\x03\x02\x02\x02\u058B\u0589\x03\x02" +
        "\x02\x02\u058C\u057F\x03\x02\x02\x02\u058C\u058D\x03\x02\x02\x02\u058D" +
        "]\x03\x02\x02\x02\u058E\u058F\x07\x1D\x02\x02\u058F\u0590\x05\u0110\x89" +
        "\x02\u0590\u0591\x07\x92\x02\x02\u0591\u059B\x07\xA7\x02\x02\u0592\u0596" +
        "\x05:\x1E\x02\u0593\u0595\x07\xA7\x02\x02\u0594\u0593\x03\x02\x02\x02" +
        "\u0595\u0598\x03\x02\x02\x02\u0596\u0594\x03\x02\x02\x02\u0596\u0597\x03" +
        "\x02\x02\x02\u0597\u059A\x03\x02\x02\x02\u0598\u0596\x03\x02\x02\x02\u0599" +
        "\u0592\x03\x02\x02\x02\u059A\u059D\x03\x02\x02\x02\u059B\u0599\x03\x02" +
        "\x02\x02\u059B\u059C\x03\x02\x02\x02\u059C\u05A1\x03\x02\x02\x02\u059D" +
        "\u059B\x03\x02\x02\x02\u059E\u05A0\x07\xA7\x02\x02\u059F\u059E\x03\x02" +
        "\x02\x02\u05A0\u05A3\x03\x02\x02\x02\u05A1\u059F\x03\x02\x02\x02\u05A1" +
        "\u05A2\x03\x02\x02\x02\u05A2\u05B1\x03\x02\x02\x02\u05A3\u05A1\x03\x02" +
        "\x02\x02\u05A4\u05AE\x05L\'\x02\u05A5\u05A7\x07\xA7\x02\x02\u05A6\u05A5" +
        "\x03\x02\x02\x02\u05A7\u05AA\x03\x02\x02\x02\u05A8\u05A6\x03\x02\x02\x02" +
        "\u05A8\u05A9\x03\x02\x02\x02\u05A9\u05AB\x03\x02\x02\x02\u05AA\u05A8\x03" +
        "\x02\x02\x02\u05AB\u05AD\x05L\'\x02\u05AC\u05A8\x03\x02\x02\x02\u05AD" +
        "\u05B0\x03\x02\x02\x02\u05AE\u05AC\x03\x02\x02\x02\u05AE\u05AF\x03\x02" +
        "\x02\x02\u05AF\u05B2\x03\x02\x02\x02\u05B0\u05AE\x03\x02\x02\x02\u05B1" +
        "\u05A4\x03\x02\x02\x02\u05B1\u05B2\x03\x02\x02\x02\u05B2_\x03\x02\x02" +
        "\x02\u05B3\u05B4\x07\x1E\x02\x02\u05B4\u05B5\x05\u0110\x89\x02\u05B5\u05B9" +
        "\x07\x92\x02\x02\u05B6\u05B8\x07\xA7\x02\x02\u05B7\u05B6\x03\x02\x02\x02" +
        "\u05B8\u05BB\x03\x02\x02\x02\u05B9\u05B7\x03\x02\x02\x02\u05B9\u05BA\x03" +
        "\x02\x02\x02\u05BA\u05C5\x03\x02\x02\x02\u05BB\u05B9\x03\x02\x02\x02\u05BC" +
        "\u05C0\x05:\x1E\x02\u05BD\u05BF\x07\xA7\x02\x02\u05BE\u05BD\x03\x02\x02" +
        "\x02\u05BF\u05C2\x03\x02\x02\x02\u05C0\u05BE\x03\x02\x02\x02\u05C0\u05C1" +
        "\x03\x02\x02\x02\u05C1\u05C4\x03\x02\x02\x02\u05C2\u05C0\x03\x02\x02\x02" +
        "\u05C3\u05BC\x03\x02\x02\x02\u05C4\u05C7\x03\x02\x02\x02\u05C5\u05C3\x03" +
        "\x02\x02\x02\u05C5\u05C6\x03\x02\x02\x02\u05C6\u05C9\x03\x02\x02\x02\u05C7" +
        "\u05C5\x03\x02\x02\x02\u05C8\u05CA\x05\u0182\xC2\x02\u05C9\u05C8\x03\x02" +
        "\x02\x02\u05C9\u05CA\x03\x02\x02\x02\u05CA\u05CE\x03\x02\x02\x02\u05CB" +
        "\u05CD\x07\xA7\x02\x02\u05CC\u05CB\x03\x02\x02\x02\u05CD\u05D0\x03\x02" +
        "\x02\x02\u05CE\u05CC\x03\x02\x02\x02\u05CE\u05CF\x03\x02\x02\x02\u05CF" +
        "\u05DE\x03\x02\x02\x02\u05D0\u05CE\x03\x02\x02\x02\u05D1\u05DB\x05L\'" +
        "\x02\u05D2\u05D4\x07\xA7\x02\x02\u05D3\u05D2\x03\x02\x02\x02\u05D4\u05D7" +
        "\x03\x02\x02\x02\u05D5\u05D3\x03\x02\x02\x02\u05D5\u05D6\x03\x02\x02\x02" +
        "\u05D6\u05D8\x03\x02\x02\x02\u05D7\u05D5\x03\x02\x02\x02\u05D8\u05DA\x05" +
        "L\'\x02\u05D9\u05D5\x03\x02\x02\x02\u05DA\u05DD\x03\x02\x02\x02\u05DB" +
        "\u05D9\x03\x02\x02\x02\u05DB\u05DC\x03\x02\x02\x02\u05DC\u05DF\x03\x02" +
        "\x02\x02\u05DD\u05DB\x03\x02\x02\x02\u05DE\u05D1\x03\x02\x02\x02\u05DE" +
        "\u05DF\x03\x02\x02\x02\u05DFa\x03\x02\x02\x02\u05E0\u05E1\x07\x1F\x02" +
        "\x02\u05E1\u05E2\x05\u0110\x89\x02\u05E2\u05E4\x07\x92\x02\x02\u05E3\u05E5" +
        "\x07\xA7\x02\x02\u05E4\u05E3\x03\x02\x02\x02\u05E5\u05E6\x03\x02\x02\x02" +
        "\u05E6\u05E4\x03\x02\x02\x02\u05E6\u05E7\x03\x02\x02\x02\u05E7\u05F1\x03" +
        "\x02\x02\x02\u05E8\u05EC\x05:\x1E\x02\u05E9\u05EB\x07\xA7\x02\x02\u05EA" +
        "\u05E9\x03\x02\x02\x02\u05EB\u05EE\x03\x02\x02\x02\u05EC\u05EA\x03\x02" +
        "\x02\x02\u05EC\u05ED\x03\x02\x02\x02\u05ED\u05F0\x03\x02\x02\x02\u05EE" +
        "\u05EC\x03\x02\x02\x02\u05EF\u05E8\x03\x02\x02\x02\u05F0\u05F3\x03\x02" +
        "\x02\x02\u05F1\u05EF\x03\x02\x02\x02\u05F1\u05F2\x03\x02\x02\x02\u05F2" +
        "\u05F5\x03\x02\x02\x02\u05F3\u05F1\x03\x02\x02\x02\u05F4\u05F6\x05\u0182" +
        "\xC2\x02\u05F5\u05F4\x03\x02\x02\x02\u05F5\u05F6\x03\x02\x02\x02\u05F6" +
        "\u05FA\x03\x02\x02\x02\u05F7\u05F9\x07\xA7\x02\x02\u05F8\u05F7\x03\x02" +
        "\x02\x02\u05F9\u05FC\x03\x02\x02\x02\u05FA\u05F8\x03\x02\x02\x02\u05FA" +
        "\u05FB\x03\x02\x02\x02\u05FB\u060A\x03\x02\x02\x02\u05FC\u05FA\x03\x02" +
        "\x02\x02\u05FD\u0607\x05L\'\x02\u05FE\u0600\x07\xA7\x02\x02\u05FF\u05FE" +
        "\x03\x02\x02\x02\u0600\u0603\x03\x02\x02\x02\u0601\u05FF\x03\x02\x02\x02" +
        "\u0601\u0602\x03\x02\x02\x02\u0602\u0604\x03\x02\x02\x02\u0603\u0601\x03" +
        "\x02\x02\x02\u0604\u0606\x05L\'\x02\u0605\u0601\x03\x02\x02\x02\u0606" +
        "\u0609\x03\x02\x02\x02\u0607\u0605\x03\x02\x02\x02\u0607\u0608\x03\x02" +
        "\x02\x02\u0608\u060B\x03\x02\x02\x02\u0609\u0607\x03\x02\x02\x02\u060A" +
        "\u05FD\x03\x02\x02\x02\u060A\u060B\x03\x02\x02\x02\u060Bc\x03\x02\x02" +
        "\x02\u060C\u060D\x07\x15\x02\x02\u060D\u060E\x05\u0110\x89\x02\u060E\u0612" +
        "\x07\x92\x02\x02\u060F\u0611\x07\xA7\x02\x02\u0610\u060F\x03\x02\x02\x02" +
        "\u0611\u0614\x03\x02\x02\x02\u0612\u0610\x03\x02\x02\x02\u0612\u0613\x03" +
        "\x02\x02\x02\u0613\u061C\x03\x02\x02\x02\u0614\u0612\x03\x02\x02\x02\u0615" +
        "\u0619\x05:\x1E\x02\u0616\u0618\x07\xA7\x02\x02\u0617\u0616\x03\x02\x02" +
        "\x02\u0618\u061B\x03\x02\x02\x02\u0619\u0617\x03\x02\x02\x02\u0619\u061A" +
        "\x03\x02\x02\x02\u061A\u061D\x03\x02\x02\x02\u061B\u0619\x03\x02\x02\x02" +
        "\u061C\u0615\x03\x02\x02\x02\u061D\u061E\x03\x02\x02\x02\u061E\u061C\x03" +
        "\x02\x02\x02\u061E\u061F\x03\x02\x02\x02\u061Fe\x03\x02\x02\x02\u0620" +
        "\u0621\x07\x0F\x02\x02\u0621\u0622\x05\u0110\x89\x02\u0622\u0626\x07\x92" +
        "\x02\x02\u0623\u0625\x07\xA7\x02\x02\u0624\u0623\x03\x02\x02\x02\u0625" +
        "\u0628\x03\x02\x02\x02\u0626\u0624\x03\x02\x02\x02\u0626\u0627\x03\x02" +
        "\x02\x02\u0627\u0630\x03\x02\x02\x02\u0628\u0626\x03\x02\x02\x02\u0629" +
        "\u062D\x05:\x1E\x02\u062A\u062C\x07\xA7\x02\x02\u062B\u062A\x03\x02\x02" +
        "\x02\u062C\u062F\x03\x02\x02\x02\u062D\u062B\x03\x02\x02\x02\u062D\u062E" +
        "\x03\x02\x02\x02\u062E\u0631\x03\x02\x02\x02\u062F\u062D\x03\x02\x02\x02" +
        "\u0630\u0629\x03\x02\x02\x02\u0631\u0632\x03\x02\x02\x02\u0632\u0630\x03" +
        "\x02\x02\x02\u0632\u0633\x03\x02";
    bitmarkParser._serializedATNSegment4 = "\x02\x02\u0633g\x03\x02\x02\x02\u0634\u0635\x07\x10\x02\x02\u0635\u0636" +
        "\x05\u0110\x89\x02\u0636\u063A\x07\x92\x02\x02\u0637\u0639\x07\xA7\x02" +
        "\x02\u0638\u0637\x03\x02\x02\x02\u0639\u063C\x03\x02\x02\x02\u063A\u0638" +
        "\x03\x02\x02\x02\u063A\u063B\x03\x02\x02\x02\u063B\u0644\x03\x02\x02\x02" +
        "\u063C\u063A\x03\x02\x02\x02\u063D\u0641\x05:\x1E\x02\u063E\u0640\x07" +
        "\xA7\x02\x02\u063F\u063E\x03\x02\x02\x02\u0640\u0643\x03\x02\x02\x02\u0641" +
        "\u063F\x03\x02\x02\x02\u0641\u0642\x03\x02\x02\x02\u0642\u0645\x03\x02" +
        "\x02\x02\u0643\u0641\x03\x02\x02\x02\u0644\u063D\x03\x02\x02\x02\u0645" +
        "\u0646\x03\x02\x02\x02\u0646\u0644\x03\x02\x02\x02\u0646\u0647\x03\x02" +
        "\x02\x02\u0647i\x03\x02\x02\x02\u0648\u0649\x07\x11\x02\x02\u0649\u064A" +
        "\x05\u0110\x89\x02\u064A\u064E\x07\x92\x02\x02\u064B\u064D\x07\xA7\x02" +
        "\x02\u064C\u064B\x03\x02\x02\x02\u064D\u0650\x03\x02\x02\x02\u064E\u064C" +
        "\x03\x02\x02\x02\u064E\u064F\x03\x02\x02\x02\u064F\u0658\x03\x02\x02\x02" +
        "\u0650\u064E\x03\x02\x02\x02\u0651\u0655\x05:\x1E\x02\u0652\u0654\x07" +
        "\xA7\x02\x02\u0653\u0652\x03\x02\x02\x02\u0654\u0657\x03\x02\x02\x02\u0655" +
        "\u0653\x03\x02\x02\x02\u0655\u0656\x03\x02\x02\x02\u0656\u0659\x03\x02" +
        "\x02\x02\u0657\u0655\x03\x02\x02\x02\u0658\u0651\x03\x02\x02\x02\u0659" +
        "\u065A\x03\x02\x02\x02\u065A\u0658\x03\x02\x02\x02\u065A\u065B\x03\x02" +
        "\x02\x02\u065Bk\x03\x02\x02\x02\u065C\u065D\x076\x02\x02\u065D\u065E\x05" +
        "\u0110\x89\x02\u065E\u0662\x07\x92\x02\x02\u065F\u0661\x07\xA7\x02\x02" +
        "\u0660\u065F\x03\x02\x02\x02\u0661\u0664\x03\x02\x02\x02\u0662\u0660\x03" +
        "\x02\x02\x02\u0662\u0663\x03\x02\x02\x02\u0663\u066C\x03\x02\x02\x02\u0664" +
        "\u0662\x03\x02\x02\x02\u0665\u0669\x05:\x1E\x02\u0666\u0668\x07\xA7\x02" +
        "\x02\u0667\u0666\x03\x02\x02\x02\u0668\u066B\x03\x02\x02\x02\u0669\u0667" +
        "\x03\x02\x02\x02\u0669\u066A\x03\x02\x02\x02\u066A\u066D\x03\x02\x02\x02" +
        "\u066B\u0669\x03\x02\x02\x02\u066C\u0665\x03\x02\x02\x02\u066D\u066E\x03" +
        "\x02\x02\x02\u066E\u066C\x03\x02\x02\x02\u066E\u066F\x03\x02\x02\x02\u066F" +
        "m\x03\x02\x02\x02\u0670\u0671\x077\x02\x02\u0671\u0672\x05\u0110\x89\x02" +
        "\u0672\u0676\x07\x92\x02\x02\u0673\u0675\x07\xA7\x02\x02\u0674\u0673\x03" +
        "\x02\x02\x02\u0675\u0678\x03\x02\x02\x02\u0676\u0674\x03\x02\x02\x02\u0676" +
        "\u0677\x03\x02\x02\x02\u0677\u0680\x03\x02\x02\x02\u0678\u0676\x03\x02" +
        "\x02\x02\u0679\u067D\x05:\x1E\x02\u067A\u067C\x07\xA7\x02\x02\u067B\u067A" +
        "\x03\x02\x02\x02\u067C\u067F\x03\x02\x02\x02\u067D\u067B\x03\x02\x02\x02" +
        "\u067D\u067E\x03\x02\x02\x02\u067E\u0681\x03\x02\x02\x02\u067F\u067D\x03" +
        "\x02\x02\x02\u0680\u0679\x03\x02\x02\x02\u0681\u0682\x03\x02\x02\x02\u0682" +
        "\u0680\x03\x02\x02\x02\u0682\u0683\x03\x02\x02\x02\u0683o\x03\x02\x02" +
        "\x02\u0684\u0685\x078\x02\x02\u0685\u0686\x05\u0110\x89\x02\u0686\u068A" +
        "\x07\x92\x02\x02\u0687\u0689\x07\xA7\x02\x02\u0688\u0687\x03\x02\x02\x02" +
        "\u0689\u068C\x03\x02\x02\x02\u068A\u0688\x03\x02\x02\x02\u068A\u068B\x03" +
        "\x02\x02\x02\u068B\u0694\x03\x02\x02\x02\u068C\u068A\x03\x02\x02\x02\u068D" +
        "\u0691\x05:\x1E\x02\u068E\u0690\x07\xA7\x02\x02\u068F\u068E\x03\x02\x02" +
        "\x02\u0690\u0693\x03\x02\x02\x02\u0691\u068F\x03\x02\x02\x02\u0691\u0692" +
        "\x03\x02\x02\x02\u0692\u0695\x03\x02\x02\x02\u0693\u0691\x03\x02\x02\x02" +
        "\u0694\u068D\x03\x02\x02\x02\u0695\u0696\x03\x02\x02\x02\u0696\u0694\x03" +
        "\x02\x02\x02\u0696\u0697\x03\x02\x02\x02\u0697q\x03\x02\x02\x02\u0698" +
        "\u0699\x07\x16\x02\x02\u0699\u069A\x05\u0110\x89\x02\u069A\u069E\x07\x92" +
        "\x02\x02\u069B\u069D\x07\xA7\x02\x02\u069C\u069B\x03\x02\x02\x02\u069D" +
        "\u06A0\x03\x02\x02\x02\u069E\u069C\x03\x02\x02\x02\u069E\u069F\x03\x02" +
        "\x02\x02\u069F\u06A8\x03\x02\x02\x02\u06A0\u069E\x03\x02\x02\x02\u06A1" +
        "\u06A5\x05:\x1E\x02\u06A2\u06A4\x07\xA7\x02\x02\u06A3\u06A2\x03\x02\x02" +
        "\x02\u06A4\u06A7\x03\x02\x02\x02\u06A5\u06A3\x03\x02\x02\x02\u06A5\u06A6" +
        "\x03\x02\x02\x02\u06A6\u06A9\x03\x02\x02\x02\u06A7\u06A5\x03\x02\x02\x02" +
        "\u06A8\u06A1\x03\x02\x02\x02\u06A9\u06AA\x03\x02\x02\x02\u06AA\u06A8\x03" +
        "\x02\x02\x02\u06AA\u06AB\x03\x02\x02\x02\u06ABs\x03\x02\x02\x02\u06AC" +
        "\u06AD\x07)\x02\x02\u06AD\u06AE\x05\u0110\x89\x02\u06AE\u06B2\x07\x92" +
        "\x02\x02\u06AF\u06B1\x07\xA7\x02\x02\u06B0\u06AF\x03\x02\x02\x02\u06B1" +
        "\u06B4\x03\x02\x02\x02\u06B2\u06B0\x03\x02\x02\x02\u06B2\u06B3\x03\x02" +
        "\x02\x02\u06B3\u06BC\x03\x02\x02\x02\u06B4\u06B2\x03\x02\x02\x02\u06B5" +
        "\u06B9\x05:\x1E\x02\u06B6\u06B8\x07\xA7\x02\x02\u06B7\u06B6\x03\x02\x02" +
        "\x02\u06B8\u06BB\x03\x02\x02\x02\u06B9\u06B7\x03\x02\x02\x02\u06B9\u06BA" +
        "\x03\x02\x02\x02\u06BA\u06BD\x03\x02\x02\x02\u06BB\u06B9\x03\x02\x02\x02" +
        "\u06BC\u06B5\x03\x02\x02\x02\u06BD\u06BE\x03\x02\x02\x02\u06BE\u06BC\x03" +
        "\x02\x02\x02\u06BE\u06BF\x03\x02\x02\x02\u06BFu\x03\x02\x02\x02\u06C0" +
        "\u06C1\x07*\x02\x02\u06C1\u06C2\x05\u0110\x89\x02\u06C2\u06C6\x07\x92" +
        "\x02\x02\u06C3\u06C5\x07\xA7\x02\x02\u06C4\u06C3\x03\x02\x02\x02\u06C5" +
        "\u06C8\x03\x02\x02\x02\u06C6\u06C4\x03\x02\x02\x02\u06C6\u06C7\x03\x02" +
        "\x02\x02\u06C7\u06D0\x03\x02\x02\x02\u06C8\u06C6\x03\x02\x02\x02\u06C9" +
        "\u06CD\x05:\x1E\x02\u06CA\u06CC\x07\xA7\x02\x02\u06CB\u06CA\x03\x02\x02" +
        "\x02\u06CC\u06CF\x03\x02\x02\x02\u06CD\u06CB\x03\x02\x02\x02\u06CD\u06CE" +
        "\x03\x02\x02\x02\u06CE\u06D1\x03\x02\x02\x02\u06CF\u06CD\x03\x02\x02\x02" +
        "\u06D0\u06C9\x03\x02\x02\x02\u06D1\u06D2\x03\x02\x02\x02\u06D2\u06D0\x03" +
        "\x02\x02\x02\u06D2\u06D3\x03\x02\x02\x02\u06D3w\x03\x02\x02\x02\u06D4" +
        "\u06D5\x07+\x02\x02\u06D5\u06D6\x05\u0110\x89\x02\u06D6\u06DA\x07\x92" +
        "\x02\x02\u06D7\u06D9\x07\xA7\x02\x02\u06D8\u06D7\x03\x02\x02\x02\u06D9" +
        "\u06DC\x03\x02\x02\x02\u06DA\u06D8\x03\x02\x02\x02\u06DA\u06DB\x03\x02" +
        "\x02\x02\u06DB\u06E4\x03\x02\x02\x02\u06DC\u06DA\x03\x02\x02\x02\u06DD" +
        "\u06E1\x05:\x1E\x02\u06DE\u06E0\x07\xA7\x02\x02\u06DF\u06DE\x03\x02\x02" +
        "\x02\u06E0\u06E3\x03\x02\x02\x02\u06E1\u06DF\x03\x02\x02\x02\u06E1\u06E2" +
        "\x03\x02\x02\x02\u06E2\u06E5\x03\x02\x02\x02\u06E3\u06E1\x03\x02\x02\x02" +
        "\u06E4\u06DD\x03\x02\x02\x02\u06E5\u06E6\x03\x02\x02\x02\u06E6\u06E4\x03" +
        "\x02\x02\x02\u06E6\u06E7\x03\x02\x02\x02\u06E7y\x03\x02\x02\x02\u06E8" +
        "\u06E9\x07,\x02\x02\u06E9\u06EA\x05\u0110\x89\x02\u06EA\u06EE\x07\x92" +
        "\x02\x02\u06EB\u06ED\x07\xA7\x02\x02\u06EC\u06EB\x03\x02\x02\x02\u06ED" +
        "\u06F0\x03\x02\x02\x02\u06EE\u06EC\x03\x02\x02\x02\u06EE\u06EF\x03\x02" +
        "\x02\x02\u06EF\u06F8\x03\x02\x02\x02\u06F0\u06EE\x03\x02\x02\x02\u06F1" +
        "\u06F5\x05:\x1E\x02\u06F2\u06F4\x07\xA7\x02\x02\u06F3\u06F2\x03\x02\x02" +
        "\x02\u06F4\u06F7\x03\x02\x02\x02\u06F5\u06F3\x03\x02\x02\x02\u06F5\u06F6" +
        "\x03\x02\x02\x02\u06F6\u06F9\x03\x02\x02\x02\u06F7\u06F5\x03\x02\x02\x02" +
        "\u06F8\u06F1\x03\x02\x02\x02\u06F9\u06FA\x03\x02\x02\x02\u06FA\u06F8\x03" +
        "\x02\x02\x02\u06FA\u06FB\x03\x02\x02\x02\u06FB{\x03\x02\x02\x02\u06FC" +
        "\u06FD\x07.\x02\x02\u06FD\u06FE\x05\u0110\x89\x02\u06FE\u0702\x07\x92" +
        "\x02\x02\u06FF\u0701\x07\xA7\x02\x02\u0700\u06FF\x03\x02\x02\x02\u0701" +
        "\u0704\x03\x02\x02\x02\u0702\u0700\x03\x02\x02\x02\u0702\u0703\x03\x02" +
        "\x02\x02\u0703\u070C\x03\x02\x02\x02\u0704\u0702\x03\x02\x02\x02\u0705" +
        "\u0709\x05:\x1E\x02\u0706\u0708\x07\xA7\x02\x02\u0707\u0706\x03\x02\x02" +
        "\x02\u0708\u070B\x03\x02\x02\x02\u0709\u0707\x03\x02\x02\x02\u0709\u070A" +
        "\x03\x02\x02\x02\u070A\u070D\x03\x02\x02\x02\u070B\u0709\x03\x02\x02\x02" +
        "\u070C\u0705\x03\x02\x02\x02\u070D\u070E\x03\x02\x02\x02\u070E\u070C\x03" +
        "\x02\x02\x02\u070E\u070F\x03\x02\x02\x02\u070F}\x03\x02\x02\x02\u0710" +
        "\u0711\x07/\x02\x02\u0711\u0712\x05\u0110\x89\x02\u0712\u0716\x07\x92" +
        "\x02\x02\u0713\u0715\x07\xA7\x02\x02\u0714\u0713\x03\x02\x02\x02\u0715" +
        "\u0718\x03\x02\x02\x02\u0716\u0714\x03\x02\x02\x02\u0716\u0717\x03\x02" +
        "\x02\x02\u0717\u0720\x03\x02\x02\x02\u0718\u0716\x03\x02\x02\x02\u0719" +
        "\u071D\x05:\x1E\x02\u071A\u071C\x07\xA7\x02\x02\u071B\u071A\x03\x02\x02" +
        "\x02\u071C\u071F\x03\x02\x02\x02\u071D\u071B\x03\x02\x02\x02\u071D\u071E" +
        "\x03\x02\x02\x02\u071E\u0721\x03\x02\x02\x02\u071F\u071D\x03\x02\x02\x02" +
        "\u0720\u0719\x03\x02\x02\x02\u0721\u0722\x03\x02\x02\x02\u0722\u0720\x03" +
        "\x02\x02\x02\u0722\u0723\x03\x02\x02\x02\u0723\x7F\x03\x02\x02\x02\u0724" +
        "\u0725\x070\x02\x02\u0725\u0726\x05\u0110\x89\x02\u0726\u072A\x07\x92" +
        "\x02\x02\u0727\u0729\x07\xA7\x02\x02\u0728\u0727\x03\x02\x02\x02\u0729" +
        "\u072C\x03\x02\x02\x02\u072A\u0728\x03\x02\x02\x02\u072A\u072B\x03\x02" +
        "\x02\x02\u072B\u0734\x03\x02\x02\x02\u072C\u072A\x03\x02\x02\x02\u072D" +
        "\u0731\x05:\x1E\x02\u072E\u0730\x07\xA7\x02\x02\u072F\u072E\x03\x02\x02" +
        "\x02\u0730\u0733\x03\x02\x02\x02\u0731\u072F\x03\x02\x02\x02\u0731\u0732" +
        "\x03\x02\x02\x02\u0732\u0735\x03\x02\x02\x02\u0733\u0731\x03\x02\x02\x02" +
        "\u0734\u072D\x03\x02\x02\x02\u0735\u0736\x03\x02\x02\x02\u0736\u0734\x03" +
        "\x02\x02\x02\u0736\u0737\x03\x02\x02\x02\u0737\x81\x03\x02\x02\x02\u0738" +
        "\u0739\x071\x02\x02\u0739\u073A\x05\u0110\x89\x02\u073A\u073E\x07\x92" +
        "\x02\x02\u073B\u073D\x07\xA7\x02\x02\u073C\u073B\x03\x02\x02\x02\u073D" +
        "\u0740\x03\x02\x02\x02\u073E\u073C\x03\x02\x02\x02\u073E\u073F\x03\x02" +
        "\x02\x02\u073F\u0748\x03\x02\x02\x02\u0740\u073E\x03\x02\x02\x02\u0741" +
        "\u0745\x05:\x1E\x02\u0742\u0744\x07\xA7\x02\x02\u0743\u0742\x03\x02\x02" +
        "\x02\u0744\u0747\x03\x02\x02\x02\u0745\u0743\x03\x02\x02\x02\u0745\u0746" +
        "\x03\x02\x02\x02\u0746\u0749\x03\x02\x02\x02\u0747\u0745\x03\x02\x02\x02" +
        "\u0748\u0741\x03\x02\x02\x02\u0749\u074A\x03\x02\x02\x02\u074A\u0748\x03" +
        "\x02\x02\x02\u074A\u074B\x03\x02\x02\x02\u074B\x83\x03\x02\x02\x02\u074C" +
        "\u074D\x072\x02\x02\u074D\u074E\x05\u0110\x89\x02\u074E\u0752\x07\x92" +
        "\x02\x02\u074F\u0751\x07\xA7\x02\x02\u0750\u074F\x03\x02\x02\x02\u0751" +
        "\u0754\x03\x02\x02\x02\u0752\u0750\x03\x02\x02\x02\u0752\u0753\x03\x02" +
        "\x02\x02\u0753\u075C\x03\x02\x02\x02\u0754\u0752\x03\x02\x02\x02\u0755" +
        "\u0759\x05:\x1E\x02\u0756\u0758\x07\xA7\x02\x02\u0757\u0756\x03\x02\x02" +
        "\x02\u0758\u075B\x03\x02\x02\x02\u0759\u0757\x03\x02\x02\x02\u0759\u075A" +
        "\x03\x02\x02\x02\u075A\u075D\x03\x02\x02\x02\u075B\u0759\x03\x02\x02\x02" +
        "\u075C\u0755\x03\x02\x02\x02\u075D\u075E\x03\x02\x02\x02\u075E\u075C\x03" +
        "\x02\x02\x02\u075E\u075F\x03\x02\x02\x02\u075F\x85\x03\x02\x02\x02\u0760" +
        "\u0761\x073\x02\x02\u0761\u0762\x05\u0110\x89\x02\u0762\u0766\x07\x92" +
        "\x02\x02\u0763\u0765\x07\xA7\x02\x02\u0764\u0763\x03\x02\x02\x02\u0765" +
        "\u0768\x03\x02\x02\x02\u0766\u0764\x03\x02\x02\x02\u0766\u0767\x03\x02" +
        "\x02\x02\u0767\u0770\x03\x02\x02\x02\u0768\u0766\x03\x02\x02\x02\u0769" +
        "\u076D\x05:\x1E\x02\u076A\u076C\x07\xA7\x02\x02\u076B\u076A\x03\x02\x02" +
        "\x02\u076C\u076F\x03\x02\x02\x02\u076D\u076B\x03\x02\x02\x02\u076D\u076E" +
        "\x03\x02\x02\x02\u076E\u0771\x03\x02\x02\x02\u076F\u076D\x03\x02\x02\x02" +
        "\u0770\u0769\x03\x02\x02\x02\u0771\u0772\x03\x02\x02\x02\u0772\u0770\x03" +
        "\x02\x02\x02\u0772\u0773\x03\x02\x02\x02\u0773\x87\x03\x02\x02\x02\u0774" +
        "\u0775\x074\x02\x02\u0775\u0776\x05\u0110\x89\x02\u0776\u077A\x07\x92" +
        "\x02\x02\u0777\u0779\x07\xA7\x02\x02\u0778\u0777\x03\x02\x02\x02\u0779" +
        "\u077C\x03\x02\x02\x02\u077A\u0778\x03\x02\x02\x02\u077A\u077B\x03\x02" +
        "\x02\x02\u077B\u0784\x03\x02\x02\x02\u077C\u077A\x03\x02\x02\x02\u077D" +
        "\u0781\x05:\x1E\x02\u077E\u0780\x07\xA7\x02\x02\u077F\u077E\x03\x02\x02" +
        "\x02\u0780\u0783\x03\x02\x02\x02\u0781\u077F\x03\x02\x02\x02\u0781\u0782" +
        "\x03\x02\x02\x02\u0782\u0785\x03\x02\x02\x02\u0783\u0781\x03\x02\x02\x02" +
        "\u0784\u077D\x03\x02\x02\x02\u0785\u0786\x03\x02\x02\x02\u0786\u0784\x03" +
        "\x02\x02\x02\u0786\u0787\x03\x02\x02\x02\u0787\x89\x03\x02\x02\x02\u0788" +
        "\u0789\x07-\x02\x02\u0789\u078A\x05\u0110\x89\x02\u078A\u078E\x07\x92" +
        "\x02\x02\u078B\u078D\x07\xA7\x02\x02\u078C\u078B\x03\x02\x02\x02\u078D" +
        "\u0790\x03\x02\x02\x02\u078E\u078C\x03\x02\x02\x02\u078E\u078F\x03\x02" +
        "\x02\x02\u078F\u0798\x03\x02\x02\x02\u0790\u078E\x03\x02\x02\x02\u0791" +
        "\u0795\x05:\x1E\x02\u0792\u0794\x07\xA7\x02\x02\u0793\u0792\x03\x02\x02" +
        "\x02\u0794\u0797\x03\x02\x02\x02\u0795\u0793\x03\x02\x02\x02\u0795\u0796" +
        "\x03\x02\x02\x02\u0796\u0799\x03\x02\x02\x02\u0797\u0795\x03\x02\x02\x02" +
        "\u0798\u0791\x03\x02\x02\x02\u0799\u079A\x03\x02\x02\x02\u079A\u0798\x03" +
        "\x02\x02\x02\u079A\u079B\x03\x02\x02\x02\u079B\x8B\x03\x02\x02\x02\u079C" +
        "\u079D\x075\x02\x02\u079D\u079E\x05\u0110\x89\x02\u079E\u07A2\x07\x92" +
        "\x02\x02\u079F\u07A1\x07\xA7\x02\x02\u07A0\u079F\x03\x02\x02\x02\u07A1" +
        "\u07A4\x03\x02\x02\x02\u07A2\u07A0\x03\x02\x02\x02\u07A2\u07A3\x03\x02" +
        "\x02\x02\u07A3\u07AC\x03\x02\x02\x02\u07A4\u07A2\x03\x02\x02\x02\u07A5" +
        "\u07A9\x05:\x1E\x02\u07A6\u07A8\x07\xA7\x02\x02\u07A7\u07A6\x03\x02\x02" +
        "\x02\u07A8\u07AB\x03\x02\x02\x02\u07A9\u07A7\x03\x02\x02\x02\u07A9\u07AA" +
        "\x03\x02\x02\x02\u07AA\u07AD\x03\x02\x02\x02\u07AB\u07A9\x03\x02\x02\x02" +
        "\u07AC\u07A5\x03\x02\x02\x02\u07AD\u07AE\x03\x02\x02\x02\u07AE\u07AC\x03" +
        "\x02\x02\x02\u07AE\u07AF\x03\x02\x02\x02\u07AF\x8D\x03\x02\x02\x02\u07B0" +
        "\u07B1\x07I\x02\x02\u07B1\u07B2\x05\u0110\x89\x02\u07B2\u07B6\x07\x92" +
        "\x02\x02\u07B3\u07B5\x07\xA7\x02\x02\u07B4\u07B3\x03\x02\x02\x02\u07B5" +
        "\u07B8\x03\x02\x02\x02\u07B6\u07B4\x03\x02\x02\x02\u07B6\u07B7\x03\x02" +
        "\x02\x02\u07B7\u07C0\x03\x02\x02\x02\u07B8\u07B6\x03\x02\x02\x02\u07B9" +
        "\u07BD\x05:\x1E\x02\u07BA\u07BC\x07\xA7\x02\x02\u07BB\u07BA\x03\x02\x02" +
        "\x02\u07BC\u07BF\x03\x02\x02\x02\u07BD\u07BB\x03\x02\x02\x02\u07BD\u07BE" +
        "\x03\x02\x02\x02\u07BE\u07C1\x03\x02\x02\x02\u07BF\u07BD\x03\x02\x02\x02" +
        "\u07C0\u07B9\x03\x02\x02\x02\u07C1\u07C2\x03\x02\x02\x02\u07C2\u07C0\x03" +
        "\x02\x02\x02\u07C2\u07C3\x03\x02\x02\x02\u07C3\x8F\x03\x02\x02\x02\u07C4" +
        "\u07C5\x07J\x02\x02\u07C5\u07C6\x05\u0110\x89\x02\u07C6\u07CA\x07\x92" +
        "\x02\x02\u07C7\u07C9\x07\xA7\x02\x02\u07C8\u07C7\x03\x02\x02\x02\u07C9" +
        "\u07CC\x03\x02\x02\x02\u07CA\u07C8\x03\x02\x02\x02\u07CA\u07CB\x03\x02" +
        "\x02\x02\u07CB\u07D4\x03\x02\x02\x02\u07CC\u07CA\x03\x02\x02\x02\u07CD" +
        "\u07D1\x05:\x1E\x02\u07CE\u07D0\x07\xA7\x02\x02\u07CF\u07CE\x03\x02\x02" +
        "\x02\u07D0\u07D3\x03\x02\x02\x02\u07D1\u07CF\x03\x02\x02\x02\u07D1\u07D2" +
        "\x03\x02\x02\x02\u07D2\u07D5\x03\x02\x02\x02\u07D3\u07D1\x03\x02\x02\x02" +
        "\u07D4\u07CD\x03\x02\x02\x02\u07D5\u07D6\x03\x02\x02\x02\u07D6\u07D4\x03" +
        "\x02\x02\x02\u07D6\u07D7\x03\x02\x02\x02\u07D7\x91\x03\x02\x02\x02\u07D8" +
        "\u07D9\x07K\x02\x02\u07D9\u07DA\x05\u0116\x8C\x02\u07DA\u07DE\x07\x92" +
        "\x02\x02\u07DB\u07DD\x07\xA7\x02\x02\u07DC\u07DB\x03\x02\x02\x02\u07DD" +
        "\u07E0\x03\x02\x02\x02\u07DE\u07DC\x03\x02\x02\x02\u07DE\u07DF\x03\x02" +
        "\x02\x02\u07DF\u07E8\x03\x02\x02\x02\u07E0\u07DE\x03\x02\x02\x02\u07E1" +
        "\u07E5\x05:\x1E\x02\u07E2\u07E4\x07\xA7\x02\x02\u07E3\u07E2\x03\x02\x02" +
        "\x02\u07E4\u07E7\x03\x02\x02\x02\u07E5\u07E3\x03\x02\x02\x02\u07E5\u07E6" +
        "\x03\x02\x02\x02\u07E6\u07E9\x03\x02\x02\x02\u07E7\u07E5\x03\x02\x02\x02" +
        "\u07E8\u07E1\x03\x02\x02\x02\u07E9\u07EA\x03\x02\x02\x02\u07EA\u07E8\x03" +
        "\x02\x02\x02\u07EA\u07EB\x03\x02\x02\x02\u07EB\x93\x03\x02\x02\x02\u07EC" +
        "\u07ED\x07L\x02\x02\u07ED\u07EE\x05\u0116\x8C\x02\u07EE\u07F2\x07\x92" +
        "\x02\x02\u07EF\u07F1\x07\xA7\x02\x02\u07F0\u07EF\x03\x02\x02\x02\u07F1" +
        "\u07F4\x03\x02\x02\x02\u07F2\u07F0\x03\x02\x02\x02\u07F2\u07F3\x03\x02" +
        "\x02\x02\u07F3\u07FC\x03\x02\x02\x02\u07F4\u07F2\x03\x02\x02\x02\u07F5" +
        "\u07F9\x05:\x1E\x02\u07F6\u07F8\x07\xA7\x02\x02\u07F7\u07F6\x03\x02\x02" +
        "\x02\u07F8\u07FB\x03\x02\x02\x02\u07F9\u07F7\x03\x02\x02\x02\u07F9\u07FA" +
        "\x03\x02\x02\x02\u07FA\u07FD\x03\x02\x02\x02\u07FB\u07F9\x03\x02\x02\x02" +
        "\u07FC\u07F5\x03\x02\x02\x02\u07FD\u07FE\x03\x02\x02\x02\u07FE\u07FC\x03" +
        "\x02\x02\x02\u07FE\u07FF\x03\x02\x02\x02\u07FF\x95\x03\x02\x02\x02\u0800" +
        "\u0801\x07M\x02\x02\u0801\u0802\x05\u0116\x8C\x02\u0802\u0806\x07\x92" +
        "\x02\x02\u0803\u0805\x07\xA7\x02\x02\u0804\u0803\x03\x02\x02\x02\u0805" +
        "\u0808\x03\x02\x02\x02\u0806\u0804\x03\x02\x02\x02\u0806\u0807\x03\x02" +
        "\x02\x02\u0807\u0810\x03\x02\x02\x02\u0808\u0806\x03\x02\x02\x02\u0809" +
        "\u080D\x05:\x1E\x02\u080A\u080C\x07\xA7\x02\x02\u080B\u080A\x03\x02\x02" +
        "\x02\u080C\u080F\x03\x02\x02\x02\u080D\u080B\x03\x02\x02\x02\u080D\u080E" +
        "\x03\x02\x02\x02\u080E\u0811\x03\x02\x02\x02\u080F\u080D\x03\x02\x02\x02" +
        "\u0810\u0809\x03\x02\x02\x02\u0811\u0812\x03\x02\x02\x02\u0812\u0810\x03" +
        "\x02\x02\x02\u0812\u0813\x03\x02\x02\x02\u0813\x97\x03\x02\x02\x02\u0814" +
        "\u0815\x07N\x02\x02\u0815\u0816\x05\u0116\x8C\x02\u0816\u081A\x07\x92" +
        "\x02\x02\u0817\u0819\x07\xA7\x02\x02\u0818\u0817\x03\x02\x02\x02\u0819" +
        "\u081C\x03\x02\x02\x02\u081A\u0818\x03\x02\x02\x02\u081A\u081B\x03\x02" +
        "\x02\x02\u081B\u0824\x03\x02\x02\x02\u081C\u081A\x03\x02\x02\x02\u081D" +
        "\u0821\x05:\x1E\x02\u081E\u0820\x07\xA7\x02\x02\u081F\u081E\x03\x02\x02" +
        "\x02\u0820\u0823\x03\x02\x02\x02\u0821\u081F\x03\x02\x02\x02\u0821\u0822" +
        "\x03\x02\x02\x02\u0822\u0825\x03\x02\x02\x02\u0823\u0821\x03\x02\x02\x02" +
        "\u0824\u081D\x03\x02\x02\x02\u0825\u0826\x03\x02\x02\x02\u0826\u0824\x03" +
        "\x02\x02\x02\u0826\u0827\x03\x02\x02\x02\u0827\x99\x03\x02\x02\x02\u0828" +
        "\u0829\x07O\x02\x02\u0829\u082A\x05\u0116\x8C\x02\u082A\u082E\x07\x92" +
        "\x02\x02\u082B\u082D\x07\xA7\x02\x02\u082C\u082B\x03\x02\x02\x02\u082D" +
        "\u0830\x03\x02\x02\x02\u082E\u082C\x03\x02\x02\x02\u082E\u082F\x03\x02" +
        "\x02\x02\u082F\u0838\x03\x02\x02\x02\u0830\u082E\x03\x02\x02\x02\u0831" +
        "\u0835\x05:\x1E\x02\u0832\u0834\x07\xA7\x02\x02\u0833\u0832\x03\x02\x02" +
        "\x02\u0834\u0837\x03\x02\x02\x02\u0835\u0833\x03\x02\x02\x02\u0835\u0836" +
        "\x03\x02\x02\x02\u0836\u0839\x03\x02\x02\x02\u0837\u0835\x03\x02\x02\x02" +
        "\u0838\u0831\x03\x02\x02\x02\u0839\u083A\x03\x02\x02\x02\u083A\u0838\x03" +
        "\x02\x02\x02\u083A\u083B\x03\x02\x02\x02\u083B\x9B\x03\x02\x02\x02\u083C" +
        "\u083D\x07P\x02\x02\u083D\u083E\x05\u0116\x8C\x02\u083E\u0842\x07\x92" +
        "\x02\x02\u083F\u0841\x07\xA7\x02\x02\u0840\u083F\x03\x02\x02\x02\u0841" +
        "\u0844\x03\x02\x02\x02\u0842\u0840\x03\x02\x02\x02\u0842\u0843\x03\x02" +
        "\x02\x02\u0843\u084C\x03\x02\x02\x02\u0844\u0842\x03\x02\x02\x02\u0845" +
        "\u0849\x05:\x1E\x02\u0846\u0848\x07\xA7\x02\x02\u0847\u0846\x03\x02\x02" +
        "\x02\u0848\u084B\x03\x02\x02\x02\u0849\u0847\x03\x02\x02\x02\u0849\u084A" +
        "\x03\x02\x02\x02\u084A\u084D\x03\x02\x02\x02\u084B\u0849\x03\x02\x02\x02" +
        "\u084C\u0845\x03\x02\x02\x02\u084D\u084E\x03\x02\x02\x02\u084E\u084C\x03" +
        "\x02\x02\x02\u084E\u084F\x03\x02\x02\x02\u084F\x9D\x03\x02\x02\x02\u0850" +
        "\u0851\x07Q\x02\x02\u0851\u0852\x05\u0116\x8C\x02\u0852\u0856\x07\x92" +
        "\x02\x02\u0853\u0855\x07\xA7\x02\x02\u0854\u0853\x03\x02\x02\x02\u0855" +
        "\u0858\x03\x02\x02\x02\u0856\u0854\x03\x02\x02\x02\u0856\u0857\x03\x02" +
        "\x02\x02\u0857\u0860\x03\x02\x02\x02\u0858\u0856\x03\x02\x02\x02\u0859" +
        "\u085D\x05:\x1E\x02\u085A\u085C\x07\xA7\x02\x02\u085B\u085A\x03\x02\x02" +
        "\x02\u085C\u085F\x03\x02\x02\x02\u085D\u085B\x03\x02\x02\x02\u085D\u085E" +
        "\x03\x02\x02\x02\u085E\u0861\x03\x02\x02\x02\u085F\u085D\x03\x02\x02\x02" +
        "\u0860\u0859\x03\x02\x02\x02\u0861\u0862\x03\x02\x02\x02\u0862\u0860\x03" +
        "\x02\x02\x02\u0862\u0863\x03\x02\x02\x02\u0863\x9F\x03\x02\x02\x02\u0864" +
        "\u0865\x07R\x02\x02\u0865\u0866\x05\u0116\x8C\x02\u0866\u086A\x07\x92" +
        "\x02\x02\u0867\u0869\x07\xA7\x02\x02\u0868\u0867\x03\x02\x02\x02\u0869" +
        "\u086C\x03\x02\x02\x02\u086A\u0868\x03\x02\x02\x02\u086A\u086B\x03\x02" +
        "\x02\x02\u086B\u0874\x03\x02\x02\x02\u086C\u086A\x03\x02\x02\x02\u086D" +
        "\u0871\x05:\x1E\x02\u086E\u0870\x07\xA7\x02\x02\u086F\u086E\x03\x02\x02" +
        "\x02\u0870\u0873\x03\x02\x02\x02\u0871\u086F\x03\x02\x02\x02\u0871\u0872" +
        "\x03\x02\x02\x02\u0872\u0875\x03\x02\x02\x02\u0873\u0871\x03\x02\x02\x02" +
        "\u0874\u086D\x03\x02\x02\x02\u0875\u0876\x03\x02\x02\x02\u0876\u0874\x03" +
        "\x02\x02\x02\u0876\u0877\x03\x02\x02\x02\u0877\xA1\x03\x02\x02\x02\u0878" +
        "\u0879\x07S\x02\x02\u0879\u087A\x05\u0116\x8C\x02\u087A\u087E\x07\x92" +
        "\x02\x02\u087B\u087D\x07\xA7\x02\x02\u087C\u087B\x03\x02\x02\x02\u087D" +
        "\u0880\x03\x02\x02\x02\u087E\u087C\x03\x02\x02\x02\u087E\u087F\x03\x02" +
        "\x02\x02\u087F\u0888\x03\x02\x02\x02\u0880\u087E\x03\x02\x02\x02\u0881" +
        "\u0885\x05:\x1E\x02\u0882\u0884\x07\xA7\x02\x02\u0883\u0882\x03\x02\x02" +
        "\x02\u0884\u0887\x03\x02\x02\x02\u0885\u0883\x03\x02\x02\x02\u0885\u0886" +
        "\x03\x02\x02\x02\u0886\u0889\x03\x02\x02\x02\u0887\u0885\x03\x02\x02\x02" +
        "\u0888\u0881\x03\x02\x02\x02\u0889\u088A\x03\x02\x02\x02\u088A\u0888\x03" +
        "\x02\x02\x02\u088A\u088B\x03\x02\x02\x02\u088B\xA3\x03\x02\x02\x02\u088C" +
        "\u088D\x07T\x02\x02\u088D\u088E\x05\u0116\x8C\x02\u088E\u0892\x07\x92" +
        "\x02\x02\u088F\u0891\x07\xA7\x02\x02\u0890\u088F\x03\x02\x02\x02\u0891" +
        "\u0894\x03\x02\x02\x02\u0892\u0890\x03\x02\x02\x02\u0892\u0893\x03\x02" +
        "\x02\x02\u0893\u089C\x03\x02\x02\x02\u0894\u0892\x03\x02\x02\x02\u0895" +
        "\u0899\x05:\x1E\x02\u0896\u0898\x07\xA7\x02\x02\u0897\u0896\x03\x02\x02" +
        "\x02\u0898\u089B\x03\x02\x02\x02\u0899\u0897\x03\x02\x02\x02\u0899\u089A" +
        "\x03\x02\x02\x02\u089A\u089D\x03\x02\x02\x02\u089B\u0899\x03\x02\x02\x02" +
        "\u089C\u0895\x03\x02\x02\x02\u089D\u089E\x03\x02\x02\x02\u089E\u089C\x03" +
        "\x02\x02\x02\u089E\u089F\x03\x02\x02\x02\u089F\xA5\x03\x02\x02\x02\u08A0" +
        "\u08A1\x07U\x02\x02\u08A1\u08A2\x05\u0116\x8C\x02\u08A2\u08A6\x07\x92" +
        "\x02\x02\u08A3\u08A5\x07\xA7\x02\x02\u08A4\u08A3\x03\x02\x02\x02\u08A5" +
        "\u08A8\x03\x02\x02\x02\u08A6\u08A4\x03\x02\x02\x02\u08A6\u08A7\x03\x02" +
        "\x02\x02\u08A7\u08B0\x03\x02\x02\x02\u08A8\u08A6\x03\x02\x02\x02\u08A9" +
        "\u08AD\x05:\x1E\x02\u08AA\u08AC\x07\xA7\x02\x02\u08AB\u08AA\x03\x02\x02" +
        "\x02\u08AC\u08AF\x03\x02\x02\x02\u08AD\u08AB\x03\x02\x02\x02\u08AD\u08AE" +
        "\x03\x02\x02\x02\u08AE\u08B1\x03\x02\x02\x02\u08AF\u08AD\x03\x02\x02\x02" +
        "\u08B0\u08A9\x03\x02\x02\x02\u08B1\u08B2\x03\x02\x02\x02\u08B2\u08B0\x03" +
        "\x02\x02\x02\u08B2\u08B3\x03\x02\x02\x02\u08B3\xA7\x03\x02\x02\x02\u08B4" +
        "\u08B5\x07V\x02\x02\u08B5\u08B6\x05\u0116\x8C\x02\u08B6\u08BA\x07\x92" +
        "\x02\x02\u08B7\u08B9\x07\xA7\x02\x02\u08B8\u08B7\x03\x02\x02\x02\u08B9" +
        "\u08BC\x03\x02\x02\x02\u08BA\u08B8\x03\x02\x02\x02\u08BA\u08BB\x03\x02" +
        "\x02\x02\u08BB\u08C4\x03\x02\x02\x02\u08BC\u08BA\x03\x02\x02\x02\u08BD" +
        "\u08C1\x05:\x1E\x02\u08BE\u08C0\x07\xA7\x02\x02\u08BF\u08BE\x03\x02\x02" +
        "\x02\u08C0\u08C3\x03\x02\x02\x02\u08C1\u08BF\x03\x02\x02\x02\u08C1\u08C2" +
        "\x03\x02\x02\x02\u08C2\u08C5\x03\x02\x02\x02\u08C3\u08C1\x03\x02\x02\x02" +
        "\u08C4\u08BD\x03\x02\x02\x02\u08C5\u08C6\x03\x02\x02\x02\u08C6\u08C4\x03" +
        "\x02\x02\x02\u08C6\u08C7\x03\x02\x02\x02\u08C7\xA9\x03\x02\x02\x02\u08C8" +
        "\u08C9\x07W\x02\x02\u08C9\u08CA\x05\u0116\x8C\x02\u08CA\u08CE\x07\x92" +
        "\x02\x02\u08CB\u08CD\x07\xA7\x02\x02\u08CC\u08CB\x03\x02\x02\x02\u08CD" +
        "\u08D0\x03\x02\x02\x02\u08CE\u08CC\x03\x02\x02\x02\u08CE\u08CF\x03\x02" +
        "\x02\x02\u08CF\u08D8\x03\x02\x02\x02\u08D0\u08CE\x03\x02\x02\x02\u08D1" +
        "\u08D5\x05:\x1E\x02\u08D2\u08D4\x07\xA7\x02\x02\u08D3\u08D2\x03\x02\x02" +
        "\x02\u08D4\u08D7\x03\x02\x02\x02\u08D5\u08D3\x03\x02\x02\x02\u08D5\u08D6" +
        "\x03\x02\x02\x02\u08D6\u08D9\x03\x02\x02\x02\u08D7\u08D5\x03\x02\x02\x02" +
        "\u08D8\u08D1\x03\x02\x02\x02\u08D9\u08DA\x03\x02\x02\x02\u08DA\u08D8\x03" +
        "\x02\x02\x02\u08DA\u08DB\x03\x02\x02\x02\u08DB\xAB\x03\x02\x02\x02\u08DC" +
        "\u08DD\x07X\x02\x02\u08DD\u08DE\x05\u0116\x8C\x02\u08DE\u08E2\x07\x92" +
        "\x02\x02\u08DF\u08E1\x07\xA7\x02\x02\u08E0\u08DF\x03\x02\x02\x02\u08E1" +
        "\u08E4\x03\x02\x02\x02\u08E2\u08E0\x03\x02\x02\x02\u08E2\u08E3\x03\x02" +
        "\x02\x02\u08E3\u08EC\x03\x02\x02\x02\u08E4\u08E2\x03\x02\x02\x02\u08E5" +
        "\u08E9\x05:\x1E\x02\u08E6\u08E8\x07\xA7\x02\x02\u08E7\u08E6\x03\x02\x02" +
        "\x02\u08E8\u08EB\x03\x02\x02\x02\u08E9\u08E7\x03\x02\x02\x02\u08E9\u08EA" +
        "\x03\x02\x02\x02\u08EA\u08ED\x03\x02\x02\x02\u08EB\u08E9\x03\x02\x02\x02" +
        "\u08EC\u08E5\x03\x02\x02\x02\u08ED\u08EE\x03\x02\x02\x02\u08EE\u08EC\x03" +
        "\x02\x02\x02\u08EE\u08EF\x03\x02\x02\x02\u08EF\xAD\x03\x02\x02\x02\u08F0" +
        "\u08F1\x07Y\x02\x02\u08F1\u08F2\x05\u0116\x8C\x02\u08F2\u08F6\x07\x92" +
        "\x02\x02\u08F3\u08F5\x07\xA7\x02\x02\u08F4\u08F3\x03\x02\x02\x02\u08F5" +
        "\u08F8\x03\x02\x02\x02\u08F6\u08F4\x03\x02\x02\x02\u08F6\u08F7\x03\x02" +
        "\x02\x02\u08F7\u0900\x03\x02\x02\x02\u08F8\u08F6\x03\x02\x02\x02\u08F9" +
        "\u08FD\x05:\x1E\x02\u08FA\u08FC\x07\xA7\x02\x02\u08FB\u08FA\x03\x02\x02" +
        "\x02\u08FC\u08FF\x03\x02\x02\x02\u08FD\u08FB\x03\x02\x02\x02\u08FD\u08FE" +
        "\x03\x02\x02\x02\u08FE\u0901\x03\x02\x02\x02\u08FF\u08FD\x03\x02\x02\x02" +
        "\u0900\u08F9\x03\x02\x02\x02\u0901\u0902\x03\x02\x02\x02\u0902\u0900\x03" +
        "\x02\x02\x02\u0902\u0903\x03\x02\x02\x02\u0903\xAF\x03\x02\x02\x02\u0904" +
        "\u0905\x07Z\x02\x02\u0905\u0906\x05\u0116\x8C\x02\u0906\u090A\x07\x92" +
        "\x02\x02\u0907\u0909\x07\xA7\x02\x02";
    bitmarkParser._serializedATNSegment5 = "\u0908\u0907\x03\x02\x02\x02\u0909\u090C\x03\x02\x02\x02\u090A\u0908\x03" +
        "\x02\x02\x02\u090A\u090B\x03\x02\x02\x02\u090B\u0914\x03\x02\x02\x02\u090C" +
        "\u090A\x03\x02\x02\x02\u090D\u0911\x05:\x1E\x02\u090E\u0910\x07\xA7\x02" +
        "\x02\u090F\u090E\x03\x02\x02\x02\u0910\u0913\x03\x02\x02\x02\u0911\u090F" +
        "\x03\x02\x02\x02\u0911\u0912\x03\x02\x02\x02\u0912\u0915\x03\x02\x02\x02" +
        "\u0913\u0911\x03\x02\x02\x02\u0914\u090D\x03\x02\x02\x02\u0915\u0916\x03" +
        "\x02\x02\x02\u0916\u0914\x03\x02\x02\x02\u0916\u0917\x03\x02\x02\x02\u0917" +
        "\xB1\x03\x02\x02\x02\u0918\u0919\x07[\x02\x02\u0919\u091A\x05\u0116\x8C" +
        "\x02\u091A\u091E\x07\x92\x02\x02\u091B\u091D\x07\xA7\x02\x02\u091C\u091B" +
        "\x03\x02\x02\x02\u091D\u0920\x03\x02\x02\x02\u091E\u091C\x03\x02\x02\x02" +
        "\u091E\u091F\x03\x02\x02\x02\u091F\u0928\x03\x02\x02\x02\u0920\u091E\x03" +
        "\x02\x02\x02\u0921\u0925\x05:\x1E\x02\u0922\u0924\x07\xA7\x02\x02\u0923" +
        "\u0922\x03\x02\x02\x02\u0924\u0927\x03\x02\x02\x02\u0925\u0923\x03\x02" +
        "\x02\x02\u0925\u0926\x03\x02\x02\x02\u0926\u0929\x03\x02\x02\x02\u0927" +
        "\u0925\x03\x02\x02\x02\u0928\u0921\x03\x02\x02\x02\u0929\u092A\x03\x02" +
        "\x02\x02\u092A\u0928\x03\x02\x02\x02\u092A\u092B\x03\x02\x02\x02\u092B" +
        "\xB3\x03\x02\x02\x02\u092C\u092D\x07\\\x02\x02\u092D\u092E\x05\u0116\x8C" +
        "\x02\u092E\u0932\x07\x92\x02\x02\u092F\u0931\x07\xA7\x02\x02\u0930\u092F" +
        "\x03\x02\x02\x02\u0931\u0934\x03\x02\x02\x02\u0932\u0930\x03\x02\x02\x02" +
        "\u0932\u0933\x03\x02\x02\x02\u0933\u093C\x03\x02\x02\x02\u0934\u0932\x03" +
        "\x02\x02\x02\u0935\u0939\x05:\x1E\x02\u0936\u0938\x07\xA7\x02\x02\u0937" +
        "\u0936\x03\x02\x02\x02\u0938\u093B\x03\x02\x02\x02\u0939\u0937\x03\x02" +
        "\x02\x02\u0939\u093A\x03\x02\x02\x02\u093A\u093D\x03\x02\x02\x02\u093B" +
        "\u0939\x03\x02\x02\x02\u093C\u0935\x03\x02\x02\x02\u093D\u093E\x03\x02" +
        "\x02\x02\u093E\u093C\x03\x02\x02\x02\u093E\u093F\x03\x02\x02\x02\u093F" +
        "\xB5\x03\x02\x02\x02\u0940\u0941\x07]\x02\x02\u0941\u0942\x05\u0116\x8C" +
        "\x02\u0942\u0946\x07\x92\x02\x02\u0943\u0945\x07\xA7\x02\x02\u0944\u0943" +
        "\x03\x02\x02\x02\u0945\u0948\x03\x02\x02\x02\u0946\u0944\x03\x02\x02\x02" +
        "\u0946\u0947\x03\x02\x02\x02\u0947\u0950\x03\x02\x02\x02\u0948\u0946\x03" +
        "\x02\x02\x02\u0949\u094D\x05:\x1E\x02\u094A\u094C\x07\xA7\x02\x02\u094B" +
        "\u094A\x03\x02\x02\x02\u094C\u094F\x03\x02\x02\x02\u094D\u094B\x03\x02" +
        "\x02\x02\u094D\u094E\x03\x02\x02\x02\u094E\u0951\x03\x02\x02\x02\u094F" +
        "\u094D\x03\x02\x02\x02\u0950\u0949\x03\x02\x02\x02\u0951\u0952\x03\x02" +
        "\x02\x02\u0952\u0950\x03\x02\x02\x02\u0952\u0953\x03\x02\x02\x02\u0953" +
        "\xB7\x03\x02\x02\x02\u0954\u0955\x07^\x02\x02\u0955\u0956\x05\u0110\x89" +
        "\x02\u0956\u095A\x07\x92\x02\x02\u0957\u0959\x07\xA7\x02\x02\u0958\u0957" +
        "\x03\x02\x02\x02\u0959\u095C\x03\x02\x02\x02\u095A\u0958\x03\x02\x02\x02" +
        "\u095A\u095B\x03\x02\x02\x02\u095B\u0964\x03\x02\x02\x02\u095C\u095A\x03" +
        "\x02\x02\x02\u095D\u0961\x05:\x1E\x02\u095E\u0960\x07\xA7\x02\x02\u095F" +
        "\u095E\x03\x02\x02\x02\u0960\u0963\x03\x02\x02\x02\u0961\u095F\x03\x02" +
        "\x02\x02\u0961\u0962\x03\x02\x02\x02\u0962\u0965\x03\x02\x02\x02\u0963" +
        "\u0961\x03\x02\x02\x02\u0964\u095D\x03\x02\x02\x02\u0965\u0966\x03\x02" +
        "\x02\x02\u0966\u0964\x03\x02\x02\x02\u0966\u0967\x03\x02\x02\x02\u0967" +
        "\xB9\x03\x02\x02\x02\u0968\u0969\x07_\x02\x02\u0969\u096A\x05\u0110\x89" +
        "\x02\u096A\u096E\x07\x92\x02\x02\u096B\u096D\x07\xA7\x02\x02\u096C\u096B" +
        "\x03\x02\x02\x02\u096D\u0970\x03\x02\x02\x02\u096E\u096C\x03\x02\x02\x02" +
        "\u096E\u096F\x03\x02\x02\x02\u096F\u0978\x03\x02\x02\x02\u0970\u096E\x03" +
        "\x02\x02\x02\u0971\u0975\x05:\x1E\x02\u0972\u0974\x07\xA7\x02\x02\u0973" +
        "\u0972\x03\x02\x02\x02\u0974\u0977\x03\x02\x02\x02\u0975\u0973\x03\x02" +
        "\x02\x02\u0975\u0976\x03\x02\x02\x02\u0976\u0979\x03\x02\x02\x02\u0977" +
        "\u0975\x03\x02\x02\x02\u0978\u0971\x03\x02\x02\x02\u0979\u097A\x03\x02" +
        "\x02\x02\u097A\u0978\x03\x02\x02\x02\u097A\u097B\x03\x02\x02\x02\u097B" +
        "\xBB\x03\x02\x02\x02\u097C\u097D\x07`\x02\x02\u097D\u097E\x05\u0110\x89" +
        "\x02\u097E\u0982\x07\x92\x02\x02\u097F\u0981\x07\xA7\x02\x02\u0980\u097F" +
        "\x03\x02\x02\x02\u0981\u0984\x03\x02\x02\x02\u0982\u0980\x03\x02\x02\x02" +
        "\u0982\u0983\x03\x02\x02\x02\u0983\u098C\x03\x02\x02\x02\u0984\u0982\x03" +
        "\x02\x02\x02\u0985\u0989\x05:\x1E\x02\u0986\u0988\x07\xA7\x02\x02\u0987" +
        "\u0986\x03\x02\x02\x02\u0988\u098B\x03\x02\x02\x02\u0989\u0987\x03\x02" +
        "\x02\x02\u0989\u098A\x03\x02\x02\x02\u098A\u098D\x03\x02\x02\x02\u098B" +
        "\u0989\x03\x02\x02\x02\u098C\u0985\x03\x02\x02\x02\u098D\u098E\x03\x02" +
        "\x02\x02\u098E\u098C\x03\x02\x02\x02\u098E\u098F\x03\x02\x02\x02\u098F" +
        "\xBD\x03\x02\x02\x02\u0990\u0991\x07a\x02\x02\u0991\u0992\x05\u0110\x89" +
        "\x02\u0992\u0996\x07\x92\x02\x02\u0993\u0995\x07\xA7\x02\x02\u0994\u0993" +
        "\x03\x02\x02\x02\u0995\u0998\x03\x02\x02\x02\u0996\u0994\x03\x02\x02\x02" +
        "\u0996\u0997\x03\x02\x02\x02\u0997\u09A0\x03\x02\x02\x02\u0998\u0996\x03" +
        "\x02\x02\x02\u0999\u099D\x05:\x1E\x02\u099A\u099C\x07\xA7\x02\x02\u099B" +
        "\u099A\x03\x02\x02\x02\u099C\u099F\x03\x02\x02\x02\u099D\u099B\x03\x02" +
        "\x02\x02\u099D\u099E\x03\x02\x02\x02\u099E\u09A1\x03\x02\x02\x02\u099F" +
        "\u099D\x03\x02\x02\x02\u09A0\u0999\x03\x02\x02\x02\u09A1\u09A2\x03\x02" +
        "\x02\x02\u09A2\u09A0\x03\x02\x02\x02\u09A2\u09A3\x03\x02\x02\x02\u09A3" +
        "\xBF\x03\x02\x02\x02\u09A4\u09A5\x07b\x02\x02\u09A5\u09A6\x05\u0110\x89" +
        "\x02\u09A6\u09AA\x07\x92\x02\x02\u09A7\u09A9\x07\xA7\x02\x02\u09A8\u09A7" +
        "\x03\x02\x02\x02\u09A9\u09AC\x03\x02\x02\x02\u09AA\u09A8\x03\x02\x02\x02" +
        "\u09AA\u09AB\x03\x02\x02\x02\u09AB\u09B4\x03\x02\x02\x02\u09AC\u09AA\x03" +
        "\x02\x02\x02\u09AD\u09B1\x05:\x1E\x02\u09AE\u09B0\x07\xA7\x02\x02\u09AF" +
        "\u09AE\x03\x02\x02\x02\u09B0\u09B3\x03\x02\x02\x02\u09B1\u09AF\x03\x02" +
        "\x02\x02\u09B1\u09B2\x03\x02\x02\x02\u09B2\u09B5\x03\x02\x02\x02\u09B3" +
        "\u09B1\x03\x02\x02\x02\u09B4\u09AD\x03\x02\x02\x02\u09B5\u09B6\x03\x02" +
        "\x02\x02\u09B6\u09B4\x03\x02\x02\x02\u09B6\u09B7\x03\x02\x02\x02\u09B7" +
        "\xC1\x03\x02\x02\x02\u09B8\u09B9\x07c\x02\x02\u09B9\u09BA\x05\u0110\x89" +
        "\x02\u09BA\u09BE\x07\x92\x02\x02\u09BB\u09BD\x07\xA7\x02\x02\u09BC\u09BB" +
        "\x03\x02\x02\x02\u09BD\u09C0\x03\x02\x02\x02\u09BE\u09BC\x03\x02\x02\x02" +
        "\u09BE\u09BF\x03\x02\x02\x02\u09BF\u09C8\x03\x02\x02\x02\u09C0\u09BE\x03" +
        "\x02\x02\x02\u09C1\u09C5\x05:\x1E\x02\u09C2\u09C4\x07\xA7\x02\x02\u09C3" +
        "\u09C2\x03\x02\x02\x02\u09C4\u09C7\x03\x02\x02\x02\u09C5\u09C3\x03\x02" +
        "\x02\x02\u09C5\u09C6\x03\x02\x02\x02\u09C6\u09C9\x03\x02\x02\x02\u09C7" +
        "\u09C5\x03\x02\x02\x02\u09C8\u09C1\x03\x02\x02\x02\u09C9\u09CA\x03\x02" +
        "\x02\x02\u09CA\u09C8\x03\x02\x02\x02\u09CA\u09CB\x03\x02\x02\x02\u09CB" +
        "\xC3\x03\x02\x02\x02\u09CC\u09CD\x07d\x02\x02\u09CD\u09CE\x05\u0110\x89" +
        "\x02\u09CE\u09D2\x07\x92\x02\x02\u09CF\u09D1\x07\xA7\x02\x02\u09D0\u09CF" +
        "\x03\x02\x02\x02\u09D1\u09D4\x03\x02\x02\x02\u09D2\u09D0\x03\x02\x02\x02" +
        "\u09D2\u09D3\x03\x02\x02\x02\u09D3\u09DC\x03\x02\x02\x02\u09D4\u09D2\x03" +
        "\x02\x02\x02\u09D5\u09D9\x05:\x1E\x02\u09D6\u09D8\x07\xA7\x02\x02\u09D7" +
        "\u09D6\x03\x02\x02\x02\u09D8\u09DB\x03\x02\x02\x02\u09D9\u09D7\x03\x02" +
        "\x02\x02\u09D9\u09DA\x03\x02\x02\x02\u09DA\u09DD\x03\x02\x02\x02\u09DB" +
        "\u09D9\x03\x02\x02\x02\u09DC\u09D5\x03\x02\x02\x02\u09DD\u09DE\x03\x02" +
        "\x02\x02\u09DE\u09DC\x03\x02\x02\x02\u09DE\u09DF\x03\x02\x02\x02\u09DF" +
        "\xC5\x03\x02\x02\x02\u09E0\u09E1\x07e\x02\x02\u09E1\u09E2\x05\u0110\x89" +
        "\x02\u09E2\u09E6\x07\x92\x02\x02\u09E3\u09E5\x07\xA7\x02\x02\u09E4\u09E3" +
        "\x03\x02\x02\x02\u09E5\u09E8\x03\x02\x02\x02\u09E6\u09E4\x03\x02\x02\x02" +
        "\u09E6\u09E7\x03\x02\x02\x02\u09E7\u09F0\x03\x02\x02\x02\u09E8\u09E6\x03" +
        "\x02\x02\x02\u09E9\u09ED\x05:\x1E\x02\u09EA\u09EC\x07\xA7\x02\x02\u09EB" +
        "\u09EA\x03\x02\x02\x02\u09EC\u09EF\x03\x02\x02\x02\u09ED\u09EB\x03\x02" +
        "\x02\x02\u09ED\u09EE\x03\x02\x02\x02\u09EE\u09F1\x03\x02\x02\x02\u09EF" +
        "\u09ED\x03\x02\x02\x02\u09F0\u09E9\x03\x02\x02\x02\u09F1\u09F2\x03\x02" +
        "\x02\x02\u09F2\u09F0\x03\x02\x02\x02\u09F2\u09F3\x03\x02\x02\x02\u09F3" +
        "\xC7\x03\x02\x02\x02\u09F4\u09F5\x07f\x02\x02\u09F5\u09F6\x05\u0110\x89" +
        "\x02\u09F6\u09FA\x07\x92\x02\x02\u09F7\u09F9\x07\xA7\x02\x02\u09F8\u09F7" +
        "\x03\x02\x02\x02\u09F9\u09FC\x03\x02\x02\x02\u09FA\u09F8\x03\x02\x02\x02" +
        "\u09FA\u09FB\x03\x02\x02\x02\u09FB\u0A04\x03\x02\x02\x02\u09FC\u09FA\x03" +
        "\x02\x02\x02\u09FD\u0A01\x05:\x1E\x02\u09FE\u0A00\x07\xA7\x02\x02\u09FF" +
        "\u09FE\x03\x02\x02\x02\u0A00\u0A03\x03\x02\x02\x02\u0A01\u09FF\x03\x02" +
        "\x02\x02\u0A01\u0A02\x03\x02\x02\x02\u0A02\u0A05\x03\x02\x02\x02\u0A03" +
        "\u0A01\x03\x02\x02\x02\u0A04\u09FD\x03\x02\x02\x02\u0A05\u0A06\x03\x02" +
        "\x02\x02\u0A06\u0A04\x03\x02\x02\x02\u0A06\u0A07\x03\x02\x02\x02\u0A07" +
        "\xC9\x03\x02\x02\x02\u0A08\u0A09\x07g\x02\x02\u0A09\u0A0A\x05\u0110\x89" +
        "\x02\u0A0A\u0A0E\x07\x92\x02\x02\u0A0B\u0A0D\x07\xA7\x02\x02\u0A0C\u0A0B" +
        "\x03\x02\x02\x02\u0A0D\u0A10\x03\x02\x02\x02\u0A0E\u0A0C\x03\x02\x02\x02" +
        "\u0A0E\u0A0F\x03\x02\x02\x02\u0A0F\u0A18\x03\x02\x02\x02\u0A10\u0A0E\x03" +
        "\x02\x02\x02\u0A11\u0A15\x05:\x1E\x02\u0A12\u0A14\x07\xA7\x02\x02\u0A13" +
        "\u0A12\x03\x02\x02\x02\u0A14\u0A17\x03\x02\x02\x02\u0A15\u0A13\x03\x02" +
        "\x02\x02\u0A15\u0A16\x03\x02\x02\x02\u0A16\u0A19\x03\x02\x02\x02\u0A17" +
        "\u0A15\x03\x02\x02\x02\u0A18\u0A11\x03\x02\x02\x02\u0A19\u0A1A\x03\x02" +
        "\x02\x02\u0A1A\u0A18\x03\x02\x02\x02\u0A1A\u0A1B\x03\x02\x02\x02\u0A1B" +
        "\xCB\x03\x02\x02\x02\u0A1C\u0A1D\x07h\x02\x02\u0A1D\u0A1E\x05\u0110\x89" +
        "\x02\u0A1E\u0A22\x07\x92\x02\x02\u0A1F\u0A21\x07\xA7\x02\x02\u0A20\u0A1F" +
        "\x03\x02\x02\x02\u0A21\u0A24\x03\x02\x02\x02\u0A22\u0A20\x03\x02\x02\x02" +
        "\u0A22\u0A23\x03\x02\x02\x02\u0A23\u0A2C\x03\x02\x02\x02\u0A24\u0A22\x03" +
        "\x02\x02\x02\u0A25\u0A29\x05:\x1E\x02\u0A26\u0A28\x07\xA7\x02\x02\u0A27" +
        "\u0A26\x03\x02\x02\x02\u0A28\u0A2B\x03\x02\x02\x02\u0A29\u0A27\x03\x02" +
        "\x02\x02\u0A29\u0A2A\x03\x02\x02\x02\u0A2A\u0A2D\x03\x02\x02\x02\u0A2B" +
        "\u0A29\x03\x02\x02\x02\u0A2C\u0A25\x03\x02\x02\x02\u0A2D\u0A2E\x03\x02" +
        "\x02\x02\u0A2E\u0A2C\x03\x02\x02\x02\u0A2E\u0A2F\x03\x02\x02\x02\u0A2F" +
        "\xCD\x03\x02\x02\x02\u0A30\u0A31\x07i\x02\x02\u0A31\u0A32\x05\u0110\x89" +
        "\x02\u0A32\u0A36\x07\x92\x02\x02\u0A33\u0A35\x07\xA7\x02\x02\u0A34\u0A33" +
        "\x03\x02\x02\x02\u0A35\u0A38\x03\x02\x02\x02\u0A36\u0A34\x03\x02\x02\x02" +
        "\u0A36\u0A37\x03\x02\x02\x02\u0A37\u0A40\x03\x02\x02\x02\u0A38\u0A36\x03" +
        "\x02\x02\x02\u0A39\u0A3D\x05:\x1E\x02\u0A3A\u0A3C\x07\xA7\x02\x02\u0A3B" +
        "\u0A3A\x03\x02\x02\x02\u0A3C\u0A3F\x03\x02\x02\x02\u0A3D\u0A3B\x03\x02" +
        "\x02\x02\u0A3D\u0A3E\x03\x02\x02\x02\u0A3E\u0A41\x03\x02\x02\x02\u0A3F" +
        "\u0A3D\x03\x02\x02\x02\u0A40\u0A39\x03\x02\x02\x02\u0A41\u0A42\x03\x02" +
        "\x02\x02\u0A42\u0A40\x03\x02\x02\x02\u0A42\u0A43\x03\x02\x02\x02\u0A43" +
        "\xCF\x03\x02\x02\x02\u0A44\u0A45\x07j\x02\x02\u0A45\u0A46\x05\u0110\x89" +
        "\x02\u0A46\u0A4A\x07\x92\x02\x02\u0A47\u0A49\x07\xA7\x02\x02\u0A48\u0A47" +
        "\x03\x02\x02\x02\u0A49\u0A4C\x03\x02\x02\x02\u0A4A\u0A48\x03\x02\x02\x02" +
        "\u0A4A\u0A4B\x03\x02\x02\x02\u0A4B\u0A54\x03\x02\x02\x02\u0A4C\u0A4A\x03" +
        "\x02\x02\x02\u0A4D\u0A51\x05:\x1E\x02\u0A4E\u0A50\x07\xA7\x02\x02\u0A4F" +
        "\u0A4E\x03\x02\x02\x02\u0A50\u0A53\x03\x02\x02\x02\u0A51\u0A4F\x03\x02" +
        "\x02\x02\u0A51\u0A52\x03\x02\x02\x02\u0A52\u0A55\x03\x02\x02\x02\u0A53" +
        "\u0A51\x03\x02\x02\x02\u0A54\u0A4D\x03\x02\x02\x02\u0A55\u0A56\x03\x02" +
        "\x02\x02\u0A56\u0A54\x03\x02\x02\x02\u0A56\u0A57\x03\x02\x02\x02\u0A57" +
        "\xD1\x03\x02\x02\x02\u0A58\u0A59\x07k\x02\x02\u0A59\u0A5A\x05\u0110\x89" +
        "\x02\u0A5A\u0A5E\x07\x92\x02\x02\u0A5B\u0A5D\x07\xA7\x02\x02\u0A5C\u0A5B" +
        "\x03\x02\x02\x02\u0A5D\u0A60\x03\x02\x02\x02\u0A5E\u0A5C\x03\x02\x02\x02" +
        "\u0A5E\u0A5F\x03\x02\x02\x02\u0A5F\u0A68\x03\x02\x02\x02\u0A60\u0A5E\x03" +
        "\x02\x02\x02\u0A61\u0A65\x05:\x1E\x02\u0A62\u0A64\x07\xA7\x02\x02\u0A63" +
        "\u0A62\x03\x02\x02\x02\u0A64\u0A67\x03\x02\x02\x02\u0A65\u0A63\x03\x02" +
        "\x02\x02\u0A65\u0A66\x03\x02\x02\x02\u0A66\u0A69\x03\x02\x02\x02\u0A67" +
        "\u0A65\x03\x02\x02\x02\u0A68\u0A61\x03\x02\x02\x02\u0A69\u0A6A\x03\x02" +
        "\x02\x02\u0A6A\u0A68\x03\x02\x02\x02\u0A6A\u0A6B\x03\x02\x02\x02\u0A6B" +
        "\xD3\x03\x02\x02\x02\u0A6C\u0A6D\x07l\x02\x02\u0A6D\u0A6E\x05\u0110\x89" +
        "\x02\u0A6E\u0A72\x07\x92\x02\x02\u0A6F\u0A71\x07\xA7\x02\x02\u0A70\u0A6F" +
        "\x03\x02\x02\x02\u0A71\u0A74\x03\x02\x02\x02\u0A72\u0A70\x03\x02\x02\x02" +
        "\u0A72\u0A73\x03\x02\x02\x02\u0A73\u0A7C\x03\x02\x02\x02\u0A74\u0A72\x03" +
        "\x02\x02\x02\u0A75\u0A79\x05:\x1E\x02\u0A76\u0A78\x07\xA7\x02\x02\u0A77" +
        "\u0A76\x03\x02\x02\x02\u0A78\u0A7B\x03\x02\x02\x02\u0A79\u0A77\x03\x02" +
        "\x02\x02\u0A79\u0A7A\x03\x02\x02\x02\u0A7A\u0A7D\x03\x02\x02\x02\u0A7B" +
        "\u0A79\x03\x02\x02\x02\u0A7C\u0A75\x03\x02\x02\x02\u0A7D\u0A7E\x03\x02" +
        "\x02\x02\u0A7E\u0A7C\x03\x02\x02\x02\u0A7E\u0A7F\x03\x02\x02\x02\u0A7F" +
        "\xD5\x03\x02\x02\x02\u0A80\u0A81\x07m\x02\x02\u0A81\u0A82\x05\u0110\x89" +
        "\x02\u0A82\u0A86\x07\x92\x02\x02\u0A83\u0A85\x07\xA7\x02\x02\u0A84\u0A83" +
        "\x03\x02\x02\x02\u0A85\u0A88\x03\x02\x02\x02\u0A86\u0A84\x03\x02\x02\x02" +
        "\u0A86\u0A87\x03\x02\x02\x02\u0A87\u0A90\x03\x02\x02\x02\u0A88\u0A86\x03" +
        "\x02\x02\x02\u0A89\u0A8D\x05:\x1E\x02\u0A8A\u0A8C\x07\xA7\x02\x02\u0A8B" +
        "\u0A8A\x03\x02\x02\x02\u0A8C\u0A8F\x03\x02\x02\x02\u0A8D\u0A8B\x03\x02" +
        "\x02\x02\u0A8D\u0A8E\x03\x02\x02\x02\u0A8E\u0A91\x03\x02\x02\x02\u0A8F" +
        "\u0A8D\x03\x02\x02\x02\u0A90\u0A89\x03\x02\x02\x02\u0A91\u0A92\x03\x02" +
        "\x02\x02\u0A92\u0A90\x03\x02\x02\x02\u0A92\u0A93\x03\x02\x02\x02\u0A93" +
        "\xD7\x03\x02\x02\x02\u0A94\u0A95\x07n\x02\x02\u0A95\u0A96\x05\u0110\x89" +
        "\x02\u0A96\u0A9A\x07\x92\x02\x02\u0A97\u0A99\x07\xA7\x02\x02\u0A98\u0A97" +
        "\x03\x02\x02\x02\u0A99\u0A9C\x03\x02\x02\x02\u0A9A\u0A98\x03\x02\x02\x02" +
        "\u0A9A\u0A9B\x03\x02\x02\x02\u0A9B\u0AA4\x03\x02\x02\x02\u0A9C\u0A9A\x03" +
        "\x02\x02\x02\u0A9D\u0AA1\x05:\x1E\x02\u0A9E\u0AA0\x07\xA7\x02\x02\u0A9F" +
        "\u0A9E\x03\x02\x02\x02\u0AA0\u0AA3\x03\x02\x02\x02\u0AA1\u0A9F\x03\x02" +
        "\x02\x02\u0AA1\u0AA2\x03\x02\x02\x02\u0AA2\u0AA5\x03\x02\x02\x02\u0AA3" +
        "\u0AA1\x03\x02\x02\x02\u0AA4\u0A9D\x03\x02\x02\x02\u0AA5\u0AA6\x03\x02" +
        "\x02\x02\u0AA6\u0AA4\x03\x02\x02\x02\u0AA6\u0AA7\x03\x02\x02\x02\u0AA7" +
        "\xD9\x03\x02\x02\x02\u0AA8\u0AA9\x07o\x02\x02\u0AA9\u0AAA\x05\u0110\x89" +
        "\x02\u0AAA\u0AAE\x07\x92\x02\x02\u0AAB\u0AAD\x07\xA7\x02\x02\u0AAC\u0AAB" +
        "\x03\x02\x02\x02\u0AAD\u0AB0\x03\x02\x02\x02\u0AAE\u0AAC\x03\x02\x02\x02" +
        "\u0AAE\u0AAF\x03\x02\x02\x02\u0AAF\u0AB8\x03\x02\x02\x02\u0AB0\u0AAE\x03" +
        "\x02\x02\x02\u0AB1\u0AB5\x05:\x1E\x02\u0AB2\u0AB4\x07\xA7\x02\x02\u0AB3" +
        "\u0AB2\x03\x02\x02\x02\u0AB4\u0AB7\x03\x02\x02\x02\u0AB5\u0AB3\x03\x02" +
        "\x02\x02\u0AB5\u0AB6\x03\x02\x02\x02\u0AB6\u0AB9\x03\x02\x02\x02\u0AB7" +
        "\u0AB5\x03\x02\x02\x02\u0AB8\u0AB1\x03\x02\x02\x02\u0AB9\u0ABA\x03\x02" +
        "\x02\x02\u0ABA\u0AB8\x03\x02\x02\x02\u0ABA\u0ABB\x03\x02\x02\x02\u0ABB" +
        "\xDB\x03\x02\x02\x02\u0ABC\u0ABD\x07p\x02\x02\u0ABD\u0ABE\x05\u0110\x89" +
        "\x02\u0ABE\u0AC2\x07\x92\x02\x02\u0ABF\u0AC1\x07\xA7\x02\x02\u0AC0\u0ABF" +
        "\x03\x02\x02\x02\u0AC1\u0AC4\x03\x02\x02\x02\u0AC2\u0AC0\x03\x02\x02\x02" +
        "\u0AC2\u0AC3\x03\x02\x02\x02\u0AC3\u0ACC\x03\x02\x02\x02\u0AC4\u0AC2\x03" +
        "\x02\x02\x02\u0AC5\u0AC9\x05:\x1E\x02\u0AC6\u0AC8\x07\xA7\x02\x02\u0AC7" +
        "\u0AC6\x03\x02\x02\x02\u0AC8\u0ACB\x03\x02\x02\x02\u0AC9\u0AC7\x03\x02" +
        "\x02\x02\u0AC9\u0ACA\x03\x02\x02\x02\u0ACA\u0ACD\x03\x02\x02\x02\u0ACB" +
        "\u0AC9\x03\x02\x02\x02\u0ACC\u0AC5\x03\x02\x02\x02\u0ACD\u0ACE\x03\x02" +
        "\x02\x02\u0ACE\u0ACC\x03\x02\x02\x02\u0ACE\u0ACF\x03\x02\x02\x02\u0ACF" +
        "\xDD\x03\x02\x02\x02\u0AD0\u0AD1\x07q\x02\x02\u0AD1\u0AD2\x05\u0110\x89" +
        "\x02\u0AD2\u0AD6\x07\x92\x02\x02\u0AD3\u0AD5\x07\xA7\x02\x02\u0AD4\u0AD3" +
        "\x03\x02\x02\x02\u0AD5\u0AD8\x03\x02\x02\x02\u0AD6\u0AD4\x03\x02\x02\x02" +
        "\u0AD6\u0AD7\x03\x02\x02\x02\u0AD7\u0AE0\x03\x02\x02\x02\u0AD8\u0AD6\x03" +
        "\x02\x02\x02\u0AD9\u0ADD\x05:\x1E\x02\u0ADA\u0ADC\x07\xA7\x02\x02\u0ADB" +
        "\u0ADA\x03\x02\x02\x02\u0ADC\u0ADF\x03\x02\x02\x02\u0ADD\u0ADB\x03\x02" +
        "\x02\x02\u0ADD\u0ADE\x03\x02\x02\x02\u0ADE\u0AE1\x03\x02\x02\x02\u0ADF" +
        "\u0ADD\x03\x02\x02\x02\u0AE0\u0AD9\x03\x02\x02\x02\u0AE1\u0AE2\x03\x02" +
        "\x02\x02\u0AE2\u0AE0\x03\x02\x02\x02\u0AE2\u0AE3\x03\x02\x02\x02\u0AE3" +
        "\xDF\x03\x02\x02\x02\u0AE4\u0AE5\x07r\x02\x02\u0AE5\u0AE6\x05\u0110\x89" +
        "\x02\u0AE6\u0AEA\x07\x92\x02\x02\u0AE7\u0AE9\x07\xA7\x02\x02\u0AE8\u0AE7" +
        "\x03\x02\x02\x02\u0AE9\u0AEC\x03\x02\x02\x02\u0AEA\u0AE8\x03\x02\x02\x02" +
        "\u0AEA\u0AEB\x03\x02\x02\x02\u0AEB\u0AF4\x03\x02\x02\x02\u0AEC\u0AEA\x03" +
        "\x02\x02\x02\u0AED\u0AF1\x05:\x1E\x02\u0AEE\u0AF0\x07\xA7\x02\x02\u0AEF" +
        "\u0AEE\x03\x02\x02\x02\u0AF0\u0AF3\x03\x02\x02\x02\u0AF1\u0AEF\x03\x02" +
        "\x02\x02\u0AF1\u0AF2\x03\x02\x02\x02\u0AF2\u0AF5\x03\x02\x02\x02\u0AF3" +
        "\u0AF1\x03\x02\x02\x02\u0AF4\u0AED\x03\x02\x02\x02\u0AF5\u0AF6\x03\x02" +
        "\x02\x02\u0AF6\u0AF4\x03\x02\x02\x02\u0AF6\u0AF7\x03\x02\x02\x02\u0AF7" +
        "\xE1\x03\x02\x02\x02\u0AF8\u0AF9\x07s\x02\x02\u0AF9\u0AFA\x05\u0110\x89" +
        "\x02\u0AFA\u0AFE\x07\x92\x02\x02\u0AFB\u0AFD\x07\xA7\x02\x02\u0AFC\u0AFB" +
        "\x03\x02\x02\x02\u0AFD\u0B00\x03\x02\x02\x02\u0AFE\u0AFC\x03\x02\x02\x02" +
        "\u0AFE\u0AFF\x03\x02\x02\x02\u0AFF\u0B08\x03\x02\x02\x02\u0B00\u0AFE\x03" +
        "\x02\x02\x02\u0B01\u0B05\x05:\x1E\x02\u0B02\u0B04\x07\xA7\x02\x02\u0B03" +
        "\u0B02\x03\x02\x02\x02\u0B04\u0B07\x03\x02\x02\x02\u0B05\u0B03\x03\x02" +
        "\x02\x02\u0B05\u0B06\x03\x02\x02\x02\u0B06\u0B09\x03\x02\x02\x02\u0B07" +
        "\u0B05\x03\x02\x02\x02\u0B08\u0B01\x03\x02\x02\x02\u0B09\u0B0A\x03\x02" +
        "\x02\x02\u0B0A\u0B08\x03\x02\x02\x02\u0B0A\u0B0B\x03\x02\x02\x02\u0B0B" +
        "\xE3\x03\x02\x02\x02\u0B0C\u0B0D\x07t\x02\x02\u0B0D\u0B0E\x05\u0110\x89" +
        "\x02\u0B0E\u0B12\x07\x92\x02\x02\u0B0F\u0B11\x07\xA7\x02\x02\u0B10\u0B0F" +
        "\x03\x02\x02\x02\u0B11\u0B14\x03\x02\x02\x02\u0B12\u0B10\x03\x02\x02\x02" +
        "\u0B12\u0B13\x03\x02\x02\x02\u0B13\u0B1C\x03\x02\x02\x02\u0B14\u0B12\x03" +
        "\x02\x02\x02\u0B15\u0B19\x05:\x1E\x02\u0B16\u0B18\x07\xA7\x02\x02\u0B17" +
        "\u0B16\x03\x02\x02\x02\u0B18\u0B1B\x03\x02\x02\x02\u0B19\u0B17\x03\x02" +
        "\x02\x02\u0B19\u0B1A\x03\x02\x02\x02\u0B1A\u0B1D\x03\x02\x02\x02\u0B1B" +
        "\u0B19\x03\x02\x02\x02\u0B1C\u0B15\x03\x02\x02\x02\u0B1D\u0B1E\x03\x02" +
        "\x02\x02\u0B1E\u0B1C\x03\x02\x02\x02\u0B1E\u0B1F\x03\x02\x02\x02\u0B1F" +
        "\xE5\x03\x02\x02\x02\u0B20\u0B21\x07u\x02\x02\u0B21\u0B22\x05\u0110\x89" +
        "\x02\u0B22\u0B26\x07\x92\x02\x02\u0B23\u0B25\x07\xA7\x02\x02\u0B24\u0B23" +
        "\x03\x02\x02\x02\u0B25\u0B28\x03\x02\x02\x02\u0B26\u0B24\x03\x02\x02\x02" +
        "\u0B26\u0B27\x03\x02\x02\x02\u0B27\u0B30\x03\x02\x02\x02\u0B28\u0B26\x03" +
        "\x02\x02\x02\u0B29\u0B2D\x05:\x1E\x02\u0B2A\u0B2C\x07\xA7\x02\x02\u0B2B" +
        "\u0B2A\x03\x02\x02\x02\u0B2C\u0B2F\x03\x02\x02\x02\u0B2D\u0B2B\x03\x02" +
        "\x02\x02\u0B2D\u0B2E\x03\x02\x02\x02\u0B2E\u0B31\x03\x02\x02\x02\u0B2F" +
        "\u0B2D\x03\x02\x02\x02\u0B30\u0B29\x03\x02\x02\x02\u0B31\u0B32\x03\x02" +
        "\x02\x02\u0B32\u0B30\x03\x02\x02\x02\u0B32\u0B33\x03\x02\x02\x02\u0B33" +
        "\xE7\x03\x02\x02\x02\u0B34\u0B35\x07v\x02\x02\u0B35\u0B36\x05\u0110\x89" +
        "\x02\u0B36\u0B3A\x07\x92\x02\x02\u0B37\u0B39\x07\xA7\x02\x02\u0B38\u0B37" +
        "\x03\x02\x02\x02\u0B39\u0B3C\x03\x02\x02\x02\u0B3A\u0B38\x03\x02\x02\x02" +
        "\u0B3A\u0B3B\x03\x02\x02\x02\u0B3B\u0B44\x03\x02\x02\x02\u0B3C\u0B3A\x03" +
        "\x02\x02\x02\u0B3D\u0B41\x05:\x1E\x02\u0B3E\u0B40\x07\xA7\x02\x02\u0B3F" +
        "\u0B3E\x03\x02\x02\x02\u0B40\u0B43\x03\x02\x02\x02\u0B41\u0B3F\x03\x02" +
        "\x02\x02\u0B41\u0B42\x03\x02\x02\x02\u0B42\u0B45\x03\x02\x02\x02\u0B43" +
        "\u0B41\x03\x02\x02\x02\u0B44\u0B3D\x03\x02\x02\x02\u0B45\u0B46\x03\x02" +
        "\x02\x02\u0B46\u0B44\x03\x02\x02\x02\u0B46\u0B47\x03\x02\x02\x02\u0B47" +
        "\xE9\x03\x02\x02\x02\u0B48\u0B49\x07w\x02\x02\u0B49\u0B4A\x05\u0110\x89" +
        "\x02\u0B4A\u0B4E\x07\x92\x02\x02\u0B4B\u0B4D\x07\xA7\x02\x02\u0B4C\u0B4B" +
        "\x03\x02\x02\x02\u0B4D\u0B50\x03\x02\x02\x02\u0B4E\u0B4C\x03\x02\x02\x02" +
        "\u0B4E\u0B4F\x03\x02\x02\x02\u0B4F\u0B58\x03\x02\x02\x02\u0B50\u0B4E\x03" +
        "\x02\x02\x02\u0B51\u0B55\x05:\x1E\x02\u0B52\u0B54\x07\xA7\x02\x02\u0B53" +
        "\u0B52\x03\x02\x02\x02\u0B54\u0B57\x03\x02\x02\x02\u0B55\u0B53\x03\x02" +
        "\x02\x02\u0B55\u0B56\x03\x02\x02\x02\u0B56\u0B59\x03\x02\x02\x02\u0B57" +
        "\u0B55\x03\x02\x02\x02\u0B58\u0B51\x03\x02\x02\x02\u0B59\u0B5A\x03\x02" +
        "\x02\x02\u0B5A\u0B58\x03\x02\x02\x02\u0B5A\u0B5B\x03\x02\x02\x02\u0B5B" +
        "\xEB\x03\x02\x02\x02\u0B5C\u0B5D\x07x\x02\x02\u0B5D\u0B5E\x05\u0110\x89" +
        "\x02\u0B5E\u0B62\x07\x92\x02\x02\u0B5F\u0B61\x07\xA7\x02\x02\u0B60\u0B5F" +
        "\x03\x02\x02\x02\u0B61\u0B64\x03\x02\x02\x02\u0B62\u0B60\x03\x02\x02\x02" +
        "\u0B62\u0B63\x03\x02\x02\x02\u0B63\u0B6C\x03\x02\x02\x02\u0B64\u0B62\x03" +
        "\x02\x02\x02\u0B65\u0B69\x05:\x1E\x02\u0B66\u0B68\x07\xA7\x02\x02\u0B67" +
        "\u0B66\x03\x02\x02\x02\u0B68\u0B6B\x03\x02\x02\x02\u0B69\u0B67\x03\x02" +
        "\x02\x02\u0B69\u0B6A\x03\x02\x02\x02\u0B6A\u0B6D\x03\x02\x02\x02\u0B6B" +
        "\u0B69\x03\x02\x02\x02\u0B6C\u0B65\x03\x02\x02\x02\u0B6D\u0B6E\x03\x02" +
        "\x02\x02\u0B6E\u0B6C\x03\x02\x02\x02\u0B6E\u0B6F\x03\x02\x02\x02\u0B6F" +
        "\xED\x03\x02\x02\x02\u0B70\u0B71\x07y\x02\x02\u0B71\u0B72\x05\u0110\x89" +
        "\x02\u0B72\u0B76\x07\x92\x02\x02\u0B73\u0B75\x07\xA7\x02\x02\u0B74\u0B73" +
        "\x03\x02\x02\x02\u0B75\u0B78\x03\x02\x02\x02\u0B76\u0B74\x03\x02\x02\x02" +
        "\u0B76\u0B77\x03\x02\x02\x02\u0B77\u0B80\x03\x02\x02\x02\u0B78\u0B76\x03" +
        "\x02\x02\x02\u0B79\u0B7D\x05:\x1E\x02\u0B7A\u0B7C\x07\xA7\x02\x02\u0B7B" +
        "\u0B7A\x03\x02\x02\x02\u0B7C\u0B7F\x03\x02\x02\x02\u0B7D\u0B7B\x03\x02" +
        "\x02\x02\u0B7D\u0B7E\x03\x02\x02\x02\u0B7E\u0B81\x03\x02\x02\x02\u0B7F" +
        "\u0B7D\x03\x02\x02\x02\u0B80\u0B79\x03\x02\x02\x02\u0B81\u0B82\x03\x02" +
        "\x02\x02\u0B82\u0B80\x03\x02\x02\x02\u0B82\u0B83\x03\x02\x02\x02\u0B83" +
        "\xEF\x03\x02\x02\x02\u0B84\u0B85\x07z\x02\x02\u0B85\u0B86\x05\u0110\x89" +
        "\x02\u0B86\u0B8A\x07\x92\x02\x02\u0B87\u0B89\x07\xA7\x02\x02\u0B88\u0B87" +
        "\x03\x02\x02\x02\u0B89\u0B8C\x03\x02\x02\x02\u0B8A\u0B88\x03\x02\x02\x02" +
        "\u0B8A\u0B8B\x03\x02\x02\x02\u0B8B\u0B94\x03\x02\x02\x02\u0B8C\u0B8A\x03" +
        "\x02\x02\x02\u0B8D\u0B91\x05:\x1E\x02\u0B8E\u0B90\x07\xA7\x02\x02\u0B8F" +
        "\u0B8E\x03\x02\x02\x02\u0B90\u0B93\x03\x02\x02\x02\u0B91\u0B8F\x03\x02" +
        "\x02\x02\u0B91\u0B92\x03\x02\x02\x02\u0B92\u0B95\x03\x02\x02\x02\u0B93" +
        "\u0B91\x03\x02\x02\x02\u0B94\u0B8D\x03\x02\x02\x02\u0B95\u0B96\x03\x02" +
        "\x02\x02\u0B96\u0B94\x03\x02\x02\x02\u0B96\u0B97\x03\x02\x02\x02\u0B97" +
        "\xF1\x03\x02\x02\x02\u0B98\u0B99\x07{\x02\x02\u0B99\u0B9A\x05\u0110\x89" +
        "\x02\u0B9A\u0B9E\x07\x92\x02\x02\u0B9B\u0B9D\x07\xA7\x02\x02\u0B9C\u0B9B" +
        "\x03\x02\x02\x02\u0B9D\u0BA0\x03\x02\x02\x02\u0B9E\u0B9C\x03\x02\x02\x02" +
        "\u0B9E\u0B9F\x03\x02\x02\x02\u0B9F\u0BA8\x03\x02\x02\x02\u0BA0\u0B9E\x03" +
        "\x02\x02\x02\u0BA1\u0BA5\x05:\x1E\x02\u0BA2\u0BA4\x07\xA7\x02\x02\u0BA3" +
        "\u0BA2\x03\x02\x02\x02\u0BA4\u0BA7\x03\x02\x02\x02\u0BA5\u0BA3\x03\x02" +
        "\x02\x02\u0BA5\u0BA6\x03\x02\x02\x02\u0BA6\u0BA9\x03\x02\x02\x02\u0BA7" +
        "\u0BA5\x03\x02\x02\x02\u0BA8\u0BA1\x03\x02\x02\x02\u0BA9\u0BAA\x03\x02" +
        "\x02\x02\u0BAA\u0BA8\x03\x02\x02\x02\u0BAA\u0BAB\x03\x02\x02\x02\u0BAB" +
        "\xF3\x03\x02\x02\x02\u0BAC\u0BAD\x07|\x02\x02\u0BAD\u0BAE\x05\u0110\x89" +
        "\x02\u0BAE\u0BB2\x07\x92\x02\x02\u0BAF\u0BB1\x07\xA7\x02\x02\u0BB0\u0BAF" +
        "\x03\x02\x02\x02\u0BB1\u0BB4\x03\x02\x02\x02\u0BB2\u0BB0\x03\x02\x02\x02" +
        "\u0BB2\u0BB3\x03\x02\x02\x02\u0BB3\u0BBC\x03\x02\x02\x02\u0BB4\u0BB2\x03" +
        "\x02\x02\x02\u0BB5\u0BB9\x05:\x1E\x02\u0BB6\u0BB8\x07\xA7\x02\x02\u0BB7" +
        "\u0BB6\x03\x02\x02\x02\u0BB8\u0BBB\x03\x02\x02\x02\u0BB9\u0BB7\x03\x02" +
        "\x02\x02\u0BB9\u0BBA\x03\x02\x02\x02\u0BBA\u0BBD\x03\x02\x02\x02\u0BBB" +
        "\u0BB9\x03\x02\x02\x02\u0BBC\u0BB5\x03\x02\x02\x02\u0BBD\u0BBE\x03\x02" +
        "\x02\x02\u0BBE\u0BBC\x03\x02\x02\x02\u0BBE\u0BBF\x03\x02\x02\x02\u0BBF" +
        "\xF5\x03\x02\x02\x02\u0BC0\u0BC1\x07}\x02\x02\u0BC1\u0BC2\x05\u0110\x89" +
        "\x02\u0BC2\u0BC6\x07\x92\x02\x02\u0BC3\u0BC5\x07\xA7\x02\x02\u0BC4\u0BC3" +
        "\x03\x02\x02\x02\u0BC5\u0BC8\x03\x02\x02\x02\u0BC6\u0BC4\x03\x02\x02\x02" +
        "\u0BC6\u0BC7\x03\x02\x02\x02\u0BC7\u0BD0\x03\x02\x02\x02\u0BC8\u0BC6\x03" +
        "\x02\x02\x02\u0BC9\u0BCD\x05:\x1E\x02\u0BCA\u0BCC\x07\xA7\x02\x02\u0BCB" +
        "\u0BCA\x03\x02\x02\x02\u0BCC\u0BCF\x03\x02\x02\x02\u0BCD\u0BCB\x03\x02" +
        "\x02\x02\u0BCD\u0BCE\x03\x02\x02\x02\u0BCE\u0BD1\x03\x02\x02\x02\u0BCF" +
        "\u0BCD\x03\x02\x02\x02\u0BD0\u0BC9\x03\x02\x02\x02\u0BD1\u0BD2\x03\x02" +
        "\x02\x02\u0BD2\u0BD0\x03\x02\x02\x02\u0BD2\u0BD3\x03\x02\x02\x02\u0BD3" +
        "\xF7\x03\x02\x02\x02\u0BD4\u0BD5\x07\x18\x02\x02\u0BD5\u0BD6\x05\u0110" +
        "\x89\x02\u0BD6\u0BDA\x07\x92\x02\x02\u0BD7\u0BD9\x07\xA7\x02\x02\u0BD8" +
        "\u0BD7\x03\x02\x02\x02\u0BD9\u0BDC\x03\x02\x02\x02\u0BDA\u0BD8\x03\x02" +
        "\x02\x02\u0BDA\u0BDB\x03\x02\x02\x02\u0BDB\u0BE4\x03\x02\x02\x02\u0BDC" +
        "\u0BDA";
    bitmarkParser._serializedATNSegment6 = "\x03\x02\x02\x02\u0BDD\u0BE1\x05:\x1E\x02\u0BDE\u0BE0\x07\xA7\x02\x02" +
        "\u0BDF\u0BDE\x03\x02\x02\x02\u0BE0\u0BE3\x03\x02\x02\x02\u0BE1\u0BDF\x03" +
        "\x02\x02\x02\u0BE1\u0BE2\x03\x02\x02\x02\u0BE2\u0BE5\x03\x02\x02\x02\u0BE3" +
        "\u0BE1\x03\x02\x02\x02\u0BE4\u0BDD\x03\x02\x02\x02\u0BE5\u0BE6\x03\x02" +
        "\x02\x02\u0BE6\u0BE4\x03\x02\x02\x02\u0BE6\u0BE7\x03\x02\x02\x02\u0BE7" +
        "\xF9\x03\x02\x02\x02\u0BE8\u0BE9\x07 \x02\x02\u0BE9\u0BEA\x05\u0110\x89" +
        "\x02\u0BEA\u0BF5\x07\x92\x02\x02\u0BEB\u0BEC\t\x07\x02\x02\u0BEC\u0BF2" +
        "\x05\xFC\x7F\x02\u0BED\u0BEE\x05\u018C\xC7\x02\u0BEE\u0BEF\x05\xFC\x7F" +
        "\x02\u0BEF\u0BF1\x03\x02\x02\x02\u0BF0\u0BED\x03\x02\x02\x02\u0BF1\u0BF4" +
        "\x03\x02\x02\x02\u0BF2\u0BF0\x03\x02\x02\x02\u0BF2\u0BF3\x03\x02\x02\x02" +
        "\u0BF3\u0BF6\x03\x02\x02\x02\u0BF4\u0BF2\x03\x02\x02\x02\u0BF5\u0BEB\x03" +
        "\x02\x02\x02\u0BF6\u0BF7\x03\x02\x02\x02\u0BF7\u0BF5\x03\x02\x02\x02\u0BF7" +
        "\u0BF8\x03\x02\x02\x02\u0BF8\u0BF9\x03\x02\x02\x02\u0BF9\u0BFD\t\x07\x02" +
        "\x02\u0BFA\u0BFC\x07\xA7\x02\x02\u0BFB\u0BFA\x03\x02\x02\x02\u0BFC\u0BFF" +
        "\x03\x02\x02\x02\u0BFD\u0BFB\x03\x02\x02\x02\u0BFD\u0BFE\x03\x02\x02\x02" +
        "\u0BFE\u0C0D\x03\x02\x02\x02\u0BFF\u0BFD\x03\x02\x02\x02\u0C00\u0C0A\x05" +
        "L\'\x02\u0C01\u0C03\x07\xA7\x02\x02\u0C02\u0C01\x03\x02\x02\x02\u0C03" +
        "\u0C06\x03\x02\x02\x02\u0C04\u0C02\x03\x02\x02\x02\u0C04\u0C05\x03\x02" +
        "\x02\x02\u0C05\u0C07\x03\x02\x02\x02\u0C06\u0C04\x03\x02\x02\x02\u0C07" +
        "\u0C09\x05L\'\x02\u0C08\u0C04\x03\x02\x02\x02\u0C09\u0C0C\x03\x02\x02" +
        "\x02\u0C0A\u0C08\x03\x02\x02\x02\u0C0A\u0C0B\x03\x02\x02\x02\u0C0B\u0C0E" +
        "\x03\x02\x02\x02\u0C0C\u0C0A\x03\x02\x02\x02\u0C0D\u0C00\x03\x02\x02\x02" +
        "\u0C0D\u0C0E\x03\x02\x02\x02\u0C0E\xFB\x03\x02\x02\x02\u0C0F\u0C17\x05" +
        "\u018E\xC8\x02\u0C10\u0C17\x05\u016C\xB7\x02\u0C11\u0C17\x05\u014C\xA7" +
        "\x02\u0C12\u0C17\x05<\x1F\x02\u0C13\u0C17\x05@!\x02\u0C14\u0C17\x05B\"" +
        "\x02\u0C15\u0C17\x05D#\x02\u0C16\u0C0F\x03\x02\x02\x02\u0C16\u0C10\x03" +
        "\x02\x02\x02\u0C16\u0C11\x03\x02\x02\x02\u0C16\u0C12\x03\x02\x02\x02\u0C16" +
        "\u0C13\x03\x02\x02\x02\u0C16\u0C14\x03\x02\x02\x02\u0C16\u0C15\x03\x02" +
        "\x02\x02\u0C17\u0C18\x03\x02\x02\x02\u0C18\u0C16\x03\x02\x02\x02\u0C18" +
        "\u0C19\x03\x02\x02\x02\u0C19\xFD\x03\x02\x02\x02\u0C1A\u0C1B\x07\"\x02" +
        "\x02\u0C1B\u0C1C\x05\u0110\x89\x02\u0C1C\u0C20\x07\x92\x02\x02\u0C1D\u0C1F" +
        "\x07\xA7\x02\x02\u0C1E\u0C1D\x03\x02\x02\x02\u0C1F\u0C22\x03\x02\x02\x02" +
        "\u0C20\u0C1E\x03\x02\x02\x02\u0C20\u0C21\x03\x02\x02\x02\u0C21\u0C2C\x03" +
        "\x02\x02\x02\u0C22\u0C20\x03\x02\x02\x02\u0C23\u0C27\x05:\x1E\x02\u0C24" +
        "\u0C26\x07\xA7\x02\x02\u0C25\u0C24\x03\x02\x02\x02\u0C26\u0C29\x03\x02" +
        "\x02\x02\u0C27\u0C25\x03\x02\x02\x02\u0C27\u0C28\x03\x02\x02\x02\u0C28" +
        "\u0C2B\x03\x02\x02\x02\u0C29\u0C27\x03\x02\x02\x02\u0C2A\u0C23\x03\x02" +
        "\x02\x02\u0C2B\u0C2E\x03\x02\x02\x02\u0C2C\u0C2A\x03\x02\x02\x02\u0C2C" +
        "\u0C2D\x03\x02\x02\x02\u0C2D\u0C37\x03\x02\x02\x02\u0C2E\u0C2C\x03\x02" +
        "\x02\x02\u0C2F\u0C30\t\x07\x02\x02\u0C30\u0C33\x05\u0184\xC3\x02\u0C31" +
        "\u0C32\x07\xA7\x02\x02\u0C32\u0C34\x05\u0100\x81\x02\u0C33\u0C31\x03\x02" +
        "\x02\x02\u0C34\u0C35\x03\x02\x02\x02\u0C35\u0C33\x03\x02\x02\x02\u0C35" +
        "\u0C36\x03\x02\x02\x02\u0C36\u0C38\x03\x02\x02\x02\u0C37\u0C2F\x03\x02" +
        "\x02\x02\u0C38\u0C39\x03\x02\x02\x02\u0C39\u0C37\x03\x02\x02\x02\u0C39" +
        "\u0C3A\x03\x02\x02\x02\u0C3A\u0C3B\x03\x02\x02\x02\u0C3B\u0C3F\t\x07\x02" +
        "\x02\u0C3C\u0C3E\x07\xA7\x02\x02\u0C3D\u0C3C\x03\x02\x02\x02\u0C3E\u0C41" +
        "\x03\x02\x02\x02\u0C3F\u0C3D\x03\x02\x02\x02\u0C3F\u0C40\x03\x02\x02\x02" +
        "\u0C40\u0C4F\x03\x02\x02\x02\u0C41\u0C3F\x03\x02\x02\x02\u0C42\u0C4C\x05" +
        "L\'\x02\u0C43\u0C45\x07\xA7\x02\x02\u0C44\u0C43\x03\x02\x02\x02\u0C45" +
        "\u0C48\x03\x02\x02\x02\u0C46\u0C44\x03\x02\x02\x02\u0C46\u0C47\x03\x02" +
        "\x02\x02\u0C47\u0C49\x03\x02\x02\x02\u0C48\u0C46\x03\x02\x02\x02\u0C49" +
        "\u0C4B\x05L\'\x02\u0C4A\u0C46\x03\x02\x02\x02\u0C4B\u0C4E\x03\x02\x02" +
        "\x02\u0C4C\u0C4A\x03\x02\x02\x02\u0C4C\u0C4D\x03\x02\x02\x02\u0C4D\u0C50" +
        "\x03\x02\x02\x02\u0C4E\u0C4C\x03\x02\x02\x02\u0C4F\u0C42\x03\x02\x02\x02" +
        "\u0C4F\u0C50\x03\x02\x02\x02\u0C50\xFF\x03\x02\x02\x02\u0C51\u0C52\x07" +
        "\x83\x02\x02\u0C52\u0C53\x05\u0184\xC3\x02\u0C53\u0C55\x07\x92\x02\x02" +
        "\u0C54\u0C56\x05\u010E\x88\x02\u0C55\u0C54\x03\x02\x02\x02\u0C55\u0C56" +
        "\x03\x02\x02\x02\u0C56\u0101\x03\x02\x02\x02\u0C57\u0C58\x07#\x02\x02" +
        "\u0C58\u0C59\x05\u0110\x89\x02\u0C59\u0C5D\x07\x92\x02\x02\u0C5A\u0C5C" +
        "\x07\xA7\x02\x02\u0C5B\u0C5A\x03\x02\x02\x02\u0C5C\u0C5F\x03\x02\x02\x02" +
        "\u0C5D\u0C5B\x03\x02\x02\x02\u0C5D\u0C5E\x03\x02\x02\x02\u0C5E\u0C69\x03" +
        "\x02\x02\x02\u0C5F\u0C5D\x03\x02\x02\x02\u0C60\u0C64\x05:\x1E\x02\u0C61" +
        "\u0C63\x07\xA7\x02\x02\u0C62\u0C61\x03\x02\x02\x02\u0C63\u0C66\x03\x02" +
        "\x02\x02\u0C64\u0C62\x03\x02\x02\x02\u0C64\u0C65\x03\x02\x02\x02\u0C65" +
        "\u0C68\x03\x02\x02\x02\u0C66\u0C64\x03\x02\x02\x02\u0C67\u0C60\x03\x02" +
        "\x02\x02\u0C68\u0C6B\x03\x02\x02\x02\u0C69\u0C67\x03\x02\x02\x02\u0C69" +
        "\u0C6A\x03\x02\x02\x02\u0C6A\u0C7B\x03\x02\x02\x02\u0C6B\u0C69\x03\x02" +
        "\x02\x02\u0C6C\u0C6E\t\x07\x02\x02\u0C6D\u0C6F\x05\u0184\xC3\x02\u0C6E" +
        "\u0C6D\x03\x02\x02\x02\u0C6E\u0C6F\x03\x02\x02\x02\u0C6F\u0C77\x03\x02" +
        "\x02\x02\u0C70\u0C72\x07\xA7\x02\x02\u0C71\u0C70\x03\x02\x02\x02\u0C72" +
        "\u0C75\x03\x02\x02\x02\u0C73\u0C71\x03\x02\x02\x02\u0C73\u0C74\x03\x02" +
        "\x02\x02\u0C74\u0C76\x03\x02\x02\x02\u0C75\u0C73\x03\x02\x02\x02\u0C76" +
        "\u0C78\x05\u0100\x81\x02\u0C77\u0C73\x03\x02\x02\x02\u0C78\u0C79\x03\x02" +
        "\x02\x02\u0C79\u0C77\x03\x02\x02\x02\u0C79\u0C7A\x03\x02\x02\x02\u0C7A" +
        "\u0C7C\x03\x02\x02\x02\u0C7B\u0C6C\x03\x02\x02\x02\u0C7C\u0C7D\x03\x02" +
        "\x02\x02\u0C7D\u0C7B\x03\x02\x02\x02\u0C7D\u0C7E\x03\x02\x02\x02\u0C7E" +
        "\u0C7F\x03\x02\x02\x02\u0C7F\u0C80\t\x07\x02\x02\u0C80\u0103\x03\x02\x02" +
        "\x02\u0C81\u0C82\x07$\x02\x02\u0C82\u0C83\x05\u0110\x89\x02\u0C83\u0C87" +
        "\x07\x92\x02\x02\u0C84\u0C86\x07\xA7\x02\x02\u0C85\u0C84\x03\x02\x02\x02" +
        "\u0C86\u0C89\x03\x02\x02\x02\u0C87\u0C85\x03\x02\x02\x02\u0C87\u0C88\x03" +
        "\x02\x02\x02\u0C88\u0C93\x03\x02\x02\x02\u0C89\u0C87\x03\x02\x02\x02\u0C8A" +
        "\u0C8E\x05:\x1E\x02\u0C8B\u0C8D\x07\xA7\x02\x02\u0C8C\u0C8B\x03\x02\x02" +
        "\x02\u0C8D\u0C90\x03\x02\x02\x02\u0C8E\u0C8C\x03\x02\x02\x02\u0C8E\u0C8F" +
        "\x03\x02\x02\x02\u0C8F\u0C92\x03\x02\x02\x02\u0C90\u0C8E\x03\x02\x02\x02" +
        "\u0C91\u0C8A\x03\x02\x02\x02\u0C92\u0C95\x03\x02\x02\x02\u0C93\u0C91\x03" +
        "\x02\x02\x02\u0C93\u0C94\x03\x02\x02\x02\u0C94\u0C9E\x03\x02\x02\x02\u0C95" +
        "\u0C93\x03\x02\x02\x02\u0C96\u0C97\t\x07\x02\x02\u0C97\u0C9A\x05\u0184" +
        "\xC3\x02\u0C98\u0C99\x07\xA7\x02\x02\u0C99\u0C9B\x05\u0100\x81\x02\u0C9A" +
        "\u0C98\x03\x02\x02\x02\u0C9B\u0C9C\x03\x02\x02\x02\u0C9C\u0C9A\x03\x02" +
        "\x02\x02\u0C9C\u0C9D\x03\x02\x02\x02\u0C9D\u0C9F\x03\x02\x02\x02\u0C9E" +
        "\u0C96\x03\x02\x02\x02\u0C9F\u0CA0\x03\x02\x02\x02\u0CA0\u0C9E\x03\x02" +
        "\x02\x02\u0CA0\u0CA1\x03\x02\x02\x02\u0CA1\u0CA2\x03\x02\x02\x02\u0CA2" +
        "\u0CA3\t\x07\x02\x02\u0CA3\u0105\x03\x02\x02\x02\u0CA4\u0CA5\x07%\x02" +
        "\x02\u0CA5\u0CA6\x05\u0110\x89\x02\u0CA6\u0CAA\x07\x92\x02\x02\u0CA7\u0CA9" +
        "\x07\xA7\x02\x02\u0CA8\u0CA7\x03\x02\x02\x02\u0CA9\u0CAC\x03\x02\x02\x02" +
        "\u0CAA\u0CA8\x03\x02\x02\x02\u0CAA\u0CAB\x03\x02\x02\x02\u0CAB\u0CB6\x03" +
        "\x02\x02\x02\u0CAC\u0CAA\x03\x02\x02\x02\u0CAD\u0CB1\x05:\x1E\x02\u0CAE" +
        "\u0CB0\x07\xA7\x02\x02\u0CAF\u0CAE\x03\x02\x02\x02\u0CB0\u0CB3\x03\x02" +
        "\x02\x02\u0CB1\u0CAF\x03\x02\x02\x02\u0CB1\u0CB2\x03\x02\x02\x02\u0CB2" +
        "\u0CB5\x03\x02\x02\x02\u0CB3\u0CB1\x03\x02\x02\x02\u0CB4\u0CAD\x03\x02" +
        "\x02\x02\u0CB5\u0CB8\x03\x02\x02\x02\u0CB6\u0CB4\x03\x02\x02\x02\u0CB6" +
        "\u0CB7\x03\x02\x02\x02\u0CB7\u0CC1\x03\x02\x02\x02\u0CB8\u0CB6\x03\x02" +
        "\x02\x02\u0CB9\u0CBA\t\x07\x02\x02\u0CBA\u0CBD\x05\u0184\xC3\x02\u0CBB" +
        "\u0CBC\x07\xA7\x02\x02\u0CBC\u0CBE\x05\u0100\x81\x02\u0CBD\u0CBB\x03\x02" +
        "\x02\x02\u0CBE\u0CBF\x03\x02\x02\x02\u0CBF\u0CBD\x03\x02\x02\x02\u0CBF" +
        "\u0CC0\x03\x02\x02\x02\u0CC0\u0CC2\x03\x02\x02\x02\u0CC1\u0CB9\x03\x02" +
        "\x02\x02\u0CC2\u0CC3\x03\x02\x02\x02\u0CC3\u0CC1\x03\x02\x02\x02\u0CC3" +
        "\u0CC4\x03\x02\x02\x02\u0CC4\u0CC5\x03\x02\x02\x02\u0CC5\u0CC6\t\x07\x02" +
        "\x02\u0CC6\u0107\x03\x02\x02\x02\u0CC7\u0CC8\x07&\x02\x02\u0CC8\u0CC9" +
        "\x05\u0110\x89\x02\u0CC9\u0CCD\x07\x92\x02\x02\u0CCA\u0CCC\x07\xA7\x02" +
        "\x02\u0CCB\u0CCA\x03\x02\x02\x02\u0CCC\u0CCF\x03\x02\x02\x02\u0CCD\u0CCB" +
        "\x03\x02\x02\x02\u0CCD\u0CCE\x03\x02\x02\x02\u0CCE\u0CD9\x03\x02\x02\x02" +
        "\u0CCF\u0CCD\x03\x02\x02\x02\u0CD0\u0CD4\x05:\x1E\x02\u0CD1\u0CD3\x07" +
        "\xA7\x02\x02\u0CD2\u0CD1\x03\x02\x02\x02\u0CD3\u0CD6\x03\x02\x02\x02\u0CD4" +
        "\u0CD2\x03\x02\x02\x02\u0CD4\u0CD5\x03\x02\x02\x02\u0CD5\u0CD8\x03\x02" +
        "\x02\x02\u0CD6\u0CD4\x03\x02\x02\x02\u0CD7\u0CD0\x03\x02\x02\x02\u0CD8" +
        "\u0CDB\x03\x02\x02\x02\u0CD9\u0CD7\x03\x02\x02\x02\u0CD9\u0CDA\x03\x02" +
        "\x02\x02\u0CDA\u0CE4\x03\x02\x02\x02\u0CDB\u0CD9\x03\x02\x02\x02\u0CDC" +
        "\u0CDD\t\x07\x02\x02\u0CDD\u0CE0\x05\u0184\xC3\x02\u0CDE\u0CDF\x07\xA7" +
        "\x02\x02\u0CDF\u0CE1\x05\u0100\x81\x02\u0CE0\u0CDE\x03\x02\x02\x02\u0CE1" +
        "\u0CE2\x03\x02\x02\x02\u0CE2\u0CE0\x03\x02\x02\x02\u0CE2\u0CE3\x03\x02" +
        "\x02\x02\u0CE3\u0CE5\x03\x02\x02\x02\u0CE4\u0CDC\x03\x02\x02\x02\u0CE5" +
        "\u0CE6\x03\x02\x02\x02\u0CE6\u0CE4\x03\x02\x02\x02\u0CE6\u0CE7\x03\x02" +
        "\x02\x02\u0CE7\u0CE8\x03\x02\x02\x02\u0CE8\u0CE9\t\x07\x02\x02\u0CE9\u0109" +
        "\x03\x02\x02\x02\u0CEA\u0CEB\x07!\x02\x02\u0CEB\u0CEC\x05\u0110\x89\x02" +
        "\u0CEC\u0CF0\x07\x92\x02\x02\u0CED\u0CEF\x07\xA7\x02\x02\u0CEE\u0CED\x03" +
        "\x02\x02\x02\u0CEF\u0CF2\x03\x02\x02\x02\u0CF0\u0CEE\x03\x02\x02\x02\u0CF0" +
        "\u0CF1\x03\x02\x02\x02\u0CF1\u0CFC\x03\x02\x02\x02\u0CF2\u0CF0\x03\x02" +
        "\x02\x02\u0CF3\u0CF7\x05:\x1E\x02\u0CF4\u0CF6\x07\xA7\x02\x02\u0CF5\u0CF4" +
        "\x03\x02\x02\x02\u0CF6\u0CF9\x03\x02\x02\x02\u0CF7\u0CF5\x03\x02\x02\x02" +
        "\u0CF7\u0CF8\x03\x02\x02\x02\u0CF8\u0CFB\x03\x02\x02\x02\u0CF9\u0CF7\x03" +
        "\x02\x02\x02\u0CFA\u0CF3\x03\x02\x02\x02\u0CFB\u0CFE\x03\x02\x02\x02\u0CFC" +
        "\u0CFA\x03\x02\x02\x02\u0CFC\u0CFD\x03\x02\x02\x02\u0CFD\u0D0C\x03\x02" +
        "\x02\x02\u0CFE\u0CFC\x03\x02\x02\x02\u0CFF\u0D00\t\x07\x02\x02\u0D00\u0D08" +
        "\x05\u010C\x87\x02\u0D01\u0D03\x07\xA7\x02\x02\u0D02\u0D01\x03\x02\x02" +
        "\x02\u0D03\u0D06\x03\x02\x02\x02\u0D04\u0D02\x03\x02\x02\x02\u0D04\u0D05" +
        "\x03\x02\x02\x02\u0D05\u0D07\x03\x02\x02\x02\u0D06\u0D04\x03\x02\x02\x02" +
        "\u0D07\u0D09\x05\u0100\x81\x02\u0D08\u0D04\x03\x02\x02\x02\u0D09\u0D0A" +
        "\x03\x02\x02\x02\u0D0A\u0D08\x03\x02\x02\x02\u0D0A\u0D0B\x03\x02\x02\x02" +
        "\u0D0B\u0D0D\x03\x02\x02\x02\u0D0C\u0CFF\x03\x02\x02\x02\u0D0D\u0D0E\x03" +
        "\x02\x02\x02\u0D0E\u0D0C\x03\x02\x02\x02\u0D0E\u0D0F\x03\x02\x02\x02\u0D0F" +
        "\u0D10\x03\x02\x02\x02\u0D10\u0D14\t\x07\x02\x02\u0D11\u0D13\x07\xA7\x02" +
        "\x02\u0D12\u0D11\x03\x02\x02\x02\u0D13\u0D16\x03\x02\x02\x02\u0D14\u0D12" +
        "\x03\x02\x02\x02\u0D14\u0D15\x03\x02\x02\x02\u0D15\u0D24\x03\x02\x02\x02" +
        "\u0D16\u0D14\x03\x02\x02\x02\u0D17\u0D21\x05L\'\x02\u0D18\u0D1A\x07\xA7" +
        "\x02\x02\u0D19\u0D18\x03\x02\x02\x02\u0D1A\u0D1D\x03\x02\x02\x02\u0D1B" +
        "\u0D19\x03\x02\x02\x02\u0D1B\u0D1C\x03\x02\x02\x02\u0D1C\u0D1E\x03\x02" +
        "\x02\x02\u0D1D\u0D1B\x03\x02\x02\x02\u0D1E\u0D20\x05L\'\x02\u0D1F\u0D1B" +
        "\x03\x02\x02\x02\u0D20\u0D23\x03\x02\x02\x02\u0D21\u0D1F\x03\x02\x02\x02" +
        "\u0D21\u0D22\x03\x02\x02\x02\u0D22\u0D25\x03\x02\x02\x02\u0D23\u0D21\x03" +
        "\x02\x02\x02\u0D24\u0D17\x03\x02\x02\x02\u0D24\u0D25\x03\x02\x02\x02\u0D25" +
        "\u010B\x03\x02\x02\x02\u0D26\u0D28\n\b\x02\x02\u0D27\u0D26\x03\x02\x02" +
        "\x02\u0D28\u0D29\x03\x02\x02\x02\u0D29\u0D27\x03\x02\x02\x02\u0D29\u0D2A" +
        "\x03\x02\x02\x02\u0D2A\u010D\x03\x02\x02\x02\u0D2B\u0D2C\x07\xB8\x02\x02" +
        "\u0D2C\u0D2D\x07\xA5\x02\x02\u0D2D\u0D2E\x07\x92\x02\x02\u0D2E\u010F\x03" +
        "\x02\x02\x02\u0D2F\u0D31\x05\u0112\x8A\x02\u0D30\u0D2F\x03\x02\x02\x02" +
        "\u0D31\u0D34\x03\x02\x02\x02\u0D32\u0D30\x03\x02\x02\x02\u0D32\u0D33\x03" +
        "\x02\x02\x02\u0D33\u0D39\x03\x02\x02\x02\u0D34\u0D32\x03\x02\x02\x02\u0D35" +
        "\u0D38\x07\xEF\x02\x02\u0D36\u0D38\x05\u0114\x8B\x02\u0D37\u0D35\x03\x02" +
        "\x02\x02\u0D37\u0D36\x03\x02\x02\x02\u0D38\u0D3B\x03\x02\x02\x02\u0D39" +
        "\u0D37\x03\x02\x02\x02\u0D39\u0D3A\x03\x02\x02\x02\u0D3A\u0111\x03\x02" +
        "\x02\x02\u0D3B\u0D39\x03\x02\x02\x02\u0D3C\u0D3D\t\t\x02\x02\u0D3D\u0113" +
        "\x03\x02\x02\x02\u0D3E\u0D48\x05\u0118\x8D\x02\u0D3F\u0D48\x05\u0150\xA9" +
        "\x02\u0D40\u0D48\x05\u011A\x8E\x02\u0D41\u0D48\x05\u011C\x8F\x02\u0D42" +
        "\u0D48\x05\u011E\x90\x02\u0D43\u0D48\x05\u0120\x91\x02\u0D44\u0D48\x05" +
        "\u0122\x92\x02\u0D45\u0D48\x05\u0124\x93\x02\u0D46\u0D48\x07\xD0\x02\x02" +
        "\u0D47\u0D3E\x03\x02\x02\x02\u0D47\u0D3F\x03\x02\x02\x02\u0D47\u0D40\x03" +
        "\x02\x02\x02\u0D47\u0D41\x03\x02\x02\x02\u0D47\u0D42\x03\x02\x02\x02\u0D47" +
        "\u0D43\x03\x02\x02\x02\u0D47\u0D44\x03\x02\x02\x02\u0D47\u0D45\x03\x02" +
        "\x02\x02\u0D47\u0D46\x03\x02\x02\x02\u0D48\u0115\x03\x02\x02\x02\u0D49" +
        "\u0D4E\x07\xED\x02\x02\u0D4A\u0D4E\x07\xEE\x02\x02\u0D4B\u0D4E\x07\xEF" +
        "\x02\x02\u0D4C\u0D4E\x03\x02\x02\x02\u0D4D\u0D49\x03\x02\x02\x02\u0D4D" +
        "\u0D4A\x03\x02\x02\x02\u0D4D\u0D4B\x03\x02\x02\x02\u0D4D\u0D4C\x03\x02" +
        "\x02\x02\u0D4E\u0117\x03\x02\x02\x02\u0D4F\u0D52\x07\xC7\x02\x02\u0D50" +
        "\u0D53\x07\x7F\x02\x02\u0D51\u0D53\x07\xFF\x02\x02\u0D52\u0D50\x03\x02" +
        "\x02\x02\u0D52\u0D51\x03\x02\x02\x02\u0D52\u0D53\x03\x02\x02\x02\u0D53" +
        "\u0D5E\x03\x02\x02\x02\u0D54\u0D56\x07\xDE\x02\x02\u0D55\u0D57\x07\x7F" +
        "\x02\x02\u0D56\u0D55\x03\x02\x02\x02\u0D56\u0D57\x03\x02\x02\x02\u0D57" +
        "\u0D5E\x03\x02\x02\x02\u0D58\u0D5A\x07\xC8\x02\x02\u0D59\u0D5B\x07\x7F" +
        "\x02\x02\u0D5A\u0D59\x03\x02\x02\x02\u0D5A\u0D5B\x03\x02\x02\x02\u0D5B" +
        "\u0D5E\x03\x02\x02\x02\u0D5C\u0D5E\x07\xC9\x02\x02\u0D5D\u0D4F\x03\x02" +
        "\x02\x02\u0D5D\u0D54\x03\x02\x02\x02\u0D5D\u0D58\x03\x02\x02\x02\u0D5D" +
        "\u0D5C\x03\x02\x02\x02\u0D5E\u0119\x03\x02\x02\x02\u0D5F\u0D62\t\n\x02" +
        "\x02\u0D60\u0D61\x07\x93\x02\x02\u0D61\u0D63\x07\x81\x02\x02\u0D62\u0D60" +
        "\x03\x02\x02\x02\u0D62\u0D63\x03\x02\x02\x02\u0D63\u011B\x03\x02\x02\x02" +
        "\u0D64\u0D65\t\v\x02\x02\u0D65\u011D\x03\x02\x02\x02\u0D66\u0D67\t\f\x02" +
        "\x02\u0D67\u011F\x03\x02\x02\x02\u0D68\u0D69\t\r\x02\x02\u0D69\u0121\x03" +
        "\x02\x02\x02\u0D6A\u0D6B\t\x0E\x02\x02\u0D6B\u0123\x03\x02\x02\x02\u0D6C" +
        "\u0D6D\t\x0F\x02\x02\u0D6D\u0125\x03\x02\x02\x02\u0D6E\u0D6F\t\x10\x02" +
        "\x02\u0D6F\u0127\x03\x02\x02\x02\u0D70\u0D71\t\x11\x02\x02\u0D71\u0129" +
        "\x03\x02\x02\x02\u0D72\u0D73\t\x12\x02\x02\u0D73\u012B\x03\x02\x02\x02" +
        "\u0D74\u0D75\t\x13\x02\x02\u0D75\u012D\x03\x02\x02\x02\u0D76\u0D79\x07" +
        "\xD5\x02\x02\u0D77\u0D78\x07\x93\x02\x02\u0D78\u0D7A\x07\x81\x02\x02\u0D79" +
        "\u0D77\x03\x02\x02\x02\u0D79\u0D7A\x03\x02\x02\x02\u0D7A\u0D81\x03\x02" +
        "\x02\x02\u0D7B\u0D7E\x07\xE7\x02\x02\u0D7C\u0D7D\x07\x93\x02\x02\u0D7D" +
        "\u0D7F\x07\x81\x02\x02\u0D7E\u0D7C\x03\x02\x02\x02\u0D7E\u0D7F\x03\x02" +
        "\x02\x02\u0D7F\u0D81\x03\x02\x02\x02\u0D80\u0D76\x03\x02\x02\x02\u0D80" +
        "\u0D7B\x03\x02\x02\x02\u0D81\u012F\x03\x02\x02\x02\u0D82\u0D83\t\x14\x02" +
        "\x02\u0D83\u0131\x03\x02\x02\x02\u0D84\u0D85\x05\u0126\x94\x02\u0D85\u0D86" +
        "\x07\x93\x02\x02\u0D86\u0D87\x05\u0158\xAD\x02\u0D87\u0D88\x07\x92\x02" +
        "\x02\u0D88\u0D8B\x03\x02\x02\x02\u0D89\u0D8B\x07\xA3\x02\x02\u0D8A\u0D84" +
        "\x03\x02\x02\x02\u0D8A\u0D89\x03\x02\x02\x02\u0D8B\u0133\x03\x02\x02\x02" +
        "\u0D8C\u0D8D\x05\u0128\x95\x02\u0D8D\u0D8E\x07\x93\x02\x02\u0D8E\u0D8F" +
        "\x05\u0158\xAD\x02\u0D8F\u0D94\x07\x92\x02\x02\u0D90\u0D91\x07\xBA\x02" +
        "\x02\u0D91\u0D92\x05\u018E\xC8\x02\u0D92\u0D93\x07\x92\x02\x02\u0D93\u0D95" +
        "\x03\x02\x02\x02\u0D94\u0D90\x03\x02\x02\x02\u0D94\u0D95\x03\x02\x02\x02" +
        "\u0D95\u0135\x03\x02\x02\x02\u0D96\u0D97\x05\u012C\x97\x02\u0D97\u0D98" +
        "\x07\x93\x02\x02\u0D98\u0D99\x05\u0158\xAD\x02\u0D99\u0D9E\x07\x92\x02" +
        "\x02\u0D9A\u0D9B\x07\xBA\x02\x02\u0D9B\u0D9C\x05\u018E\xC8\x02\u0D9C\u0D9D" +
        "\x07\x92\x02\x02\u0D9D\u0D9F\x03\x02\x02\x02\u0D9E\u0D9A\x03\x02\x02\x02" +
        "\u0D9E\u0D9F\x03\x02\x02\x02\u0D9F\u0137\x03\x02\x02\x02\u0DA0\u0DA1\x05" +
        "\u012A\x96\x02\u0DA1\u0DA4\x07\x93\x02\x02\u0DA2\u0DA5\x05\u0158\xAD\x02" +
        "\u0DA3\u0DA5\x05\u0156\xAC\x02\u0DA4\u0DA2\x03\x02\x02\x02\u0DA4\u0DA3" +
        "\x03\x02\x02\x02\u0DA5\u0DA6\x03\x02\x02\x02\u0DA6\u0DAB\x07\x92\x02\x02" +
        "\u0DA7\u0DA8\x07\xBA\x02\x02\u0DA8\u0DA9\x05\u018E\xC8\x02\u0DA9\u0DAA" +
        "\x07\x92\x02\x02\u0DAA\u0DAC\x03\x02\x02\x02\u0DAB\u0DA7\x03\x02\x02\x02" +
        "\u0DAB\u0DAC\x03\x02\x02\x02\u0DAC\u0139\x03\x02\x02\x02\u0DAD\u0DB1\x05" +
        "\u013C\x9F\x02\u0DAE\u0DB0\x05\u0154\xAB\x02\u0DAF\u0DAE\x03\x02\x02\x02" +
        "\u0DB0\u0DB3\x03\x02\x02\x02\u0DB1\u0DAF\x03\x02\x02\x02\u0DB1\u0DB2\x03" +
        "\x02\x02\x02\u0DB2\u013B\x03\x02\x02\x02\u0DB3\u0DB1\x03\x02\x02\x02\u0DB4" +
        "\u0DB5\x05\u0130\x99\x02\u0DB5\u0DB9\x07\x93\x02\x02\u0DB6\u0DB8\x07\x04" +
        "\x02\x02\u0DB7\u0DB6\x03\x02\x02\x02\u0DB8\u0DBB\x03\x02\x02\x02\u0DB9" +
        "\u0DB7\x03\x02\x02\x02\u0DB9\u0DBA\x03\x02\x02\x02\u0DBA\u0DBC\x03\x02" +
        "\x02\x02\u0DBB\u0DB9\x03\x02\x02\x02\u0DBC\u0DBD\x05\u0158\xAD\x02\u0DBD" +
        "\u0DBE\x07\x92\x02\x02\u0DBE\u013D\x03\x02\x02\x02\u0DBF\u0DC3\x05\u0140" +
        "\xA1\x02\u0DC0\u0DC2\x05\u0154\xAB\x02\u0DC1\u0DC0\x03\x02\x02\x02\u0DC2" +
        "\u0DC5\x03\x02\x02\x02\u0DC3\u0DC1\x03\x02\x02\x02\u0DC3\u0DC4\x03\x02" +
        "\x02\x02\u0DC4\u013F\x03\x02\x02\x02\u0DC5\u0DC3\x03\x02\x02\x02\u0DC6" +
        "\u0DC7\x05\u012E\x98\x02\u0DC7\u0DC8\x07\x93\x02\x02\u0DC8\u0DC9\x05\u0158" +
        "\xAD\x02\u0DC9\u0DCE\x07\x92\x02\x02\u0DCA\u0DCB\x07\xBA\x02\x02\u0DCB" +
        "\u0DCC\x05\u018E\xC8\x02\u0DCC\u0DCD\x07\x92\x02\x02\u0DCD\u0DCF\x03\x02" +
        "\x02\x02\u0DCE\u0DCA\x03\x02\x02\x02\u0DCE\u0DCF\x03\x02\x02\x02\u0DCF" +
        "\u0141\x03\x02\x02\x02\u0DD0\u0DD4\x05\u0144\xA3\x02\u0DD1\u0DD3\x05\u0148" +
        "\xA5\x02\u0DD2\u0DD1\x03\x02\x02\x02\u0DD3\u0DD6\x03\x02\x02\x02\u0DD4" +
        "\u0DD2\x03\x02\x02\x02\u0DD4\u0DD5\x03\x02\x02\x02\u0DD5\u0DD9\x03\x02" +
        "\x02\x02\u0DD6\u0DD4\x03\x02\x02\x02\u0DD7\u0DD8\x07\xA7\x02\x02\u0DD8" +
        "\u0DDA\x07\xBC\x02\x02\u0DD9\u0DD7\x03\x02\x02\x02\u0DD9\u0DDA\x03\x02" +
        "\x02\x02\u0DDA\u0143\x03\x02\x02\x02\u0DDB\u0DDC\x05\u0146\xA4\x02\u0DDC" +
        "\u0DE0\x07\x93\x02\x02\u0DDD\u0DDF\x07\x04\x02\x02\u0DDE\u0DDD\x03\x02" +
        "\x02\x02\u0DDF\u0DE2\x03\x02\x02\x02\u0DE0\u0DDE\x03\x02\x02\x02\u0DE0" +
        "\u0DE1\x03\x02\x02\x02\u0DE1\u0DE3\x03\x02\x02\x02\u0DE2\u0DE0\x03\x02" +
        "\x02\x02\u0DE3\u0DE4\x05\u0158\xAD\x02\u0DE4\u0DE5\x07\x92\x02\x02\u0DE5" +
        "\u0145\x03\x02\x02\x02\u0DE6\u0DE9\x07\xD2\x02\x02\u0DE7\u0DEA\x07\x7F" +
        "\x02\x02\u0DE8\u0DEA\x07\xFF\x02\x02\u0DE9\u0DE7\x03\x02\x02\x02\u0DE9" +
        "\u0DE8\x03\x02\x02\x02\u0DE9\u0DEA\x03\x02\x02\x02\u0DEA\u0DF5\x03\x02" +
        "\x02\x02\u0DEB\u0DED\x07\xE6\x02\x02\u0DEC\u0DEE\x07\x7F\x02\x02\u0DED" +
        "\u0DEC\x03\x02\x02\x02\u0DED\u0DEE\x03\x02\x02\x02\u0DEE\u0DF5\x03\x02" +
        "\x02\x02\u0DEF\u0DF1\x07\xD3\x02\x02\u0DF0\u0DF2\x07\x7F\x02\x02\u0DF1" +
        "\u0DF0\x03\x02\x02\x02\u0DF1\u0DF2\x03\x02\x02\x02\u0DF2\u0DF5\x03\x02" +
        "\x02\x02\u0DF3\u0DF5\x07\xD4\x02\x02\u0DF4\u0DE6\x03\x02\x02\x02\u0DF4" +
        "\u0DEB\x03\x02\x02\x02\u0DF4\u0DEF\x03\x02\x02\x02\u0DF4\u0DF3\x03\x02" +
        "\x02\x02\u0DF5\u0147\x03\x02\x02\x02\u0DF6\u0DF7\x07\xB9\x02\x02\u0DF7" +
        "\u0DF8\x07\x93\x02\x02\u0DF8\u0DF9\x05\u0158\xAD\x02\u0DF9\u0DFA\x07\x92" +
        "\x02\x02\u0DFA\u0E08\x03\x02\x02\x02\u0DFB\u0DFC\t\x15\x02\x02\u0DFC\u0DFD" +
        "\x07\x93\x02\x02\u0DFD\u0DFE\x07\xA5\x02\x02\u0DFE\u0E08\x07\x92\x02\x02" +
        "\u0DFF\u0E03\t\x16\x02\x02\u0E00\u0E02\v\x02\x02\x02\u0E01\u0E00\x03\x02" +
        "\x02\x02\u0E02\u0E05\x03\x02\x02\x02\u0E03\u0E04\x03\x02\x02\x02\u0E03" +
        "\u0E01\x03\x02\x02\x02\u0E04\u0E06\x03\x02\x02\x02\u0E05\u0E03\x03\x02" +
        "\x02\x02\u0E06\u0E08\x07\x92\x02\x02\u0E07\u0DF6\x03\x02\x02\x02\u0E07" +
        "\u0DFB\x03\x02\x02\x02\u0E07\u0DFF\x03\x02\x02\x02\u0E08\u0149\x03\x02" +
        "\x02\x02\u0E09\u0E0A\x07\xB9\x02\x02\u0E0A\u0E0B\x07\x93\x02\x02\u0E0B" +
        "\u0E0C\x05\u0158\xAD\x02\u0E0C\u0E0D\x07\x92\x02\x02\u0E0D\u0E1B\x03\x02" +
        "\x02\x02\u0E0E\u0E0F\t\x15\x02\x02\u0E0F\u0E10\x07\x93\x02\x02\u0E10\u0E11" +
        "\x07\xA5\x02\x02\u0E11\u0E1B\x07\x92\x02\x02\u0E12\u0E16\t\x16\x02\x02" +
        "\u0E13\u0E15\v\x02\x02\x02\u0E14\u0E13\x03\x02\x02\x02\u0E15\u0E18\x03" +
        "\x02\x02\x02\u0E16\u0E17\x03\x02\x02\x02\u0E16\u0E14\x03\x02\x02\x02\u0E17" +
        "\u0E19\x03\x02\x02\x02\u0E18\u0E16\x03\x02\x02\x02\u0E19\u0E1B\x07\x92" +
        "\x02\x02\u0E1A\u0E09\x03\x02\x02\x02\u0E1A\u0E0E\x03\x02\x02\x02\u0E1A" +
        "\u0E12\x03\x02\x02\x02\u0E1B\u014B\x03\x02\x02\x02\u0E1C\u0E20\x05\u014E" +
        "\xA8\x02\u0E1D\u0E1F\x05\u0154\xAB\x02\u0E1E\u0E1D\x03\x02\x02\x02\u0E1F" +
        "\u0E22\x03\x02\x02\x02\u0E20\u0E1E\x03\x02\x02\x02\u0E20\u0E21\x03\x02" +
        "\x02\x02\u0E21\u014D\x03\x02\x02\x02\u0E22\u0E20\x03\x02\x02\x02\u0E23" +
        "\u0E24\x05\u0152\xAA\x02\u0E24\u0E25\x07\x93\x02\x02\u0E25\u0E26\x05\u0158" +
        "\xAD\x02\u0E26\u0E2B\x07\x92\x02\x02\u0E27\u0E28\x07\xBA\x02\x02\u0E28" +
        "\u0E29\x05\u018E\xC8\x02\u0E29\u0E2A\x07\x92\x02\x02\u0E2A\u0E2C\x03\x02" +
        "\x02\x02\u0E2B\u0E27\x03\x02\x02\x02\u0E2B\u0E2C\x03\x02\x02\x02\u0E2C" +
        "\u014F\x03\x02\x02\x02\u0E2D\u0E30\x07\xC6\x02\x02\u0E2E\u0E2F\x07\x93" +
        "\x02\x02\u0E2F\u0E31\x07\x80\x02\x02\u0E30\u0E2E\x03\x02\x02\x02\u0E30" +
        "\u0E31\x03\x02\x02\x02\u0E31\u0E38\x03\x02\x02\x02\u0E32\u0E35\x07\xDD" +
        "\x02\x02\u0E33\u0E34\x07\x93\x02\x02\u0E34\u0E36\x07\x80\x02\x02\u0E35" +
        "\u0E33\x03\x02\x02\x02\u0E35\u0E36\x03\x02\x02\x02\u0E36\u0E38\x03\x02" +
        "\x02\x02\u0E37\u0E2D\x03\x02\x02\x02\u0E37\u0E32\x03\x02\x02\x02\u0E38" +
        "\u0151\x03\x02\x02\x02\u0E39\u0E3C\x07\xD1\x02\x02\u0E3A\u0E3B\x07\x93" +
        "\x02\x02\u0E3B\u0E3D\x07\x80\x02\x02\u0E3C\u0E3A\x03\x02\x02\x02\u0E3C" +
        "\u0E3D\x03\x02\x02\x02\u0E3D\u0E44\x03\x02\x02\x02\u0E3E\u0E41\x07\xE5" +
        "\x02\x02\u0E3F\u0E40\x07\x93\x02\x02\u0E40\u0E42\x07\x80\x02\x02\u0E41" +
        "\u0E3F\x03\x02\x02\x02\u0E41\u0E42\x03\x02\x02\x02\u0E42\u0E44\x03\x02" +
        "\x02\x02\u0E43\u0E39\x03\x02\x02\x02\u0E43\u0E3E\x03\x02\x02\x02\u0E44" +
        "\u0153\x03\x02\x02\x02\u0E45\u0E46\x07\x8B\x02\x02\u0E46\u0E49\x05\u0184" +
        "\xC3\x02\u0E47\u0E49\x07\xB9\x02\x02\u0E48\u0E45\x03\x02\x02\x02\u0E48" +
        "\u0E47\x03\x02\x02\x02\u0E49\u0E4A\x03\x02\x02\x02\u0E4A\u0E4E\x07\x93" +
        "\x02\x02\u0E4B\u0E4D\x07\x04\x02\x02\u0E4C\u0E4B\x03\x02\x02\x02\u0E4D" +
        "\u0E50\x03\x02\x02\x02\u0E4E\u0E4C\x03\x02\x02\x02\u0E4E\u0E4F\x03\x02" +
        "\x02\x02\u0E4F\u0E53\x03\x02\x02\x02\u0E50\u0E4E\x03\x02\x02\x02\u0E51" +
        "\u0E54\x05\u0184\xC3\x02\u0E52\u0E54\x07\xA7\x02\x02\u0E53\u0E51\x03\x02" +
        "\x02\x02\u0E53\u0E52\x03\x02\x02\x02\u0E54\u0E55\x03\x02\x02\x02\u0E55" +
        "\u0E53\x03\x02\x02\x02\u0E55\u0E56\x03\x02\x02\x02\u0E56\u0E57\x03\x02" +
        "\x02\x02\u0E57\u0E65\x07\x92\x02\x02\u0E58\u0E59\t\x15\x02\x02\u0E59\u0E5A" +
        "\x07\x93\x02\x02\u0E5A\u0E5B\x07\xA5\x02\x02\u0E5B\u0E65\x07\x92\x02\x02" +
        "\u0E5C\u0E60\t\x16\x02\x02\u0E5D\u0E5F\v\x02\x02\x02\u0E5E\u0E5D\x03\x02" +
        "\x02\x02\u0E5F\u0E62\x03\x02\x02\x02\u0E60\u0E61\x03\x02\x02\x02\u0E60" +
        "\u0E5E\x03\x02\x02\x02\u0E61\u0E63\x03\x02\x02\x02\u0E62\u0E60\x03\x02" +
        "\x02\x02\u0E63\u0E65\x07\x92\x02\x02\u0E64\u0E48\x03\x02\x02\x02\u0E64" +
        "\u0E58\x03\x02\x02\x02\u0E64\u0E5C\x03\x02\x02\x02\u0E65\u0155\x03\x02" +
        "\x02\x02\u0E66\u0E67\x07\xFE\x02\x02\u0E67\u0E68\x07\x96\x02\x02\u0E68" +
        "\u0E69\x07\xA5\x02\x02\u0E69\u0157\x03\x02\x02\x02\u0E6A\u0E6B\x07\u0101" +
        "\x02\x02\u0E6B\u0159\x03\x02\x02\x02\u0E6C\u0E6D\x07\x91\x02\x02\u0E6D" +
        "\u0E75\x07\x92\x02\x02\u0E6E\u0E70\x07\x04\x02\x02\u0E6F\u0E6E\x03\x02" +
        "\x02\x02\u0E70\u0E73\x03\x02\x02\x02\u0E71\u0E6F\x03\x02\x02\x02\u0E71" +
        "\u0E72\x03\x02\x02\x02\u0E72\u0E74\x03\x02\x02\x02\u0E73\u0E71\x03\x02" +
        "\x02\x02\u0E74\u0E76\x05\u015C\xAF\x02\u0E75\u0E71\x03\x02\x02\x02\u0E75" +
        "\u0E76\x03\x02\x02\x02\u0E76\u0E8B\x03\x02\x02\x02\u0E77\u0E78\x07\x91" +
        "\x02\x02\u0E78\u0E7D\x05\u0184\xC3\x02\u0E79\u0E7C\x07\x93\x02\x02\u0E7A" +
        "\u0E7C\x05\u018E\xC8\x02\u0E7B\u0E79\x03\x02\x02\x02\u0E7B\u0E7A\x03\x02" +
        "\x02\x02\u0E7C\u0E7F\x03\x02\x02\x02\u0E7D\u0E7B\x03\x02\x02\x02\u0E7D" +
        "\u0E7E\x03\x02\x02\x02\u0E7E\u0E80\x03\x02\x02\x02\u0E7F\u0E7D\x03\x02" +
        "\x02\x02\u0E80\u0E88\x07\x92\x02\x02\u0E81\u0E83\x07\x04\x02\x02\u0E82" +
        "\u0E81\x03\x02\x02\x02\u0E83\u0E86\x03\x02\x02\x02\u0E84\u0E82\x03\x02" +
        "\x02\x02\u0E84\u0E85\x03\x02\x02\x02\u0E85\u0E87\x03\x02\x02\x02\u0E86" +
        "\u0E84\x03\x02\x02\x02\u0E87\u0E89\x05\u015C\xAF\x02\u0E88\u0E84\x03\x02" +
        "\x02\x02\u0E88\u0E89\x03\x02\x02\x02\u0E89\u0E8B\x03\x02\x02\x02\u0E8A" +
        "\u0E6C\x03\x02\x02\x02\u0E8A\u0E77\x03\x02\x02\x02\u0E8B\u015B\x03\x02" +
        "\x02\x02\u0E8C\u0E8D\x07\x91\x02\x02\u0E8D\u0E92\x05\u0184\xC3\x02\u0E8E" +
        "\u0E91\x07\x93\x02\x02\u0E8F\u0E91\x05\u018E\xC8\x02\u0E90\u0E8E\x03\x02" +
        "\x02\x02\u0E90\u0E8F\x03\x02\x02\x02\u0E91\u0E94\x03\x02\x02\x02\u0E92" +
        "\u0E90\x03\x02\x02\x02\u0E92\u0E93\x03\x02\x02\x02\u0E93\u0E95\x03\x02" +
        "\x02\x02\u0E94\u0E92\x03\x02\x02\x02\u0E95\u0E96\x07\x92\x02\x02\u0E96" +
        "\u015D\x03\x02\x02\x02\u0E97\u0E99\x07\x85\x02\x02\u0E98\u0E9A\x05\u0184" +
        "\xC3\x02\u0E99\u0E98\x03\x02";
    bitmarkParser._serializedATNSegment7 = "\x02\x02\u0E99\u0E9A\x03\x02\x02\x02\u0E9A\u0E9B\x03\x02\x02\x02\u0E9B" +
        "\u0EA2\x07\x92\x02\x02\u0E9C\u0E9E\x07\x86\x02\x02\u0E9D\u0E9F\x05\u0184" +
        "\xC3\x02\u0E9E\u0E9D\x03\x02\x02\x02\u0E9E\u0E9F\x03\x02\x02\x02\u0E9F" +
        "\u0EA0\x03\x02\x02\x02\u0EA0\u0EA2\x07\x92\x02\x02\u0EA1\u0E97\x03\x02" +
        "\x02\x02\u0EA1\u0E9C\x03\x02\x02\x02\u0EA2\u015F\x03\x02\x02\x02\u0EA3" +
        "\u0EAB\x07\xB3\x02\x02\u0EA4\u0EAB\x07\xB1\x02\x02\u0EA5\u0EA7\x07\xB2" +
        "\x02\x02\u0EA6\u0EA8\x07\xA8\x02\x02\u0EA7\u0EA6\x03\x02\x02\x02\u0EA7" +
        "\u0EA8\x03\x02\x02\x02\u0EA8\u0EA9\x03\x02\x02\x02\u0EA9\u0EAB\x07\x02" +
        "\x02\x03\u0EAA\u0EA3\x03\x02\x02\x02\u0EAA\u0EA4\x03\x02\x02\x02\u0EAA" +
        "\u0EA5\x03\x02\x02\x02\u0EAB\u0161\x03\x02\x02\x02\u0EAC\u0EAE\x07\xDC" +
        "\x02\x02\u0EAD\u0EAF\x05\u0184\xC3\x02\u0EAE\u0EAD\x03\x02\x02\x02\u0EAE" +
        "\u0EAF\x03\x02\x02\x02\u0EAF\u0EC5\x03\x02\x02\x02\u0EB0\u0EBA\x05\u0184" +
        "\xC3\x02\u0EB1\u0EB5\x07\xA7\x02\x02\u0EB2\u0EB4\x07\x04\x02\x02\u0EB3" +
        "\u0EB2\x03\x02\x02\x02\u0EB4\u0EB7\x03\x02\x02\x02\u0EB5\u0EB3\x03\x02" +
        "\x02\x02\u0EB5\u0EB6\x03\x02\x02\x02\u0EB6\u0EB9\x03\x02\x02\x02\u0EB7" +
        "\u0EB5\x03\x02\x02\x02\u0EB8\u0EB1\x03\x02\x02\x02\u0EB9\u0EBC\x03\x02" +
        "\x02\x02\u0EBA\u0EB8\x03\x02\x02\x02\u0EBA\u0EBB\x03\x02\x02\x02\u0EBB" +
        "\u0EC0\x03\x02\x02\x02\u0EBC\u0EBA\x03\x02\x02\x02\u0EBD\u0EBF\x07\xA7" +
        "\x02\x02\u0EBE\u0EBD\x03\x02\x02\x02\u0EBF\u0EC2\x03\x02\x02\x02\u0EC0" +
        "\u0EBE\x03\x02\x02\x02\u0EC0\u0EC1\x03\x02\x02\x02\u0EC1\u0EC4\x03\x02" +
        "\x02\x02\u0EC2\u0EC0\x03\x02\x02\x02\u0EC3\u0EB0\x03\x02\x02\x02\u0EC4" +
        "\u0EC7\x03\x02\x02\x02\u0EC5\u0EC3\x03\x02\x02\x02\u0EC5\u0EC6\x03\x02" +
        "\x02\x02\u0EC6\u0EC8\x03\x02\x02\x02\u0EC7\u0EC5\x03\x02\x02\x02\u0EC8" +
        "\u0ED4\x07\x92\x02\x02\u0EC9\u0ECF\x07\xDC\x02\x02\u0ECA\u0ECE\x05\u0184" +
        "\xC3\x02\u0ECB\u0ECE\x07\xA7\x02\x02\u0ECC\u0ECE\x07\x04\x02\x02\u0ECD" +
        "\u0ECA\x03\x02\x02\x02\u0ECD\u0ECB\x03\x02\x02\x02\u0ECD\u0ECC\x03\x02" +
        "\x02\x02\u0ECE\u0ED1\x03\x02\x02\x02\u0ECF\u0ECD\x03\x02\x02\x02\u0ECF" +
        "\u0ED0\x03\x02\x02\x02\u0ED0\u0ED2\x03\x02\x02\x02\u0ED1\u0ECF\x03\x02" +
        "\x02\x02\u0ED2\u0ED4\x07\x02\x02\x03\u0ED3\u0EAC\x03\x02\x02\x02\u0ED3" +
        "\u0EC9\x03\x02\x02\x02\u0ED4\u0163\x03\x02\x02\x02\u0ED5\u0EDA\x07\xAB" +
        "\x02\x02\u0ED6\u0EDB\x05\u0184\xC3\x02\u0ED7\u0EDB\x07\x93\x02\x02\u0ED8" +
        "\u0EDB\x07\u0101\x02\x02\u0ED9\u0EDB\x07\xA7\x02\x02\u0EDA\u0ED6\x03\x02" +
        "\x02\x02\u0EDA\u0ED7\x03\x02\x02\x02\u0EDA\u0ED8\x03\x02\x02\x02\u0EDA" +
        "\u0ED9\x03\x02\x02\x02\u0EDB\u0EDC\x03\x02\x02\x02\u0EDC\u0EDA\x03\x02" +
        "\x02\x02\u0EDC\u0EDD\x03\x02\x02\x02\u0EDD\u0EDE\x03\x02\x02\x02\u0EDE" +
        "\u0EEC\x07\x92\x02\x02\u0EDF\u0EE7\x07\xAB\x02\x02\u0EE0\u0EE6\x05\u0184" +
        "\xC3\x02\u0EE1\u0EE6\x07\x93\x02\x02\u0EE2\u0EE6\x07\u0101\x02\x02\u0EE3" +
        "\u0EE6\x07\xA7\x02\x02\u0EE4\u0EE6\x07\x04\x02\x02\u0EE5\u0EE0\x03\x02" +
        "\x02\x02\u0EE5\u0EE1\x03\x02\x02\x02\u0EE5\u0EE2\x03\x02\x02\x02\u0EE5" +
        "\u0EE3\x03\x02\x02\x02\u0EE5\u0EE4\x03\x02\x02\x02\u0EE6\u0EE9\x03\x02" +
        "\x02\x02\u0EE7\u0EE5\x03\x02\x02\x02\u0EE7\u0EE8\x03\x02\x02\x02\u0EE8" +
        "\u0EEA\x03\x02\x02\x02\u0EE9\u0EE7\x03\x02\x02\x02\u0EEA\u0EEC\x07\x02" +
        "\x02\x03\u0EEB\u0ED5\x03\x02\x02\x02\u0EEB\u0EDF\x03\x02\x02\x02\u0EEC" +
        "\u0165\x03\x02\x02\x02\u0EED\u0EEE\x07\xAA\x02\x02\u0EEE\u0EEF\x05\u0184" +
        "\xC3\x02\u0EEF\u0EF0\x07\x92\x02\x02\u0EF0\u0167\x03\x02\x02\x02\u0EF1" +
        "\u0EF5\x07\xC3\x02\x02\u0EF2\u0EF6\x05\u0184\xC3\x02\u0EF3\u0EF6\x07\x93" +
        "\x02\x02\u0EF4\u0EF6\x07\xA7\x02\x02\u0EF5\u0EF2\x03\x02\x02\x02\u0EF5" +
        "\u0EF3\x03\x02\x02\x02\u0EF5\u0EF4\x03\x02\x02\x02\u0EF6\u0EF7\x03\x02" +
        "\x02\x02\u0EF7\u0EF5\x03\x02\x02\x02\u0EF7\u0EF8\x03\x02\x02\x02\u0EF8" +
        "\u0EF9\x03\x02\x02\x02\u0EF9\u0EFB\x07\x92\x02\x02\u0EFA\u0EFC\x05\u016A" +
        "\xB6\x02\u0EFB\u0EFA\x03\x02\x02\x02\u0EFB\u0EFC\x03\x02\x02\x02\u0EFC" +
        "\u0169\x03\x02\x02\x02\u0EFD\u0F01\x07\xC3\x02\x02\u0EFE\u0F02\x05\u0184" +
        "\xC3\x02\u0EFF\u0F02\x07\x93\x02\x02\u0F00\u0F02\x07\xA7\x02\x02\u0F01" +
        "\u0EFE\x03\x02\x02\x02\u0F01\u0EFF\x03\x02\x02\x02\u0F01\u0F00\x03\x02" +
        "\x02\x02\u0F02\u0F03\x03\x02\x02\x02\u0F03\u0F01\x03\x02\x02\x02\u0F03" +
        "\u0F04\x03\x02\x02\x02\u0F04\u0F05\x03\x02\x02\x02\u0F05\u0F06\x07\x92" +
        "\x02\x02\u0F06\u016B\x03\x02\x02\x02\u0F07\u0F09\x07\x89\x02\x02\u0F08" +
        "\u0F0A\x05\u0184\xC3\x02\u0F09\u0F08\x03\x02\x02\x02\u0F09\u0F0A\x03\x02" +
        "\x02\x02\u0F0A\u0F20\x03\x02\x02\x02\u0F0B\u0F15\x05\u0184\xC3\x02\u0F0C" +
        "\u0F10\x07\xA7\x02\x02\u0F0D\u0F0F\x07\x04\x02\x02\u0F0E\u0F0D\x03\x02" +
        "\x02\x02\u0F0F\u0F12\x03\x02\x02\x02\u0F10\u0F0E\x03\x02\x02\x02\u0F10" +
        "\u0F11\x03\x02\x02\x02\u0F11\u0F14\x03\x02\x02\x02\u0F12\u0F10\x03\x02" +
        "\x02\x02\u0F13\u0F0C\x03\x02\x02\x02\u0F14\u0F17\x03\x02\x02\x02\u0F15" +
        "\u0F13\x03\x02\x02\x02\u0F15\u0F16\x03\x02\x02\x02\u0F16\u0F1B\x03\x02" +
        "\x02\x02\u0F17\u0F15\x03\x02\x02\x02\u0F18\u0F1A\x07\xA7\x02\x02\u0F19" +
        "\u0F18\x03\x02\x02\x02\u0F1A\u0F1D\x03\x02\x02\x02\u0F1B\u0F19\x03\x02" +
        "\x02\x02\u0F1B\u0F1C\x03\x02\x02\x02\u0F1C\u0F1F\x03\x02\x02\x02\u0F1D" +
        "\u0F1B\x03\x02\x02\x02\u0F1E\u0F0B\x03\x02\x02\x02\u0F1F\u0F22\x03\x02" +
        "\x02\x02\u0F20\u0F1E\x03\x02\x02\x02\u0F20\u0F21\x03\x02\x02\x02\u0F21" +
        "\u0F23\x03\x02\x02\x02\u0F22\u0F20\x03\x02\x02\x02\u0F23\u0F2A\x07\x92" +
        "\x02\x02\u0F24\u0F26\x07\x89\x02\x02\u0F25\u0F27\x05\u0184\xC3\x02\u0F26" +
        "\u0F25\x03\x02\x02\x02\u0F26\u0F27\x03\x02\x02\x02\u0F27\u0F28\x03\x02" +
        "\x02\x02\u0F28\u0F2A\x07\x02\x02\x03\u0F29\u0F07\x03\x02\x02\x02\u0F29" +
        "\u0F24\x03\x02\x02\x02\u0F2A\u016D\x03\x02\x02\x02\u0F2B\u0F2D\x07\x8A" +
        "\x02\x02\u0F2C\u0F2E\n\x17\x02\x02\u0F2D\u0F2C\x03\x02\x02\x02\u0F2E\u0F2F" +
        "\x03\x02\x02\x02\u0F2F\u0F2D\x03\x02\x02\x02\u0F2F\u0F30\x03\x02\x02\x02" +
        "\u0F30\u0F31\x03\x02\x02\x02\u0F31\u0F32\x07\x92\x02\x02\u0F32\u016F\x03" +
        "\x02\x02\x02\u0F33\u0F36\x07\x90\x02\x02\u0F34\u0F37\x05\u0184\xC3\x02" +
        "\u0F35\u0F37\x07\xA7\x02\x02\u0F36\u0F34\x03\x02\x02\x02\u0F36\u0F35\x03" +
        "\x02\x02\x02\u0F37\u0F38\x03\x02\x02\x02\u0F38\u0F36\x03\x02\x02\x02\u0F38" +
        "\u0F39\x03\x02\x02\x02\u0F39\u0F3A\x03\x02\x02\x02\u0F3A\u0F40\x07\x92" +
        "\x02\x02\u0F3B\u0F3C\x07\x90\x02\x02\u0F3C\u0F3D\x05\u0184\xC3\x02\u0F3D" +
        "\u0F3E\x07\x02\x02\x03\u0F3E\u0F40\x03\x02\x02\x02\u0F3F\u0F33\x03\x02" +
        "\x02\x02\u0F3F\u0F3B\x03\x02\x02\x02\u0F40\u0171\x03\x02\x02\x02\u0F41" +
        "\u0F42\x07\xB6\x02\x02\u0F42\u0F43\x05\u0184\xC3\x02\u0F43\u0F44\x07\x92" +
        "\x02\x02\u0F44\u0F4A\x03\x02\x02\x02\u0F45\u0F46\x07\xB7\x02\x02\u0F46" +
        "\u0F47\x05\u0184\xC3\x02\u0F47\u0F48\x07\x92\x02\x02\u0F48\u0F4A\x03\x02" +
        "\x02\x02\u0F49\u0F41\x03\x02\x02\x02\u0F49\u0F45\x03\x02\x02\x02\u0F4A" +
        "\u0173\x03\x02\x02\x02\u0F4B\u0F4C\x07\xAE\x02\x02\u0F4C\u0F4D\x07\x93" +
        "\x02\x02\u0F4D\u0F4E\x07\xA5\x02\x02\u0F4E\u0F55\x07\x92\x02\x02\u0F4F" +
        "\u0F50\x07\xAE\x02\x02\u0F50\u0F51\x07\x93\x02\x02\u0F51\u0F52\x05\u0184" +
        "\xC3\x02\u0F52\u0F53\x07\x92\x02\x02\u0F53\u0F55\x03\x02\x02\x02\u0F54" +
        "\u0F4B\x03\x02\x02\x02\u0F54\u0F4F\x03\x02\x02\x02\u0F55\u0175\x03\x02" +
        "\x02\x02\u0F56\u0F57\x07\xC1\x02\x02\u0F57\u0F58\x05\u0184\xC3\x02\u0F58" +
        "\u0F59\x07\x92\x02\x02\u0F59\u0177\x03\x02\x02\x02\u0F5A\u0F5B\x07\xC2" +
        "\x02\x02\u0F5B\u0F5C\x05\u0184\xC3\x02\u0F5C\u0F5D\x07\x92\x02\x02\u0F5D" +
        "\u0179\x03\x02\x02\x02\u0F5E\u0F68\x05\u017C\xBF\x02\u0F5F\u0F61\x07\xA7" +
        "\x02\x02\u0F60\u0F5F\x03\x02\x02\x02\u0F61\u0F64\x03\x02\x02\x02\u0F62" +
        "\u0F60\x03\x02\x02\x02\u0F62\u0F63\x03\x02\x02\x02\u0F63\u0F65\x03\x02" +
        "\x02\x02\u0F64\u0F62\x03\x02\x02\x02\u0F65\u0F67\x05\u017C\xBF\x02\u0F66" +
        "\u0F62\x03\x02\x02\x02\u0F67\u0F6A\x03\x02\x02\x02\u0F68\u0F66\x03\x02" +
        "\x02\x02\u0F68\u0F69\x03\x02\x02\x02\u0F69\u017B\x03\x02\x02\x02\u0F6A" +
        "\u0F68\x03\x02\x02\x02\u0F6B\u0F6C\x07\x8B\x02\x02\u0F6C\u0F6D\x05\u0184" +
        "\xC3\x02\u0F6D\u0F6E\t\x18\x02\x02\u0F6E\u0F74\x05\u0184\xC3\x02\u0F6F" +
        "\u0F73\x07\xA7\x02\x02\u0F70\u0F73\x07\x93\x02\x02\u0F71\u0F73\x05\u0184" +
        "\xC3\x02\u0F72\u0F6F\x03\x02\x02\x02\u0F72\u0F70\x03\x02\x02\x02\u0F72" +
        "\u0F71\x03\x02\x02\x02\u0F73\u0F76\x03\x02\x02\x02\u0F74\u0F72\x03\x02" +
        "\x02\x02\u0F74\u0F75\x03\x02\x02\x02\u0F75\u0F77\x03\x02\x02\x02\u0F76" +
        "\u0F74\x03\x02\x02\x02\u0F77\u0F78\x07\x92\x02\x02\u0F78\u0F82\x03\x02" +
        "\x02\x02\u0F79\u0F7D\x07\xBF\x02\x02\u0F7A\u0F7C\v\x02\x02\x02\u0F7B\u0F7A" +
        "\x03\x02\x02\x02\u0F7C\u0F7F\x03\x02\x02\x02\u0F7D\u0F7E\x03\x02\x02\x02" +
        "\u0F7D\u0F7B\x03\x02\x02\x02\u0F7E\u0F80\x03\x02\x02\x02\u0F7F\u0F7D\x03" +
        "\x02\x02\x02\u0F80\u0F82\x07\x92\x02\x02\u0F81\u0F6B\x03\x02\x02\x02\u0F81" +
        "\u0F79\x03\x02\x02\x02\u0F82\u017D\x03\x02\x02\x02\u0F83\u0F87\x07\x82" +
        "\x02\x02\u0F84\u0F88\x05\u0184\xC3\x02\u0F85\u0F88\x07\x93\x02\x02\u0F86" +
        "\u0F88\x07\xA7\x02\x02\u0F87\u0F84\x03\x02\x02\x02\u0F87\u0F85\x03\x02" +
        "\x02\x02\u0F87\u0F86\x03\x02\x02\x02\u0F88\u0F89\x03\x02\x02\x02\u0F89" +
        "\u0F87\x03\x02\x02\x02\u0F89\u0F8A\x03\x02\x02\x02\u0F8A\u0F8B\x03\x02" +
        "\x02\x02\u0F8B\u0F97\x07\x92\x02\x02\u0F8C\u0F92\x07\x82\x02\x02\u0F8D" +
        "\u0F91\x05\u0184\xC3\x02\u0F8E\u0F91\x07\x93\x02\x02\u0F8F\u0F91\x07\xA7" +
        "\x02\x02\u0F90\u0F8D\x03\x02\x02\x02\u0F90\u0F8E\x03\x02\x02\x02\u0F90" +
        "\u0F8F\x03\x02\x02\x02\u0F91\u0F94\x03\x02\x02\x02\u0F92\u0F90\x03\x02" +
        "\x02\x02\u0F92\u0F93\x03\x02\x02\x02\u0F93\u0F95\x03\x02\x02\x02\u0F94" +
        "\u0F92\x03\x02\x02\x02\u0F95\u0F97\x07\x02\x02\x03\u0F96\u0F83\x03\x02" +
        "\x02\x02\u0F96\u0F8C\x03\x02\x02\x02\u0F97\u017F\x03\x02\x02\x02\u0F98" +
        "\u0F9A\x07\x87\x02\x02\u0F99\u0F9B\x05\u0184\xC3\x02\u0F9A\u0F99\x03\x02" +
        "\x02\x02\u0F9A\u0F9B\x03\x02\x02\x02\u0F9B\u0F9C\x03\x02\x02\x02\u0F9C" +
        "\u0F9D\x07\x92\x02\x02\u0F9D\u0181\x03\x02\x02\x02\u0F9E\u0FA0\x05\u0184" +
        "\xC3\x02\u0F9F\u0FA1\x07\xA7\x02\x02\u0FA0\u0F9F\x03\x02\x02\x02\u0FA0" +
        "\u0FA1\x03\x02\x02\x02\u0FA1\u0FA3\x03\x02\x02\x02\u0FA2\u0F9E\x03\x02" +
        "\x02\x02\u0FA3\u0FA4\x03\x02\x02\x02\u0FA4\u0FA2\x03\x02\x02\x02\u0FA4" +
        "\u0FA5\x03\x02\x02\x02\u0FA5\u0183\x03\x02\x02\x02\u0FA6\u0FAD\x07\xA6" +
        "\x02\x02\u0FA7\u0FA9\x07\x04\x02\x02\u0FA8\u0FA7\x03\x02\x02\x02\u0FA9" +
        "\u0FAA\x03\x02\x02\x02\u0FAA\u0FA8\x03\x02\x02\x02\u0FAA\u0FAB\x03\x02" +
        "\x02\x02\u0FAB\u0FAC\x03\x02\x02\x02\u0FAC\u0FAE\x07\xA5\x02\x02\u0FAD" +
        "\u0FA8\x03\x02\x02\x02\u0FAD\u0FAE\x03\x02\x02\x02\u0FAE\u0FD5\x03\x02" +
        "\x02\x02\u0FAF\u0FB6\x05\u018E\xC8\x02\u0FB0\u0FB2\x07\x04\x02\x02\u0FB1" +
        "\u0FB0\x03\x02\x02\x02\u0FB2\u0FB3\x03\x02\x02\x02\u0FB3\u0FB1\x03\x02" +
        "\x02\x02\u0FB3\u0FB4\x03\x02\x02\x02\u0FB4\u0FB5\x03\x02\x02\x02\u0FB5" +
        "\u0FB7\x07\xA5\x02\x02\u0FB6\u0FB1\x03\x02\x02\x02\u0FB6\u0FB7\x03\x02" +
        "\x02\x02\u0FB7\u0FD5\x03\x02\x02\x02\u0FB8\u0FD5\x07\xA5\x02\x02\u0FB9" +
        "\u0FBA\x07\x8E\x02\x02\u0FBA\u0FBB\x05\u0184\xC3\x02\u0FBB\u0FBC\x07\x92" +
        "\x02\x02\u0FBC\u0FD5\x03\x02\x02\x02\u0FBD\u0FBF\x07\x04\x02\x02\u0FBE" +
        "\u0FBD\x03\x02\x02\x02\u0FBF\u0FC2\x03\x02\x02\x02\u0FC0\u0FBE\x03\x02" +
        "\x02\x02\u0FC0\u0FC1\x03\x02\x02\x02\u0FC1\u0FC3\x03\x02\x02\x02\u0FC2" +
        "\u0FC0\x03\x02\x02\x02\u0FC3\u0FC7\x07\x93\x02\x02\u0FC4\u0FC6\x07\x04" +
        "\x02\x02\u0FC5\u0FC4\x03\x02\x02\x02\u0FC6\u0FC9\x03\x02\x02\x02\u0FC7" +
        "\u0FC5\x03\x02\x02\x02\u0FC7\u0FC8\x03\x02\x02\x02\u0FC8\u0FD5\x03\x02" +
        "\x02\x02\u0FC9\u0FC7\x03\x02\x02\x02\u0FCA\u0FCE\x07\x94\x02\x02\u0FCB" +
        "\u0FCD\x07\x04\x02\x02\u0FCC\u0FCB\x03\x02\x02\x02\u0FCD\u0FD0\x03\x02" +
        "\x02\x02\u0FCE\u0FCC\x03\x02\x02\x02\u0FCE\u0FCF\x03\x02\x02\x02\u0FCF" +
        "\u0FD5\x03\x02\x02\x02\u0FD0\u0FCE\x03\x02\x02\x02\u0FD1\u0FD5\x07\x9C" +
        "\x02\x02\u0FD2\u0FD5\x07\u0101\x02\x02\u0FD3\u0FD5\x05\u0188\xC5\x02\u0FD4" +
        "\u0FA6\x03\x02\x02\x02\u0FD4\u0FAF\x03\x02\x02\x02\u0FD4\u0FB8\x03\x02" +
        "\x02\x02\u0FD4\u0FB9\x03\x02\x02\x02\u0FD4\u0FC0\x03\x02\x02\x02\u0FD4" +
        "\u0FCA\x03\x02\x02\x02\u0FD4\u0FD1\x03\x02\x02\x02\u0FD4\u0FD2\x03\x02" +
        "\x02\x02\u0FD4\u0FD3\x03\x02\x02\x02\u0FD5\u0185\x03\x02\x02\x02\u0FD6" +
        "\u0FD7\x07\xA2\x02\x02\u0FD7\u0187\x03\x02\x02\x02\u0FD8\u0FDA\x07\x84" +
        "\x02\x02\u0FD9\u0FDB\x05\u0184\xC3\x02\u0FDA\u0FD9\x03\x02\x02\x02\u0FDB" +
        "\u0FDC\x03\x02\x02\x02\u0FDC\u0FDA\x03\x02\x02\x02\u0FDC\u0FDD\x03\x02" +
        "\x02\x02\u0FDD\u0FDF\x03\x02\x02\x02\u0FDE\u0FE0\x07\x92\x02\x02\u0FDF" +
        "\u0FDE\x03\x02\x02\x02\u0FDF\u0FE0\x03\x02\x02\x02\u0FE0\u0189\x03\x02" +
        "\x02\x02\u0FE1\u0FE2\x07\x92\x02\x02\u0FE2\u018B\x03\x02\x02\x02\u0FE3" +
        "\u0FE4\t\x19\x02\x02\u0FE4\u018D\x03\x02\x02\x02\u0FE5\u1001\x05\u0192" +
        "\xCA\x02\u0FE6\u1001\x07\x94\x02\x02\u0FE7\u0FE8\x07\x98\x02\x02\u0FE8" +
        "\u1001\n\x1A\x02\x02\u0FE9\u0FEA\x07\x99\x02\x02\u0FEA\u1001\n\x1B\x02" +
        "\x02\u0FEB\u1001\x07\x9B\x02\x02\u0FEC\u1001\x07\x9A\x02\x02\u0FED\u1001" +
        "\x07\xCB\x02\x02\u0FEE\u1001\x07\xE0\x02\x02\u0FEF\u1001\x07\xCC\x02\x02" +
        "\u0FF0\u1001\x07\xE1\x02\x02\u0FF1\u1001\x07\xCE\x02\x02\u0FF2\u1001\x07" +
        "\xE3\x02\x02\u0FF3\u1001\x07\xC7\x02\x02\u0FF4\u1001\x07\xDE\x02\x02\u0FF5" +
        "\u1001\x07\xC6\x02\x02\u0FF6\u1001\x07\xDD\x02\x02\u0FF7\u1001\x07\xCA" +
        "\x02\x02\u0FF8\u1001\x07\xDF\x02\x02\u0FF9\u1001\x07\xCD\x02\x02\u0FFA" +
        "\u1001\x07\xE2\x02\x02\u0FFB\u1001\x07\xCF\x02\x02\u0FFC\u1001\x07\xE4" +
        "\x02\x02\u0FFD\u1001\x07\xED\x02\x02\u0FFE\u1001\x07\xEE\x02\x02\u0FFF" +
        "\u1001\x07\xA1\x02\x02\u1000\u0FE5\x03\x02\x02\x02\u1000\u0FE6\x03\x02" +
        "\x02\x02\u1000\u0FE7\x03\x02\x02\x02\u1000\u0FE9\x03\x02\x02\x02\u1000" +
        "\u0FEB\x03\x02\x02\x02\u1000\u0FEC\x03\x02\x02\x02\u1000\u0FED\x03\x02" +
        "\x02\x02\u1000\u0FEE\x03\x02\x02\x02\u1000\u0FEF\x03\x02\x02\x02\u1000" +
        "\u0FF0\x03\x02\x02\x02\u1000\u0FF1\x03\x02\x02\x02\u1000\u0FF2\x03\x02" +
        "\x02\x02\u1000\u0FF3\x03\x02\x02\x02\u1000\u0FF4\x03\x02\x02\x02\u1000" +
        "\u0FF5\x03\x02\x02\x02\u1000\u0FF6\x03\x02\x02\x02\u1000\u0FF7\x03\x02" +
        "\x02\x02\u1000\u0FF8\x03\x02\x02\x02\u1000\u0FF9\x03\x02\x02\x02\u1000" +
        "\u0FFA\x03\x02\x02\x02\u1000\u0FFB\x03\x02\x02\x02\u1000\u0FFC\x03\x02" +
        "\x02\x02\u1000\u0FFD\x03\x02\x02\x02\u1000\u0FFE\x03\x02\x02\x02\u1000" +
        "\u0FFF\x03\x02\x02\x02\u1001\u1002\x03\x02\x02\x02\u1002\u1000\x03\x02" +
        "\x02\x02\u1002\u1003\x03\x02\x02\x02\u1003\u018F\x03\x02\x02\x02\u1004" +
        "\u1005\x07\x04\x02\x02\u1005\u0191\x03\x02\x02\x02\u1006\u1007\x07\xA8" +
        "\x02\x02\u1007\u0193\x03\x02\x02\x02\u0230\u0198\u019E\u01A3\u01A8\u01AF" +
        "\u0226\u022A\u0230\u0236\u023A\u0240\u0246\u024C\u0252\u0257\u025E\u0265" +
        "\u026C\u0272\u0278\u0280\u0289\u028D\u0296\u0298\u029D\u02A3\u02AC\u02AE" +
        "\u02B3\u02B9\u02C2\u02C9\u02CE\u02D6\u02DD\u02E2\u02EA\u02F1\u02F6\u02FE" +
        "\u0305\u030A\u0312\u0319\u031E\u0326\u032D\u0332\u033A\u0341\u0346\u034E" +
        "\u0355\u035A\u0362\u0369\u036E\u0376\u037D\u0382\u038A\u0391\u0396\u039E" +
        "\u03A5\u03AA\u03B2\u03B9\u03BE\u03C6\u03CD\u03D2\u03DA\u03E1\u03E6\u03EE" +
        "\u03F5\u03FA\u041B\u0423\u0425\u042C\u0431\u0437\u043D\u0442\u0448\u044D" +
        "\u0453\u045F\u0464\u046A\u0470\u0476\u047D\u0483\u0486\u048A\u048E\u0490" +
        "\u04A0\u04A5\u04AB\u04B1\u04B8\u04BE\u04C1\u04C7\u04D0\u04D5\u04DD\u04E2" +
        "\u04E7\u04ED\u04F4\u04FA\u04FD\u0503\u0508\u050A\u0511\u0518\u051F\u0527" +
        "\u052C\u0532\u0539\u053F\u0542\u054C\u0551\u0557\u055E\u0564\u0567\u0571" +
        "\u0576\u057C\u0583\u0589\u058C\u0596\u059B\u05A1\u05A8\u05AE\u05B1\u05B9" +
        "\u05C0\u05C5\u05C9\u05CE\u05D5\u05DB\u05DE\u05E6\u05EC\u05F1\u05F5\u05FA" +
        "\u0601\u0607\u060A\u0612\u0619\u061E\u0626\u062D\u0632\u063A\u0641\u0646" +
        "\u064E\u0655\u065A\u0662\u0669\u066E\u0676\u067D\u0682\u068A\u0691\u0696" +
        "\u069E\u06A5\u06AA\u06B2\u06B9\u06BE\u06C6\u06CD\u06D2\u06DA\u06E1\u06E6" +
        "\u06EE\u06F5\u06FA\u0702\u0709\u070E\u0716\u071D\u0722\u072A\u0731\u0736" +
        "\u073E\u0745\u074A\u0752\u0759\u075E\u0766\u076D\u0772\u077A\u0781\u0786" +
        "\u078E\u0795\u079A\u07A2\u07A9\u07AE\u07B6\u07BD\u07C2\u07CA\u07D1\u07D6" +
        "\u07DE\u07E5\u07EA\u07F2\u07F9\u07FE\u0806\u080D\u0812\u081A\u0821\u0826" +
        "\u082E\u0835\u083A\u0842\u0849\u084E\u0856\u085D\u0862\u086A\u0871\u0876" +
        "\u087E\u0885\u088A\u0892\u0899\u089E\u08A6\u08AD\u08B2\u08BA\u08C1\u08C6" +
        "\u08CE\u08D5\u08DA\u08E2\u08E9\u08EE\u08F6\u08FD\u0902\u090A\u0911\u0916" +
        "\u091E\u0925\u092A\u0932\u0939\u093E\u0946\u094D\u0952\u095A\u0961\u0966" +
        "\u096E\u0975\u097A\u0982\u0989\u098E\u0996\u099D\u09A2\u09AA\u09B1\u09B6" +
        "\u09BE\u09C5\u09CA\u09D2\u09D9\u09DE\u09E6\u09ED\u09F2\u09FA\u0A01\u0A06" +
        "\u0A0E\u0A15\u0A1A\u0A22\u0A29\u0A2E\u0A36\u0A3D\u0A42\u0A4A\u0A51\u0A56" +
        "\u0A5E\u0A65\u0A6A\u0A72\u0A79\u0A7E\u0A86\u0A8D\u0A92\u0A9A\u0AA1\u0AA6" +
        "\u0AAE\u0AB5\u0ABA\u0AC2\u0AC9\u0ACE\u0AD6\u0ADD\u0AE2\u0AEA\u0AF1\u0AF6" +
        "\u0AFE\u0B05\u0B0A\u0B12\u0B19\u0B1E\u0B26\u0B2D\u0B32\u0B3A\u0B41\u0B46" +
        "\u0B4E\u0B55\u0B5A\u0B62\u0B69\u0B6E\u0B76\u0B7D\u0B82\u0B8A\u0B91\u0B96" +
        "\u0B9E\u0BA5\u0BAA\u0BB2\u0BB9\u0BBE\u0BC6\u0BCD\u0BD2\u0BDA\u0BE1\u0BE6" +
        "\u0BF2\u0BF7\u0BFD\u0C04\u0C0A\u0C0D\u0C16\u0C18\u0C20\u0C27\u0C2C\u0C35" +
        "\u0C39\u0C3F\u0C46\u0C4C\u0C4F\u0C55\u0C5D\u0C64\u0C69\u0C6E\u0C73\u0C79" +
        "\u0C7D\u0C87\u0C8E\u0C93\u0C9C\u0CA0\u0CAA\u0CB1\u0CB6\u0CBF\u0CC3\u0CCD" +
        "\u0CD4\u0CD9\u0CE2\u0CE6\u0CF0\u0CF7\u0CFC\u0D04\u0D0A\u0D0E\u0D14\u0D1B" +
        "\u0D21\u0D24\u0D29\u0D32\u0D37\u0D39\u0D47\u0D4D\u0D52\u0D56\u0D5A\u0D5D" +
        "\u0D62\u0D79\u0D7E\u0D80\u0D8A\u0D94\u0D9E\u0DA4\u0DAB\u0DB1\u0DB9\u0DC3" +
        "\u0DCE\u0DD4\u0DD9\u0DE0\u0DE9\u0DED\u0DF1\u0DF4\u0E03\u0E07\u0E16\u0E1A" +
        "\u0E20\u0E2B\u0E30\u0E35\u0E37\u0E3C\u0E41\u0E43\u0E48\u0E4E\u0E53\u0E55" +
        "\u0E60\u0E64\u0E71\u0E75\u0E7B\u0E7D\u0E84\u0E88\u0E8A\u0E90\u0E92\u0E99" +
        "\u0E9E\u0EA1\u0EA7\u0EAA\u0EAE\u0EB5\u0EBA\u0EC0\u0EC5\u0ECD\u0ECF\u0ED3" +
        "\u0EDA\u0EDC\u0EE5\u0EE7\u0EEB\u0EF5\u0EF7\u0EFB\u0F01\u0F03\u0F09\u0F10" +
        "\u0F15\u0F1B\u0F20\u0F26\u0F29\u0F2F\u0F36\u0F38\u0F3F\u0F49\u0F54\u0F62" +
        "\u0F68\u0F72\u0F74\u0F7D\u0F81\u0F87\u0F89\u0F90\u0F92\u0F96\u0F9A\u0FA0" +
        "\u0FA4\u0FAA\u0FAD\u0FB3\u0FB6\u0FC0\u0FC7\u0FCE\u0FD4\u0FDC\u0FDF\u1000" +
        "\u1002";
    bitmarkParser._serializedATN = Utils.join([
        bitmarkParser._serializedATNSegment0,
        bitmarkParser._serializedATNSegment1,
        bitmarkParser._serializedATNSegment2,
        bitmarkParser._serializedATNSegment3,
        bitmarkParser._serializedATNSegment4,
        bitmarkParser._serializedATNSegment5,
        bitmarkParser._serializedATNSegment6,
        bitmarkParser._serializedATNSegment7,
    ], "");
    return bitmarkParser;
})();
export { bitmarkParser };
export class BitmarkContext extends ParserRuleContext {
    EOF() { return this.getToken(bitmarkParser.EOF, 0); }
    bitmark_(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bitmark_Context);
        }
        else {
            return this.getRuleContext(i, Bitmark_Context);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitmark; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitmark) {
            listener.enterBitmark(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitmark) {
            listener.exitBitmark(this);
        }
    }
}
export class Bitmark_Context extends ParserRuleContext {
    bit() {
        return this.tryGetRuleContext(0, BitContext);
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitmark_; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitmark_) {
            listener.enterBitmark_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitmark_) {
            listener.exitBitmark_(this);
        }
    }
}
export class BitContext extends ParserRuleContext {
    book() {
        return this.tryGetRuleContext(0, BookContext);
    }
    chapter() {
        return this.tryGetRuleContext(0, ChapterContext);
    }
    summary() {
        return this.tryGetRuleContext(0, SummaryContext);
    }
    toc() {
        return this.tryGetRuleContext(0, TocContext);
    }
    bit_alias() {
        return this.tryGetRuleContext(0, Bit_aliasContext);
    }
    internal_link() {
        return this.tryGetRuleContext(0, Internal_linkContext);
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    group_born() {
        return this.tryGetRuleContext(0, Group_bornContext);
    }
    group_died() {
        return this.tryGetRuleContext(0, Group_diedContext);
    }
    essay() {
        return this.tryGetRuleContext(0, EssayContext);
    }
    correction() {
        return this.tryGetRuleContext(0, CorrectionContext);
    }
    mark_() {
        return this.tryGetRuleContext(0, Mark_Context);
    }
    document_upload() {
        return this.tryGetRuleContext(0, Document_uploadContext);
    }
    take_picture() {
        return this.tryGetRuleContext(0, Take_pictureContext);
    }
    take_audio() {
        return this.tryGetRuleContext(0, Take_audioContext);
    }
    record_audio() {
        return this.tryGetRuleContext(0, Record_audioContext);
    }
    preparation_note() {
        return this.tryGetRuleContext(0, Preparation_noteContext);
    }
    assignment() {
        return this.tryGetRuleContext(0, AssignmentContext);
    }
    article() {
        return this.tryGetRuleContext(0, ArticleContext);
    }
    statement() {
        return this.tryGetRuleContext(0, StatementContext);
    }
    details() {
        return this.tryGetRuleContext(0, DetailsContext);
    }
    sample_solution() {
        return this.tryGetRuleContext(0, Sample_solutionContext);
    }
    buttoncopytext() {
        return this.tryGetRuleContext(0, ButtoncopytextContext);
    }
    wbtcontinue() {
        return this.tryGetRuleContext(0, WbtcontinueContext);
    }
    learningpathdetails() {
        return this.tryGetRuleContext(0, LearningpathdetailsContext);
    }
    note() {
        return this.tryGetRuleContext(0, NoteContext);
    }
    info() {
        return this.tryGetRuleContext(0, InfoContext);
    }
    warning() {
        return this.tryGetRuleContext(0, WarningContext);
    }
    remark() {
        return this.tryGetRuleContext(0, RemarkContext);
    }
    hintbit() {
        return this.tryGetRuleContext(0, HintbitContext);
    }
    help() {
        return this.tryGetRuleContext(0, HelpContext);
    }
    danger() {
        return this.tryGetRuleContext(0, DangerContext);
    }
    bug() {
        return this.tryGetRuleContext(0, BugContext);
    }
    sidenote() {
        return this.tryGetRuleContext(0, SidenoteContext);
    }
    stickynote() {
        return this.tryGetRuleContext(0, StickynoteContext);
    }
    quote() {
        return this.tryGetRuleContext(0, QuoteContext);
    }
    footnote() {
        return this.tryGetRuleContext(0, FootnoteContext);
    }
    examplebit() {
        return this.tryGetRuleContext(0, ExamplebitContext);
    }
    page() {
        return this.tryGetRuleContext(0, PageContext);
    }
    message() {
        return this.tryGetRuleContext(0, MessageContext);
    }
    bot_interview() {
        return this.tryGetRuleContext(0, Bot_interviewContext);
    }
    self_assessment() {
        return this.tryGetRuleContext(0, Self_assessmentContext);
    }
    rating() {
        return this.tryGetRuleContext(0, RatingContext);
    }
    survey() {
        return this.tryGetRuleContext(0, SurveyContext);
    }
    survey_1() {
        return this.tryGetRuleContext(0, Survey_1Context);
    }
    survey_anonymous() {
        return this.tryGetRuleContext(0, Survey_anonymousContext);
    }
    survey_anonymous_1() {
        return this.tryGetRuleContext(0, Survey_anonymous_1Context);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    vendor_padlet_embed() {
        return this.tryGetRuleContext(0, Vendor_padlet_embedContext);
    }
    scorm() {
        return this.tryGetRuleContext(0, ScormContext);
    }
    learning_path_lti() {
        return this.tryGetRuleContext(0, Learning_path_ltiContext);
    }
    learning_path_step() {
        return this.tryGetRuleContext(0, Learning_path_stepContext);
    }
    learning_path_book() {
        return this.tryGetRuleContext(0, Learning_path_bookContext);
    }
    learning_path_sign() {
        return this.tryGetRuleContext(0, Learning_path_signContext);
    }
    learning_path_video_call() {
        return this.tryGetRuleContext(0, Learning_path_video_callContext);
    }
    learning_path_learning_goal() {
        return this.tryGetRuleContext(0, Learning_path_learning_goalContext);
    }
    learning_path_closing() {
        return this.tryGetRuleContext(0, Learning_path_closingContext);
    }
    learning_path_feedback() {
        return this.tryGetRuleContext(0, Learning_path_feedbackContext);
    }
    learning_path_bot_training() {
        return this.tryGetRuleContext(0, Learning_path_bot_trainingContext);
    }
    learning_path_external_link() {
        return this.tryGetRuleContext(0, Learning_path_external_linkContext);
    }
    learning_path_classroom_training() {
        return this.tryGetRuleContext(0, Learning_path_classroom_trainingContext);
    }
    learning_path_classroom_event() {
        return this.tryGetRuleContext(0, Learning_path_classroom_eventContext);
    }
    bot_action_send() {
        return this.tryGetRuleContext(0, Bot_action_sendContext);
    }
    bot_action_announce() {
        return this.tryGetRuleContext(0, Bot_action_announceContext);
    }
    bot_action_save() {
        return this.tryGetRuleContext(0, Bot_action_saveContext);
    }
    bot_action_remind() {
        return this.tryGetRuleContext(0, Bot_action_remindContext);
    }
    bit_image() {
        return this.tryGetRuleContext(0, Bit_imageContext);
    }
    bit_imageLink() {
        return this.tryGetRuleContext(0, Bit_imageLinkContext);
    }
    bit_imageZoom() {
        return this.tryGetRuleContext(0, Bit_imageZoomContext);
    }
    bit_audio() {
        return this.tryGetRuleContext(0, Bit_audioContext);
    }
    bit_audioLink() {
        return this.tryGetRuleContext(0, Bit_audioLinkContext);
    }
    bit_audioEmbed() {
        return this.tryGetRuleContext(0, Bit_audioEmbedContext);
    }
    bit_video() {
        return this.tryGetRuleContext(0, Bit_videoContext);
    }
    bit_videoLink() {
        return this.tryGetRuleContext(0, Bit_videoLinkContext);
    }
    bit_videoEmbed() {
        return this.tryGetRuleContext(0, Bit_videoEmbedContext);
    }
    bit_stillImageFilm() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmContext);
    }
    bit_stillImageFilmLink() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmLinkContext);
    }
    bit_stillImageFilmEmbed() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmEmbedContext);
    }
    bit_document() {
        return this.tryGetRuleContext(0, Bit_documentContext);
    }
    bit_documentLink() {
        return this.tryGetRuleContext(0, Bit_documentLinkContext);
    }
    bit_documentEmbed() {
        return this.tryGetRuleContext(0, Bit_documentEmbedContext);
    }
    bit_documentDownload() {
        return this.tryGetRuleContext(0, Bit_documentDownloadContext);
    }
    bit_websiteLink() {
        return this.tryGetRuleContext(0, Bit_websiteLinkContext);
    }
    bit_appLink() {
        return this.tryGetRuleContext(0, Bit_appLinkContext);
    }
    bit_editorial() {
        return this.tryGetRuleContext(0, Bit_editorialContext);
    }
    book_frontispiece() {
        return this.tryGetRuleContext(0, Book_frontispieceContext);
    }
    book_title() {
        return this.tryGetRuleContext(0, Book_titleContext);
    }
    book_copyright() {
        return this.tryGetRuleContext(0, Book_copyrightContext);
    }
    book_dedication() {
        return this.tryGetRuleContext(0, Book_dedicationContext);
    }
    book_forword() {
        return this.tryGetRuleContext(0, Book_forwordContext);
    }
    book_preface() {
        return this.tryGetRuleContext(0, Book_prefaceContext);
    }
    book_prologue() {
        return this.tryGetRuleContext(0, Book_prologueContext);
    }
    book_epilogue() {
        return this.tryGetRuleContext(0, Book_epilogueContext);
    }
    book_introduction() {
        return this.tryGetRuleContext(0, Book_introductionContext);
    }
    book_inciting_incident() {
        return this.tryGetRuleContext(0, Book_inciting_incidentContext);
    }
    book_conclusion() {
        return this.tryGetRuleContext(0, Book_conclusionContext);
    }
    book_afterword() {
        return this.tryGetRuleContext(0, Book_afterwordContext);
    }
    book_postscript() {
        return this.tryGetRuleContext(0, Book_postscriptContext);
    }
    book_appendix() {
        return this.tryGetRuleContext(0, Book_appendixContext);
    }
    book_addendum() {
        return this.tryGetRuleContext(0, Book_addendumContext);
    }
    book_acknowledgments() {
        return this.tryGetRuleContext(0, Book_acknowledgmentsContext);
    }
    book_list_of_contributors() {
        return this.tryGetRuleContext(0, Book_list_of_contributorsContext);
    }
    book_bibliography() {
        return this.tryGetRuleContext(0, Book_bibliographyContext);
    }
    book_reference_list() {
        return this.tryGetRuleContext(0, Book_reference_listContext);
    }
    book_endnotes() {
        return this.tryGetRuleContext(0, Book_endnotesContext);
    }
    book_notes() {
        return this.tryGetRuleContext(0, Book_notesContext);
    }
    book_copyright_permissions() {
        return this.tryGetRuleContext(0, Book_copyright_permissionsContext);
    }
    book_teaser() {
        return this.tryGetRuleContext(0, Book_teaserContext);
    }
    book_auther_bio() {
        return this.tryGetRuleContext(0, Book_auther_bioContext);
    }
    book_request_for_a_book_review() {
        return this.tryGetRuleContext(0, Book_request_for_a_book_reviewContext);
    }
    book_coming_soon() {
        return this.tryGetRuleContext(0, Book_coming_soonContext);
    }
    book_read_more() {
        return this.tryGetRuleContext(0, Book_read_moreContext);
    }
    book_summary() {
        return this.tryGetRuleContext(0, Book_summaryContext);
    }
    book_epigraph() {
        return this.tryGetRuleContext(0, Book_epigraphContext);
    }
    code() {
        return this.tryGetRuleContext(0, CodeContext);
    }
    card1() {
        return this.tryGetRuleContext(0, Card1Context);
    }
    question1() {
        return this.tryGetRuleContext(0, Question1Context);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit) {
            listener.enterBit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit) {
            listener.exitBit(this);
        }
    }
}
export class BookContext extends ParserRuleContext {
    BitBook() { return this.getToken(bitmarkParser.BitBook, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    format() {
        return this.tryGetRuleContext(0, FormatContext);
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook) {
            listener.enterBook(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook) {
            listener.exitBook(this);
        }
    }
}
export class ChapterContext extends ParserRuleContext {
    BitChapter() { return this.getToken(bitmarkParser.BitChapter, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    format() {
        return this.tryGetRuleContext(0, FormatContext);
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_chapter; }
    // @Override
    enterRule(listener) {
        if (listener.enterChapter) {
            listener.enterChapter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChapter) {
            listener.exitChapter(this);
        }
    }
}
export class TocContext extends ParserRuleContext {
    BitToc() { return this.getToken(bitmarkParser.BitToc, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_toc; }
    // @Override
    enterRule(listener) {
        if (listener.enterToc) {
            listener.enterToc(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitToc) {
            listener.exitToc(this);
        }
    }
}
export class SummaryContext extends ParserRuleContext {
    BitSummary() { return this.getToken(bitmarkParser.BitSummary, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    title_etc() {
        return this.getRuleContext(0, Title_etcContext);
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_summary; }
    // @Override
    enterRule(listener) {
        if (listener.enterSummary) {
            listener.enterSummary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSummary) {
            listener.exitSummary(this);
        }
    }
}
export class Internal_linkContext extends ParserRuleContext {
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    BitIntlink() { return this.tryGetToken(bitmarkParser.BitIntlink, 0); }
    BitIntRef() { return this.tryGetToken(bitmarkParser.BitIntRef, 0); }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_internal_link; }
    // @Override
    enterRule(listener) {
        if (listener.enterInternal_link) {
            listener.enterInternal_link(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInternal_link) {
            listener.exitInternal_link(this);
        }
    }
}
export class Bit_aliasContext extends ParserRuleContext {
    BitAlias() { return this.getToken(bitmarkParser.BitAlias, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    angleref() {
        return this.getRuleContext(0, AnglerefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_alias; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_alias) {
            listener.enterBit_alias(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_alias) {
            listener.exitBit_alias(this);
        }
    }
}
export class Title_etcContext extends ParserRuleContext {
    title(i) {
        if (i === undefined) {
            return this.getRuleContexts(TitleContext);
        }
        else {
            return this.getRuleContext(i, TitleContext);
        }
    }
    atdef(i) {
        if (i === undefined) {
            return this.getRuleContexts(AtdefContext);
        }
        else {
            return this.getRuleContext(i, AtdefContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    angleref(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnglerefContext);
        }
        else {
            return this.getRuleContext(i, AnglerefContext);
        }
    }
    anchor(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnchorContext);
        }
        else {
            return this.getRuleContext(i, AnchorContext);
        }
    }
    progress(i) {
        if (i === undefined) {
            return this.getRuleContexts(ProgressContext);
        }
        else {
            return this.getRuleContext(i, ProgressContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_title_etc; }
    // @Override
    enterRule(listener) {
        if (listener.enterTitle_etc) {
            listener.enterTitle_etc(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTitle_etc) {
            listener.exitTitle_etc(this);
        }
    }
}
export class Group_bornContext extends ParserRuleContext {
    BitGroups() { return this.getToken(bitmarkParser.BitGroups, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    lines(i) {
        if (i === undefined) {
            return this.getRuleContexts(LinesContext);
        }
        else {
            return this.getRuleContext(i, LinesContext);
        }
    }
    OPR(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPR);
        }
        else {
            return this.getToken(bitmarkParser.OPR, i);
        }
    }
    OPHASH(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPHASH);
        }
        else {
            return this.getToken(bitmarkParser.OPHASH, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_group_born; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroup_born) {
            listener.enterGroup_born(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroup_born) {
            listener.exitGroup_born(this);
        }
    }
}
export class Group_diedContext extends ParserRuleContext {
    BitGroupt() { return this.getToken(bitmarkParser.BitGroupt, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    lines(i) {
        if (i === undefined) {
            return this.getRuleContexts(LinesContext);
        }
        else {
            return this.getRuleContext(i, LinesContext);
        }
    }
    OPR(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPR);
        }
        else {
            return this.getToken(bitmarkParser.OPR, i);
        }
    }
    OPHASH(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPHASH);
        }
        else {
            return this.getToken(bitmarkParser.OPHASH, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_group_died; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroup_died) {
            listener.enterGroup_died(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroup_died) {
            listener.exitGroup_died(this);
        }
    }
}
export class Learning_path_ltiContext extends ParserRuleContext {
    BitLearningPathLti() { return this.getToken(bitmarkParser.BitLearningPathLti, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_lti; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_lti) {
            listener.enterLearning_path_lti(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_lti) {
            listener.exitLearning_path_lti(this);
        }
    }
}
export class Learning_path_stepContext extends ParserRuleContext {
    BitLearningPathStep() { return this.getToken(bitmarkParser.BitLearningPathStep, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_step; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_step) {
            listener.enterLearning_path_step(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_step) {
            listener.exitLearning_path_step(this);
        }
    }
}
export class Learning_path_bookContext extends ParserRuleContext {
    BitLearningPathBook() { return this.getToken(bitmarkParser.BitLearningPathBook, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_book; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_book) {
            listener.enterLearning_path_book(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_book) {
            listener.exitLearning_path_book(this);
        }
    }
}
export class Learning_path_signContext extends ParserRuleContext {
    BitLearningPathSign() { return this.getToken(bitmarkParser.BitLearningPathSign, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_sign; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_sign) {
            listener.enterLearning_path_sign(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_sign) {
            listener.exitLearning_path_sign(this);
        }
    }
}
export class Learning_path_video_callContext extends ParserRuleContext {
    BitLearningPathVideoCall() { return this.getToken(bitmarkParser.BitLearningPathVideoCall, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_video_call; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_video_call) {
            listener.enterLearning_path_video_call(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_video_call) {
            listener.exitLearning_path_video_call(this);
        }
    }
}
export class Learning_path_learning_goalContext extends ParserRuleContext {
    BitLearningPathLearningGoal() { return this.getToken(bitmarkParser.BitLearningPathLearningGoal, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_learning_goal; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_learning_goal) {
            listener.enterLearning_path_learning_goal(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_learning_goal) {
            listener.exitLearning_path_learning_goal(this);
        }
    }
}
export class Learning_path_closingContext extends ParserRuleContext {
    BitLearningPathClosing() { return this.getToken(bitmarkParser.BitLearningPathClosing, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_closing; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_closing) {
            listener.enterLearning_path_closing(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_closing) {
            listener.exitLearning_path_closing(this);
        }
    }
}
export class Learning_path_feedbackContext extends ParserRuleContext {
    BitLearningPathFeedback() { return this.getToken(bitmarkParser.BitLearningPathFeedback, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_feedback; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_feedback) {
            listener.enterLearning_path_feedback(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_feedback) {
            listener.exitLearning_path_feedback(this);
        }
    }
}
export class Learning_path_bot_trainingContext extends ParserRuleContext {
    BitLearningPathBotTraining() { return this.getToken(bitmarkParser.BitLearningPathBotTraining, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_bot_training; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_bot_training) {
            listener.enterLearning_path_bot_training(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_bot_training) {
            listener.exitLearning_path_bot_training(this);
        }
    }
}
export class Learning_path_external_linkContext extends ParserRuleContext {
    BitLearningPathExternalLink() { return this.getToken(bitmarkParser.BitLearningPathExternalLink, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_external_link; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_external_link) {
            listener.enterLearning_path_external_link(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_external_link) {
            listener.exitLearning_path_external_link(this);
        }
    }
}
export class Learning_path_classroom_trainingContext extends ParserRuleContext {
    BitLearningPathClassroomTraining() { return this.getToken(bitmarkParser.BitLearningPathClassroomTraining, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_classroom_training; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_classroom_training) {
            listener.enterLearning_path_classroom_training(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_classroom_training) {
            listener.exitLearning_path_classroom_training(this);
        }
    }
}
export class Learning_path_classroom_eventContext extends ParserRuleContext {
    BitLearningPathClassroomEvent() { return this.getToken(bitmarkParser.BitLearningPathClassroomEvent, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_classroom_event; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_classroom_event) {
            listener.enterLearning_path_classroom_event(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_classroom_event) {
            listener.exitLearning_path_classroom_event(this);
        }
    }
}
export class Bot_action_sendContext extends ParserRuleContext {
    BitBotActionSend() { return this.getToken(bitmarkParser.BitBotActionSend, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_send; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_send) {
            listener.enterBot_action_send(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_send) {
            listener.exitBot_action_send(this);
        }
    }
}
export class Bot_action_announceContext extends ParserRuleContext {
    BitBotActionAnnounce() { return this.getToken(bitmarkParser.BitBotActionAnnounce, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_announce; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_announce) {
            listener.enterBot_action_announce(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_announce) {
            listener.exitBot_action_announce(this);
        }
    }
}
export class Bot_action_saveContext extends ParserRuleContext {
    BitBotActionSave() { return this.getToken(bitmarkParser.BitBotActionSave, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_save; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_save) {
            listener.enterBot_action_save(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_save) {
            listener.exitBot_action_save(this);
        }
    }
}
export class Bot_action_remindContext extends ParserRuleContext {
    BitBotActionRemind() { return this.getToken(bitmarkParser.BitBotActionRemind, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_remind; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_remind) {
            listener.enterBot_action_remind(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_remind) {
            listener.exitBot_action_remind(this);
        }
    }
}
export class BitElemContext extends ParserRuleContext {
    LIST_LINE() { return this.tryGetToken(bitmarkParser.LIST_LINE, 0); }
    dclines() {
        return this.tryGetRuleContext(0, DclinesContext);
    }
    gap() {
        return this.tryGetRuleContext(0, GapContext);
    }
    reference() {
        return this.tryGetRuleContext(0, ReferenceContext);
    }
    dateprop() {
        return this.tryGetRuleContext(0, DatepropContext);
    }
    progress() {
        return this.tryGetRuleContext(0, ProgressContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    dollarans() {
        return this.tryGetRuleContext(0, DollaransContext);
    }
    partans() {
        return this.tryGetRuleContext(0, PartansContext);
    }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    title() {
        return this.tryGetRuleContext(0, TitleContext);
    }
    instruction() {
        return this.tryGetRuleContext(0, InstructionContext);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    example() {
        return this.tryGetRuleContext(0, ExampleContext);
    }
    bool_label() {
        return this.tryGetRuleContext(0, Bool_labelContext);
    }
    progress_points() {
        return this.tryGetRuleContext(0, Progress_pointsContext);
    }
    istracked() {
        return this.tryGetRuleContext(0, IstrackedContext);
    }
    isinfoonly() {
        return this.tryGetRuleContext(0, IsinfoonlyContext);
    }
    imagebit() {
        return this.tryGetRuleContext(0, ImagebitContext);
    }
    audiobit() {
        return this.tryGetRuleContext(0, AudiobitContext);
    }
    videobit() {
        return this.tryGetRuleContext(0, VideobitContext);
    }
    articlebit() {
        return this.tryGetRuleContext(0, ArticlebitContext);
    }
    documentbit() {
        return this.tryGetRuleContext(0, DocumentbitContext);
    }
    appbit() {
        return this.tryGetRuleContext(0, AppbitContext);
    }
    websitebit() {
        return this.tryGetRuleContext(0, WebsitebitContext);
    }
    stillimagefilmbit() {
        return this.tryGetRuleContext(0, StillimagefilmbitContext);
    }
    angleref() {
        return this.tryGetRuleContext(0, AnglerefContext);
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    bracketed_text() {
        return this.tryGetRuleContext(0, Bracketed_textContext);
    }
    sp() {
        return this.tryGetRuleContext(0, SpContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitElem; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitElem) {
            listener.enterBitElem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitElem) {
            listener.exitBitElem(this);
        }
    }
}
export class GapContext extends ParserRuleContext {
    single_gap(i) {
        if (i === undefined) {
            return this.getRuleContexts(Single_gapContext);
        }
        else {
            return this.getRuleContext(i, Single_gapContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    hint(i) {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }
        else {
            return this.getRuleContext(i, HintContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    example(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExampleContext);
        }
        else {
            return this.getRuleContext(i, ExampleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_gap; }
    // @Override
    enterRule(listener) {
        if (listener.enterGap) {
            listener.enterGap(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGap) {
            listener.exitGap(this);
        }
    }
}
export class Single_gapContext extends ParserRuleContext {
    OPU() { return this.getToken(bitmarkParser.OPU, 0); }
    clnsp() {
        return this.getRuleContext(0, ClnspContext);
    }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    STRING() { return this.tryGetToken(bitmarkParser.STRING, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_single_gap; }
    // @Override
    enterRule(listener) {
        if (listener.enterSingle_gap) {
            listener.enterSingle_gap(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSingle_gap) {
            listener.exitSingle_gap(this);
        }
    }
}
export class Choice_plusContext extends ParserRuleContext {
    OPP() { return this.getToken(bitmarkParser.OPP, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_plus; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_plus) {
            listener.enterChoice_plus(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_plus) {
            listener.exitChoice_plus(this);
        }
    }
}
export class Choice_minusContext extends ParserRuleContext {
    OPM() { return this.getToken(bitmarkParser.OPM, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_minus; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_minus) {
            listener.enterChoice_minus(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_minus) {
            listener.exitChoice_minus(this);
        }
    }
}
export class Choice_starContext extends ParserRuleContext {
    OPR() { return this.getToken(bitmarkParser.OPR, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_star; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_star) {
            listener.enterChoice_star(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_star) {
            listener.exitChoice_star(this);
        }
    }
}
export class EssayContext extends ParserRuleContext {
    BitEssay() { return this.getToken(bitmarkParser.BitEssay, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    ml_example(i) {
        if (i === undefined) {
            return this.getRuleContexts(Ml_exampleContext);
        }
        else {
            return this.getRuleContext(i, Ml_exampleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_essay; }
    // @Override
    enterRule(listener) {
        if (listener.enterEssay) {
            listener.enterEssay(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEssay) {
            listener.exitEssay(this);
        }
    }
}
export class Ml_exampleContext extends ParserRuleContext {
    AtExamplecol() { return this.getToken(bitmarkParser.AtExamplecol, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_ml_example; }
    // @Override
    enterRule(listener) {
        if (listener.enterMl_example) {
            listener.enterMl_example(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMl_example) {
            listener.exitMl_example(this);
        }
    }
}
export class PartansContext extends ParserRuleContext {
    AtPartialAnswerS() { return this.tryGetToken(bitmarkParser.AtPartialAnswerS, 0); }
    AtPartialAnswer() { return this.tryGetToken(bitmarkParser.AtPartialAnswer, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_partans; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartans) {
            listener.enterPartans(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartans) {
            listener.exitPartans(this);
        }
    }
}
export class ResourceContext extends ParserRuleContext {
    bitElem() {
        return this.getRuleContext(0, BitElemContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource) {
            listener.enterResource(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource) {
            listener.exitResource(this);
        }
    }
}
export class CorrectionContext extends ParserRuleContext {
    BitCorrection() { return this.getToken(bitmarkParser.BitCorrection, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    corrs(i) {
        if (i === undefined) {
            return this.getRuleContexts(CorrsContext);
        }
        else {
            return this.getRuleContext(i, CorrsContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_correction; }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrection) {
            listener.enterCorrection(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrection) {
            listener.exitCorrection(this);
        }
    }
}
export class CorrsContext extends ParserRuleContext {
    OPM() { return this.tryGetToken(bitmarkParser.OPM, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL() { return this.getToken(bitmarkParser.NL, 0); }
    OPP() { return this.tryGetToken(bitmarkParser.OPP, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_corrs; }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrs) {
            listener.enterCorrs(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrs) {
            listener.exitCorrs(this);
        }
    }
}
export class Mark_Context extends ParserRuleContext {
    BitMark() { return this.getToken(bitmarkParser.BitMark, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    mark_text(i) {
        if (i === undefined) {
            return this.getRuleContexts(Mark_textContext);
        }
        else {
            return this.getRuleContext(i, Mark_textContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_) {
            listener.enterMark_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_) {
            listener.exitMark_(this);
        }
    }
}
export class Mark_textContext extends ParserRuleContext {
    OPS() { return this.getToken(bitmarkParser.OPS, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    mark_color() {
        return this.tryGetRuleContext(0, Mark_colorContext);
    }
    hint(i) {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }
        else {
            return this.getRuleContext(i, HintContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_text; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_text) {
            listener.enterMark_text(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_text) {
            listener.exitMark_text(this);
        }
    }
}
export class Mark_colorContext extends ParserRuleContext {
    OPAMARK() { return this.getToken(bitmarkParser.OPAMARK, 0); }
    STRING() { return this.getToken(bitmarkParser.STRING, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_color; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_color) {
            listener.enterMark_color(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_color) {
            listener.exitMark_color(this);
        }
    }
}
export class Document_uploadContext extends ParserRuleContext {
    BitDocup() { return this.getToken(bitmarkParser.BitDocup, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    Video_type() { return this.tryGetToken(bitmarkParser.Video_type, 0); }
    Audio_type() { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
    Image_type() { return this.tryGetToken(bitmarkParser.Image_type, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_document_upload; }
    // @Override
    enterRule(listener) {
        if (listener.enterDocument_upload) {
            listener.enterDocument_upload(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDocument_upload) {
            listener.exitDocument_upload(this);
        }
    }
}
export class Take_audioContext extends ParserRuleContext {
    BitTakeAudio() { return this.getToken(bitmarkParser.BitTakeAudio, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_take_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterTake_audio) {
            listener.enterTake_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTake_audio) {
            listener.exitTake_audio(this);
        }
    }
}
export class Take_pictureContext extends ParserRuleContext {
    BitTakepic() { return this.getToken(bitmarkParser.BitTakepic, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_take_picture; }
    // @Override
    enterRule(listener) {
        if (listener.enterTake_picture) {
            listener.enterTake_picture(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTake_picture) {
            listener.exitTake_picture(this);
        }
    }
}
export class Record_audioContext extends ParserRuleContext {
    BitRecaud() { return this.getToken(bitmarkParser.BitRecaud, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_record_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterRecord_audio) {
            listener.enterRecord_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRecord_audio) {
            listener.exitRecord_audio(this);
        }
    }
}
export class Preparation_noteContext extends ParserRuleContext {
    BitPrepnote() { return this.getToken(bitmarkParser.BitPrepnote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_preparation_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterPreparation_note) {
            listener.enterPreparation_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPreparation_note) {
            listener.exitPreparation_note(this);
        }
    }
}
export class AssignmentContext extends ParserRuleContext {
    BitAssign() { return this.getToken(bitmarkParser.BitAssign, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_assignment; }
    // @Override
    enterRule(listener) {
        if (listener.enterAssignment) {
            listener.enterAssignment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAssignment) {
            listener.exitAssignment(this);
        }
    }
}
export class ArticleContext extends ParserRuleContext {
    BitArticle() { return this.getToken(bitmarkParser.BitArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticle) {
            listener.enterArticle(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticle) {
            listener.exitArticle(this);
        }
    }
}
export class StatementContext extends ParserRuleContext {
    BitStatement() { return this.getToken(bitmarkParser.BitStatement, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_statement; }
    // @Override
    enterRule(listener) {
        if (listener.enterStatement) {
            listener.enterStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStatement) {
            listener.exitStatement(this);
        }
    }
}
export class DetailsContext extends ParserRuleContext {
    BitDetails() { return this.getToken(bitmarkParser.BitDetails, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_details; }
    // @Override
    enterRule(listener) {
        if (listener.enterDetails) {
            listener.enterDetails(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDetails) {
            listener.exitDetails(this);
        }
    }
}
export class Sample_solutionContext extends ParserRuleContext {
    BitSampleSolution() { return this.getToken(bitmarkParser.BitSampleSolution, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sample_solution; }
    // @Override
    enterRule(listener) {
        if (listener.enterSample_solution) {
            listener.enterSample_solution(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSample_solution) {
            listener.exitSample_solution(this);
        }
    }
}
export class ButtoncopytextContext extends ParserRuleContext {
    BitButtonCopytext() { return this.getToken(bitmarkParser.BitButtonCopytext, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_buttoncopytext; }
    // @Override
    enterRule(listener) {
        if (listener.enterButtoncopytext) {
            listener.enterButtoncopytext(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitButtoncopytext) {
            listener.exitButtoncopytext(this);
        }
    }
}
export class WbtcontinueContext extends ParserRuleContext {
    BitWbtContinue() { return this.getToken(bitmarkParser.BitWbtContinue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_wbtcontinue; }
    // @Override
    enterRule(listener) {
        if (listener.enterWbtcontinue) {
            listener.enterWbtcontinue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWbtcontinue) {
            listener.exitWbtcontinue(this);
        }
    }
}
export class LearningpathdetailsContext extends ParserRuleContext {
    BitLearningPathDetails() { return this.getToken(bitmarkParser.BitLearningPathDetails, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learningpathdetails; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearningpathdetails) {
            listener.enterLearningpathdetails(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearningpathdetails) {
            listener.exitLearningpathdetails(this);
        }
    }
}
export class PageContext extends ParserRuleContext {
    BitPage() { return this.getToken(bitmarkParser.BitPage, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_page; }
    // @Override
    enterRule(listener) {
        if (listener.enterPage) {
            listener.enterPage(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPage) {
            listener.exitPage(this);
        }
    }
}
export class NoteContext extends ParserRuleContext {
    BitNote() { return this.getToken(bitmarkParser.BitNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterNote) {
            listener.enterNote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNote) {
            listener.exitNote(this);
        }
    }
}
export class InfoContext extends ParserRuleContext {
    BitInfo() { return this.getToken(bitmarkParser.BitInfo, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_info; }
    // @Override
    enterRule(listener) {
        if (listener.enterInfo) {
            listener.enterInfo(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInfo) {
            listener.exitInfo(this);
        }
    }
}
export class WarningContext extends ParserRuleContext {
    BitWarning() { return this.getToken(bitmarkParser.BitWarning, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_warning; }
    // @Override
    enterRule(listener) {
        if (listener.enterWarning) {
            listener.enterWarning(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWarning) {
            listener.exitWarning(this);
        }
    }
}
export class RemarkContext extends ParserRuleContext {
    BitRemark() { return this.getToken(bitmarkParser.BitRemark, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_remark; }
    // @Override
    enterRule(listener) {
        if (listener.enterRemark) {
            listener.enterRemark(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRemark) {
            listener.exitRemark(this);
        }
    }
}
export class HelpContext extends ParserRuleContext {
    BitHelp() { return this.getToken(bitmarkParser.BitHelp, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_help; }
    // @Override
    enterRule(listener) {
        if (listener.enterHelp) {
            listener.enterHelp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHelp) {
            listener.exitHelp(this);
        }
    }
}
export class DangerContext extends ParserRuleContext {
    BitDanger() { return this.getToken(bitmarkParser.BitDanger, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_danger; }
    // @Override
    enterRule(listener) {
        if (listener.enterDanger) {
            listener.enterDanger(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDanger) {
            listener.exitDanger(this);
        }
    }
}
export class BugContext extends ParserRuleContext {
    BitBug() { return this.getToken(bitmarkParser.BitBug, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bug; }
    // @Override
    enterRule(listener) {
        if (listener.enterBug) {
            listener.enterBug(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBug) {
            listener.exitBug(this);
        }
    }
}
export class SidenoteContext extends ParserRuleContext {
    BitSidenote() { return this.getToken(bitmarkParser.BitSidenote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sidenote; }
    // @Override
    enterRule(listener) {
        if (listener.enterSidenote) {
            listener.enterSidenote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSidenote) {
            listener.exitSidenote(this);
        }
    }
}
export class StickynoteContext extends ParserRuleContext {
    BitStickynote() { return this.getToken(bitmarkParser.BitStickynote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stickynote; }
    // @Override
    enterRule(listener) {
        if (listener.enterStickynote) {
            listener.enterStickynote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStickynote) {
            listener.exitStickynote(this);
        }
    }
}
export class QuoteContext extends ParserRuleContext {
    BitQuote() { return this.getToken(bitmarkParser.BitQuote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_quote; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuote) {
            listener.enterQuote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuote) {
            listener.exitQuote(this);
        }
    }
}
export class FootnoteContext extends ParserRuleContext {
    BitFootnote() { return this.getToken(bitmarkParser.BitFootnote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_footnote; }
    // @Override
    enterRule(listener) {
        if (listener.enterFootnote) {
            listener.enterFootnote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFootnote) {
            listener.exitFootnote(this);
        }
    }
}
export class HintbitContext extends ParserRuleContext {
    BitHint() { return this.getToken(bitmarkParser.BitHint, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_hintbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterHintbit) {
            listener.enterHintbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHintbit) {
            listener.exitHintbit(this);
        }
    }
}
export class ExamplebitContext extends ParserRuleContext {
    BitExample() { return this.getToken(bitmarkParser.BitExample, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_examplebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterExamplebit) {
            listener.enterExamplebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExamplebit) {
            listener.exitExamplebit(this);
        }
    }
}
export class Vendor_padlet_embedContext extends ParserRuleContext {
    BitVendorPadletEmbed() { return this.getToken(bitmarkParser.BitVendorPadletEmbed, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_padlet_embed; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_padlet_embed) {
            listener.enterVendor_padlet_embed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_padlet_embed) {
            listener.exitVendor_padlet_embed(this);
        }
    }
}
export class ScormContext extends ParserRuleContext {
    BitScorm() { return this.getToken(bitmarkParser.BitScorm, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_scorm; }
    // @Override
    enterRule(listener) {
        if (listener.enterScorm) {
            listener.enterScorm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitScorm) {
            listener.exitScorm(this);
        }
    }
}
export class Bit_imageContext extends ParserRuleContext {
    BitImage() { return this.getToken(bitmarkParser.BitImage, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_image) {
            listener.enterBit_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_image) {
            listener.exitBit_image(this);
        }
    }
}
export class Bit_imageLinkContext extends ParserRuleContext {
    BitImageLink() { return this.getToken(bitmarkParser.BitImageLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageLink) {
            listener.enterBit_imageLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageLink) {
            listener.exitBit_imageLink(this);
        }
    }
}
export class Bit_imageZoomContext extends ParserRuleContext {
    BitImageZoom() { return this.getToken(bitmarkParser.BitImageZoom, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageZoom; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageZoom) {
            listener.enterBit_imageZoom(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageZoom) {
            listener.exitBit_imageZoom(this);
        }
    }
}
export class Bit_audioContext extends ParserRuleContext {
    BitAudio() { return this.getToken(bitmarkParser.BitAudio, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audio) {
            listener.enterBit_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audio) {
            listener.exitBit_audio(this);
        }
    }
}
export class Bit_audioLinkContext extends ParserRuleContext {
    BitAudioLink() { return this.getToken(bitmarkParser.BitAudioLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audioLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audioLink) {
            listener.enterBit_audioLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audioLink) {
            listener.exitBit_audioLink(this);
        }
    }
}
export class Bit_audioEmbedContext extends ParserRuleContext {
    BitAudioEmbed() { return this.getToken(bitmarkParser.BitAudioEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audioEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audioEmbed) {
            listener.enterBit_audioEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audioEmbed) {
            listener.exitBit_audioEmbed(this);
        }
    }
}
export class Bit_videoContext extends ParserRuleContext {
    BitVideo() { return this.getToken(bitmarkParser.BitVideo, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_video; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_video) {
            listener.enterBit_video(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_video) {
            listener.exitBit_video(this);
        }
    }
}
export class Bit_videoLinkContext extends ParserRuleContext {
    BitVideoLink() { return this.getToken(bitmarkParser.BitVideoLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoLink) {
            listener.enterBit_videoLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoLink) {
            listener.exitBit_videoLink(this);
        }
    }
}
export class Bit_videoEmbedContext extends ParserRuleContext {
    BitVideoEmbed() { return this.getToken(bitmarkParser.BitVideoEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoEmbed) {
            listener.enterBit_videoEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoEmbed) {
            listener.exitBit_videoEmbed(this);
        }
    }
}
export class Bit_stillImageFilmContext extends ParserRuleContext {
    BitStillImageFilm() { return this.getToken(bitmarkParser.BitStillImageFilm, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilm; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilm) {
            listener.enterBit_stillImageFilm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilm) {
            listener.exitBit_stillImageFilm(this);
        }
    }
}
export class Bit_stillImageFilmLinkContext extends ParserRuleContext {
    BitStillImageFilmLink() { return this.getToken(bitmarkParser.BitStillImageFilmLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilmLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilmLink) {
            listener.enterBit_stillImageFilmLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilmLink) {
            listener.exitBit_stillImageFilmLink(this);
        }
    }
}
export class Bit_stillImageFilmEmbedContext extends ParserRuleContext {
    BitStillImageFilmEmbed() { return this.getToken(bitmarkParser.BitStillImageFilmEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilmEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilmEmbed) {
            listener.enterBit_stillImageFilmEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilmEmbed) {
            listener.exitBit_stillImageFilmEmbed(this);
        }
    }
}
export class Bit_websiteLinkContext extends ParserRuleContext {
    BitWebsiteLink() { return this.getToken(bitmarkParser.BitWebsiteLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_websiteLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_websiteLink) {
            listener.enterBit_websiteLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_websiteLink) {
            listener.exitBit_websiteLink(this);
        }
    }
}
export class Bit_documentContext extends ParserRuleContext {
    BitDocument() { return this.getToken(bitmarkParser.BitDocument, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_document; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_document) {
            listener.enterBit_document(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_document) {
            listener.exitBit_document(this);
        }
    }
}
export class Bit_documentLinkContext extends ParserRuleContext {
    BitDocumentLink() { return this.getToken(bitmarkParser.BitDocumentLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentLink) {
            listener.enterBit_documentLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentLink) {
            listener.exitBit_documentLink(this);
        }
    }
}
export class Bit_documentEmbedContext extends ParserRuleContext {
    BitDocumentEmbed() { return this.getToken(bitmarkParser.BitDocumentEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentEmbed) {
            listener.enterBit_documentEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentEmbed) {
            listener.exitBit_documentEmbed(this);
        }
    }
}
export class Bit_documentDownloadContext extends ParserRuleContext {
    BitDocumentDownload() { return this.getToken(bitmarkParser.BitDocumentDownload, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentDownload; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentDownload) {
            listener.enterBit_documentDownload(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentDownload) {
            listener.exitBit_documentDownload(this);
        }
    }
}
export class Bit_appLinkContext extends ParserRuleContext {
    BitAppLink() { return this.getToken(bitmarkParser.BitAppLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_appLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_appLink) {
            listener.enterBit_appLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_appLink) {
            listener.exitBit_appLink(this);
        }
    }
}
export class Bit_editorialContext extends ParserRuleContext {
    BitEditorial() { return this.getToken(bitmarkParser.BitEditorial, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_editorial; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_editorial) {
            listener.enterBit_editorial(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_editorial) {
            listener.exitBit_editorial(this);
        }
    }
}
export class Book_frontispieceContext extends ParserRuleContext {
    BitBookFrontispiece() { return this.getToken(bitmarkParser.BitBookFrontispiece, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_frontispiece; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_frontispiece) {
            listener.enterBook_frontispiece(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_frontispiece) {
            listener.exitBook_frontispiece(this);
        }
    }
}
export class Book_titleContext extends ParserRuleContext {
    BitBookTitle() { return this.getToken(bitmarkParser.BitBookTitle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_title; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_title) {
            listener.enterBook_title(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_title) {
            listener.exitBook_title(this);
        }
    }
}
export class Book_copyrightContext extends ParserRuleContext {
    BitBookCopyright() { return this.getToken(bitmarkParser.BitBookCopyright, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_copyright; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_copyright) {
            listener.enterBook_copyright(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_copyright) {
            listener.exitBook_copyright(this);
        }
    }
}
export class Book_dedicationContext extends ParserRuleContext {
    BitBookDedication() { return this.getToken(bitmarkParser.BitBookDedication, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_dedication; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_dedication) {
            listener.enterBook_dedication(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_dedication) {
            listener.exitBook_dedication(this);
        }
    }
}
export class Book_forwordContext extends ParserRuleContext {
    BitBookForword() { return this.getToken(bitmarkParser.BitBookForword, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_forword; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_forword) {
            listener.enterBook_forword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_forword) {
            listener.exitBook_forword(this);
        }
    }
}
export class Book_prefaceContext extends ParserRuleContext {
    BitBookPreface() { return this.getToken(bitmarkParser.BitBookPreface, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_preface; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_preface) {
            listener.enterBook_preface(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_preface) {
            listener.exitBook_preface(this);
        }
    }
}
export class Book_prologueContext extends ParserRuleContext {
    BitBookPrologue() { return this.getToken(bitmarkParser.BitBookPrologue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_prologue; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_prologue) {
            listener.enterBook_prologue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_prologue) {
            listener.exitBook_prologue(this);
        }
    }
}
export class Book_epilogueContext extends ParserRuleContext {
    BitBookEpilogue() { return this.getToken(bitmarkParser.BitBookEpilogue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_epilogue; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_epilogue) {
            listener.enterBook_epilogue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_epilogue) {
            listener.exitBook_epilogue(this);
        }
    }
}
export class Book_introductionContext extends ParserRuleContext {
    BitBookIntroduction() { return this.getToken(bitmarkParser.BitBookIntroduction, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_introduction; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_introduction) {
            listener.enterBook_introduction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_introduction) {
            listener.exitBook_introduction(this);
        }
    }
}
export class Book_inciting_incidentContext extends ParserRuleContext {
    BitBookIncitingIncident() { return this.getToken(bitmarkParser.BitBookIncitingIncident, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_inciting_incident; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_inciting_incident) {
            listener.enterBook_inciting_incident(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_inciting_incident) {
            listener.exitBook_inciting_incident(this);
        }
    }
}
export class Book_conclusionContext extends ParserRuleContext {
    BitBookConclusion() { return this.getToken(bitmarkParser.BitBookConclusion, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_conclusion; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_conclusion) {
            listener.enterBook_conclusion(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_conclusion) {
            listener.exitBook_conclusion(this);
        }
    }
}
export class Book_afterwordContext extends ParserRuleContext {
    BitBookAfterword() { return this.getToken(bitmarkParser.BitBookAfterword, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_afterword; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_afterword) {
            listener.enterBook_afterword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_afterword) {
            listener.exitBook_afterword(this);
        }
    }
}
export class Book_postscriptContext extends ParserRuleContext {
    BitBookPostscript() { return this.getToken(bitmarkParser.BitBookPostscript, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_postscript; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_postscript) {
            listener.enterBook_postscript(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_postscript) {
            listener.exitBook_postscript(this);
        }
    }
}
export class Book_appendixContext extends ParserRuleContext {
    BitBookappendix() { return this.getToken(bitmarkParser.BitBookappendix, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_appendix; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_appendix) {
            listener.enterBook_appendix(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_appendix) {
            listener.exitBook_appendix(this);
        }
    }
}
export class Book_addendumContext extends ParserRuleContext {
    BitBookAddendum() { return this.getToken(bitmarkParser.BitBookAddendum, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_addendum; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_addendum) {
            listener.enterBook_addendum(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_addendum) {
            listener.exitBook_addendum(this);
        }
    }
}
export class Book_acknowledgmentsContext extends ParserRuleContext {
    BitBookAcknowledgments() { return this.getToken(bitmarkParser.BitBookAcknowledgments, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_acknowledgments; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_acknowledgments) {
            listener.enterBook_acknowledgments(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_acknowledgments) {
            listener.exitBook_acknowledgments(this);
        }
    }
}
export class Book_list_of_contributorsContext extends ParserRuleContext {
    BitBookListOfContributors() { return this.getToken(bitmarkParser.BitBookListOfContributors, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_list_of_contributors; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_list_of_contributors) {
            listener.enterBook_list_of_contributors(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_list_of_contributors) {
            listener.exitBook_list_of_contributors(this);
        }
    }
}
export class Book_bibliographyContext extends ParserRuleContext {
    BitBookBibliography() { return this.getToken(bitmarkParser.BitBookBibliography, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_bibliography; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_bibliography) {
            listener.enterBook_bibliography(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_bibliography) {
            listener.exitBook_bibliography(this);
        }
    }
}
export class Book_reference_listContext extends ParserRuleContext {
    BitBookReferenceList() { return this.getToken(bitmarkParser.BitBookReferenceList, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_reference_list; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_reference_list) {
            listener.enterBook_reference_list(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_reference_list) {
            listener.exitBook_reference_list(this);
        }
    }
}
export class Book_endnotesContext extends ParserRuleContext {
    BitBookEndnotes() { return this.getToken(bitmarkParser.BitBookEndnotes, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_endnotes; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_endnotes) {
            listener.enterBook_endnotes(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_endnotes) {
            listener.exitBook_endnotes(this);
        }
    }
}
export class Book_notesContext extends ParserRuleContext {
    BitBookNotes() { return this.getToken(bitmarkParser.BitBookNotes, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_notes; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_notes) {
            listener.enterBook_notes(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_notes) {
            listener.exitBook_notes(this);
        }
    }
}
export class Book_copyright_permissionsContext extends ParserRuleContext {
    BitBookCopyrightPermissions() { return this.getToken(bitmarkParser.BitBookCopyrightPermissions, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_copyright_permissions; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_copyright_permissions) {
            listener.enterBook_copyright_permissions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_copyright_permissions) {
            listener.exitBook_copyright_permissions(this);
        }
    }
}
export class Book_teaserContext extends ParserRuleContext {
    BitBookTeaser() { return this.getToken(bitmarkParser.BitBookTeaser, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_teaser; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_teaser) {
            listener.enterBook_teaser(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_teaser) {
            listener.exitBook_teaser(this);
        }
    }
}
export class Book_auther_bioContext extends ParserRuleContext {
    BitBookAutherBio() { return this.getToken(bitmarkParser.BitBookAutherBio, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_auther_bio; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_auther_bio) {
            listener.enterBook_auther_bio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_auther_bio) {
            listener.exitBook_auther_bio(this);
        }
    }
}
export class Book_request_for_a_book_reviewContext extends ParserRuleContext {
    BitBookRequestForABookReview() { return this.getToken(bitmarkParser.BitBookRequestForABookReview, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_request_for_a_book_review; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_request_for_a_book_review) {
            listener.enterBook_request_for_a_book_review(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_request_for_a_book_review) {
            listener.exitBook_request_for_a_book_review(this);
        }
    }
}
export class Book_coming_soonContext extends ParserRuleContext {
    BitBookComingSoon() { return this.getToken(bitmarkParser.BitBookComingSoon, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_coming_soon; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_coming_soon) {
            listener.enterBook_coming_soon(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_coming_soon) {
            listener.exitBook_coming_soon(this);
        }
    }
}
export class Book_read_moreContext extends ParserRuleContext {
    BitBookReadMore() { return this.getToken(bitmarkParser.BitBookReadMore, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_read_more; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_read_more) {
            listener.enterBook_read_more(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_read_more) {
            listener.exitBook_read_more(this);
        }
    }
}
export class Book_summaryContext extends ParserRuleContext {
    BitBookSummary() { return this.getToken(bitmarkParser.BitBookSummary, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_summary; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_summary) {
            listener.enterBook_summary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_summary) {
            listener.exitBook_summary(this);
        }
    }
}
export class Book_epigraphContext extends ParserRuleContext {
    BitBookEpigraph() { return this.getToken(bitmarkParser.BitBookEpigraph, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_epigraph; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_epigraph) {
            listener.enterBook_epigraph(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_epigraph) {
            listener.exitBook_epigraph(this);
        }
    }
}
export class CodeContext extends ParserRuleContext {
    BitCode() { return this.getToken(bitmarkParser.BitCode, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_code; }
    // @Override
    enterRule(listener) {
        if (listener.enterCode) {
            listener.enterCode(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCode) {
            listener.exitCode(this);
        }
    }
}
export class Card1Context extends ParserRuleContext {
    BitCard1() { return this.getToken(bitmarkParser.BitCard1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_card1; }
    // @Override
    enterRule(listener) {
        if (listener.enterCard1) {
            listener.enterCard1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCard1) {
            listener.exitCard1(this);
        }
    }
}
export class Question1Context extends ParserRuleContext {
    BitQuestion1() { return this.getToken(bitmarkParser.BitQuestion1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_question1; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuestion1) {
            listener.enterQuestion1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuestion1) {
            listener.exitQuestion1(this);
        }
    }
}
export class MessageContext extends ParserRuleContext {
    BitMessage() { return this.getToken(bitmarkParser.BitMessage, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_message; }
    // @Override
    enterRule(listener) {
        if (listener.enterMessage) {
            listener.enterMessage(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMessage) {
            listener.exitMessage(this);
        }
    }
}
export class Bot_interviewContext extends ParserRuleContext {
    BitBotint() { return this.getToken(bitmarkParser.BitBotint, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    bot_choice(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_choiceContext);
        }
        else {
            return this.getRuleContext(i, Bot_choiceContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    sspl(i) {
        if (i === undefined) {
            return this.getRuleContexts(SsplContext);
        }
        else {
            return this.getRuleContext(i, SsplContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_interview; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_interview) {
            listener.enterBot_interview(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_interview) {
            listener.exitBot_interview(this);
        }
    }
}
export class Bot_choiceContext extends ParserRuleContext {
    words(i) {
        if (i === undefined) {
            return this.getRuleContexts(WordsContext);
        }
        else {
            return this.getRuleContext(i, WordsContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    audiobit(i) {
        if (i === undefined) {
            return this.getRuleContexts(AudiobitContext);
        }
        else {
            return this.getRuleContext(i, AudiobitContext);
        }
    }
    gap(i) {
        if (i === undefined) {
            return this.getRuleContexts(GapContext);
        }
        else {
            return this.getRuleContext(i, GapContext);
        }
    }
    choice_plus(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_plusContext);
        }
        else {
            return this.getRuleContext(i, Choice_plusContext);
        }
    }
    choice_minus(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_minusContext);
        }
        else {
            return this.getRuleContext(i, Choice_minusContext);
        }
    }
    choice_star(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_starContext);
        }
        else {
            return this.getRuleContext(i, Choice_starContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_choice; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_choice) {
            listener.enterBot_choice(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_choice) {
            listener.exitBot_choice(this);
        }
    }
}
export class RatingContext extends ParserRuleContext {
    BitRating() { return this.getToken(bitmarkParser.BitRating, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_rating; }
    // @Override
    enterRule(listener) {
        if (listener.enterRating) {
            listener.enterRating(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRating) {
            listener.exitRating(this);
        }
    }
}
export class Bullet_itemContext extends ParserRuleContext {
    OPBUL() { return this.getToken(bitmarkParser.OPBUL, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    atpoint() {
        return this.tryGetRuleContext(0, AtpointContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bullet_item; }
    // @Override
    enterRule(listener) {
        if (listener.enterBullet_item) {
            listener.enterBullet_item(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBullet_item) {
            listener.exitBullet_item(this);
        }
    }
}
export class SurveyContext extends ParserRuleContext {
    BitSurvey() { return this.getToken(bitmarkParser.BitSurvey, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey) {
            listener.enterSurvey(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey) {
            listener.exitSurvey(this);
        }
    }
}
export class Survey_1Context extends ParserRuleContext {
    BitSurvey1() { return this.getToken(bitmarkParser.BitSurvey1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_1; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_1) {
            listener.enterSurvey_1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_1) {
            listener.exitSurvey_1(this);
        }
    }
}
export class Survey_anonymousContext extends ParserRuleContext {
    BitSurveyanon() { return this.getToken(bitmarkParser.BitSurveyanon, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_anonymous; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_anonymous) {
            listener.enterSurvey_anonymous(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_anonymous) {
            listener.exitSurvey_anonymous(this);
        }
    }
}
export class Survey_anonymous_1Context extends ParserRuleContext {
    BitSurveyanon1() { return this.getToken(bitmarkParser.BitSurveyanon1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_anonymous_1; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_anonymous_1) {
            listener.enterSurvey_anonymous_1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_anonymous_1) {
            listener.exitSurvey_anonymous_1(this);
        }
    }
}
export class Self_assessmentContext extends ParserRuleContext {
    BitSelfassess() { return this.getToken(bitmarkParser.BitSelfassess, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    self_assess_s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(Self_assess_s_and_wContext);
        }
        else {
            return this.getRuleContext(i, Self_assess_s_and_wContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_self_assessment; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelf_assessment) {
            listener.enterSelf_assessment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelf_assessment) {
            listener.exitSelf_assessment(this);
        }
    }
}
export class Self_assess_s_and_wContext extends ParserRuleContext {
    OPBUL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPBUL);
        }
        else {
            return this.getToken(bitmarkParser.OPBUL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_self_assess_s_and_w; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelf_assess_s_and_w) {
            listener.enterSelf_assess_s_and_w(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelf_assess_s_and_w) {
            listener.exitSelf_assess_s_and_w(this);
        }
    }
}
export class AtpointContext extends ParserRuleContext {
    AtPoints() { return this.getToken(bitmarkParser.AtPoints, 0); }
    NUMERIC() { return this.getToken(bitmarkParser.NUMERIC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atpoint; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtpoint) {
            listener.enterAtpoint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtpoint) {
            listener.exitAtpoint(this);
        }
    }
}
export class FormatContext extends ParserRuleContext {
    resource_format(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_formatContext);
        }
        else {
            return this.getRuleContext(i, Resource_formatContext);
        }
    }
    ColonText(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.ColonText);
        }
        else {
            return this.getToken(bitmarkParser.ColonText, i);
        }
    }
    resource_format_extra(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_format_extraContext);
        }
        else {
            return this.getRuleContext(i, Resource_format_extraContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormat) {
            listener.enterFormat(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormat) {
            listener.exitFormat(this);
        }
    }
}
export class Resource_formatContext extends ParserRuleContext {
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    Prosemirror() { return this.tryGetToken(bitmarkParser.Prosemirror, 0); }
    Placeholder() { return this.tryGetToken(bitmarkParser.Placeholder, 0); }
    AmpArticle() { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
    AmpDocument() { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
    AmpWebsite() { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
    AmpStillImageFilm() { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
    AmpAudioLink() { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
    AmpImageLink() { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
    AmpVideoLink() { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
    AmpArticleLink() { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
    AmpDocumentLink() { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
    AmpAppLink() { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
    AmpWebsiteLink() { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
    AmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_format) {
            listener.enterResource_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_format) {
            listener.exitResource_format(this);
        }
    }
}
export class Resource_format_extraContext extends ParserRuleContext {
    image_format() {
        return this.tryGetRuleContext(0, Image_formatContext);
    }
    audio_format() {
        return this.tryGetRuleContext(0, Audio_formatContext);
    }
    video_format() {
        return this.tryGetRuleContext(0, Video_formatContext);
    }
    article_format() {
        return this.tryGetRuleContext(0, Article_formatContext);
    }
    document_format() {
        return this.tryGetRuleContext(0, Document_formatContext);
    }
    app_format() {
        return this.tryGetRuleContext(0, App_formatContext);
    }
    website_format() {
        return this.tryGetRuleContext(0, Website_formatContext);
    }
    stillimagefilm_format() {
        return this.tryGetRuleContext(0, Stillimagefilm_formatContext);
    }
    AmpPdf() { return this.tryGetToken(bitmarkParser.AmpPdf, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_format_extra; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_format_extra) {
            listener.enterResource_format_extra(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_format_extra) {
            listener.exitResource_format_extra(this);
        }
    }
}
export class Format2Context extends ParserRuleContext {
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    ColonText() { return this.tryGetToken(bitmarkParser.ColonText, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_format2; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormat2) {
            listener.enterFormat2(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormat2) {
            listener.exitFormat2(this);
        }
    }
}
export class Image_formatContext extends ParserRuleContext {
    AmpImage() { return this.tryGetToken(bitmarkParser.AmpImage, 0); }
    Image_type() { return this.tryGetToken(bitmarkParser.Image_type, 0); }
    DotArticleAtt() { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
    AmpImageLink() { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
    AmpImageZoom() { return this.tryGetToken(bitmarkParser.AmpImageZoom, 0); }
    AmpImageWAudio() { return this.tryGetToken(bitmarkParser.AmpImageWAudio, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_format) {
            listener.enterImage_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_format) {
            listener.exitImage_format(this);
        }
    }
}
export class Video_formatContext extends ParserRuleContext {
    AmpVideo() { return this.tryGetToken(bitmarkParser.AmpVideo, 0); }
    AmpVideoLink() { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Video_type() { return this.tryGetToken(bitmarkParser.Video_type, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_format) {
            listener.enterVideo_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_format) {
            listener.exitVideo_format(this);
        }
    }
}
export class Article_formatContext extends ParserRuleContext {
    AmpArticle() { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
    AmpArticleLink() { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_article_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticle_format) {
            listener.enterArticle_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticle_format) {
            listener.exitArticle_format(this);
        }
    }
}
export class Document_formatContext extends ParserRuleContext {
    AmpDocument() { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
    AmpDocumentLink() { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_document_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterDocument_format) {
            listener.enterDocument_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDocument_format) {
            listener.exitDocument_format(this);
        }
    }
}
export class App_formatContext extends ParserRuleContext {
    AmpApp() { return this.tryGetToken(bitmarkParser.AmpApp, 0); }
    AmpAppLink() { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_format) {
            listener.enterApp_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_format) {
            listener.exitApp_format(this);
        }
    }
}
export class Website_formatContext extends ParserRuleContext {
    AmpWebsite() { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
    AmpWebsiteLink() { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_website_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterWebsite_format) {
            listener.enterWebsite_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWebsite_format) {
            listener.exitWebsite_format(this);
        }
    }
}
export class Stillimagefilm_formatContext extends ParserRuleContext {
    AmpStillImageFilm() { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
    AmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimagefilm_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimagefilm_format) {
            listener.enterStillimagefilm_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimagefilm_format) {
            listener.exitStillimagefilm_format(this);
        }
    }
}
export class Op_article_formatContext extends ParserRuleContext {
    OpAmpArticleLink() { return this.tryGetToken(bitmarkParser.OpAmpArticleLink, 0); }
    OpAmpArticle() { return this.tryGetToken(bitmarkParser.OpAmpArticle, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_article_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_article_format) {
            listener.enterOp_article_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_article_format) {
            listener.exitOp_article_format(this);
        }
    }
}
export class Op_document_formatContext extends ParserRuleContext {
    OpAmpDocumentLink() { return this.tryGetToken(bitmarkParser.OpAmpDocumentLink, 0); }
    OpAmpDocument() { return this.tryGetToken(bitmarkParser.OpAmpDocument, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_document_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_document_format) {
            listener.enterOp_document_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_document_format) {
            listener.exitOp_document_format(this);
        }
    }
}
export class Op_app_formatContext extends ParserRuleContext {
    OpAmpApp() { return this.tryGetToken(bitmarkParser.OpAmpApp, 0); }
    OpAmpAppLink() { return this.tryGetToken(bitmarkParser.OpAmpAppLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_app_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_app_format) {
            listener.enterOp_app_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_app_format) {
            listener.exitOp_app_format(this);
        }
    }
}
export class Op_website_formatContext extends ParserRuleContext {
    OpAmpWebsite() { return this.tryGetToken(bitmarkParser.OpAmpWebsite, 0); }
    OpAmpWebsiteLink() { return this.tryGetToken(bitmarkParser.OpAmpWebsiteLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_website_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_website_format) {
            listener.enterOp_website_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_website_format) {
            listener.exitOp_website_format(this);
        }
    }
}
export class Op_video_formatContext extends ParserRuleContext {
    OpAmpVideo() { return this.tryGetToken(bitmarkParser.OpAmpVideo, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Video_type() { return this.tryGetToken(bitmarkParser.Video_type, 0); }
    OpAmpVideoLink() { return this.tryGetToken(bitmarkParser.OpAmpVideoLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_video_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_video_format) {
            listener.enterOp_video_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_video_format) {
            listener.exitOp_video_format(this);
        }
    }
}
export class Op_stillimagefilm_formatContext extends ParserRuleContext {
    OpAmpStillImageFilm() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilm, 0); }
    OpAmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_stillimagefilm_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_stillimagefilm_format) {
            listener.enterOp_stillimagefilm_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_stillimagefilm_format) {
            listener.exitOp_stillimagefilm_format(this);
        }
    }
}
export class ArticlebitContext extends ParserRuleContext {
    op_article_format() {
        return this.tryGetRuleContext(0, Op_article_formatContext);
    }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    ArticleText() { return this.tryGetToken(bitmarkParser.ArticleText, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_articlebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticlebit) {
            listener.enterArticlebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticlebit) {
            listener.exitArticlebit(this);
        }
    }
}
export class DocumentbitContext extends ParserRuleContext {
    op_document_format() {
        return this.getRuleContext(0, Op_document_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_documentbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterDocumentbit) {
            listener.enterDocumentbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDocumentbit) {
            listener.exitDocumentbit(this);
        }
    }
}
export class WebsitebitContext extends ParserRuleContext {
    op_website_format() {
        return this.getRuleContext(0, Op_website_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_websitebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterWebsitebit) {
            listener.enterWebsitebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWebsitebit) {
            listener.exitWebsitebit(this);
        }
    }
}
export class AppbitContext extends ParserRuleContext {
    op_app_format() {
        return this.getRuleContext(0, Op_app_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    telephone() {
        return this.tryGetRuleContext(0, TelephoneContext);
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_appbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterAppbit) {
            listener.enterAppbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAppbit) {
            listener.exitAppbit(this);
        }
    }
}
export class StillimagefilmbitContext extends ParserRuleContext {
    stillimg_one() {
        return this.getRuleContext(0, Stillimg_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimagefilmbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimagefilmbit) {
            listener.enterStillimagefilmbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimagefilmbit) {
            listener.exitStillimagefilmbit(this);
        }
    }
}
export class Stillimg_oneContext extends ParserRuleContext {
    op_stillimagefilm_format() {
        return this.getRuleContext(0, Op_stillimagefilm_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimg_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimg_one) {
            listener.enterStillimg_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimg_one) {
            listener.exitStillimg_one(this);
        }
    }
}
export class VideobitContext extends ParserRuleContext {
    video_one() {
        return this.getRuleContext(0, Video_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_videobit; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideobit) {
            listener.enterVideobit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideobit) {
            listener.exitVideobit(this);
        }
    }
}
export class Video_oneContext extends ParserRuleContext {
    op_video_format() {
        return this.getRuleContext(0, Op_video_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_one) {
            listener.enterVideo_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_one) {
            listener.exitVideo_one(this);
        }
    }
}
export class ImagebitContext extends ParserRuleContext {
    image_one() {
        return this.getRuleContext(0, Image_oneContext);
    }
    image_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Image_chainedContext);
        }
        else {
            return this.getRuleContext(i, Image_chainedContext);
        }
    }
    NL() { return this.tryGetToken(bitmarkParser.NL, 0); }
    ShowInIndex() { return this.tryGetToken(bitmarkParser.ShowInIndex, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_imagebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterImagebit) {
            listener.enterImagebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImagebit) {
            listener.exitImagebit(this);
        }
    }
}
export class Image_oneContext extends ParserRuleContext {
    op_image_format() {
        return this.getRuleContext(0, Op_image_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_one) {
            listener.enterImage_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_one) {
            listener.exitImage_one(this);
        }
    }
}
export class Op_image_formatContext extends ParserRuleContext {
    OpAmpImage() { return this.tryGetToken(bitmarkParser.OpAmpImage, 0); }
    Image_type() { return this.tryGetToken(bitmarkParser.Image_type, 0); }
    DotArticleAtt() { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
    OpAmpImageLink() { return this.tryGetToken(bitmarkParser.OpAmpImageLink, 0); }
    OpAmpImageZoom() { return this.tryGetToken(bitmarkParser.OpAmpImageZoom, 0); }
    OpAmpImageWAudio() { return this.tryGetToken(bitmarkParser.OpAmpImageWAudio, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_image_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_image_format) {
            listener.enterOp_image_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_image_format) {
            listener.exitOp_image_format(this);
        }
    }
}
export class Image_chainedContext extends ParserRuleContext {
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_chained) {
            listener.enterImage_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_chained) {
            listener.exitImage_chained(this);
        }
    }
}
export class Image_chained4matchContext extends ParserRuleContext {
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_chained4match; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_chained4match) {
            listener.enterImage_chained4match(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_chained4match) {
            listener.exitImage_chained4match(this);
        }
    }
}
export class AudiobitContext extends ParserRuleContext {
    audio_one() {
        return this.getRuleContext(0, Audio_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audiobit; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudiobit) {
            listener.enterAudiobit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudiobit) {
            listener.exitAudiobit(this);
        }
    }
}
export class Audio_oneContext extends ParserRuleContext {
    op_audio_format() {
        return this.getRuleContext(0, Op_audio_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audio_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudio_one) {
            listener.enterAudio_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudio_one) {
            listener.exitAudio_one(this);
        }
    }
}
export class Audio_formatContext extends ParserRuleContext {
    AmpAudio() { return this.tryGetToken(bitmarkParser.AmpAudio, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Audio_type() { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
    AmpAudioLink() { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audio_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudio_format) {
            listener.enterAudio_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudio_format) {
            listener.exitAudio_format(this);
        }
    }
}
export class Op_audio_formatContext extends ParserRuleContext {
    OpAmpAudio() { return this.tryGetToken(bitmarkParser.OpAmpAudio, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Audio_type() { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
    OpAmpAudioLink() { return this.tryGetToken(bitmarkParser.OpAmpAudioLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_audio_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_audio_format) {
            listener.enterOp_audio_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_audio_format) {
            listener.exitOp_audio_format(this);
        }
    }
}
export class Resource_chainedContext extends ParserRuleContext {
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    OPA() { return this.tryGetToken(bitmarkParser.OPA, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_chained) {
            listener.enterResource_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_chained) {
            listener.exitResource_chained(this);
        }
    }
}
export class TelephoneContext extends ParserRuleContext {
    TEL() { return this.getToken(bitmarkParser.TEL, 0); }
    PLUS() { return this.getToken(bitmarkParser.PLUS, 0); }
    NUMERIC() { return this.getToken(bitmarkParser.NUMERIC, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_telephone; }
    // @Override
    enterRule(listener) {
        if (listener.enterTelephone) {
            listener.enterTelephone(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTelephone) {
            listener.exitTelephone(this);
        }
    }
}
export class UrlContext extends ParserRuleContext {
    URL() { return this.getToken(bitmarkParser.URL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_url; }
    // @Override
    enterRule(listener) {
        if (listener.enterUrl) {
            listener.enterUrl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUrl) {
            listener.exitUrl(this);
        }
    }
}
export class ItemContext extends ParserRuleContext {
    OPC() { return this.getToken(bitmarkParser.OPC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    lead() {
        return this.tryGetRuleContext(0, LeadContext);
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    words(i) {
        if (i === undefined) {
            return this.getRuleContexts(WordsContext);
        }
        else {
            return this.getRuleContext(i, WordsContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_item; }
    // @Override
    enterRule(listener) {
        if (listener.enterItem) {
            listener.enterItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitItem) {
            listener.exitItem(this);
        }
    }
}
export class LeadContext extends ParserRuleContext {
    OPC() { return this.getToken(bitmarkParser.OPC, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    words(i) {
        if (i === undefined) {
            return this.getRuleContexts(WordsContext);
        }
        else {
            return this.getRuleContext(i, WordsContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lead; }
    // @Override
    enterRule(listener) {
        if (listener.enterLead) {
            listener.enterLead(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLead) {
            listener.exitLead(this);
        }
    }
}
export class AnglerefContext extends ParserRuleContext {
    OPRANGLES() { return this.tryGetToken(bitmarkParser.OPRANGLES, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    OPRANGLEL() { return this.tryGetToken(bitmarkParser.OPRANGLEL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_angleref; }
    // @Override
    enterRule(listener) {
        if (listener.enterAngleref) {
            listener.enterAngleref(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAngleref) {
            listener.exitAngleref(this);
        }
    }
}
export class ExampleContext extends ParserRuleContext {
    AtExamplecl() { return this.tryGetToken(bitmarkParser.AtExamplecl, 0); }
    AtExampleWithStr() { return this.tryGetToken(bitmarkParser.AtExampleWithStr, 0); }
    AtExamplecol() { return this.tryGetToken(bitmarkParser.AtExamplecol, 0); }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    SENTENCE() { return this.tryGetToken(bitmarkParser.SENTENCE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_example; }
    // @Override
    enterRule(listener) {
        if (listener.enterExample) {
            listener.enterExample(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExample) {
            listener.exitExample(this);
        }
    }
}
export class Bracketed_textContext extends ParserRuleContext {
    BracEnclose() { return this.getToken(bitmarkParser.BracEnclose, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bracketed_text; }
    // @Override
    enterRule(listener) {
        if (listener.enterBracketed_text) {
            listener.enterBracketed_text(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBracketed_text) {
            listener.exitBracketed_text(this);
        }
    }
}
export class ReferenceContext extends ParserRuleContext {
    AtReference() { return this.getToken(bitmarkParser.AtReference, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    URL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.URL);
        }
        else {
            return this.getToken(bitmarkParser.URL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_reference; }
    // @Override
    enterRule(listener) {
        if (listener.enterReference) {
            listener.enterReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReference) {
            listener.exitReference(this);
        }
    }
}
export class ProgressContext extends ParserRuleContext {
    AtProgress() { return this.getToken(bitmarkParser.AtProgress, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_progress; }
    // @Override
    enterRule(listener) {
        if (listener.enterProgress) {
            listener.enterProgress(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProgress) {
            listener.exitProgress(this);
        }
    }
}
export class DatepropContext extends ParserRuleContext {
    AtDate() { return this.getToken(bitmarkParser.AtDate, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    dateprop_chained() {
        return this.tryGetRuleContext(0, Dateprop_chainedContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dateprop; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateprop) {
            listener.enterDateprop(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateprop) {
            listener.exitDateprop(this);
        }
    }
}
export class Dateprop_chainedContext extends ParserRuleContext {
    AtDate() { return this.getToken(bitmarkParser.AtDate, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dateprop_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateprop_chained) {
            listener.enterDateprop_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateprop_chained) {
            listener.exitDateprop_chained(this);
        }
    }
}
export class InstructionContext extends ParserRuleContext {
    OPB() { return this.getToken(bitmarkParser.OPB, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_instruction; }
    // @Override
    enterRule(listener) {
        if (listener.enterInstruction) {
            listener.enterInstruction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInstruction) {
            listener.exitInstruction(this);
        }
    }
}
export class HintContext extends ParserRuleContext {
    OPQ() { return this.getToken(bitmarkParser.OPQ, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_hint; }
    // @Override
    enterRule(listener) {
        if (listener.enterHint) {
            listener.enterHint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHint) {
            listener.exitHint(this);
        }
    }
}
export class TitleContext extends ParserRuleContext {
    OPHASH() { return this.getToken(bitmarkParser.OPHASH, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_title; }
    // @Override
    enterRule(listener) {
        if (listener.enterTitle) {
            listener.enterTitle(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTitle) {
            listener.exitTitle(this);
        }
    }
}
export class Bool_labelContext extends ParserRuleContext {
    AtLabeltrue() { return this.tryGetToken(bitmarkParser.AtLabeltrue, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    AtLabelfalse() { return this.tryGetToken(bitmarkParser.AtLabelfalse, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bool_label; }
    // @Override
    enterRule(listener) {
        if (listener.enterBool_label) {
            listener.enterBool_label(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBool_label) {
            listener.exitBool_label(this);
        }
    }
}
export class Progress_pointsContext extends ParserRuleContext {
    AtProgressPoints() { return this.getToken(bitmarkParser.AtProgressPoints, 0); }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_progress_points; }
    // @Override
    enterRule(listener) {
        if (listener.enterProgress_points) {
            listener.enterProgress_points(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProgress_points) {
            listener.exitProgress_points(this);
        }
    }
}
export class IstrackedContext extends ParserRuleContext {
    OpAtIsTracked() { return this.getToken(bitmarkParser.OpAtIsTracked, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_istracked; }
    // @Override
    enterRule(listener) {
        if (listener.enterIstracked) {
            listener.enterIstracked(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIstracked) {
            listener.exitIstracked(this);
        }
    }
}
export class IsinfoonlyContext extends ParserRuleContext {
    OpAtIsInfoOnly() { return this.getToken(bitmarkParser.OpAtIsInfoOnly, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_isinfoonly; }
    // @Override
    enterRule(listener) {
        if (listener.enterIsinfoonly) {
            listener.enterIsinfoonly(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIsinfoonly) {
            listener.exitIsinfoonly(this);
        }
    }
}
export class AtdefContext extends ParserRuleContext {
    atdef_(i) {
        if (i === undefined) {
            return this.getRuleContexts(Atdef_Context);
        }
        else {
            return this.getRuleContext(i, Atdef_Context);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atdef; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtdef) {
            listener.enterAtdef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtdef) {
            listener.exitAtdef(this);
        }
    }
}
export class Atdef_Context extends ParserRuleContext {
    OPA() { return this.tryGetToken(bitmarkParser.OPA, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    DBLCOLON() { return this.tryGetToken(bitmarkParser.DBLCOLON, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atdef_; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtdef_) {
            listener.enterAtdef_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtdef_) {
            listener.exitAtdef_(this);
        }
    }
}
export class DollaransContext extends ParserRuleContext {
    OPDOLL() { return this.getToken(bitmarkParser.OPDOLL, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dollarans; }
    // @Override
    enterRule(listener) {
        if (listener.enterDollarans) {
            listener.enterDollarans(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDollarans) {
            listener.exitDollarans(this);
        }
    }
}
export class AnchorContext extends ParserRuleContext {
    OPDANGLE() { return this.getToken(bitmarkParser.OPDANGLE, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_anchor; }
    // @Override
    enterRule(listener) {
        if (listener.enterAnchor) {
            listener.enterAnchor(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAnchor) {
            listener.exitAnchor(this);
        }
    }
}
export class LinesContext extends ParserRuleContext {
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lines; }
    // @Override
    enterRule(listener) {
        if (listener.enterLines) {
            listener.enterLines(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLines) {
            listener.exitLines(this);
        }
    }
}
export class S_and_wContext extends ParserRuleContext {
    STRING() { return this.tryGetToken(bitmarkParser.STRING, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    OPS() { return this.tryGetToken(bitmarkParser.OPS, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    AMP() { return this.tryGetToken(bitmarkParser.AMP, 0); }
    DBLEQ() { return this.tryGetToken(bitmarkParser.DBLEQ, 0); }
    URL() { return this.tryGetToken(bitmarkParser.URL, 0); }
    bracket_escaped() {
        return this.tryGetRuleContext(0, Bracket_escapedContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_s_and_w; }
    // @Override
    enterRule(listener) {
        if (listener.enterS_and_w) {
            listener.enterS_and_w(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitS_and_w) {
            listener.exitS_and_w(this);
        }
    }
}
export class DclinesContext extends ParserRuleContext {
    DCANY() { return this.getToken(bitmarkParser.DCANY, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dclines; }
    // @Override
    enterRule(listener) {
        if (listener.enterDclines) {
            listener.enterDclines(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDclines) {
            listener.exitDclines(this);
        }
    }
}
export class Bracket_escapedContext extends ParserRuleContext {
    OPESC() { return this.getToken(bitmarkParser.OPESC, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bracket_escaped; }
    // @Override
    enterRule(listener) {
        if (listener.enterBracket_escaped) {
            listener.enterBracket_escaped(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBracket_escaped) {
            listener.exitBracket_escaped(this);
        }
    }
}
export class ClnspContext extends ParserRuleContext {
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_clnsp; }
    // @Override
    enterRule(listener) {
        if (listener.enterClnsp) {
            listener.enterClnsp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitClnsp) {
            listener.exitClnsp(this);
        }
    }
}
export class SsplContext extends ParserRuleContext {
    SSPL() { return this.tryGetToken(bitmarkParser.SSPL, 0); }
    SSPL2() { return this.tryGetToken(bitmarkParser.SSPL2, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sspl; }
    // @Override
    enterRule(listener) {
        if (listener.enterSspl) {
            listener.enterSspl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSspl) {
            listener.exitSspl(this);
        }
    }
}
export class WordsContext extends ParserRuleContext {
    sentence(i) {
        if (i === undefined) {
            return this.getRuleContexts(SentenceContext);
        }
        else {
            return this.getRuleContext(i, SentenceContext);
        }
    }
    AMP(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AMP);
        }
        else {
            return this.getToken(bitmarkParser.AMP, i);
        }
    }
    Greater(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.Greater);
        }
        else {
            return this.getToken(bitmarkParser.Greater, i);
        }
    }
    Less(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.Less);
        }
        else {
            return this.getToken(bitmarkParser.Less, i);
        }
    }
    RightArrow(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.RightArrow);
        }
        else {
            return this.getToken(bitmarkParser.RightArrow, i);
        }
    }
    RightAngle(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.RightAngle);
        }
        else {
            return this.getToken(bitmarkParser.RightAngle, i);
        }
    }
    AmpArticle(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpArticle);
        }
        else {
            return this.getToken(bitmarkParser.AmpArticle, i);
        }
    }
    AmpArticleLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpArticleLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpArticleLink, i);
        }
    }
    AmpDocument(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpDocument);
        }
        else {
            return this.getToken(bitmarkParser.AmpDocument, i);
        }
    }
    AmpDocumentLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpDocumentLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpDocumentLink, i);
        }
    }
    AmpWebsite(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpWebsite);
        }
        else {
            return this.getToken(bitmarkParser.AmpWebsite, i);
        }
    }
    AmpWebsiteLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpWebsiteLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpWebsiteLink, i);
        }
    }
    AmpImage(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpImage);
        }
        else {
            return this.getToken(bitmarkParser.AmpImage, i);
        }
    }
    AmpImageLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpImageLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpImageLink, i);
        }
    }
    AmpAudio(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAudio);
        }
        else {
            return this.getToken(bitmarkParser.AmpAudio, i);
        }
    }
    AmpAudioLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAudioLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpAudioLink, i);
        }
    }
    AmpVideo(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpVideo);
        }
        else {
            return this.getToken(bitmarkParser.AmpVideo, i);
        }
    }
    AmpVideoLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpVideoLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpVideoLink, i);
        }
    }
    AmpApp(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpApp);
        }
        else {
            return this.getToken(bitmarkParser.AmpApp, i);
        }
    }
    AmpAppLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAppLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpAppLink, i);
        }
    }
    AmpStillImageFilm(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpStillImageFilm);
        }
        else {
            return this.getToken(bitmarkParser.AmpStillImageFilm, i);
        }
    }
    AmpStillImageFilmLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpStillImageFilmLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpStillImageFilmLink, i);
        }
    }
    BitmarkMinus(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BitmarkMinus);
        }
        else {
            return this.getToken(bitmarkParser.BitmarkMinus, i);
        }
    }
    BitmarkPlus(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BitmarkPlus);
        }
        else {
            return this.getToken(bitmarkParser.BitmarkPlus, i);
        }
    }
    QUOTE_INDEX(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.QUOTE_INDEX);
        }
        else {
            return this.getToken(bitmarkParser.QUOTE_INDEX, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_words; }
    // @Override
    enterRule(listener) {
        if (listener.enterWords) {
            listener.enterWords(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWords) {
            listener.exitWords(this);
        }
    }
}
export class SpContext extends ParserRuleContext {
    S() { return this.getToken(bitmarkParser.S, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sp; }
    // @Override
    enterRule(listener) {
        if (listener.enterSp) {
            listener.enterSp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSp) {
            listener.exitSp(this);
        }
    }
}
export class SentenceContext extends ParserRuleContext {
    SENTENCE() { return this.getToken(bitmarkParser.SENTENCE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sentence; }
    // @Override
    enterRule(listener) {
        if (listener.enterSentence) {
            listener.enterSentence(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSentence) {
            listener.exitSentence(this);
        }
    }
}
