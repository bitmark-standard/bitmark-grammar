// Generated from ./antlr/bitmarkParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { bitmarkParserListener } from "./bitmarkParserListener";

export class bitmarkParser extends Parser {
	public static readonly OPDOT = 1;
	public static readonly S = 2;
	public static readonly BitBook = 3;
	public static readonly BitChapter = 4;
	public static readonly BitToc = 5;
	public static readonly BitSummary = 6;
	public static readonly BitIntlink = 7;
	public static readonly BitIntRef = 8;
	public static readonly BitAlias = 9;
	public static readonly BitGroups = 10;
	public static readonly BitGroupt = 11;
	public static readonly BitPlaceholder = 12;
	public static readonly BitStatement = 13;
	public static readonly BitDetails = 14;
	public static readonly BitSampleSolution = 15;
	public static readonly BitTakeAudio = 16;
	public static readonly CLOZE = 17;
	public static readonly MATCH = 18;
	public static readonly BitArticle = 19;
	public static readonly BitPage = 20;
	public static readonly BitEssay = 21;
	public static readonly BitMessage = 22;
	public static readonly BitCorrection = 23;
	public static readonly BitMark = 24;
	public static readonly BitTakepic = 25;
	public static readonly BitRecaud = 26;
	public static readonly BitPrepnote = 27;
	public static readonly BitAssign = 28;
	public static readonly BitBotint = 29;
	public static readonly BitSelfassess = 30;
	public static readonly BitRating = 31;
	public static readonly BitSurvey = 32;
	public static readonly BitSurvey1 = 33;
	public static readonly BitSurveyanon = 34;
	public static readonly BitSurveyanon1 = 35;
	public static readonly BitNote = 36;
	public static readonly BitInfo = 37;
	public static readonly BitWarning = 38;
	public static readonly BitRemark = 39;
	public static readonly BitHint = 40;
	public static readonly BitHelp = 41;
	public static readonly BitDanger = 42;
	public static readonly BitBug = 43;
	public static readonly BitSidenote = 44;
	public static readonly BitStickynote = 45;
	public static readonly BitQuote = 46;
	public static readonly BitFootnote = 47;
	public static readonly BitExample = 48;
	public static readonly BitButtonCopytext = 49;
	public static readonly BitWbtContinue = 50;
	public static readonly BitLearningPathDetails = 51;
	public static readonly BitAiPrompt = 52;
	public static readonly BitNoteAi = 53;
	public static readonly BitSummayAi = 54;
	public static readonly BitArticleAi = 55;
	public static readonly BitLearningPathLti = 56;
	public static readonly BitLearningPathStep = 57;
	public static readonly BitLearningPathBook = 58;
	public static readonly BitLearningPathSign = 59;
	public static readonly BitLearningPathVideoCall = 60;
	public static readonly BitLearningPathLearningGoal = 61;
	public static readonly BitLearningPathClosing = 62;
	public static readonly BitLearningPathFeedback = 63;
	public static readonly BitLearningPathBotTraining = 64;
	public static readonly BitLearningPathExternalLink = 65;
	public static readonly BitLearningPathClassroomTraining = 66;
	public static readonly BitLearningPathClassroomEvent = 67;
	public static readonly BitBotActionSend = 68;
	public static readonly BitBotActionAnnounce = 69;
	public static readonly BitBotActionSave = 70;
	public static readonly BitBotActionRemind = 71;
	public static readonly BitVendorPadletEmbed = 72;
	public static readonly BitScorm = 73;
	public static readonly BitImage = 74;
	public static readonly BitImageLink = 75;
	public static readonly BitImageZoom = 76;
	public static readonly BitImagePrototype = 77;
	public static readonly BitImageSuperWide = 78;
	public static readonly BitAudio = 79;
	public static readonly BitAudioLink = 80;
	public static readonly BitAudioEmbed = 81;
	public static readonly BitVideo = 82;
	public static readonly BitVideoLink = 83;
	public static readonly BitVideoEmbed = 84;
	public static readonly BitVideoPortrait = 85;
	public static readonly BitVideoLandscape = 86;
	public static readonly BitStillImageFilm = 87;
	public static readonly BitStillImageFilmLink = 88;
	public static readonly BitStillImageFilmEmbed = 89;
	public static readonly BitWebsiteLink = 90;
	public static readonly BitDocument = 91;
	public static readonly BitDocumentLink = 92;
	public static readonly BitDocumentEmbed = 93;
	public static readonly BitDocumentDownload = 94;
	public static readonly BitAppLink = 95;
	public static readonly BitEditorial = 96;
	public static readonly BitBookFrontispiece = 97;
	public static readonly BitBookTitle = 98;
	public static readonly BitBookCopyright = 99;
	public static readonly BitBookDedication = 100;
	public static readonly BitBookForword = 101;
	public static readonly BitBookPreface = 102;
	public static readonly BitBookPrologue = 103;
	public static readonly BitBookEpilogue = 104;
	public static readonly BitBookIntroduction = 105;
	public static readonly BitBookIncitingIncident = 106;
	public static readonly BitBookConclusion = 107;
	public static readonly BitBookAfterword = 108;
	public static readonly BitBookPostscript = 109;
	public static readonly BitBookappendix = 110;
	public static readonly BitBookAddendum = 111;
	public static readonly BitBookAcknowledgments = 112;
	public static readonly BitBookListOfContributors = 113;
	public static readonly BitBookBibliography = 114;
	public static readonly BitBookReferenceList = 115;
	public static readonly BitBookEndnotes = 116;
	public static readonly BitBookNotes = 117;
	public static readonly BitBookCopyrightPermissions = 118;
	public static readonly BitBookTeaser = 119;
	public static readonly BitBookAutherBio = 120;
	public static readonly BitBookRequestForABookReview = 121;
	public static readonly BitBookComingSoon = 122;
	public static readonly BitBookReadMore = 123;
	public static readonly BitBookSummary = 124;
	public static readonly BitBookEpigraph = 125;
	public static readonly BitCode = 126;
	public static readonly BitCard1 = 127;
	public static readonly BitQuestion1 = 128;
	public static readonly BitScreenshot = 129;
	public static readonly BitFocusImage = 130;
	public static readonly BitPhoto = 131;
	public static readonly BitBrowserImage = 132;
	public static readonly BitBotActionResponse = 133;
	public static readonly BitBotActionTrueFalse = 134;
	public static readonly BitBotActionRatingNumber = 135;
	public static readonly BitBotActionRatingStars = 136;
	public static readonly BitChapterSubjectMatter = 137;
	public static readonly BitReleaseNote = 138;
	public static readonly BitConclusion = 139;
	public static readonly BitVendorAmcharts5Chart = 140;
	public static readonly BitFeatured = 141;
	public static readonly BitNewspaperArticle = 142;
	public static readonly BitBlogArticle = 143;
	public static readonly BitBookArticle = 144;
	public static readonly BitNotebookArticle = 145;
	public static readonly BitWorkbookArticle = 146;
	public static readonly BitReleaseNotesSummary = 147;
	public static readonly BitCookPreparation = 148;
	public static readonly BitCookStep = 149;
	public static readonly BitCookIngredients = 150;
	public static readonly BitCookRremark = 151;
	public static readonly BitCookVariation = 152;
	public static readonly BitCookInsert = 153;
	public static readonly BitCookArrangement = 154;
	public static readonly BitCookPracticeAdvise = 155;
	public static readonly BitCookPlate = 156;
	public static readonly BitCookRecommendation = 157;
	public static readonly BitCookPersonalRecommendation = 158;
	public static readonly BitCookSideDrink = 159;
	public static readonly BitCookSideDish = 160;
	public static readonly BitCookTimer = 161;
	public static readonly BitLangLearningOutcomes = 162;
	public static readonly BitLangEnablingLanguageSkills = 163;
	public static readonly BitLangLifeSkills = 164;
	public static readonly BitLangEnglishAroundWorld = 165;
	public static readonly BitLangGoodtoknow = 166;
	public static readonly BitLangLearningStrategy = 167;
	public static readonly BitLangLikeAlocal = 168;
	public static readonly BitLangUsefulPhrases = 169;
	public static readonly BitLangLevelDown = 170;
	public static readonly BitLangLevelUp = 171;
	public static readonly BitLangExtraActivity = 172;
	public static readonly BitLangVideoScript = 173;
	public static readonly BitLangAudioScript = 174;
	public static readonly BitLangVocabulary = 175;
	public static readonly BitLangHomework = 176;
	public static readonly BitLangTeacherNote = 177;
	public static readonly BitReviewNote = 178;
	public static readonly BitReviewAuthorNote = 179;
	public static readonly BitReviewReviewerNote = 180;
	public static readonly BitReviewRequestForReviewNote = 181;
	public static readonly BitReviewApprovedNote = 182;
	public static readonly BitChecklist = 183;
	public static readonly BitVideoTranscript = 184;
	public static readonly BitAudioTranscript = 185;
	public static readonly BitImagePortrait = 186;
	public static readonly BitImageLandscape = 187;
	public static readonly BitImageOnDevice = 188;
	public static readonly OPDOLL = 189;
	public static readonly OPBUL = 190;
	public static readonly OPRANGLES = 191;
	public static readonly OPRANGLEL = 192;
	public static readonly OPDANGLE = 193;
	public static readonly OPU = 194;
	public static readonly OPB = 195;
	public static readonly OPQ = 196;
	public static readonly OPA = 197;
	public static readonly OPP = 198;
	public static readonly OPM = 199;
	public static readonly OPS = 200;
	public static readonly OPR = 201;
	public static readonly OPHASH = 202;
	public static readonly OPC = 203;
	public static readonly CL = 204;
	public static readonly COLON = 205;
	public static readonly AMP = 206;
	public static readonly DBLCOLON = 207;
	public static readonly PLUS = 208;
	public static readonly DotAt = 209;
	public static readonly Greater = 210;
	public static readonly Less = 211;
	public static readonly RightAngle = 212;
	public static readonly RightArrow = 213;
	public static readonly DBLEQ = 214;
	public static readonly HSPL = 215;
	public static readonly HSPL2 = 216;
	public static readonly SSPL = 217;
	public static readonly SSPL2 = 218;
	public static readonly QUOTE_INDEX = 219;
	public static readonly COMMENT = 220;
	public static readonly DCANY = 221;
	public static readonly Image_type = 222;
	public static readonly Audio_type = 223;
	public static readonly Video_type = 224;
	public static readonly ArticleText = 225;
	public static readonly NOTCL = 226;
	public static readonly NUMERIC = 227;
	public static readonly STRING = 228;
	public static readonly NL = 229;
	public static readonly NOTBITMARK = 230;
	public static readonly ELIPSIS = 231;
	public static readonly SENTENCE = 232;
	public static readonly BARSTRING = 233;
	public static readonly OPAT = 234;
	public static readonly AtProgress = 235;
	public static readonly AtReference = 236;
	public static readonly AtWidth = 237;
	public static readonly AtHeight = 238;
	public static readonly AtProgressPoints = 239;
	public static readonly AtShortanswer = 240;
	public static readonly AtLonganswer = 241;
	public static readonly AtExampleWithStr = 242;
	public static readonly AtExamplecol = 243;
	public static readonly AtExamplecl = 244;
	public static readonly AtSampleSolution = 245;
	public static readonly AtPartialAnswerS = 246;
	public static readonly AtPartialAnswer = 247;
	public static readonly AtLabeltrue = 248;
	public static readonly AtLabelfalse = 249;
	public static readonly AtPoints = 250;
	public static readonly AtSrc = 251;
	public static readonly AtPartner = 252;
	public static readonly OPATALT = 253;
	public static readonly OPAMARK = 254;
	public static readonly ShowInIndex = 255;
	public static readonly OpAtCaption = 256;
	public static readonly OpAtLicense = 257;
	public static readonly OpAtCopyright = 258;
	public static readonly OpAtSearch = 259;
	public static readonly OpAtIsTracked = 260;
	public static readonly OpAtIsInfoOnly = 261;
	public static readonly AtDate = 262;
	public static readonly Http = 263;
	public static readonly Https = 264;
	public static readonly AmpAudio = 265;
	public static readonly AmpImage = 266;
	public static readonly AmpImageZoom = 267;
	public static readonly AmpVideo = 268;
	public static readonly AmpArticle = 269;
	public static readonly AmpDocument = 270;
	public static readonly AmpApp = 271;
	public static readonly AmpWebsite = 272;
	public static readonly AmpStillImageFilm = 273;
	public static readonly AmpPdf = 274;
	public static readonly OpAmpAudio = 275;
	public static readonly OpAmpImage = 276;
	public static readonly OpAmpImageZoom = 277;
	public static readonly OpAmpVideo = 278;
	public static readonly OpAmpArticle = 279;
	public static readonly OpAmpArticleAtt = 280;
	public static readonly OpAmpDocument = 281;
	public static readonly OpAmpApp = 282;
	public static readonly OpAmpWebsite = 283;
	public static readonly OpAmpStillImageFilm = 284;
	public static readonly BracEnclose = 285;
	public static readonly AmpAudioLink = 286;
	public static readonly AmpImageLink = 287;
	public static readonly AmpVideoLink = 288;
	public static readonly AmpArticleLink = 289;
	public static readonly AmpDocumentLink = 290;
	public static readonly AmpDocumentDownload = 291;
	public static readonly AmpAppLink = 292;
	public static readonly AmpWebsiteLink = 293;
	public static readonly AmpStillImageFilmLink = 294;
	public static readonly OpAmpAudioLink = 295;
	public static readonly OpAmpImageLink = 296;
	public static readonly OpAmpVideoLink = 297;
	public static readonly OpAmpArticleLink = 298;
	public static readonly OpAmpDocumentLink = 299;
	public static readonly OpAmpDocumentDownload = 300;
	public static readonly OpAmpAppLink = 301;
	public static readonly OpAmpWebsiteLink = 302;
	public static readonly OpAmpStillImageFilmLink = 303;
	public static readonly AmpImageEmbed = 304;
	public static readonly AmpVideoEmbed = 305;
	public static readonly AmpAudioEmbed = 306;
	public static readonly AmpDocumentEmbed = 307;
	public static readonly AmpStillImageFilmEmbed = 308;
	public static readonly OpAmpImageEmbed = 309;
	public static readonly OpAmpVideoEmbed = 310;
	public static readonly OpAmpAudioEmbed = 311;
	public static readonly OpAmpDocumentEmbed = 312;
	public static readonly OpAmpStillImageFilmEmbed = 313;
	public static readonly BitmarkMinus = 314;
	public static readonly BitmarkPlus = 315;
	public static readonly ColonText = 316;
	public static readonly ColonJson = 317;
	public static readonly Prosemirror = 318;
	public static readonly Placeholder = 319;
	public static readonly BASIC = 320;
	public static readonly JPG = 321;
	public static readonly PNG = 322;
	public static readonly GIF = 323;
	public static readonly SVG = 324;
	public static readonly MP2 = 325;
	public static readonly MP3 = 326;
	public static readonly MP4 = 327;
	public static readonly FLV = 328;
	public static readonly WMV = 329;
	public static readonly MPEG = 330;
	public static readonly MPG = 331;
	public static readonly TEL = 332;
	public static readonly DotArticleAtt = 333;
	public static readonly STAR = 334;
	public static readonly URL = 335;
	public static readonly LIST_LINE = 336;
	public static readonly ENCLBARS = 337;
	public static readonly RULE_bitmark = 0;
	public static readonly RULE_bitmark_ = 1;
	public static readonly RULE_bit = 2;
	public static readonly RULE_book = 3;
	public static readonly RULE_chapter = 4;
	public static readonly RULE_ai_prompt = 5;
	public static readonly RULE_note_ai = 6;
	public static readonly RULE_summary_ai = 7;
	public static readonly RULE_article_ai = 8;
	public static readonly RULE_toc = 9;
	public static readonly RULE_summary = 10;
	public static readonly RULE_internal_link = 11;
	public static readonly RULE_bit_alias = 12;
	public static readonly RULE_title_etc = 13;
	public static readonly RULE_group_born = 14;
	public static readonly RULE_group_died = 15;
	public static readonly RULE_learning_path_lti = 16;
	public static readonly RULE_learning_path_step = 17;
	public static readonly RULE_learning_path_book = 18;
	public static readonly RULE_learning_path_sign = 19;
	public static readonly RULE_learning_path_video_call = 20;
	public static readonly RULE_learning_path_learning_goal = 21;
	public static readonly RULE_learning_path_closing = 22;
	public static readonly RULE_learning_path_feedback = 23;
	public static readonly RULE_learning_path_bot_training = 24;
	public static readonly RULE_learning_path_external_link = 25;
	public static readonly RULE_learning_path_classroom_training = 26;
	public static readonly RULE_learning_path_classroom_event = 27;
	public static readonly RULE_bot_action_send = 28;
	public static readonly RULE_bot_action_announce = 29;
	public static readonly RULE_bot_action_save = 30;
	public static readonly RULE_bot_action_remind = 31;
	public static readonly RULE_bot_action_response = 32;
	public static readonly RULE_bot_action_true_false = 33;
	public static readonly RULE_bot_action_rating_number = 34;
	public static readonly RULE_bot_action_rating_stars = 35;
	public static readonly RULE_bot_action = 36;
	public static readonly RULE_bo_actions = 37;
	public static readonly RULE_boacts = 38;
	public static readonly RULE_feedback = 39;
	public static readonly RULE_footer = 40;
	public static readonly RULE_bitElem = 41;
	public static readonly RULE_gap = 42;
	public static readonly RULE_single_gap = 43;
	public static readonly RULE_choice_plus = 44;
	public static readonly RULE_choice_minus = 45;
	public static readonly RULE_choice_star = 46;
	public static readonly RULE_essay = 47;
	public static readonly RULE_ml_example = 48;
	public static readonly RULE_partans = 49;
	public static readonly RULE_resource = 50;
	public static readonly RULE_correction = 51;
	public static readonly RULE_corrs = 52;
	public static readonly RULE_mark_ = 53;
	public static readonly RULE_mark_text = 54;
	public static readonly RULE_mark_color = 55;
	public static readonly RULE_take_audio = 56;
	public static readonly RULE_take_picture = 57;
	public static readonly RULE_record_audio = 58;
	public static readonly RULE_preparation_note = 59;
	public static readonly RULE_assignment = 60;
	public static readonly RULE_article = 61;
	public static readonly RULE_statement = 62;
	public static readonly RULE_details = 63;
	public static readonly RULE_sample_solution = 64;
	public static readonly RULE_buttoncopytext = 65;
	public static readonly RULE_wbtcontinue = 66;
	public static readonly RULE_learningpathdetails = 67;
	public static readonly RULE_page = 68;
	public static readonly RULE_note = 69;
	public static readonly RULE_info = 70;
	public static readonly RULE_warning = 71;
	public static readonly RULE_remark = 72;
	public static readonly RULE_help = 73;
	public static readonly RULE_danger = 74;
	public static readonly RULE_bug = 75;
	public static readonly RULE_sidenote = 76;
	public static readonly RULE_stickynote = 77;
	public static readonly RULE_quote = 78;
	public static readonly RULE_footnote = 79;
	public static readonly RULE_hintbit = 80;
	public static readonly RULE_examplebit = 81;
	public static readonly RULE_vendor_padlet_embed = 82;
	public static readonly RULE_scorm = 83;
	public static readonly RULE_bit_image = 84;
	public static readonly RULE_bit_imageLink = 85;
	public static readonly RULE_bit_imageZoom = 86;
	public static readonly RULE_bit_imagePrototype = 87;
	public static readonly RULE_bit_imageSuperWide = 88;
	public static readonly RULE_bit_audio = 89;
	public static readonly RULE_bit_audioLink = 90;
	public static readonly RULE_bit_audioEmbed = 91;
	public static readonly RULE_bit_video = 92;
	public static readonly RULE_bit_videoLink = 93;
	public static readonly RULE_bit_videoEmbed = 94;
	public static readonly RULE_bit_videoPortrait = 95;
	public static readonly RULE_bit_videoLandscape = 96;
	public static readonly RULE_bit_stillImageFilm = 97;
	public static readonly RULE_bit_stillImageFilmLink = 98;
	public static readonly RULE_bit_stillImageFilmEmbed = 99;
	public static readonly RULE_bit_websiteLink = 100;
	public static readonly RULE_bit_document = 101;
	public static readonly RULE_bit_documentLink = 102;
	public static readonly RULE_bit_documentEmbed = 103;
	public static readonly RULE_bit_documentDownload = 104;
	public static readonly RULE_bit_appLink = 105;
	public static readonly RULE_bit_editorial = 106;
	public static readonly RULE_book_frontispiece = 107;
	public static readonly RULE_book_title = 108;
	public static readonly RULE_book_copyright = 109;
	public static readonly RULE_book_dedication = 110;
	public static readonly RULE_book_forword = 111;
	public static readonly RULE_book_preface = 112;
	public static readonly RULE_book_prologue = 113;
	public static readonly RULE_book_epilogue = 114;
	public static readonly RULE_book_introduction = 115;
	public static readonly RULE_book_inciting_incident = 116;
	public static readonly RULE_book_conclusion = 117;
	public static readonly RULE_book_afterword = 118;
	public static readonly RULE_book_postscript = 119;
	public static readonly RULE_book_appendix = 120;
	public static readonly RULE_book_addendum = 121;
	public static readonly RULE_book_acknowledgments = 122;
	public static readonly RULE_book_list_of_contributors = 123;
	public static readonly RULE_book_bibliography = 124;
	public static readonly RULE_book_reference_list = 125;
	public static readonly RULE_book_endnotes = 126;
	public static readonly RULE_book_notes = 127;
	public static readonly RULE_book_copyright_permissions = 128;
	public static readonly RULE_book_teaser = 129;
	public static readonly RULE_book_auther_bio = 130;
	public static readonly RULE_book_request_for_a_book_review = 131;
	public static readonly RULE_book_coming_soon = 132;
	public static readonly RULE_book_read_more = 133;
	public static readonly RULE_book_summary = 134;
	public static readonly RULE_book_epigraph = 135;
	public static readonly RULE_code = 136;
	public static readonly RULE_card1 = 137;
	public static readonly RULE_question1 = 138;
	public static readonly RULE_screenshot = 139;
	public static readonly RULE_focus_image = 140;
	public static readonly RULE_photo = 141;
	public static readonly RULE_browser_image = 142;
	public static readonly RULE_chapter_subject_matter = 143;
	public static readonly RULE_release_note = 144;
	public static readonly RULE_conclusion = 145;
	public static readonly RULE_featured = 146;
	public static readonly RULE_vendor_amcharts_5_chart = 147;
	public static readonly RULE_newspaper_article = 148;
	public static readonly RULE_blog_article = 149;
	public static readonly RULE_book_article = 150;
	public static readonly RULE_notebook_article = 151;
	public static readonly RULE_workbook_article = 152;
	public static readonly RULE_release_notes_summary = 153;
	public static readonly RULE_message = 154;
	public static readonly RULE_cook_preparation = 155;
	public static readonly RULE_cook_step = 156;
	public static readonly RULE_cook_ingredients = 157;
	public static readonly RULE_cook_remark = 158;
	public static readonly RULE_cook_variation = 159;
	public static readonly RULE_cook_insert = 160;
	public static readonly RULE_cook_arrangement = 161;
	public static readonly RULE_cook_practice_advise = 162;
	public static readonly RULE_cook_plate = 163;
	public static readonly RULE_cook_recommendation = 164;
	public static readonly RULE_cook_personal_recommendation = 165;
	public static readonly RULE_cook_side_drink = 166;
	public static readonly RULE_cook_side_dish = 167;
	public static readonly RULE_cook_timer = 168;
	public static readonly RULE_lang_learning_outcomes = 169;
	public static readonly RULE_lang_enabling_language_skills = 170;
	public static readonly RULE_lang_life_skills = 171;
	public static readonly RULE_lang_english_around_world = 172;
	public static readonly RULE_lang_good_to_know = 173;
	public static readonly RULE_lang_learning_strategy = 174;
	public static readonly RULE_lang_like_a_local = 175;
	public static readonly RULE_lang_useful_phrases = 176;
	public static readonly RULE_lang_level_down = 177;
	public static readonly RULE_lang_level_up = 178;
	public static readonly RULE_lang_extra_activity = 179;
	public static readonly RULE_lang_video_script = 180;
	public static readonly RULE_lang_audio_script = 181;
	public static readonly RULE_lang_vocabulary = 182;
	public static readonly RULE_lang_homework = 183;
	public static readonly RULE_lang_teacher_note = 184;
	public static readonly RULE_review_note = 185;
	public static readonly RULE_review_author_note = 186;
	public static readonly RULE_review_reviewer_note = 187;
	public static readonly RULE_review_request_for_review_note = 188;
	public static readonly RULE_review_approved_note = 189;
	public static readonly RULE_checklist = 190;
	public static readonly RULE_video_transcript = 191;
	public static readonly RULE_audio_transcript = 192;
	public static readonly RULE_image_portrait = 193;
	public static readonly RULE_image_landscape = 194;
	public static readonly RULE_image_on_device = 195;
	public static readonly RULE_bot_choice = 196;
	public static readonly RULE_rating = 197;
	public static readonly RULE_bullet_item = 198;
	public static readonly RULE_survey = 199;
	public static readonly RULE_survey_1 = 200;
	public static readonly RULE_survey_anonymous = 201;
	public static readonly RULE_survey_anonymous_1 = 202;
	public static readonly RULE_self_assessment = 203;
	public static readonly RULE_self_assess_s_and_w = 204;
	public static readonly RULE_atpoint = 205;
	public static readonly RULE_format = 206;
	public static readonly RULE_resource_format = 207;
	public static readonly RULE_resource_format_extra = 208;
	public static readonly RULE_format2 = 209;
	public static readonly RULE_image_format = 210;
	public static readonly RULE_video_format = 211;
	public static readonly RULE_article_format = 212;
	public static readonly RULE_document_format = 213;
	public static readonly RULE_app_format = 214;
	public static readonly RULE_website_format = 215;
	public static readonly RULE_stillimagefilm_format = 216;
	public static readonly RULE_op_article_format = 217;
	public static readonly RULE_op_document_format = 218;
	public static readonly RULE_op_app_format = 219;
	public static readonly RULE_op_website_format = 220;
	public static readonly RULE_op_video_format = 221;
	public static readonly RULE_op_stillimagefilm_format = 222;
	public static readonly RULE_articlebit = 223;
	public static readonly RULE_documentbit = 224;
	public static readonly RULE_websitebit = 225;
	public static readonly RULE_appbit = 226;
	public static readonly RULE_stillimagefilmbit = 227;
	public static readonly RULE_stillimg_one = 228;
	public static readonly RULE_videobit = 229;
	public static readonly RULE_video_one = 230;
	public static readonly RULE_imagebit = 231;
	public static readonly RULE_image_one = 232;
	public static readonly RULE_op_image_format = 233;
	public static readonly RULE_image_chained = 234;
	public static readonly RULE_image_chained4match = 235;
	public static readonly RULE_audiobit = 236;
	public static readonly RULE_audio_one = 237;
	public static readonly RULE_audio_format = 238;
	public static readonly RULE_op_audio_format = 239;
	public static readonly RULE_resource_chained = 240;
	public static readonly RULE_telephone = 241;
	public static readonly RULE_url = 242;
	public static readonly RULE_item = 243;
	public static readonly RULE_lead = 244;
	public static readonly RULE_angleref = 245;
	public static readonly RULE_example = 246;
	public static readonly RULE_bracketed_text = 247;
	public static readonly RULE_reference = 248;
	public static readonly RULE_progress = 249;
	public static readonly RULE_dateprop = 250;
	public static readonly RULE_dateprop_chained = 251;
	public static readonly RULE_instruction = 252;
	public static readonly RULE_hint = 253;
	public static readonly RULE_title = 254;
	public static readonly RULE_bool_label = 255;
	public static readonly RULE_progress_points = 256;
	public static readonly RULE_istracked = 257;
	public static readonly RULE_isinfoonly = 258;
	public static readonly RULE_atdef = 259;
	public static readonly RULE_atdef_ = 260;
	public static readonly RULE_dollarans = 261;
	public static readonly RULE_anchor = 262;
	public static readonly RULE_lines = 263;
	public static readonly RULE_s_and_w = 264;
	public static readonly RULE_dclines = 265;
	public static readonly RULE_clnsp = 266;
	public static readonly RULE_sspl = 267;
	public static readonly RULE_words = 268;
	public static readonly RULE_sp = 269;
	public static readonly RULE_sentence = 270;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"bitmark", "bitmark_", "bit", "book", "chapter", "ai_prompt", "note_ai", 
		"summary_ai", "article_ai", "toc", "summary", "internal_link", "bit_alias", 
		"title_etc", "group_born", "group_died", "learning_path_lti", "learning_path_step", 
		"learning_path_book", "learning_path_sign", "learning_path_video_call", 
		"learning_path_learning_goal", "learning_path_closing", "learning_path_feedback", 
		"learning_path_bot_training", "learning_path_external_link", "learning_path_classroom_training", 
		"learning_path_classroom_event", "bot_action_send", "bot_action_announce", 
		"bot_action_save", "bot_action_remind", "bot_action_response", "bot_action_true_false", 
		"bot_action_rating_number", "bot_action_rating_stars", "bot_action", "bo_actions", 
		"boacts", "feedback", "footer", "bitElem", "gap", "single_gap", "choice_plus", 
		"choice_minus", "choice_star", "essay", "ml_example", "partans", "resource", 
		"correction", "corrs", "mark_", "mark_text", "mark_color", "take_audio", 
		"take_picture", "record_audio", "preparation_note", "assignment", "article", 
		"statement", "details", "sample_solution", "buttoncopytext", "wbtcontinue", 
		"learningpathdetails", "page", "note", "info", "warning", "remark", "help", 
		"danger", "bug", "sidenote", "stickynote", "quote", "footnote", "hintbit", 
		"examplebit", "vendor_padlet_embed", "scorm", "bit_image", "bit_imageLink", 
		"bit_imageZoom", "bit_imagePrototype", "bit_imageSuperWide", "bit_audio", 
		"bit_audioLink", "bit_audioEmbed", "bit_video", "bit_videoLink", "bit_videoEmbed", 
		"bit_videoPortrait", "bit_videoLandscape", "bit_stillImageFilm", "bit_stillImageFilmLink", 
		"bit_stillImageFilmEmbed", "bit_websiteLink", "bit_document", "bit_documentLink", 
		"bit_documentEmbed", "bit_documentDownload", "bit_appLink", "bit_editorial", 
		"book_frontispiece", "book_title", "book_copyright", "book_dedication", 
		"book_forword", "book_preface", "book_prologue", "book_epilogue", "book_introduction", 
		"book_inciting_incident", "book_conclusion", "book_afterword", "book_postscript", 
		"book_appendix", "book_addendum", "book_acknowledgments", "book_list_of_contributors", 
		"book_bibliography", "book_reference_list", "book_endnotes", "book_notes", 
		"book_copyright_permissions", "book_teaser", "book_auther_bio", "book_request_for_a_book_review", 
		"book_coming_soon", "book_read_more", "book_summary", "book_epigraph", 
		"code", "card1", "question1", "screenshot", "focus_image", "photo", "browser_image", 
		"chapter_subject_matter", "release_note", "conclusion", "featured", "vendor_amcharts_5_chart", 
		"newspaper_article", "blog_article", "book_article", "notebook_article", 
		"workbook_article", "release_notes_summary", "message", "cook_preparation", 
		"cook_step", "cook_ingredients", "cook_remark", "cook_variation", "cook_insert", 
		"cook_arrangement", "cook_practice_advise", "cook_plate", "cook_recommendation", 
		"cook_personal_recommendation", "cook_side_drink", "cook_side_dish", "cook_timer", 
		"lang_learning_outcomes", "lang_enabling_language_skills", "lang_life_skills", 
		"lang_english_around_world", "lang_good_to_know", "lang_learning_strategy", 
		"lang_like_a_local", "lang_useful_phrases", "lang_level_down", "lang_level_up", 
		"lang_extra_activity", "lang_video_script", "lang_audio_script", "lang_vocabulary", 
		"lang_homework", "lang_teacher_note", "review_note", "review_author_note", 
		"review_reviewer_note", "review_request_for_review_note", "review_approved_note", 
		"checklist", "video_transcript", "audio_transcript", "image_portrait", 
		"image_landscape", "image_on_device", "bot_choice", "rating", "bullet_item", 
		"survey", "survey_1", "survey_anonymous", "survey_anonymous_1", "self_assessment", 
		"self_assess_s_and_w", "atpoint", "format", "resource_format", "resource_format_extra", 
		"format2", "image_format", "video_format", "article_format", "document_format", 
		"app_format", "website_format", "stillimagefilm_format", "op_article_format", 
		"op_document_format", "op_app_format", "op_website_format", "op_video_format", 
		"op_stillimagefilm_format", "articlebit", "documentbit", "websitebit", 
		"appbit", "stillimagefilmbit", "stillimg_one", "videobit", "video_one", 
		"imagebit", "image_one", "op_image_format", "image_chained", "image_chained4match", 
		"audiobit", "audio_one", "audio_format", "op_audio_format", "resource_chained", 
		"telephone", "url", "item", "lead", "angleref", "example", "bracketed_text", 
		"reference", "progress", "dateprop", "dateprop_chained", "instruction", 
		"hint", "title", "bool_label", "progress_points", "istracked", "isinfoonly", 
		"atdef", "atdef_", "dollarans", "anchor", "lines", "s_and_w", "dclines", 
		"clnsp", "sspl", "words", "sp", "sentence",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'[.'", undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "'CLOZE'", "'MATCH'", undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "':'", "'&'", "'::'", "'+'", "'.@'", "'>'", "'<'", 
		"'\u25BA'", "'\u2192'", "'=='", undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "'[@'", undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "'http://'", "'https://'", "'&audio'", "'&image'", 
		"'&image-zoom'", "'&video'", "'&article'", "'&document'", "'&app'", "'&website'", 
		"'&still-image-film'", "'&pdf'", undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"'&audio-link'", "'&image-link'", "'&video-link'", "'&article-link'", 
		"'&document-link'", "'&document-download'", "'&app-link'", "'&website-link'", 
		"'&still-image-film-link'", undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "'&image-embed'", 
		"'&video-embed'", "'&daudio-embed'", "'&document-embed'", "'&still-image-film-embed'", 
		undefined, undefined, undefined, undefined, undefined, "':bitmark--'", 
		"':bitmark++'", "':text'", "':json'", "':prosemirror'", "':placeholder'", 
		"':basic'", "':jpg'", "':png'", "':gif'", "':svg'", "':mp2'", "':mp3'", 
		"':mp4'", "':flv'", "':wmv'", "':mpeg'", "':mpg'", "'tel:'", "'.article-attachment'", 
		"'*'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "OPDOT", "S", "BitBook", "BitChapter", "BitToc", "BitSummary", 
		"BitIntlink", "BitIntRef", "BitAlias", "BitGroups", "BitGroupt", "BitPlaceholder", 
		"BitStatement", "BitDetails", "BitSampleSolution", "BitTakeAudio", "CLOZE", 
		"MATCH", "BitArticle", "BitPage", "BitEssay", "BitMessage", "BitCorrection", 
		"BitMark", "BitTakepic", "BitRecaud", "BitPrepnote", "BitAssign", "BitBotint", 
		"BitSelfassess", "BitRating", "BitSurvey", "BitSurvey1", "BitSurveyanon", 
		"BitSurveyanon1", "BitNote", "BitInfo", "BitWarning", "BitRemark", "BitHint", 
		"BitHelp", "BitDanger", "BitBug", "BitSidenote", "BitStickynote", "BitQuote", 
		"BitFootnote", "BitExample", "BitButtonCopytext", "BitWbtContinue", "BitLearningPathDetails", 
		"BitAiPrompt", "BitNoteAi", "BitSummayAi", "BitArticleAi", "BitLearningPathLti", 
		"BitLearningPathStep", "BitLearningPathBook", "BitLearningPathSign", "BitLearningPathVideoCall", 
		"BitLearningPathLearningGoal", "BitLearningPathClosing", "BitLearningPathFeedback", 
		"BitLearningPathBotTraining", "BitLearningPathExternalLink", "BitLearningPathClassroomTraining", 
		"BitLearningPathClassroomEvent", "BitBotActionSend", "BitBotActionAnnounce", 
		"BitBotActionSave", "BitBotActionRemind", "BitVendorPadletEmbed", "BitScorm", 
		"BitImage", "BitImageLink", "BitImageZoom", "BitImagePrototype", "BitImageSuperWide", 
		"BitAudio", "BitAudioLink", "BitAudioEmbed", "BitVideo", "BitVideoLink", 
		"BitVideoEmbed", "BitVideoPortrait", "BitVideoLandscape", "BitStillImageFilm", 
		"BitStillImageFilmLink", "BitStillImageFilmEmbed", "BitWebsiteLink", "BitDocument", 
		"BitDocumentLink", "BitDocumentEmbed", "BitDocumentDownload", "BitAppLink", 
		"BitEditorial", "BitBookFrontispiece", "BitBookTitle", "BitBookCopyright", 
		"BitBookDedication", "BitBookForword", "BitBookPreface", "BitBookPrologue", 
		"BitBookEpilogue", "BitBookIntroduction", "BitBookIncitingIncident", "BitBookConclusion", 
		"BitBookAfterword", "BitBookPostscript", "BitBookappendix", "BitBookAddendum", 
		"BitBookAcknowledgments", "BitBookListOfContributors", "BitBookBibliography", 
		"BitBookReferenceList", "BitBookEndnotes", "BitBookNotes", "BitBookCopyrightPermissions", 
		"BitBookTeaser", "BitBookAutherBio", "BitBookRequestForABookReview", "BitBookComingSoon", 
		"BitBookReadMore", "BitBookSummary", "BitBookEpigraph", "BitCode", "BitCard1", 
		"BitQuestion1", "BitScreenshot", "BitFocusImage", "BitPhoto", "BitBrowserImage", 
		"BitBotActionResponse", "BitBotActionTrueFalse", "BitBotActionRatingNumber", 
		"BitBotActionRatingStars", "BitChapterSubjectMatter", "BitReleaseNote", 
		"BitConclusion", "BitVendorAmcharts5Chart", "BitFeatured", "BitNewspaperArticle", 
		"BitBlogArticle", "BitBookArticle", "BitNotebookArticle", "BitWorkbookArticle", 
		"BitReleaseNotesSummary", "BitCookPreparation", "BitCookStep", "BitCookIngredients", 
		"BitCookRremark", "BitCookVariation", "BitCookInsert", "BitCookArrangement", 
		"BitCookPracticeAdvise", "BitCookPlate", "BitCookRecommendation", "BitCookPersonalRecommendation", 
		"BitCookSideDrink", "BitCookSideDish", "BitCookTimer", "BitLangLearningOutcomes", 
		"BitLangEnablingLanguageSkills", "BitLangLifeSkills", "BitLangEnglishAroundWorld", 
		"BitLangGoodtoknow", "BitLangLearningStrategy", "BitLangLikeAlocal", "BitLangUsefulPhrases", 
		"BitLangLevelDown", "BitLangLevelUp", "BitLangExtraActivity", "BitLangVideoScript", 
		"BitLangAudioScript", "BitLangVocabulary", "BitLangHomework", "BitLangTeacherNote", 
		"BitReviewNote", "BitReviewAuthorNote", "BitReviewReviewerNote", "BitReviewRequestForReviewNote", 
		"BitReviewApprovedNote", "BitChecklist", "BitVideoTranscript", "BitAudioTranscript", 
		"BitImagePortrait", "BitImageLandscape", "BitImageOnDevice", "OPDOLL", 
		"OPBUL", "OPRANGLES", "OPRANGLEL", "OPDANGLE", "OPU", "OPB", "OPQ", "OPA", 
		"OPP", "OPM", "OPS", "OPR", "OPHASH", "OPC", "CL", "COLON", "AMP", "DBLCOLON", 
		"PLUS", "DotAt", "Greater", "Less", "RightAngle", "RightArrow", "DBLEQ", 
		"HSPL", "HSPL2", "SSPL", "SSPL2", "QUOTE_INDEX", "COMMENT", "DCANY", "Image_type", 
		"Audio_type", "Video_type", "ArticleText", "NOTCL", "NUMERIC", "STRING", 
		"NL", "NOTBITMARK", "ELIPSIS", "SENTENCE", "BARSTRING", "OPAT", "AtProgress", 
		"AtReference", "AtWidth", "AtHeight", "AtProgressPoints", "AtShortanswer", 
		"AtLonganswer", "AtExampleWithStr", "AtExamplecol", "AtExamplecl", "AtSampleSolution", 
		"AtPartialAnswerS", "AtPartialAnswer", "AtLabeltrue", "AtLabelfalse", 
		"AtPoints", "AtSrc", "AtPartner", "OPATALT", "OPAMARK", "ShowInIndex", 
		"OpAtCaption", "OpAtLicense", "OpAtCopyright", "OpAtSearch", "OpAtIsTracked", 
		"OpAtIsInfoOnly", "AtDate", "Http", "Https", "AmpAudio", "AmpImage", "AmpImageZoom", 
		"AmpVideo", "AmpArticle", "AmpDocument", "AmpApp", "AmpWebsite", "AmpStillImageFilm", 
		"AmpPdf", "OpAmpAudio", "OpAmpImage", "OpAmpImageZoom", "OpAmpVideo", 
		"OpAmpArticle", "OpAmpArticleAtt", "OpAmpDocument", "OpAmpApp", "OpAmpWebsite", 
		"OpAmpStillImageFilm", "BracEnclose", "AmpAudioLink", "AmpImageLink", 
		"AmpVideoLink", "AmpArticleLink", "AmpDocumentLink", "AmpDocumentDownload", 
		"AmpAppLink", "AmpWebsiteLink", "AmpStillImageFilmLink", "OpAmpAudioLink", 
		"OpAmpImageLink", "OpAmpVideoLink", "OpAmpArticleLink", "OpAmpDocumentLink", 
		"OpAmpDocumentDownload", "OpAmpAppLink", "OpAmpWebsiteLink", "OpAmpStillImageFilmLink", 
		"AmpImageEmbed", "AmpVideoEmbed", "AmpAudioEmbed", "AmpDocumentEmbed", 
		"AmpStillImageFilmEmbed", "OpAmpImageEmbed", "OpAmpVideoEmbed", "OpAmpAudioEmbed", 
		"OpAmpDocumentEmbed", "OpAmpStillImageFilmEmbed", "BitmarkMinus", "BitmarkPlus", 
		"ColonText", "ColonJson", "Prosemirror", "Placeholder", "BASIC", "JPG", 
		"PNG", "GIF", "SVG", "MP2", "MP3", "MP4", "FLV", "WMV", "MPEG", "MPG", 
		"TEL", "DotArticleAtt", "STAR", "URL", "LIST_LINE", "ENCLBARS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(bitmarkParser._LITERAL_NAMES, bitmarkParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return bitmarkParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "bitmarkParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return bitmarkParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return bitmarkParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(bitmarkParser._ATN, this);
	}
	// @RuleVersion(0)
	public bitmark(): BitmarkContext {
		let _localctx: BitmarkContext = new BitmarkContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, bitmarkParser.RULE_bitmark);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 555;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 542;
				this.bitmark_();
				this.state = 552;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 546;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.S) {
							{
							{
							this.state = 543;
							this.match(bitmarkParser.S);
							}
							}
							this.state = 548;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 549;
						this.match(bitmarkParser.NL);
						}
						}
					}
					this.state = 554;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
				}
				}
				}
				this.state = 557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitSelfassess) | (1 << bitmarkParser.BitRating))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitAiPrompt - 32)) | (1 << (bitmarkParser.BitNoteAi - 32)) | (1 << (bitmarkParser.BitSummayAi - 32)) | (1 << (bitmarkParser.BitArticleAi - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitLearningPathBotTraining - 64)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomEvent - 64)) | (1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitImagePrototype - 64)) | (1 << (bitmarkParser.BitImageSuperWide - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitVideoPortrait - 64)) | (1 << (bitmarkParser.BitVideoLandscape - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitEditorial - 96)) | (1 << (bitmarkParser.BitBookFrontispiece - 96)) | (1 << (bitmarkParser.BitBookTitle - 96)) | (1 << (bitmarkParser.BitBookCopyright - 96)) | (1 << (bitmarkParser.BitBookDedication - 96)) | (1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.BitQuestion1 - 128)) | (1 << (bitmarkParser.BitScreenshot - 128)) | (1 << (bitmarkParser.BitFocusImage - 128)) | (1 << (bitmarkParser.BitPhoto - 128)) | (1 << (bitmarkParser.BitBrowserImage - 128)) | (1 << (bitmarkParser.BitBotActionResponse - 128)) | (1 << (bitmarkParser.BitBotActionTrueFalse - 128)) | (1 << (bitmarkParser.BitBotActionRatingNumber - 128)) | (1 << (bitmarkParser.BitBotActionRatingStars - 128)) | (1 << (bitmarkParser.BitChapterSubjectMatter - 128)) | (1 << (bitmarkParser.BitReleaseNote - 128)) | (1 << (bitmarkParser.BitConclusion - 128)) | (1 << (bitmarkParser.BitVendorAmcharts5Chart - 128)) | (1 << (bitmarkParser.BitFeatured - 128)) | (1 << (bitmarkParser.BitNewspaperArticle - 128)) | (1 << (bitmarkParser.BitBlogArticle - 128)) | (1 << (bitmarkParser.BitBookArticle - 128)) | (1 << (bitmarkParser.BitNotebookArticle - 128)) | (1 << (bitmarkParser.BitWorkbookArticle - 128)) | (1 << (bitmarkParser.BitReleaseNotesSummary - 128)) | (1 << (bitmarkParser.BitCookPreparation - 128)) | (1 << (bitmarkParser.BitCookStep - 128)) | (1 << (bitmarkParser.BitCookIngredients - 128)) | (1 << (bitmarkParser.BitCookRremark - 128)) | (1 << (bitmarkParser.BitCookVariation - 128)) | (1 << (bitmarkParser.BitCookInsert - 128)) | (1 << (bitmarkParser.BitCookArrangement - 128)) | (1 << (bitmarkParser.BitCookPracticeAdvise - 128)) | (1 << (bitmarkParser.BitCookPlate - 128)) | (1 << (bitmarkParser.BitCookRecommendation - 128)) | (1 << (bitmarkParser.BitCookPersonalRecommendation - 128)) | (1 << (bitmarkParser.BitCookSideDrink - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.BitCookSideDish - 160)) | (1 << (bitmarkParser.BitCookTimer - 160)) | (1 << (bitmarkParser.BitLangLearningOutcomes - 160)) | (1 << (bitmarkParser.BitLangEnablingLanguageSkills - 160)) | (1 << (bitmarkParser.BitLangLifeSkills - 160)) | (1 << (bitmarkParser.BitLangEnglishAroundWorld - 160)) | (1 << (bitmarkParser.BitLangGoodtoknow - 160)) | (1 << (bitmarkParser.BitLangLearningStrategy - 160)) | (1 << (bitmarkParser.BitLangLikeAlocal - 160)) | (1 << (bitmarkParser.BitLangUsefulPhrases - 160)) | (1 << (bitmarkParser.BitLangLevelDown - 160)) | (1 << (bitmarkParser.BitLangLevelUp - 160)) | (1 << (bitmarkParser.BitLangExtraActivity - 160)) | (1 << (bitmarkParser.BitLangVideoScript - 160)) | (1 << (bitmarkParser.BitLangAudioScript - 160)) | (1 << (bitmarkParser.BitLangVocabulary - 160)) | (1 << (bitmarkParser.BitLangHomework - 160)) | (1 << (bitmarkParser.BitLangTeacherNote - 160)) | (1 << (bitmarkParser.BitReviewNote - 160)) | (1 << (bitmarkParser.BitReviewAuthorNote - 160)) | (1 << (bitmarkParser.BitReviewReviewerNote - 160)) | (1 << (bitmarkParser.BitReviewRequestForReviewNote - 160)) | (1 << (bitmarkParser.BitReviewApprovedNote - 160)) | (1 << (bitmarkParser.BitChecklist - 160)) | (1 << (bitmarkParser.BitVideoTranscript - 160)) | (1 << (bitmarkParser.BitAudioTranscript - 160)) | (1 << (bitmarkParser.BitImagePortrait - 160)) | (1 << (bitmarkParser.BitImageLandscape - 160)) | (1 << (bitmarkParser.BitImageOnDevice - 160)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (bitmarkParser.OPDANGLE - 193)) | (1 << (bitmarkParser.OPQ - 193)) | (1 << (bitmarkParser.OPS - 193)) | (1 << (bitmarkParser.COLON - 193)) | (1 << (bitmarkParser.AMP - 193)) | (1 << (bitmarkParser.Greater - 193)) | (1 << (bitmarkParser.Less - 193)) | (1 << (bitmarkParser.RightAngle - 193)) | (1 << (bitmarkParser.RightArrow - 193)) | (1 << (bitmarkParser.DBLEQ - 193)) | (1 << (bitmarkParser.QUOTE_INDEX - 193)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (bitmarkParser.NUMERIC - 227)) | (1 << (bitmarkParser.STRING - 227)) | (1 << (bitmarkParser.NOTBITMARK - 227)) | (1 << (bitmarkParser.ELIPSIS - 227)) | (1 << (bitmarkParser.SENTENCE - 227)) | (1 << (bitmarkParser.BARSTRING - 227)))) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
			this.state = 562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 559;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 564;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 565;
			this.match(bitmarkParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bitmark_(): Bitmark_Context {
		let _localctx: Bitmark_Context = new Bitmark_Context(this._ctx, this.state);
		this.enterRule(_localctx, 2, bitmarkParser.RULE_bitmark_);
		try {
			this.state = 569;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.BitBook:
			case bitmarkParser.BitChapter:
			case bitmarkParser.BitToc:
			case bitmarkParser.BitSummary:
			case bitmarkParser.BitIntlink:
			case bitmarkParser.BitIntRef:
			case bitmarkParser.BitAlias:
			case bitmarkParser.BitGroups:
			case bitmarkParser.BitGroupt:
			case bitmarkParser.BitStatement:
			case bitmarkParser.BitDetails:
			case bitmarkParser.BitSampleSolution:
			case bitmarkParser.BitTakeAudio:
			case bitmarkParser.BitArticle:
			case bitmarkParser.BitPage:
			case bitmarkParser.BitEssay:
			case bitmarkParser.BitMessage:
			case bitmarkParser.BitCorrection:
			case bitmarkParser.BitMark:
			case bitmarkParser.BitTakepic:
			case bitmarkParser.BitRecaud:
			case bitmarkParser.BitPrepnote:
			case bitmarkParser.BitAssign:
			case bitmarkParser.BitSelfassess:
			case bitmarkParser.BitRating:
			case bitmarkParser.BitSurvey:
			case bitmarkParser.BitSurvey1:
			case bitmarkParser.BitSurveyanon:
			case bitmarkParser.BitSurveyanon1:
			case bitmarkParser.BitNote:
			case bitmarkParser.BitInfo:
			case bitmarkParser.BitWarning:
			case bitmarkParser.BitRemark:
			case bitmarkParser.BitHint:
			case bitmarkParser.BitHelp:
			case bitmarkParser.BitDanger:
			case bitmarkParser.BitBug:
			case bitmarkParser.BitSidenote:
			case bitmarkParser.BitStickynote:
			case bitmarkParser.BitQuote:
			case bitmarkParser.BitFootnote:
			case bitmarkParser.BitExample:
			case bitmarkParser.BitButtonCopytext:
			case bitmarkParser.BitWbtContinue:
			case bitmarkParser.BitLearningPathDetails:
			case bitmarkParser.BitAiPrompt:
			case bitmarkParser.BitNoteAi:
			case bitmarkParser.BitSummayAi:
			case bitmarkParser.BitArticleAi:
			case bitmarkParser.BitLearningPathLti:
			case bitmarkParser.BitLearningPathStep:
			case bitmarkParser.BitLearningPathBook:
			case bitmarkParser.BitLearningPathSign:
			case bitmarkParser.BitLearningPathVideoCall:
			case bitmarkParser.BitLearningPathLearningGoal:
			case bitmarkParser.BitLearningPathClosing:
			case bitmarkParser.BitLearningPathFeedback:
			case bitmarkParser.BitLearningPathBotTraining:
			case bitmarkParser.BitLearningPathExternalLink:
			case bitmarkParser.BitLearningPathClassroomTraining:
			case bitmarkParser.BitLearningPathClassroomEvent:
			case bitmarkParser.BitBotActionSend:
			case bitmarkParser.BitBotActionAnnounce:
			case bitmarkParser.BitBotActionSave:
			case bitmarkParser.BitBotActionRemind:
			case bitmarkParser.BitVendorPadletEmbed:
			case bitmarkParser.BitScorm:
			case bitmarkParser.BitImage:
			case bitmarkParser.BitImageLink:
			case bitmarkParser.BitImageZoom:
			case bitmarkParser.BitImagePrototype:
			case bitmarkParser.BitImageSuperWide:
			case bitmarkParser.BitAudio:
			case bitmarkParser.BitAudioLink:
			case bitmarkParser.BitAudioEmbed:
			case bitmarkParser.BitVideo:
			case bitmarkParser.BitVideoLink:
			case bitmarkParser.BitVideoEmbed:
			case bitmarkParser.BitVideoPortrait:
			case bitmarkParser.BitVideoLandscape:
			case bitmarkParser.BitStillImageFilm:
			case bitmarkParser.BitStillImageFilmLink:
			case bitmarkParser.BitStillImageFilmEmbed:
			case bitmarkParser.BitWebsiteLink:
			case bitmarkParser.BitDocument:
			case bitmarkParser.BitDocumentLink:
			case bitmarkParser.BitDocumentEmbed:
			case bitmarkParser.BitDocumentDownload:
			case bitmarkParser.BitAppLink:
			case bitmarkParser.BitEditorial:
			case bitmarkParser.BitBookFrontispiece:
			case bitmarkParser.BitBookTitle:
			case bitmarkParser.BitBookCopyright:
			case bitmarkParser.BitBookDedication:
			case bitmarkParser.BitBookForword:
			case bitmarkParser.BitBookPreface:
			case bitmarkParser.BitBookPrologue:
			case bitmarkParser.BitBookEpilogue:
			case bitmarkParser.BitBookIntroduction:
			case bitmarkParser.BitBookIncitingIncident:
			case bitmarkParser.BitBookConclusion:
			case bitmarkParser.BitBookAfterword:
			case bitmarkParser.BitBookPostscript:
			case bitmarkParser.BitBookappendix:
			case bitmarkParser.BitBookAddendum:
			case bitmarkParser.BitBookAcknowledgments:
			case bitmarkParser.BitBookListOfContributors:
			case bitmarkParser.BitBookBibliography:
			case bitmarkParser.BitBookReferenceList:
			case bitmarkParser.BitBookEndnotes:
			case bitmarkParser.BitBookNotes:
			case bitmarkParser.BitBookCopyrightPermissions:
			case bitmarkParser.BitBookTeaser:
			case bitmarkParser.BitBookAutherBio:
			case bitmarkParser.BitBookRequestForABookReview:
			case bitmarkParser.BitBookComingSoon:
			case bitmarkParser.BitBookReadMore:
			case bitmarkParser.BitBookSummary:
			case bitmarkParser.BitBookEpigraph:
			case bitmarkParser.BitCode:
			case bitmarkParser.BitCard1:
			case bitmarkParser.BitQuestion1:
			case bitmarkParser.BitScreenshot:
			case bitmarkParser.BitFocusImage:
			case bitmarkParser.BitPhoto:
			case bitmarkParser.BitBrowserImage:
			case bitmarkParser.BitBotActionResponse:
			case bitmarkParser.BitBotActionTrueFalse:
			case bitmarkParser.BitBotActionRatingNumber:
			case bitmarkParser.BitBotActionRatingStars:
			case bitmarkParser.BitChapterSubjectMatter:
			case bitmarkParser.BitReleaseNote:
			case bitmarkParser.BitConclusion:
			case bitmarkParser.BitVendorAmcharts5Chart:
			case bitmarkParser.BitFeatured:
			case bitmarkParser.BitNewspaperArticle:
			case bitmarkParser.BitBlogArticle:
			case bitmarkParser.BitBookArticle:
			case bitmarkParser.BitNotebookArticle:
			case bitmarkParser.BitWorkbookArticle:
			case bitmarkParser.BitReleaseNotesSummary:
			case bitmarkParser.BitCookPreparation:
			case bitmarkParser.BitCookStep:
			case bitmarkParser.BitCookIngredients:
			case bitmarkParser.BitCookRremark:
			case bitmarkParser.BitCookVariation:
			case bitmarkParser.BitCookInsert:
			case bitmarkParser.BitCookArrangement:
			case bitmarkParser.BitCookPracticeAdvise:
			case bitmarkParser.BitCookPlate:
			case bitmarkParser.BitCookRecommendation:
			case bitmarkParser.BitCookPersonalRecommendation:
			case bitmarkParser.BitCookSideDrink:
			case bitmarkParser.BitCookSideDish:
			case bitmarkParser.BitCookTimer:
			case bitmarkParser.BitLangLearningOutcomes:
			case bitmarkParser.BitLangEnablingLanguageSkills:
			case bitmarkParser.BitLangLifeSkills:
			case bitmarkParser.BitLangEnglishAroundWorld:
			case bitmarkParser.BitLangGoodtoknow:
			case bitmarkParser.BitLangLearningStrategy:
			case bitmarkParser.BitLangLikeAlocal:
			case bitmarkParser.BitLangUsefulPhrases:
			case bitmarkParser.BitLangLevelDown:
			case bitmarkParser.BitLangLevelUp:
			case bitmarkParser.BitLangExtraActivity:
			case bitmarkParser.BitLangVideoScript:
			case bitmarkParser.BitLangAudioScript:
			case bitmarkParser.BitLangVocabulary:
			case bitmarkParser.BitLangHomework:
			case bitmarkParser.BitLangTeacherNote:
			case bitmarkParser.BitReviewNote:
			case bitmarkParser.BitReviewAuthorNote:
			case bitmarkParser.BitReviewReviewerNote:
			case bitmarkParser.BitReviewRequestForReviewNote:
			case bitmarkParser.BitReviewApprovedNote:
			case bitmarkParser.BitChecklist:
			case bitmarkParser.BitVideoTranscript:
			case bitmarkParser.BitAudioTranscript:
			case bitmarkParser.BitImagePortrait:
			case bitmarkParser.BitImageLandscape:
			case bitmarkParser.BitImageOnDevice:
			case bitmarkParser.OPDANGLE:
			case bitmarkParser.OPQ:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 567;
				this.bit();
				}
				break;
			case bitmarkParser.S:
			case bitmarkParser.OPS:
			case bitmarkParser.COLON:
			case bitmarkParser.AMP:
			case bitmarkParser.Greater:
			case bitmarkParser.Less:
			case bitmarkParser.RightAngle:
			case bitmarkParser.RightArrow:
			case bitmarkParser.DBLEQ:
			case bitmarkParser.QUOTE_INDEX:
			case bitmarkParser.NUMERIC:
			case bitmarkParser.STRING:
			case bitmarkParser.NOTBITMARK:
			case bitmarkParser.ELIPSIS:
			case bitmarkParser.SENTENCE:
			case bitmarkParser.BARSTRING:
			case bitmarkParser.AmpAudio:
			case bitmarkParser.AmpImage:
			case bitmarkParser.AmpVideo:
			case bitmarkParser.AmpArticle:
			case bitmarkParser.AmpDocument:
			case bitmarkParser.AmpApp:
			case bitmarkParser.AmpWebsite:
			case bitmarkParser.AmpStillImageFilm:
			case bitmarkParser.AmpAudioLink:
			case bitmarkParser.AmpImageLink:
			case bitmarkParser.AmpVideoLink:
			case bitmarkParser.AmpArticleLink:
			case bitmarkParser.AmpDocumentLink:
			case bitmarkParser.AmpAppLink:
			case bitmarkParser.AmpWebsiteLink:
			case bitmarkParser.AmpStillImageFilmLink:
			case bitmarkParser.BitmarkMinus:
			case bitmarkParser.BitmarkPlus:
			case bitmarkParser.URL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 568;
				this.lines();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit(): BitContext {
		let _localctx: BitContext = new BitContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, bitmarkParser.RULE_bit);
		try {
			this.state = 755;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 5, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 571;
				this.book();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 572;
				this.chapter();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 573;
				this.ai_prompt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 574;
				this.note_ai();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 575;
				this.summary_ai();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 576;
				this.article_ai();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 577;
				this.summary();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 578;
				this.toc();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 579;
				this.bit_alias();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 580;
				this.internal_link();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 581;
				this.anchor();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 582;
				this.group_born();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 583;
				this.group_died();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 584;
				this.essay();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 585;
				this.correction();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 586;
				this.mark_();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 587;
				this.take_picture();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 588;
				this.take_audio();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 589;
				this.record_audio();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 590;
				this.preparation_note();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 591;
				this.assignment();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 592;
				this.article();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 593;
				this.statement();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 594;
				this.details();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 595;
				this.sample_solution();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 596;
				this.buttoncopytext();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 597;
				this.wbtcontinue();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 598;
				this.learningpathdetails();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 599;
				this.note();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 600;
				this.info();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 601;
				this.warning();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 602;
				this.remark();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 603;
				this.hintbit();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 604;
				this.help();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 605;
				this.danger();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 606;
				this.bug();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 607;
				this.sidenote();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 608;
				this.stickynote();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 609;
				this.quote();
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 610;
				this.footnote();
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 611;
				this.examplebit();
				}
				break;

			case 42:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 612;
				this.page();
				}
				break;

			case 43:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 613;
				this.message();
				}
				break;

			case 44:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 614;
				this.self_assessment();
				}
				break;

			case 45:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 615;
				this.rating();
				}
				break;

			case 46:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 616;
				this.survey();
				}
				break;

			case 47:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 617;
				this.survey_1();
				}
				break;

			case 48:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 618;
				this.survey_anonymous();
				}
				break;

			case 49:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 619;
				this.survey_anonymous_1();
				}
				break;

			case 50:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 620;
				this.hint();
				}
				break;

			case 51:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 621;
				this.vendor_padlet_embed();
				}
				break;

			case 52:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 622;
				this.scorm();
				}
				break;

			case 53:
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 623;
				this.learning_path_lti();
				}
				break;

			case 54:
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 624;
				this.learning_path_step();
				}
				break;

			case 55:
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 625;
				this.learning_path_book();
				}
				break;

			case 56:
				this.enterOuterAlt(_localctx, 56);
				{
				this.state = 626;
				this.learning_path_sign();
				}
				break;

			case 57:
				this.enterOuterAlt(_localctx, 57);
				{
				this.state = 627;
				this.learning_path_video_call();
				}
				break;

			case 58:
				this.enterOuterAlt(_localctx, 58);
				{
				this.state = 628;
				this.learning_path_learning_goal();
				}
				break;

			case 59:
				this.enterOuterAlt(_localctx, 59);
				{
				this.state = 629;
				this.learning_path_closing();
				}
				break;

			case 60:
				this.enterOuterAlt(_localctx, 60);
				{
				this.state = 630;
				this.learning_path_feedback();
				}
				break;

			case 61:
				this.enterOuterAlt(_localctx, 61);
				{
				this.state = 631;
				this.learning_path_bot_training();
				}
				break;

			case 62:
				this.enterOuterAlt(_localctx, 62);
				{
				this.state = 632;
				this.learning_path_external_link();
				}
				break;

			case 63:
				this.enterOuterAlt(_localctx, 63);
				{
				this.state = 633;
				this.learning_path_classroom_training();
				}
				break;

			case 64:
				this.enterOuterAlt(_localctx, 64);
				{
				this.state = 634;
				this.learning_path_classroom_event();
				}
				break;

			case 65:
				this.enterOuterAlt(_localctx, 65);
				{
				this.state = 635;
				this.bot_action_send();
				}
				break;

			case 66:
				this.enterOuterAlt(_localctx, 66);
				{
				this.state = 636;
				this.bot_action_announce();
				}
				break;

			case 67:
				this.enterOuterAlt(_localctx, 67);
				{
				this.state = 637;
				this.bot_action_save();
				}
				break;

			case 68:
				this.enterOuterAlt(_localctx, 68);
				{
				this.state = 638;
				this.bot_action_remind();
				}
				break;

			case 69:
				this.enterOuterAlt(_localctx, 69);
				{
				this.state = 639;
				this.bot_action_response();
				}
				break;

			case 70:
				this.enterOuterAlt(_localctx, 70);
				{
				this.state = 640;
				this.bot_action_true_false();
				}
				break;

			case 71:
				this.enterOuterAlt(_localctx, 71);
				{
				this.state = 641;
				this.bot_action_rating_number();
				}
				break;

			case 72:
				this.enterOuterAlt(_localctx, 72);
				{
				this.state = 642;
				this.bot_action_rating_stars();
				}
				break;

			case 73:
				this.enterOuterAlt(_localctx, 73);
				{
				this.state = 643;
				this.bit_image();
				}
				break;

			case 74:
				this.enterOuterAlt(_localctx, 74);
				{
				this.state = 644;
				this.bit_imageLink();
				}
				break;

			case 75:
				this.enterOuterAlt(_localctx, 75);
				{
				this.state = 645;
				this.bit_imageZoom();
				}
				break;

			case 76:
				this.enterOuterAlt(_localctx, 76);
				{
				this.state = 646;
				this.bit_imagePrototype();
				}
				break;

			case 77:
				this.enterOuterAlt(_localctx, 77);
				{
				this.state = 647;
				this.bit_imageSuperWide();
				}
				break;

			case 78:
				this.enterOuterAlt(_localctx, 78);
				{
				this.state = 648;
				this.bit_audio();
				}
				break;

			case 79:
				this.enterOuterAlt(_localctx, 79);
				{
				this.state = 649;
				this.bit_audioLink();
				}
				break;

			case 80:
				this.enterOuterAlt(_localctx, 80);
				{
				this.state = 650;
				this.bit_audioEmbed();
				}
				break;

			case 81:
				this.enterOuterAlt(_localctx, 81);
				{
				this.state = 651;
				this.bit_video();
				}
				break;

			case 82:
				this.enterOuterAlt(_localctx, 82);
				{
				this.state = 652;
				this.bit_videoLink();
				}
				break;

			case 83:
				this.enterOuterAlt(_localctx, 83);
				{
				this.state = 653;
				this.bit_videoEmbed();
				}
				break;

			case 84:
				this.enterOuterAlt(_localctx, 84);
				{
				this.state = 654;
				this.bit_videoPortrait();
				}
				break;

			case 85:
				this.enterOuterAlt(_localctx, 85);
				{
				this.state = 655;
				this.bit_videoLandscape();
				}
				break;

			case 86:
				this.enterOuterAlt(_localctx, 86);
				{
				this.state = 656;
				this.bit_stillImageFilm();
				}
				break;

			case 87:
				this.enterOuterAlt(_localctx, 87);
				{
				this.state = 657;
				this.bit_stillImageFilmLink();
				}
				break;

			case 88:
				this.enterOuterAlt(_localctx, 88);
				{
				this.state = 658;
				this.bit_stillImageFilmEmbed();
				}
				break;

			case 89:
				this.enterOuterAlt(_localctx, 89);
				{
				this.state = 659;
				this.bit_document();
				}
				break;

			case 90:
				this.enterOuterAlt(_localctx, 90);
				{
				this.state = 660;
				this.bit_documentLink();
				}
				break;

			case 91:
				this.enterOuterAlt(_localctx, 91);
				{
				this.state = 661;
				this.bit_documentEmbed();
				}
				break;

			case 92:
				this.enterOuterAlt(_localctx, 92);
				{
				this.state = 662;
				this.bit_documentDownload();
				}
				break;

			case 93:
				this.enterOuterAlt(_localctx, 93);
				{
				this.state = 663;
				this.bit_websiteLink();
				}
				break;

			case 94:
				this.enterOuterAlt(_localctx, 94);
				{
				this.state = 664;
				this.bit_appLink();
				}
				break;

			case 95:
				this.enterOuterAlt(_localctx, 95);
				{
				this.state = 665;
				this.bit_editorial();
				}
				break;

			case 96:
				this.enterOuterAlt(_localctx, 96);
				{
				this.state = 666;
				this.book_frontispiece();
				}
				break;

			case 97:
				this.enterOuterAlt(_localctx, 97);
				{
				this.state = 667;
				this.book_title();
				}
				break;

			case 98:
				this.enterOuterAlt(_localctx, 98);
				{
				this.state = 668;
				this.book_copyright();
				}
				break;

			case 99:
				this.enterOuterAlt(_localctx, 99);
				{
				this.state = 669;
				this.book_dedication();
				}
				break;

			case 100:
				this.enterOuterAlt(_localctx, 100);
				{
				this.state = 670;
				this.book_forword();
				}
				break;

			case 101:
				this.enterOuterAlt(_localctx, 101);
				{
				this.state = 671;
				this.book_preface();
				}
				break;

			case 102:
				this.enterOuterAlt(_localctx, 102);
				{
				this.state = 672;
				this.book_prologue();
				}
				break;

			case 103:
				this.enterOuterAlt(_localctx, 103);
				{
				this.state = 673;
				this.book_epilogue();
				}
				break;

			case 104:
				this.enterOuterAlt(_localctx, 104);
				{
				this.state = 674;
				this.book_introduction();
				}
				break;

			case 105:
				this.enterOuterAlt(_localctx, 105);
				{
				this.state = 675;
				this.book_inciting_incident();
				}
				break;

			case 106:
				this.enterOuterAlt(_localctx, 106);
				{
				this.state = 676;
				this.book_conclusion();
				}
				break;

			case 107:
				this.enterOuterAlt(_localctx, 107);
				{
				this.state = 677;
				this.book_afterword();
				}
				break;

			case 108:
				this.enterOuterAlt(_localctx, 108);
				{
				this.state = 678;
				this.book_postscript();
				}
				break;

			case 109:
				this.enterOuterAlt(_localctx, 109);
				{
				this.state = 679;
				this.book_appendix();
				}
				break;

			case 110:
				this.enterOuterAlt(_localctx, 110);
				{
				this.state = 680;
				this.book_addendum();
				}
				break;

			case 111:
				this.enterOuterAlt(_localctx, 111);
				{
				this.state = 681;
				this.book_acknowledgments();
				}
				break;

			case 112:
				this.enterOuterAlt(_localctx, 112);
				{
				this.state = 682;
				this.book_list_of_contributors();
				}
				break;

			case 113:
				this.enterOuterAlt(_localctx, 113);
				{
				this.state = 683;
				this.book_bibliography();
				}
				break;

			case 114:
				this.enterOuterAlt(_localctx, 114);
				{
				this.state = 684;
				this.book_reference_list();
				}
				break;

			case 115:
				this.enterOuterAlt(_localctx, 115);
				{
				this.state = 685;
				this.book_endnotes();
				}
				break;

			case 116:
				this.enterOuterAlt(_localctx, 116);
				{
				this.state = 686;
				this.book_notes();
				}
				break;

			case 117:
				this.enterOuterAlt(_localctx, 117);
				{
				this.state = 687;
				this.book_copyright_permissions();
				}
				break;

			case 118:
				this.enterOuterAlt(_localctx, 118);
				{
				this.state = 688;
				this.book_teaser();
				}
				break;

			case 119:
				this.enterOuterAlt(_localctx, 119);
				{
				this.state = 689;
				this.book_auther_bio();
				}
				break;

			case 120:
				this.enterOuterAlt(_localctx, 120);
				{
				this.state = 690;
				this.book_request_for_a_book_review();
				}
				break;

			case 121:
				this.enterOuterAlt(_localctx, 121);
				{
				this.state = 691;
				this.book_coming_soon();
				}
				break;

			case 122:
				this.enterOuterAlt(_localctx, 122);
				{
				this.state = 692;
				this.book_read_more();
				}
				break;

			case 123:
				this.enterOuterAlt(_localctx, 123);
				{
				this.state = 693;
				this.book_summary();
				}
				break;

			case 124:
				this.enterOuterAlt(_localctx, 124);
				{
				this.state = 694;
				this.book_epigraph();
				}
				break;

			case 125:
				this.enterOuterAlt(_localctx, 125);
				{
				this.state = 695;
				this.cook_preparation();
				}
				break;

			case 126:
				this.enterOuterAlt(_localctx, 126);
				{
				this.state = 696;
				this.cook_step();
				}
				break;

			case 127:
				this.enterOuterAlt(_localctx, 127);
				{
				this.state = 697;
				this.cook_ingredients();
				}
				break;

			case 128:
				this.enterOuterAlt(_localctx, 128);
				{
				this.state = 698;
				this.cook_remark();
				}
				break;

			case 129:
				this.enterOuterAlt(_localctx, 129);
				{
				this.state = 699;
				this.cook_variation();
				}
				break;

			case 130:
				this.enterOuterAlt(_localctx, 130);
				{
				this.state = 700;
				this.cook_insert();
				}
				break;

			case 131:
				this.enterOuterAlt(_localctx, 131);
				{
				this.state = 701;
				this.cook_arrangement();
				}
				break;

			case 132:
				this.enterOuterAlt(_localctx, 132);
				{
				this.state = 702;
				this.cook_practice_advise();
				}
				break;

			case 133:
				this.enterOuterAlt(_localctx, 133);
				{
				this.state = 703;
				this.cook_plate();
				}
				break;

			case 134:
				this.enterOuterAlt(_localctx, 134);
				{
				this.state = 704;
				this.cook_recommendation();
				}
				break;

			case 135:
				this.enterOuterAlt(_localctx, 135);
				{
				this.state = 705;
				this.cook_personal_recommendation();
				}
				break;

			case 136:
				this.enterOuterAlt(_localctx, 136);
				{
				this.state = 706;
				this.cook_side_drink();
				}
				break;

			case 137:
				this.enterOuterAlt(_localctx, 137);
				{
				this.state = 707;
				this.cook_side_dish();
				}
				break;

			case 138:
				this.enterOuterAlt(_localctx, 138);
				{
				this.state = 708;
				this.cook_timer();
				}
				break;

			case 139:
				this.enterOuterAlt(_localctx, 139);
				{
				this.state = 709;
				this.cook_ingredients();
				}
				break;

			case 140:
				this.enterOuterAlt(_localctx, 140);
				{
				this.state = 710;
				this.lang_learning_outcomes();
				}
				break;

			case 141:
				this.enterOuterAlt(_localctx, 141);
				{
				this.state = 711;
				this.lang_enabling_language_skills();
				}
				break;

			case 142:
				this.enterOuterAlt(_localctx, 142);
				{
				this.state = 712;
				this.lang_life_skills();
				}
				break;

			case 143:
				this.enterOuterAlt(_localctx, 143);
				{
				this.state = 713;
				this.lang_english_around_world();
				}
				break;

			case 144:
				this.enterOuterAlt(_localctx, 144);
				{
				this.state = 714;
				this.lang_good_to_know();
				}
				break;

			case 145:
				this.enterOuterAlt(_localctx, 145);
				{
				this.state = 715;
				this.lang_learning_strategy();
				}
				break;

			case 146:
				this.enterOuterAlt(_localctx, 146);
				{
				this.state = 716;
				this.lang_like_a_local();
				}
				break;

			case 147:
				this.enterOuterAlt(_localctx, 147);
				{
				this.state = 717;
				this.lang_useful_phrases();
				}
				break;

			case 148:
				this.enterOuterAlt(_localctx, 148);
				{
				this.state = 718;
				this.lang_level_down();
				}
				break;

			case 149:
				this.enterOuterAlt(_localctx, 149);
				{
				this.state = 719;
				this.lang_level_up();
				}
				break;

			case 150:
				this.enterOuterAlt(_localctx, 150);
				{
				this.state = 720;
				this.lang_extra_activity();
				}
				break;

			case 151:
				this.enterOuterAlt(_localctx, 151);
				{
				this.state = 721;
				this.lang_video_script();
				}
				break;

			case 152:
				this.enterOuterAlt(_localctx, 152);
				{
				this.state = 722;
				this.lang_audio_script();
				}
				break;

			case 153:
				this.enterOuterAlt(_localctx, 153);
				{
				this.state = 723;
				this.lang_vocabulary();
				}
				break;

			case 154:
				this.enterOuterAlt(_localctx, 154);
				{
				this.state = 724;
				this.lang_homework();
				}
				break;

			case 155:
				this.enterOuterAlt(_localctx, 155);
				{
				this.state = 725;
				this.lang_teacher_note();
				}
				break;

			case 156:
				this.enterOuterAlt(_localctx, 156);
				{
				this.state = 726;
				this.code();
				}
				break;

			case 157:
				this.enterOuterAlt(_localctx, 157);
				{
				this.state = 727;
				this.card1();
				}
				break;

			case 158:
				this.enterOuterAlt(_localctx, 158);
				{
				this.state = 728;
				this.question1();
				}
				break;

			case 159:
				this.enterOuterAlt(_localctx, 159);
				{
				this.state = 729;
				this.screenshot();
				}
				break;

			case 160:
				this.enterOuterAlt(_localctx, 160);
				{
				this.state = 730;
				this.focus_image();
				}
				break;

			case 161:
				this.enterOuterAlt(_localctx, 161);
				{
				this.state = 731;
				this.photo();
				}
				break;

			case 162:
				this.enterOuterAlt(_localctx, 162);
				{
				this.state = 732;
				this.browser_image();
				}
				break;

			case 163:
				this.enterOuterAlt(_localctx, 163);
				{
				this.state = 733;
				this.chapter_subject_matter();
				}
				break;

			case 164:
				this.enterOuterAlt(_localctx, 164);
				{
				this.state = 734;
				this.release_note();
				}
				break;

			case 165:
				this.enterOuterAlt(_localctx, 165);
				{
				this.state = 735;
				this.conclusion();
				}
				break;

			case 166:
				this.enterOuterAlt(_localctx, 166);
				{
				this.state = 736;
				this.featured();
				}
				break;

			case 167:
				this.enterOuterAlt(_localctx, 167);
				{
				this.state = 737;
				this.vendor_amcharts_5_chart();
				}
				break;

			case 168:
				this.enterOuterAlt(_localctx, 168);
				{
				this.state = 738;
				this.newspaper_article();
				}
				break;

			case 169:
				this.enterOuterAlt(_localctx, 169);
				{
				this.state = 739;
				this.blog_article();
				}
				break;

			case 170:
				this.enterOuterAlt(_localctx, 170);
				{
				this.state = 740;
				this.book_article();
				}
				break;

			case 171:
				this.enterOuterAlt(_localctx, 171);
				{
				this.state = 741;
				this.notebook_article();
				}
				break;

			case 172:
				this.enterOuterAlt(_localctx, 172);
				{
				this.state = 742;
				this.workbook_article();
				}
				break;

			case 173:
				this.enterOuterAlt(_localctx, 173);
				{
				this.state = 743;
				this.release_notes_summary();
				}
				break;

			case 174:
				this.enterOuterAlt(_localctx, 174);
				{
				this.state = 744;
				this.review_note();
				}
				break;

			case 175:
				this.enterOuterAlt(_localctx, 175);
				{
				this.state = 745;
				this.review_author_note();
				}
				break;

			case 176:
				this.enterOuterAlt(_localctx, 176);
				{
				this.state = 746;
				this.review_reviewer_note();
				}
				break;

			case 177:
				this.enterOuterAlt(_localctx, 177);
				{
				this.state = 747;
				this.review_request_for_review_note();
				}
				break;

			case 178:
				this.enterOuterAlt(_localctx, 178);
				{
				this.state = 748;
				this.review_approved_note();
				}
				break;

			case 179:
				this.enterOuterAlt(_localctx, 179);
				{
				this.state = 749;
				this.checklist();
				}
				break;

			case 180:
				this.enterOuterAlt(_localctx, 180);
				{
				this.state = 750;
				this.video_transcript();
				}
				break;

			case 181:
				this.enterOuterAlt(_localctx, 181);
				{
				this.state = 751;
				this.audio_transcript();
				}
				break;

			case 182:
				this.enterOuterAlt(_localctx, 182);
				{
				this.state = 752;
				this.image_portrait();
				}
				break;

			case 183:
				this.enterOuterAlt(_localctx, 183);
				{
				this.state = 753;
				this.image_landscape();
				}
				break;

			case 184:
				this.enterOuterAlt(_localctx, 184);
				{
				this.state = 754;
				this.image_on_device();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book(): BookContext {
		let _localctx: BookContext = new BookContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, bitmarkParser.RULE_book);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 757;
			this.match(bitmarkParser.BitBook);
			this.state = 758;
			this.format();
			this.state = 759;
			this.match(bitmarkParser.CL);
			this.state = 763;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 6, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 760;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 765;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 6, this._ctx);
			}
			this.state = 775;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 766;
					this.bitElem();
					this.state = 770;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 767;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 772;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
					}
					}
					}
				}
				this.state = 777;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public chapter(): ChapterContext {
		let _localctx: ChapterContext = new ChapterContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, bitmarkParser.RULE_chapter);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 778;
			this.match(bitmarkParser.BitChapter);
			this.state = 779;
			this.format();
			this.state = 780;
			this.match(bitmarkParser.CL);
			this.state = 784;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 781;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 790;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 10, this._ctx) ) {
			case 1:
				{
				this.state = 787;
				this.anchor();
				this.state = 788;
				this.match(bitmarkParser.NL);
				}
				break;
			}
			this.state = 792;
			this.resource();
			this.state = 802;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 796;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 793;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 798;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 799;
					this.resource();
					}
					}
				}
				this.state = 804;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ai_prompt(): Ai_promptContext {
		let _localctx: Ai_promptContext = new Ai_promptContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, bitmarkParser.RULE_ai_prompt);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 805;
			this.match(bitmarkParser.BitAiPrompt);
			this.state = 806;
			this.format();
			this.state = 807;
			this.match(bitmarkParser.CL);
			this.state = 811;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 808;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 813;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 821;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 814;
					this.bitElem();
					this.state = 818;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 815;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 820;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 823;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public note_ai(): Note_aiContext {
		let _localctx: Note_aiContext = new Note_aiContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, bitmarkParser.RULE_note_ai);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 825;
			this.match(bitmarkParser.BitNoteAi);
			this.state = 826;
			this.format();
			this.state = 827;
			this.match(bitmarkParser.CL);
			this.state = 831;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 828;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 841;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 834;
					this.bitElem();
					this.state = 838;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 835;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 840;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 843;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 18, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public summary_ai(): Summary_aiContext {
		let _localctx: Summary_aiContext = new Summary_aiContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, bitmarkParser.RULE_summary_ai);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 845;
			this.match(bitmarkParser.BitSummayAi);
			this.state = 846;
			this.format();
			this.state = 847;
			this.match(bitmarkParser.CL);
			this.state = 851;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 848;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 853;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 861;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 854;
					this.bitElem();
					this.state = 858;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 855;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 860;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 863;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public article_ai(): Article_aiContext {
		let _localctx: Article_aiContext = new Article_aiContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, bitmarkParser.RULE_article_ai);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 865;
			this.match(bitmarkParser.BitArticleAi);
			this.state = 866;
			this.format();
			this.state = 867;
			this.match(bitmarkParser.CL);
			this.state = 871;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 868;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 873;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 881;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 874;
					this.bitElem();
					this.state = 878;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 875;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 880;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 883;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 24, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public toc(): TocContext {
		let _localctx: TocContext = new TocContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, bitmarkParser.RULE_toc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 885;
			this.match(bitmarkParser.BitToc);
			this.state = 887;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
				{
				this.state = 886;
				this.s_and_w();
				}
			}

			this.state = 889;
			this.match(bitmarkParser.CL);
			this.state = 890;
			this.match(bitmarkParser.NL);
			this.state = 894;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPA || _la === bitmarkParser.AtSampleSolution || _la === bitmarkParser.OpAtCopyright) {
				{
				this.state = 891;
				this.atdef();
				this.state = 892;
				this.match(bitmarkParser.NL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public summary(): SummaryContext {
		let _localctx: SummaryContext = new SummaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, bitmarkParser.RULE_summary);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 896;
			this.match(bitmarkParser.BitSummary);
			this.state = 897;
			this.match(bitmarkParser.CL);
			this.state = 901;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 898;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 903;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
			}
			this.state = 904;
			this.title_etc();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public internal_link(): Internal_linkContext {
		let _localctx: Internal_linkContext = new Internal_linkContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, bitmarkParser.RULE_internal_link);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 906;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.BitIntlink || _la === bitmarkParser.BitIntRef)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 908;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
				{
				this.state = 907;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 910;
			this.match(bitmarkParser.CL);
			this.state = 920;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 914;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 911;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 916;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 917;
					this.bitElem();
					}
					}
				}
				this.state = 922;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_alias(): Bit_aliasContext {
		let _localctx: Bit_aliasContext = new Bit_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, bitmarkParser.RULE_bit_alias);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 923;
			this.match(bitmarkParser.BitAlias);
			this.state = 924;
			this.match(bitmarkParser.CL);
			this.state = 925;
			this.angleref();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public title_etc(): Title_etcContext {
		let _localctx: Title_etcContext = new Title_etcContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, bitmarkParser.RULE_title_etc);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 941;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 928;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === bitmarkParser.NL) {
						{
						this.state = 927;
						this.match(bitmarkParser.NL);
						}
					}

					this.state = 937;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.OPHASH:
						{
						this.state = 930;
						this.title();
						}
						break;
					case bitmarkParser.OPA:
					case bitmarkParser.AtSampleSolution:
					case bitmarkParser.OpAtCopyright:
						{
						this.state = 931;
						this.atdef();
						}
						break;
					case bitmarkParser.OPC:
						{
						this.state = 932;
						this.item();
						}
						break;
					case bitmarkParser.OPB:
						{
						this.state = 933;
						this.instruction();
						}
						break;
					case bitmarkParser.OPRANGLES:
					case bitmarkParser.OPRANGLEL:
						{
						this.state = 934;
						this.angleref();
						}
						break;
					case bitmarkParser.OPDANGLE:
						{
						this.state = 935;
						this.anchor();
						}
						break;
					case bitmarkParser.AtProgress:
						{
						this.state = 936;
						this.progress();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 943;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_born(): Group_bornContext {
		let _localctx: Group_bornContext = new Group_bornContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, bitmarkParser.RULE_group_born);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 944;
			this.match(bitmarkParser.BitGroups);
			this.state = 945;
			this.match(bitmarkParser.CL);
			this.state = 955;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 946;
					this.match(bitmarkParser.NL);
					this.state = 947;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 950;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						this.state = 950;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 34, this._ctx) ) {
						case 1:
							{
							this.state = 948;
							this.s_and_w();
							}
							break;

						case 2:
							{
							this.state = 949;
							this.match(bitmarkParser.COLON);
							}
							break;
						}
						}
						this.state = 952;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
					this.state = 954;
					this.match(bitmarkParser.CL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 957;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 959;
			this.match(bitmarkParser.NL);
			this.state = 963;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 37, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 960;
					this.lines();
					}
					}
				}
				this.state = 965;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 37, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_died(): Group_diedContext {
		let _localctx: Group_diedContext = new Group_diedContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, bitmarkParser.RULE_group_died);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 966;
			this.match(bitmarkParser.BitGroupt);
			this.state = 967;
			this.match(bitmarkParser.CL);
			this.state = 977;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 968;
					this.match(bitmarkParser.NL);
					this.state = 969;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 972;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						this.state = 972;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 38, this._ctx) ) {
						case 1:
							{
							this.state = 970;
							this.s_and_w();
							}
							break;

						case 2:
							{
							this.state = 971;
							this.match(bitmarkParser.COLON);
							}
							break;
						}
						}
						this.state = 974;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
					this.state = 976;
					this.match(bitmarkParser.CL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 979;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 40, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 981;
			this.match(bitmarkParser.NL);
			this.state = 985;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 982;
					this.lines();
					}
					}
				}
				this.state = 987;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_lti(): Learning_path_ltiContext {
		let _localctx: Learning_path_ltiContext = new Learning_path_ltiContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, bitmarkParser.RULE_learning_path_lti);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 988;
			this.match(bitmarkParser.BitLearningPathLti);
			this.state = 989;
			this.format();
			this.state = 990;
			this.match(bitmarkParser.CL);
			this.state = 994;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 991;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 996;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1004;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 997;
					this.bitElem();
					this.state = 1001;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 998;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1003;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1006;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_step(): Learning_path_stepContext {
		let _localctx: Learning_path_stepContext = new Learning_path_stepContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, bitmarkParser.RULE_learning_path_step);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1008;
			this.match(bitmarkParser.BitLearningPathStep);
			this.state = 1009;
			this.format();
			this.state = 1010;
			this.match(bitmarkParser.CL);
			this.state = 1014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1011;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1016;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1024;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1017;
					this.bitElem();
					this.state = 1021;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1018;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1023;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1026;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_book(): Learning_path_bookContext {
		let _localctx: Learning_path_bookContext = new Learning_path_bookContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, bitmarkParser.RULE_learning_path_book);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1028;
			this.match(bitmarkParser.BitLearningPathBook);
			this.state = 1029;
			this.format();
			this.state = 1030;
			this.match(bitmarkParser.CL);
			this.state = 1034;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1031;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1036;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1044;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1037;
					this.bitElem();
					this.state = 1041;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1038;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1043;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1046;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_sign(): Learning_path_signContext {
		let _localctx: Learning_path_signContext = new Learning_path_signContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, bitmarkParser.RULE_learning_path_sign);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1048;
			this.match(bitmarkParser.BitLearningPathSign);
			this.state = 1049;
			this.format();
			this.state = 1050;
			this.match(bitmarkParser.CL);
			this.state = 1054;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1051;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1056;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1064;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1057;
					this.bitElem();
					this.state = 1061;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1058;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1063;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1066;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_video_call(): Learning_path_video_callContext {
		let _localctx: Learning_path_video_callContext = new Learning_path_video_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, bitmarkParser.RULE_learning_path_video_call);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1068;
			this.match(bitmarkParser.BitLearningPathVideoCall);
			this.state = 1069;
			this.format();
			this.state = 1070;
			this.match(bitmarkParser.CL);
			this.state = 1074;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1071;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1076;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1084;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1077;
					this.bitElem();
					this.state = 1081;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1078;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1083;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1086;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_learning_goal(): Learning_path_learning_goalContext {
		let _localctx: Learning_path_learning_goalContext = new Learning_path_learning_goalContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, bitmarkParser.RULE_learning_path_learning_goal);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1088;
			this.match(bitmarkParser.BitLearningPathLearningGoal);
			this.state = 1089;
			this.format();
			this.state = 1090;
			this.match(bitmarkParser.CL);
			this.state = 1094;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1091;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1096;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1104;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1097;
					this.bitElem();
					this.state = 1101;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1098;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1103;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1106;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_closing(): Learning_path_closingContext {
		let _localctx: Learning_path_closingContext = new Learning_path_closingContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, bitmarkParser.RULE_learning_path_closing);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1108;
			this.match(bitmarkParser.BitLearningPathClosing);
			this.state = 1109;
			this.format();
			this.state = 1110;
			this.match(bitmarkParser.CL);
			this.state = 1114;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1111;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1116;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1124;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1117;
					this.bitElem();
					this.state = 1121;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 61, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1118;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1123;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 61, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1126;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_feedback(): Learning_path_feedbackContext {
		let _localctx: Learning_path_feedbackContext = new Learning_path_feedbackContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, bitmarkParser.RULE_learning_path_feedback);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1128;
			this.match(bitmarkParser.BitLearningPathFeedback);
			this.state = 1129;
			this.format();
			this.state = 1130;
			this.match(bitmarkParser.CL);
			this.state = 1134;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1131;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1136;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1144;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1137;
					this.bitElem();
					this.state = 1141;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1138;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1143;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1146;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_bot_training(): Learning_path_bot_trainingContext {
		let _localctx: Learning_path_bot_trainingContext = new Learning_path_bot_trainingContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, bitmarkParser.RULE_learning_path_bot_training);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1148;
			this.match(bitmarkParser.BitLearningPathBotTraining);
			this.state = 1149;
			this.format();
			this.state = 1150;
			this.match(bitmarkParser.CL);
			this.state = 1154;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1151;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1156;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1164;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1157;
					this.bitElem();
					this.state = 1161;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1158;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1163;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1166;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_external_link(): Learning_path_external_linkContext {
		let _localctx: Learning_path_external_linkContext = new Learning_path_external_linkContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, bitmarkParser.RULE_learning_path_external_link);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1168;
			this.match(bitmarkParser.BitLearningPathExternalLink);
			this.state = 1169;
			this.format();
			this.state = 1170;
			this.match(bitmarkParser.CL);
			this.state = 1174;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1171;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1176;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1184;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1177;
					this.bitElem();
					this.state = 1181;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1178;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1183;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1186;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_classroom_training(): Learning_path_classroom_trainingContext {
		let _localctx: Learning_path_classroom_trainingContext = new Learning_path_classroom_trainingContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, bitmarkParser.RULE_learning_path_classroom_training);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1188;
			this.match(bitmarkParser.BitLearningPathClassroomTraining);
			this.state = 1189;
			this.format();
			this.state = 1190;
			this.match(bitmarkParser.CL);
			this.state = 1194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1191;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1196;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1204;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1197;
					this.bitElem();
					this.state = 1201;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 73, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1198;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1203;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 73, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1206;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_classroom_event(): Learning_path_classroom_eventContext {
		let _localctx: Learning_path_classroom_eventContext = new Learning_path_classroom_eventContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, bitmarkParser.RULE_learning_path_classroom_event);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1208;
			this.match(bitmarkParser.BitLearningPathClassroomEvent);
			this.state = 1209;
			this.format();
			this.state = 1210;
			this.match(bitmarkParser.CL);
			this.state = 1214;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1211;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1224;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1217;
					this.bitElem();
					this.state = 1221;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 76, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1218;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1223;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 76, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1226;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_send(): Bot_action_sendContext {
		let _localctx: Bot_action_sendContext = new Bot_action_sendContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, bitmarkParser.RULE_bot_action_send);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1228;
			this.match(bitmarkParser.BitBotActionSend);
			this.state = 1229;
			this.format();
			this.state = 1230;
			this.match(bitmarkParser.CL);
			this.state = 1234;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1231;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1244;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1237;
					this.bitElem();
					this.state = 1241;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1238;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1243;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1246;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 80, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_announce(): Bot_action_announceContext {
		let _localctx: Bot_action_announceContext = new Bot_action_announceContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, bitmarkParser.RULE_bot_action_announce);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1248;
			this.match(bitmarkParser.BitBotActionAnnounce);
			this.state = 1249;
			this.format();
			this.state = 1250;
			this.match(bitmarkParser.CL);
			this.state = 1254;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1251;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1256;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1264;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1257;
					this.bitElem();
					this.state = 1261;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 82, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1258;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1263;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 82, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1266;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 83, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_save(): Bot_action_saveContext {
		let _localctx: Bot_action_saveContext = new Bot_action_saveContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, bitmarkParser.RULE_bot_action_save);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1268;
			this.match(bitmarkParser.BitBotActionSave);
			this.state = 1269;
			this.format();
			this.state = 1270;
			this.match(bitmarkParser.CL);
			this.state = 1274;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1271;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1276;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1284;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1277;
					this.bitElem();
					this.state = 1281;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1278;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1283;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1286;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 86, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_remind(): Bot_action_remindContext {
		let _localctx: Bot_action_remindContext = new Bot_action_remindContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, bitmarkParser.RULE_bot_action_remind);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1288;
			this.match(bitmarkParser.BitBotActionRemind);
			this.state = 1289;
			this.format();
			this.state = 1290;
			this.match(bitmarkParser.CL);
			this.state = 1294;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1291;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1296;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1304;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1297;
					this.bitElem();
					this.state = 1301;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1298;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1303;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1306;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 89, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_response(): Bot_action_responseContext {
		let _localctx: Bot_action_responseContext = new Bot_action_responseContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, bitmarkParser.RULE_bot_action_response);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1308;
			this.match(bitmarkParser.BitBotActionResponse);
			this.state = 1309;
			this.format();
			this.state = 1310;
			this.match(bitmarkParser.CL);
			this.state = 1314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1311;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1326;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 189)) & ~0x1F) === 0 && ((1 << (_la - 189)) & ((1 << (bitmarkParser.OPDOLL - 189)) | (1 << (bitmarkParser.OPRANGLES - 189)) | (1 << (bitmarkParser.OPRANGLEL - 189)) | (1 << (bitmarkParser.OPDANGLE - 189)) | (1 << (bitmarkParser.OPU - 189)) | (1 << (bitmarkParser.OPB - 189)) | (1 << (bitmarkParser.OPQ - 189)) | (1 << (bitmarkParser.OPA - 189)) | (1 << (bitmarkParser.OPS - 189)) | (1 << (bitmarkParser.OPHASH - 189)) | (1 << (bitmarkParser.OPC - 189)) | (1 << (bitmarkParser.COLON - 189)) | (1 << (bitmarkParser.AMP - 189)) | (1 << (bitmarkParser.Greater - 189)) | (1 << (bitmarkParser.Less - 189)) | (1 << (bitmarkParser.RightAngle - 189)) | (1 << (bitmarkParser.RightArrow - 189)) | (1 << (bitmarkParser.DBLEQ - 189)) | (1 << (bitmarkParser.QUOTE_INDEX - 189)))) !== 0) || ((((_la - 221)) & ~0x1F) === 0 && ((1 << (_la - 221)) & ((1 << (bitmarkParser.DCANY - 221)) | (1 << (bitmarkParser.ArticleText - 221)) | (1 << (bitmarkParser.NUMERIC - 221)) | (1 << (bitmarkParser.STRING - 221)) | (1 << (bitmarkParser.NOTBITMARK - 221)) | (1 << (bitmarkParser.ELIPSIS - 221)) | (1 << (bitmarkParser.SENTENCE - 221)) | (1 << (bitmarkParser.BARSTRING - 221)) | (1 << (bitmarkParser.AtProgress - 221)) | (1 << (bitmarkParser.AtReference - 221)) | (1 << (bitmarkParser.AtProgressPoints - 221)) | (1 << (bitmarkParser.AtExampleWithStr - 221)) | (1 << (bitmarkParser.AtExamplecol - 221)) | (1 << (bitmarkParser.AtExamplecl - 221)) | (1 << (bitmarkParser.AtSampleSolution - 221)) | (1 << (bitmarkParser.AtPartialAnswerS - 221)) | (1 << (bitmarkParser.AtPartialAnswer - 221)) | (1 << (bitmarkParser.AtLabeltrue - 221)) | (1 << (bitmarkParser.AtLabelfalse - 221)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.OpAtCopyright - 258)) | (1 << (bitmarkParser.OpAtIsTracked - 258)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 258)) | (1 << (bitmarkParser.AtDate - 258)) | (1 << (bitmarkParser.AmpAudio - 258)) | (1 << (bitmarkParser.AmpImage - 258)) | (1 << (bitmarkParser.AmpVideo - 258)) | (1 << (bitmarkParser.AmpArticle - 258)) | (1 << (bitmarkParser.AmpDocument - 258)) | (1 << (bitmarkParser.AmpApp - 258)) | (1 << (bitmarkParser.AmpWebsite - 258)) | (1 << (bitmarkParser.AmpStillImageFilm - 258)) | (1 << (bitmarkParser.OpAmpAudio - 258)) | (1 << (bitmarkParser.OpAmpImage - 258)) | (1 << (bitmarkParser.OpAmpImageZoom - 258)) | (1 << (bitmarkParser.OpAmpVideo - 258)) | (1 << (bitmarkParser.OpAmpArticle - 258)) | (1 << (bitmarkParser.OpAmpDocument - 258)) | (1 << (bitmarkParser.OpAmpApp - 258)) | (1 << (bitmarkParser.OpAmpWebsite - 258)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 258)) | (1 << (bitmarkParser.BracEnclose - 258)) | (1 << (bitmarkParser.AmpAudioLink - 258)) | (1 << (bitmarkParser.AmpImageLink - 258)) | (1 << (bitmarkParser.AmpVideoLink - 258)) | (1 << (bitmarkParser.AmpArticleLink - 258)))) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (bitmarkParser.AmpDocumentLink - 290)) | (1 << (bitmarkParser.AmpAppLink - 290)) | (1 << (bitmarkParser.AmpWebsiteLink - 290)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 290)) | (1 << (bitmarkParser.OpAmpAudioLink - 290)) | (1 << (bitmarkParser.OpAmpImageLink - 290)) | (1 << (bitmarkParser.OpAmpVideoLink - 290)) | (1 << (bitmarkParser.OpAmpArticleLink - 290)) | (1 << (bitmarkParser.OpAmpDocumentLink - 290)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 290)) | (1 << (bitmarkParser.OpAmpAppLink - 290)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 290)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 290)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 290)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 290)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 290)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 290)) | (1 << (bitmarkParser.BitmarkMinus - 290)) | (1 << (bitmarkParser.BitmarkPlus - 290)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
				{
				{
				this.state = 1317;
				this.bitElem();
				this.state = 1321;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 1318;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 1323;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1328;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1330;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1329;
					this.bot_action();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1332;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 93, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1334;
			this.match(bitmarkParser.HSPL);
			this.state = 1336;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 94, this._ctx) ) {
			case 1:
				{
				this.state = 1335;
				this.footer();
				}
				break;
			}
			this.state = 1341;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 95, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1338;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1343;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 95, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_true_false(): Bot_action_true_falseContext {
		let _localctx: Bot_action_true_falseContext = new Bot_action_true_falseContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, bitmarkParser.RULE_bot_action_true_false);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1344;
			this.match(bitmarkParser.BitBotActionTrueFalse);
			this.state = 1345;
			this.format();
			this.state = 1346;
			this.match(bitmarkParser.CL);
			this.state = 1350;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1347;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1352;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 189)) & ~0x1F) === 0 && ((1 << (_la - 189)) & ((1 << (bitmarkParser.OPDOLL - 189)) | (1 << (bitmarkParser.OPRANGLES - 189)) | (1 << (bitmarkParser.OPRANGLEL - 189)) | (1 << (bitmarkParser.OPDANGLE - 189)) | (1 << (bitmarkParser.OPU - 189)) | (1 << (bitmarkParser.OPB - 189)) | (1 << (bitmarkParser.OPQ - 189)) | (1 << (bitmarkParser.OPA - 189)) | (1 << (bitmarkParser.OPS - 189)) | (1 << (bitmarkParser.OPHASH - 189)) | (1 << (bitmarkParser.OPC - 189)) | (1 << (bitmarkParser.COLON - 189)) | (1 << (bitmarkParser.AMP - 189)) | (1 << (bitmarkParser.Greater - 189)) | (1 << (bitmarkParser.Less - 189)) | (1 << (bitmarkParser.RightAngle - 189)) | (1 << (bitmarkParser.RightArrow - 189)) | (1 << (bitmarkParser.DBLEQ - 189)) | (1 << (bitmarkParser.QUOTE_INDEX - 189)))) !== 0) || ((((_la - 221)) & ~0x1F) === 0 && ((1 << (_la - 221)) & ((1 << (bitmarkParser.DCANY - 221)) | (1 << (bitmarkParser.ArticleText - 221)) | (1 << (bitmarkParser.NUMERIC - 221)) | (1 << (bitmarkParser.STRING - 221)) | (1 << (bitmarkParser.NOTBITMARK - 221)) | (1 << (bitmarkParser.ELIPSIS - 221)) | (1 << (bitmarkParser.SENTENCE - 221)) | (1 << (bitmarkParser.BARSTRING - 221)) | (1 << (bitmarkParser.AtProgress - 221)) | (1 << (bitmarkParser.AtReference - 221)) | (1 << (bitmarkParser.AtProgressPoints - 221)) | (1 << (bitmarkParser.AtExampleWithStr - 221)) | (1 << (bitmarkParser.AtExamplecol - 221)) | (1 << (bitmarkParser.AtExamplecl - 221)) | (1 << (bitmarkParser.AtSampleSolution - 221)) | (1 << (bitmarkParser.AtPartialAnswerS - 221)) | (1 << (bitmarkParser.AtPartialAnswer - 221)) | (1 << (bitmarkParser.AtLabeltrue - 221)) | (1 << (bitmarkParser.AtLabelfalse - 221)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.OpAtCopyright - 258)) | (1 << (bitmarkParser.OpAtIsTracked - 258)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 258)) | (1 << (bitmarkParser.AtDate - 258)) | (1 << (bitmarkParser.AmpAudio - 258)) | (1 << (bitmarkParser.AmpImage - 258)) | (1 << (bitmarkParser.AmpVideo - 258)) | (1 << (bitmarkParser.AmpArticle - 258)) | (1 << (bitmarkParser.AmpDocument - 258)) | (1 << (bitmarkParser.AmpApp - 258)) | (1 << (bitmarkParser.AmpWebsite - 258)) | (1 << (bitmarkParser.AmpStillImageFilm - 258)) | (1 << (bitmarkParser.OpAmpAudio - 258)) | (1 << (bitmarkParser.OpAmpImage - 258)) | (1 << (bitmarkParser.OpAmpImageZoom - 258)) | (1 << (bitmarkParser.OpAmpVideo - 258)) | (1 << (bitmarkParser.OpAmpArticle - 258)) | (1 << (bitmarkParser.OpAmpDocument - 258)) | (1 << (bitmarkParser.OpAmpApp - 258)) | (1 << (bitmarkParser.OpAmpWebsite - 258)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 258)) | (1 << (bitmarkParser.BracEnclose - 258)) | (1 << (bitmarkParser.AmpAudioLink - 258)) | (1 << (bitmarkParser.AmpImageLink - 258)) | (1 << (bitmarkParser.AmpVideoLink - 258)) | (1 << (bitmarkParser.AmpArticleLink - 258)))) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (bitmarkParser.AmpDocumentLink - 290)) | (1 << (bitmarkParser.AmpAppLink - 290)) | (1 << (bitmarkParser.AmpWebsiteLink - 290)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 290)) | (1 << (bitmarkParser.OpAmpAudioLink - 290)) | (1 << (bitmarkParser.OpAmpImageLink - 290)) | (1 << (bitmarkParser.OpAmpVideoLink - 290)) | (1 << (bitmarkParser.OpAmpArticleLink - 290)) | (1 << (bitmarkParser.OpAmpDocumentLink - 290)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 290)) | (1 << (bitmarkParser.OpAmpAppLink - 290)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 290)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 290)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 290)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 290)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 290)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 290)) | (1 << (bitmarkParser.BitmarkMinus - 290)) | (1 << (bitmarkParser.BitmarkPlus - 290)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
				{
				{
				this.state = 1353;
				this.bitElem();
				this.state = 1357;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 1354;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 1359;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1366;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1365;
					this.bot_action();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1368;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 99, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1370;
			this.match(bitmarkParser.HSPL);
			this.state = 1372;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 100, this._ctx) ) {
			case 1:
				{
				this.state = 1371;
				this.footer();
				}
				break;
			}
			this.state = 1377;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1374;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1379;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_rating_number(): Bot_action_rating_numberContext {
		let _localctx: Bot_action_rating_numberContext = new Bot_action_rating_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, bitmarkParser.RULE_bot_action_rating_number);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1380;
			this.match(bitmarkParser.BitBotActionRatingNumber);
			this.state = 1381;
			this.format();
			this.state = 1382;
			this.match(bitmarkParser.CL);
			this.state = 1386;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1383;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1388;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1398;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 189)) & ~0x1F) === 0 && ((1 << (_la - 189)) & ((1 << (bitmarkParser.OPDOLL - 189)) | (1 << (bitmarkParser.OPRANGLES - 189)) | (1 << (bitmarkParser.OPRANGLEL - 189)) | (1 << (bitmarkParser.OPDANGLE - 189)) | (1 << (bitmarkParser.OPU - 189)) | (1 << (bitmarkParser.OPB - 189)) | (1 << (bitmarkParser.OPQ - 189)) | (1 << (bitmarkParser.OPA - 189)) | (1 << (bitmarkParser.OPS - 189)) | (1 << (bitmarkParser.OPHASH - 189)) | (1 << (bitmarkParser.OPC - 189)) | (1 << (bitmarkParser.COLON - 189)) | (1 << (bitmarkParser.AMP - 189)) | (1 << (bitmarkParser.Greater - 189)) | (1 << (bitmarkParser.Less - 189)) | (1 << (bitmarkParser.RightAngle - 189)) | (1 << (bitmarkParser.RightArrow - 189)) | (1 << (bitmarkParser.DBLEQ - 189)) | (1 << (bitmarkParser.QUOTE_INDEX - 189)))) !== 0) || ((((_la - 221)) & ~0x1F) === 0 && ((1 << (_la - 221)) & ((1 << (bitmarkParser.DCANY - 221)) | (1 << (bitmarkParser.ArticleText - 221)) | (1 << (bitmarkParser.NUMERIC - 221)) | (1 << (bitmarkParser.STRING - 221)) | (1 << (bitmarkParser.NOTBITMARK - 221)) | (1 << (bitmarkParser.ELIPSIS - 221)) | (1 << (bitmarkParser.SENTENCE - 221)) | (1 << (bitmarkParser.BARSTRING - 221)) | (1 << (bitmarkParser.AtProgress - 221)) | (1 << (bitmarkParser.AtReference - 221)) | (1 << (bitmarkParser.AtProgressPoints - 221)) | (1 << (bitmarkParser.AtExampleWithStr - 221)) | (1 << (bitmarkParser.AtExamplecol - 221)) | (1 << (bitmarkParser.AtExamplecl - 221)) | (1 << (bitmarkParser.AtSampleSolution - 221)) | (1 << (bitmarkParser.AtPartialAnswerS - 221)) | (1 << (bitmarkParser.AtPartialAnswer - 221)) | (1 << (bitmarkParser.AtLabeltrue - 221)) | (1 << (bitmarkParser.AtLabelfalse - 221)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.OpAtCopyright - 258)) | (1 << (bitmarkParser.OpAtIsTracked - 258)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 258)) | (1 << (bitmarkParser.AtDate - 258)) | (1 << (bitmarkParser.AmpAudio - 258)) | (1 << (bitmarkParser.AmpImage - 258)) | (1 << (bitmarkParser.AmpVideo - 258)) | (1 << (bitmarkParser.AmpArticle - 258)) | (1 << (bitmarkParser.AmpDocument - 258)) | (1 << (bitmarkParser.AmpApp - 258)) | (1 << (bitmarkParser.AmpWebsite - 258)) | (1 << (bitmarkParser.AmpStillImageFilm - 258)) | (1 << (bitmarkParser.OpAmpAudio - 258)) | (1 << (bitmarkParser.OpAmpImage - 258)) | (1 << (bitmarkParser.OpAmpImageZoom - 258)) | (1 << (bitmarkParser.OpAmpVideo - 258)) | (1 << (bitmarkParser.OpAmpArticle - 258)) | (1 << (bitmarkParser.OpAmpDocument - 258)) | (1 << (bitmarkParser.OpAmpApp - 258)) | (1 << (bitmarkParser.OpAmpWebsite - 258)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 258)) | (1 << (bitmarkParser.BracEnclose - 258)) | (1 << (bitmarkParser.AmpAudioLink - 258)) | (1 << (bitmarkParser.AmpImageLink - 258)) | (1 << (bitmarkParser.AmpVideoLink - 258)) | (1 << (bitmarkParser.AmpArticleLink - 258)))) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (bitmarkParser.AmpDocumentLink - 290)) | (1 << (bitmarkParser.AmpAppLink - 290)) | (1 << (bitmarkParser.AmpWebsiteLink - 290)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 290)) | (1 << (bitmarkParser.OpAmpAudioLink - 290)) | (1 << (bitmarkParser.OpAmpImageLink - 290)) | (1 << (bitmarkParser.OpAmpVideoLink - 290)) | (1 << (bitmarkParser.OpAmpArticleLink - 290)) | (1 << (bitmarkParser.OpAmpDocumentLink - 290)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 290)) | (1 << (bitmarkParser.OpAmpAppLink - 290)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 290)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 290)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 290)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 290)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 290)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 290)) | (1 << (bitmarkParser.BitmarkMinus - 290)) | (1 << (bitmarkParser.BitmarkPlus - 290)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
				{
				{
				this.state = 1389;
				this.bitElem();
				this.state = 1393;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 1390;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 1395;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1400;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1402;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1401;
					this.bot_action();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1404;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 105, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1406;
			this.match(bitmarkParser.HSPL);
			this.state = 1408;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 106, this._ctx) ) {
			case 1:
				{
				this.state = 1407;
				this.footer();
				}
				break;
			}
			this.state = 1413;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 107, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1410;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1415;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 107, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_rating_stars(): Bot_action_rating_starsContext {
		let _localctx: Bot_action_rating_starsContext = new Bot_action_rating_starsContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, bitmarkParser.RULE_bot_action_rating_stars);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1416;
			this.match(bitmarkParser.BitBotActionRatingStars);
			this.state = 1417;
			this.format();
			this.state = 1418;
			this.match(bitmarkParser.CL);
			this.state = 1422;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1419;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1424;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
			}
			this.state = 1434;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 110, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1425;
					this.bitElem();
					this.state = 1429;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1426;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1431;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
					}
					}
					}
				}
				this.state = 1436;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 110, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action(): Bot_actionContext {
		let _localctx: Bot_actionContext = new Bot_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, bitmarkParser.RULE_bot_action);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1437;
			this.match(bitmarkParser.HSPL);
			this.state = 1438;
			this.bo_actions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bo_actions(): Bo_actionsContext {
		let _localctx: Bo_actionsContext = new Bo_actionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, bitmarkParser.RULE_bo_actions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1453;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 1440;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 1445;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1446;
				this.boacts();
				this.state = 1450;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 112, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1447;
						this.match(bitmarkParser.NL);
						}
						}
					}
					this.state = 1452;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 112, this._ctx);
				}
				}
				}
				this.state = 1455;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (bitmarkParser.OPB - 195)) | (1 << (bitmarkParser.OPQ - 195)) | (1 << (bitmarkParser.OPA - 195)) | (1 << (bitmarkParser.OPP - 195)) | (1 << (bitmarkParser.OPM - 195)) | (1 << (bitmarkParser.OPS - 195)) | (1 << (bitmarkParser.OPC - 195)) | (1 << (bitmarkParser.COLON - 195)) | (1 << (bitmarkParser.AMP - 195)) | (1 << (bitmarkParser.Greater - 195)) | (1 << (bitmarkParser.Less - 195)) | (1 << (bitmarkParser.RightAngle - 195)) | (1 << (bitmarkParser.RightArrow - 195)) | (1 << (bitmarkParser.DBLEQ - 195)) | (1 << (bitmarkParser.QUOTE_INDEX - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (bitmarkParser.NUMERIC - 227)) | (1 << (bitmarkParser.STRING - 227)) | (1 << (bitmarkParser.NL - 227)) | (1 << (bitmarkParser.NOTBITMARK - 227)) | (1 << (bitmarkParser.ELIPSIS - 227)) | (1 << (bitmarkParser.SENTENCE - 227)) | (1 << (bitmarkParser.BARSTRING - 227)) | (1 << (bitmarkParser.AtSampleSolution - 227)) | (1 << (bitmarkParser.OpAtCopyright - 227)))) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)) | (1 << (bitmarkParser.ENCLBARS - 314)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public boacts(): BoactsContext {
		let _localctx: BoactsContext = new BoactsContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, bitmarkParser.RULE_boacts);
		try {
			this.state = 1464;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 114, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1457;
				this.instruction();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1458;
				this.item();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1459;
				this.atdef();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1460;
				this.hint();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1461;
				this.choice_minus();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1462;
				this.choice_plus();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1463;
				this.feedback();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public feedback(): FeedbackContext {
		let _localctx: FeedbackContext = new FeedbackContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, bitmarkParser.RULE_feedback);
		try {
			this.state = 1468;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.ENCLBARS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1466;
				this.match(bitmarkParser.ENCLBARS);
				}
				break;
			case bitmarkParser.S:
			case bitmarkParser.OPS:
			case bitmarkParser.COLON:
			case bitmarkParser.AMP:
			case bitmarkParser.Greater:
			case bitmarkParser.Less:
			case bitmarkParser.RightAngle:
			case bitmarkParser.RightArrow:
			case bitmarkParser.DBLEQ:
			case bitmarkParser.QUOTE_INDEX:
			case bitmarkParser.NUMERIC:
			case bitmarkParser.STRING:
			case bitmarkParser.NOTBITMARK:
			case bitmarkParser.ELIPSIS:
			case bitmarkParser.SENTENCE:
			case bitmarkParser.BARSTRING:
			case bitmarkParser.AmpAudio:
			case bitmarkParser.AmpImage:
			case bitmarkParser.AmpVideo:
			case bitmarkParser.AmpArticle:
			case bitmarkParser.AmpDocument:
			case bitmarkParser.AmpApp:
			case bitmarkParser.AmpWebsite:
			case bitmarkParser.AmpStillImageFilm:
			case bitmarkParser.AmpAudioLink:
			case bitmarkParser.AmpImageLink:
			case bitmarkParser.AmpVideoLink:
			case bitmarkParser.AmpArticleLink:
			case bitmarkParser.AmpDocumentLink:
			case bitmarkParser.AmpAppLink:
			case bitmarkParser.AmpWebsiteLink:
			case bitmarkParser.AmpStillImageFilmLink:
			case bitmarkParser.BitmarkMinus:
			case bitmarkParser.BitmarkPlus:
			case bitmarkParser.URL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1467;
				this.s_and_w();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footer(): FooterContext {
		let _localctx: FooterContext = new FooterContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, bitmarkParser.RULE_footer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1477;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1473;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 1470;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 1475;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1476;
					this.s_and_w();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1479;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bitElem(): BitElemContext {
		let _localctx: BitElemContext = new BitElemContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, bitmarkParser.RULE_bitElem);
		try {
			this.state = 1513;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 118, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1481;
				this.match(bitmarkParser.LIST_LINE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1482;
				this.match(bitmarkParser.NOTBITMARK);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1483;
				this.dclines();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1484;
				this.gap();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1485;
				this.reference();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1486;
				this.dateprop();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1487;
				this.progress();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1488;
				this.atdef();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1489;
				this.dollarans();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1490;
				this.partans();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1491;
				this.item();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1492;
				this.title();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1493;
				this.instruction();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1494;
				this.hint();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1495;
				this.s_and_w();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1496;
				this.example();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1497;
				this.bool_label();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1498;
				this.progress_points();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1499;
				this.istracked();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1500;
				this.isinfoonly();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1501;
				this.imagebit();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1502;
				this.audiobit();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1503;
				this.videobit();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1504;
				this.articlebit();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1505;
				this.documentbit();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1506;
				this.appbit();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1507;
				this.websitebit();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 1508;
				this.stillimagefilmbit();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 1509;
				this.angleref();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 1510;
				this.anchor();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 1511;
				this.bracketed_text();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 1512;
				this.sp();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public gap(): GapContext {
		let _localctx: GapContext = new GapContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, bitmarkParser.RULE_gap);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1515;
			this.single_gap();
			this.state = 1523;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 1521;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.OPU:
						{
						this.state = 1516;
						this.single_gap();
						}
						break;
					case bitmarkParser.OPB:
						{
						this.state = 1517;
						this.instruction();
						}
						break;
					case bitmarkParser.OPQ:
						{
						this.state = 1518;
						this.hint();
						}
						break;
					case bitmarkParser.OPC:
						{
						this.state = 1519;
						this.item();
						}
						break;
					case bitmarkParser.AtExampleWithStr:
					case bitmarkParser.AtExamplecol:
					case bitmarkParser.AtExamplecl:
						{
						this.state = 1520;
						this.example();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 1525;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public single_gap(): Single_gapContext {
		let _localctx: Single_gapContext = new Single_gapContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, bitmarkParser.RULE_single_gap);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1526;
			this.match(bitmarkParser.OPU);
			this.state = 1530;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 121, this._ctx) ) {
			case 1:
				{
				this.state = 1527;
				this.match(bitmarkParser.NUMERIC);
				}
				break;

			case 2:
				{
				this.state = 1528;
				this.match(bitmarkParser.STRING);
				}
				break;

			case 3:
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
			this.state = 1535;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
				{
				{
				this.state = 1532;
				this.s_and_w();
				}
				}
				this.state = 1537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1538;
			this.clnsp();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public choice_plus(): Choice_plusContext {
		let _localctx: Choice_plusContext = new Choice_plusContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, bitmarkParser.RULE_choice_plus);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1541;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPC) {
				{
				this.state = 1540;
				this.item();
				}
			}

			this.state = 1543;
			this.match(bitmarkParser.OPP);
			this.state = 1545;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1544;
				this.s_and_w();
				}
				}
				this.state = 1547;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
			this.state = 1549;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public choice_minus(): Choice_minusContext {
		let _localctx: Choice_minusContext = new Choice_minusContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, bitmarkParser.RULE_choice_minus);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1552;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPC) {
				{
				this.state = 1551;
				this.item();
				}
			}

			this.state = 1554;
			this.match(bitmarkParser.OPM);
			this.state = 1556;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1555;
				this.s_and_w();
				}
				}
				this.state = 1558;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
			this.state = 1560;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public choice_star(): Choice_starContext {
		let _localctx: Choice_starContext = new Choice_starContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, bitmarkParser.RULE_choice_star);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1563;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPC) {
				{
				this.state = 1562;
				this.item();
				}
			}

			this.state = 1565;
			this.match(bitmarkParser.OPR);
			this.state = 1567;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1566;
				this.s_and_w();
				}
				}
				this.state = 1569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
			this.state = 1571;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public essay(): EssayContext {
		let _localctx: EssayContext = new EssayContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, bitmarkParser.RULE_essay);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1573;
			this.match(bitmarkParser.BitEssay);
			this.state = 1574;
			this.format();
			this.state = 1575;
			this.match(bitmarkParser.CL);
			this.state = 1576;
			this.match(bitmarkParser.NL);
			this.state = 1586;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					{
					this.state = 1577;
					this.bitElem();
					}
					this.state = 1581;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1578;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1583;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);
					}
					}
					}
				}
				this.state = 1588;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
			}
			this.state = 1598;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1592;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 1589;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 1594;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					{
					this.state = 1595;
					this.ml_example();
					}
					}
					}
				}
				this.state = 1600;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
			}
			this.state = 1604;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 133, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1601;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1606;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 133, this._ctx);
			}
			this.state = 1620;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 136, this._ctx) ) {
			case 1:
				{
				this.state = 1607;
				this.resource();
				this.state = 1617;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 135, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1611;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1608;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1613;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1614;
						this.resource();
						}
						}
					}
					this.state = 1619;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 135, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ml_example(): Ml_exampleContext {
		let _localctx: Ml_exampleContext = new Ml_exampleContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, bitmarkParser.RULE_ml_example);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1622;
			this.match(bitmarkParser.AtExamplecol);
			this.state = 1630;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
				{
				this.state = 1624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.NL) {
					{
					this.state = 1623;
					this.match(bitmarkParser.NL);
					}
				}

				this.state = 1626;
				this.lines();
				this.state = 1628;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.NL) {
					{
					this.state = 1627;
					this.match(bitmarkParser.NL);
					}
				}

				}
			}

			this.state = 1632;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partans(): PartansContext {
		let _localctx: PartansContext = new PartansContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, bitmarkParser.RULE_partans);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1634;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AtPartialAnswerS || _la === bitmarkParser.AtPartialAnswer)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resource(): ResourceContext {
		let _localctx: ResourceContext = new ResourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, bitmarkParser.RULE_resource);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1636;
			this.bitElem();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public correction(): CorrectionContext {
		let _localctx: CorrectionContext = new CorrectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, bitmarkParser.RULE_correction);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1638;
			this.match(bitmarkParser.BitCorrection);
			this.state = 1639;
			this.format();
			this.state = 1640;
			this.match(bitmarkParser.CL);
			this.state = 1641;
			this.match(bitmarkParser.NL);
			this.state = 1651;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1642;
					this.bitElem();
					this.state = 1646;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1643;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1648;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
					}
					}
					}
				}
				this.state = 1653;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
			}
			this.state = 1657;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.OPP || _la === bitmarkParser.OPM) {
				{
				{
				this.state = 1654;
				this.corrs();
				}
				}
				this.state = 1659;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1663;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1660;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1665;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
			}
			this.state = 1679;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 146, this._ctx) ) {
			case 1:
				{
				this.state = 1666;
				this.resource();
				this.state = 1676;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 145, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1670;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1667;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1672;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1673;
						this.resource();
						}
						}
					}
					this.state = 1678;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 145, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public corrs(): CorrsContext {
		let _localctx: CorrsContext = new CorrsContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, bitmarkParser.RULE_corrs);
		try {
			let _alt: number;
			this.state = 1699;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OPM:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1681;
				this.match(bitmarkParser.OPM);
				this.state = 1685;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 147, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 1682;
						this.matchWildcard();
						}
						}
					}
					this.state = 1687;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 147, this._ctx);
				}
				this.state = 1688;
				this.match(bitmarkParser.CL);
				this.state = 1689;
				this.match(bitmarkParser.NL);
				}
				break;
			case bitmarkParser.OPP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1690;
				this.match(bitmarkParser.OPP);
				this.state = 1694;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 1691;
						this.matchWildcard();
						}
						}
					}
					this.state = 1696;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
				}
				this.state = 1697;
				this.match(bitmarkParser.CL);
				this.state = 1698;
				this.match(bitmarkParser.NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mark_(): Mark_Context {
		let _localctx: Mark_Context = new Mark_Context(this._ctx, this.state);
		this.enterRule(_localctx, 106, bitmarkParser.RULE_mark_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1701;
			this.match(bitmarkParser.BitMark);
			this.state = 1702;
			this.format();
			this.state = 1703;
			this.match(bitmarkParser.CL);
			this.state = 1704;
			this.match(bitmarkParser.NL);
			this.state = 1717;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1707;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 150, this._ctx) ) {
					case 1:
						{
						this.state = 1705;
						this.bitElem();
						}
						break;

					case 2:
						{
						this.state = 1706;
						this.mark_text();
						}
						break;
					}
					this.state = 1712;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1709;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1714;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
					}
					}
					}
				}
				this.state = 1719;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
			}
			this.state = 1723;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 153, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1720;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1725;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 153, this._ctx);
			}
			this.state = 1739;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 156, this._ctx) ) {
			case 1:
				{
				this.state = 1726;
				this.resource();
				this.state = 1736;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 155, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1730;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1727;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1732;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1733;
						this.resource();
						}
						}
					}
					this.state = 1738;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 155, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mark_text(): Mark_textContext {
		let _localctx: Mark_textContext = new Mark_textContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, bitmarkParser.RULE_mark_text);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1741;
			this.match(bitmarkParser.OPS);
			this.state = 1742;
			this.s_and_w();
			this.state = 1743;
			this.match(bitmarkParser.CL);
			this.state = 1745;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPAMARK) {
				{
				this.state = 1744;
				this.mark_color();
				}
			}

			this.state = 1752;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 1750;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.OPQ:
						{
						this.state = 1747;
						this.hint();
						}
						break;
					case bitmarkParser.OPC:
						{
						this.state = 1748;
						this.item();
						}
						break;
					case bitmarkParser.OPB:
						{
						this.state = 1749;
						this.instruction();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 1754;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mark_color(): Mark_colorContext {
		let _localctx: Mark_colorContext = new Mark_colorContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, bitmarkParser.RULE_mark_color);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1755;
			this.match(bitmarkParser.OPAMARK);
			this.state = 1759;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S) {
				{
				{
				this.state = 1756;
				this.match(bitmarkParser.S);
				}
				}
				this.state = 1761;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1762;
			this.match(bitmarkParser.STRING);
			this.state = 1766;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S) {
				{
				{
				this.state = 1763;
				this.match(bitmarkParser.S);
				}
				}
				this.state = 1768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1769;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public take_audio(): Take_audioContext {
		let _localctx: Take_audioContext = new Take_audioContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, bitmarkParser.RULE_take_audio);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1771;
			this.match(bitmarkParser.BitTakeAudio);
			this.state = 1772;
			this.format();
			this.state = 1773;
			this.match(bitmarkParser.CL);
			this.state = 1774;
			this.match(bitmarkParser.NL);
			this.state = 1784;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1775;
					this.bitElem();
					this.state = 1779;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1776;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1781;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
					}
					}
					}
				}
				this.state = 1786;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
			}
			this.state = 1790;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1787;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1792;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
			}
			this.state = 1806;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 167, this._ctx) ) {
			case 1:
				{
				this.state = 1793;
				this.resource();
				this.state = 1803;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1797;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1794;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1799;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1800;
						this.resource();
						}
						}
					}
					this.state = 1805;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public take_picture(): Take_pictureContext {
		let _localctx: Take_pictureContext = new Take_pictureContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, bitmarkParser.RULE_take_picture);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1808;
			this.match(bitmarkParser.BitTakepic);
			this.state = 1809;
			this.format();
			this.state = 1810;
			this.match(bitmarkParser.CL);
			this.state = 1811;
			this.match(bitmarkParser.NL);
			this.state = 1821;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1812;
					this.bitElem();
					this.state = 1816;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1813;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1818;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
					}
					}
					}
				}
				this.state = 1823;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
			}
			this.state = 1827;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1824;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1829;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
			}
			this.state = 1843;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 173, this._ctx) ) {
			case 1:
				{
				this.state = 1830;
				this.resource();
				this.state = 1840;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 172, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1834;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1831;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1836;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1837;
						this.resource();
						}
						}
					}
					this.state = 1842;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 172, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_audio(): Record_audioContext {
		let _localctx: Record_audioContext = new Record_audioContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, bitmarkParser.RULE_record_audio);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1845;
			this.match(bitmarkParser.BitRecaud);
			this.state = 1846;
			this.format();
			this.state = 1847;
			this.match(bitmarkParser.CL);
			this.state = 1848;
			this.match(bitmarkParser.NL);
			this.state = 1858;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1849;
					this.bitElem();
					this.state = 1853;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 174, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1850;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1855;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 174, this._ctx);
					}
					}
					}
				}
				this.state = 1860;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
			}
			this.state = 1864;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 176, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1861;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1866;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 176, this._ctx);
			}
			this.state = 1880;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 179, this._ctx) ) {
			case 1:
				{
				this.state = 1867;
				this.resource();
				this.state = 1877;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1871;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1868;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1873;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1874;
						this.resource();
						}
						}
					}
					this.state = 1879;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preparation_note(): Preparation_noteContext {
		let _localctx: Preparation_noteContext = new Preparation_noteContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, bitmarkParser.RULE_preparation_note);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1882;
			this.match(bitmarkParser.BitPrepnote);
			this.state = 1883;
			this.format();
			this.state = 1884;
			this.match(bitmarkParser.CL);
			this.state = 1888;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 180, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1885;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1890;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 180, this._ctx);
			}
			this.state = 1900;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 182, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1891;
					this.bitElem();
					this.state = 1895;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1892;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1897;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
					}
					}
					}
				}
				this.state = 1902;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 182, this._ctx);
			}
			this.state = 1904;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 183, this._ctx) ) {
			case 1:
				{
				this.state = 1903;
				this.lines();
				}
				break;
			}
			this.state = 1909;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 184, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1906;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1911;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 184, this._ctx);
			}
			this.state = 1925;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				{
				this.state = 1912;
				this.resource();
				this.state = 1922;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1916;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1913;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1918;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1919;
						this.resource();
						}
						}
					}
					this.state = 1924;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignment(): AssignmentContext {
		let _localctx: AssignmentContext = new AssignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, bitmarkParser.RULE_assignment);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1927;
			this.match(bitmarkParser.BitAssign);
			this.state = 1928;
			this.format();
			this.state = 1929;
			this.match(bitmarkParser.CL);
			this.state = 1931;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1930;
					this.match(bitmarkParser.NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1933;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1944;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1935;
					this.bitElem();
					this.state = 1939;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1936;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1941;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
					}
					}
					}
				}
				this.state = 1946;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
			}
			this.state = 1948;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 191, this._ctx) ) {
			case 1:
				{
				this.state = 1947;
				this.lines();
				}
				break;
			}
			this.state = 1953;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1950;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1955;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
			}
			this.state = 1969;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 195, this._ctx) ) {
			case 1:
				{
				this.state = 1956;
				this.resource();
				this.state = 1966;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 194, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1960;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1957;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1962;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1963;
						this.resource();
						}
						}
					}
					this.state = 1968;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 194, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public article(): ArticleContext {
		let _localctx: ArticleContext = new ArticleContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, bitmarkParser.RULE_article);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1971;
			this.match(bitmarkParser.BitArticle);
			this.state = 1972;
			this.format();
			this.state = 1973;
			this.match(bitmarkParser.CL);
			this.state = 1977;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 196, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1974;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1979;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 196, this._ctx);
			}
			this.state = 1989;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1980;
					this.bitElem();
					this.state = 1984;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1981;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1986;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
					}
					}
					}
				}
				this.state = 1991;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, bitmarkParser.RULE_statement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1992;
			this.match(bitmarkParser.BitStatement);
			this.state = 1993;
			this.format();
			this.state = 1994;
			this.match(bitmarkParser.CL);
			this.state = 1998;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 199, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1995;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2000;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 199, this._ctx);
			}
			this.state = 2010;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2001;
					this.bitElem();
					this.state = 2005;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 200, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2002;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2007;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 200, this._ctx);
					}
					}
					}
				}
				this.state = 2012;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public details(): DetailsContext {
		let _localctx: DetailsContext = new DetailsContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, bitmarkParser.RULE_details);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2013;
			this.match(bitmarkParser.BitDetails);
			this.state = 2014;
			this.format();
			this.state = 2015;
			this.match(bitmarkParser.CL);
			this.state = 2019;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2016;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2021;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
			}
			this.state = 2031;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2022;
					this.bitElem();
					this.state = 2026;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2023;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2028;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
					}
					}
					}
				}
				this.state = 2033;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sample_solution(): Sample_solutionContext {
		let _localctx: Sample_solutionContext = new Sample_solutionContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, bitmarkParser.RULE_sample_solution);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2034;
			this.match(bitmarkParser.BitSampleSolution);
			this.state = 2035;
			this.format();
			this.state = 2036;
			this.match(bitmarkParser.CL);
			this.state = 2040;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 205, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2037;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2042;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 205, this._ctx);
			}
			this.state = 2052;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2043;
					this.bitElem();
					this.state = 2047;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2044;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2049;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
					}
					}
					}
				}
				this.state = 2054;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public buttoncopytext(): ButtoncopytextContext {
		let _localctx: ButtoncopytextContext = new ButtoncopytextContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, bitmarkParser.RULE_buttoncopytext);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2055;
			this.match(bitmarkParser.BitButtonCopytext);
			this.state = 2056;
			this.format();
			this.state = 2057;
			this.match(bitmarkParser.CL);
			this.state = 2061;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 208, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2058;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2063;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 208, this._ctx);
			}
			this.state = 2073;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 210, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2064;
					this.bitElem();
					this.state = 2068;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2065;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2070;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
					}
					}
					}
				}
				this.state = 2075;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 210, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public wbtcontinue(): WbtcontinueContext {
		let _localctx: WbtcontinueContext = new WbtcontinueContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, bitmarkParser.RULE_wbtcontinue);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2076;
			this.match(bitmarkParser.BitWbtContinue);
			this.state = 2077;
			this.format();
			this.state = 2078;
			this.match(bitmarkParser.CL);
			this.state = 2082;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2079;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2084;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
			}
			this.state = 2094;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2085;
					this.bitElem();
					this.state = 2089;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 212, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2086;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2091;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 212, this._ctx);
					}
					}
					}
				}
				this.state = 2096;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learningpathdetails(): LearningpathdetailsContext {
		let _localctx: LearningpathdetailsContext = new LearningpathdetailsContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, bitmarkParser.RULE_learningpathdetails);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2097;
			this.match(bitmarkParser.BitLearningPathDetails);
			this.state = 2098;
			this.format();
			this.state = 2099;
			this.match(bitmarkParser.CL);
			this.state = 2103;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 214, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2100;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2105;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 214, this._ctx);
			}
			this.state = 2115;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2106;
					this.bitElem();
					this.state = 2110;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2107;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2112;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
					}
					}
					}
				}
				this.state = 2117;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page(): PageContext {
		let _localctx: PageContext = new PageContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, bitmarkParser.RULE_page);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2118;
			this.match(bitmarkParser.BitPage);
			this.state = 2119;
			this.format();
			this.state = 2120;
			this.match(bitmarkParser.CL);
			this.state = 2124;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 217, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2121;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2126;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 217, this._ctx);
			}
			this.state = 2136;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2127;
					this.bitElem();
					this.state = 2131;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 218, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2128;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2133;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 218, this._ctx);
					}
					}
					}
				}
				this.state = 2138;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public note(): NoteContext {
		let _localctx: NoteContext = new NoteContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, bitmarkParser.RULE_note);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2139;
			this.match(bitmarkParser.BitNote);
			this.state = 2140;
			this.format();
			this.state = 2141;
			this.match(bitmarkParser.CL);
			this.state = 2145;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 220, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2142;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2147;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 220, this._ctx);
			}
			this.state = 2157;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2148;
					this.bitElem();
					this.state = 2152;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 221, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2149;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2154;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 221, this._ctx);
					}
					}
					}
				}
				this.state = 2159;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public info(): InfoContext {
		let _localctx: InfoContext = new InfoContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, bitmarkParser.RULE_info);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2160;
			this.match(bitmarkParser.BitInfo);
			this.state = 2161;
			this.format();
			this.state = 2162;
			this.match(bitmarkParser.CL);
			this.state = 2166;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 223, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2163;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2168;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 223, this._ctx);
			}
			this.state = 2178;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2169;
					this.bitElem();
					this.state = 2173;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 224, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2170;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2175;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 224, this._ctx);
					}
					}
					}
				}
				this.state = 2180;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public warning(): WarningContext {
		let _localctx: WarningContext = new WarningContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, bitmarkParser.RULE_warning);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2181;
			this.match(bitmarkParser.BitWarning);
			this.state = 2182;
			this.format();
			this.state = 2183;
			this.match(bitmarkParser.CL);
			this.state = 2187;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2184;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2189;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
			}
			this.state = 2199;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2190;
					this.bitElem();
					this.state = 2194;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 227, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2191;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2196;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 227, this._ctx);
					}
					}
					}
				}
				this.state = 2201;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public remark(): RemarkContext {
		let _localctx: RemarkContext = new RemarkContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, bitmarkParser.RULE_remark);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2202;
			this.match(bitmarkParser.BitRemark);
			this.state = 2203;
			this.format();
			this.state = 2204;
			this.match(bitmarkParser.CL);
			this.state = 2208;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2205;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2210;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
			}
			this.state = 2220;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2211;
					this.bitElem();
					this.state = 2215;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 230, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2212;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2217;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 230, this._ctx);
					}
					}
					}
				}
				this.state = 2222;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public help(): HelpContext {
		let _localctx: HelpContext = new HelpContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, bitmarkParser.RULE_help);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2223;
			this.match(bitmarkParser.BitHelp);
			this.state = 2224;
			this.format();
			this.state = 2225;
			this.match(bitmarkParser.CL);
			this.state = 2229;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2226;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2231;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
			}
			this.state = 2241;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2232;
					this.bitElem();
					this.state = 2236;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2233;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2238;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
					}
					}
					}
				}
				this.state = 2243;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public danger(): DangerContext {
		let _localctx: DangerContext = new DangerContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, bitmarkParser.RULE_danger);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2244;
			this.match(bitmarkParser.BitDanger);
			this.state = 2245;
			this.format();
			this.state = 2246;
			this.match(bitmarkParser.CL);
			this.state = 2250;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2247;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2252;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
			}
			this.state = 2262;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2253;
					this.bitElem();
					this.state = 2257;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2254;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2259;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
					}
					}
					}
				}
				this.state = 2264;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bug(): BugContext {
		let _localctx: BugContext = new BugContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, bitmarkParser.RULE_bug);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2265;
			this.match(bitmarkParser.BitBug);
			this.state = 2266;
			this.format();
			this.state = 2267;
			this.match(bitmarkParser.CL);
			this.state = 2271;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 238, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2268;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2273;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 238, this._ctx);
			}
			this.state = 2283;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 240, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2274;
					this.bitElem();
					this.state = 2278;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2275;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2280;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);
					}
					}
					}
				}
				this.state = 2285;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 240, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sidenote(): SidenoteContext {
		let _localctx: SidenoteContext = new SidenoteContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, bitmarkParser.RULE_sidenote);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2286;
			this.match(bitmarkParser.BitSidenote);
			this.state = 2287;
			this.format();
			this.state = 2288;
			this.match(bitmarkParser.CL);
			this.state = 2292;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2289;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2294;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
			}
			this.state = 2304;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2295;
					this.bitElem();
					this.state = 2299;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2296;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2301;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
					}
					}
					}
				}
				this.state = 2306;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stickynote(): StickynoteContext {
		let _localctx: StickynoteContext = new StickynoteContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, bitmarkParser.RULE_stickynote);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2307;
			this.match(bitmarkParser.BitStickynote);
			this.state = 2308;
			this.format();
			this.state = 2309;
			this.match(bitmarkParser.CL);
			this.state = 2313;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2310;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2315;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
			}
			this.state = 2325;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2316;
					this.bitElem();
					this.state = 2320;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2317;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2322;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
					}
					}
					}
				}
				this.state = 2327;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public quote(): QuoteContext {
		let _localctx: QuoteContext = new QuoteContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, bitmarkParser.RULE_quote);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2328;
			this.match(bitmarkParser.BitQuote);
			this.state = 2329;
			this.format();
			this.state = 2330;
			this.match(bitmarkParser.CL);
			this.state = 2334;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 247, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2331;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2336;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 247, this._ctx);
			}
			this.state = 2346;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2337;
					this.bitElem();
					this.state = 2341;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2338;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2343;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);
					}
					}
					}
				}
				this.state = 2348;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footnote(): FootnoteContext {
		let _localctx: FootnoteContext = new FootnoteContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, bitmarkParser.RULE_footnote);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2349;
			this.match(bitmarkParser.BitFootnote);
			this.state = 2350;
			this.format();
			this.state = 2351;
			this.match(bitmarkParser.CL);
			this.state = 2355;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 250, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2352;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2357;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 250, this._ctx);
			}
			this.state = 2367;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2358;
					this.bitElem();
					this.state = 2362;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2359;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2364;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);
					}
					}
					}
				}
				this.state = 2369;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hintbit(): HintbitContext {
		let _localctx: HintbitContext = new HintbitContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, bitmarkParser.RULE_hintbit);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2370;
			this.match(bitmarkParser.BitHint);
			this.state = 2371;
			this.format();
			this.state = 2372;
			this.match(bitmarkParser.CL);
			this.state = 2376;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 253, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2373;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2378;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 253, this._ctx);
			}
			this.state = 2388;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2379;
					this.bitElem();
					this.state = 2383;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 254, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2380;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2385;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 254, this._ctx);
					}
					}
					}
				}
				this.state = 2390;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public examplebit(): ExamplebitContext {
		let _localctx: ExamplebitContext = new ExamplebitContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, bitmarkParser.RULE_examplebit);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2391;
			this.match(bitmarkParser.BitExample);
			this.state = 2392;
			this.format();
			this.state = 2393;
			this.match(bitmarkParser.CL);
			this.state = 2397;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2394;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2399;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
			}
			this.state = 2409;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2400;
					this.bitElem();
					this.state = 2404;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2401;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2406;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
					}
					}
					}
				}
				this.state = 2411;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vendor_padlet_embed(): Vendor_padlet_embedContext {
		let _localctx: Vendor_padlet_embedContext = new Vendor_padlet_embedContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, bitmarkParser.RULE_vendor_padlet_embed);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2412;
			this.match(bitmarkParser.BitVendorPadletEmbed);
			this.state = 2413;
			this.format();
			this.state = 2414;
			this.match(bitmarkParser.CL);
			this.state = 2418;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2415;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2420;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
			}
			this.state = 2430;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2421;
					this.bitElem();
					this.state = 2425;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 260, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2422;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2427;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 260, this._ctx);
					}
					}
					}
				}
				this.state = 2432;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scorm(): ScormContext {
		let _localctx: ScormContext = new ScormContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, bitmarkParser.RULE_scorm);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2433;
			this.match(bitmarkParser.BitScorm);
			this.state = 2434;
			this.format();
			this.state = 2435;
			this.match(bitmarkParser.CL);
			this.state = 2439;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2436;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2441;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);
			}
			this.state = 2451;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2442;
					this.bitElem();
					this.state = 2446;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2443;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2448;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
					}
					}
					}
				}
				this.state = 2453;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_image(): Bit_imageContext {
		let _localctx: Bit_imageContext = new Bit_imageContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, bitmarkParser.RULE_bit_image);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2454;
			this.match(bitmarkParser.BitImage);
			this.state = 2455;
			this.format2();
			this.state = 2456;
			this.match(bitmarkParser.CL);
			this.state = 2460;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 265, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2457;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2462;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 265, this._ctx);
			}
			this.state = 2472;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 267, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2463;
					this.bitElem();
					this.state = 2467;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 266, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2464;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2469;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 266, this._ctx);
					}
					}
					}
				}
				this.state = 2474;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 267, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_imageLink(): Bit_imageLinkContext {
		let _localctx: Bit_imageLinkContext = new Bit_imageLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, bitmarkParser.RULE_bit_imageLink);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2475;
			this.match(bitmarkParser.BitImageLink);
			this.state = 2476;
			this.format2();
			this.state = 2477;
			this.match(bitmarkParser.CL);
			this.state = 2481;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2478;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2483;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
			}
			this.state = 2493;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 270, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2484;
					this.bitElem();
					this.state = 2488;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 269, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2485;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2490;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 269, this._ctx);
					}
					}
					}
				}
				this.state = 2495;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 270, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_imageZoom(): Bit_imageZoomContext {
		let _localctx: Bit_imageZoomContext = new Bit_imageZoomContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, bitmarkParser.RULE_bit_imageZoom);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2496;
			this.match(bitmarkParser.BitImageZoom);
			this.state = 2497;
			this.format2();
			this.state = 2498;
			this.match(bitmarkParser.CL);
			this.state = 2502;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2499;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2504;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
			}
			this.state = 2514;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 273, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2505;
					this.bitElem();
					this.state = 2509;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 272, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2506;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2511;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 272, this._ctx);
					}
					}
					}
				}
				this.state = 2516;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 273, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_imagePrototype(): Bit_imagePrototypeContext {
		let _localctx: Bit_imagePrototypeContext = new Bit_imagePrototypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, bitmarkParser.RULE_bit_imagePrototype);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2517;
			this.match(bitmarkParser.BitImagePrototype);
			this.state = 2518;
			this.format2();
			this.state = 2519;
			this.match(bitmarkParser.CL);
			this.state = 2523;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2520;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2525;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
			}
			this.state = 2535;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 276, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2526;
					this.bitElem();
					this.state = 2530;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 275, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2527;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2532;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 275, this._ctx);
					}
					}
					}
				}
				this.state = 2537;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 276, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_imageSuperWide(): Bit_imageSuperWideContext {
		let _localctx: Bit_imageSuperWideContext = new Bit_imageSuperWideContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, bitmarkParser.RULE_bit_imageSuperWide);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2538;
			this.match(bitmarkParser.BitImageSuperWide);
			this.state = 2539;
			this.format2();
			this.state = 2540;
			this.match(bitmarkParser.CL);
			this.state = 2544;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2541;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2546;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
			}
			this.state = 2556;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 279, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2547;
					this.bitElem();
					this.state = 2551;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2548;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2553;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
					}
					}
					}
				}
				this.state = 2558;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 279, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_audio(): Bit_audioContext {
		let _localctx: Bit_audioContext = new Bit_audioContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, bitmarkParser.RULE_bit_audio);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2559;
			this.match(bitmarkParser.BitAudio);
			this.state = 2560;
			this.format2();
			this.state = 2561;
			this.match(bitmarkParser.CL);
			this.state = 2565;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 280, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2562;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2567;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 280, this._ctx);
			}
			this.state = 2577;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 282, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2568;
					this.bitElem();
					this.state = 2572;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2569;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2574;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
					}
					}
					}
				}
				this.state = 2579;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 282, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_audioLink(): Bit_audioLinkContext {
		let _localctx: Bit_audioLinkContext = new Bit_audioLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, bitmarkParser.RULE_bit_audioLink);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2580;
			this.match(bitmarkParser.BitAudioLink);
			this.state = 2581;
			this.format2();
			this.state = 2582;
			this.match(bitmarkParser.CL);
			this.state = 2586;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2583;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2588;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);
			}
			this.state = 2598;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2589;
					this.bitElem();
					this.state = 2593;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 284, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2590;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2595;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 284, this._ctx);
					}
					}
					}
				}
				this.state = 2600;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_audioEmbed(): Bit_audioEmbedContext {
		let _localctx: Bit_audioEmbedContext = new Bit_audioEmbedContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, bitmarkParser.RULE_bit_audioEmbed);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2601;
			this.match(bitmarkParser.BitAudioEmbed);
			this.state = 2602;
			this.format2();
			this.state = 2603;
			this.match(bitmarkParser.CL);
			this.state = 2607;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2604;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2609;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
			}
			this.state = 2619;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 288, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2610;
					this.bitElem();
					this.state = 2614;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 287, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2611;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2616;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 287, this._ctx);
					}
					}
					}
				}
				this.state = 2621;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 288, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_video(): Bit_videoContext {
		let _localctx: Bit_videoContext = new Bit_videoContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, bitmarkParser.RULE_bit_video);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2622;
			this.match(bitmarkParser.BitVideo);
			this.state = 2623;
			this.format2();
			this.state = 2624;
			this.match(bitmarkParser.CL);
			this.state = 2628;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2625;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2630;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
			}
			this.state = 2640;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2631;
					this.bitElem();
					this.state = 2635;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 290, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2632;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2637;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 290, this._ctx);
					}
					}
					}
				}
				this.state = 2642;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_videoLink(): Bit_videoLinkContext {
		let _localctx: Bit_videoLinkContext = new Bit_videoLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, bitmarkParser.RULE_bit_videoLink);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2643;
			this.match(bitmarkParser.BitVideoLink);
			this.state = 2644;
			this.format2();
			this.state = 2645;
			this.match(bitmarkParser.CL);
			this.state = 2649;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 292, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2646;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2651;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 292, this._ctx);
			}
			this.state = 2661;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2652;
					this.bitElem();
					this.state = 2656;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 293, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2653;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2658;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 293, this._ctx);
					}
					}
					}
				}
				this.state = 2663;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_videoEmbed(): Bit_videoEmbedContext {
		let _localctx: Bit_videoEmbedContext = new Bit_videoEmbedContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, bitmarkParser.RULE_bit_videoEmbed);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2664;
			this.match(bitmarkParser.BitVideoEmbed);
			this.state = 2665;
			this.format2();
			this.state = 2666;
			this.match(bitmarkParser.CL);
			this.state = 2670;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2667;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2672;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);
			}
			this.state = 2682;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2673;
					this.bitElem();
					this.state = 2677;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 296, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2674;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2679;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 296, this._ctx);
					}
					}
					}
				}
				this.state = 2684;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_videoPortrait(): Bit_videoPortraitContext {
		let _localctx: Bit_videoPortraitContext = new Bit_videoPortraitContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, bitmarkParser.RULE_bit_videoPortrait);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2685;
			this.match(bitmarkParser.BitVideoPortrait);
			this.state = 2686;
			this.format2();
			this.state = 2687;
			this.match(bitmarkParser.CL);
			this.state = 2691;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2688;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2693;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
			}
			this.state = 2703;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2694;
					this.bitElem();
					this.state = 2698;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2695;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2700;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
					}
					}
					}
				}
				this.state = 2705;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_videoLandscape(): Bit_videoLandscapeContext {
		let _localctx: Bit_videoLandscapeContext = new Bit_videoLandscapeContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, bitmarkParser.RULE_bit_videoLandscape);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2706;
			this.match(bitmarkParser.BitVideoLandscape);
			this.state = 2707;
			this.format2();
			this.state = 2708;
			this.match(bitmarkParser.CL);
			this.state = 2712;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2709;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2714;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
			}
			this.state = 2724;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2715;
					this.bitElem();
					this.state = 2719;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2716;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2721;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
					}
					}
					}
				}
				this.state = 2726;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_stillImageFilm(): Bit_stillImageFilmContext {
		let _localctx: Bit_stillImageFilmContext = new Bit_stillImageFilmContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, bitmarkParser.RULE_bit_stillImageFilm);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2727;
			this.match(bitmarkParser.BitStillImageFilm);
			this.state = 2728;
			this.format2();
			this.state = 2729;
			this.match(bitmarkParser.CL);
			this.state = 2733;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 304, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2730;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2735;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 304, this._ctx);
			}
			this.state = 2745;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2736;
					this.bitElem();
					this.state = 2740;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2737;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2742;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
					}
					}
					}
				}
				this.state = 2747;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_stillImageFilmLink(): Bit_stillImageFilmLinkContext {
		let _localctx: Bit_stillImageFilmLinkContext = new Bit_stillImageFilmLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, bitmarkParser.RULE_bit_stillImageFilmLink);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2748;
			this.match(bitmarkParser.BitStillImageFilmLink);
			this.state = 2749;
			this.format2();
			this.state = 2750;
			this.match(bitmarkParser.CL);
			this.state = 2754;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2751;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2756;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
			}
			this.state = 2766;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2757;
					this.bitElem();
					this.state = 2761;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2758;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2763;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
					}
					}
					}
				}
				this.state = 2768;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_stillImageFilmEmbed(): Bit_stillImageFilmEmbedContext {
		let _localctx: Bit_stillImageFilmEmbedContext = new Bit_stillImageFilmEmbedContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, bitmarkParser.RULE_bit_stillImageFilmEmbed);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2769;
			this.match(bitmarkParser.BitStillImageFilmEmbed);
			this.state = 2770;
			this.format2();
			this.state = 2771;
			this.match(bitmarkParser.CL);
			this.state = 2775;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 310, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2772;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2777;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 310, this._ctx);
			}
			this.state = 2787;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2778;
					this.bitElem();
					this.state = 2782;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2779;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2784;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);
					}
					}
					}
				}
				this.state = 2789;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_websiteLink(): Bit_websiteLinkContext {
		let _localctx: Bit_websiteLinkContext = new Bit_websiteLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, bitmarkParser.RULE_bit_websiteLink);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2790;
			this.match(bitmarkParser.BitWebsiteLink);
			this.state = 2791;
			this.format2();
			this.state = 2792;
			this.match(bitmarkParser.CL);
			this.state = 2796;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2793;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2798;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
			}
			this.state = 2808;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2799;
					this.bitElem();
					this.state = 2803;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 314, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2800;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2805;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 314, this._ctx);
					}
					}
					}
				}
				this.state = 2810;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_document(): Bit_documentContext {
		let _localctx: Bit_documentContext = new Bit_documentContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, bitmarkParser.RULE_bit_document);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2811;
			this.match(bitmarkParser.BitDocument);
			this.state = 2812;
			this.format2();
			this.state = 2813;
			this.match(bitmarkParser.CL);
			this.state = 2817;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2814;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2819;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
			}
			this.state = 2829;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2820;
					this.bitElem();
					this.state = 2824;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2821;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2826;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
					}
					}
					}
				}
				this.state = 2831;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_documentLink(): Bit_documentLinkContext {
		let _localctx: Bit_documentLinkContext = new Bit_documentLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, bitmarkParser.RULE_bit_documentLink);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2832;
			this.match(bitmarkParser.BitDocumentLink);
			this.state = 2833;
			this.format2();
			this.state = 2834;
			this.match(bitmarkParser.CL);
			this.state = 2838;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2835;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2840;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);
			}
			this.state = 2850;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2841;
					this.bitElem();
					this.state = 2845;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 320, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2842;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2847;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 320, this._ctx);
					}
					}
					}
				}
				this.state = 2852;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_documentEmbed(): Bit_documentEmbedContext {
		let _localctx: Bit_documentEmbedContext = new Bit_documentEmbedContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, bitmarkParser.RULE_bit_documentEmbed);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2853;
			this.match(bitmarkParser.BitDocumentEmbed);
			this.state = 2854;
			this.format2();
			this.state = 2855;
			this.match(bitmarkParser.CL);
			this.state = 2859;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2856;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2861;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
			}
			this.state = 2871;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2862;
					this.bitElem();
					this.state = 2866;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 323, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2863;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2868;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 323, this._ctx);
					}
					}
					}
				}
				this.state = 2873;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_documentDownload(): Bit_documentDownloadContext {
		let _localctx: Bit_documentDownloadContext = new Bit_documentDownloadContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, bitmarkParser.RULE_bit_documentDownload);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2874;
			this.match(bitmarkParser.BitDocumentDownload);
			this.state = 2875;
			this.format2();
			this.state = 2876;
			this.match(bitmarkParser.CL);
			this.state = 2880;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 325, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2877;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2882;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 325, this._ctx);
			}
			this.state = 2892;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2883;
					this.bitElem();
					this.state = 2887;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 326, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2884;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2889;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 326, this._ctx);
					}
					}
					}
				}
				this.state = 2894;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_appLink(): Bit_appLinkContext {
		let _localctx: Bit_appLinkContext = new Bit_appLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, bitmarkParser.RULE_bit_appLink);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2895;
			this.match(bitmarkParser.BitAppLink);
			this.state = 2896;
			this.format2();
			this.state = 2897;
			this.match(bitmarkParser.CL);
			this.state = 2901;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2898;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2903;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
			}
			this.state = 2913;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2904;
					this.bitElem();
					this.state = 2908;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 329, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2905;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2910;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 329, this._ctx);
					}
					}
					}
				}
				this.state = 2915;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_editorial(): Bit_editorialContext {
		let _localctx: Bit_editorialContext = new Bit_editorialContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, bitmarkParser.RULE_bit_editorial);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2916;
			this.match(bitmarkParser.BitEditorial);
			this.state = 2917;
			this.format2();
			this.state = 2918;
			this.match(bitmarkParser.CL);
			this.state = 2922;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 331, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2919;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2924;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 331, this._ctx);
			}
			this.state = 2934;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2925;
					this.bitElem();
					this.state = 2929;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2926;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2931;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
					}
					}
					}
				}
				this.state = 2936;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_frontispiece(): Book_frontispieceContext {
		let _localctx: Book_frontispieceContext = new Book_frontispieceContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, bitmarkParser.RULE_book_frontispiece);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2937;
			this.match(bitmarkParser.BitBookFrontispiece);
			this.state = 2938;
			this.format();
			this.state = 2939;
			this.match(bitmarkParser.CL);
			this.state = 2943;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 334, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2940;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2945;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 334, this._ctx);
			}
			this.state = 2955;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 336, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2946;
					this.bitElem();
					this.state = 2950;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2947;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2952;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
					}
					}
					}
				}
				this.state = 2957;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 336, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_title(): Book_titleContext {
		let _localctx: Book_titleContext = new Book_titleContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, bitmarkParser.RULE_book_title);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2958;
			this.match(bitmarkParser.BitBookTitle);
			this.state = 2959;
			this.format();
			this.state = 2960;
			this.match(bitmarkParser.CL);
			this.state = 2964;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2961;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2966;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
			}
			this.state = 2976;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2967;
					this.bitElem();
					this.state = 2971;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 338, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2968;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2973;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 338, this._ctx);
					}
					}
					}
				}
				this.state = 2978;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_copyright(): Book_copyrightContext {
		let _localctx: Book_copyrightContext = new Book_copyrightContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, bitmarkParser.RULE_book_copyright);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2979;
			this.match(bitmarkParser.BitBookCopyright);
			this.state = 2980;
			this.format();
			this.state = 2981;
			this.match(bitmarkParser.CL);
			this.state = 2985;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 340, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2982;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 2987;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 340, this._ctx);
			}
			this.state = 2997;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2988;
					this.bitElem();
					this.state = 2992;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2989;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2994;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
					}
					}
					}
				}
				this.state = 2999;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_dedication(): Book_dedicationContext {
		let _localctx: Book_dedicationContext = new Book_dedicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, bitmarkParser.RULE_book_dedication);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3000;
			this.match(bitmarkParser.BitBookDedication);
			this.state = 3001;
			this.format();
			this.state = 3002;
			this.match(bitmarkParser.CL);
			this.state = 3006;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3003;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3008;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
			}
			this.state = 3018;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3009;
					this.bitElem();
					this.state = 3013;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3010;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3015;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
					}
					}
					}
				}
				this.state = 3020;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_forword(): Book_forwordContext {
		let _localctx: Book_forwordContext = new Book_forwordContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, bitmarkParser.RULE_book_forword);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3021;
			this.match(bitmarkParser.BitBookForword);
			this.state = 3022;
			this.format();
			this.state = 3023;
			this.match(bitmarkParser.CL);
			this.state = 3027;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3024;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3029;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
			}
			this.state = 3039;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3030;
					this.bitElem();
					this.state = 3034;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3031;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3036;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
					}
					}
					}
				}
				this.state = 3041;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_preface(): Book_prefaceContext {
		let _localctx: Book_prefaceContext = new Book_prefaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, bitmarkParser.RULE_book_preface);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3042;
			this.match(bitmarkParser.BitBookPreface);
			this.state = 3043;
			this.format();
			this.state = 3044;
			this.match(bitmarkParser.CL);
			this.state = 3048;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 349, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3045;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3050;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 349, this._ctx);
			}
			this.state = 3060;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 351, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3051;
					this.bitElem();
					this.state = 3055;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 350, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3052;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3057;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 350, this._ctx);
					}
					}
					}
				}
				this.state = 3062;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 351, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_prologue(): Book_prologueContext {
		let _localctx: Book_prologueContext = new Book_prologueContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, bitmarkParser.RULE_book_prologue);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3063;
			this.match(bitmarkParser.BitBookPrologue);
			this.state = 3064;
			this.format();
			this.state = 3065;
			this.match(bitmarkParser.CL);
			this.state = 3069;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3066;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3071;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
			}
			this.state = 3081;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3072;
					this.bitElem();
					this.state = 3076;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3073;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3078;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
					}
					}
					}
				}
				this.state = 3083;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_epilogue(): Book_epilogueContext {
		let _localctx: Book_epilogueContext = new Book_epilogueContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, bitmarkParser.RULE_book_epilogue);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3084;
			this.match(bitmarkParser.BitBookEpilogue);
			this.state = 3085;
			this.format();
			this.state = 3086;
			this.match(bitmarkParser.CL);
			this.state = 3090;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 355, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3087;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3092;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 355, this._ctx);
			}
			this.state = 3102;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3093;
					this.bitElem();
					this.state = 3097;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 356, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3094;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3099;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 356, this._ctx);
					}
					}
					}
				}
				this.state = 3104;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_introduction(): Book_introductionContext {
		let _localctx: Book_introductionContext = new Book_introductionContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, bitmarkParser.RULE_book_introduction);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3105;
			this.match(bitmarkParser.BitBookIntroduction);
			this.state = 3106;
			this.format();
			this.state = 3107;
			this.match(bitmarkParser.CL);
			this.state = 3111;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3108;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3113;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
			}
			this.state = 3123;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 360, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3114;
					this.bitElem();
					this.state = 3118;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 359, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3115;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3120;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 359, this._ctx);
					}
					}
					}
				}
				this.state = 3125;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 360, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_inciting_incident(): Book_inciting_incidentContext {
		let _localctx: Book_inciting_incidentContext = new Book_inciting_incidentContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, bitmarkParser.RULE_book_inciting_incident);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3126;
			this.match(bitmarkParser.BitBookIncitingIncident);
			this.state = 3127;
			this.format();
			this.state = 3128;
			this.match(bitmarkParser.CL);
			this.state = 3132;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3129;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3134;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
			}
			this.state = 3144;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3135;
					this.bitElem();
					this.state = 3139;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3136;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3141;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
					}
					}
					}
				}
				this.state = 3146;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_conclusion(): Book_conclusionContext {
		let _localctx: Book_conclusionContext = new Book_conclusionContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, bitmarkParser.RULE_book_conclusion);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3147;
			this.match(bitmarkParser.BitBookConclusion);
			this.state = 3148;
			this.format();
			this.state = 3149;
			this.match(bitmarkParser.CL);
			this.state = 3153;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3150;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3155;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
			}
			this.state = 3165;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 366, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3156;
					this.bitElem();
					this.state = 3160;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 365, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3157;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3162;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 365, this._ctx);
					}
					}
					}
				}
				this.state = 3167;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 366, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_afterword(): Book_afterwordContext {
		let _localctx: Book_afterwordContext = new Book_afterwordContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, bitmarkParser.RULE_book_afterword);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3168;
			this.match(bitmarkParser.BitBookAfterword);
			this.state = 3169;
			this.format();
			this.state = 3170;
			this.match(bitmarkParser.CL);
			this.state = 3174;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3171;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3176;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
			}
			this.state = 3186;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3177;
					this.bitElem();
					this.state = 3181;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 368, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3178;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3183;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 368, this._ctx);
					}
					}
					}
				}
				this.state = 3188;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_postscript(): Book_postscriptContext {
		let _localctx: Book_postscriptContext = new Book_postscriptContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, bitmarkParser.RULE_book_postscript);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3189;
			this.match(bitmarkParser.BitBookPostscript);
			this.state = 3190;
			this.format();
			this.state = 3191;
			this.match(bitmarkParser.CL);
			this.state = 3195;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3192;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3197;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
			}
			this.state = 3207;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3198;
					this.bitElem();
					this.state = 3202;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 371, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3199;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3204;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 371, this._ctx);
					}
					}
					}
				}
				this.state = 3209;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_appendix(): Book_appendixContext {
		let _localctx: Book_appendixContext = new Book_appendixContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, bitmarkParser.RULE_book_appendix);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3210;
			this.match(bitmarkParser.BitBookappendix);
			this.state = 3211;
			this.format();
			this.state = 3212;
			this.match(bitmarkParser.CL);
			this.state = 3216;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 373, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3213;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3218;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 373, this._ctx);
			}
			this.state = 3228;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 375, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3219;
					this.bitElem();
					this.state = 3223;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 374, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3220;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3225;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 374, this._ctx);
					}
					}
					}
				}
				this.state = 3230;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 375, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_addendum(): Book_addendumContext {
		let _localctx: Book_addendumContext = new Book_addendumContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, bitmarkParser.RULE_book_addendum);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3231;
			this.match(bitmarkParser.BitBookAddendum);
			this.state = 3232;
			this.format();
			this.state = 3233;
			this.match(bitmarkParser.CL);
			this.state = 3237;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 376, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3234;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3239;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 376, this._ctx);
			}
			this.state = 3249;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3240;
					this.bitElem();
					this.state = 3244;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3241;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3246;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
					}
					}
					}
				}
				this.state = 3251;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_acknowledgments(): Book_acknowledgmentsContext {
		let _localctx: Book_acknowledgmentsContext = new Book_acknowledgmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, bitmarkParser.RULE_book_acknowledgments);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3252;
			this.match(bitmarkParser.BitBookAcknowledgments);
			this.state = 3253;
			this.format();
			this.state = 3254;
			this.match(bitmarkParser.CL);
			this.state = 3258;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 379, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3255;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3260;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 379, this._ctx);
			}
			this.state = 3270;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3261;
					this.bitElem();
					this.state = 3265;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3262;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3267;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
					}
					}
					}
				}
				this.state = 3272;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_list_of_contributors(): Book_list_of_contributorsContext {
		let _localctx: Book_list_of_contributorsContext = new Book_list_of_contributorsContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, bitmarkParser.RULE_book_list_of_contributors);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3273;
			this.match(bitmarkParser.BitBookListOfContributors);
			this.state = 3274;
			this.format();
			this.state = 3275;
			this.match(bitmarkParser.CL);
			this.state = 3279;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3276;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3281;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
			}
			this.state = 3291;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3282;
					this.bitElem();
					this.state = 3286;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3283;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3288;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
					}
					}
					}
				}
				this.state = 3293;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_bibliography(): Book_bibliographyContext {
		let _localctx: Book_bibliographyContext = new Book_bibliographyContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, bitmarkParser.RULE_book_bibliography);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3294;
			this.match(bitmarkParser.BitBookBibliography);
			this.state = 3295;
			this.format();
			this.state = 3296;
			this.match(bitmarkParser.CL);
			this.state = 3300;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3297;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3302;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
			}
			this.state = 3312;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3303;
					this.bitElem();
					this.state = 3307;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 386, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3304;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3309;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 386, this._ctx);
					}
					}
					}
				}
				this.state = 3314;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_reference_list(): Book_reference_listContext {
		let _localctx: Book_reference_listContext = new Book_reference_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, bitmarkParser.RULE_book_reference_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3315;
			this.match(bitmarkParser.BitBookReferenceList);
			this.state = 3316;
			this.format();
			this.state = 3317;
			this.match(bitmarkParser.CL);
			this.state = 3321;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3318;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3323;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
			}
			this.state = 3333;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 390, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3324;
					this.bitElem();
					this.state = 3328;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 389, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3325;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3330;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 389, this._ctx);
					}
					}
					}
				}
				this.state = 3335;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 390, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_endnotes(): Book_endnotesContext {
		let _localctx: Book_endnotesContext = new Book_endnotesContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, bitmarkParser.RULE_book_endnotes);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3336;
			this.match(bitmarkParser.BitBookEndnotes);
			this.state = 3337;
			this.format();
			this.state = 3338;
			this.match(bitmarkParser.CL);
			this.state = 3342;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3339;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3344;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
			}
			this.state = 3354;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3345;
					this.bitElem();
					this.state = 3349;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3346;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3351;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
					}
					}
					}
				}
				this.state = 3356;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_notes(): Book_notesContext {
		let _localctx: Book_notesContext = new Book_notesContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, bitmarkParser.RULE_book_notes);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3357;
			this.match(bitmarkParser.BitBookNotes);
			this.state = 3358;
			this.format();
			this.state = 3359;
			this.match(bitmarkParser.CL);
			this.state = 3363;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3360;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3365;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
			}
			this.state = 3375;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3366;
					this.bitElem();
					this.state = 3370;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 395, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3367;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3372;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 395, this._ctx);
					}
					}
					}
				}
				this.state = 3377;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_copyright_permissions(): Book_copyright_permissionsContext {
		let _localctx: Book_copyright_permissionsContext = new Book_copyright_permissionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, bitmarkParser.RULE_book_copyright_permissions);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3378;
			this.match(bitmarkParser.BitBookCopyrightPermissions);
			this.state = 3379;
			this.format();
			this.state = 3380;
			this.match(bitmarkParser.CL);
			this.state = 3384;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3381;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3386;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
			}
			this.state = 3396;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3387;
					this.bitElem();
					this.state = 3391;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3388;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3393;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
					}
					}
					}
				}
				this.state = 3398;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_teaser(): Book_teaserContext {
		let _localctx: Book_teaserContext = new Book_teaserContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, bitmarkParser.RULE_book_teaser);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3399;
			this.match(bitmarkParser.BitBookTeaser);
			this.state = 3400;
			this.format();
			this.state = 3401;
			this.match(bitmarkParser.CL);
			this.state = 3405;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3402;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3407;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
			}
			this.state = 3417;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3408;
					this.bitElem();
					this.state = 3412;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 401, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3409;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3414;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 401, this._ctx);
					}
					}
					}
				}
				this.state = 3419;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_auther_bio(): Book_auther_bioContext {
		let _localctx: Book_auther_bioContext = new Book_auther_bioContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, bitmarkParser.RULE_book_auther_bio);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3420;
			this.match(bitmarkParser.BitBookAutherBio);
			this.state = 3421;
			this.format();
			this.state = 3422;
			this.match(bitmarkParser.CL);
			this.state = 3426;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3423;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3428;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
			}
			this.state = 3438;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3429;
					this.bitElem();
					this.state = 3433;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3430;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3435;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
					}
					}
					}
				}
				this.state = 3440;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_request_for_a_book_review(): Book_request_for_a_book_reviewContext {
		let _localctx: Book_request_for_a_book_reviewContext = new Book_request_for_a_book_reviewContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, bitmarkParser.RULE_book_request_for_a_book_review);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3441;
			this.match(bitmarkParser.BitBookRequestForABookReview);
			this.state = 3442;
			this.format();
			this.state = 3443;
			this.match(bitmarkParser.CL);
			this.state = 3447;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3444;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3449;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
			}
			this.state = 3459;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3450;
					this.bitElem();
					this.state = 3454;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3451;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3456;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
					}
					}
					}
				}
				this.state = 3461;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_coming_soon(): Book_coming_soonContext {
		let _localctx: Book_coming_soonContext = new Book_coming_soonContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, bitmarkParser.RULE_book_coming_soon);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3462;
			this.match(bitmarkParser.BitBookComingSoon);
			this.state = 3463;
			this.format();
			this.state = 3464;
			this.match(bitmarkParser.CL);
			this.state = 3468;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 409, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3465;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3470;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 409, this._ctx);
			}
			this.state = 3480;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3471;
					this.bitElem();
					this.state = 3475;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3472;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3477;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
					}
					}
					}
				}
				this.state = 3482;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_read_more(): Book_read_moreContext {
		let _localctx: Book_read_moreContext = new Book_read_moreContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, bitmarkParser.RULE_book_read_more);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3483;
			this.match(bitmarkParser.BitBookReadMore);
			this.state = 3484;
			this.format();
			this.state = 3485;
			this.match(bitmarkParser.CL);
			this.state = 3489;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 412, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3486;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3491;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 412, this._ctx);
			}
			this.state = 3501;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 414, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3492;
					this.bitElem();
					this.state = 3496;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3493;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3498;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
					}
					}
					}
				}
				this.state = 3503;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 414, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_summary(): Book_summaryContext {
		let _localctx: Book_summaryContext = new Book_summaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, bitmarkParser.RULE_book_summary);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3504;
			this.match(bitmarkParser.BitBookSummary);
			this.state = 3505;
			this.format();
			this.state = 3506;
			this.match(bitmarkParser.CL);
			this.state = 3510;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3507;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3512;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
			}
			this.state = 3522;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3513;
					this.bitElem();
					this.state = 3517;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3514;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3519;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
					}
					}
					}
				}
				this.state = 3524;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_epigraph(): Book_epigraphContext {
		let _localctx: Book_epigraphContext = new Book_epigraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, bitmarkParser.RULE_book_epigraph);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3525;
			this.match(bitmarkParser.BitBookEpigraph);
			this.state = 3526;
			this.format();
			this.state = 3527;
			this.match(bitmarkParser.CL);
			this.state = 3531;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3528;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3533;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
			}
			this.state = 3543;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3534;
					this.bitElem();
					this.state = 3538;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3535;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3540;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
					}
					}
					}
				}
				this.state = 3545;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public code(): CodeContext {
		let _localctx: CodeContext = new CodeContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, bitmarkParser.RULE_code);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3546;
			this.match(bitmarkParser.BitCode);
			this.state = 3547;
			this.format();
			this.state = 3548;
			this.match(bitmarkParser.CL);
			this.state = 3552;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3549;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3554;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
			}
			this.state = 3564;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3555;
					this.bitElem();
					this.state = 3559;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 422, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3556;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3561;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 422, this._ctx);
					}
					}
					}
				}
				this.state = 3566;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public card1(): Card1Context {
		let _localctx: Card1Context = new Card1Context(this._ctx, this.state);
		this.enterRule(_localctx, 274, bitmarkParser.RULE_card1);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3567;
			this.match(bitmarkParser.BitCard1);
			this.state = 3568;
			this.format();
			this.state = 3569;
			this.match(bitmarkParser.CL);
			this.state = 3573;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3570;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3575;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
			}
			this.state = 3585;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3576;
					this.bitElem();
					this.state = 3580;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 425, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3577;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3582;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 425, this._ctx);
					}
					}
					}
				}
				this.state = 3587;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public question1(): Question1Context {
		let _localctx: Question1Context = new Question1Context(this._ctx, this.state);
		this.enterRule(_localctx, 276, bitmarkParser.RULE_question1);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3588;
			this.match(bitmarkParser.BitQuestion1);
			this.state = 3589;
			this.format();
			this.state = 3590;
			this.match(bitmarkParser.CL);
			this.state = 3594;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 427, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3591;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3596;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 427, this._ctx);
			}
			this.state = 3606;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 429, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3597;
					this.bitElem();
					this.state = 3601;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 428, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3598;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3603;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 428, this._ctx);
					}
					}
					}
				}
				this.state = 3608;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 429, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenshot(): ScreenshotContext {
		let _localctx: ScreenshotContext = new ScreenshotContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, bitmarkParser.RULE_screenshot);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3609;
			this.match(bitmarkParser.BitScreenshot);
			this.state = 3610;
			this.format2();
			this.state = 3611;
			this.match(bitmarkParser.CL);
			this.state = 3615;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3612;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3617;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
			}
			this.state = 3627;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3618;
					this.bitElem();
					this.state = 3622;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 431, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3619;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3624;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 431, this._ctx);
					}
					}
					}
				}
				this.state = 3629;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public focus_image(): Focus_imageContext {
		let _localctx: Focus_imageContext = new Focus_imageContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, bitmarkParser.RULE_focus_image);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3630;
			this.match(bitmarkParser.BitFocusImage);
			this.state = 3631;
			this.format2();
			this.state = 3632;
			this.match(bitmarkParser.CL);
			this.state = 3636;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3633;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3638;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
			}
			this.state = 3648;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3639;
					this.bitElem();
					this.state = 3643;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3640;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3645;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
					}
					}
					}
				}
				this.state = 3650;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public photo(): PhotoContext {
		let _localctx: PhotoContext = new PhotoContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, bitmarkParser.RULE_photo);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3651;
			this.match(bitmarkParser.BitPhoto);
			this.state = 3652;
			this.format2();
			this.state = 3653;
			this.match(bitmarkParser.CL);
			this.state = 3657;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 436, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3654;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3659;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 436, this._ctx);
			}
			this.state = 3669;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3660;
					this.bitElem();
					this.state = 3664;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3661;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3666;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
					}
					}
					}
				}
				this.state = 3671;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public browser_image(): Browser_imageContext {
		let _localctx: Browser_imageContext = new Browser_imageContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, bitmarkParser.RULE_browser_image);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3672;
			this.match(bitmarkParser.BitBrowserImage);
			this.state = 3673;
			this.format2();
			this.state = 3674;
			this.match(bitmarkParser.CL);
			this.state = 3678;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 439, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3675;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3680;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 439, this._ctx);
			}
			this.state = 3690;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3681;
					this.bitElem();
					this.state = 3685;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3682;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3687;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
					}
					}
					}
				}
				this.state = 3692;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public chapter_subject_matter(): Chapter_subject_matterContext {
		let _localctx: Chapter_subject_matterContext = new Chapter_subject_matterContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, bitmarkParser.RULE_chapter_subject_matter);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3693;
			this.match(bitmarkParser.BitChapterSubjectMatter);
			this.state = 3694;
			this.format();
			this.state = 3695;
			this.match(bitmarkParser.CL);
			this.state = 3699;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 442, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3696;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3701;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 442, this._ctx);
			}
			this.state = 3711;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 444, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3702;
					this.bitElem();
					this.state = 3706;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3703;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3708;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
					}
					}
					}
				}
				this.state = 3713;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 444, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public release_note(): Release_noteContext {
		let _localctx: Release_noteContext = new Release_noteContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, bitmarkParser.RULE_release_note);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3714;
			this.match(bitmarkParser.BitReleaseNote);
			this.state = 3715;
			this.format();
			this.state = 3716;
			this.match(bitmarkParser.CL);
			this.state = 3720;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 445, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3717;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3722;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 445, this._ctx);
			}
			this.state = 3732;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 447, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3723;
					this.bitElem();
					this.state = 3727;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3724;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3729;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
					}
					}
					}
				}
				this.state = 3734;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 447, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conclusion(): ConclusionContext {
		let _localctx: ConclusionContext = new ConclusionContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, bitmarkParser.RULE_conclusion);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3735;
			this.match(bitmarkParser.BitConclusion);
			this.state = 3736;
			this.format();
			this.state = 3737;
			this.match(bitmarkParser.CL);
			this.state = 3741;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3738;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3743;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
			}
			this.state = 3753;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 450, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3744;
					this.bitElem();
					this.state = 3748;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3745;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3750;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
					}
					}
					}
				}
				this.state = 3755;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 450, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public featured(): FeaturedContext {
		let _localctx: FeaturedContext = new FeaturedContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, bitmarkParser.RULE_featured);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3756;
			this.match(bitmarkParser.BitFeatured);
			this.state = 3757;
			this.format();
			this.state = 3758;
			this.match(bitmarkParser.CL);
			this.state = 3762;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 451, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3759;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3764;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 451, this._ctx);
			}
			this.state = 3774;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 453, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3765;
					this.bitElem();
					this.state = 3769;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3766;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3771;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
					}
					}
					}
				}
				this.state = 3776;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 453, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vendor_amcharts_5_chart(): Vendor_amcharts_5_chartContext {
		let _localctx: Vendor_amcharts_5_chartContext = new Vendor_amcharts_5_chartContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, bitmarkParser.RULE_vendor_amcharts_5_chart);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3777;
			this.match(bitmarkParser.BitVendorAmcharts5Chart);
			this.state = 3778;
			this.format2();
			this.state = 3779;
			this.match(bitmarkParser.CL);
			this.state = 3783;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3780;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3785;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
			}
			this.state = 3795;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3786;
					this.bitElem();
					this.state = 3790;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 455, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3787;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3792;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 455, this._ctx);
					}
					}
					}
				}
				this.state = 3797;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public newspaper_article(): Newspaper_articleContext {
		let _localctx: Newspaper_articleContext = new Newspaper_articleContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, bitmarkParser.RULE_newspaper_article);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3798;
			this.match(bitmarkParser.BitNewspaperArticle);
			this.state = 3799;
			this.format();
			this.state = 3800;
			this.match(bitmarkParser.CL);
			this.state = 3804;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 457, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3801;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3806;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 457, this._ctx);
			}
			this.state = 3816;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 459, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3807;
					this.bitElem();
					this.state = 3811;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3808;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3813;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
					}
					}
					}
				}
				this.state = 3818;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 459, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blog_article(): Blog_articleContext {
		let _localctx: Blog_articleContext = new Blog_articleContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, bitmarkParser.RULE_blog_article);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3819;
			this.match(bitmarkParser.BitBlogArticle);
			this.state = 3820;
			this.format();
			this.state = 3821;
			this.match(bitmarkParser.CL);
			this.state = 3825;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3822;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3827;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
			}
			this.state = 3837;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 462, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3828;
					this.bitElem();
					this.state = 3832;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 461, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3829;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3834;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 461, this._ctx);
					}
					}
					}
				}
				this.state = 3839;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 462, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_article(): Book_articleContext {
		let _localctx: Book_articleContext = new Book_articleContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, bitmarkParser.RULE_book_article);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3840;
			this.match(bitmarkParser.BitBookArticle);
			this.state = 3841;
			this.format();
			this.state = 3842;
			this.match(bitmarkParser.CL);
			this.state = 3846;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 463, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3843;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3848;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 463, this._ctx);
			}
			this.state = 3858;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 465, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3849;
					this.bitElem();
					this.state = 3853;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 464, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3850;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3855;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 464, this._ctx);
					}
					}
					}
				}
				this.state = 3860;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 465, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notebook_article(): Notebook_articleContext {
		let _localctx: Notebook_articleContext = new Notebook_articleContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, bitmarkParser.RULE_notebook_article);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3861;
			this.match(bitmarkParser.BitNotebookArticle);
			this.state = 3862;
			this.format();
			this.state = 3863;
			this.match(bitmarkParser.CL);
			this.state = 3867;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 466, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3864;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3869;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 466, this._ctx);
			}
			this.state = 3879;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3870;
					this.bitElem();
					this.state = 3874;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 467, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3871;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3876;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 467, this._ctx);
					}
					}
					}
				}
				this.state = 3881;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public workbook_article(): Workbook_articleContext {
		let _localctx: Workbook_articleContext = new Workbook_articleContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, bitmarkParser.RULE_workbook_article);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3882;
			this.match(bitmarkParser.BitWorkbookArticle);
			this.state = 3883;
			this.format();
			this.state = 3884;
			this.match(bitmarkParser.CL);
			this.state = 3888;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3885;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3890;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			}
			this.state = 3900;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3891;
					this.bitElem();
					this.state = 3895;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3892;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3897;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
					}
					}
					}
				}
				this.state = 3902;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public release_notes_summary(): Release_notes_summaryContext {
		let _localctx: Release_notes_summaryContext = new Release_notes_summaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, bitmarkParser.RULE_release_notes_summary);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3903;
			this.match(bitmarkParser.BitReleaseNotesSummary);
			this.state = 3904;
			this.format();
			this.state = 3905;
			this.match(bitmarkParser.CL);
			this.state = 3909;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 472, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3906;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3911;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 472, this._ctx);
			}
			this.state = 3921;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 474, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3912;
					this.bitElem();
					this.state = 3916;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 473, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3913;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3918;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 473, this._ctx);
					}
					}
					}
				}
				this.state = 3923;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 474, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public message(): MessageContext {
		let _localctx: MessageContext = new MessageContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, bitmarkParser.RULE_message);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3924;
			this.match(bitmarkParser.BitMessage);
			this.state = 3925;
			this.format();
			this.state = 3926;
			this.match(bitmarkParser.CL);
			this.state = 3930;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 475, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3927;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3932;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 475, this._ctx);
			}
			this.state = 3942;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3933;
					this.bitElem();
					this.state = 3937;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 476, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3934;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3939;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 476, this._ctx);
					}
					}
					}
				}
				this.state = 3944;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_preparation(): Cook_preparationContext {
		let _localctx: Cook_preparationContext = new Cook_preparationContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, bitmarkParser.RULE_cook_preparation);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3945;
			this.match(bitmarkParser.BitCookPreparation);
			this.state = 3946;
			this.format();
			this.state = 3947;
			this.match(bitmarkParser.CL);
			this.state = 3951;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 478, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3948;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3953;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 478, this._ctx);
			}
			this.state = 3963;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 480, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3954;
					this.bitElem();
					this.state = 3958;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 479, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3955;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3960;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 479, this._ctx);
					}
					}
					}
				}
				this.state = 3965;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 480, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_step(): Cook_stepContext {
		let _localctx: Cook_stepContext = new Cook_stepContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, bitmarkParser.RULE_cook_step);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3966;
			this.match(bitmarkParser.BitCookStep);
			this.state = 3967;
			this.format();
			this.state = 3968;
			this.match(bitmarkParser.CL);
			this.state = 3972;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 481, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3969;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3974;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 481, this._ctx);
			}
			this.state = 3984;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 483, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3975;
					this.bitElem();
					this.state = 3979;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 482, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3976;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3981;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 482, this._ctx);
					}
					}
					}
				}
				this.state = 3986;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 483, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_ingredients(): Cook_ingredientsContext {
		let _localctx: Cook_ingredientsContext = new Cook_ingredientsContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, bitmarkParser.RULE_cook_ingredients);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3987;
			this.match(bitmarkParser.BitCookIngredients);
			this.state = 3988;
			this.format();
			this.state = 3989;
			this.match(bitmarkParser.CL);
			this.state = 3993;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 484, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3990;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3995;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 484, this._ctx);
			}
			this.state = 4005;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 486, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3996;
					this.bitElem();
					this.state = 4000;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 485, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3997;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4002;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 485, this._ctx);
					}
					}
					}
				}
				this.state = 4007;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 486, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_remark(): Cook_remarkContext {
		let _localctx: Cook_remarkContext = new Cook_remarkContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, bitmarkParser.RULE_cook_remark);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4008;
			this.match(bitmarkParser.BitCookRremark);
			this.state = 4009;
			this.format();
			this.state = 4010;
			this.match(bitmarkParser.CL);
			this.state = 4014;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 487, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4011;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4016;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 487, this._ctx);
			}
			this.state = 4026;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 489, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4017;
					this.bitElem();
					this.state = 4021;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4018;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4023;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
					}
					}
					}
				}
				this.state = 4028;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 489, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_variation(): Cook_variationContext {
		let _localctx: Cook_variationContext = new Cook_variationContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, bitmarkParser.RULE_cook_variation);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4029;
			this.match(bitmarkParser.BitCookVariation);
			this.state = 4030;
			this.format();
			this.state = 4031;
			this.match(bitmarkParser.CL);
			this.state = 4035;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 490, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4032;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4037;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 490, this._ctx);
			}
			this.state = 4047;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 492, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4038;
					this.bitElem();
					this.state = 4042;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 491, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4039;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4044;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 491, this._ctx);
					}
					}
					}
				}
				this.state = 4049;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 492, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_insert(): Cook_insertContext {
		let _localctx: Cook_insertContext = new Cook_insertContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, bitmarkParser.RULE_cook_insert);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4050;
			this.match(bitmarkParser.BitCookInsert);
			this.state = 4051;
			this.format();
			this.state = 4052;
			this.match(bitmarkParser.CL);
			this.state = 4056;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 493, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4053;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4058;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 493, this._ctx);
			}
			this.state = 4068;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 495, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4059;
					this.bitElem();
					this.state = 4063;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 494, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4060;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4065;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 494, this._ctx);
					}
					}
					}
				}
				this.state = 4070;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 495, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_arrangement(): Cook_arrangementContext {
		let _localctx: Cook_arrangementContext = new Cook_arrangementContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, bitmarkParser.RULE_cook_arrangement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4071;
			this.match(bitmarkParser.BitCookArrangement);
			this.state = 4072;
			this.format();
			this.state = 4073;
			this.match(bitmarkParser.CL);
			this.state = 4077;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 496, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4074;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4079;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 496, this._ctx);
			}
			this.state = 4089;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 498, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4080;
					this.bitElem();
					this.state = 4084;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 497, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4081;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4086;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 497, this._ctx);
					}
					}
					}
				}
				this.state = 4091;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 498, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_practice_advise(): Cook_practice_adviseContext {
		let _localctx: Cook_practice_adviseContext = new Cook_practice_adviseContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, bitmarkParser.RULE_cook_practice_advise);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4092;
			this.match(bitmarkParser.BitCookPracticeAdvise);
			this.state = 4093;
			this.format();
			this.state = 4094;
			this.match(bitmarkParser.CL);
			this.state = 4098;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 499, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4095;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4100;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 499, this._ctx);
			}
			this.state = 4110;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 501, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4101;
					this.bitElem();
					this.state = 4105;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 500, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4102;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4107;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 500, this._ctx);
					}
					}
					}
				}
				this.state = 4112;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 501, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_plate(): Cook_plateContext {
		let _localctx: Cook_plateContext = new Cook_plateContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, bitmarkParser.RULE_cook_plate);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4113;
			this.match(bitmarkParser.BitCookPlate);
			this.state = 4114;
			this.format();
			this.state = 4115;
			this.match(bitmarkParser.CL);
			this.state = 4119;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4116;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4121;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
			}
			this.state = 4131;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 504, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4122;
					this.bitElem();
					this.state = 4126;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 503, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4123;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4128;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 503, this._ctx);
					}
					}
					}
				}
				this.state = 4133;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 504, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_recommendation(): Cook_recommendationContext {
		let _localctx: Cook_recommendationContext = new Cook_recommendationContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, bitmarkParser.RULE_cook_recommendation);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4134;
			this.match(bitmarkParser.BitCookRecommendation);
			this.state = 4135;
			this.format();
			this.state = 4136;
			this.match(bitmarkParser.CL);
			this.state = 4140;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 505, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4137;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4142;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 505, this._ctx);
			}
			this.state = 4152;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 507, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4143;
					this.bitElem();
					this.state = 4147;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 506, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4144;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4149;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 506, this._ctx);
					}
					}
					}
				}
				this.state = 4154;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 507, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_personal_recommendation(): Cook_personal_recommendationContext {
		let _localctx: Cook_personal_recommendationContext = new Cook_personal_recommendationContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, bitmarkParser.RULE_cook_personal_recommendation);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4155;
			this.match(bitmarkParser.BitCookPersonalRecommendation);
			this.state = 4156;
			this.format();
			this.state = 4157;
			this.match(bitmarkParser.CL);
			this.state = 4161;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 508, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4158;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4163;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 508, this._ctx);
			}
			this.state = 4173;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 510, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4164;
					this.bitElem();
					this.state = 4168;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 509, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4165;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4170;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 509, this._ctx);
					}
					}
					}
				}
				this.state = 4175;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 510, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_side_drink(): Cook_side_drinkContext {
		let _localctx: Cook_side_drinkContext = new Cook_side_drinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, bitmarkParser.RULE_cook_side_drink);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4176;
			this.match(bitmarkParser.BitCookSideDrink);
			this.state = 4177;
			this.format();
			this.state = 4178;
			this.match(bitmarkParser.CL);
			this.state = 4182;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 511, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4179;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4184;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 511, this._ctx);
			}
			this.state = 4194;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 513, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4185;
					this.bitElem();
					this.state = 4189;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 512, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4186;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4191;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 512, this._ctx);
					}
					}
					}
				}
				this.state = 4196;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 513, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_side_dish(): Cook_side_dishContext {
		let _localctx: Cook_side_dishContext = new Cook_side_dishContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, bitmarkParser.RULE_cook_side_dish);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4197;
			this.match(bitmarkParser.BitCookSideDish);
			this.state = 4198;
			this.format();
			this.state = 4199;
			this.match(bitmarkParser.CL);
			this.state = 4203;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 514, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4200;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4205;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 514, this._ctx);
			}
			this.state = 4215;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 516, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4206;
					this.bitElem();
					this.state = 4210;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 515, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4207;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4212;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 515, this._ctx);
					}
					}
					}
				}
				this.state = 4217;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 516, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cook_timer(): Cook_timerContext {
		let _localctx: Cook_timerContext = new Cook_timerContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, bitmarkParser.RULE_cook_timer);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4218;
			this.match(bitmarkParser.BitCookTimer);
			this.state = 4219;
			this.format();
			this.state = 4220;
			this.match(bitmarkParser.CL);
			this.state = 4224;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 517, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4221;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4226;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 517, this._ctx);
			}
			this.state = 4236;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 519, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4227;
					this.bitElem();
					this.state = 4231;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 518, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4228;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4233;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 518, this._ctx);
					}
					}
					}
				}
				this.state = 4238;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 519, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_learning_outcomes(): Lang_learning_outcomesContext {
		let _localctx: Lang_learning_outcomesContext = new Lang_learning_outcomesContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, bitmarkParser.RULE_lang_learning_outcomes);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4239;
			this.match(bitmarkParser.BitLangLearningOutcomes);
			this.state = 4240;
			this.format();
			this.state = 4241;
			this.match(bitmarkParser.CL);
			this.state = 4245;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 520, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4242;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4247;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 520, this._ctx);
			}
			this.state = 4257;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 522, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4248;
					this.bitElem();
					this.state = 4252;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 521, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4249;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4254;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 521, this._ctx);
					}
					}
					}
				}
				this.state = 4259;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 522, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_enabling_language_skills(): Lang_enabling_language_skillsContext {
		let _localctx: Lang_enabling_language_skillsContext = new Lang_enabling_language_skillsContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, bitmarkParser.RULE_lang_enabling_language_skills);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4260;
			this.match(bitmarkParser.BitLangEnablingLanguageSkills);
			this.state = 4261;
			this.format();
			this.state = 4262;
			this.match(bitmarkParser.CL);
			this.state = 4266;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 523, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4263;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4268;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 523, this._ctx);
			}
			this.state = 4278;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 525, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4269;
					this.bitElem();
					this.state = 4273;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 524, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4270;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4275;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 524, this._ctx);
					}
					}
					}
				}
				this.state = 4280;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 525, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_life_skills(): Lang_life_skillsContext {
		let _localctx: Lang_life_skillsContext = new Lang_life_skillsContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, bitmarkParser.RULE_lang_life_skills);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4281;
			this.match(bitmarkParser.BitLangLifeSkills);
			this.state = 4282;
			this.format();
			this.state = 4283;
			this.match(bitmarkParser.CL);
			this.state = 4287;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 526, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4284;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4289;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 526, this._ctx);
			}
			this.state = 4299;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 528, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4290;
					this.bitElem();
					this.state = 4294;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 527, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4291;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4296;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 527, this._ctx);
					}
					}
					}
				}
				this.state = 4301;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 528, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_english_around_world(): Lang_english_around_worldContext {
		let _localctx: Lang_english_around_worldContext = new Lang_english_around_worldContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, bitmarkParser.RULE_lang_english_around_world);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4302;
			this.match(bitmarkParser.BitLangEnglishAroundWorld);
			this.state = 4303;
			this.format();
			this.state = 4304;
			this.match(bitmarkParser.CL);
			this.state = 4308;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 529, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4305;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4310;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 529, this._ctx);
			}
			this.state = 4320;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 531, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4311;
					this.bitElem();
					this.state = 4315;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4312;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4317;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
					}
					}
					}
				}
				this.state = 4322;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 531, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_good_to_know(): Lang_good_to_knowContext {
		let _localctx: Lang_good_to_knowContext = new Lang_good_to_knowContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, bitmarkParser.RULE_lang_good_to_know);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4323;
			this.match(bitmarkParser.BitLangGoodtoknow);
			this.state = 4324;
			this.format();
			this.state = 4325;
			this.match(bitmarkParser.CL);
			this.state = 4329;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 532, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4326;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4331;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 532, this._ctx);
			}
			this.state = 4341;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 534, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4332;
					this.bitElem();
					this.state = 4336;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 533, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4333;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4338;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 533, this._ctx);
					}
					}
					}
				}
				this.state = 4343;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 534, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_learning_strategy(): Lang_learning_strategyContext {
		let _localctx: Lang_learning_strategyContext = new Lang_learning_strategyContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, bitmarkParser.RULE_lang_learning_strategy);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4344;
			this.match(bitmarkParser.BitLangLearningStrategy);
			this.state = 4345;
			this.format();
			this.state = 4346;
			this.match(bitmarkParser.CL);
			this.state = 4350;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 535, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4347;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4352;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 535, this._ctx);
			}
			this.state = 4362;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 537, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4353;
					this.bitElem();
					this.state = 4357;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 536, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4354;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4359;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 536, this._ctx);
					}
					}
					}
				}
				this.state = 4364;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 537, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_like_a_local(): Lang_like_a_localContext {
		let _localctx: Lang_like_a_localContext = new Lang_like_a_localContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, bitmarkParser.RULE_lang_like_a_local);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4365;
			this.match(bitmarkParser.BitLangLikeAlocal);
			this.state = 4366;
			this.format();
			this.state = 4367;
			this.match(bitmarkParser.CL);
			this.state = 4371;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4368;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4373;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
			}
			this.state = 4383;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4374;
					this.bitElem();
					this.state = 4378;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 539, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4375;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4380;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 539, this._ctx);
					}
					}
					}
				}
				this.state = 4385;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_useful_phrases(): Lang_useful_phrasesContext {
		let _localctx: Lang_useful_phrasesContext = new Lang_useful_phrasesContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, bitmarkParser.RULE_lang_useful_phrases);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4386;
			this.match(bitmarkParser.BitLangUsefulPhrases);
			this.state = 4387;
			this.format();
			this.state = 4388;
			this.match(bitmarkParser.CL);
			this.state = 4392;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 541, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4389;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4394;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 541, this._ctx);
			}
			this.state = 4404;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 543, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4395;
					this.bitElem();
					this.state = 4399;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 542, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4396;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4401;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 542, this._ctx);
					}
					}
					}
				}
				this.state = 4406;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 543, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_level_down(): Lang_level_downContext {
		let _localctx: Lang_level_downContext = new Lang_level_downContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, bitmarkParser.RULE_lang_level_down);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4407;
			this.match(bitmarkParser.BitLangLevelDown);
			this.state = 4408;
			this.format();
			this.state = 4409;
			this.match(bitmarkParser.CL);
			this.state = 4413;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 544, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4410;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4415;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 544, this._ctx);
			}
			this.state = 4425;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 546, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4416;
					this.bitElem();
					this.state = 4420;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4417;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4422;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
					}
					}
					}
				}
				this.state = 4427;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 546, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_level_up(): Lang_level_upContext {
		let _localctx: Lang_level_upContext = new Lang_level_upContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, bitmarkParser.RULE_lang_level_up);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4428;
			this.match(bitmarkParser.BitLangLevelUp);
			this.state = 4429;
			this.format();
			this.state = 4430;
			this.match(bitmarkParser.CL);
			this.state = 4434;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 547, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4431;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4436;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 547, this._ctx);
			}
			this.state = 4446;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 549, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4437;
					this.bitElem();
					this.state = 4441;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 548, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4438;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4443;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 548, this._ctx);
					}
					}
					}
				}
				this.state = 4448;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 549, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_extra_activity(): Lang_extra_activityContext {
		let _localctx: Lang_extra_activityContext = new Lang_extra_activityContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, bitmarkParser.RULE_lang_extra_activity);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4449;
			this.match(bitmarkParser.BitLangExtraActivity);
			this.state = 4450;
			this.format();
			this.state = 4451;
			this.match(bitmarkParser.CL);
			this.state = 4455;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 550, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4452;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4457;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 550, this._ctx);
			}
			this.state = 4467;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4458;
					this.bitElem();
					this.state = 4462;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4459;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4464;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
					}
					}
					}
				}
				this.state = 4469;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_video_script(): Lang_video_scriptContext {
		let _localctx: Lang_video_scriptContext = new Lang_video_scriptContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, bitmarkParser.RULE_lang_video_script);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4470;
			this.match(bitmarkParser.BitLangVideoScript);
			this.state = 4471;
			this.format();
			this.state = 4472;
			this.match(bitmarkParser.CL);
			this.state = 4476;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 553, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4473;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4478;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 553, this._ctx);
			}
			this.state = 4488;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4479;
					this.bitElem();
					this.state = 4483;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 554, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4480;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4485;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 554, this._ctx);
					}
					}
					}
				}
				this.state = 4490;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_audio_script(): Lang_audio_scriptContext {
		let _localctx: Lang_audio_scriptContext = new Lang_audio_scriptContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, bitmarkParser.RULE_lang_audio_script);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4491;
			this.match(bitmarkParser.BitLangAudioScript);
			this.state = 4492;
			this.format();
			this.state = 4493;
			this.match(bitmarkParser.CL);
			this.state = 4497;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 556, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4494;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4499;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 556, this._ctx);
			}
			this.state = 4509;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 558, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4500;
					this.bitElem();
					this.state = 4504;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4501;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4506;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
					}
					}
					}
				}
				this.state = 4511;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 558, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_vocabulary(): Lang_vocabularyContext {
		let _localctx: Lang_vocabularyContext = new Lang_vocabularyContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, bitmarkParser.RULE_lang_vocabulary);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4512;
			this.match(bitmarkParser.BitLangVocabulary);
			this.state = 4513;
			this.format();
			this.state = 4514;
			this.match(bitmarkParser.CL);
			this.state = 4518;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 559, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4515;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4520;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 559, this._ctx);
			}
			this.state = 4530;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 561, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4521;
					this.bitElem();
					this.state = 4525;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4522;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4527;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
					}
					}
					}
				}
				this.state = 4532;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 561, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_homework(): Lang_homeworkContext {
		let _localctx: Lang_homeworkContext = new Lang_homeworkContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, bitmarkParser.RULE_lang_homework);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4533;
			this.match(bitmarkParser.BitLangHomework);
			this.state = 4534;
			this.format();
			this.state = 4535;
			this.match(bitmarkParser.CL);
			this.state = 4539;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4536;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4541;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
			}
			this.state = 4551;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 564, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4542;
					this.bitElem();
					this.state = 4546;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 563, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4543;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4548;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 563, this._ctx);
					}
					}
					}
				}
				this.state = 4553;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 564, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lang_teacher_note(): Lang_teacher_noteContext {
		let _localctx: Lang_teacher_noteContext = new Lang_teacher_noteContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, bitmarkParser.RULE_lang_teacher_note);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4554;
			this.match(bitmarkParser.BitLangTeacherNote);
			this.state = 4555;
			this.format();
			this.state = 4556;
			this.match(bitmarkParser.CL);
			this.state = 4558;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4557;
					this.match(bitmarkParser.NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4560;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 565, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4571;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 567, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4562;
					this.bitElem();
					this.state = 4566;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 566, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4563;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4568;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 566, this._ctx);
					}
					}
					}
				}
				this.state = 4573;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 567, this._ctx);
			}
			this.state = 4575;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 568, this._ctx) ) {
			case 1:
				{
				this.state = 4574;
				this.lines();
				}
				break;
			}
			this.state = 4580;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 569, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4577;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4582;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 569, this._ctx);
			}
			this.state = 4596;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 572, this._ctx) ) {
			case 1:
				{
				this.state = 4583;
				this.resource();
				this.state = 4593;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 571, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4587;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 4584;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 4589;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 4590;
						this.resource();
						}
						}
					}
					this.state = 4595;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 571, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public review_note(): Review_noteContext {
		let _localctx: Review_noteContext = new Review_noteContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, bitmarkParser.RULE_review_note);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4598;
			this.match(bitmarkParser.BitReviewNote);
			this.state = 4599;
			this.format();
			this.state = 4600;
			this.match(bitmarkParser.CL);
			this.state = 4604;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 573, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4601;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4606;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 573, this._ctx);
			}
			this.state = 4616;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 575, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4607;
					this.bitElem();
					this.state = 4611;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 574, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4608;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4613;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 574, this._ctx);
					}
					}
					}
				}
				this.state = 4618;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 575, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public review_author_note(): Review_author_noteContext {
		let _localctx: Review_author_noteContext = new Review_author_noteContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, bitmarkParser.RULE_review_author_note);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4619;
			this.match(bitmarkParser.BitReviewAuthorNote);
			this.state = 4620;
			this.format();
			this.state = 4621;
			this.match(bitmarkParser.CL);
			this.state = 4625;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 576, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4622;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4627;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 576, this._ctx);
			}
			this.state = 4637;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4628;
					this.bitElem();
					this.state = 4632;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 577, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4629;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4634;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 577, this._ctx);
					}
					}
					}
				}
				this.state = 4639;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public review_reviewer_note(): Review_reviewer_noteContext {
		let _localctx: Review_reviewer_noteContext = new Review_reviewer_noteContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, bitmarkParser.RULE_review_reviewer_note);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4640;
			this.match(bitmarkParser.BitReviewReviewerNote);
			this.state = 4641;
			this.format();
			this.state = 4642;
			this.match(bitmarkParser.CL);
			this.state = 4646;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 579, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4643;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4648;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 579, this._ctx);
			}
			this.state = 4658;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 581, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4649;
					this.bitElem();
					this.state = 4653;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 580, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4650;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4655;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 580, this._ctx);
					}
					}
					}
				}
				this.state = 4660;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 581, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public review_request_for_review_note(): Review_request_for_review_noteContext {
		let _localctx: Review_request_for_review_noteContext = new Review_request_for_review_noteContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, bitmarkParser.RULE_review_request_for_review_note);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4661;
			this.match(bitmarkParser.BitReviewRequestForReviewNote);
			this.state = 4662;
			this.format();
			this.state = 4663;
			this.match(bitmarkParser.CL);
			this.state = 4667;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 582, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4664;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4669;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 582, this._ctx);
			}
			this.state = 4679;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 584, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4670;
					this.bitElem();
					this.state = 4674;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 583, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4671;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4676;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 583, this._ctx);
					}
					}
					}
				}
				this.state = 4681;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 584, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public review_approved_note(): Review_approved_noteContext {
		let _localctx: Review_approved_noteContext = new Review_approved_noteContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, bitmarkParser.RULE_review_approved_note);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4682;
			this.match(bitmarkParser.BitReviewApprovedNote);
			this.state = 4683;
			this.format();
			this.state = 4684;
			this.match(bitmarkParser.CL);
			this.state = 4688;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 585, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4685;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4690;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 585, this._ctx);
			}
			this.state = 4700;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 587, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4691;
					this.bitElem();
					this.state = 4695;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 586, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4692;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4697;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 586, this._ctx);
					}
					}
					}
				}
				this.state = 4702;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 587, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checklist(): ChecklistContext {
		let _localctx: ChecklistContext = new ChecklistContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, bitmarkParser.RULE_checklist);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4703;
			this.match(bitmarkParser.BitChecklist);
			this.state = 4704;
			this.format();
			this.state = 4705;
			this.match(bitmarkParser.CL);
			this.state = 4709;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4706;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4711;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
			}
			this.state = 4721;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 590, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4712;
					this.bitElem();
					this.state = 4716;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 589, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4713;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4718;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 589, this._ctx);
					}
					}
					}
				}
				this.state = 4723;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 590, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public video_transcript(): Video_transcriptContext {
		let _localctx: Video_transcriptContext = new Video_transcriptContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, bitmarkParser.RULE_video_transcript);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4724;
			this.match(bitmarkParser.BitVideoTranscript);
			this.state = 4725;
			this.format();
			this.state = 4726;
			this.match(bitmarkParser.CL);
			this.state = 4730;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4727;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4732;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
			}
			this.state = 4742;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 593, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4733;
					this.bitElem();
					this.state = 4737;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 592, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4734;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4739;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 592, this._ctx);
					}
					}
					}
				}
				this.state = 4744;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 593, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public audio_transcript(): Audio_transcriptContext {
		let _localctx: Audio_transcriptContext = new Audio_transcriptContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, bitmarkParser.RULE_audio_transcript);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4745;
			this.match(bitmarkParser.BitAudioTranscript);
			this.state = 4746;
			this.format();
			this.state = 4747;
			this.match(bitmarkParser.CL);
			this.state = 4751;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 594, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4748;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4753;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 594, this._ctx);
			}
			this.state = 4763;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 596, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4754;
					this.bitElem();
					this.state = 4758;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 595, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4755;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4760;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 595, this._ctx);
					}
					}
					}
				}
				this.state = 4765;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 596, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_portrait(): Image_portraitContext {
		let _localctx: Image_portraitContext = new Image_portraitContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, bitmarkParser.RULE_image_portrait);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4766;
			this.match(bitmarkParser.BitImagePortrait);
			this.state = 4767;
			this.format2();
			this.state = 4768;
			this.match(bitmarkParser.CL);
			this.state = 4772;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 597, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4769;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4774;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 597, this._ctx);
			}
			this.state = 4784;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 599, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4775;
					this.bitElem();
					this.state = 4779;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 598, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4776;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4781;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 598, this._ctx);
					}
					}
					}
				}
				this.state = 4786;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 599, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_landscape(): Image_landscapeContext {
		let _localctx: Image_landscapeContext = new Image_landscapeContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, bitmarkParser.RULE_image_landscape);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4787;
			this.match(bitmarkParser.BitImageLandscape);
			this.state = 4788;
			this.format2();
			this.state = 4789;
			this.match(bitmarkParser.CL);
			this.state = 4793;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 600, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4790;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4795;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 600, this._ctx);
			}
			this.state = 4805;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 602, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4796;
					this.bitElem();
					this.state = 4800;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 601, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4797;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4802;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 601, this._ctx);
					}
					}
					}
				}
				this.state = 4807;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 602, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_on_device(): Image_on_deviceContext {
		let _localctx: Image_on_deviceContext = new Image_on_deviceContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, bitmarkParser.RULE_image_on_device);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4808;
			this.match(bitmarkParser.BitImageOnDevice);
			this.state = 4809;
			this.format2();
			this.state = 4810;
			this.match(bitmarkParser.CL);
			this.state = 4814;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 603, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4811;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4816;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 603, this._ctx);
			}
			this.state = 4826;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 605, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4817;
					this.bitElem();
					this.state = 4821;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 604, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4818;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4823;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 604, this._ctx);
					}
					}
					}
				}
				this.state = 4828;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 605, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_choice(): Bot_choiceContext {
		let _localctx: Bot_choiceContext = new Bot_choiceContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, bitmarkParser.RULE_bot_choice);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 4836;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 606, this._ctx) ) {
				case 1:
					{
					this.state = 4829;
					this.words();
					}
					break;

				case 2:
					{
					this.state = 4830;
					this.instruction();
					}
					break;

				case 3:
					{
					this.state = 4831;
					this.audiobit();
					}
					break;

				case 4:
					{
					this.state = 4832;
					this.gap();
					}
					break;

				case 5:
					{
					this.state = 4833;
					this.choice_plus();
					}
					break;

				case 6:
					{
					this.state = 4834;
					this.choice_minus();
					}
					break;

				case 7:
					{
					this.state = 4835;
					this.choice_star();
					}
					break;
				}
				}
				this.state = 4838;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (bitmarkParser.OPU - 194)) | (1 << (bitmarkParser.OPB - 194)) | (1 << (bitmarkParser.OPP - 194)) | (1 << (bitmarkParser.OPM - 194)) | (1 << (bitmarkParser.OPR - 194)) | (1 << (bitmarkParser.OPC - 194)) | (1 << (bitmarkParser.AMP - 194)) | (1 << (bitmarkParser.Greater - 194)) | (1 << (bitmarkParser.Less - 194)) | (1 << (bitmarkParser.RightAngle - 194)) | (1 << (bitmarkParser.RightArrow - 194)) | (1 << (bitmarkParser.QUOTE_INDEX - 194)))) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & ((1 << (bitmarkParser.NOTBITMARK - 230)) | (1 << (bitmarkParser.ELIPSIS - 230)) | (1 << (bitmarkParser.SENTENCE - 230)) | (1 << (bitmarkParser.BARSTRING - 230)))) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.OpAmpAudio - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)) | (1 << (bitmarkParser.OpAmpAudioLink - 265)))) !== 0) || ((((_la - 311)) & ~0x1F) === 0 && ((1 << (_la - 311)) & ((1 << (bitmarkParser.OpAmpAudioEmbed - 311)) | (1 << (bitmarkParser.BitmarkMinus - 311)) | (1 << (bitmarkParser.BitmarkPlus - 311)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rating(): RatingContext {
		let _localctx: RatingContext = new RatingContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, bitmarkParser.RULE_rating);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4916;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 620, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4840;
				this.match(bitmarkParser.BitRating);
				this.state = 4841;
				this.format();
				this.state = 4842;
				this.match(bitmarkParser.CL);
				this.state = 4846;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 608, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4843;
						this.match(bitmarkParser.NL);
						}
						}
					}
					this.state = 4848;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 608, this._ctx);
				}
				this.state = 4858;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 610, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4849;
						this.bitElem();
						this.state = 4853;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 4850;
								this.match(bitmarkParser.NL);
								}
								}
							}
							this.state = 4855;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
						}
						}
						}
					}
					this.state = 4860;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 610, this._ctx);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4861;
				this.match(bitmarkParser.BitRating);
				this.state = 4862;
				this.format();
				this.state = 4863;
				this.match(bitmarkParser.CL);
				this.state = 4867;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 4864;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 4869;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4879;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 189)) & ~0x1F) === 0 && ((1 << (_la - 189)) & ((1 << (bitmarkParser.OPDOLL - 189)) | (1 << (bitmarkParser.OPRANGLES - 189)) | (1 << (bitmarkParser.OPRANGLEL - 189)) | (1 << (bitmarkParser.OPDANGLE - 189)) | (1 << (bitmarkParser.OPU - 189)) | (1 << (bitmarkParser.OPB - 189)) | (1 << (bitmarkParser.OPQ - 189)) | (1 << (bitmarkParser.OPA - 189)) | (1 << (bitmarkParser.OPS - 189)) | (1 << (bitmarkParser.OPHASH - 189)) | (1 << (bitmarkParser.OPC - 189)) | (1 << (bitmarkParser.COLON - 189)) | (1 << (bitmarkParser.AMP - 189)) | (1 << (bitmarkParser.Greater - 189)) | (1 << (bitmarkParser.Less - 189)) | (1 << (bitmarkParser.RightAngle - 189)) | (1 << (bitmarkParser.RightArrow - 189)) | (1 << (bitmarkParser.DBLEQ - 189)) | (1 << (bitmarkParser.QUOTE_INDEX - 189)))) !== 0) || ((((_la - 221)) & ~0x1F) === 0 && ((1 << (_la - 221)) & ((1 << (bitmarkParser.DCANY - 221)) | (1 << (bitmarkParser.ArticleText - 221)) | (1 << (bitmarkParser.NUMERIC - 221)) | (1 << (bitmarkParser.STRING - 221)) | (1 << (bitmarkParser.NOTBITMARK - 221)) | (1 << (bitmarkParser.ELIPSIS - 221)) | (1 << (bitmarkParser.SENTENCE - 221)) | (1 << (bitmarkParser.BARSTRING - 221)) | (1 << (bitmarkParser.AtProgress - 221)) | (1 << (bitmarkParser.AtReference - 221)) | (1 << (bitmarkParser.AtProgressPoints - 221)) | (1 << (bitmarkParser.AtExampleWithStr - 221)) | (1 << (bitmarkParser.AtExamplecol - 221)) | (1 << (bitmarkParser.AtExamplecl - 221)) | (1 << (bitmarkParser.AtSampleSolution - 221)) | (1 << (bitmarkParser.AtPartialAnswerS - 221)) | (1 << (bitmarkParser.AtPartialAnswer - 221)) | (1 << (bitmarkParser.AtLabeltrue - 221)) | (1 << (bitmarkParser.AtLabelfalse - 221)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.OpAtCopyright - 258)) | (1 << (bitmarkParser.OpAtIsTracked - 258)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 258)) | (1 << (bitmarkParser.AtDate - 258)) | (1 << (bitmarkParser.AmpAudio - 258)) | (1 << (bitmarkParser.AmpImage - 258)) | (1 << (bitmarkParser.AmpVideo - 258)) | (1 << (bitmarkParser.AmpArticle - 258)) | (1 << (bitmarkParser.AmpDocument - 258)) | (1 << (bitmarkParser.AmpApp - 258)) | (1 << (bitmarkParser.AmpWebsite - 258)) | (1 << (bitmarkParser.AmpStillImageFilm - 258)) | (1 << (bitmarkParser.OpAmpAudio - 258)) | (1 << (bitmarkParser.OpAmpImage - 258)) | (1 << (bitmarkParser.OpAmpImageZoom - 258)) | (1 << (bitmarkParser.OpAmpVideo - 258)) | (1 << (bitmarkParser.OpAmpArticle - 258)) | (1 << (bitmarkParser.OpAmpDocument - 258)) | (1 << (bitmarkParser.OpAmpApp - 258)) | (1 << (bitmarkParser.OpAmpWebsite - 258)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 258)) | (1 << (bitmarkParser.BracEnclose - 258)) | (1 << (bitmarkParser.AmpAudioLink - 258)) | (1 << (bitmarkParser.AmpImageLink - 258)) | (1 << (bitmarkParser.AmpVideoLink - 258)) | (1 << (bitmarkParser.AmpArticleLink - 258)))) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (bitmarkParser.AmpDocumentLink - 290)) | (1 << (bitmarkParser.AmpAppLink - 290)) | (1 << (bitmarkParser.AmpWebsiteLink - 290)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 290)) | (1 << (bitmarkParser.OpAmpAudioLink - 290)) | (1 << (bitmarkParser.OpAmpImageLink - 290)) | (1 << (bitmarkParser.OpAmpVideoLink - 290)) | (1 << (bitmarkParser.OpAmpArticleLink - 290)) | (1 << (bitmarkParser.OpAmpDocumentLink - 290)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 290)) | (1 << (bitmarkParser.OpAmpAppLink - 290)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 290)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 290)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 290)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 290)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 290)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 290)) | (1 << (bitmarkParser.BitmarkMinus - 290)) | (1 << (bitmarkParser.BitmarkPlus - 290)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
					{
					{
					this.state = 4870;
					this.bitElem();
					this.state = 4874;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 4871;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 4876;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4881;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4890;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4882;
						_la = this._input.LA(1);
						if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4883;
						this.s_and_w();
						this.state = 4886;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4884;
							this.match(bitmarkParser.NL);
							this.state = 4885;
							this.bullet_item();
							}
							}
							this.state = 4888;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (_la === bitmarkParser.NL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4892;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 615, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 4894;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4898;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 616, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4895;
						this.match(bitmarkParser.NL);
						}
						}
					}
					this.state = 4900;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 616, this._ctx);
				}
				this.state = 4914;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 619, this._ctx) ) {
				case 1:
					{
					this.state = 4901;
					this.resource();
					this.state = 4911;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 618, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4905;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (_la === bitmarkParser.NL) {
								{
								{
								this.state = 4902;
								this.match(bitmarkParser.NL);
								}
								}
								this.state = 4907;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 4908;
							this.resource();
							}
							}
						}
						this.state = 4913;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 618, this._ctx);
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bullet_item(): Bullet_itemContext {
		let _localctx: Bullet_itemContext = new Bullet_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, bitmarkParser.RULE_bullet_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4918;
			this.match(bitmarkParser.OPBUL);
			this.state = 4919;
			this.s_and_w();
			this.state = 4920;
			this.match(bitmarkParser.CL);
			this.state = 4922;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.AtPoints) {
				{
				this.state = 4921;
				this.atpoint();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public survey(): SurveyContext {
		let _localctx: SurveyContext = new SurveyContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, bitmarkParser.RULE_survey);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4924;
			this.match(bitmarkParser.BitSurvey);
			this.state = 4925;
			this.format();
			this.state = 4926;
			this.match(bitmarkParser.CL);
			this.state = 4930;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4927;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4932;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
			}
			this.state = 4942;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 624, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4933;
					this.bitElem();
					this.state = 4937;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 623, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4934;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4939;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 623, this._ctx);
					}
					}
					}
				}
				this.state = 4944;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 624, this._ctx);
			}
			this.state = 4966;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2) {
				{
				this.state = 4960;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4945;
						_la = this._input.LA(1);
						if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4947;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
							{
							this.state = 4946;
							this.s_and_w();
							}
						}

						this.state = 4956;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4952;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (_la === bitmarkParser.NL) {
								{
								{
								this.state = 4949;
								this.match(bitmarkParser.NL);
								}
								}
								this.state = 4954;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 4955;
							this.bullet_item();
							}
							}
							this.state = 4958;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4962;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 628, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 4964;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public survey_1(): Survey_1Context {
		let _localctx: Survey_1Context = new Survey_1Context(this._ctx, this.state);
		this.enterRule(_localctx, 400, bitmarkParser.RULE_survey_1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4968;
			this.match(bitmarkParser.BitSurvey1);
			this.state = 4969;
			this.format();
			this.state = 4970;
			this.match(bitmarkParser.CL);
			this.state = 4974;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 630, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4971;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 4976;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 630, this._ctx);
			}
			this.state = 4986;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 632, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4977;
					this.bitElem();
					this.state = 4981;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 631, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4978;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 4983;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 631, this._ctx);
					}
					}
					}
				}
				this.state = 4988;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 632, this._ctx);
			}
			this.state = 5003;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2) {
				{
				this.state = 4997;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4989;
						_la = this._input.LA(1);
						if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4990;
						this.s_and_w();
						this.state = 4993;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4991;
							this.match(bitmarkParser.NL);
							this.state = 4992;
							this.bullet_item();
							}
							}
							this.state = 4995;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (_la === bitmarkParser.NL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4999;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 634, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 5001;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public survey_anonymous(): Survey_anonymousContext {
		let _localctx: Survey_anonymousContext = new Survey_anonymousContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, bitmarkParser.RULE_survey_anonymous);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5005;
			this.match(bitmarkParser.BitSurveyanon);
			this.state = 5006;
			this.format();
			this.state = 5007;
			this.match(bitmarkParser.CL);
			this.state = 5011;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 636, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5008;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 5013;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 636, this._ctx);
			}
			this.state = 5023;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 638, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5014;
					this.bitElem();
					this.state = 5018;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 637, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5015;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 5020;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 637, this._ctx);
					}
					}
					}
				}
				this.state = 5025;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 638, this._ctx);
			}
			this.state = 5040;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2) {
				{
				this.state = 5034;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 5026;
						_la = this._input.LA(1);
						if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5027;
						this.s_and_w();
						this.state = 5030;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5028;
							this.match(bitmarkParser.NL);
							this.state = 5029;
							this.bullet_item();
							}
							}
							this.state = 5032;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (_la === bitmarkParser.NL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5036;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 640, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 5038;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public survey_anonymous_1(): Survey_anonymous_1Context {
		let _localctx: Survey_anonymous_1Context = new Survey_anonymous_1Context(this._ctx, this.state);
		this.enterRule(_localctx, 404, bitmarkParser.RULE_survey_anonymous_1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5042;
			this.match(bitmarkParser.BitSurveyanon1);
			this.state = 5043;
			this.format();
			this.state = 5044;
			this.match(bitmarkParser.CL);
			this.state = 5048;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 642, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5045;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 5050;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 642, this._ctx);
			}
			this.state = 5060;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 644, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5051;
					this.bitElem();
					this.state = 5055;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 643, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5052;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 5057;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 643, this._ctx);
					}
					}
					}
				}
				this.state = 5062;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 644, this._ctx);
			}
			this.state = 5077;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2) {
				{
				this.state = 5071;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 5063;
						_la = this._input.LA(1);
						if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5064;
						this.s_and_w();
						this.state = 5067;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5065;
							this.match(bitmarkParser.NL);
							this.state = 5066;
							this.bullet_item();
							}
							}
							this.state = 5069;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (_la === bitmarkParser.NL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5073;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 646, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 5075;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public self_assessment(): Self_assessmentContext {
		let _localctx: Self_assessmentContext = new Self_assessmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, bitmarkParser.RULE_self_assessment);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5160;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 661, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5079;
				this.match(bitmarkParser.BitSelfassess);
				this.state = 5080;
				this.format();
				this.state = 5081;
				this.match(bitmarkParser.CL);
				this.state = 5085;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 648, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5082;
						this.match(bitmarkParser.NL);
						}
						}
					}
					this.state = 5087;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 648, this._ctx);
				}
				this.state = 5097;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 650, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5088;
						this.bitElem();
						this.state = 5092;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 649, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 5089;
								this.match(bitmarkParser.NL);
								}
								}
							}
							this.state = 5094;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 649, this._ctx);
						}
						}
						}
					}
					this.state = 5099;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 650, this._ctx);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5100;
				this.match(bitmarkParser.BitSelfassess);
				this.state = 5101;
				this.format();
				this.state = 5102;
				this.match(bitmarkParser.CL);
				this.state = 5106;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 5103;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 5108;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5118;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 189)) & ~0x1F) === 0 && ((1 << (_la - 189)) & ((1 << (bitmarkParser.OPDOLL - 189)) | (1 << (bitmarkParser.OPRANGLES - 189)) | (1 << (bitmarkParser.OPRANGLEL - 189)) | (1 << (bitmarkParser.OPDANGLE - 189)) | (1 << (bitmarkParser.OPU - 189)) | (1 << (bitmarkParser.OPB - 189)) | (1 << (bitmarkParser.OPQ - 189)) | (1 << (bitmarkParser.OPA - 189)) | (1 << (bitmarkParser.OPS - 189)) | (1 << (bitmarkParser.OPHASH - 189)) | (1 << (bitmarkParser.OPC - 189)) | (1 << (bitmarkParser.COLON - 189)) | (1 << (bitmarkParser.AMP - 189)) | (1 << (bitmarkParser.Greater - 189)) | (1 << (bitmarkParser.Less - 189)) | (1 << (bitmarkParser.RightAngle - 189)) | (1 << (bitmarkParser.RightArrow - 189)) | (1 << (bitmarkParser.DBLEQ - 189)) | (1 << (bitmarkParser.QUOTE_INDEX - 189)))) !== 0) || ((((_la - 221)) & ~0x1F) === 0 && ((1 << (_la - 221)) & ((1 << (bitmarkParser.DCANY - 221)) | (1 << (bitmarkParser.ArticleText - 221)) | (1 << (bitmarkParser.NUMERIC - 221)) | (1 << (bitmarkParser.STRING - 221)) | (1 << (bitmarkParser.NOTBITMARK - 221)) | (1 << (bitmarkParser.ELIPSIS - 221)) | (1 << (bitmarkParser.SENTENCE - 221)) | (1 << (bitmarkParser.BARSTRING - 221)) | (1 << (bitmarkParser.AtProgress - 221)) | (1 << (bitmarkParser.AtReference - 221)) | (1 << (bitmarkParser.AtProgressPoints - 221)) | (1 << (bitmarkParser.AtExampleWithStr - 221)) | (1 << (bitmarkParser.AtExamplecol - 221)) | (1 << (bitmarkParser.AtExamplecl - 221)) | (1 << (bitmarkParser.AtSampleSolution - 221)) | (1 << (bitmarkParser.AtPartialAnswerS - 221)) | (1 << (bitmarkParser.AtPartialAnswer - 221)) | (1 << (bitmarkParser.AtLabeltrue - 221)) | (1 << (bitmarkParser.AtLabelfalse - 221)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.OpAtCopyright - 258)) | (1 << (bitmarkParser.OpAtIsTracked - 258)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 258)) | (1 << (bitmarkParser.AtDate - 258)) | (1 << (bitmarkParser.AmpAudio - 258)) | (1 << (bitmarkParser.AmpImage - 258)) | (1 << (bitmarkParser.AmpVideo - 258)) | (1 << (bitmarkParser.AmpArticle - 258)) | (1 << (bitmarkParser.AmpDocument - 258)) | (1 << (bitmarkParser.AmpApp - 258)) | (1 << (bitmarkParser.AmpWebsite - 258)) | (1 << (bitmarkParser.AmpStillImageFilm - 258)) | (1 << (bitmarkParser.OpAmpAudio - 258)) | (1 << (bitmarkParser.OpAmpImage - 258)) | (1 << (bitmarkParser.OpAmpImageZoom - 258)) | (1 << (bitmarkParser.OpAmpVideo - 258)) | (1 << (bitmarkParser.OpAmpArticle - 258)) | (1 << (bitmarkParser.OpAmpDocument - 258)) | (1 << (bitmarkParser.OpAmpApp - 258)) | (1 << (bitmarkParser.OpAmpWebsite - 258)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 258)) | (1 << (bitmarkParser.BracEnclose - 258)) | (1 << (bitmarkParser.AmpAudioLink - 258)) | (1 << (bitmarkParser.AmpImageLink - 258)) | (1 << (bitmarkParser.AmpVideoLink - 258)) | (1 << (bitmarkParser.AmpArticleLink - 258)))) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (bitmarkParser.AmpDocumentLink - 290)) | (1 << (bitmarkParser.AmpAppLink - 290)) | (1 << (bitmarkParser.AmpWebsiteLink - 290)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 290)) | (1 << (bitmarkParser.OpAmpAudioLink - 290)) | (1 << (bitmarkParser.OpAmpImageLink - 290)) | (1 << (bitmarkParser.OpAmpVideoLink - 290)) | (1 << (bitmarkParser.OpAmpArticleLink - 290)) | (1 << (bitmarkParser.OpAmpDocumentLink - 290)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 290)) | (1 << (bitmarkParser.OpAmpAppLink - 290)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 290)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 290)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 290)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 290)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 290)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 290)) | (1 << (bitmarkParser.BitmarkMinus - 290)) | (1 << (bitmarkParser.BitmarkPlus - 290)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
					{
					{
					this.state = 5109;
					this.bitElem();
					this.state = 5113;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 5110;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 5115;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 5120;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5134;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 5121;
						_la = this._input.LA(1);
						if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5122;
						this.self_assess_s_and_w();
						this.state = 5130;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5126;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (_la === bitmarkParser.NL) {
								{
								{
								this.state = 5123;
								this.match(bitmarkParser.NL);
								}
								}
								this.state = 5128;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 5129;
							this.bullet_item();
							}
							}
							this.state = 5132;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5136;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 656, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 5138;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5142;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 657, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5139;
						this.match(bitmarkParser.NL);
						}
						}
					}
					this.state = 5144;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 657, this._ctx);
				}
				this.state = 5158;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 660, this._ctx) ) {
				case 1:
					{
					this.state = 5145;
					this.resource();
					this.state = 5155;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 659, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5149;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (_la === bitmarkParser.NL) {
								{
								{
								this.state = 5146;
								this.match(bitmarkParser.NL);
								}
								}
								this.state = 5151;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 5152;
							this.resource();
							}
							}
						}
						this.state = 5157;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 659, this._ctx);
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public self_assess_s_and_w(): Self_assess_s_and_wContext {
		let _localctx: Self_assess_s_and_wContext = new Self_assess_s_and_wContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, bitmarkParser.RULE_self_assess_s_and_w);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5163;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5162;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === bitmarkParser.OPBUL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5165;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 662, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public atpoint(): AtpointContext {
		let _localctx: AtpointContext = new AtpointContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, bitmarkParser.RULE_atpoint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5167;
			this.match(bitmarkParser.AtPoints);
			this.state = 5168;
			this.match(bitmarkParser.NUMERIC);
			this.state = 5169;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public format(): FormatContext {
		let _localctx: FormatContext = new FormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, bitmarkParser.RULE_format);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5174;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 663, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5171;
					this.resource_format();
					}
					}
				}
				this.state = 5176;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 663, this._ctx);
			}
			this.state = 5182;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpImageZoom - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpPdf - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpDocumentDownload - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 305)) & ~0x1F) === 0 && ((1 << (_la - 305)) & ((1 << (bitmarkParser.AmpVideoEmbed - 305)) | (1 << (bitmarkParser.AmpDocumentEmbed - 305)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 305)) | (1 << (bitmarkParser.ColonText - 305)) | (1 << (bitmarkParser.ColonJson - 305)))) !== 0)) {
				{
				this.state = 5180;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case bitmarkParser.ColonText:
					{
					this.state = 5177;
					this.match(bitmarkParser.ColonText);
					}
					break;
				case bitmarkParser.ColonJson:
					{
					this.state = 5178;
					this.match(bitmarkParser.ColonJson);
					}
					break;
				case bitmarkParser.AmpAudio:
				case bitmarkParser.AmpImage:
				case bitmarkParser.AmpImageZoom:
				case bitmarkParser.AmpVideo:
				case bitmarkParser.AmpArticle:
				case bitmarkParser.AmpDocument:
				case bitmarkParser.AmpApp:
				case bitmarkParser.AmpWebsite:
				case bitmarkParser.AmpStillImageFilm:
				case bitmarkParser.AmpPdf:
				case bitmarkParser.AmpAudioLink:
				case bitmarkParser.AmpImageLink:
				case bitmarkParser.AmpVideoLink:
				case bitmarkParser.AmpArticleLink:
				case bitmarkParser.AmpDocumentLink:
				case bitmarkParser.AmpDocumentDownload:
				case bitmarkParser.AmpAppLink:
				case bitmarkParser.AmpWebsiteLink:
				case bitmarkParser.AmpStillImageFilmLink:
				case bitmarkParser.AmpVideoEmbed:
				case bitmarkParser.AmpDocumentEmbed:
				case bitmarkParser.AmpStillImageFilmEmbed:
					{
					this.state = 5179;
					this.resource_format_extra();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 5184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resource_format(): Resource_formatContext {
		let _localctx: Resource_formatContext = new Resource_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, bitmarkParser.RULE_resource_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5185;
			_la = this._input.LA(1);
			if (!(((((_la - 269)) & ~0x1F) === 0 && ((1 << (_la - 269)) & ((1 << (bitmarkParser.AmpArticle - 269)) | (1 << (bitmarkParser.AmpDocument - 269)) | (1 << (bitmarkParser.AmpWebsite - 269)) | (1 << (bitmarkParser.AmpStillImageFilm - 269)) | (1 << (bitmarkParser.AmpAudioLink - 269)) | (1 << (bitmarkParser.AmpImageLink - 269)) | (1 << (bitmarkParser.AmpVideoLink - 269)) | (1 << (bitmarkParser.AmpArticleLink - 269)) | (1 << (bitmarkParser.AmpDocumentLink - 269)) | (1 << (bitmarkParser.AmpDocumentDownload - 269)) | (1 << (bitmarkParser.AmpAppLink - 269)) | (1 << (bitmarkParser.AmpWebsiteLink - 269)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 269)))) !== 0) || ((((_la - 305)) & ~0x1F) === 0 && ((1 << (_la - 305)) & ((1 << (bitmarkParser.AmpVideoEmbed - 305)) | (1 << (bitmarkParser.AmpAudioEmbed - 305)) | (1 << (bitmarkParser.AmpDocumentEmbed - 305)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 305)) | (1 << (bitmarkParser.BitmarkMinus - 305)) | (1 << (bitmarkParser.BitmarkPlus - 305)) | (1 << (bitmarkParser.ColonJson - 305)) | (1 << (bitmarkParser.Prosemirror - 305)) | (1 << (bitmarkParser.Placeholder - 305)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resource_format_extra(): Resource_format_extraContext {
		let _localctx: Resource_format_extraContext = new Resource_format_extraContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, bitmarkParser.RULE_resource_format_extra);
		try {
			this.state = 5196;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AmpImage:
			case bitmarkParser.AmpImageZoom:
			case bitmarkParser.AmpImageLink:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5187;
				this.image_format();
				}
				break;
			case bitmarkParser.AmpAudio:
			case bitmarkParser.AmpAudioLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5188;
				this.audio_format();
				}
				break;
			case bitmarkParser.AmpVideo:
			case bitmarkParser.AmpVideoLink:
			case bitmarkParser.AmpVideoEmbed:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5189;
				this.video_format();
				}
				break;
			case bitmarkParser.AmpArticle:
			case bitmarkParser.AmpArticleLink:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5190;
				this.article_format();
				}
				break;
			case bitmarkParser.AmpDocument:
			case bitmarkParser.AmpDocumentLink:
			case bitmarkParser.AmpDocumentDownload:
			case bitmarkParser.AmpDocumentEmbed:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5191;
				this.document_format();
				}
				break;
			case bitmarkParser.AmpApp:
			case bitmarkParser.AmpAppLink:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5192;
				this.app_format();
				}
				break;
			case bitmarkParser.AmpWebsite:
			case bitmarkParser.AmpWebsiteLink:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5193;
				this.website_format();
				}
				break;
			case bitmarkParser.AmpStillImageFilm:
			case bitmarkParser.AmpStillImageFilmLink:
			case bitmarkParser.AmpStillImageFilmEmbed:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5194;
				this.stillimagefilm_format();
				}
				break;
			case bitmarkParser.AmpPdf:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5195;
				this.match(bitmarkParser.AmpPdf);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public format2(): Format2Context {
		let _localctx: Format2Context = new Format2Context(this._ctx, this.state);
		this.enterRule(_localctx, 418, bitmarkParser.RULE_format2);
		try {
			this.state = 5204;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.BitmarkMinus:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5198;
				this.match(bitmarkParser.BitmarkMinus);
				}
				break;
			case bitmarkParser.BitmarkPlus:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5199;
				this.match(bitmarkParser.BitmarkPlus);
				}
				break;
			case bitmarkParser.ColonText:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5200;
				this.match(bitmarkParser.ColonText);
				}
				break;
			case bitmarkParser.Placeholder:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5201;
				this.match(bitmarkParser.Placeholder);
				}
				break;
			case bitmarkParser.ColonJson:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5202;
				this.match(bitmarkParser.ColonJson);
				}
				break;
			case bitmarkParser.CL:
				this.enterOuterAlt(_localctx, 6);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_format(): Image_formatContext {
		let _localctx: Image_formatContext = new Image_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, bitmarkParser.RULE_image_format);
		let _la: number;
		try {
			this.state = 5219;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AmpImage:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5206;
				this.match(bitmarkParser.AmpImage);
				this.state = 5209;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case bitmarkParser.Image_type:
					{
					{
					this.state = 5207;
					this.match(bitmarkParser.Image_type);
					}
					}
					break;
				case bitmarkParser.DotArticleAtt:
					{
					{
					this.state = 5208;
					this.match(bitmarkParser.DotArticleAtt);
					}
					}
					break;
				case bitmarkParser.CL:
				case bitmarkParser.AmpAudio:
				case bitmarkParser.AmpImage:
				case bitmarkParser.AmpImageZoom:
				case bitmarkParser.AmpVideo:
				case bitmarkParser.AmpArticle:
				case bitmarkParser.AmpDocument:
				case bitmarkParser.AmpApp:
				case bitmarkParser.AmpWebsite:
				case bitmarkParser.AmpStillImageFilm:
				case bitmarkParser.AmpPdf:
				case bitmarkParser.AmpAudioLink:
				case bitmarkParser.AmpImageLink:
				case bitmarkParser.AmpVideoLink:
				case bitmarkParser.AmpArticleLink:
				case bitmarkParser.AmpDocumentLink:
				case bitmarkParser.AmpDocumentDownload:
				case bitmarkParser.AmpAppLink:
				case bitmarkParser.AmpWebsiteLink:
				case bitmarkParser.AmpStillImageFilmLink:
				case bitmarkParser.AmpVideoEmbed:
				case bitmarkParser.AmpDocumentEmbed:
				case bitmarkParser.AmpStillImageFilmEmbed:
				case bitmarkParser.ColonText:
				case bitmarkParser.ColonJson:
					break;
				default:
					break;
				}
				}
				break;
			case bitmarkParser.AmpImageLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5211;
				this.match(bitmarkParser.AmpImageLink);
				this.state = 5213;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.Image_type) {
					{
					this.state = 5212;
					this.match(bitmarkParser.Image_type);
					}
				}

				}
				break;
			case bitmarkParser.AmpImageZoom:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5215;
				this.match(bitmarkParser.AmpImageZoom);
				this.state = 5217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.Image_type) {
					{
					this.state = 5216;
					this.match(bitmarkParser.Image_type);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public video_format(): Video_formatContext {
		let _localctx: Video_formatContext = new Video_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, bitmarkParser.RULE_video_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5221;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpVideo || _la === bitmarkParser.AmpVideoLink || _la === bitmarkParser.AmpVideoEmbed)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.COLON) {
				{
				this.state = 5222;
				this.match(bitmarkParser.COLON);
				this.state = 5223;
				this.match(bitmarkParser.Video_type);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public article_format(): Article_formatContext {
		let _localctx: Article_formatContext = new Article_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, bitmarkParser.RULE_article_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5226;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpArticle || _la === bitmarkParser.AmpArticleLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public document_format(): Document_formatContext {
		let _localctx: Document_formatContext = new Document_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, bitmarkParser.RULE_document_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5228;
			_la = this._input.LA(1);
			if (!(((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.AmpDocument - 270)) | (1 << (bitmarkParser.AmpDocumentLink - 270)) | (1 << (bitmarkParser.AmpDocumentDownload - 270)))) !== 0) || _la === bitmarkParser.AmpDocumentEmbed)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public app_format(): App_formatContext {
		let _localctx: App_formatContext = new App_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, bitmarkParser.RULE_app_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5230;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpApp || _la === bitmarkParser.AmpAppLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public website_format(): Website_formatContext {
		let _localctx: Website_formatContext = new Website_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, bitmarkParser.RULE_website_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5232;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpWebsite || _la === bitmarkParser.AmpWebsiteLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stillimagefilm_format(): Stillimagefilm_formatContext {
		let _localctx: Stillimagefilm_formatContext = new Stillimagefilm_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, bitmarkParser.RULE_stillimagefilm_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5234;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpStillImageFilm || _la === bitmarkParser.AmpStillImageFilmLink || _la === bitmarkParser.AmpStillImageFilmEmbed)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_article_format(): Op_article_formatContext {
		let _localctx: Op_article_formatContext = new Op_article_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, bitmarkParser.RULE_op_article_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5236;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.OpAmpArticle || _la === bitmarkParser.OpAmpArticleLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_document_format(): Op_document_formatContext {
		let _localctx: Op_document_formatContext = new Op_document_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, bitmarkParser.RULE_op_document_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5238;
			_la = this._input.LA(1);
			if (!(((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (bitmarkParser.OpAmpDocument - 281)) | (1 << (bitmarkParser.OpAmpDocumentLink - 281)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 281)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 281)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_app_format(): Op_app_formatContext {
		let _localctx: Op_app_formatContext = new Op_app_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, bitmarkParser.RULE_op_app_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5240;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.OpAmpApp || _la === bitmarkParser.OpAmpAppLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_website_format(): Op_website_formatContext {
		let _localctx: Op_website_formatContext = new Op_website_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, bitmarkParser.RULE_op_website_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5242;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.OpAmpWebsite || _la === bitmarkParser.OpAmpWebsiteLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_video_format(): Op_video_formatContext {
		let _localctx: Op_video_formatContext = new Op_video_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, bitmarkParser.RULE_op_video_format);
		try {
			this.state = 5259;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OpAmpVideo:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5244;
				this.match(bitmarkParser.OpAmpVideo);
				this.state = 5247;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 673, this._ctx) ) {
				case 1:
					{
					this.state = 5245;
					this.match(bitmarkParser.COLON);
					this.state = 5246;
					this.match(bitmarkParser.Video_type);
					}
					break;
				}
				}
				break;
			case bitmarkParser.OpAmpVideoLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5249;
				this.match(bitmarkParser.OpAmpVideoLink);
				this.state = 5252;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 674, this._ctx) ) {
				case 1:
					{
					this.state = 5250;
					this.match(bitmarkParser.COLON);
					this.state = 5251;
					this.match(bitmarkParser.Video_type);
					}
					break;
				}
				}
				break;
			case bitmarkParser.OpAmpVideoEmbed:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5254;
				this.match(bitmarkParser.OpAmpVideoEmbed);
				this.state = 5257;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 675, this._ctx) ) {
				case 1:
					{
					this.state = 5255;
					this.match(bitmarkParser.COLON);
					this.state = 5256;
					this.match(bitmarkParser.Video_type);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_stillimagefilm_format(): Op_stillimagefilm_formatContext {
		let _localctx: Op_stillimagefilm_formatContext = new Op_stillimagefilm_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, bitmarkParser.RULE_op_stillimagefilm_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5261;
			_la = this._input.LA(1);
			if (!(((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & ((1 << (bitmarkParser.OpAmpStillImageFilm - 284)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 284)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 284)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public articlebit(): ArticlebitContext {
		let _localctx: ArticlebitContext = new ArticlebitContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, bitmarkParser.RULE_articlebit);
		try {
			this.state = 5269;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OpAmpArticle:
			case bitmarkParser.OpAmpArticleLink:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5263;
				this.op_article_format();
				this.state = 5264;
				this.match(bitmarkParser.COLON);
				this.state = 5265;
				this.url();
				this.state = 5266;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.ArticleText:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5268;
				this.match(bitmarkParser.ArticleText);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public documentbit(): DocumentbitContext {
		let _localctx: DocumentbitContext = new DocumentbitContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, bitmarkParser.RULE_documentbit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5271;
			this.op_document_format();
			this.state = 5272;
			this.match(bitmarkParser.COLON);
			this.state = 5273;
			this.url();
			this.state = 5274;
			this.match(bitmarkParser.CL);
			this.state = 5279;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPATALT) {
				{
				this.state = 5275;
				this.match(bitmarkParser.OPATALT);
				this.state = 5276;
				this.words();
				this.state = 5277;
				this.match(bitmarkParser.CL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public websitebit(): WebsitebitContext {
		let _localctx: WebsitebitContext = new WebsitebitContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, bitmarkParser.RULE_websitebit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5281;
			this.op_website_format();
			this.state = 5282;
			this.match(bitmarkParser.COLON);
			this.state = 5283;
			this.url();
			this.state = 5284;
			this.match(bitmarkParser.CL);
			this.state = 5289;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPATALT) {
				{
				this.state = 5285;
				this.match(bitmarkParser.OPATALT);
				this.state = 5286;
				this.words();
				this.state = 5287;
				this.match(bitmarkParser.CL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public appbit(): AppbitContext {
		let _localctx: AppbitContext = new AppbitContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, bitmarkParser.RULE_appbit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5291;
			this.op_app_format();
			this.state = 5292;
			this.match(bitmarkParser.COLON);
			this.state = 5295;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.URL:
				{
				this.state = 5293;
				this.url();
				}
				break;
			case bitmarkParser.TEL:
				{
				this.state = 5294;
				this.telephone();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5297;
			this.match(bitmarkParser.CL);
			this.state = 5302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPATALT) {
				{
				this.state = 5298;
				this.match(bitmarkParser.OPATALT);
				this.state = 5299;
				this.words();
				this.state = 5300;
				this.match(bitmarkParser.CL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stillimagefilmbit(): StillimagefilmbitContext {
		let _localctx: StillimagefilmbitContext = new StillimagefilmbitContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, bitmarkParser.RULE_stillimagefilmbit);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5304;
			this.stillimg_one();
			this.state = 5308;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 682, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5305;
					this.resource_chained();
					}
					}
				}
				this.state = 5310;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 682, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stillimg_one(): Stillimg_oneContext {
		let _localctx: Stillimg_oneContext = new Stillimg_oneContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, bitmarkParser.RULE_stillimg_one);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5311;
			this.op_stillimagefilm_format();
			this.state = 5312;
			this.match(bitmarkParser.COLON);
			this.state = 5316;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S) {
				{
				{
				this.state = 5313;
				this.match(bitmarkParser.S);
				}
				}
				this.state = 5318;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5319;
			this.url();
			this.state = 5320;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public videobit(): VideobitContext {
		let _localctx: VideobitContext = new VideobitContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, bitmarkParser.RULE_videobit);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5322;
			this.video_one();
			this.state = 5326;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 684, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5323;
					this.resource_chained();
					}
					}
				}
				this.state = 5328;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 684, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public video_one(): Video_oneContext {
		let _localctx: Video_oneContext = new Video_oneContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, bitmarkParser.RULE_video_one);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5329;
			this.op_video_format();
			this.state = 5330;
			this.match(bitmarkParser.COLON);
			this.state = 5331;
			this.url();
			this.state = 5332;
			this.match(bitmarkParser.CL);
			this.state = 5337;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 685, this._ctx) ) {
			case 1:
				{
				this.state = 5333;
				this.match(bitmarkParser.OPATALT);
				this.state = 5334;
				this.words();
				this.state = 5335;
				this.match(bitmarkParser.CL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public imagebit(): ImagebitContext {
		let _localctx: ImagebitContext = new ImagebitContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, bitmarkParser.RULE_imagebit);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5339;
			this.image_one();
			this.state = 5343;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 686, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5340;
					this.image_chained();
					}
					}
				}
				this.state = 5345;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 686, this._ctx);
			}
			this.state = 5348;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 687, this._ctx) ) {
			case 1:
				{
				this.state = 5346;
				this.match(bitmarkParser.NL);
				this.state = 5347;
				this.match(bitmarkParser.ShowInIndex);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_one(): Image_oneContext {
		let _localctx: Image_oneContext = new Image_oneContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, bitmarkParser.RULE_image_one);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5350;
			this.op_image_format();
			this.state = 5351;
			this.match(bitmarkParser.COLON);
			this.state = 5355;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S) {
				{
				{
				this.state = 5352;
				this.match(bitmarkParser.S);
				}
				}
				this.state = 5357;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5358;
			this.url();
			this.state = 5359;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_image_format(): Op_image_formatContext {
		let _localctx: Op_image_formatContext = new Op_image_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, bitmarkParser.RULE_op_image_format);
		let _la: number;
		try {
			this.state = 5374;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OpAmpImage:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5361;
				this.match(bitmarkParser.OpAmpImage);
				this.state = 5364;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case bitmarkParser.Image_type:
					{
					{
					this.state = 5362;
					this.match(bitmarkParser.Image_type);
					}
					}
					break;
				case bitmarkParser.DotArticleAtt:
					{
					{
					this.state = 5363;
					this.match(bitmarkParser.DotArticleAtt);
					}
					}
					break;
				case bitmarkParser.COLON:
					break;
				default:
					break;
				}
				}
				break;
			case bitmarkParser.OpAmpImageLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5366;
				this.match(bitmarkParser.OpAmpImageLink);
				this.state = 5368;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.Image_type) {
					{
					this.state = 5367;
					this.match(bitmarkParser.Image_type);
					}
				}

				}
				break;
			case bitmarkParser.OpAmpImageZoom:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5370;
				this.match(bitmarkParser.OpAmpImageZoom);
				this.state = 5372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.Image_type) {
					{
					this.state = 5371;
					this.match(bitmarkParser.Image_type);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_chained(): Image_chainedContext {
		let _localctx: Image_chainedContext = new Image_chainedContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, bitmarkParser.RULE_image_chained);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5393;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AtSrc:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5376;
				this.match(bitmarkParser.AtSrc);
				this.state = 5377;
				this.match(bitmarkParser.COLON);
				this.state = 5378;
				this.url();
				this.state = 5379;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.AtWidth:
			case bitmarkParser.AtHeight:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5381;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5382;
				this.match(bitmarkParser.COLON);
				this.state = 5383;
				this.match(bitmarkParser.NUMERIC);
				this.state = 5384;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.OPATALT:
			case bitmarkParser.OpAtCaption:
			case bitmarkParser.OpAtLicense:
			case bitmarkParser.OpAtCopyright:
			case bitmarkParser.OpAtSearch:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5385;
				_la = this._input.LA(1);
				if (!(((((_la - 253)) & ~0x1F) === 0 && ((1 << (_la - 253)) & ((1 << (bitmarkParser.OPATALT - 253)) | (1 << (bitmarkParser.OpAtCaption - 253)) | (1 << (bitmarkParser.OpAtLicense - 253)) | (1 << (bitmarkParser.OpAtCopyright - 253)) | (1 << (bitmarkParser.OpAtSearch - 253)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5389;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 693, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 5386;
						this.matchWildcard();
						}
						}
					}
					this.state = 5391;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 693, this._ctx);
				}
				this.state = 5392;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_chained4match(): Image_chained4matchContext {
		let _localctx: Image_chained4matchContext = new Image_chained4matchContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, bitmarkParser.RULE_image_chained4match);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5412;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AtSrc:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5395;
				this.match(bitmarkParser.AtSrc);
				this.state = 5396;
				this.match(bitmarkParser.COLON);
				this.state = 5397;
				this.url();
				this.state = 5398;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.AtWidth:
			case bitmarkParser.AtHeight:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5400;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5401;
				this.match(bitmarkParser.COLON);
				this.state = 5402;
				this.match(bitmarkParser.NUMERIC);
				this.state = 5403;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.OPATALT:
			case bitmarkParser.OpAtCaption:
			case bitmarkParser.OpAtLicense:
			case bitmarkParser.OpAtCopyright:
			case bitmarkParser.OpAtSearch:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5404;
				_la = this._input.LA(1);
				if (!(((((_la - 253)) & ~0x1F) === 0 && ((1 << (_la - 253)) & ((1 << (bitmarkParser.OPATALT - 253)) | (1 << (bitmarkParser.OpAtCaption - 253)) | (1 << (bitmarkParser.OpAtLicense - 253)) | (1 << (bitmarkParser.OpAtCopyright - 253)) | (1 << (bitmarkParser.OpAtSearch - 253)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5408;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 695, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 5405;
						this.matchWildcard();
						}
						}
					}
					this.state = 5410;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 695, this._ctx);
				}
				this.state = 5411;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public audiobit(): AudiobitContext {
		let _localctx: AudiobitContext = new AudiobitContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, bitmarkParser.RULE_audiobit);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5414;
			this.audio_one();
			this.state = 5418;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 697, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5415;
					this.resource_chained();
					}
					}
				}
				this.state = 5420;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 697, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public audio_one(): Audio_oneContext {
		let _localctx: Audio_oneContext = new Audio_oneContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, bitmarkParser.RULE_audio_one);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5421;
			this.op_audio_format();
			this.state = 5422;
			this.match(bitmarkParser.COLON);
			this.state = 5423;
			this.url();
			this.state = 5424;
			this.match(bitmarkParser.CL);
			this.state = 5429;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 698, this._ctx) ) {
			case 1:
				{
				this.state = 5425;
				this.match(bitmarkParser.OPATALT);
				this.state = 5426;
				this.words();
				this.state = 5427;
				this.match(bitmarkParser.CL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public audio_format(): Audio_formatContext {
		let _localctx: Audio_formatContext = new Audio_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, bitmarkParser.RULE_audio_format);
		let _la: number;
		try {
			this.state = 5441;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AmpAudio:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5431;
				this.match(bitmarkParser.AmpAudio);
				this.state = 5434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.COLON) {
					{
					this.state = 5432;
					this.match(bitmarkParser.COLON);
					this.state = 5433;
					this.match(bitmarkParser.Audio_type);
					}
				}

				}
				break;
			case bitmarkParser.AmpAudioLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5436;
				this.match(bitmarkParser.AmpAudioLink);
				this.state = 5439;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.COLON) {
					{
					this.state = 5437;
					this.match(bitmarkParser.COLON);
					this.state = 5438;
					this.match(bitmarkParser.Audio_type);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_audio_format(): Op_audio_formatContext {
		let _localctx: Op_audio_formatContext = new Op_audio_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, bitmarkParser.RULE_op_audio_format);
		try {
			this.state = 5458;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OpAmpAudio:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5443;
				this.match(bitmarkParser.OpAmpAudio);
				this.state = 5446;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 702, this._ctx) ) {
				case 1:
					{
					this.state = 5444;
					this.match(bitmarkParser.COLON);
					this.state = 5445;
					this.match(bitmarkParser.Audio_type);
					}
					break;
				}
				}
				break;
			case bitmarkParser.OpAmpAudioLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5448;
				this.match(bitmarkParser.OpAmpAudioLink);
				this.state = 5451;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 703, this._ctx) ) {
				case 1:
					{
					this.state = 5449;
					this.match(bitmarkParser.COLON);
					this.state = 5450;
					this.match(bitmarkParser.Audio_type);
					}
					break;
				}
				}
				break;
			case bitmarkParser.OpAmpAudioEmbed:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5453;
				this.match(bitmarkParser.OpAmpAudioEmbed);
				this.state = 5456;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 704, this._ctx) ) {
				case 1:
					{
					this.state = 5454;
					this.match(bitmarkParser.COLON);
					this.state = 5455;
					this.match(bitmarkParser.Audio_type);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resource_chained(): Resource_chainedContext {
		let _localctx: Resource_chainedContext = new Resource_chainedContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, bitmarkParser.RULE_resource_chained);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5491;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OPA:
			case bitmarkParser.AtSrc:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5463;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case bitmarkParser.OPA:
					{
					this.state = 5460;
					this.match(bitmarkParser.OPA);
					this.state = 5461;
					this.s_and_w();
					}
					break;
				case bitmarkParser.AtSrc:
					{
					this.state = 5462;
					this.match(bitmarkParser.AtSrc);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5465;
				this.match(bitmarkParser.COLON);
				this.state = 5469;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 707, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5466;
						this.match(bitmarkParser.S);
						}
						}
					}
					this.state = 5471;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 707, this._ctx);
				}
				this.state = 5474;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 5474;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.S:
					case bitmarkParser.OPS:
					case bitmarkParser.COLON:
					case bitmarkParser.AMP:
					case bitmarkParser.Greater:
					case bitmarkParser.Less:
					case bitmarkParser.RightAngle:
					case bitmarkParser.RightArrow:
					case bitmarkParser.DBLEQ:
					case bitmarkParser.QUOTE_INDEX:
					case bitmarkParser.NUMERIC:
					case bitmarkParser.STRING:
					case bitmarkParser.NOTBITMARK:
					case bitmarkParser.ELIPSIS:
					case bitmarkParser.SENTENCE:
					case bitmarkParser.BARSTRING:
					case bitmarkParser.AmpAudio:
					case bitmarkParser.AmpImage:
					case bitmarkParser.AmpVideo:
					case bitmarkParser.AmpArticle:
					case bitmarkParser.AmpDocument:
					case bitmarkParser.AmpApp:
					case bitmarkParser.AmpWebsite:
					case bitmarkParser.AmpStillImageFilm:
					case bitmarkParser.AmpAudioLink:
					case bitmarkParser.AmpImageLink:
					case bitmarkParser.AmpVideoLink:
					case bitmarkParser.AmpArticleLink:
					case bitmarkParser.AmpDocumentLink:
					case bitmarkParser.AmpAppLink:
					case bitmarkParser.AmpWebsiteLink:
					case bitmarkParser.AmpStillImageFilmLink:
					case bitmarkParser.BitmarkMinus:
					case bitmarkParser.BitmarkPlus:
					case bitmarkParser.URL:
						{
						this.state = 5472;
						this.s_and_w();
						}
						break;
					case bitmarkParser.NL:
						{
						this.state = 5473;
						this.match(bitmarkParser.NL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 5476;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
				this.state = 5478;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.AtWidth:
			case bitmarkParser.AtHeight:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5479;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5480;
				this.match(bitmarkParser.COLON);
				this.state = 5481;
				this.match(bitmarkParser.NUMERIC);
				this.state = 5482;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.OPATALT:
			case bitmarkParser.OpAtCaption:
			case bitmarkParser.OpAtLicense:
			case bitmarkParser.OpAtCopyright:
			case bitmarkParser.OpAtSearch:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5483;
				_la = this._input.LA(1);
				if (!(((((_la - 253)) & ~0x1F) === 0 && ((1 << (_la - 253)) & ((1 << (bitmarkParser.OPATALT - 253)) | (1 << (bitmarkParser.OpAtCaption - 253)) | (1 << (bitmarkParser.OpAtLicense - 253)) | (1 << (bitmarkParser.OpAtCopyright - 253)) | (1 << (bitmarkParser.OpAtSearch - 253)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5487;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 710, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 5484;
						this.matchWildcard();
						}
						}
					}
					this.state = 5489;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 710, this._ctx);
				}
				this.state = 5490;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public telephone(): TelephoneContext {
		let _localctx: TelephoneContext = new TelephoneContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, bitmarkParser.RULE_telephone);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5493;
			this.match(bitmarkParser.TEL);
			this.state = 5494;
			this.match(bitmarkParser.PLUS);
			this.state = 5495;
			this.match(bitmarkParser.NUMERIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public url(): UrlContext {
		let _localctx: UrlContext = new UrlContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, bitmarkParser.RULE_url);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5497;
			this.match(bitmarkParser.URL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public item(): ItemContext {
		let _localctx: ItemContext = new ItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, bitmarkParser.RULE_item);
		let _la: number;
		try {
			this.state = 5529;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 718, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5499;
				this.match(bitmarkParser.OPC);
				this.state = 5500;
				this.match(bitmarkParser.CL);
				this.state = 5508;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 713, this._ctx) ) {
				case 1:
					{
					this.state = 5504;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.S) {
						{
						{
						this.state = 5501;
						this.match(bitmarkParser.S);
						}
						}
						this.state = 5506;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5507;
					this.lead();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5510;
				this.match(bitmarkParser.OPC);
				this.state = 5511;
				this.s_and_w();
				this.state = 5516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
					{
					this.state = 5514;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 714, this._ctx) ) {
					case 1:
						{
						this.state = 5512;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 2:
						{
						this.state = 5513;
						this.s_and_w();
						}
						break;
					}
					}
					this.state = 5518;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5519;
				this.match(bitmarkParser.CL);
				this.state = 5527;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 717, this._ctx) ) {
				case 1:
					{
					this.state = 5523;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.S) {
						{
						{
						this.state = 5520;
						this.match(bitmarkParser.S);
						}
						}
						this.state = 5525;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5526;
					this.lead();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lead(): LeadContext {
		let _localctx: LeadContext = new LeadContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, bitmarkParser.RULE_lead);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5531;
			this.match(bitmarkParser.OPC);
			this.state = 5532;
			this.s_and_w();
			this.state = 5537;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
				{
				this.state = 5535;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 719, this._ctx) ) {
				case 1:
					{
					this.state = 5533;
					this.match(bitmarkParser.COLON);
					}
					break;

				case 2:
					{
					this.state = 5534;
					this.s_and_w();
					}
					break;
				}
				}
				this.state = 5539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5540;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public angleref(): AnglerefContext {
		let _localctx: AnglerefContext = new AnglerefContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, bitmarkParser.RULE_angleref);
		let _la: number;
		try {
			this.state = 5552;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OPRANGLES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5542;
				this.match(bitmarkParser.OPRANGLES);
				this.state = 5544;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
					{
					this.state = 5543;
					this.s_and_w();
					}
				}

				this.state = 5546;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.OPRANGLEL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5547;
				this.match(bitmarkParser.OPRANGLEL);
				this.state = 5549;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
					{
					this.state = 5548;
					this.s_and_w();
					}
				}

				this.state = 5551;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public example(): ExampleContext {
		let _localctx: ExampleContext = new ExampleContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, bitmarkParser.RULE_example);
		let _la: number;
		try {
			this.state = 5561;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AtExamplecl:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5554;
				this.match(bitmarkParser.AtExamplecl);
				}
				break;
			case bitmarkParser.AtExampleWithStr:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5555;
				this.match(bitmarkParser.AtExampleWithStr);
				}
				break;
			case bitmarkParser.AtExamplecol:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5556;
				this.match(bitmarkParser.AtExamplecol);
				this.state = 5558;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.SENTENCE) {
					{
					this.state = 5557;
					this.match(bitmarkParser.SENTENCE);
					}
				}

				this.state = 5560;
				this.match(bitmarkParser.EOF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bracketed_text(): Bracketed_textContext {
		let _localctx: Bracketed_textContext = new Bracketed_textContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, bitmarkParser.RULE_bracketed_text);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5602;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 733, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5563;
				this.match(bitmarkParser.BracEnclose);
				this.state = 5565;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 726, this._ctx) ) {
				case 1:
					{
					this.state = 5564;
					this.s_and_w();
					}
					break;
				}
				this.state = 5588;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
					{
					{
					this.state = 5567;
					this.s_and_w();
					this.state = 5577;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 728, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5568;
							this.match(bitmarkParser.NL);
							this.state = 5572;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 727, this._ctx);
							while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
								if (_alt === 1) {
									{
									{
									this.state = 5569;
									this.match(bitmarkParser.S);
									}
									}
								}
								this.state = 5574;
								this._errHandler.sync(this);
								_alt = this.interpreter.adaptivePredict(this._input, 727, this._ctx);
							}
							}
							}
						}
						this.state = 5579;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 728, this._ctx);
					}
					this.state = 5583;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 5580;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 5585;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 5590;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5591;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5592;
				this.match(bitmarkParser.BracEnclose);
				this.state = 5598;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
					{
					this.state = 5596;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 731, this._ctx) ) {
					case 1:
						{
						this.state = 5593;
						this.s_and_w();
						}
						break;

					case 2:
						{
						this.state = 5594;
						this.match(bitmarkParser.NL);
						}
						break;

					case 3:
						{
						this.state = 5595;
						this.match(bitmarkParser.S);
						}
						break;
					}
					}
					this.state = 5600;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5601;
				this.match(bitmarkParser.EOF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reference(): ReferenceContext {
		let _localctx: ReferenceContext = new ReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, bitmarkParser.RULE_reference);
		let _la: number;
		try {
			this.state = 5626;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 738, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5604;
				this.match(bitmarkParser.AtReference);
				this.state = 5609;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 5609;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 734, this._ctx) ) {
					case 1:
						{
						this.state = 5605;
						this.s_and_w();
						}
						break;

					case 2:
						{
						this.state = 5606;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 3:
						{
						this.state = 5607;
						this.match(bitmarkParser.URL);
						}
						break;

					case 4:
						{
						this.state = 5608;
						this.match(bitmarkParser.NL);
						}
						break;
					}
					}
					this.state = 5611;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
				this.state = 5613;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5614;
				this.match(bitmarkParser.AtReference);
				this.state = 5622;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
					{
					this.state = 5620;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 736, this._ctx) ) {
					case 1:
						{
						this.state = 5615;
						this.s_and_w();
						}
						break;

					case 2:
						{
						this.state = 5616;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 3:
						{
						this.state = 5617;
						this.match(bitmarkParser.URL);
						}
						break;

					case 4:
						{
						this.state = 5618;
						this.match(bitmarkParser.NL);
						}
						break;

					case 5:
						{
						this.state = 5619;
						this.match(bitmarkParser.S);
						}
						break;
					}
					}
					this.state = 5624;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5625;
				this.match(bitmarkParser.EOF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public progress(): ProgressContext {
		let _localctx: ProgressContext = new ProgressContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, bitmarkParser.RULE_progress);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5628;
			this.match(bitmarkParser.AtProgress);
			this.state = 5629;
			this.s_and_w();
			this.state = 5630;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dateprop(): DatepropContext {
		let _localctx: DatepropContext = new DatepropContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, bitmarkParser.RULE_dateprop);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5632;
			this.match(bitmarkParser.AtDate);
			this.state = 5636;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 5636;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 739, this._ctx) ) {
				case 1:
					{
					this.state = 5633;
					this.s_and_w();
					}
					break;

				case 2:
					{
					this.state = 5634;
					this.match(bitmarkParser.COLON);
					}
					break;

				case 3:
					{
					this.state = 5635;
					this.match(bitmarkParser.NL);
					}
					break;
				}
				}
				this.state = 5638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
			this.state = 5640;
			this.match(bitmarkParser.CL);
			this.state = 5642;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 741, this._ctx) ) {
			case 1:
				{
				this.state = 5641;
				this.dateprop_chained();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dateprop_chained(): Dateprop_chainedContext {
		let _localctx: Dateprop_chainedContext = new Dateprop_chainedContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, bitmarkParser.RULE_dateprop_chained);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5644;
			this.match(bitmarkParser.AtDate);
			this.state = 5648;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 5648;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 742, this._ctx) ) {
				case 1:
					{
					this.state = 5645;
					this.s_and_w();
					}
					break;

				case 2:
					{
					this.state = 5646;
					this.match(bitmarkParser.COLON);
					}
					break;

				case 3:
					{
					this.state = 5647;
					this.match(bitmarkParser.NL);
					}
					break;
				}
				}
				this.state = 5650;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
			this.state = 5652;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public instruction(): InstructionContext {
		let _localctx: InstructionContext = new InstructionContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, bitmarkParser.RULE_instruction);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5700;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 752, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5654;
				this.match(bitmarkParser.OPB);
				this.state = 5658;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 744, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5655;
						this.match(bitmarkParser.NL);
						}
						}
					}
					this.state = 5660;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 744, this._ctx);
				}
				this.state = 5662;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 745, this._ctx) ) {
				case 1:
					{
					this.state = 5661;
					this.s_and_w();
					}
					break;
				}
				this.state = 5679;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 748, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5673;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 5664;
							this.match(bitmarkParser.NL);
							this.state = 5668;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 746, this._ctx);
							while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
								if (_alt === 1) {
									{
									{
									this.state = 5665;
									this.match(bitmarkParser.S);
									}
									}
								}
								this.state = 5670;
								this._errHandler.sync(this);
								_alt = this.interpreter.adaptivePredict(this._input, 746, this._ctx);
							}
							}
							}
							this.state = 5675;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 5676;
						this.s_and_w();
						}
						}
					}
					this.state = 5681;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 748, this._ctx);
				}
				this.state = 5685;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 5682;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 5687;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5688;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5689;
				this.match(bitmarkParser.OPB);
				this.state = 5693;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 5690;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 5695;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5697;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
					{
					this.state = 5696;
					this.s_and_w();
					}
				}

				this.state = 5699;
				this.match(bitmarkParser.EOF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hint(): HintContext {
		let _localctx: HintContext = new HintContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, bitmarkParser.RULE_hint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5702;
			this.match(bitmarkParser.OPQ);
			this.state = 5704;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5703;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === bitmarkParser.CL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5706;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.OPDOT) | (1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitPlaceholder) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.CLOZE) | (1 << bitmarkParser.MATCH) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitBotint) | (1 << bitmarkParser.BitSelfassess) | (1 << bitmarkParser.BitRating))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitAiPrompt - 32)) | (1 << (bitmarkParser.BitNoteAi - 32)) | (1 << (bitmarkParser.BitSummayAi - 32)) | (1 << (bitmarkParser.BitArticleAi - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitLearningPathBotTraining - 64)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomEvent - 64)) | (1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitImagePrototype - 64)) | (1 << (bitmarkParser.BitImageSuperWide - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitVideoPortrait - 64)) | (1 << (bitmarkParser.BitVideoLandscape - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitEditorial - 96)) | (1 << (bitmarkParser.BitBookFrontispiece - 96)) | (1 << (bitmarkParser.BitBookTitle - 96)) | (1 << (bitmarkParser.BitBookCopyright - 96)) | (1 << (bitmarkParser.BitBookDedication - 96)) | (1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.BitQuestion1 - 128)) | (1 << (bitmarkParser.BitScreenshot - 128)) | (1 << (bitmarkParser.BitFocusImage - 128)) | (1 << (bitmarkParser.BitPhoto - 128)) | (1 << (bitmarkParser.BitBrowserImage - 128)) | (1 << (bitmarkParser.BitBotActionResponse - 128)) | (1 << (bitmarkParser.BitBotActionTrueFalse - 128)) | (1 << (bitmarkParser.BitBotActionRatingNumber - 128)) | (1 << (bitmarkParser.BitBotActionRatingStars - 128)) | (1 << (bitmarkParser.BitChapterSubjectMatter - 128)) | (1 << (bitmarkParser.BitReleaseNote - 128)) | (1 << (bitmarkParser.BitConclusion - 128)) | (1 << (bitmarkParser.BitVendorAmcharts5Chart - 128)) | (1 << (bitmarkParser.BitFeatured - 128)) | (1 << (bitmarkParser.BitNewspaperArticle - 128)) | (1 << (bitmarkParser.BitBlogArticle - 128)) | (1 << (bitmarkParser.BitBookArticle - 128)) | (1 << (bitmarkParser.BitNotebookArticle - 128)) | (1 << (bitmarkParser.BitWorkbookArticle - 128)) | (1 << (bitmarkParser.BitReleaseNotesSummary - 128)) | (1 << (bitmarkParser.BitCookPreparation - 128)) | (1 << (bitmarkParser.BitCookStep - 128)) | (1 << (bitmarkParser.BitCookIngredients - 128)) | (1 << (bitmarkParser.BitCookRremark - 128)) | (1 << (bitmarkParser.BitCookVariation - 128)) | (1 << (bitmarkParser.BitCookInsert - 128)) | (1 << (bitmarkParser.BitCookArrangement - 128)) | (1 << (bitmarkParser.BitCookPracticeAdvise - 128)) | (1 << (bitmarkParser.BitCookPlate - 128)) | (1 << (bitmarkParser.BitCookRecommendation - 128)) | (1 << (bitmarkParser.BitCookPersonalRecommendation - 128)) | (1 << (bitmarkParser.BitCookSideDrink - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.BitCookSideDish - 160)) | (1 << (bitmarkParser.BitCookTimer - 160)) | (1 << (bitmarkParser.BitLangLearningOutcomes - 160)) | (1 << (bitmarkParser.BitLangEnablingLanguageSkills - 160)) | (1 << (bitmarkParser.BitLangLifeSkills - 160)) | (1 << (bitmarkParser.BitLangEnglishAroundWorld - 160)) | (1 << (bitmarkParser.BitLangGoodtoknow - 160)) | (1 << (bitmarkParser.BitLangLearningStrategy - 160)) | (1 << (bitmarkParser.BitLangLikeAlocal - 160)) | (1 << (bitmarkParser.BitLangUsefulPhrases - 160)) | (1 << (bitmarkParser.BitLangLevelDown - 160)) | (1 << (bitmarkParser.BitLangLevelUp - 160)) | (1 << (bitmarkParser.BitLangExtraActivity - 160)) | (1 << (bitmarkParser.BitLangVideoScript - 160)) | (1 << (bitmarkParser.BitLangAudioScript - 160)) | (1 << (bitmarkParser.BitLangVocabulary - 160)) | (1 << (bitmarkParser.BitLangHomework - 160)) | (1 << (bitmarkParser.BitLangTeacherNote - 160)) | (1 << (bitmarkParser.BitReviewNote - 160)) | (1 << (bitmarkParser.BitReviewAuthorNote - 160)) | (1 << (bitmarkParser.BitReviewReviewerNote - 160)) | (1 << (bitmarkParser.BitReviewRequestForReviewNote - 160)) | (1 << (bitmarkParser.BitReviewApprovedNote - 160)) | (1 << (bitmarkParser.BitChecklist - 160)) | (1 << (bitmarkParser.BitVideoTranscript - 160)) | (1 << (bitmarkParser.BitAudioTranscript - 160)) | (1 << (bitmarkParser.BitImagePortrait - 160)) | (1 << (bitmarkParser.BitImageLandscape - 160)) | (1 << (bitmarkParser.BitImageOnDevice - 160)) | (1 << (bitmarkParser.OPDOLL - 160)) | (1 << (bitmarkParser.OPBUL - 160)) | (1 << (bitmarkParser.OPRANGLES - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.OPRANGLEL - 192)) | (1 << (bitmarkParser.OPDANGLE - 192)) | (1 << (bitmarkParser.OPU - 192)) | (1 << (bitmarkParser.OPB - 192)) | (1 << (bitmarkParser.OPQ - 192)) | (1 << (bitmarkParser.OPA - 192)) | (1 << (bitmarkParser.OPP - 192)) | (1 << (bitmarkParser.OPM - 192)) | (1 << (bitmarkParser.OPS - 192)) | (1 << (bitmarkParser.OPR - 192)) | (1 << (bitmarkParser.OPHASH - 192)) | (1 << (bitmarkParser.OPC - 192)) | (1 << (bitmarkParser.COLON - 192)) | (1 << (bitmarkParser.AMP - 192)) | (1 << (bitmarkParser.DBLCOLON - 192)) | (1 << (bitmarkParser.PLUS - 192)) | (1 << (bitmarkParser.DotAt - 192)) | (1 << (bitmarkParser.Greater - 192)) | (1 << (bitmarkParser.Less - 192)) | (1 << (bitmarkParser.RightAngle - 192)) | (1 << (bitmarkParser.RightArrow - 192)) | (1 << (bitmarkParser.DBLEQ - 192)) | (1 << (bitmarkParser.HSPL - 192)) | (1 << (bitmarkParser.HSPL2 - 192)) | (1 << (bitmarkParser.SSPL - 192)) | (1 << (bitmarkParser.SSPL2 - 192)) | (1 << (bitmarkParser.QUOTE_INDEX - 192)) | (1 << (bitmarkParser.COMMENT - 192)) | (1 << (bitmarkParser.DCANY - 192)) | (1 << (bitmarkParser.Image_type - 192)) | (1 << (bitmarkParser.Audio_type - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.Video_type - 224)) | (1 << (bitmarkParser.ArticleText - 224)) | (1 << (bitmarkParser.NOTCL - 224)) | (1 << (bitmarkParser.NUMERIC - 224)) | (1 << (bitmarkParser.STRING - 224)) | (1 << (bitmarkParser.NL - 224)) | (1 << (bitmarkParser.NOTBITMARK - 224)) | (1 << (bitmarkParser.ELIPSIS - 224)) | (1 << (bitmarkParser.SENTENCE - 224)) | (1 << (bitmarkParser.BARSTRING - 224)) | (1 << (bitmarkParser.OPAT - 224)) | (1 << (bitmarkParser.AtProgress - 224)) | (1 << (bitmarkParser.AtReference - 224)) | (1 << (bitmarkParser.AtWidth - 224)) | (1 << (bitmarkParser.AtHeight - 224)) | (1 << (bitmarkParser.AtProgressPoints - 224)) | (1 << (bitmarkParser.AtShortanswer - 224)) | (1 << (bitmarkParser.AtLonganswer - 224)) | (1 << (bitmarkParser.AtExampleWithStr - 224)) | (1 << (bitmarkParser.AtExamplecol - 224)) | (1 << (bitmarkParser.AtExamplecl - 224)) | (1 << (bitmarkParser.AtSampleSolution - 224)) | (1 << (bitmarkParser.AtPartialAnswerS - 224)) | (1 << (bitmarkParser.AtPartialAnswer - 224)) | (1 << (bitmarkParser.AtLabeltrue - 224)) | (1 << (bitmarkParser.AtLabelfalse - 224)) | (1 << (bitmarkParser.AtPoints - 224)) | (1 << (bitmarkParser.AtSrc - 224)) | (1 << (bitmarkParser.AtPartner - 224)) | (1 << (bitmarkParser.OPATALT - 224)) | (1 << (bitmarkParser.OPAMARK - 224)) | (1 << (bitmarkParser.ShowInIndex - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (bitmarkParser.OpAtCaption - 256)) | (1 << (bitmarkParser.OpAtLicense - 256)) | (1 << (bitmarkParser.OpAtCopyright - 256)) | (1 << (bitmarkParser.OpAtSearch - 256)) | (1 << (bitmarkParser.OpAtIsTracked - 256)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 256)) | (1 << (bitmarkParser.AtDate - 256)) | (1 << (bitmarkParser.Http - 256)) | (1 << (bitmarkParser.Https - 256)) | (1 << (bitmarkParser.AmpAudio - 256)) | (1 << (bitmarkParser.AmpImage - 256)) | (1 << (bitmarkParser.AmpImageZoom - 256)) | (1 << (bitmarkParser.AmpVideo - 256)) | (1 << (bitmarkParser.AmpArticle - 256)) | (1 << (bitmarkParser.AmpDocument - 256)) | (1 << (bitmarkParser.AmpApp - 256)) | (1 << (bitmarkParser.AmpWebsite - 256)) | (1 << (bitmarkParser.AmpStillImageFilm - 256)) | (1 << (bitmarkParser.AmpPdf - 256)) | (1 << (bitmarkParser.OpAmpAudio - 256)) | (1 << (bitmarkParser.OpAmpImage - 256)) | (1 << (bitmarkParser.OpAmpImageZoom - 256)) | (1 << (bitmarkParser.OpAmpVideo - 256)) | (1 << (bitmarkParser.OpAmpArticle - 256)) | (1 << (bitmarkParser.OpAmpArticleAtt - 256)) | (1 << (bitmarkParser.OpAmpDocument - 256)) | (1 << (bitmarkParser.OpAmpApp - 256)) | (1 << (bitmarkParser.OpAmpWebsite - 256)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 256)) | (1 << (bitmarkParser.BracEnclose - 256)) | (1 << (bitmarkParser.AmpAudioLink - 256)) | (1 << (bitmarkParser.AmpImageLink - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (bitmarkParser.AmpVideoLink - 288)) | (1 << (bitmarkParser.AmpArticleLink - 288)) | (1 << (bitmarkParser.AmpDocumentLink - 288)) | (1 << (bitmarkParser.AmpDocumentDownload - 288)) | (1 << (bitmarkParser.AmpAppLink - 288)) | (1 << (bitmarkParser.AmpWebsiteLink - 288)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 288)) | (1 << (bitmarkParser.OpAmpAudioLink - 288)) | (1 << (bitmarkParser.OpAmpImageLink - 288)) | (1 << (bitmarkParser.OpAmpVideoLink - 288)) | (1 << (bitmarkParser.OpAmpArticleLink - 288)) | (1 << (bitmarkParser.OpAmpDocumentLink - 288)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 288)) | (1 << (bitmarkParser.OpAmpAppLink - 288)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 288)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 288)) | (1 << (bitmarkParser.AmpImageEmbed - 288)) | (1 << (bitmarkParser.AmpVideoEmbed - 288)) | (1 << (bitmarkParser.AmpAudioEmbed - 288)) | (1 << (bitmarkParser.AmpDocumentEmbed - 288)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 288)) | (1 << (bitmarkParser.OpAmpImageEmbed - 288)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 288)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 288)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 288)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 288)) | (1 << (bitmarkParser.BitmarkMinus - 288)) | (1 << (bitmarkParser.BitmarkPlus - 288)) | (1 << (bitmarkParser.ColonText - 288)) | (1 << (bitmarkParser.ColonJson - 288)) | (1 << (bitmarkParser.Prosemirror - 288)) | (1 << (bitmarkParser.Placeholder - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (bitmarkParser.BASIC - 320)) | (1 << (bitmarkParser.JPG - 320)) | (1 << (bitmarkParser.PNG - 320)) | (1 << (bitmarkParser.GIF - 320)) | (1 << (bitmarkParser.SVG - 320)) | (1 << (bitmarkParser.MP2 - 320)) | (1 << (bitmarkParser.MP3 - 320)) | (1 << (bitmarkParser.MP4 - 320)) | (1 << (bitmarkParser.FLV - 320)) | (1 << (bitmarkParser.WMV - 320)) | (1 << (bitmarkParser.MPEG - 320)) | (1 << (bitmarkParser.MPG - 320)) | (1 << (bitmarkParser.TEL - 320)) | (1 << (bitmarkParser.DotArticleAtt - 320)) | (1 << (bitmarkParser.STAR - 320)) | (1 << (bitmarkParser.URL - 320)) | (1 << (bitmarkParser.LIST_LINE - 320)) | (1 << (bitmarkParser.ENCLBARS - 320)))) !== 0));
			this.state = 5708;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public title(): TitleContext {
		let _localctx: TitleContext = new TitleContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, bitmarkParser.RULE_title);
		let _la: number;
		try {
			this.state = 5722;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 756, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5710;
				this.match(bitmarkParser.OPHASH);
				this.state = 5713;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 5713;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.S:
					case bitmarkParser.OPS:
					case bitmarkParser.COLON:
					case bitmarkParser.AMP:
					case bitmarkParser.Greater:
					case bitmarkParser.Less:
					case bitmarkParser.RightAngle:
					case bitmarkParser.RightArrow:
					case bitmarkParser.DBLEQ:
					case bitmarkParser.QUOTE_INDEX:
					case bitmarkParser.NUMERIC:
					case bitmarkParser.STRING:
					case bitmarkParser.NOTBITMARK:
					case bitmarkParser.ELIPSIS:
					case bitmarkParser.SENTENCE:
					case bitmarkParser.BARSTRING:
					case bitmarkParser.AmpAudio:
					case bitmarkParser.AmpImage:
					case bitmarkParser.AmpVideo:
					case bitmarkParser.AmpArticle:
					case bitmarkParser.AmpDocument:
					case bitmarkParser.AmpApp:
					case bitmarkParser.AmpWebsite:
					case bitmarkParser.AmpStillImageFilm:
					case bitmarkParser.AmpAudioLink:
					case bitmarkParser.AmpImageLink:
					case bitmarkParser.AmpVideoLink:
					case bitmarkParser.AmpArticleLink:
					case bitmarkParser.AmpDocumentLink:
					case bitmarkParser.AmpAppLink:
					case bitmarkParser.AmpWebsiteLink:
					case bitmarkParser.AmpStillImageFilmLink:
					case bitmarkParser.BitmarkMinus:
					case bitmarkParser.BitmarkPlus:
					case bitmarkParser.URL:
						{
						this.state = 5711;
						this.s_and_w();
						}
						break;
					case bitmarkParser.NL:
						{
						this.state = 5712;
						this.match(bitmarkParser.NL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 5715;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
				this.state = 5717;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5718;
				this.match(bitmarkParser.OPHASH);
				this.state = 5719;
				this.s_and_w();
				this.state = 5720;
				this.match(bitmarkParser.EOF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bool_label(): Bool_labelContext {
		let _localctx: Bool_labelContext = new Bool_labelContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, bitmarkParser.RULE_bool_label);
		try {
			this.state = 5732;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AtLabeltrue:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5724;
				this.match(bitmarkParser.AtLabeltrue);
				this.state = 5725;
				this.s_and_w();
				this.state = 5726;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.AtLabelfalse:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5728;
				this.match(bitmarkParser.AtLabelfalse);
				this.state = 5729;
				this.s_and_w();
				this.state = 5730;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public progress_points(): Progress_pointsContext {
		let _localctx: Progress_pointsContext = new Progress_pointsContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, bitmarkParser.RULE_progress_points);
		try {
			this.state = 5743;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 758, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5734;
				this.match(bitmarkParser.AtProgressPoints);
				this.state = 5735;
				this.match(bitmarkParser.COLON);
				this.state = 5736;
				this.match(bitmarkParser.NUMERIC);
				this.state = 5737;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5738;
				this.match(bitmarkParser.AtProgressPoints);
				this.state = 5739;
				this.match(bitmarkParser.COLON);
				this.state = 5740;
				this.s_and_w();
				this.state = 5741;
				this.match(bitmarkParser.CL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public istracked(): IstrackedContext {
		let _localctx: IstrackedContext = new IstrackedContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, bitmarkParser.RULE_istracked);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5745;
			this.match(bitmarkParser.OpAtIsTracked);
			this.state = 5746;
			this.s_and_w();
			this.state = 5747;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public isinfoonly(): IsinfoonlyContext {
		let _localctx: IsinfoonlyContext = new IsinfoonlyContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, bitmarkParser.RULE_isinfoonly);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5749;
			this.match(bitmarkParser.OpAtIsInfoOnly);
			this.state = 5750;
			this.s_and_w();
			this.state = 5751;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public atdef(): AtdefContext {
		let _localctx: AtdefContext = new AtdefContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, bitmarkParser.RULE_atdef);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5753;
			this.atdef_();
			this.state = 5763;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 760, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5757;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 5754;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 5759;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5760;
					this.atdef_();
					}
					}
				}
				this.state = 5765;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 760, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public atdef_(): Atdef_Context {
		let _localctx: Atdef_Context = new Atdef_Context(this._ctx, this.state);
		this.enterRule(_localctx, 520, bitmarkParser.RULE_atdef_);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5789;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OPA:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5766;
				this.match(bitmarkParser.OPA);
				this.state = 5767;
				this.s_and_w();
				this.state = 5768;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.COLON || _la === bitmarkParser.DBLCOLON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5769;
				this.s_and_w();
				this.state = 5775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
					{
					this.state = 5773;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 761, this._ctx) ) {
					case 1:
						{
						this.state = 5770;
						this.match(bitmarkParser.NL);
						}
						break;

					case 2:
						{
						this.state = 5771;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 3:
						{
						this.state = 5772;
						this.s_and_w();
						}
						break;
					}
					}
					this.state = 5777;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5778;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.OpAtCopyright:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5780;
				this.match(bitmarkParser.OpAtCopyright);
				this.state = 5784;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 763, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 5781;
						this.matchWildcard();
						}
						}
					}
					this.state = 5786;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 763, this._ctx);
				}
				this.state = 5787;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.AtSampleSolution:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5788;
				this.match(bitmarkParser.AtSampleSolution);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dollarans(): DollaransContext {
		let _localctx: DollaransContext = new DollaransContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, bitmarkParser.RULE_dollarans);
		let _la: number;
		try {
			this.state = 5810;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 769, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5791;
				this.match(bitmarkParser.OPDOLL);
				this.state = 5795;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 5795;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 765, this._ctx) ) {
					case 1:
						{
						this.state = 5792;
						this.s_and_w();
						}
						break;

					case 2:
						{
						this.state = 5793;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 3:
						{
						this.state = 5794;
						this.match(bitmarkParser.NL);
						}
						break;
					}
					}
					this.state = 5797;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0));
				this.state = 5799;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5800;
				this.match(bitmarkParser.OPDOLL);
				this.state = 5806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NL - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
					{
					this.state = 5804;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 767, this._ctx) ) {
					case 1:
						{
						this.state = 5801;
						this.s_and_w();
						}
						break;

					case 2:
						{
						this.state = 5802;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 3:
						{
						this.state = 5803;
						this.match(bitmarkParser.NL);
						}
						break;
					}
					}
					this.state = 5808;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5809;
				this.match(bitmarkParser.EOF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public anchor(): AnchorContext {
		let _localctx: AnchorContext = new AnchorContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, bitmarkParser.RULE_anchor);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5812;
			this.match(bitmarkParser.OPDANGLE);
			this.state = 5814;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.S || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (bitmarkParser.OPS - 200)) | (1 << (bitmarkParser.COLON - 200)) | (1 << (bitmarkParser.AMP - 200)) | (1 << (bitmarkParser.Greater - 200)) | (1 << (bitmarkParser.Less - 200)) | (1 << (bitmarkParser.RightAngle - 200)) | (1 << (bitmarkParser.RightArrow - 200)) | (1 << (bitmarkParser.DBLEQ - 200)) | (1 << (bitmarkParser.QUOTE_INDEX - 200)) | (1 << (bitmarkParser.NUMERIC - 200)) | (1 << (bitmarkParser.STRING - 200)) | (1 << (bitmarkParser.NOTBITMARK - 200)) | (1 << (bitmarkParser.ELIPSIS - 200)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (bitmarkParser.AmpAudio - 265)) | (1 << (bitmarkParser.AmpImage - 265)) | (1 << (bitmarkParser.AmpVideo - 265)) | (1 << (bitmarkParser.AmpArticle - 265)) | (1 << (bitmarkParser.AmpDocument - 265)) | (1 << (bitmarkParser.AmpApp - 265)) | (1 << (bitmarkParser.AmpWebsite - 265)) | (1 << (bitmarkParser.AmpStillImageFilm - 265)) | (1 << (bitmarkParser.AmpAudioLink - 265)) | (1 << (bitmarkParser.AmpImageLink - 265)) | (1 << (bitmarkParser.AmpVideoLink - 265)) | (1 << (bitmarkParser.AmpArticleLink - 265)) | (1 << (bitmarkParser.AmpDocumentLink - 265)) | (1 << (bitmarkParser.AmpAppLink - 265)) | (1 << (bitmarkParser.AmpWebsiteLink - 265)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 265)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (bitmarkParser.BitmarkMinus - 314)) | (1 << (bitmarkParser.BitmarkPlus - 314)) | (1 << (bitmarkParser.URL - 314)))) !== 0)) {
				{
				this.state = 5813;
				this.s_and_w();
				}
			}

			this.state = 5816;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lines(): LinesContext {
		let _localctx: LinesContext = new LinesContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, bitmarkParser.RULE_lines);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5822;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5818;
					this.s_and_w();
					this.state = 5820;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 771, this._ctx) ) {
					case 1:
						{
						this.state = 5819;
						this.match(bitmarkParser.NL);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5824;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 772, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public s_and_w(): S_and_wContext {
		let _localctx: S_and_wContext = new S_and_wContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, bitmarkParser.RULE_s_and_w);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5871;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 780, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5826;
				this.match(bitmarkParser.STRING);
				this.state = 5833;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 774, this._ctx) ) {
				case 1:
					{
					this.state = 5828;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5827;
						this.match(bitmarkParser.S);
						}
						}
						this.state = 5830;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.S);
					this.state = 5832;
					this.match(bitmarkParser.NUMERIC);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5835;
				this.words();
				this.state = 5842;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 776, this._ctx) ) {
				case 1:
					{
					this.state = 5837;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5836;
						this.match(bitmarkParser.S);
						}
						}
						this.state = 5839;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.S);
					this.state = 5841;
					this.match(bitmarkParser.NUMERIC);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5844;
				this.match(bitmarkParser.NUMERIC);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5845;
				this.match(bitmarkParser.OPS);
				this.state = 5846;
				this.s_and_w();
				this.state = 5847;
				this.match(bitmarkParser.CL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S) {
					{
					{
					this.state = 5849;
					this.match(bitmarkParser.S);
					}
					}
					this.state = 5854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5855;
				this.match(bitmarkParser.COLON);
				this.state = 5859;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 778, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5856;
						this.match(bitmarkParser.S);
						}
						}
					}
					this.state = 5861;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 778, this._ctx);
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5862;
				this.match(bitmarkParser.AMP);
				this.state = 5866;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 779, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5863;
						this.match(bitmarkParser.S);
						}
						}
					}
					this.state = 5868;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 779, this._ctx);
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5869;
				this.match(bitmarkParser.DBLEQ);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5870;
				this.match(bitmarkParser.URL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dclines(): DclinesContext {
		let _localctx: DclinesContext = new DclinesContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, bitmarkParser.RULE_dclines);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5873;
			this.match(bitmarkParser.DCANY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clnsp(): ClnspContext {
		let _localctx: ClnspContext = new ClnspContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, bitmarkParser.RULE_clnsp);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5875;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sspl(): SsplContext {
		let _localctx: SsplContext = new SsplContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, bitmarkParser.RULE_sspl);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5877;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.SSPL || _la === bitmarkParser.SSPL2)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public words(): WordsContext {
		let _localctx: WordsContext = new WordsContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, bitmarkParser.RULE_words);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5909;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					this.state = 5909;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.SENTENCE:
						{
						this.state = 5879;
						this.sentence();
						}
						break;
					case bitmarkParser.NOTBITMARK:
						{
						this.state = 5880;
						this.match(bitmarkParser.NOTBITMARK);
						}
						break;
					case bitmarkParser.BARSTRING:
						{
						this.state = 5881;
						this.match(bitmarkParser.BARSTRING);
						}
						break;
					case bitmarkParser.ELIPSIS:
						{
						this.state = 5882;
						this.match(bitmarkParser.ELIPSIS);
						}
						break;
					case bitmarkParser.AMP:
						{
						this.state = 5883;
						this.match(bitmarkParser.AMP);
						}
						break;
					case bitmarkParser.Greater:
						{
						this.state = 5884;
						this.match(bitmarkParser.Greater);
						this.state = 5885;
						_la = this._input.LA(1);
						if (_la <= 0 || (_la === bitmarkParser.Greater)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case bitmarkParser.Less:
						{
						this.state = 5886;
						this.match(bitmarkParser.Less);
						this.state = 5887;
						_la = this._input.LA(1);
						if (_la <= 0 || (_la === bitmarkParser.Less)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case bitmarkParser.RightArrow:
						{
						this.state = 5888;
						this.match(bitmarkParser.RightArrow);
						}
						break;
					case bitmarkParser.RightAngle:
						{
						this.state = 5889;
						this.match(bitmarkParser.RightAngle);
						}
						break;
					case bitmarkParser.AmpArticle:
						{
						this.state = 5890;
						this.match(bitmarkParser.AmpArticle);
						}
						break;
					case bitmarkParser.AmpArticleLink:
						{
						this.state = 5891;
						this.match(bitmarkParser.AmpArticleLink);
						}
						break;
					case bitmarkParser.AmpDocument:
						{
						this.state = 5892;
						this.match(bitmarkParser.AmpDocument);
						}
						break;
					case bitmarkParser.AmpDocumentLink:
						{
						this.state = 5893;
						this.match(bitmarkParser.AmpDocumentLink);
						}
						break;
					case bitmarkParser.AmpWebsite:
						{
						this.state = 5894;
						this.match(bitmarkParser.AmpWebsite);
						}
						break;
					case bitmarkParser.AmpWebsiteLink:
						{
						this.state = 5895;
						this.match(bitmarkParser.AmpWebsiteLink);
						}
						break;
					case bitmarkParser.AmpImage:
						{
						this.state = 5896;
						this.match(bitmarkParser.AmpImage);
						}
						break;
					case bitmarkParser.AmpImageLink:
						{
						this.state = 5897;
						this.match(bitmarkParser.AmpImageLink);
						}
						break;
					case bitmarkParser.AmpAudio:
						{
						this.state = 5898;
						this.match(bitmarkParser.AmpAudio);
						}
						break;
					case bitmarkParser.AmpAudioLink:
						{
						this.state = 5899;
						this.match(bitmarkParser.AmpAudioLink);
						}
						break;
					case bitmarkParser.AmpVideo:
						{
						this.state = 5900;
						this.match(bitmarkParser.AmpVideo);
						}
						break;
					case bitmarkParser.AmpVideoLink:
						{
						this.state = 5901;
						this.match(bitmarkParser.AmpVideoLink);
						}
						break;
					case bitmarkParser.AmpApp:
						{
						this.state = 5902;
						this.match(bitmarkParser.AmpApp);
						}
						break;
					case bitmarkParser.AmpAppLink:
						{
						this.state = 5903;
						this.match(bitmarkParser.AmpAppLink);
						}
						break;
					case bitmarkParser.AmpStillImageFilm:
						{
						this.state = 5904;
						this.match(bitmarkParser.AmpStillImageFilm);
						}
						break;
					case bitmarkParser.AmpStillImageFilmLink:
						{
						this.state = 5905;
						this.match(bitmarkParser.AmpStillImageFilmLink);
						}
						break;
					case bitmarkParser.BitmarkMinus:
						{
						this.state = 5906;
						this.match(bitmarkParser.BitmarkMinus);
						}
						break;
					case bitmarkParser.BitmarkPlus:
						{
						this.state = 5907;
						this.match(bitmarkParser.BitmarkPlus);
						}
						break;
					case bitmarkParser.QUOTE_INDEX:
						{
						this.state = 5908;
						this.match(bitmarkParser.QUOTE_INDEX);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5911;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 782, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sp(): SpContext {
		let _localctx: SpContext = new SpContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, bitmarkParser.RULE_sp);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5913;
			this.match(bitmarkParser.S);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sentence(): SentenceContext {
		let _localctx: SentenceContext = new SentenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, bitmarkParser.RULE_sentence);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5915;
			this.match(bitmarkParser.SENTENCE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	private static readonly _serializedATNSegments: number = 12;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0153\u1720\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x03\x02\x03\x02\x07\x02\u0223\n\x02\f" +
		"\x02\x0E\x02\u0226\v\x02\x03\x02\x07\x02\u0229\n\x02\f\x02\x0E\x02\u022C" +
		"\v\x02\x06\x02\u022E\n\x02\r\x02\x0E\x02\u022F\x03\x02\x07\x02\u0233\n" +
		"\x02\f\x02\x0E\x02\u0236\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x05\x03" +
		"\u023C\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u02F6\n\x04\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x07\x05\u02FC\n\x05\f\x05\x0E\x05\u02FF\v\x05" +
		"\x03\x05\x03\x05\x07\x05\u0303\n\x05\f\x05\x0E\x05\u0306\v\x05\x07\x05" +
		"\u0308\n\x05\f\x05\x0E\x05\u030B\v\x05\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x07\x06\u0311\n\x06\f\x06\x0E\x06\u0314\v\x06\x03\x06\x03\x06\x03\x06" +
		"\x05\x06\u0319\n\x06\x03\x06\x03\x06\x07\x06\u031D\n\x06\f\x06\x0E\x06" +
		"\u0320\v\x06\x03\x06\x07\x06\u0323\n\x06\f\x06\x0E\x06\u0326\v\x06\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x07\x07\u032C\n\x07\f\x07\x0E\x07\u032F\v" +
		"\x07\x03\x07\x03\x07\x07\x07\u0333\n\x07\f\x07\x0E\x07\u0336\v\x07\x06" +
		"\x07\u0338\n\x07\r\x07\x0E\x07\u0339\x03\b\x03\b\x03\b\x03\b\x07\b\u0340" +
		"\n\b\f\b\x0E\b\u0343\v\b\x03\b\x03\b\x07\b\u0347\n\b\f\b\x0E\b\u034A\v" +
		"\b\x06\b\u034C\n\b\r\b\x0E\b\u034D\x03\t\x03\t\x03\t\x03\t\x07\t\u0354" +
		"\n\t\f\t\x0E\t\u0357\v\t\x03\t\x03\t\x07\t\u035B\n\t\f\t\x0E\t\u035E\v" +
		"\t\x06\t\u0360\n\t\r\t\x0E\t\u0361\x03\n\x03\n\x03\n\x03\n\x07\n\u0368" +
		"\n\n\f\n\x0E\n\u036B\v\n\x03\n\x03\n\x07\n\u036F\n\n\f\n\x0E\n\u0372\v" +
		"\n\x06\n\u0374\n\n\r\n\x0E\n\u0375\x03\v\x03\v\x05\v\u037A\n\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x05\v\u0381\n\v\x03\f\x03\f\x03\f\x07\f\u0386\n\f" +
		"\f\f\x0E\f\u0389\v\f\x03\f\x03\f\x03\r\x03\r\x05\r\u038F\n\r\x03\r\x03" +
		"\r\x07\r\u0393\n\r\f\r\x0E\r\u0396\v\r\x03\r\x07\r\u0399\n\r\f\r\x0E\r" +
		"\u039C\v\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x05\x0F\u03A3\n\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u03AC" +
		"\n\x0F\x07\x0F\u03AE\n\x0F\f\x0F\x0E\x0F\u03B1\v\x0F\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x06\x10\u03B9\n\x10\r\x10\x0E\x10\u03BA\x03" +
		"\x10\x06\x10\u03BE\n\x10\r\x10\x0E\x10\u03BF\x03\x10\x03\x10\x07\x10\u03C4" +
		"\n\x10\f\x10\x0E\x10\u03C7\v\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x06\x11\u03CF\n\x11\r\x11\x0E\x11\u03D0\x03\x11\x06\x11\u03D4" +
		"\n\x11\r\x11\x0E\x11\u03D5\x03\x11\x03\x11\x07\x11\u03DA\n\x11\f\x11\x0E" +
		"\x11\u03DD\v\x11\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12\u03E3\n\x12\f" +
		"\x12\x0E\x12\u03E6\v\x12\x03\x12\x03\x12\x07\x12\u03EA\n\x12\f\x12\x0E" +
		"\x12\u03ED\v\x12\x06\x12\u03EF\n\x12\r\x12\x0E\x12\u03F0\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x07\x13\u03F7\n\x13\f\x13\x0E\x13\u03FA\v\x13\x03\x13" +
		"\x03\x13\x07\x13\u03FE\n\x13\f\x13\x0E\x13\u0401\v\x13\x06\x13\u0403\n" +
		"\x13\r\x13\x0E\x13\u0404\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\u040B" +
		"\n\x14\f\x14\x0E\x14\u040E\v\x14\x03\x14\x03\x14\x07\x14\u0412\n\x14\f" +
		"\x14\x0E\x14\u0415\v\x14\x06\x14\u0417\n\x14\r\x14\x0E\x14\u0418\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x07\x15\u041F\n\x15\f\x15\x0E\x15\u0422\v\x15" +
		"\x03\x15\x03\x15\x07\x15\u0426\n\x15\f\x15\x0E\x15\u0429\v\x15\x06\x15" +
		"\u042B\n\x15\r\x15\x0E\x15\u042C\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16" +
		"\u0433\n\x16\f\x16\x0E\x16\u0436\v\x16\x03\x16\x03\x16\x07\x16\u043A\n" +
		"\x16\f\x16\x0E\x16\u043D\v\x16\x06\x16\u043F\n\x16\r\x16\x0E\x16\u0440" +
		"\x03\x17\x03\x17\x03\x17\x03\x17\x07\x17\u0447\n\x17\f\x17\x0E\x17\u044A" +
		"\v\x17\x03\x17\x03\x17\x07\x17\u044E\n\x17\f\x17\x0E\x17\u0451\v\x17\x06" +
		"\x17\u0453\n\x17\r\x17\x0E\x17\u0454\x03\x18\x03\x18\x03\x18\x03\x18\x07" +
		"\x18\u045B\n\x18\f\x18\x0E\x18\u045E\v\x18\x03\x18\x03\x18\x07\x18\u0462" +
		"\n\x18\f\x18\x0E\x18\u0465\v\x18\x06\x18\u0467\n\x18\r\x18\x0E\x18\u0468" +
		"\x03\x19\x03\x19\x03\x19\x03\x19\x07\x19\u046F\n\x19\f\x19\x0E\x19\u0472" +
		"\v\x19\x03\x19\x03\x19\x07\x19\u0476\n\x19\f\x19\x0E\x19\u0479\v\x19\x06" +
		"\x19\u047B\n\x19\r\x19\x0E\x19\u047C\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07" +
		"\x1A\u0483\n\x1A\f\x1A\x0E\x1A\u0486\v\x1A\x03\x1A\x03\x1A\x07\x1A\u048A" +
		"\n\x1A\f\x1A\x0E\x1A\u048D\v\x1A\x06\x1A\u048F\n\x1A\r\x1A\x0E\x1A\u0490" +
		"\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x07\x1B\u0497\n\x1B\f\x1B\x0E\x1B\u049A" +
		"\v\x1B\x03\x1B\x03\x1B\x07\x1B\u049E\n\x1B\f\x1B\x0E\x1B\u04A1\v\x1B\x06" +
		"\x1B\u04A3\n\x1B\r\x1B\x0E\x1B\u04A4\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x07" +
		"\x1C\u04AB\n\x1C\f\x1C\x0E\x1C\u04AE\v\x1C\x03\x1C\x03\x1C\x07\x1C\u04B2" +
		"\n\x1C\f\x1C\x0E\x1C\u04B5\v\x1C\x06\x1C\u04B7\n\x1C\r\x1C\x0E\x1C\u04B8" +
		"\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u04BF\n\x1D\f\x1D\x0E\x1D\u04C2" +
		"\v\x1D\x03\x1D\x03\x1D\x07\x1D\u04C6\n\x1D\f\x1D\x0E\x1D\u04C9\v\x1D\x06" +
		"\x1D\u04CB\n\x1D\r\x1D\x0E\x1D\u04CC\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07" +
		"\x1E\u04D3\n\x1E\f\x1E\x0E\x1E\u04D6\v\x1E\x03\x1E\x03\x1E\x07\x1E\u04DA" +
		"\n\x1E\f\x1E\x0E\x1E\u04DD\v\x1E\x06\x1E\u04DF\n\x1E\r\x1E\x0E\x1E\u04E0" +
		"\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F\u04E7\n\x1F\f\x1F\x0E\x1F\u04EA" +
		"\v\x1F\x03\x1F\x03\x1F\x07\x1F\u04EE\n\x1F\f\x1F\x0E\x1F\u04F1\v\x1F\x06" +
		"\x1F\u04F3\n\x1F\r\x1F\x0E\x1F\u04F4\x03 \x03 \x03 \x03 \x07 \u04FB\n" +
		" \f \x0E \u04FE\v \x03 \x03 \x07 \u0502\n \f \x0E \u0505\v \x06 \u0507" +
		"\n \r \x0E \u0508\x03!\x03!\x03!\x03!\x07!\u050F\n!\f!\x0E!\u0512\v!\x03" +
		"!\x03!\x07!\u0516\n!\f!\x0E!\u0519\v!\x06!\u051B\n!\r!\x0E!\u051C\x03" +
		"\"\x03\"\x03\"\x03\"\x07\"\u0523\n\"\f\"\x0E\"\u0526\v\"\x03\"\x03\"\x07" +
		"\"\u052A\n\"\f\"\x0E\"\u052D\v\"\x07\"\u052F\n\"\f\"\x0E\"\u0532\v\"\x03" +
		"\"\x06\"\u0535\n\"\r\"\x0E\"\u0536\x03\"\x03\"\x05\"\u053B\n\"\x03\"\x07" +
		"\"\u053E\n\"\f\"\x0E\"\u0541\v\"\x03#\x03#\x03#\x03#\x07#\u0547\n#\f#" +
		"\x0E#\u054A\v#\x03#\x03#\x07#\u054E\n#\f#\x0E#\u0551\v#\x07#\u0553\n#" +
		"\f#\x0E#\u0556\v#\x03#\x06#\u0559\n#\r#\x0E#\u055A\x03#\x03#\x05#\u055F" +
		"\n#\x03#\x07#\u0562\n#\f#\x0E#\u0565\v#\x03$\x03$\x03$\x03$\x07$\u056B" +
		"\n$\f$\x0E$\u056E\v$\x03$\x03$\x07$\u0572\n$\f$\x0E$\u0575\v$\x07$\u0577" +
		"\n$\f$\x0E$\u057A\v$\x03$\x06$\u057D\n$\r$\x0E$\u057E\x03$\x03$\x05$\u0583" +
		"\n$\x03$\x07$\u0586\n$\f$\x0E$\u0589\v$\x03%\x03%\x03%\x03%\x07%\u058F" +
		"\n%\f%\x0E%\u0592\v%\x03%\x03%\x07%\u0596\n%\f%\x0E%\u0599\v%\x07%\u059B" +
		"\n%\f%\x0E%\u059E\v%\x03&\x03&\x03&\x03\'\x07\'\u05A4\n\'\f\'\x0E\'\u05A7" +
		"\v\'\x03\'\x03\'\x07\'\u05AB\n\'\f\'\x0E\'\u05AE\v\'\x06\'\u05B0\n\'\r" +
		"\'\x0E\'\u05B1\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x05(\u05BB\n(\x03)\x03" +
		")\x05)\u05BF\n)\x03*\x07*\u05C2\n*\f*\x0E*\u05C5\v*\x03*\x06*\u05C8\n" +
		"*\r*\x0E*\u05C9\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03" +
		"+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03" +
		"+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x05+\u05EC\n+\x03,\x03,\x03,\x03" +
		",\x03,\x03,\x07,\u05F4\n,\f,\x0E,\u05F7\v,\x03-\x03-\x03-\x03-\x05-\u05FD" +
		"\n-\x03-\x07-\u0600\n-\f-\x0E-\u0603\v-\x03-\x03-\x03.\x05.\u0608\n.\x03" +
		".\x03.\x06.\u060C\n.\r.\x0E.\u060D\x03.\x03.\x03/\x05/\u0613\n/\x03/\x03" +
		"/\x06/\u0617\n/\r/\x0E/\u0618\x03/\x03/\x030\x050\u061E\n0\x030\x030\x06" +
		"0\u0622\n0\r0\x0E0\u0623\x030\x030\x031\x031\x031\x031\x031\x031\x071" +
		"\u062E\n1\f1\x0E1\u0631\v1\x071\u0633\n1\f1\x0E1\u0636\v1\x031\x071\u0639" +
		"\n1\f1\x0E1\u063C\v1\x031\x071\u063F\n1\f1\x0E1\u0642\v1\x031\x071\u0645" +
		"\n1\f1\x0E1\u0648\v1\x031\x031\x071\u064C\n1\f1\x0E1\u064F\v1\x031\x07" +
		"1\u0652\n1\f1\x0E1\u0655\v1\x051\u0657\n1\x032\x032\x052\u065B\n2\x03" +
		"2\x032\x052\u065F\n2\x052\u0661\n2\x032\x032\x033\x033\x034\x034\x035" +
		"\x035\x035\x035\x035\x035\x075\u066F\n5\f5\x0E5\u0672\v5\x075\u0674\n" +
		"5\f5\x0E5\u0677\v5\x035\x075\u067A\n5\f5\x0E5\u067D\v5\x035\x075\u0680" +
		"\n5\f5\x0E5\u0683\v5\x035\x035\x075\u0687\n5\f5\x0E5\u068A\v5\x035\x07" +
		"5\u068D\n5\f5\x0E5\u0690\v5\x055\u0692\n5\x036\x036\x076\u0696\n6\f6\x0E" +
		"6\u0699\v6\x036\x036\x036\x036\x076\u069F\n6\f6\x0E6\u06A2\v6\x036\x03" +
		"6\x056\u06A6\n6\x037\x037\x037\x037\x037\x037\x057\u06AE\n7\x037\x077" +
		"\u06B1\n7\f7\x0E7\u06B4\v7\x077\u06B6\n7\f7\x0E7\u06B9\v7\x037\x077\u06BC" +
		"\n7\f7\x0E7\u06BF\v7\x037\x037\x077\u06C3\n7\f7\x0E7\u06C6\v7\x037\x07" +
		"7\u06C9\n7\f7\x0E7\u06CC\v7\x057\u06CE\n7\x038\x038\x038\x038\x058\u06D4" +
		"\n8\x038\x038\x038\x078\u06D9\n8\f8\x0E8\u06DC\v8\x039\x039\x079\u06E0" +
		"\n9\f9\x0E9\u06E3\v9\x039\x039\x079\u06E7\n9\f9\x0E9\u06EA\v9\x039\x03" +
		"9\x03:\x03:\x03:\x03:\x03:\x03:\x07:\u06F4\n:\f:\x0E:\u06F7\v:\x07:\u06F9" +
		"\n:\f:\x0E:\u06FC\v:\x03:\x07:\u06FF\n:\f:\x0E:\u0702\v:\x03:\x03:\x07" +
		":\u0706\n:\f:\x0E:\u0709\v:\x03:\x07:\u070C\n:\f:\x0E:\u070F\v:\x05:\u0711" +
		"\n:\x03;\x03;\x03;\x03;\x03;\x03;\x07;\u0719\n;\f;\x0E;\u071C\v;\x07;" +
		"\u071E\n;\f;\x0E;\u0721\v;\x03;\x07;\u0724\n;\f;\x0E;\u0727\v;\x03;\x03" +
		";\x07;\u072B\n;\f;\x0E;\u072E\v;\x03;\x07;\u0731\n;\f;\x0E;\u0734\v;\x05" +
		";\u0736\n;\x03<\x03<\x03<\x03<\x03<\x03<\x07<\u073E\n<\f<\x0E<\u0741\v" +
		"<\x07<\u0743\n<\f<\x0E<\u0746\v<\x03<\x07<\u0749\n<\f<\x0E<\u074C\v<\x03" +
		"<\x03<\x07<\u0750\n<\f<\x0E<\u0753\v<\x03<\x07<\u0756\n<\f<\x0E<\u0759" +
		"\v<\x05<\u075B\n<\x03=\x03=\x03=\x03=\x07=\u0761\n=\f=\x0E=\u0764\v=\x03" +
		"=\x03=\x07=\u0768\n=\f=\x0E=\u076B\v=\x07=\u076D\n=\f=\x0E=\u0770\v=\x03" +
		"=\x05=\u0773\n=\x03=\x07=\u0776\n=\f=\x0E=\u0779\v=\x03=\x03=\x07=\u077D" +
		"\n=\f=\x0E=\u0780\v=\x03=\x07=\u0783\n=\f=\x0E=\u0786\v=\x05=\u0788\n" +
		"=\x03>\x03>\x03>\x03>\x06>\u078E\n>\r>\x0E>\u078F\x03>\x03>\x07>\u0794" +
		"\n>\f>\x0E>\u0797\v>\x07>\u0799\n>\f>\x0E>\u079C\v>\x03>\x05>\u079F\n" +
		">\x03>\x07>\u07A2\n>\f>\x0E>\u07A5\v>\x03>\x03>\x07>\u07A9\n>\f>\x0E>" +
		"\u07AC\v>\x03>\x07>\u07AF\n>\f>\x0E>\u07B2\v>\x05>\u07B4\n>\x03?\x03?" +
		"\x03?\x03?\x07?\u07BA\n?\f?\x0E?\u07BD\v?\x03?\x03?\x07?\u07C1\n?\f?\x0E" +
		"?\u07C4\v?\x07?\u07C6\n?\f?\x0E?\u07C9\v?\x03@\x03@\x03@\x03@\x07@\u07CF" +
		"\n@\f@\x0E@\u07D2\v@\x03@\x03@\x07@\u07D6\n@\f@\x0E@\u07D9\v@\x07@\u07DB" +
		"\n@\f@\x0E@\u07DE\v@\x03A\x03A\x03A\x03A\x07A\u07E4\nA\fA\x0EA\u07E7\v" +
		"A\x03A\x03A\x07A\u07EB\nA\fA\x0EA\u07EE\vA\x07A\u07F0\nA\fA\x0EA\u07F3" +
		"\vA\x03B\x03B\x03B\x03B\x07B\u07F9\nB\fB\x0EB\u07FC\vB\x03B\x03B\x07B" +
		"\u0800\nB\fB\x0EB\u0803\vB\x07B\u0805\nB\fB\x0EB\u0808\vB\x03C\x03C\x03" +
		"C\x03C\x07C\u080E\nC\fC\x0EC\u0811\vC\x03C\x03C\x07C\u0815\nC\fC\x0EC" +
		"\u0818\vC\x07C\u081A\nC\fC\x0EC\u081D\vC\x03D\x03D\x03D\x03D\x07D\u0823" +
		"\nD\fD\x0ED\u0826\vD\x03D\x03D\x07D\u082A\nD\fD\x0ED\u082D\vD\x07D\u082F" +
		"\nD\fD\x0ED\u0832\vD\x03E\x03E\x03E\x03E\x07E\u0838\nE\fE\x0EE\u083B\v" +
		"E\x03E\x03E\x07E\u083F\nE\fE\x0EE\u0842\vE\x07E\u0844\nE\fE\x0EE\u0847" +
		"\vE\x03F\x03F\x03F\x03F\x07F\u084D\nF\fF\x0EF\u0850\vF\x03F\x03F\x07F" +
		"\u0854\nF\fF\x0EF\u0857\vF\x07F\u0859\nF\fF\x0EF\u085C\vF\x03G\x03G\x03" +
		"G\x03G\x07G\u0862\nG\fG\x0EG\u0865\vG\x03G\x03G\x07G\u0869\nG\fG\x0EG" +
		"\u086C\vG\x07G\u086E\nG\fG\x0EG\u0871\vG\x03H\x03H\x03H\x03H\x07H\u0877" +
		"\nH\fH\x0EH\u087A\vH\x03H\x03H\x07H\u087E\nH\fH\x0EH\u0881\vH\x07H\u0883" +
		"\nH\fH\x0EH\u0886\vH\x03I\x03I\x03I\x03I\x07I\u088C\nI\fI\x0EI\u088F\v" +
		"I\x03I\x03I\x07I\u0893\nI\fI\x0EI\u0896\vI\x07I\u0898\nI\fI\x0EI\u089B" +
		"\vI\x03J\x03J\x03J\x03J\x07J\u08A1\nJ\fJ\x0EJ\u08A4\vJ\x03J\x03J\x07J" +
		"\u08A8\nJ\fJ\x0EJ\u08AB\vJ\x07J\u08AD\nJ\fJ\x0EJ\u08B0\vJ\x03K\x03K\x03" +
		"K\x03K\x07K\u08B6\nK\fK\x0EK\u08B9\vK\x03K\x03K\x07K\u08BD\nK\fK\x0EK" +
		"\u08C0\vK\x07K\u08C2\nK\fK\x0EK\u08C5\vK\x03L\x03L\x03L\x03L\x07L\u08CB" +
		"\nL\fL\x0EL\u08CE\vL\x03L\x03L\x07L\u08D2\nL\fL\x0EL\u08D5\vL\x07L\u08D7" +
		"\nL\fL\x0EL\u08DA\vL\x03M\x03M\x03M\x03M\x07M\u08E0\nM\fM\x0EM\u08E3\v" +
		"M\x03M\x03M";
	private static readonly _serializedATNSegment1: string =
		"\x07M\u08E7\nM\fM\x0EM\u08EA\vM\x07M\u08EC\nM\fM\x0EM\u08EF\vM\x03N\x03" +
		"N\x03N\x03N\x07N\u08F5\nN\fN\x0EN\u08F8\vN\x03N\x03N\x07N\u08FC\nN\fN" +
		"\x0EN\u08FF\vN\x07N\u0901\nN\fN\x0EN\u0904\vN\x03O\x03O\x03O\x03O\x07" +
		"O\u090A\nO\fO\x0EO\u090D\vO\x03O\x03O\x07O\u0911\nO\fO\x0EO\u0914\vO\x07" +
		"O\u0916\nO\fO\x0EO\u0919\vO\x03P\x03P\x03P\x03P\x07P\u091F\nP\fP\x0EP" +
		"\u0922\vP\x03P\x03P\x07P\u0926\nP\fP\x0EP\u0929\vP\x07P\u092B\nP\fP\x0E" +
		"P\u092E\vP\x03Q\x03Q\x03Q\x03Q\x07Q\u0934\nQ\fQ\x0EQ\u0937\vQ\x03Q\x03" +
		"Q\x07Q\u093B\nQ\fQ\x0EQ\u093E\vQ\x07Q\u0940\nQ\fQ\x0EQ\u0943\vQ\x03R\x03" +
		"R\x03R\x03R\x07R\u0949\nR\fR\x0ER\u094C\vR\x03R\x03R\x07R\u0950\nR\fR" +
		"\x0ER\u0953\vR\x07R\u0955\nR\fR\x0ER\u0958\vR\x03S\x03S\x03S\x03S\x07" +
		"S\u095E\nS\fS\x0ES\u0961\vS\x03S\x03S\x07S\u0965\nS\fS\x0ES\u0968\vS\x07" +
		"S\u096A\nS\fS\x0ES\u096D\vS\x03T\x03T\x03T\x03T\x07T\u0973\nT\fT\x0ET" +
		"\u0976\vT\x03T\x03T\x07T\u097A\nT\fT\x0ET\u097D\vT\x07T\u097F\nT\fT\x0E" +
		"T\u0982\vT\x03U\x03U\x03U\x03U\x07U\u0988\nU\fU\x0EU\u098B\vU\x03U\x03" +
		"U\x07U\u098F\nU\fU\x0EU\u0992\vU\x07U\u0994\nU\fU\x0EU\u0997\vU\x03V\x03" +
		"V\x03V\x03V\x07V\u099D\nV\fV\x0EV\u09A0\vV\x03V\x03V\x07V\u09A4\nV\fV" +
		"\x0EV\u09A7\vV\x07V\u09A9\nV\fV\x0EV\u09AC\vV\x03W\x03W\x03W\x03W\x07" +
		"W\u09B2\nW\fW\x0EW\u09B5\vW\x03W\x03W\x07W\u09B9\nW\fW\x0EW\u09BC\vW\x07" +
		"W\u09BE\nW\fW\x0EW\u09C1\vW\x03X\x03X\x03X\x03X\x07X\u09C7\nX\fX\x0EX" +
		"\u09CA\vX\x03X\x03X\x07X\u09CE\nX\fX\x0EX\u09D1\vX\x07X\u09D3\nX\fX\x0E" +
		"X\u09D6\vX\x03Y\x03Y\x03Y\x03Y\x07Y\u09DC\nY\fY\x0EY\u09DF\vY\x03Y\x03" +
		"Y\x07Y\u09E3\nY\fY\x0EY\u09E6\vY\x07Y\u09E8\nY\fY\x0EY\u09EB\vY\x03Z\x03" +
		"Z\x03Z\x03Z\x07Z\u09F1\nZ\fZ\x0EZ\u09F4\vZ\x03Z\x03Z\x07Z\u09F8\nZ\fZ" +
		"\x0EZ\u09FB\vZ\x07Z\u09FD\nZ\fZ\x0EZ\u0A00\vZ\x03[\x03[\x03[\x03[\x07" +
		"[\u0A06\n[\f[\x0E[\u0A09\v[\x03[\x03[\x07[\u0A0D\n[\f[\x0E[\u0A10\v[\x07" +
		"[\u0A12\n[\f[\x0E[\u0A15\v[\x03\\\x03\\\x03\\\x03\\\x07\\\u0A1B\n\\\f" +
		"\\\x0E\\\u0A1E\v\\\x03\\\x03\\\x07\\\u0A22\n\\\f\\\x0E\\\u0A25\v\\\x07" +
		"\\\u0A27\n\\\f\\\x0E\\\u0A2A\v\\\x03]\x03]\x03]\x03]\x07]\u0A30\n]\f]" +
		"\x0E]\u0A33\v]\x03]\x03]\x07]\u0A37\n]\f]\x0E]\u0A3A\v]\x07]\u0A3C\n]" +
		"\f]\x0E]\u0A3F\v]\x03^\x03^\x03^\x03^\x07^\u0A45\n^\f^\x0E^\u0A48\v^\x03" +
		"^\x03^\x07^\u0A4C\n^\f^\x0E^\u0A4F\v^\x07^\u0A51\n^\f^\x0E^\u0A54\v^\x03" +
		"_\x03_\x03_\x03_\x07_\u0A5A\n_\f_\x0E_\u0A5D\v_\x03_\x03_\x07_\u0A61\n" +
		"_\f_\x0E_\u0A64\v_\x07_\u0A66\n_\f_\x0E_\u0A69\v_\x03`\x03`\x03`\x03`" +
		"\x07`\u0A6F\n`\f`\x0E`\u0A72\v`\x03`\x03`\x07`\u0A76\n`\f`\x0E`\u0A79" +
		"\v`\x07`\u0A7B\n`\f`\x0E`\u0A7E\v`\x03a\x03a\x03a\x03a\x07a\u0A84\na\f" +
		"a\x0Ea\u0A87\va\x03a\x03a\x07a\u0A8B\na\fa\x0Ea\u0A8E\va\x07a\u0A90\n" +
		"a\fa\x0Ea\u0A93\va\x03b\x03b\x03b\x03b\x07b\u0A99\nb\fb\x0Eb\u0A9C\vb" +
		"\x03b\x03b\x07b\u0AA0\nb\fb\x0Eb\u0AA3\vb\x07b\u0AA5\nb\fb\x0Eb\u0AA8" +
		"\vb\x03c\x03c\x03c\x03c\x07c\u0AAE\nc\fc\x0Ec\u0AB1\vc\x03c\x03c\x07c" +
		"\u0AB5\nc\fc\x0Ec\u0AB8\vc\x07c\u0ABA\nc\fc\x0Ec\u0ABD\vc\x03d\x03d\x03" +
		"d\x03d\x07d\u0AC3\nd\fd\x0Ed\u0AC6\vd\x03d\x03d\x07d\u0ACA\nd\fd\x0Ed" +
		"\u0ACD\vd\x07d\u0ACF\nd\fd\x0Ed\u0AD2\vd\x03e\x03e\x03e\x03e\x07e\u0AD8" +
		"\ne\fe\x0Ee\u0ADB\ve\x03e\x03e\x07e\u0ADF\ne\fe\x0Ee\u0AE2\ve\x07e\u0AE4" +
		"\ne\fe\x0Ee\u0AE7\ve\x03f\x03f\x03f\x03f\x07f\u0AED\nf\ff\x0Ef\u0AF0\v" +
		"f\x03f\x03f\x07f\u0AF4\nf\ff\x0Ef\u0AF7\vf\x07f\u0AF9\nf\ff\x0Ef\u0AFC" +
		"\vf\x03g\x03g\x03g\x03g\x07g\u0B02\ng\fg\x0Eg\u0B05\vg\x03g\x03g\x07g" +
		"\u0B09\ng\fg\x0Eg\u0B0C\vg\x07g\u0B0E\ng\fg\x0Eg\u0B11\vg\x03h\x03h\x03" +
		"h\x03h\x07h\u0B17\nh\fh\x0Eh\u0B1A\vh\x03h\x03h\x07h\u0B1E\nh\fh\x0Eh" +
		"\u0B21\vh\x07h\u0B23\nh\fh\x0Eh\u0B26\vh\x03i\x03i\x03i\x03i\x07i\u0B2C" +
		"\ni\fi\x0Ei\u0B2F\vi\x03i\x03i\x07i\u0B33\ni\fi\x0Ei\u0B36\vi\x07i\u0B38" +
		"\ni\fi\x0Ei\u0B3B\vi\x03j\x03j\x03j\x03j\x07j\u0B41\nj\fj\x0Ej\u0B44\v" +
		"j\x03j\x03j\x07j\u0B48\nj\fj\x0Ej\u0B4B\vj\x07j\u0B4D\nj\fj\x0Ej\u0B50" +
		"\vj\x03k\x03k\x03k\x03k\x07k\u0B56\nk\fk\x0Ek\u0B59\vk\x03k\x03k\x07k" +
		"\u0B5D\nk\fk\x0Ek\u0B60\vk\x07k\u0B62\nk\fk\x0Ek\u0B65\vk\x03l\x03l\x03" +
		"l\x03l\x07l\u0B6B\nl\fl\x0El\u0B6E\vl\x03l\x03l\x07l\u0B72\nl\fl\x0El" +
		"\u0B75\vl\x07l\u0B77\nl\fl\x0El\u0B7A\vl\x03m\x03m\x03m\x03m\x07m\u0B80" +
		"\nm\fm\x0Em\u0B83\vm\x03m\x03m\x07m\u0B87\nm\fm\x0Em\u0B8A\vm\x07m\u0B8C" +
		"\nm\fm\x0Em\u0B8F\vm\x03n\x03n\x03n\x03n\x07n\u0B95\nn\fn\x0En\u0B98\v" +
		"n\x03n\x03n\x07n\u0B9C\nn\fn\x0En\u0B9F\vn\x07n\u0BA1\nn\fn\x0En\u0BA4" +
		"\vn\x03o\x03o\x03o\x03o\x07o\u0BAA\no\fo\x0Eo\u0BAD\vo\x03o\x03o\x07o" +
		"\u0BB1\no\fo\x0Eo\u0BB4\vo\x07o\u0BB6\no\fo\x0Eo\u0BB9\vo\x03p\x03p\x03" +
		"p\x03p\x07p\u0BBF\np\fp\x0Ep\u0BC2\vp\x03p\x03p\x07p\u0BC6\np\fp\x0Ep" +
		"\u0BC9\vp\x07p\u0BCB\np\fp\x0Ep\u0BCE\vp\x03q\x03q\x03q\x03q\x07q\u0BD4" +
		"\nq\fq\x0Eq\u0BD7\vq\x03q\x03q\x07q\u0BDB\nq\fq\x0Eq\u0BDE\vq\x07q\u0BE0" +
		"\nq\fq\x0Eq\u0BE3\vq\x03r\x03r\x03r\x03r\x07r\u0BE9\nr\fr\x0Er\u0BEC\v" +
		"r\x03r\x03r\x07r\u0BF0\nr\fr\x0Er\u0BF3\vr\x07r\u0BF5\nr\fr\x0Er\u0BF8" +
		"\vr\x03s\x03s\x03s\x03s\x07s\u0BFE\ns\fs\x0Es\u0C01\vs\x03s\x03s\x07s" +
		"\u0C05\ns\fs\x0Es\u0C08\vs\x07s\u0C0A\ns\fs\x0Es\u0C0D\vs\x03t\x03t\x03" +
		"t\x03t\x07t\u0C13\nt\ft\x0Et\u0C16\vt\x03t\x03t\x07t\u0C1A\nt\ft\x0Et" +
		"\u0C1D\vt\x07t\u0C1F\nt\ft\x0Et\u0C22\vt\x03u\x03u\x03u\x03u\x07u\u0C28" +
		"\nu\fu\x0Eu\u0C2B\vu\x03u\x03u\x07u\u0C2F\nu\fu\x0Eu\u0C32\vu\x07u\u0C34" +
		"\nu\fu\x0Eu\u0C37\vu\x03v\x03v\x03v\x03v\x07v\u0C3D\nv\fv\x0Ev\u0C40\v" +
		"v\x03v\x03v\x07v\u0C44\nv\fv\x0Ev\u0C47\vv\x07v\u0C49\nv\fv\x0Ev\u0C4C" +
		"\vv\x03w\x03w\x03w\x03w\x07w\u0C52\nw\fw\x0Ew\u0C55\vw\x03w\x03w\x07w" +
		"\u0C59\nw\fw\x0Ew\u0C5C\vw\x07w\u0C5E\nw\fw\x0Ew\u0C61\vw\x03x\x03x\x03" +
		"x\x03x\x07x\u0C67\nx\fx\x0Ex\u0C6A\vx\x03x\x03x\x07x\u0C6E\nx\fx\x0Ex" +
		"\u0C71\vx\x07x\u0C73\nx\fx\x0Ex\u0C76\vx\x03y\x03y\x03y\x03y\x07y\u0C7C" +
		"\ny\fy\x0Ey\u0C7F\vy\x03y\x03y\x07y\u0C83\ny\fy\x0Ey\u0C86\vy\x07y\u0C88" +
		"\ny\fy\x0Ey\u0C8B\vy\x03z\x03z\x03z\x03z\x07z\u0C91\nz\fz\x0Ez\u0C94\v" +
		"z\x03z\x03z\x07z\u0C98\nz\fz\x0Ez\u0C9B\vz\x07z\u0C9D\nz\fz\x0Ez\u0CA0" +
		"\vz\x03{\x03{\x03{\x03{\x07{\u0CA6\n{\f{\x0E{\u0CA9\v{\x03{\x03{\x07{" +
		"\u0CAD\n{\f{\x0E{\u0CB0\v{\x07{\u0CB2\n{\f{\x0E{\u0CB5\v{\x03|\x03|\x03" +
		"|\x03|\x07|\u0CBB\n|\f|\x0E|\u0CBE\v|\x03|\x03|\x07|\u0CC2\n|\f|\x0E|" +
		"\u0CC5\v|\x07|\u0CC7\n|\f|\x0E|\u0CCA\v|\x03}\x03}\x03}\x03}\x07}\u0CD0" +
		"\n}\f}\x0E}\u0CD3\v}\x03}\x03}\x07}\u0CD7\n}\f}\x0E}\u0CDA\v}\x07}\u0CDC" +
		"\n}\f}\x0E}\u0CDF\v}\x03~\x03~\x03~\x03~\x07~\u0CE5\n~\f~\x0E~\u0CE8\v" +
		"~\x03~\x03~\x07~\u0CEC\n~\f~\x0E~\u0CEF\v~\x07~\u0CF1\n~\f~\x0E~\u0CF4" +
		"\v~\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x07\x7F\u0CFA\n\x7F\f\x7F\x0E\x7F" +
		"\u0CFD\v\x7F\x03\x7F\x03\x7F\x07\x7F\u0D01\n\x7F\f\x7F\x0E\x7F\u0D04\v" +
		"\x7F\x07\x7F\u0D06\n\x7F\f\x7F\x0E\x7F\u0D09\v\x7F\x03\x80\x03\x80\x03" +
		"\x80\x03\x80\x07\x80\u0D0F\n\x80\f\x80\x0E\x80\u0D12\v\x80\x03\x80\x03" +
		"\x80\x07\x80\u0D16\n\x80\f\x80\x0E\x80\u0D19\v\x80\x07\x80\u0D1B\n\x80" +
		"\f\x80\x0E\x80\u0D1E\v\x80\x03\x81\x03\x81\x03\x81\x03\x81\x07\x81\u0D24" +
		"\n\x81\f\x81\x0E\x81\u0D27\v\x81\x03\x81\x03\x81\x07\x81\u0D2B\n\x81\f" +
		"\x81\x0E\x81\u0D2E\v\x81\x07\x81\u0D30\n\x81\f\x81\x0E\x81\u0D33\v\x81" +
		"\x03\x82\x03\x82\x03\x82\x03\x82\x07\x82\u0D39\n\x82\f\x82\x0E\x82\u0D3C" +
		"\v\x82\x03\x82\x03\x82\x07\x82\u0D40\n\x82\f\x82\x0E\x82\u0D43\v\x82\x07" +
		"\x82\u0D45\n\x82\f\x82\x0E\x82\u0D48\v\x82\x03\x83\x03\x83\x03\x83\x03" +
		"\x83\x07\x83\u0D4E\n\x83\f\x83\x0E\x83\u0D51\v\x83\x03\x83\x03\x83\x07" +
		"\x83\u0D55\n\x83\f\x83\x0E\x83\u0D58\v\x83\x07\x83\u0D5A\n\x83\f\x83\x0E" +
		"\x83\u0D5D\v\x83\x03\x84\x03\x84\x03\x84\x03\x84\x07\x84\u0D63\n\x84\f" +
		"\x84\x0E\x84\u0D66\v\x84\x03\x84\x03\x84\x07\x84\u0D6A\n\x84\f\x84\x0E" +
		"\x84\u0D6D\v\x84\x07\x84\u0D6F\n\x84\f\x84\x0E\x84\u0D72\v\x84\x03\x85" +
		"\x03\x85\x03\x85\x03\x85\x07\x85\u0D78\n\x85\f\x85\x0E\x85\u0D7B\v\x85" +
		"\x03\x85\x03\x85\x07\x85\u0D7F\n\x85\f\x85\x0E\x85\u0D82\v\x85\x07\x85" +
		"\u0D84\n\x85\f\x85\x0E\x85\u0D87\v\x85\x03\x86\x03\x86\x03\x86\x03\x86" +
		"\x07\x86\u0D8D\n\x86\f\x86\x0E\x86\u0D90\v\x86\x03\x86\x03\x86\x07\x86" +
		"\u0D94\n\x86\f\x86\x0E\x86\u0D97\v\x86\x07\x86\u0D99\n\x86\f\x86\x0E\x86" +
		"\u0D9C\v\x86\x03\x87\x03\x87\x03\x87\x03\x87\x07\x87\u0DA2\n\x87\f\x87" +
		"\x0E\x87\u0DA5\v\x87\x03\x87\x03\x87\x07\x87\u0DA9\n\x87\f\x87\x0E\x87" +
		"\u0DAC\v\x87\x07\x87\u0DAE\n\x87\f\x87\x0E\x87\u0DB1\v\x87\x03\x88\x03" +
		"\x88\x03\x88\x03\x88\x07\x88\u0DB7\n\x88\f\x88\x0E\x88\u0DBA\v\x88\x03" +
		"\x88\x03\x88\x07\x88\u0DBE\n\x88\f\x88\x0E\x88\u0DC1\v\x88\x07\x88\u0DC3" +
		"\n\x88\f\x88\x0E\x88\u0DC6\v\x88\x03\x89\x03\x89\x03\x89\x03\x89\x07\x89" +
		"\u0DCC\n\x89\f\x89\x0E\x89\u0DCF\v\x89\x03\x89\x03\x89\x07\x89\u0DD3\n" +
		"\x89\f\x89\x0E\x89\u0DD6\v\x89\x07\x89\u0DD8\n\x89\f\x89\x0E\x89\u0DDB" +
		"\v\x89\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x07\x8A\u0DE1\n\x8A\f\x8A\x0E\x8A" +
		"\u0DE4\v\x8A\x03\x8A\x03\x8A\x07\x8A\u0DE8\n\x8A\f\x8A\x0E\x8A\u0DEB\v" +
		"\x8A\x07\x8A\u0DED\n\x8A\f\x8A\x0E\x8A\u0DF0\v\x8A\x03\x8B\x03\x8B\x03" +
		"\x8B\x03\x8B\x07\x8B\u0DF6\n\x8B\f\x8B\x0E\x8B\u0DF9\v\x8B\x03\x8B\x03" +
		"\x8B\x07\x8B\u0DFD\n\x8B\f\x8B\x0E\x8B\u0E00\v\x8B\x07\x8B\u0E02\n\x8B" +
		"\f\x8B\x0E\x8B\u0E05\v\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x07\x8C\u0E0B" +
		"\n\x8C\f\x8C\x0E\x8C\u0E0E\v\x8C\x03\x8C\x03\x8C\x07\x8C\u0E12\n\x8C\f" +
		"\x8C\x0E\x8C\u0E15\v\x8C\x07\x8C\u0E17\n\x8C\f\x8C\x0E\x8C\u0E1A\v\x8C" +
		"\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x07\x8D\u0E20\n\x8D\f\x8D\x0E\x8D\u0E23" +
		"\v\x8D\x03\x8D\x03\x8D\x07\x8D\u0E27\n\x8D\f\x8D\x0E\x8D\u0E2A\v\x8D\x07" +
		"\x8D\u0E2C\n\x8D\f\x8D\x0E\x8D\u0E2F\v\x8D\x03\x8E\x03\x8E\x03\x8E\x03" +
		"\x8E\x07\x8E\u0E35\n\x8E\f\x8E\x0E\x8E\u0E38\v\x8E\x03\x8E\x03\x8E\x07" +
		"\x8E\u0E3C\n\x8E\f\x8E\x0E\x8E\u0E3F\v\x8E\x07\x8E\u0E41\n\x8E\f\x8E\x0E" +
		"\x8E\u0E44\v\x8E\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x07\x8F\u0E4A\n\x8F\f" +
		"\x8F\x0E\x8F\u0E4D\v\x8F\x03\x8F\x03\x8F\x07\x8F\u0E51\n\x8F\f\x8F\x0E" +
		"\x8F\u0E54\v\x8F\x07\x8F\u0E56\n\x8F\f\x8F\x0E\x8F\u0E59\v\x8F\x03\x90" +
		"\x03\x90\x03\x90\x03\x90\x07\x90\u0E5F\n\x90\f\x90\x0E\x90\u0E62\v\x90" +
		"\x03\x90\x03\x90\x07\x90\u0E66\n\x90\f\x90\x0E\x90\u0E69\v\x90\x07\x90" +
		"\u0E6B\n\x90\f\x90\x0E\x90\u0E6E\v\x90\x03\x91\x03\x91\x03\x91\x03\x91" +
		"\x07\x91\u0E74\n\x91\f\x91\x0E\x91\u0E77\v\x91\x03\x91\x03\x91\x07\x91" +
		"\u0E7B\n\x91\f\x91\x0E\x91\u0E7E\v\x91\x07\x91\u0E80\n\x91\f\x91\x0E\x91" +
		"\u0E83\v\x91\x03\x92\x03\x92\x03\x92\x03\x92\x07\x92\u0E89\n\x92\f\x92" +
		"\x0E\x92\u0E8C\v\x92\x03\x92\x03\x92\x07\x92\u0E90\n\x92\f\x92\x0E\x92" +
		"\u0E93\v\x92\x07\x92\u0E95\n\x92\f\x92\x0E\x92\u0E98\v\x92\x03\x93\x03" +
		"\x93\x03\x93\x03\x93\x07\x93\u0E9E\n\x93\f\x93\x0E\x93\u0EA1\v\x93\x03" +
		"\x93\x03\x93\x07\x93\u0EA5\n\x93\f\x93\x0E\x93\u0EA8\v\x93\x07\x93\u0EAA" +
		"\n\x93\f\x93\x0E\x93\u0EAD\v\x93\x03\x94\x03\x94\x03\x94\x03\x94\x07\x94" +
		"\u0EB3\n\x94\f\x94\x0E\x94\u0EB6\v\x94\x03\x94\x03\x94\x07\x94\u0EBA\n" +
		"\x94\f\x94\x0E\x94\u0EBD\v\x94\x07\x94\u0EBF\n\x94\f\x94\x0E\x94\u0EC2" +
		"\v\x94\x03\x95\x03\x95\x03\x95\x03\x95\x07\x95\u0EC8\n\x95\f\x95\x0E\x95" +
		"\u0ECB\v\x95\x03\x95\x03\x95\x07\x95\u0ECF\n\x95\f\x95\x0E\x95\u0ED2\v" +
		"\x95\x07\x95\u0ED4\n\x95\f\x95\x0E\x95\u0ED7\v\x95\x03\x96\x03\x96\x03" +
		"\x96\x03\x96\x07\x96\u0EDD\n\x96\f\x96\x0E\x96\u0EE0\v\x96\x03\x96\x03" +
		"\x96\x07\x96\u0EE4\n\x96\f\x96\x0E\x96\u0EE7\v\x96\x07\x96\u0EE9\n\x96" +
		"\f\x96\x0E\x96\u0EEC\v\x96\x03\x97\x03\x97\x03\x97\x03\x97\x07\x97\u0EF2" +
		"\n\x97\f\x97\x0E\x97\u0EF5\v\x97\x03\x97\x03\x97\x07\x97\u0EF9\n\x97\f" +
		"\x97\x0E\x97\u0EFC\v\x97\x07\x97\u0EFE\n\x97\f\x97\x0E\x97\u0F01\v\x97" +
		"\x03\x98\x03\x98\x03\x98\x03\x98\x07\x98\u0F07\n\x98\f\x98\x0E\x98\u0F0A" +
		"\v\x98\x03\x98\x03\x98\x07\x98\u0F0E\n\x98\f\x98\x0E\x98\u0F11\v\x98\x07" +
		"\x98\u0F13\n\x98\f\x98\x0E\x98\u0F16\v\x98\x03\x99\x03\x99\x03\x99\x03" +
		"\x99\x07\x99\u0F1C\n\x99\f\x99\x0E\x99\u0F1F\v\x99\x03\x99\x03\x99\x07" +
		"\x99\u0F23\n\x99\f\x99\x0E\x99\u0F26\v\x99\x07\x99\u0F28\n\x99\f\x99\x0E" +
		"\x99\u0F2B\v\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x07\x9A\u0F31\n\x9A\f" +
		"\x9A\x0E\x9A\u0F34\v\x9A\x03\x9A\x03\x9A\x07\x9A\u0F38\n\x9A\f\x9A\x0E" +
		"\x9A\u0F3B\v\x9A\x07\x9A\u0F3D\n\x9A\f\x9A\x0E\x9A\u0F40\v\x9A\x03\x9B" +
		"\x03\x9B\x03\x9B\x03\x9B\x07\x9B\u0F46\n\x9B\f\x9B\x0E\x9B\u0F49\v\x9B" +
		"\x03\x9B\x03\x9B\x07\x9B\u0F4D\n\x9B\f\x9B\x0E\x9B\u0F50\v\x9B\x07\x9B" +
		"\u0F52\n\x9B\f\x9B\x0E\x9B\u0F55\v\x9B\x03\x9C\x03\x9C\x03\x9C\x03\x9C" +
		"\x07\x9C\u0F5B\n\x9C\f\x9C\x0E\x9C\u0F5E\v\x9C\x03\x9C\x03\x9C\x07\x9C" +
		"\u0F62\n\x9C\f\x9C\x0E\x9C\u0F65\v\x9C\x07\x9C\u0F67\n\x9C\f\x9C\x0E\x9C" +
		"\u0F6A\v\x9C\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x07\x9D\u0F70\n\x9D\f\x9D" +
		"\x0E\x9D\u0F73\v\x9D\x03\x9D\x03\x9D\x07\x9D\u0F77\n\x9D\f\x9D\x0E\x9D" +
		"\u0F7A\v\x9D\x07\x9D\u0F7C\n\x9D\f\x9D\x0E\x9D\u0F7F\v\x9D\x03\x9E\x03" +
		"\x9E\x03\x9E\x03\x9E\x07\x9E\u0F85\n\x9E\f\x9E\x0E\x9E\u0F88\v\x9E\x03" +
		"\x9E\x03\x9E\x07\x9E\u0F8C\n\x9E\f\x9E\x0E\x9E\u0F8F\v\x9E\x07\x9E\u0F91" +
		"\n\x9E\f\x9E\x0E\x9E\u0F94\v\x9E\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x07\x9F" +
		"\u0F9A\n\x9F\f\x9F\x0E\x9F\u0F9D\v\x9F\x03\x9F\x03\x9F\x07\x9F\u0FA1\n" +
		"\x9F\f\x9F\x0E\x9F\u0FA4\v\x9F\x07\x9F\u0FA6\n\x9F\f\x9F\x0E\x9F\u0FA9" +
		"\v\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x07\xA0\u0FAF\n\xA0\f\xA0\x0E\xA0" +
		"\u0FB2\v\xA0\x03\xA0\x03\xA0\x07\xA0\u0FB6\n\xA0\f\xA0\x0E\xA0\u0FB9\v" +
		"\xA0\x07\xA0\u0FBB\n\xA0\f\xA0\x0E\xA0\u0FBE\v\xA0\x03\xA1\x03\xA1\x03" +
		"\xA1\x03\xA1\x07\xA1\u0FC4\n\xA1\f\xA1\x0E\xA1\u0FC7\v\xA1\x03\xA1\x03" +
		"\xA1\x07\xA1\u0FCB\n\xA1\f\xA1\x0E\xA1\u0FCE\v\xA1\x07\xA1\u0FD0\n\xA1" +
		"\f\xA1\x0E\xA1\u0FD3\v\xA1\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x07\xA2\u0FD9" +
		"\n\xA2\f\xA2\x0E\xA2\u0FDC\v\xA2\x03\xA2\x03\xA2\x07\xA2\u0FE0\n\xA2\f" +
		"\xA2\x0E\xA2\u0FE3\v\xA2\x07\xA2\u0FE5\n\xA2\f\xA2\x0E\xA2\u0FE8\v\xA2" +
		"\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x07\xA3\u0FEE\n\xA3\f\xA3\x0E\xA3\u0FF1" +
		"\v\xA3\x03\xA3\x03\xA3\x07\xA3\u0FF5\n\xA3\f\xA3\x0E\xA3\u0FF8\v\xA3\x07" +
		"\xA3\u0FFA\n\xA3\f\xA3\x0E\xA3\u0FFD\v\xA3\x03\xA4\x03\xA4\x03\xA4\x03" +
		"\xA4\x07\xA4\u1003\n\xA4\f\xA4\x0E\xA4\u1006\v\xA4\x03\xA4\x03\xA4\x07" +
		"\xA4\u100A\n\xA4\f\xA4\x0E\xA4\u100D\v\xA4\x07\xA4\u100F\n\xA4\f\xA4\x0E" +
		"\xA4\u1012\v\xA4\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x07\xA5\u1018\n\xA5\f" +
		"\xA5\x0E\xA5\u101B\v\xA5\x03\xA5\x03\xA5\x07\xA5\u101F\n\xA5\f\xA5\x0E" +
		"\xA5\u1022\v\xA5\x07\xA5\u1024\n\xA5\f\xA5\x0E\xA5\u1027\v\xA5\x03\xA6" +
		"\x03\xA6\x03\xA6\x03\xA6\x07\xA6\u102D\n\xA6\f\xA6\x0E\xA6\u1030\v\xA6" +
		"\x03\xA6\x03\xA6\x07\xA6\u1034\n\xA6\f\xA6\x0E\xA6\u1037\v\xA6\x07\xA6" +
		"\u1039\n\xA6\f\xA6\x0E\xA6\u103C\v\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x07\xA7\u1042\n\xA7\f\xA7\x0E\xA7\u1045\v\xA7\x03\xA7\x03\xA7\x07\xA7" +
		"\u1049\n\xA7\f\xA7\x0E\xA7\u104C\v\xA7\x07\xA7\u104E\n\xA7\f\xA7\x0E\xA7" +
		"\u1051\v\xA7\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x07\xA8\u1057\n\xA8\f\xA8" +
		"\x0E\xA8\u105A\v\xA8\x03\xA8\x03\xA8\x07\xA8\u105E\n\xA8\f\xA8\x0E\xA8" +
		"\u1061\v\xA8\x07\xA8\u1063\n\xA8\f\xA8\x0E\xA8\u1066\v\xA8\x03\xA9\x03" +
		"\xA9\x03\xA9\x03\xA9\x07\xA9\u106C\n\xA9\f\xA9\x0E\xA9\u106F\v\xA9\x03" +
		"\xA9\x03\xA9\x07\xA9\u1073\n\xA9\f\xA9\x0E\xA9\u1076\v\xA9\x07\xA9\u1078" +
		"\n\xA9\f\xA9\x0E\xA9\u107B\v\xA9\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x07\xAA" +
		"\u1081\n\xAA\f\xAA\x0E\xAA\u1084\v\xAA\x03\xAA\x03\xAA\x07\xAA\u1088\n" +
		"\xAA\f\xAA\x0E\xAA\u108B\v\xAA\x07\xAA\u108D\n\xAA\f\xAA\x0E\xAA\u1090" +
		"\v\xAA\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x07\xAB\u1096\n\xAB\f\xAB\x0E\xAB" +
		"\u1099\v\xAB\x03\xAB\x03\xAB\x07\xAB\u109D\n\xAB\f\xAB\x0E\xAB\u10A0\v" +
		"\xAB\x07\xAB\u10A2\n\xAB\f\xAB\x0E\xAB\u10A5\v\xAB\x03\xAC\x03\xAC\x03" +
		"\xAC\x03\xAC\x07\xAC\u10AB\n\xAC\f\xAC\x0E\xAC\u10AE\v\xAC\x03\xAC\x03" +
		"\xAC\x07\xAC\u10B2\n\xAC\f\xAC\x0E\xAC\u10B5\v\xAC\x07\xAC\u10B7\n\xAC" +
		"\f\xAC\x0E\xAC\u10BA\v\xAC\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x07\xAD\u10C0" +
		"\n\xAD\f\xAD\x0E\xAD\u10C3\v\xAD\x03\xAD\x03\xAD\x07\xAD\u10C7\n\xAD\f" +
		"\xAD\x0E\xAD\u10CA\v\xAD\x07\xAD\u10CC\n\xAD\f\xAD\x0E\xAD\u10CF\v\xAD" +
		"\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x07\xAE\u10D5\n\xAE\f\xAE\x0E\xAE\u10D8" +
		"\v\xAE\x03\xAE\x03\xAE\x07\xAE\u10DC\n\xAE\f\xAE\x0E\xAE\u10DF\v\xAE\x07" +
		"\xAE\u10E1\n\xAE\f\xAE\x0E\xAE\u10E4\v\xAE\x03\xAF\x03\xAF\x03\xAF\x03" +
		"\xAF\x07\xAF\u10EA\n\xAF\f\xAF\x0E\xAF\u10ED\v\xAF\x03\xAF\x03\xAF\x07" +
		"\xAF\u10F1\n\xAF\f\xAF\x0E\xAF\u10F4\v\xAF\x07\xAF\u10F6\n\xAF\f\xAF\x0E" +
		"\xAF\u10F9\v\xAF\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x07\xB0\u10FF\n\xB0\f" +
		"\xB0\x0E\xB0\u1102\v\xB0\x03\xB0\x03\xB0\x07\xB0\u1106\n\xB0\f\xB0\x0E" +
		"\xB0\u1109\v\xB0\x07\xB0\u110B\n\xB0\f\xB0\x0E\xB0\u110E\v\xB0\x03\xB1" +
		"\x03\xB1\x03\xB1\x03\xB1\x07\xB1\u1114\n\xB1\f\xB1\x0E\xB1\u1117\v\xB1" +
		"\x03\xB1\x03\xB1\x07\xB1\u111B\n\xB1\f\xB1\x0E\xB1\u111E\v\xB1\x07\xB1" +
		"\u1120\n\xB1\f\xB1\x0E\xB1\u1123\v\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2" +
		"\x07\xB2\u1129\n\xB2\f\xB2\x0E\xB2\u112C\v\xB2\x03\xB2\x03\xB2\x07\xB2" +
		"\u1130\n\xB2\f\xB2\x0E\xB2\u1133\v\xB2\x07\xB2\u1135\n\xB2\f\xB2\x0E\xB2" +
		"\u1138\v\xB2\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x07\xB3\u113E\n\xB3\f\xB3" +
		"\x0E\xB3\u1141\v\xB3\x03\xB3\x03\xB3\x07\xB3\u1145\n\xB3\f\xB3\x0E\xB3" +
		"\u1148\v\xB3\x07\xB3\u114A\n\xB3\f\xB3\x0E\xB3\u114D\v\xB3\x03\xB4\x03" +
		"\xB4\x03\xB4\x03\xB4\x07\xB4\u1153\n\xB4\f\xB4\x0E\xB4\u1156\v\xB4\x03" +
		"\xB4\x03\xB4\x07\xB4\u115A\n\xB4\f\xB4\x0E\xB4\u115D\v\xB4\x07\xB4\u115F" +
		"\n\xB4\f\xB4\x0E\xB4\u1162\v\xB4\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x07\xB5" +
		"\u1168\n\xB5\f\xB5\x0E\xB5\u116B\v\xB5\x03\xB5\x03\xB5\x07\xB5\u116F\n" +
		"\xB5\f\xB5\x0E";
	private static readonly _serializedATNSegment2: string =
		"\xB5\u1172\v\xB5\x07\xB5\u1174\n\xB5\f\xB5\x0E\xB5\u1177\v\xB5\x03\xB6" +
		"\x03\xB6\x03\xB6\x03\xB6\x07\xB6\u117D\n\xB6\f\xB6\x0E\xB6\u1180\v\xB6" +
		"\x03\xB6\x03\xB6\x07\xB6\u1184\n\xB6\f\xB6\x0E\xB6\u1187\v\xB6\x07\xB6" +
		"\u1189\n\xB6\f\xB6\x0E\xB6\u118C\v\xB6\x03\xB7\x03\xB7\x03\xB7\x03\xB7" +
		"\x07\xB7\u1192\n\xB7\f\xB7\x0E\xB7\u1195\v\xB7\x03\xB7\x03\xB7\x07\xB7" +
		"\u1199\n\xB7\f\xB7\x0E\xB7\u119C\v\xB7\x07\xB7\u119E\n\xB7\f\xB7\x0E\xB7" +
		"\u11A1\v\xB7\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x07\xB8\u11A7\n\xB8\f\xB8" +
		"\x0E\xB8\u11AA\v\xB8\x03\xB8\x03\xB8\x07\xB8\u11AE\n\xB8\f\xB8\x0E\xB8" +
		"\u11B1\v\xB8\x07\xB8\u11B3\n\xB8\f\xB8\x0E\xB8\u11B6\v\xB8\x03\xB9\x03" +
		"\xB9\x03\xB9\x03\xB9\x07\xB9\u11BC\n\xB9\f\xB9\x0E\xB9\u11BF\v\xB9\x03" +
		"\xB9\x03\xB9\x07\xB9\u11C3\n\xB9\f\xB9\x0E\xB9\u11C6\v\xB9\x07\xB9\u11C8" +
		"\n\xB9\f\xB9\x0E\xB9\u11CB\v\xB9\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x06\xBA" +
		"\u11D1\n\xBA\r\xBA\x0E\xBA\u11D2\x03\xBA\x03\xBA\x07\xBA\u11D7\n\xBA\f" +
		"\xBA\x0E\xBA\u11DA\v\xBA\x07\xBA\u11DC\n\xBA\f\xBA\x0E\xBA\u11DF\v\xBA" +
		"\x03\xBA\x05\xBA\u11E2\n\xBA\x03\xBA\x07\xBA\u11E5\n\xBA\f\xBA\x0E\xBA" +
		"\u11E8\v\xBA\x03\xBA\x03\xBA\x07\xBA\u11EC\n\xBA\f\xBA\x0E\xBA\u11EF\v" +
		"\xBA\x03\xBA\x07\xBA\u11F2\n\xBA\f\xBA\x0E\xBA\u11F5\v\xBA\x05\xBA\u11F7" +
		"\n\xBA\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x07\xBB\u11FD\n\xBB\f\xBB\x0E\xBB" +
		"\u1200\v\xBB\x03\xBB\x03\xBB\x07\xBB\u1204\n\xBB\f\xBB\x0E\xBB\u1207\v" +
		"\xBB\x07\xBB\u1209\n\xBB\f\xBB\x0E\xBB\u120C\v\xBB\x03\xBC\x03\xBC\x03" +
		"\xBC\x03\xBC\x07\xBC\u1212\n\xBC\f\xBC\x0E\xBC\u1215\v\xBC\x03\xBC\x03" +
		"\xBC\x07\xBC\u1219\n\xBC\f\xBC\x0E\xBC\u121C\v\xBC\x07\xBC\u121E\n\xBC" +
		"\f\xBC\x0E\xBC\u1221\v\xBC\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x07\xBD\u1227" +
		"\n\xBD\f\xBD\x0E\xBD\u122A\v\xBD\x03\xBD\x03\xBD\x07\xBD\u122E\n\xBD\f" +
		"\xBD\x0E\xBD\u1231\v\xBD\x07\xBD\u1233\n\xBD\f\xBD\x0E\xBD\u1236\v\xBD" +
		"\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x07\xBE\u123C\n\xBE\f\xBE\x0E\xBE\u123F" +
		"\v\xBE\x03\xBE\x03\xBE\x07\xBE\u1243\n\xBE\f\xBE\x0E\xBE\u1246\v\xBE\x07" +
		"\xBE\u1248\n\xBE\f\xBE\x0E\xBE\u124B\v\xBE\x03\xBF\x03\xBF\x03\xBF\x03" +
		"\xBF\x07\xBF\u1251\n\xBF\f\xBF\x0E\xBF\u1254\v\xBF\x03\xBF\x03\xBF\x07" +
		"\xBF\u1258\n\xBF\f\xBF\x0E\xBF\u125B\v\xBF\x07\xBF\u125D\n\xBF\f\xBF\x0E" +
		"\xBF\u1260\v\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x07\xC0\u1266\n\xC0\f" +
		"\xC0\x0E\xC0\u1269\v\xC0\x03\xC0\x03\xC0\x07\xC0\u126D\n\xC0\f\xC0\x0E" +
		"\xC0\u1270\v\xC0\x07\xC0\u1272\n\xC0\f\xC0\x0E\xC0\u1275\v\xC0\x03\xC1" +
		"\x03\xC1\x03\xC1\x03\xC1\x07\xC1\u127B\n\xC1\f\xC1\x0E\xC1\u127E\v\xC1" +
		"\x03\xC1\x03\xC1\x07\xC1\u1282\n\xC1\f\xC1\x0E\xC1\u1285\v\xC1\x07\xC1" +
		"\u1287\n\xC1\f\xC1\x0E\xC1\u128A\v\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2" +
		"\x07\xC2\u1290\n\xC2\f\xC2\x0E\xC2\u1293\v\xC2\x03\xC2\x03\xC2\x07\xC2" +
		"\u1297\n\xC2\f\xC2\x0E\xC2\u129A\v\xC2\x07\xC2\u129C\n\xC2\f\xC2\x0E\xC2" +
		"\u129F\v\xC2\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x07\xC3\u12A5\n\xC3\f\xC3" +
		"\x0E\xC3\u12A8\v\xC3\x03\xC3\x03\xC3\x07\xC3\u12AC\n\xC3\f\xC3\x0E\xC3" +
		"\u12AF\v\xC3\x07\xC3\u12B1\n\xC3\f\xC3\x0E\xC3\u12B4\v\xC3\x03\xC4\x03" +
		"\xC4\x03\xC4\x03\xC4\x07\xC4\u12BA\n\xC4\f\xC4\x0E\xC4\u12BD\v\xC4\x03" +
		"\xC4\x03\xC4\x07\xC4\u12C1\n\xC4\f\xC4\x0E\xC4\u12C4\v\xC4\x07\xC4\u12C6" +
		"\n\xC4\f\xC4\x0E\xC4\u12C9\v\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x07\xC5" +
		"\u12CF\n\xC5\f\xC5\x0E\xC5\u12D2\v\xC5\x03\xC5\x03\xC5\x07\xC5\u12D6\n" +
		"\xC5\f\xC5\x0E\xC5\u12D9\v\xC5\x07\xC5\u12DB\n\xC5\f\xC5\x0E\xC5\u12DE" +
		"\v\xC5\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x06\xC6" +
		"\u12E7\n\xC6\r\xC6\x0E\xC6\u12E8\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x07\xC7" +
		"\u12EF\n\xC7\f\xC7\x0E\xC7\u12F2\v\xC7\x03\xC7\x03\xC7\x07\xC7\u12F6\n" +
		"\xC7\f\xC7\x0E\xC7\u12F9\v\xC7\x07\xC7\u12FB\n\xC7\f\xC7\x0E\xC7\u12FE" +
		"\v\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x07\xC7\u1304\n\xC7\f\xC7\x0E\xC7" +
		"\u1307\v\xC7\x03\xC7\x03\xC7\x07\xC7\u130B\n\xC7\f\xC7\x0E\xC7\u130E\v" +
		"\xC7\x07\xC7\u1310\n\xC7\f\xC7\x0E\xC7\u1313\v\xC7\x03\xC7\x03\xC7\x03" +
		"\xC7\x03\xC7\x06\xC7\u1319\n\xC7\r\xC7\x0E\xC7\u131A\x06\xC7\u131D\n\xC7" +
		"\r\xC7\x0E\xC7\u131E\x03\xC7\x03\xC7\x07\xC7\u1323\n\xC7\f\xC7\x0E\xC7" +
		"\u1326\v\xC7\x03\xC7\x03\xC7\x07\xC7\u132A\n\xC7\f\xC7\x0E\xC7\u132D\v" +
		"\xC7\x03\xC7\x07\xC7\u1330\n\xC7\f\xC7\x0E\xC7\u1333\v\xC7\x05\xC7\u1335" +
		"\n\xC7\x05\xC7\u1337\n\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u133D" +
		"\n\xC8\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x07\xC9\u1343\n\xC9\f\xC9\x0E\xC9" +
		"\u1346\v\xC9\x03\xC9\x03\xC9\x07\xC9\u134A\n\xC9\f\xC9\x0E\xC9\u134D\v" +
		"\xC9\x07\xC9\u134F\n\xC9\f\xC9\x0E\xC9\u1352\v\xC9\x03\xC9\x03\xC9\x05" +
		"\xC9\u1356\n\xC9\x03\xC9\x07\xC9\u1359\n\xC9\f\xC9\x0E\xC9\u135C\v\xC9" +
		"\x03\xC9\x06\xC9\u135F\n\xC9\r\xC9\x0E\xC9\u1360\x06\xC9\u1363\n\xC9\r" +
		"\xC9\x0E\xC9\u1364\x03\xC9\x03\xC9\x05\xC9\u1369\n\xC9\x03\xCA\x03\xCA" +
		"\x03\xCA\x03\xCA\x07\xCA\u136F\n\xCA\f\xCA\x0E\xCA\u1372\v\xCA\x03\xCA" +
		"\x03\xCA\x07\xCA\u1376\n\xCA\f\xCA\x0E\xCA\u1379\v\xCA\x07\xCA\u137B\n" +
		"\xCA\f\xCA\x0E\xCA\u137E\v\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x06\xCA" +
		"\u1384\n\xCA\r\xCA\x0E\xCA\u1385\x06\xCA\u1388\n\xCA\r\xCA\x0E\xCA\u1389" +
		"\x03\xCA\x03\xCA\x05\xCA\u138E\n\xCA\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x07" +
		"\xCB\u1394\n\xCB\f\xCB\x0E\xCB\u1397\v\xCB\x03\xCB\x03\xCB\x07\xCB\u139B" +
		"\n\xCB\f\xCB\x0E\xCB\u139E\v\xCB\x07\xCB\u13A0\n\xCB\f\xCB\x0E\xCB\u13A3" +
		"\v\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x06\xCB\u13A9\n\xCB\r\xCB\x0E\xCB" +
		"\u13AA\x06\xCB\u13AD\n\xCB\r\xCB\x0E\xCB\u13AE\x03\xCB\x03\xCB\x05\xCB" +
		"\u13B3\n\xCB\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x07\xCC\u13B9\n\xCC\f\xCC" +
		"\x0E\xCC\u13BC\v\xCC\x03\xCC\x03\xCC\x07\xCC\u13C0\n\xCC\f\xCC\x0E\xCC" +
		"\u13C3\v\xCC\x07\xCC\u13C5\n\xCC\f\xCC\x0E\xCC\u13C8\v\xCC\x03\xCC\x03" +
		"\xCC\x03\xCC\x03\xCC\x06\xCC\u13CE\n\xCC\r\xCC\x0E\xCC\u13CF\x06\xCC\u13D2" +
		"\n\xCC\r\xCC\x0E\xCC\u13D3\x03\xCC\x03\xCC\x05\xCC\u13D8\n\xCC\x03\xCD" +
		"\x03\xCD\x03\xCD\x03\xCD\x07\xCD\u13DE\n\xCD\f\xCD\x0E\xCD\u13E1\v\xCD" +
		"\x03\xCD\x03\xCD\x07\xCD\u13E5\n\xCD\f\xCD\x0E\xCD\u13E8\v\xCD\x07\xCD" +
		"\u13EA\n\xCD\f\xCD\x0E\xCD\u13ED\v\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD" +
		"\x07\xCD\u13F3\n\xCD\f\xCD\x0E\xCD\u13F6\v\xCD\x03\xCD\x03\xCD\x07\xCD" +
		"\u13FA\n\xCD\f\xCD\x0E\xCD\u13FD\v\xCD\x07\xCD\u13FF\n\xCD\f\xCD\x0E\xCD" +
		"\u1402\v\xCD\x03\xCD\x03\xCD\x03\xCD\x07\xCD\u1407\n\xCD\f\xCD\x0E\xCD" +
		"\u140A\v\xCD\x03\xCD\x06\xCD\u140D\n\xCD\r\xCD\x0E\xCD\u140E\x06\xCD\u1411" +
		"\n\xCD\r\xCD\x0E\xCD\u1412\x03\xCD\x03\xCD\x07\xCD\u1417\n\xCD\f\xCD\x0E" +
		"\xCD\u141A\v\xCD\x03\xCD\x03\xCD\x07\xCD\u141E\n\xCD\f\xCD\x0E\xCD\u1421" +
		"\v\xCD\x03\xCD\x07\xCD\u1424\n\xCD\f\xCD\x0E\xCD\u1427\v\xCD\x05\xCD\u1429" +
		"\n\xCD\x05\xCD\u142B\n\xCD\x03\xCE\x06\xCE\u142E\n\xCE\r\xCE\x0E\xCE\u142F" +
		"\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xD0\x07\xD0\u1437\n\xD0\f\xD0\x0E" +
		"\xD0\u143A\v\xD0\x03\xD0\x03\xD0\x03\xD0\x07\xD0\u143F\n\xD0\f\xD0\x0E" +
		"\xD0\u1442\v\xD0\x03\xD1\x03\xD1\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2" +
		"\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u144F\n\xD2\x03\xD3\x03\xD3\x03" +
		"\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u1457\n\xD3\x03\xD4\x03\xD4\x03\xD4" +
		"\x05\xD4\u145C\n\xD4\x03\xD4\x03\xD4\x05\xD4\u1460\n\xD4\x03\xD4\x03\xD4" +
		"\x05\xD4\u1464\n\xD4\x05\xD4\u1466\n\xD4\x03\xD5\x03\xD5\x03\xD5\x05\xD5" +
		"\u146B\n\xD5\x03\xD6\x03\xD6\x03\xD7\x03\xD7\x03\xD8\x03\xD8\x03\xD9\x03" +
		"\xD9\x03\xDA\x03\xDA\x03\xDB\x03\xDB\x03\xDC\x03\xDC\x03\xDD\x03\xDD\x03" +
		"\xDE\x03\xDE\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u1482\n\xDF\x03\xDF\x03\xDF" +
		"\x03\xDF\x05\xDF\u1487\n\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u148C\n\xDF" +
		"\x05\xDF\u148E\n\xDF\x03\xE0\x03\xE0\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03" +
		"\xE1\x03\xE1\x05\xE1\u1498\n\xE1\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2" +
		"\x03\xE2\x03\xE2\x03\xE2\x05\xE2\u14A2\n\xE2\x03\xE3\x03\xE3\x03\xE3\x03" +
		"\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u14AC\n\xE3\x03\xE4\x03\xE4" +
		"\x03\xE4\x03\xE4\x05\xE4\u14B2\n\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03" +
		"\xE4\x05\xE4\u14B9\n\xE4\x03\xE5\x03\xE5\x07\xE5\u14BD\n\xE5\f\xE5\x0E" +
		"\xE5\u14C0\v\xE5\x03\xE6\x03\xE6\x03\xE6\x07\xE6\u14C5\n\xE6\f\xE6\x0E" +
		"\xE6\u14C8\v\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE7\x03\xE7\x07\xE7\u14CF" +
		"\n\xE7\f\xE7\x0E\xE7\u14D2\v\xE7\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8" +
		"\x03\xE8\x03\xE8\x03\xE8\x05\xE8\u14DC\n\xE8\x03\xE9\x03\xE9\x07\xE9\u14E0" +
		"\n\xE9\f\xE9\x0E\xE9\u14E3\v\xE9\x03\xE9\x03\xE9\x05\xE9\u14E7\n\xE9\x03" +
		"\xEA\x03\xEA\x03\xEA\x07\xEA\u14EC\n\xEA\f\xEA\x0E\xEA\u14EF\v\xEA\x03" +
		"\xEA\x03\xEA\x03\xEA\x03\xEB\x03\xEB\x03\xEB\x05\xEB\u14F7\n\xEB\x03\xEB" +
		"\x03\xEB\x05\xEB\u14FB\n\xEB\x03\xEB\x03\xEB\x05\xEB\u14FF\n\xEB\x05\xEB" +
		"\u1501\n\xEB\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03" +
		"\xEC\x03\xEC\x03\xEC\x03\xEC\x07\xEC\u150E\n\xEC\f\xEC\x0E\xEC\u1511\v" +
		"\xEC\x03\xEC\x05\xEC\u1514\n\xEC\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED" +
		"\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x07\xED\u1521\n\xED\f" +
		"\xED\x0E\xED\u1524\v\xED\x03\xED\x05\xED\u1527\n\xED\x03\xEE\x03\xEE\x07" +
		"\xEE\u152B\n\xEE\f\xEE\x0E\xEE\u152E\v\xEE\x03\xEF\x03\xEF\x03\xEF\x03" +
		"\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x05\xEF\u1538\n\xEF\x03\xF0\x03\xF0" +
		"\x03\xF0\x05\xF0\u153D\n\xF0\x03\xF0\x03\xF0\x03\xF0\x05\xF0\u1542\n\xF0" +
		"\x05\xF0\u1544\n\xF0\x03\xF1\x03\xF1\x03\xF1\x05\xF1\u1549\n\xF1\x03\xF1" +
		"\x03\xF1\x03\xF1\x05\xF1\u154E\n\xF1\x03\xF1\x03\xF1\x03\xF1\x05\xF1\u1553" +
		"\n\xF1\x05\xF1\u1555\n\xF1\x03\xF2\x03\xF2\x03\xF2\x05\xF2\u155A\n\xF2" +
		"\x03\xF2\x03\xF2\x07\xF2\u155E\n\xF2\f\xF2\x0E\xF2\u1561\v\xF2\x03\xF2" +
		"\x03\xF2\x06\xF2\u1565\n\xF2\r\xF2\x0E\xF2\u1566\x03\xF2\x03\xF2\x03\xF2" +
		"\x03\xF2\x03\xF2\x03\xF2\x03\xF2\x07\xF2\u1570\n\xF2\f\xF2\x0E\xF2\u1573" +
		"\v\xF2\x03\xF2\x05\xF2\u1576\n\xF2\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03" +
		"\xF4\x03\xF4\x03\xF5\x03\xF5\x03\xF5\x07\xF5\u1581\n\xF5\f\xF5\x0E\xF5" +
		"\u1584\v\xF5\x03\xF5\x05\xF5\u1587\n\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5" +
		"\x07\xF5\u158D\n\xF5\f\xF5\x0E\xF5\u1590\v\xF5\x03\xF5\x03\xF5\x07\xF5" +
		"\u1594\n\xF5\f\xF5\x0E\xF5\u1597\v\xF5\x03\xF5\x05\xF5\u159A\n\xF5\x05" +
		"\xF5\u159C\n\xF5\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x07\xF6\u15A2\n\xF6\f" +
		"\xF6\x0E\xF6\u15A5\v\xF6\x03\xF6\x03\xF6\x03\xF7\x03\xF7\x05\xF7\u15AB" +
		"\n\xF7\x03\xF7\x03\xF7\x03\xF7\x05\xF7\u15B0\n\xF7\x03\xF7\x05\xF7\u15B3" +
		"\n\xF7\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x05\xF8\u15B9\n\xF8\x03\xF8\x05" +
		"\xF8\u15BC\n\xF8\x03\xF9\x03\xF9\x05\xF9\u15C0\n\xF9\x03\xF9\x03\xF9\x03" +
		"\xF9\x07\xF9\u15C5\n\xF9\f\xF9\x0E\xF9\u15C8\v\xF9\x07\xF9\u15CA\n\xF9" +
		"\f\xF9\x0E\xF9\u15CD\v\xF9\x03\xF9\x07\xF9\u15D0\n\xF9\f\xF9\x0E\xF9\u15D3" +
		"\v\xF9\x07\xF9\u15D5\n\xF9\f\xF9\x0E\xF9\u15D8\v\xF9\x03\xF9\x03\xF9\x03" +
		"\xF9\x03\xF9\x03\xF9\x07\xF9\u15DF\n\xF9\f\xF9\x0E\xF9\u15E2\v\xF9\x03" +
		"\xF9\x05\xF9\u15E5\n\xF9\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x06\xFA" +
		"\u15EC\n\xFA\r\xFA\x0E\xFA\u15ED\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA" +
		"\x03\xFA\x03\xFA\x07\xFA\u15F7\n\xFA\f\xFA\x0E\xFA\u15FA\v\xFA\x03\xFA" +
		"\x05\xFA\u15FD\n\xFA\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFC\x03\xFC\x03" +
		"\xFC\x03\xFC\x06\xFC\u1607\n\xFC\r\xFC\x0E\xFC\u1608\x03\xFC\x03\xFC\x05" +
		"\xFC\u160D\n\xFC\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x06\xFD\u1613\n\xFD\r" +
		"\xFD\x0E\xFD\u1614\x03\xFD\x03\xFD\x03\xFE\x03\xFE\x07\xFE\u161B\n\xFE" +
		"\f\xFE\x0E\xFE\u161E\v\xFE\x03\xFE\x05\xFE\u1621\n\xFE\x03\xFE\x03\xFE" +
		"\x07\xFE\u1625\n\xFE\f\xFE\x0E\xFE\u1628\v\xFE\x07\xFE\u162A\n\xFE\f\xFE" +
		"\x0E\xFE\u162D\v\xFE\x03\xFE\x07\xFE\u1630\n\xFE\f\xFE\x0E\xFE\u1633\v" +
		"\xFE\x03\xFE\x07\xFE\u1636\n\xFE\f\xFE\x0E\xFE\u1639\v\xFE\x03\xFE\x03" +
		"\xFE\x03\xFE\x07\xFE\u163E\n\xFE\f\xFE\x0E\xFE\u1641\v\xFE\x03\xFE\x05" +
		"\xFE\u1644\n\xFE\x03\xFE\x05\xFE\u1647\n\xFE\x03\xFF\x03\xFF\x06\xFF\u164B" +
		"\n\xFF\r\xFF\x0E\xFF\u164C\x03\xFF\x03\xFF\x03\u0100\x03\u0100\x03\u0100" +
		"\x06\u0100\u1654\n\u0100\r\u0100\x0E\u0100\u1655\x03\u0100\x03\u0100\x03" +
		"\u0100\x03\u0100\x03\u0100\x05\u0100\u165D\n\u0100\x03\u0101\x03\u0101" +
		"\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x05\u0101" +
		"\u1667\n\u0101\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x03\u0102\x03\u0102\x05\u0102\u1672\n\u0102\x03\u0103\x03\u0103" +
		"\x03\u0103\x03\u0103\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0105" +
		"\x03\u0105\x07\u0105\u167E\n\u0105\f\u0105\x0E\u0105\u1681\v\u0105\x03" +
		"\u0105\x07\u0105\u1684\n\u0105\f\u0105\x0E\u0105\u1687\v\u0105\x03\u0106" +
		"\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x07\u0106" +
		"\u1690\n\u0106\f\u0106\x0E\u0106\u1693\v\u0106\x03\u0106\x03\u0106\x03" +
		"\u0106\x03\u0106\x07\u0106\u1699\n\u0106\f\u0106\x0E\u0106\u169C\v\u0106" +
		"\x03\u0106\x03\u0106\x05\u0106\u16A0\n\u0106\x03\u0107\x03\u0107\x03\u0107" +
		"\x03\u0107\x06\u0107\u16A6\n\u0107\r\u0107\x0E\u0107\u16A7\x03\u0107\x03" +
		"\u0107\x03\u0107\x03\u0107\x03\u0107\x07\u0107\u16AF\n\u0107\f\u0107\x0E" +
		"\u0107\u16B2\v\u0107\x03\u0107\x05\u0107\u16B5\n\u0107\x03\u0108\x03\u0108" +
		"\x05\u0108\u16B9\n\u0108\x03\u0108\x03\u0108\x03\u0109\x03\u0109\x05\u0109" +
		"\u16BF\n\u0109\x06\u0109\u16C1\n\u0109\r\u0109\x0E\u0109\u16C2\x03\u010A" +
		"\x03\u010A\x06\u010A\u16C7\n\u010A\r\u010A\x0E\u010A\u16C8\x03\u010A\x05" +
		"\u010A\u16CC\n\u010A\x03\u010A\x03\u010A\x06\u010A\u16D0\n\u010A\r\u010A" +
		"\x0E\u010A\u16D1\x03\u010A\x05\u010A\u16D5\n\u010A\x03\u010A\x03\u010A" +
		"\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x07\u010A\u16DD\n\u010A\f\u010A" +
		"\x0E\u010A\u16E0\v\u010A\x03\u010A\x03\u010A\x07\u010A\u16E4\n\u010A\f" +
		"\u010A\x0E\u010A\u16E7\v\u010A\x03\u010A\x03\u010A\x07\u010A\u16EB\n\u010A" +
		"\f\u010A\x0E\u010A\u16EE\v\u010A\x03\u010A\x03\u010A\x05\u010A\u16F2\n" +
		"\u010A\x03\u010B\x03\u010B\x03\u010C\x03\u010C\x03\u010D\x03\u010D\x03" +
		"\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x06\u010E\u1718\n\u010E\r\u010E\x0E\u010E\u1719\x03\u010F" +
		"\x03\u010F\x03\u0110\x03\u0110\x03\u0110\b\u0697\u06A0\u150F\u1522\u1571" +
		"\u169A\x02\x02\u0111\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02" +
		"\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02" +
		"\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02" +
		">\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02" +
		"Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02" +
		"v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A" +
		"\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C" +
		"\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE" +
		"\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0" +
		"\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2" +
		"\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4" +
		"\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6" +
		"\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106" +
		"\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114" +
		"\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122" +
		"\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130" +
		"\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E" +
		"\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C" +
		"\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A" +
		"\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168" +
		"\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176" +
		"\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184" +
		"\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192" +
		"\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0" +
		"\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE" +
		"\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC" +
		"\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA" +
		"\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8" +
		"\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6" +
		"\x02\u01E8\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4" +
		"\x02\u01F6\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202" +
		"\x02\u0204\x02\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\u0210" +
		"\x02\u0212\x02\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02\u021E" +
		"\x02\x02\x1B\x03\x02\t\n\x03\x02\u013C\u013D\x03\x02\xCB\xCC\x03\x02\xF8" +
		"\xF9\x03\x02\xD9\xDA\x03\x02\xC0\xC0\b\x02\u010F\u0110\u0112\u0113\u0120" +
		"\u0128\u0133\u0136\u013C\u013D\u013F\u0141\x05\x02\u010E\u010E\u0122\u0122" +
		"\u0133\u0133\x04\x02\u010F\u010F\u0123\u0123\x05\x02\u0110\u0110\u0124" +
		"\u0125\u0135\u0135\x04\x02\u0111\u0111\u0126\u0126\x04\x02\u0112\u0112" +
		"\u0127\u0127\x05\x02\u0113\u0113\u0128\u0128\u0136\u0136\x04\x02\u0119" +
		"\u0119\u012C\u012C\x05\x02\u011B\u011B\u012D\u012E\u013A\u013A\x04\x02" +
		"\u011C\u011C\u012F\u012F\x04\x02\u011D\u011D\u0130\u0130\x05\x02\u011E" +
		"\u011E\u0131\u0131\u013B\u013B\x03\x02\xEF\xF0\x04\x02\xFF\xFF\u0102\u0105" +
		"\x03\x02\xCE\xCE\x04\x02\xCF\xCF\xD1\xD1\x03\x02\xDB\xDC\x03\x02\xD4\xD4" +
		"\x03\x02\xD5\xD5\x02\u1A49\x02\u022D\x03\x02\x02\x02\x04\u023B\x03\x02" +
		"\x02\x02\x06\u02F5\x03\x02\x02\x02\b\u02F7\x03\x02\x02\x02\n\u030C\x03" +
		"\x02\x02\x02\f\u0327\x03\x02\x02\x02\x0E\u033B\x03\x02\x02\x02\x10\u034F" +
		"\x03\x02\x02\x02\x12\u0363\x03\x02\x02\x02\x14\u0377\x03\x02\x02\x02\x16" +
		"\u0382\x03\x02\x02\x02\x18\u038C\x03\x02\x02\x02\x1A\u039D\x03\x02\x02" +
		"\x02\x1C\u03AF\x03\x02\x02\x02\x1E\u03B2\x03\x02\x02\x02 \u03C8\x03\x02" +
		"\x02\x02\"\u03DE\x03\x02\x02\x02$\u03F2\x03\x02\x02\x02&\u0406\x03\x02" +
		"\x02\x02(\u041A\x03\x02\x02\x02*\u042E\x03\x02\x02\x02,\u0442\x03\x02" +
		"\x02\x02.\u0456\x03\x02\x02\x020\u046A\x03\x02\x02\x022\u047E\x03\x02" +
		"\x02\x024\u0492\x03\x02\x02\x026\u04A6\x03\x02\x02\x028\u04BA\x03\x02" +
		"\x02\x02:\u04CE\x03\x02\x02\x02<\u04E2\x03\x02\x02\x02>\u04F6\x03\x02" +
		"\x02\x02@\u050A\x03\x02\x02\x02B\u051E\x03\x02\x02\x02D\u0542\x03\x02" +
		"\x02\x02F\u0566\x03\x02\x02\x02H\u058A\x03\x02\x02\x02J\u059F\x03\x02" +
		"\x02\x02L\u05AF\x03\x02\x02\x02N\u05BA\x03\x02\x02\x02P\u05BE\x03\x02" +
		"\x02\x02R\u05C7\x03\x02\x02\x02T\u05EB\x03\x02\x02\x02V\u05ED\x03\x02" +
		"\x02\x02X\u05F8\x03\x02\x02\x02Z\u0607\x03\x02\x02\x02\\\u0612\x03\x02" +
		"\x02\x02^\u061D\x03\x02\x02\x02`\u0627\x03\x02\x02\x02b\u0658\x03\x02" +
		"\x02\x02d\u0664\x03\x02\x02\x02f\u0666\x03\x02\x02\x02h\u0668\x03\x02" +
		"\x02\x02j\u06A5\x03\x02\x02\x02l\u06A7\x03\x02\x02\x02n\u06CF\x03\x02" +
		"\x02\x02p\u06DD\x03\x02\x02\x02r\u06ED\x03\x02\x02\x02t\u0712\x03\x02" +
		"\x02\x02v\u0737\x03\x02\x02\x02x\u075C\x03\x02\x02\x02z\u0789\x03\x02" +
		"\x02\x02|\u07B5\x03\x02\x02\x02~\u07CA\x03\x02\x02\x02\x80\u07DF\x03\x02" +
		"\x02\x02\x82\u07F4\x03\x02\x02\x02\x84\u0809\x03\x02\x02\x02\x86\u081E" +
		"\x03\x02\x02\x02\x88\u0833\x03\x02\x02\x02\x8A\u0848\x03\x02\x02\x02\x8C" +
		"\u085D\x03\x02\x02\x02\x8E\u0872\x03\x02\x02\x02\x90\u0887\x03\x02\x02" +
		"\x02\x92\u089C\x03\x02\x02\x02\x94\u08B1\x03\x02\x02\x02\x96\u08C6\x03" +
		"\x02\x02\x02\x98\u08DB\x03\x02\x02\x02\x9A\u08F0\x03\x02\x02\x02\x9C\u0905" +
		"\x03\x02\x02\x02\x9E\u091A\x03\x02\x02\x02\xA0\u092F\x03\x02\x02\x02\xA2" +
		"\u0944\x03\x02\x02\x02\xA4\u0959\x03\x02\x02\x02\xA6\u096E\x03\x02\x02" +
		"\x02\xA8\u0983\x03\x02\x02\x02\xAA\u0998\x03\x02\x02\x02\xAC\u09AD\x03" +
		"\x02\x02\x02\xAE\u09C2\x03\x02\x02\x02\xB0\u09D7\x03\x02\x02\x02\xB2\u09EC" +
		"\x03\x02\x02\x02\xB4\u0A01\x03\x02\x02\x02\xB6\u0A16\x03\x02\x02\x02\xB8" +
		"\u0A2B\x03\x02\x02\x02\xBA\u0A40\x03\x02\x02\x02\xBC\u0A55\x03\x02\x02" +
		"\x02\xBE\u0A6A\x03\x02\x02\x02\xC0\u0A7F\x03\x02\x02\x02\xC2\u0A94\x03" +
		"\x02\x02\x02\xC4\u0AA9\x03\x02\x02\x02\xC6\u0ABE\x03\x02\x02\x02\xC8\u0AD3" +
		"\x03\x02\x02\x02\xCA\u0AE8\x03\x02\x02\x02\xCC\u0AFD\x03\x02\x02\x02\xCE" +
		"\u0B12\x03\x02\x02\x02\xD0\u0B27\x03\x02\x02\x02\xD2\u0B3C\x03\x02\x02" +
		"\x02\xD4\u0B51\x03\x02\x02\x02\xD6\u0B66\x03\x02\x02\x02\xD8\u0B7B\x03" +
		"\x02\x02\x02\xDA\u0B90\x03\x02\x02\x02\xDC\u0BA5\x03\x02\x02\x02\xDE\u0BBA" +
		"\x03\x02\x02\x02\xE0\u0BCF\x03\x02\x02\x02\xE2\u0BE4\x03\x02\x02\x02\xE4" +
		"\u0BF9\x03\x02\x02\x02\xE6\u0C0E\x03\x02\x02\x02\xE8\u0C23\x03\x02\x02" +
		"\x02\xEA\u0C38\x03\x02\x02\x02\xEC\u0C4D\x03\x02\x02\x02\xEE\u0C62\x03" +
		"\x02\x02\x02\xF0\u0C77\x03\x02\x02\x02\xF2\u0C8C\x03\x02\x02\x02\xF4\u0CA1" +
		"\x03\x02\x02\x02\xF6\u0CB6\x03\x02\x02\x02\xF8\u0CCB\x03\x02\x02\x02\xFA" +
		"\u0CE0\x03\x02\x02\x02\xFC\u0CF5\x03\x02\x02\x02\xFE\u0D0A\x03\x02\x02" +
		"\x02\u0100\u0D1F\x03\x02\x02\x02\u0102\u0D34\x03\x02\x02\x02\u0104\u0D49" +
		"\x03\x02\x02\x02\u0106\u0D5E\x03\x02\x02\x02\u0108\u0D73\x03\x02\x02\x02" +
		"\u010A\u0D88\x03\x02\x02\x02\u010C\u0D9D\x03\x02\x02\x02\u010E\u0DB2\x03" +
		"\x02\x02\x02\u0110\u0DC7\x03\x02\x02\x02\u0112\u0DDC\x03\x02\x02\x02\u0114" +
		"\u0DF1\x03\x02\x02\x02\u0116\u0E06\x03\x02\x02\x02\u0118\u0E1B\x03\x02" +
		"\x02\x02\u011A\u0E30\x03\x02\x02\x02\u011C\u0E45\x03\x02\x02\x02\u011E" +
		"\u0E5A\x03\x02\x02\x02\u0120\u0E6F\x03\x02\x02\x02\u0122\u0E84\x03\x02" +
		"\x02\x02\u0124\u0E99\x03\x02\x02\x02\u0126\u0EAE\x03\x02\x02\x02\u0128" +
		"\u0EC3\x03\x02\x02\x02\u012A\u0ED8\x03\x02\x02\x02\u012C\u0EED\x03\x02" +
		"\x02\x02\u012E\u0F02\x03\x02\x02\x02\u0130\u0F17\x03\x02\x02\x02\u0132" +
		"\u0F2C\x03\x02\x02\x02\u0134\u0F41\x03\x02\x02\x02\u0136\u0F56\x03\x02" +
		"\x02\x02\u0138\u0F6B\x03\x02\x02\x02\u013A\u0F80\x03\x02\x02\x02\u013C" +
		"\u0F95\x03\x02\x02\x02\u013E\u0FAA\x03\x02\x02\x02\u0140\u0FBF\x03\x02" +
		"\x02\x02\u0142\u0FD4\x03\x02\x02\x02\u0144\u0FE9\x03\x02\x02\x02\u0146" +
		"\u0FFE\x03\x02\x02\x02\u0148\u1013\x03\x02\x02\x02\u014A\u1028\x03\x02" +
		"\x02\x02\u014C\u103D\x03\x02\x02\x02\u014E\u1052\x03\x02\x02\x02\u0150" +
		"\u1067\x03\x02\x02\x02\u0152\u107C\x03\x02\x02\x02\u0154\u1091\x03\x02" +
		"\x02\x02\u0156\u10A6\x03\x02\x02\x02\u0158";
	private static readonly _serializedATNSegment3: string =
		"\u10BB\x03\x02\x02\x02\u015A\u10D0\x03\x02\x02\x02\u015C\u10E5\x03\x02" +
		"\x02\x02\u015E\u10FA\x03\x02\x02\x02\u0160\u110F\x03\x02\x02\x02\u0162" +
		"\u1124\x03\x02\x02\x02\u0164\u1139\x03\x02\x02\x02\u0166\u114E\x03\x02" +
		"\x02\x02\u0168\u1163\x03\x02\x02\x02\u016A\u1178\x03\x02\x02\x02\u016C" +
		"\u118D\x03\x02\x02\x02\u016E\u11A2\x03\x02\x02\x02\u0170\u11B7\x03\x02" +
		"\x02\x02\u0172\u11CC\x03\x02\x02\x02\u0174\u11F8\x03\x02\x02\x02\u0176" +
		"\u120D\x03\x02\x02\x02\u0178\u1222\x03\x02\x02\x02\u017A\u1237\x03\x02" +
		"\x02\x02\u017C\u124C\x03\x02\x02\x02\u017E\u1261\x03\x02\x02\x02\u0180" +
		"\u1276\x03\x02\x02\x02\u0182\u128B\x03\x02\x02\x02\u0184\u12A0\x03\x02" +
		"\x02\x02\u0186\u12B5\x03\x02\x02\x02\u0188\u12CA\x03\x02\x02\x02\u018A" +
		"\u12E6\x03\x02\x02\x02\u018C\u1336\x03\x02\x02\x02\u018E\u1338\x03\x02" +
		"\x02\x02\u0190\u133E\x03\x02\x02\x02\u0192\u136A\x03\x02\x02\x02\u0194" +
		"\u138F\x03\x02\x02\x02\u0196\u13B4\x03\x02\x02\x02\u0198\u142A\x03\x02" +
		"\x02\x02\u019A\u142D\x03\x02\x02\x02\u019C\u1431\x03\x02\x02\x02\u019E" +
		"\u1438\x03\x02\x02\x02\u01A0\u1443\x03\x02\x02\x02\u01A2\u144E\x03\x02" +
		"\x02\x02\u01A4\u1456\x03\x02\x02\x02\u01A6\u1465\x03\x02\x02\x02\u01A8" +
		"\u1467\x03\x02\x02\x02\u01AA\u146C\x03\x02\x02\x02\u01AC\u146E\x03\x02" +
		"\x02\x02\u01AE\u1470\x03\x02\x02\x02\u01B0\u1472\x03\x02\x02\x02\u01B2" +
		"\u1474\x03\x02\x02\x02\u01B4\u1476\x03\x02\x02\x02\u01B6\u1478\x03\x02" +
		"\x02\x02\u01B8\u147A\x03\x02\x02\x02\u01BA\u147C\x03\x02\x02\x02\u01BC" +
		"\u148D\x03\x02\x02\x02\u01BE\u148F\x03\x02\x02\x02\u01C0\u1497\x03\x02" +
		"\x02\x02\u01C2\u1499\x03\x02\x02\x02\u01C4\u14A3\x03\x02\x02\x02\u01C6" +
		"\u14AD\x03\x02\x02\x02\u01C8\u14BA\x03\x02\x02\x02\u01CA\u14C1\x03\x02" +
		"\x02\x02\u01CC\u14CC\x03\x02\x02\x02\u01CE\u14D3\x03\x02\x02\x02\u01D0" +
		"\u14DD\x03\x02\x02\x02\u01D2\u14E8\x03\x02\x02\x02\u01D4\u1500\x03\x02" +
		"\x02\x02\u01D6\u1513\x03\x02\x02\x02\u01D8\u1526\x03\x02\x02\x02\u01DA" +
		"\u1528\x03\x02\x02\x02\u01DC\u152F\x03\x02\x02\x02\u01DE\u1543\x03\x02" +
		"\x02\x02\u01E0\u1554\x03\x02\x02\x02\u01E2\u1575\x03\x02\x02\x02\u01E4" +
		"\u1577\x03\x02\x02\x02\u01E6\u157B\x03\x02\x02\x02\u01E8\u159B\x03\x02" +
		"\x02\x02\u01EA\u159D\x03\x02\x02\x02\u01EC\u15B2\x03\x02\x02\x02\u01EE" +
		"\u15BB\x03\x02\x02\x02\u01F0\u15E4\x03\x02\x02\x02\u01F2\u15FC\x03\x02" +
		"\x02\x02\u01F4\u15FE\x03\x02\x02\x02\u01F6\u1602\x03\x02\x02\x02\u01F8" +
		"\u160E\x03\x02\x02\x02\u01FA\u1646\x03\x02\x02\x02\u01FC\u1648\x03\x02" +
		"\x02\x02\u01FE\u165C\x03\x02\x02\x02\u0200\u1666\x03\x02\x02\x02\u0202" +
		"\u1671\x03\x02\x02\x02\u0204\u1673\x03\x02\x02\x02\u0206\u1677\x03\x02" +
		"\x02\x02\u0208\u167B\x03\x02\x02\x02\u020A\u169F\x03\x02\x02\x02\u020C" +
		"\u16B4\x03\x02\x02\x02\u020E\u16B6\x03\x02\x02\x02\u0210\u16C0\x03\x02" +
		"\x02\x02\u0212\u16F1\x03\x02\x02\x02\u0214\u16F3\x03\x02\x02\x02\u0216" +
		"\u16F5\x03\x02\x02\x02\u0218\u16F7\x03\x02\x02\x02\u021A\u1717\x03\x02" +
		"\x02\x02\u021C\u171B\x03\x02\x02\x02\u021E\u171D\x03\x02\x02\x02\u0220" +
		"\u022A\x05\x04\x03\x02\u0221\u0223\x07\x04\x02\x02\u0222\u0221\x03\x02" +
		"\x02\x02\u0223\u0226\x03\x02\x02\x02\u0224\u0222\x03\x02\x02\x02\u0224" +
		"\u0225\x03\x02\x02\x02\u0225\u0227\x03\x02\x02\x02\u0226\u0224\x03\x02" +
		"\x02\x02\u0227\u0229\x07\xE7\x02\x02\u0228\u0224\x03\x02\x02\x02\u0229" +
		"\u022C\x03\x02\x02\x02\u022A\u0228\x03\x02\x02\x02\u022A\u022B\x03\x02" +
		"\x02\x02\u022B\u022E\x03\x02\x02\x02\u022C\u022A\x03\x02\x02\x02\u022D" +
		"\u0220\x03\x02\x02\x02\u022E\u022F\x03\x02\x02\x02\u022F\u022D\x03\x02" +
		"\x02\x02\u022F\u0230\x03\x02\x02\x02\u0230\u0234\x03\x02\x02\x02\u0231" +
		"\u0233\x07\xE7\x02\x02\u0232\u0231\x03\x02\x02\x02\u0233\u0236\x03\x02" +
		"\x02\x02\u0234\u0232\x03\x02\x02\x02\u0234\u0235\x03\x02\x02\x02\u0235" +
		"\u0237\x03\x02\x02\x02\u0236\u0234\x03\x02\x02\x02\u0237\u0238\x07\x02" +
		"\x02\x03\u0238\x03\x03\x02\x02\x02\u0239\u023C\x05\x06\x04\x02\u023A\u023C" +
		"\x05\u0210\u0109\x02\u023B\u0239\x03\x02\x02\x02\u023B\u023A\x03\x02\x02" +
		"\x02\u023C\x05\x03\x02\x02\x02\u023D\u02F6\x05\b\x05\x02\u023E\u02F6\x05" +
		"\n\x06\x02\u023F\u02F6\x05\f\x07\x02\u0240\u02F6\x05\x0E\b\x02\u0241\u02F6" +
		"\x05\x10\t\x02\u0242\u02F6\x05\x12\n\x02\u0243\u02F6\x05\x16\f\x02\u0244" +
		"\u02F6\x05\x14\v\x02\u0245\u02F6\x05\x1A\x0E\x02\u0246\u02F6\x05\x18\r" +
		"\x02\u0247\u02F6\x05\u020E\u0108\x02\u0248\u02F6\x05\x1E\x10\x02\u0249" +
		"\u02F6\x05 \x11\x02\u024A\u02F6\x05`1\x02\u024B\u02F6\x05h5\x02\u024C" +
		"\u02F6\x05l7\x02\u024D\u02F6\x05t;\x02\u024E\u02F6\x05r:\x02\u024F\u02F6" +
		"\x05v<\x02\u0250\u02F6\x05x=\x02\u0251\u02F6\x05z>\x02\u0252\u02F6\x05" +
		"|?\x02\u0253\u02F6\x05~@\x02\u0254\u02F6\x05\x80A\x02\u0255\u02F6\x05" +
		"\x82B\x02\u0256\u02F6\x05\x84C\x02\u0257\u02F6\x05\x86D\x02\u0258\u02F6" +
		"\x05\x88E\x02\u0259\u02F6\x05\x8CG\x02\u025A\u02F6\x05\x8EH\x02\u025B" +
		"\u02F6\x05\x90I\x02\u025C\u02F6\x05\x92J\x02\u025D\u02F6\x05\xA2R\x02" +
		"\u025E\u02F6\x05\x94K\x02\u025F\u02F6\x05\x96L\x02\u0260\u02F6\x05\x98" +
		"M\x02\u0261\u02F6\x05\x9AN\x02\u0262\u02F6\x05\x9CO\x02\u0263\u02F6\x05" +
		"\x9EP\x02\u0264\u02F6\x05\xA0Q\x02\u0265\u02F6\x05\xA4S\x02\u0266\u02F6" +
		"\x05\x8AF\x02\u0267\u02F6\x05\u0136\x9C\x02\u0268\u02F6\x05\u0198\xCD" +
		"\x02\u0269\u02F6\x05\u018C\xC7\x02\u026A\u02F6\x05\u0190\xC9\x02\u026B" +
		"\u02F6\x05\u0192\xCA\x02\u026C\u02F6\x05\u0194\xCB\x02\u026D\u02F6\x05" +
		"\u0196\xCC\x02\u026E\u02F6\x05\u01FC\xFF\x02\u026F\u02F6\x05\xA6T\x02" +
		"\u0270\u02F6\x05\xA8U\x02\u0271\u02F6\x05\"\x12\x02\u0272\u02F6\x05$\x13" +
		"\x02\u0273\u02F6\x05&\x14\x02\u0274\u02F6\x05(\x15\x02\u0275\u02F6\x05" +
		"*\x16\x02\u0276\u02F6\x05,\x17\x02\u0277\u02F6\x05.\x18\x02\u0278\u02F6" +
		"\x050\x19\x02\u0279\u02F6\x052\x1A\x02\u027A\u02F6\x054\x1B\x02\u027B" +
		"\u02F6\x056\x1C\x02\u027C\u02F6\x058\x1D\x02\u027D\u02F6\x05:\x1E\x02" +
		"\u027E\u02F6\x05<\x1F\x02\u027F\u02F6\x05> \x02\u0280\u02F6\x05@!\x02" +
		"\u0281\u02F6\x05B\"\x02\u0282\u02F6\x05D#\x02\u0283\u02F6\x05F$\x02\u0284" +
		"\u02F6\x05H%\x02\u0285\u02F6\x05\xAAV\x02\u0286\u02F6\x05\xACW\x02\u0287" +
		"\u02F6\x05\xAEX\x02\u0288\u02F6\x05\xB0Y\x02\u0289\u02F6\x05\xB2Z\x02" +
		"\u028A\u02F6\x05\xB4[\x02\u028B\u02F6\x05\xB6\\\x02\u028C\u02F6\x05\xB8" +
		"]\x02\u028D\u02F6\x05\xBA^\x02\u028E\u02F6\x05\xBC_\x02\u028F\u02F6\x05" +
		"\xBE`\x02\u0290\u02F6\x05\xC0a\x02\u0291\u02F6\x05\xC2b\x02\u0292\u02F6" +
		"\x05\xC4c\x02\u0293\u02F6\x05\xC6d\x02\u0294\u02F6\x05\xC8e\x02\u0295" +
		"\u02F6\x05\xCCg\x02\u0296\u02F6\x05\xCEh\x02\u0297\u02F6\x05\xD0i\x02" +
		"\u0298\u02F6\x05\xD2j\x02\u0299\u02F6\x05\xCAf\x02\u029A\u02F6\x05\xD4" +
		"k\x02\u029B\u02F6\x05\xD6l\x02\u029C\u02F6\x05\xD8m\x02\u029D\u02F6\x05" +
		"\xDAn\x02\u029E\u02F6\x05\xDCo\x02\u029F\u02F6\x05\xDEp\x02\u02A0\u02F6" +
		"\x05\xE0q\x02\u02A1\u02F6\x05\xE2r\x02\u02A2\u02F6\x05\xE4s\x02\u02A3" +
		"\u02F6\x05\xE6t\x02\u02A4\u02F6\x05\xE8u\x02\u02A5\u02F6\x05\xEAv\x02" +
		"\u02A6\u02F6\x05\xECw\x02\u02A7\u02F6\x05\xEEx\x02\u02A8\u02F6\x05\xF0" +
		"y\x02\u02A9\u02F6\x05\xF2z\x02\u02AA\u02F6\x05\xF4{\x02\u02AB\u02F6\x05" +
		"\xF6|\x02\u02AC\u02F6\x05\xF8}\x02\u02AD\u02F6\x05\xFA~\x02\u02AE\u02F6" +
		"\x05\xFC\x7F\x02\u02AF\u02F6\x05\xFE\x80\x02\u02B0\u02F6\x05\u0100\x81" +
		"\x02\u02B1\u02F6\x05\u0102\x82\x02\u02B2\u02F6\x05\u0104\x83\x02\u02B3" +
		"\u02F6\x05\u0106\x84\x02\u02B4\u02F6\x05\u0108\x85\x02\u02B5\u02F6\x05" +
		"\u010A\x86\x02\u02B6\u02F6\x05\u010C\x87\x02\u02B7\u02F6\x05\u010E\x88" +
		"\x02\u02B8\u02F6\x05\u0110\x89\x02\u02B9\u02F6\x05\u0138\x9D\x02\u02BA" +
		"\u02F6\x05\u013A\x9E\x02\u02BB\u02F6\x05\u013C\x9F\x02\u02BC\u02F6\x05" +
		"\u013E\xA0\x02\u02BD\u02F6\x05\u0140\xA1\x02\u02BE\u02F6\x05\u0142\xA2" +
		"\x02\u02BF\u02F6\x05\u0144\xA3\x02\u02C0\u02F6\x05\u0146\xA4\x02\u02C1" +
		"\u02F6\x05\u0148\xA5\x02\u02C2\u02F6\x05\u014A\xA6\x02\u02C3\u02F6\x05" +
		"\u014C\xA7\x02\u02C4\u02F6\x05\u014E\xA8\x02\u02C5\u02F6\x05\u0150\xA9" +
		"\x02\u02C6\u02F6\x05\u0152\xAA\x02\u02C7\u02F6\x05\u013C\x9F\x02\u02C8" +
		"\u02F6\x05\u0154\xAB\x02\u02C9\u02F6\x05\u0156\xAC\x02\u02CA\u02F6\x05" +
		"\u0158\xAD\x02\u02CB\u02F6\x05\u015A\xAE\x02\u02CC\u02F6\x05\u015C\xAF" +
		"\x02\u02CD\u02F6\x05\u015E\xB0\x02\u02CE\u02F6\x05\u0160\xB1\x02\u02CF" +
		"\u02F6\x05\u0162\xB2\x02\u02D0\u02F6\x05\u0164\xB3\x02\u02D1\u02F6\x05" +
		"\u0166\xB4\x02\u02D2\u02F6\x05\u0168\xB5\x02\u02D3\u02F6\x05\u016A\xB6" +
		"\x02\u02D4\u02F6\x05\u016C\xB7\x02\u02D5\u02F6\x05\u016E\xB8\x02\u02D6" +
		"\u02F6\x05\u0170\xB9\x02\u02D7\u02F6\x05\u0172\xBA\x02\u02D8\u02F6\x05" +
		"\u0112\x8A\x02\u02D9\u02F6\x05\u0114\x8B\x02\u02DA\u02F6\x05\u0116\x8C" +
		"\x02\u02DB\u02F6\x05\u0118\x8D\x02\u02DC\u02F6\x05\u011A\x8E\x02\u02DD" +
		"\u02F6\x05\u011C\x8F\x02\u02DE\u02F6\x05\u011E\x90\x02\u02DF\u02F6\x05" +
		"\u0120\x91\x02\u02E0\u02F6\x05\u0122\x92\x02\u02E1\u02F6\x05\u0124\x93" +
		"\x02\u02E2\u02F6\x05\u0126\x94\x02\u02E3\u02F6\x05\u0128\x95\x02\u02E4" +
		"\u02F6\x05\u012A\x96\x02\u02E5\u02F6\x05\u012C\x97\x02\u02E6\u02F6\x05" +
		"\u012E\x98\x02\u02E7\u02F6\x05\u0130\x99\x02\u02E8\u02F6\x05\u0132\x9A" +
		"\x02\u02E9\u02F6\x05\u0134\x9B\x02\u02EA\u02F6\x05\u0174\xBB\x02\u02EB" +
		"\u02F6\x05\u0176\xBC\x02\u02EC\u02F6\x05\u0178\xBD\x02\u02ED\u02F6\x05" +
		"\u017A\xBE\x02\u02EE\u02F6\x05\u017C\xBF\x02\u02EF\u02F6\x05\u017E\xC0" +
		"\x02\u02F0\u02F6\x05\u0180\xC1\x02\u02F1\u02F6\x05\u0182\xC2\x02\u02F2" +
		"\u02F6\x05\u0184\xC3\x02\u02F3\u02F6\x05\u0186\xC4\x02\u02F4\u02F6\x05" +
		"\u0188\xC5\x02\u02F5\u023D\x03\x02\x02\x02\u02F5\u023E\x03\x02\x02\x02" +
		"\u02F5\u023F\x03\x02\x02\x02\u02F5\u0240\x03\x02\x02\x02\u02F5\u0241\x03" +
		"\x02\x02\x02\u02F5\u0242\x03\x02\x02\x02\u02F5\u0243\x03\x02\x02\x02\u02F5" +
		"\u0244\x03\x02\x02\x02\u02F5\u0245\x03\x02\x02\x02\u02F5\u0246\x03\x02" +
		"\x02\x02\u02F5\u0247\x03\x02\x02\x02\u02F5\u0248\x03\x02\x02\x02\u02F5" +
		"\u0249\x03\x02\x02\x02\u02F5\u024A\x03\x02\x02\x02\u02F5\u024B\x03\x02" +
		"\x02\x02\u02F5\u024C\x03\x02\x02\x02\u02F5\u024D\x03\x02\x02\x02\u02F5" +
		"\u024E\x03\x02\x02\x02\u02F5\u024F\x03\x02\x02\x02\u02F5\u0250\x03\x02" +
		"\x02\x02\u02F5\u0251\x03\x02\x02\x02\u02F5\u0252\x03\x02\x02\x02\u02F5" +
		"\u0253\x03\x02\x02\x02\u02F5\u0254\x03\x02\x02\x02\u02F5\u0255\x03\x02" +
		"\x02\x02\u02F5\u0256\x03\x02\x02\x02\u02F5\u0257\x03\x02\x02\x02\u02F5" +
		"\u0258\x03\x02\x02\x02\u02F5\u0259\x03\x02\x02\x02\u02F5\u025A\x03\x02" +
		"\x02\x02\u02F5\u025B\x03\x02\x02\x02\u02F5\u025C\x03\x02\x02\x02\u02F5" +
		"\u025D\x03\x02\x02\x02\u02F5\u025E\x03\x02\x02\x02\u02F5\u025F\x03\x02" +
		"\x02\x02\u02F5\u0260\x03\x02\x02\x02\u02F5\u0261\x03\x02\x02\x02\u02F5" +
		"\u0262\x03\x02\x02\x02\u02F5\u0263\x03\x02\x02\x02\u02F5\u0264\x03\x02" +
		"\x02\x02\u02F5\u0265\x03\x02\x02\x02\u02F5\u0266\x03\x02\x02\x02\u02F5" +
		"\u0267\x03\x02\x02\x02\u02F5\u0268\x03\x02\x02\x02\u02F5\u0269\x03\x02" +
		"\x02\x02\u02F5\u026A\x03\x02\x02\x02\u02F5\u026B\x03\x02\x02\x02\u02F5" +
		"\u026C\x03\x02\x02\x02\u02F5\u026D\x03\x02\x02\x02\u02F5\u026E\x03\x02" +
		"\x02\x02\u02F5\u026F\x03\x02\x02\x02\u02F5\u0270\x03\x02\x02\x02\u02F5" +
		"\u0271\x03\x02\x02\x02\u02F5\u0272\x03\x02\x02\x02\u02F5\u0273\x03\x02" +
		"\x02\x02\u02F5\u0274\x03\x02\x02\x02\u02F5\u0275\x03\x02\x02\x02\u02F5" +
		"\u0276\x03\x02\x02\x02\u02F5\u0277\x03\x02\x02\x02\u02F5\u0278\x03\x02" +
		"\x02\x02\u02F5\u0279\x03\x02\x02\x02\u02F5\u027A\x03\x02\x02\x02\u02F5" +
		"\u027B\x03\x02\x02\x02\u02F5\u027C\x03\x02\x02\x02\u02F5\u027D\x03\x02" +
		"\x02\x02\u02F5\u027E\x03\x02\x02\x02\u02F5\u027F\x03\x02\x02\x02\u02F5" +
		"\u0280\x03\x02\x02\x02\u02F5\u0281\x03\x02\x02\x02\u02F5\u0282\x03\x02" +
		"\x02\x02\u02F5\u0283\x03\x02\x02\x02\u02F5\u0284\x03\x02\x02\x02\u02F5" +
		"\u0285\x03\x02\x02\x02\u02F5\u0286\x03\x02\x02\x02\u02F5\u0287\x03\x02" +
		"\x02\x02\u02F5\u0288\x03\x02\x02\x02\u02F5\u0289\x03\x02\x02\x02\u02F5" +
		"\u028A\x03\x02\x02\x02\u02F5\u028B\x03\x02\x02\x02\u02F5\u028C\x03\x02" +
		"\x02\x02\u02F5\u028D\x03\x02\x02\x02\u02F5\u028E\x03\x02\x02\x02\u02F5" +
		"\u028F\x03\x02\x02\x02\u02F5\u0290\x03\x02\x02\x02\u02F5\u0291\x03\x02" +
		"\x02\x02\u02F5\u0292\x03\x02\x02\x02\u02F5\u0293\x03\x02\x02\x02\u02F5" +
		"\u0294\x03\x02\x02\x02\u02F5\u0295\x03\x02\x02\x02\u02F5\u0296\x03\x02" +
		"\x02\x02\u02F5\u0297\x03\x02\x02\x02\u02F5\u0298\x03\x02\x02\x02\u02F5" +
		"\u0299\x03\x02\x02\x02\u02F5\u029A\x03\x02\x02\x02\u02F5\u029B\x03\x02" +
		"\x02\x02\u02F5\u029C\x03\x02\x02\x02\u02F5\u029D\x03\x02\x02\x02\u02F5" +
		"\u029E\x03\x02\x02\x02\u02F5\u029F\x03\x02\x02\x02\u02F5\u02A0\x03\x02" +
		"\x02\x02\u02F5\u02A1\x03\x02\x02\x02\u02F5\u02A2\x03\x02\x02\x02\u02F5" +
		"\u02A3\x03\x02\x02\x02\u02F5\u02A4\x03\x02\x02\x02\u02F5\u02A5\x03\x02" +
		"\x02\x02\u02F5\u02A6\x03\x02\x02\x02\u02F5\u02A7\x03\x02\x02\x02\u02F5" +
		"\u02A8\x03\x02\x02\x02\u02F5\u02A9\x03\x02\x02\x02\u02F5\u02AA\x03\x02" +
		"\x02\x02\u02F5\u02AB\x03\x02\x02\x02\u02F5\u02AC\x03\x02\x02\x02\u02F5" +
		"\u02AD\x03\x02\x02\x02\u02F5\u02AE\x03\x02\x02\x02\u02F5\u02AF\x03\x02" +
		"\x02\x02\u02F5\u02B0\x03\x02\x02\x02\u02F5\u02B1\x03\x02\x02\x02\u02F5" +
		"\u02B2\x03\x02\x02\x02\u02F5\u02B3\x03\x02\x02\x02\u02F5\u02B4\x03\x02" +
		"\x02\x02\u02F5\u02B5\x03\x02\x02\x02\u02F5\u02B6\x03\x02\x02\x02\u02F5" +
		"\u02B7\x03\x02\x02\x02\u02F5\u02B8\x03\x02\x02\x02\u02F5\u02B9\x03\x02" +
		"\x02\x02\u02F5\u02BA\x03\x02\x02\x02\u02F5\u02BB\x03\x02\x02\x02\u02F5" +
		"\u02BC\x03\x02\x02\x02\u02F5\u02BD\x03\x02\x02\x02\u02F5\u02BE\x03\x02" +
		"\x02\x02\u02F5\u02BF\x03\x02\x02\x02\u02F5\u02C0\x03\x02\x02\x02\u02F5" +
		"\u02C1\x03\x02\x02\x02\u02F5\u02C2\x03\x02\x02\x02\u02F5\u02C3\x03\x02" +
		"\x02\x02\u02F5\u02C4\x03\x02\x02\x02\u02F5\u02C5\x03\x02\x02\x02\u02F5" +
		"\u02C6\x03\x02\x02\x02\u02F5\u02C7\x03\x02\x02\x02\u02F5\u02C8\x03\x02" +
		"\x02\x02\u02F5\u02C9\x03\x02\x02\x02\u02F5\u02CA\x03\x02\x02\x02\u02F5" +
		"\u02CB\x03\x02\x02\x02\u02F5\u02CC\x03\x02\x02\x02\u02F5\u02CD\x03\x02" +
		"\x02\x02\u02F5\u02CE\x03\x02\x02\x02\u02F5\u02CF\x03\x02\x02\x02\u02F5" +
		"\u02D0\x03\x02\x02\x02\u02F5\u02D1\x03\x02\x02\x02\u02F5\u02D2\x03\x02" +
		"\x02\x02\u02F5\u02D3\x03\x02\x02\x02\u02F5\u02D4\x03\x02\x02\x02\u02F5" +
		"\u02D5\x03\x02\x02\x02\u02F5\u02D6\x03\x02\x02\x02\u02F5\u02D7\x03\x02" +
		"\x02\x02\u02F5\u02D8\x03\x02\x02\x02\u02F5\u02D9\x03\x02\x02\x02\u02F5" +
		"\u02DA\x03\x02\x02\x02\u02F5\u02DB\x03\x02\x02\x02\u02F5\u02DC\x03\x02" +
		"\x02\x02\u02F5\u02DD\x03\x02\x02\x02\u02F5\u02DE\x03\x02\x02\x02\u02F5" +
		"\u02DF\x03\x02\x02\x02\u02F5\u02E0\x03\x02\x02\x02\u02F5\u02E1\x03\x02" +
		"\x02\x02\u02F5\u02E2\x03\x02\x02\x02\u02F5\u02E3\x03\x02\x02\x02\u02F5" +
		"\u02E4\x03\x02\x02\x02\u02F5\u02E5\x03\x02\x02\x02\u02F5\u02E6\x03\x02" +
		"\x02\x02\u02F5\u02E7\x03\x02\x02\x02\u02F5\u02E8\x03\x02\x02\x02\u02F5" +
		"\u02E9\x03\x02\x02\x02\u02F5\u02EA\x03\x02\x02\x02\u02F5\u02EB\x03\x02" +
		"\x02\x02\u02F5\u02EC\x03\x02\x02\x02\u02F5\u02ED\x03\x02\x02\x02\u02F5" +
		"\u02EE\x03\x02\x02\x02\u02F5\u02EF\x03\x02\x02\x02\u02F5\u02F0\x03\x02" +
		"\x02\x02\u02F5\u02F1\x03\x02\x02\x02\u02F5\u02F2\x03\x02\x02\x02\u02F5" +
		"\u02F3\x03\x02\x02\x02\u02F5\u02F4\x03\x02\x02\x02\u02F6\x07\x03\x02\x02" +
		"\x02\u02F7\u02F8\x07\x05\x02\x02\u02F8\u02F9\x05\u019E\xD0\x02\u02F9\u02FD" +
		"\x07\xCE\x02\x02\u02FA\u02FC\x07\xE7\x02\x02\u02FB\u02FA\x03\x02\x02\x02" +
		"\u02FC\u02FF\x03\x02\x02\x02\u02FD\u02FB\x03\x02\x02\x02\u02FD\u02FE\x03" +
		"\x02\x02\x02\u02FE\u0309\x03\x02\x02\x02\u02FF\u02FD\x03\x02\x02\x02\u0300" +
		"\u0304\x05T+\x02\u0301\u0303\x07\xE7\x02\x02\u0302\u0301\x03\x02\x02\x02" +
		"\u0303\u0306\x03\x02\x02\x02\u0304\u0302\x03\x02\x02\x02\u0304\u0305\x03" +
		"\x02\x02\x02\u0305\u0308\x03\x02\x02\x02\u0306\u0304\x03\x02\x02\x02\u0307" +
		"\u0300\x03\x02\x02\x02\u0308\u030B\x03\x02\x02\x02\u0309\u0307\x03\x02" +
		"\x02\x02\u0309\u030A\x03\x02\x02\x02\u030A\t\x03\x02\x02\x02\u030B\u0309" +
		"\x03\x02\x02\x02\u030C\u030D\x07\x06\x02\x02\u030D\u030E\x05\u019E\xD0" +
		"\x02\u030E\u0312\x07\xCE\x02\x02\u030F\u0311\x07\xE7\x02\x02\u0310\u030F" +
		"\x03\x02\x02\x02\u0311\u0314\x03\x02\x02\x02\u0312\u0310\x03\x02\x02\x02" +
		"\u0312\u0313\x03\x02\x02\x02\u0313\u0318\x03\x02\x02\x02\u0314\u0312\x03" +
		"\x02\x02\x02\u0315\u0316\x05\u020E\u0108\x02\u0316\u0317\x07\xE7\x02\x02" +
		"\u0317\u0319\x03\x02\x02\x02\u0318\u0315\x03\x02\x02\x02\u0318\u0319\x03" +
		"\x02\x02\x02\u0319\u031A\x03\x02\x02\x02\u031A\u0324\x05f4\x02\u031B\u031D" +
		"\x07\xE7\x02\x02\u031C\u031B\x03\x02\x02\x02\u031D\u0320\x03\x02\x02\x02" +
		"\u031E\u031C\x03\x02\x02\x02\u031E\u031F\x03\x02\x02\x02\u031F\u0321\x03" +
		"\x02\x02\x02\u0320\u031E\x03\x02\x02\x02\u0321\u0323\x05f4\x02\u0322\u031E" +
		"\x03\x02\x02\x02\u0323\u0326\x03\x02\x02\x02\u0324\u0322\x03\x02\x02\x02" +
		"\u0324\u0325\x03\x02\x02\x02\u0325\v\x03\x02\x02\x02\u0326\u0324\x03\x02" +
		"\x02\x02\u0327\u0328\x076\x02\x02\u0328\u0329\x05\u019E\xD0\x02\u0329" +
		"\u032D\x07\xCE\x02\x02\u032A\u032C\x07\xE7\x02\x02\u032B\u032A\x03\x02" +
		"\x02\x02\u032C\u032F\x03\x02\x02\x02\u032D\u032B\x03\x02\x02\x02\u032D" +
		"\u032E\x03\x02\x02\x02\u032E\u0337\x03\x02\x02\x02\u032F\u032D\x03\x02" +
		"\x02\x02\u0330\u0334\x05T+\x02\u0331\u0333\x07\xE7\x02\x02\u0332\u0331" +
		"\x03\x02\x02\x02\u0333\u0336\x03\x02\x02\x02\u0334\u0332\x03\x02\x02\x02" +
		"\u0334\u0335\x03\x02\x02\x02\u0335\u0338\x03\x02\x02\x02\u0336\u0334\x03" +
		"\x02\x02\x02\u0337\u0330\x03\x02\x02\x02\u0338\u0339\x03\x02\x02\x02\u0339" +
		"\u0337\x03\x02\x02\x02\u0339\u033A\x03\x02\x02\x02\u033A\r\x03\x02\x02" +
		"\x02\u033B\u033C\x077\x02\x02\u033C\u033D\x05\u019E\xD0\x02\u033D\u0341" +
		"\x07\xCE\x02\x02\u033E\u0340\x07\xE7\x02\x02\u033F\u033E\x03\x02\x02\x02" +
		"\u0340\u0343\x03\x02\x02\x02\u0341\u033F\x03\x02\x02\x02\u0341\u0342\x03" +
		"\x02\x02\x02\u0342\u034B\x03\x02\x02\x02\u0343\u0341\x03\x02\x02\x02\u0344" +
		"\u0348\x05T+\x02\u0345\u0347\x07\xE7\x02\x02\u0346\u0345\x03\x02\x02\x02" +
		"\u0347\u034A\x03\x02\x02\x02\u0348\u0346\x03\x02\x02\x02\u0348\u0349\x03" +
		"\x02\x02\x02\u0349\u034C\x03\x02\x02\x02\u034A\u0348\x03\x02\x02\x02\u034B" +
		"\u0344\x03\x02\x02\x02\u034C\u034D\x03\x02\x02\x02\u034D\u034B\x03\x02" +
		"\x02\x02\u034D\u034E\x03\x02\x02\x02\u034E\x0F\x03\x02\x02\x02\u034F\u0350" +
		"\x078\x02\x02\u0350\u0351\x05\u019E\xD0\x02\u0351\u0355\x07\xCE\x02\x02" +
		"\u0352\u0354\x07\xE7\x02\x02\u0353\u0352\x03\x02\x02\x02\u0354\u0357\x03" +
		"\x02\x02\x02\u0355\u0353\x03\x02\x02\x02\u0355\u0356\x03\x02\x02\x02\u0356" +
		"\u035F\x03\x02\x02\x02\u0357\u0355\x03\x02\x02\x02\u0358\u035C\x05T+\x02" +
		"\u0359\u035B\x07\xE7\x02\x02\u035A\u0359\x03\x02\x02\x02\u035B\u035E\x03" +
		"\x02\x02\x02\u035C\u035A\x03\x02\x02\x02\u035C\u035D\x03\x02\x02\x02\u035D" +
		"\u0360\x03\x02\x02\x02\u035E\u035C\x03\x02\x02\x02\u035F\u0358\x03\x02" +
		"\x02\x02\u0360\u0361\x03\x02\x02\x02\u0361\u035F\x03\x02\x02\x02\u0361" +
		"\u0362\x03\x02\x02\x02\u0362\x11\x03\x02\x02\x02\u0363\u0364\x079\x02" +
		"\x02\u0364\u0365\x05\u019E\xD0\x02\u0365\u0369\x07\xCE\x02\x02\u0366\u0368" +
		"\x07\xE7\x02\x02\u0367\u0366\x03\x02\x02\x02\u0368\u036B\x03\x02\x02\x02" +
		"\u0369\u0367\x03\x02\x02\x02\u0369\u036A\x03\x02\x02\x02\u036A\u0373\x03" +
		"\x02\x02\x02\u036B\u0369\x03\x02\x02\x02\u036C\u0370\x05T+\x02\u036D\u036F" +
		"\x07\xE7\x02\x02\u036E\u036D\x03\x02\x02\x02\u036F\u0372\x03\x02\x02\x02" +
		"\u0370\u036E\x03\x02\x02\x02\u0370\u0371\x03\x02\x02\x02\u0371\u0374\x03" +
		"\x02\x02\x02\u0372\u0370\x03\x02\x02\x02\u0373\u036C\x03\x02\x02\x02\u0374" +
		"\u0375\x03\x02\x02\x02\u0375\u0373\x03\x02\x02\x02\u0375\u0376\x03\x02" +
		"\x02\x02\u0376\x13\x03\x02\x02\x02\u0377\u0379\x07\x07\x02\x02\u0378\u037A" +
		"\x05\u0212\u010A\x02\u0379\u0378\x03\x02\x02\x02\u0379\u037A\x03\x02\x02" +
		"\x02\u037A\u037B\x03\x02\x02\x02\u037B\u037C\x07\xCE\x02\x02\u037C\u0380" +
		"\x07\xE7\x02\x02\u037D\u037E\x05\u0208\u0105\x02\u037E\u037F\x07\xE7\x02" +
		"\x02\u037F\u0381\x03\x02\x02\x02\u0380\u037D\x03\x02\x02\x02\u0380\u0381" +
		"\x03\x02\x02\x02\u0381\x15\x03\x02\x02\x02\u0382\u0383\x07\b\x02\x02\u0383" +
		"\u0387\x07\xCE\x02\x02\u0384\u0386\x07\xE7\x02\x02\u0385\u0384\x03\x02" +
		"\x02\x02\u0386\u0389\x03\x02\x02\x02\u0387\u0385\x03\x02\x02\x02\u0387" +
		"\u0388\x03\x02\x02\x02\u0388\u038A\x03\x02\x02\x02\u0389\u0387\x03\x02" +
		"\x02\x02\u038A\u038B\x05\x1C\x0F\x02\u038B\x17\x03\x02\x02\x02\u038C\u038E" +
		"\t\x02\x02\x02\u038D\u038F\t\x03\x02\x02\u038E\u038D\x03\x02\x02\x02\u038E" +
		"\u038F\x03\x02\x02\x02\u038F\u0390\x03\x02\x02\x02\u0390\u039A\x07\xCE" +
		"\x02\x02\u0391\u0393\x07\xE7\x02\x02\u0392\u0391\x03\x02\x02\x02\u0393" +
		"\u0396\x03\x02\x02\x02\u0394\u0392\x03\x02\x02\x02\u0394\u0395\x03\x02" +
		"\x02\x02\u0395\u0397\x03\x02\x02\x02\u0396\u0394\x03\x02\x02\x02\u0397" +
		"\u0399\x05T+\x02\u0398\u0394\x03\x02\x02\x02\u0399\u039C\x03\x02\x02\x02" +
		"\u039A\u0398\x03\x02\x02\x02\u039A\u039B\x03\x02\x02\x02\u039B\x19\x03" +
		"\x02\x02\x02\u039C\u039A\x03\x02\x02\x02\u039D\u039E\x07\v\x02\x02\u039E" +
		"\u039F\x07\xCE\x02\x02\u039F\u03A0\x05\u01EC\xF7\x02\u03A0\x1B\x03\x02" +
		"\x02\x02\u03A1\u03A3\x07\xE7\x02\x02\u03A2\u03A1\x03\x02\x02\x02\u03A2" +
		"\u03A3\x03\x02\x02\x02\u03A3\u03AB\x03\x02\x02\x02\u03A4\u03AC\x05\u01FE" +
		"\u0100\x02\u03A5\u03AC\x05\u0208\u0105\x02\u03A6\u03AC\x05\u01E8\xF5\x02" +
		"\u03A7\u03AC\x05\u01FA\xFE\x02\u03A8\u03AC\x05\u01EC\xF7\x02\u03A9\u03AC" +
		"\x05\u020E\u0108\x02\u03AA\u03AC\x05\u01F4\xFB\x02\u03AB\u03A4\x03\x02" +
		"\x02\x02\u03AB\u03A5\x03\x02\x02\x02\u03AB\u03A6\x03\x02\x02\x02\u03AB" +
		"\u03A7\x03\x02\x02\x02\u03AB\u03A8\x03\x02\x02\x02\u03AB\u03A9\x03\x02" +
		"\x02\x02\u03AB\u03AA\x03\x02\x02\x02\u03AC\u03AE\x03\x02\x02\x02\u03AD" +
		"\u03A2\x03\x02\x02\x02\u03AE\u03B1\x03\x02\x02\x02\u03AF\u03AD\x03\x02" +
		"\x02\x02\u03AF\u03B0\x03\x02\x02\x02\u03B0\x1D\x03\x02\x02\x02\u03B1\u03AF" +
		"\x03\x02\x02\x02\u03B2\u03B3\x07\f\x02\x02\u03B3\u03BD\x07\xCE\x02\x02" +
		"\u03B4\u03B5\x07\xE7\x02\x02\u03B5\u03B8\t\x04\x02\x02\u03B6\u03B9\x05" +
		"\u0212\u010A\x02\u03B7\u03B9\x07\xCF\x02\x02\u03B8\u03B6\x03\x02\x02\x02" +
		"\u03B8\u03B7\x03\x02\x02\x02\u03B9\u03BA\x03\x02\x02\x02\u03BA\u03B8\x03" +
		"\x02\x02\x02\u03BA\u03BB\x03\x02\x02\x02\u03BB\u03BC\x03\x02\x02\x02\u03BC" +
		"\u03BE\x07\xCE\x02\x02\u03BD\u03B4\x03\x02\x02\x02\u03BE\u03BF\x03\x02" +
		"\x02\x02\u03BF\u03BD\x03\x02\x02\x02\u03BF\u03C0\x03\x02\x02\x02\u03C0" +
		"\u03C1\x03\x02\x02\x02\u03C1\u03C5\x07\xE7\x02\x02\u03C2\u03C4\x05\u0210" +
		"\u0109\x02\u03C3\u03C2\x03\x02\x02\x02\u03C4\u03C7\x03\x02\x02\x02\u03C5" +
		"\u03C3\x03\x02\x02\x02\u03C5\u03C6\x03\x02\x02\x02\u03C6\x1F\x03\x02\x02" +
		"\x02\u03C7\u03C5\x03\x02\x02\x02\u03C8\u03C9\x07\r\x02\x02\u03C9\u03D3" +
		"\x07\xCE\x02\x02\u03CA\u03CB\x07\xE7\x02\x02\u03CB\u03CE\t\x04\x02\x02" +
		"\u03CC\u03CF\x05\u0212\u010A\x02\u03CD\u03CF\x07\xCF\x02\x02\u03CE\u03CC" +
		"\x03\x02\x02\x02\u03CE\u03CD\x03\x02\x02\x02\u03CF\u03D0\x03\x02\x02\x02" +
		"\u03D0\u03CE\x03\x02\x02\x02\u03D0\u03D1\x03\x02\x02\x02\u03D1\u03D2\x03" +
		"\x02\x02\x02\u03D2\u03D4\x07\xCE\x02\x02\u03D3\u03CA\x03\x02\x02\x02\u03D4" +
		"\u03D5\x03\x02\x02\x02\u03D5\u03D3\x03\x02\x02\x02\u03D5\u03D6\x03\x02" +
		"\x02\x02\u03D6\u03D7\x03\x02\x02\x02\u03D7\u03DB\x07\xE7\x02\x02\u03D8" +
		"\u03DA\x05\u0210\u0109\x02\u03D9\u03D8\x03\x02\x02\x02\u03DA\u03DD\x03" +
		"\x02\x02\x02\u03DB\u03D9\x03\x02\x02\x02\u03DB\u03DC\x03\x02\x02\x02\u03DC" +
		"!\x03\x02\x02\x02\u03DD\u03DB\x03\x02\x02\x02\u03DE\u03DF\x07:\x02\x02" +
		"\u03DF\u03E0\x05\u019E\xD0\x02\u03E0\u03E4\x07\xCE\x02\x02\u03E1\u03E3" +
		"\x07\xE7\x02\x02\u03E2\u03E1\x03\x02\x02\x02\u03E3\u03E6\x03\x02\x02\x02" +
		"\u03E4\u03E2\x03\x02\x02\x02\u03E4\u03E5\x03\x02\x02\x02\u03E5\u03EE\x03" +
		"\x02\x02\x02\u03E6\u03E4\x03\x02\x02\x02\u03E7\u03EB\x05T+\x02\u03E8\u03EA" +
		"\x07\xE7\x02\x02\u03E9\u03E8\x03\x02\x02\x02\u03EA\u03ED\x03\x02\x02\x02" +
		"\u03EB\u03E9\x03\x02\x02\x02\u03EB\u03EC\x03\x02\x02\x02\u03EC\u03EF\x03" +
		"\x02\x02\x02\u03ED\u03EB\x03\x02\x02\x02\u03EE\u03E7\x03\x02\x02\x02\u03EF" +
		"\u03F0\x03\x02\x02\x02\u03F0\u03EE\x03\x02\x02\x02\u03F0\u03F1\x03\x02" +
		"\x02\x02\u03F1#\x03\x02\x02\x02\u03F2\u03F3\x07;\x02\x02\u03F3\u03F4\x05" +
		"\u019E\xD0\x02\u03F4\u03F8\x07\xCE\x02\x02\u03F5\u03F7\x07\xE7\x02\x02" +
		"\u03F6\u03F5\x03\x02\x02\x02\u03F7\u03FA\x03\x02\x02\x02\u03F8\u03F6\x03" +
		"\x02\x02\x02\u03F8\u03F9\x03\x02\x02\x02\u03F9\u0402\x03\x02\x02\x02\u03FA" +
		"\u03F8\x03\x02\x02\x02\u03FB\u03FF\x05T+\x02\u03FC\u03FE\x07\xE7\x02\x02" +
		"\u03FD\u03FC\x03\x02\x02\x02\u03FE\u0401\x03\x02\x02\x02\u03FF\u03FD\x03" +
		"\x02\x02\x02\u03FF\u0400\x03\x02\x02\x02\u0400\u0403\x03\x02\x02\x02\u0401" +
		"\u03FF\x03\x02\x02\x02\u0402\u03FB\x03\x02\x02\x02\u0403\u0404\x03\x02" +
		"\x02\x02\u0404\u0402\x03\x02\x02\x02\u0404\u0405\x03\x02\x02\x02\u0405" +
		"%\x03\x02\x02\x02\u0406\u0407\x07<\x02\x02\u0407\u0408\x05\u019E\xD0\x02" +
		"\u0408\u040C\x07\xCE\x02\x02\u0409\u040B\x07\xE7\x02\x02\u040A\u0409\x03" +
		"\x02\x02\x02\u040B\u040E\x03\x02\x02\x02\u040C\u040A\x03\x02\x02\x02\u040C" +
		"\u040D\x03\x02\x02\x02\u040D\u0416\x03\x02\x02\x02\u040E\u040C\x03\x02" +
		"\x02\x02\u040F\u0413\x05T+\x02\u0410\u0412\x07\xE7\x02\x02\u0411\u0410" +
		"\x03";
	private static readonly _serializedATNSegment4: string =
		"\x02\x02\x02\u0412\u0415\x03\x02\x02\x02\u0413\u0411\x03\x02\x02\x02\u0413" +
		"\u0414\x03\x02\x02\x02\u0414\u0417\x03\x02\x02\x02\u0415\u0413\x03\x02" +
		"\x02\x02\u0416\u040F\x03\x02\x02\x02\u0417\u0418\x03\x02\x02\x02\u0418" +
		"\u0416\x03\x02\x02\x02\u0418\u0419\x03\x02\x02\x02\u0419\'\x03\x02\x02" +
		"\x02\u041A\u041B\x07=\x02\x02\u041B\u041C\x05\u019E\xD0\x02\u041C\u0420" +
		"\x07\xCE\x02\x02\u041D\u041F\x07\xE7\x02\x02\u041E\u041D\x03\x02\x02\x02" +
		"\u041F\u0422\x03\x02\x02\x02\u0420\u041E\x03\x02\x02\x02\u0420\u0421\x03" +
		"\x02\x02\x02\u0421\u042A\x03\x02\x02\x02\u0422\u0420\x03\x02\x02\x02\u0423" +
		"\u0427\x05T+\x02\u0424\u0426\x07\xE7\x02\x02\u0425\u0424\x03\x02\x02\x02" +
		"\u0426\u0429\x03\x02\x02\x02\u0427\u0425\x03\x02\x02\x02\u0427\u0428\x03" +
		"\x02\x02\x02\u0428\u042B\x03\x02\x02\x02\u0429\u0427\x03\x02\x02\x02\u042A" +
		"\u0423\x03\x02\x02\x02\u042B\u042C\x03\x02\x02\x02\u042C\u042A\x03\x02" +
		"\x02\x02\u042C\u042D\x03\x02\x02\x02\u042D)\x03\x02\x02\x02\u042E\u042F" +
		"\x07>\x02\x02\u042F\u0430\x05\u019E\xD0\x02\u0430\u0434\x07\xCE\x02\x02" +
		"\u0431\u0433\x07\xE7\x02\x02\u0432\u0431\x03\x02\x02\x02\u0433\u0436\x03" +
		"\x02\x02\x02\u0434\u0432\x03\x02\x02\x02\u0434\u0435\x03\x02\x02\x02\u0435" +
		"\u043E\x03\x02\x02\x02\u0436\u0434\x03\x02\x02\x02\u0437\u043B\x05T+\x02" +
		"\u0438\u043A\x07\xE7\x02\x02\u0439\u0438\x03\x02\x02\x02\u043A\u043D\x03" +
		"\x02\x02\x02\u043B\u0439\x03\x02\x02\x02\u043B\u043C\x03\x02\x02\x02\u043C" +
		"\u043F\x03\x02\x02\x02\u043D\u043B\x03\x02\x02\x02\u043E\u0437\x03\x02" +
		"\x02\x02\u043F\u0440\x03\x02\x02\x02\u0440\u043E\x03\x02\x02\x02\u0440" +
		"\u0441\x03\x02\x02\x02\u0441+\x03\x02\x02\x02\u0442\u0443\x07?\x02\x02" +
		"\u0443\u0444\x05\u019E\xD0\x02\u0444\u0448\x07\xCE\x02\x02\u0445\u0447" +
		"\x07\xE7\x02\x02\u0446\u0445\x03\x02\x02\x02\u0447\u044A\x03\x02\x02\x02" +
		"\u0448\u0446\x03\x02\x02\x02\u0448\u0449\x03\x02\x02\x02\u0449\u0452\x03" +
		"\x02\x02\x02\u044A\u0448\x03\x02\x02\x02\u044B\u044F\x05T+\x02\u044C\u044E" +
		"\x07\xE7\x02\x02\u044D\u044C\x03\x02\x02\x02\u044E\u0451\x03\x02\x02\x02" +
		"\u044F\u044D\x03\x02\x02\x02\u044F\u0450\x03\x02\x02\x02\u0450\u0453\x03" +
		"\x02\x02\x02\u0451\u044F\x03\x02\x02\x02\u0452\u044B\x03\x02\x02\x02\u0453" +
		"\u0454\x03\x02\x02\x02\u0454\u0452\x03\x02\x02\x02\u0454\u0455\x03\x02" +
		"\x02\x02\u0455-\x03\x02\x02\x02\u0456\u0457\x07@\x02\x02\u0457\u0458\x05" +
		"\u019E\xD0\x02\u0458\u045C\x07\xCE\x02\x02\u0459\u045B\x07\xE7\x02\x02" +
		"\u045A\u0459\x03\x02\x02\x02\u045B\u045E\x03\x02\x02\x02\u045C\u045A\x03" +
		"\x02\x02\x02\u045C\u045D\x03\x02\x02\x02\u045D\u0466\x03\x02\x02\x02\u045E" +
		"\u045C\x03\x02\x02\x02\u045F\u0463\x05T+\x02\u0460\u0462\x07\xE7\x02\x02" +
		"\u0461\u0460\x03\x02\x02\x02\u0462\u0465\x03\x02\x02\x02\u0463\u0461\x03" +
		"\x02\x02\x02\u0463\u0464\x03\x02\x02\x02\u0464\u0467\x03\x02\x02\x02\u0465" +
		"\u0463\x03\x02\x02\x02\u0466\u045F\x03\x02\x02\x02\u0467\u0468\x03\x02" +
		"\x02\x02\u0468\u0466\x03\x02\x02\x02\u0468\u0469\x03\x02\x02\x02\u0469" +
		"/\x03\x02\x02\x02\u046A\u046B\x07A\x02\x02\u046B\u046C\x05\u019E\xD0\x02" +
		"\u046C\u0470\x07\xCE\x02\x02\u046D\u046F\x07\xE7\x02\x02\u046E\u046D\x03" +
		"\x02\x02\x02\u046F\u0472\x03\x02\x02\x02\u0470\u046E\x03\x02\x02\x02\u0470" +
		"\u0471\x03\x02\x02\x02\u0471\u047A\x03\x02\x02\x02\u0472\u0470\x03\x02" +
		"\x02\x02\u0473\u0477\x05T+\x02\u0474\u0476\x07\xE7\x02\x02\u0475\u0474" +
		"\x03\x02\x02\x02\u0476\u0479\x03\x02\x02\x02\u0477\u0475\x03\x02\x02\x02" +
		"\u0477\u0478\x03\x02\x02\x02\u0478\u047B\x03\x02\x02\x02\u0479\u0477\x03" +
		"\x02\x02\x02\u047A\u0473\x03\x02\x02\x02\u047B\u047C\x03\x02\x02\x02\u047C" +
		"\u047A\x03\x02\x02\x02\u047C\u047D\x03\x02\x02\x02\u047D1\x03\x02\x02" +
		"\x02\u047E\u047F\x07B\x02\x02\u047F\u0480\x05\u019E\xD0\x02\u0480\u0484" +
		"\x07\xCE\x02\x02\u0481\u0483\x07\xE7\x02\x02\u0482\u0481\x03\x02\x02\x02" +
		"\u0483\u0486\x03\x02\x02\x02\u0484\u0482\x03\x02\x02\x02\u0484\u0485\x03" +
		"\x02\x02\x02\u0485\u048E\x03\x02\x02\x02\u0486\u0484\x03\x02\x02\x02\u0487" +
		"\u048B\x05T+\x02\u0488\u048A\x07\xE7\x02\x02\u0489\u0488\x03\x02\x02\x02" +
		"\u048A\u048D\x03\x02\x02\x02\u048B\u0489\x03\x02\x02\x02\u048B\u048C\x03" +
		"\x02\x02\x02\u048C\u048F\x03\x02\x02\x02\u048D\u048B\x03\x02\x02\x02\u048E" +
		"\u0487\x03\x02\x02\x02\u048F\u0490\x03\x02\x02\x02\u0490\u048E\x03\x02" +
		"\x02\x02\u0490\u0491\x03\x02\x02\x02\u04913\x03\x02\x02\x02\u0492\u0493" +
		"\x07C\x02\x02\u0493\u0494\x05\u019E\xD0\x02\u0494\u0498\x07\xCE\x02\x02" +
		"\u0495\u0497\x07\xE7\x02\x02\u0496\u0495\x03\x02\x02\x02\u0497\u049A\x03" +
		"\x02\x02\x02\u0498\u0496\x03\x02\x02\x02\u0498\u0499\x03\x02\x02\x02\u0499" +
		"\u04A2\x03\x02\x02\x02\u049A\u0498\x03\x02\x02\x02\u049B\u049F\x05T+\x02" +
		"\u049C\u049E\x07\xE7\x02\x02\u049D\u049C\x03\x02\x02\x02\u049E\u04A1\x03" +
		"\x02\x02\x02\u049F\u049D\x03\x02\x02\x02\u049F\u04A0\x03\x02\x02\x02\u04A0" +
		"\u04A3\x03\x02\x02\x02\u04A1\u049F\x03\x02\x02\x02\u04A2\u049B\x03\x02" +
		"\x02\x02\u04A3\u04A4\x03\x02\x02\x02\u04A4\u04A2\x03\x02\x02\x02\u04A4" +
		"\u04A5\x03\x02\x02\x02\u04A55\x03\x02\x02\x02\u04A6\u04A7\x07D\x02\x02" +
		"\u04A7\u04A8\x05\u019E\xD0\x02\u04A8\u04AC\x07\xCE\x02\x02\u04A9\u04AB" +
		"\x07\xE7\x02\x02\u04AA\u04A9\x03\x02\x02\x02\u04AB\u04AE\x03\x02\x02\x02" +
		"\u04AC\u04AA\x03\x02\x02\x02\u04AC\u04AD\x03\x02\x02\x02\u04AD\u04B6\x03" +
		"\x02\x02\x02\u04AE\u04AC\x03\x02\x02\x02\u04AF\u04B3\x05T+\x02\u04B0\u04B2" +
		"\x07\xE7\x02\x02\u04B1\u04B0\x03\x02\x02\x02\u04B2\u04B5\x03\x02\x02\x02" +
		"\u04B3\u04B1\x03\x02\x02\x02\u04B3\u04B4\x03\x02\x02\x02\u04B4\u04B7\x03" +
		"\x02\x02\x02\u04B5\u04B3\x03\x02\x02\x02\u04B6\u04AF\x03\x02\x02\x02\u04B7" +
		"\u04B8\x03\x02\x02\x02\u04B8\u04B6\x03\x02\x02\x02\u04B8\u04B9\x03\x02" +
		"\x02\x02\u04B97\x03\x02\x02\x02\u04BA\u04BB\x07E\x02\x02\u04BB\u04BC\x05" +
		"\u019E\xD0\x02\u04BC\u04C0\x07\xCE\x02\x02\u04BD\u04BF\x07\xE7\x02\x02" +
		"\u04BE\u04BD\x03\x02\x02\x02\u04BF\u04C2\x03\x02\x02\x02\u04C0\u04BE\x03" +
		"\x02\x02\x02\u04C0\u04C1\x03\x02\x02\x02\u04C1\u04CA\x03\x02\x02\x02\u04C2" +
		"\u04C0\x03\x02\x02\x02\u04C3\u04C7\x05T+\x02\u04C4\u04C6\x07\xE7\x02\x02" +
		"\u04C5\u04C4\x03\x02\x02\x02\u04C6\u04C9\x03\x02\x02\x02\u04C7\u04C5\x03" +
		"\x02\x02\x02\u04C7\u04C8\x03\x02\x02\x02\u04C8\u04CB\x03\x02\x02\x02\u04C9" +
		"\u04C7\x03\x02\x02\x02\u04CA\u04C3\x03\x02\x02\x02\u04CB\u04CC\x03\x02" +
		"\x02\x02\u04CC\u04CA\x03\x02\x02\x02\u04CC\u04CD\x03\x02\x02\x02\u04CD" +
		"9\x03\x02\x02\x02\u04CE\u04CF\x07F\x02\x02\u04CF\u04D0\x05\u019E\xD0\x02" +
		"\u04D0\u04D4\x07\xCE\x02\x02\u04D1\u04D3\x07\xE7\x02\x02\u04D2\u04D1\x03" +
		"\x02\x02\x02\u04D3\u04D6\x03\x02\x02\x02\u04D4\u04D2\x03\x02\x02\x02\u04D4" +
		"\u04D5\x03\x02\x02\x02\u04D5\u04DE\x03\x02\x02\x02\u04D6\u04D4\x03\x02" +
		"\x02\x02\u04D7\u04DB\x05T+\x02\u04D8\u04DA\x07\xE7\x02\x02\u04D9\u04D8" +
		"\x03\x02\x02\x02\u04DA\u04DD\x03\x02\x02\x02\u04DB\u04D9\x03\x02\x02\x02" +
		"\u04DB\u04DC\x03\x02\x02\x02\u04DC\u04DF\x03\x02\x02\x02\u04DD\u04DB\x03" +
		"\x02\x02\x02\u04DE\u04D7\x03\x02\x02\x02\u04DF\u04E0\x03\x02\x02\x02\u04E0" +
		"\u04DE\x03\x02\x02\x02\u04E0\u04E1\x03\x02\x02\x02\u04E1;\x03\x02\x02" +
		"\x02\u04E2\u04E3\x07G\x02\x02\u04E3\u04E4\x05\u019E\xD0\x02\u04E4\u04E8" +
		"\x07\xCE\x02\x02\u04E5\u04E7\x07\xE7\x02\x02\u04E6\u04E5\x03\x02\x02\x02" +
		"\u04E7\u04EA\x03\x02\x02\x02\u04E8\u04E6\x03\x02\x02\x02\u04E8\u04E9\x03" +
		"\x02\x02\x02\u04E9\u04F2\x03\x02\x02\x02\u04EA\u04E8\x03\x02\x02\x02\u04EB" +
		"\u04EF\x05T+\x02\u04EC\u04EE\x07\xE7\x02\x02\u04ED\u04EC\x03\x02\x02\x02" +
		"\u04EE\u04F1\x03\x02\x02\x02\u04EF\u04ED\x03\x02\x02\x02\u04EF\u04F0\x03" +
		"\x02\x02\x02\u04F0\u04F3\x03\x02\x02\x02\u04F1\u04EF\x03\x02\x02\x02\u04F2" +
		"\u04EB\x03\x02\x02\x02\u04F3\u04F4\x03\x02\x02\x02\u04F4\u04F2\x03\x02" +
		"\x02\x02\u04F4\u04F5\x03\x02\x02\x02\u04F5=\x03\x02\x02\x02\u04F6\u04F7" +
		"\x07H\x02\x02\u04F7\u04F8\x05\u019E\xD0\x02\u04F8\u04FC\x07\xCE\x02\x02" +
		"\u04F9\u04FB\x07\xE7\x02\x02\u04FA\u04F9\x03\x02\x02\x02\u04FB\u04FE\x03" +
		"\x02\x02\x02\u04FC\u04FA\x03\x02\x02\x02\u04FC\u04FD\x03\x02\x02\x02\u04FD" +
		"\u0506\x03\x02\x02\x02\u04FE\u04FC\x03\x02\x02\x02\u04FF\u0503\x05T+\x02" +
		"\u0500\u0502\x07\xE7\x02\x02\u0501\u0500\x03\x02\x02\x02\u0502\u0505\x03" +
		"\x02\x02\x02\u0503\u0501\x03\x02\x02\x02\u0503\u0504\x03\x02\x02\x02\u0504" +
		"\u0507\x03\x02\x02\x02\u0505\u0503\x03\x02\x02\x02\u0506\u04FF\x03\x02" +
		"\x02\x02\u0507\u0508\x03\x02\x02\x02\u0508\u0506\x03\x02\x02\x02\u0508" +
		"\u0509\x03\x02\x02\x02\u0509?\x03\x02\x02\x02\u050A\u050B\x07I\x02\x02" +
		"\u050B\u050C\x05\u019E\xD0\x02\u050C\u0510\x07\xCE\x02\x02\u050D\u050F" +
		"\x07\xE7\x02\x02\u050E\u050D\x03\x02\x02\x02\u050F\u0512\x03\x02\x02\x02" +
		"\u0510\u050E\x03\x02\x02\x02\u0510\u0511\x03\x02\x02\x02\u0511\u051A\x03" +
		"\x02\x02\x02\u0512\u0510\x03\x02\x02\x02\u0513\u0517\x05T+\x02\u0514\u0516" +
		"\x07\xE7\x02\x02\u0515\u0514\x03\x02\x02\x02\u0516\u0519\x03\x02\x02\x02" +
		"\u0517\u0515\x03\x02\x02\x02\u0517\u0518\x03\x02\x02\x02\u0518\u051B\x03" +
		"\x02\x02\x02\u0519\u0517\x03\x02\x02\x02\u051A\u0513\x03\x02\x02\x02\u051B" +
		"\u051C\x03\x02\x02\x02\u051C\u051A\x03\x02\x02\x02\u051C\u051D\x03\x02" +
		"\x02\x02\u051DA\x03\x02\x02\x02\u051E\u051F\x07\x87\x02\x02\u051F\u0520" +
		"\x05\u019E\xD0\x02\u0520\u0524\x07\xCE\x02\x02\u0521\u0523\x07\xE7\x02" +
		"\x02\u0522\u0521\x03\x02\x02\x02\u0523\u0526\x03\x02\x02\x02\u0524\u0522" +
		"\x03\x02\x02\x02\u0524\u0525\x03\x02\x02\x02\u0525\u0530\x03\x02\x02\x02" +
		"\u0526\u0524\x03\x02\x02\x02\u0527\u052B\x05T+\x02\u0528\u052A\x07\xE7" +
		"\x02\x02\u0529\u0528\x03\x02\x02\x02\u052A\u052D\x03\x02\x02\x02\u052B" +
		"\u0529\x03\x02\x02\x02\u052B\u052C\x03\x02\x02\x02\u052C\u052F\x03\x02" +
		"\x02\x02\u052D\u052B\x03\x02\x02\x02\u052E\u0527\x03\x02\x02\x02\u052F" +
		"\u0532\x03\x02\x02\x02\u0530\u052E\x03\x02\x02\x02\u0530\u0531\x03\x02" +
		"\x02\x02\u0531\u0534\x03\x02\x02\x02\u0532\u0530\x03\x02\x02\x02\u0533" +
		"\u0535\x05J&\x02\u0534\u0533\x03\x02\x02\x02\u0535\u0536\x03\x02\x02\x02" +
		"\u0536\u0534\x03\x02\x02\x02\u0536\u0537\x03\x02\x02\x02\u0537\u0538\x03" +
		"\x02\x02\x02\u0538\u053A\x07\xD9\x02\x02\u0539\u053B\x05R*\x02\u053A\u0539" +
		"\x03\x02\x02\x02\u053A\u053B\x03\x02\x02\x02\u053B\u053F\x03\x02\x02\x02" +
		"\u053C\u053E\x07\xE7\x02\x02\u053D\u053C\x03\x02\x02\x02\u053E\u0541\x03" +
		"\x02\x02\x02\u053F\u053D\x03\x02\x02\x02\u053F\u0540\x03\x02\x02\x02\u0540" +
		"C\x03\x02\x02\x02\u0541\u053F\x03\x02\x02\x02\u0542\u0543\x07\x88\x02" +
		"\x02\u0543\u0544\x05\u019E\xD0\x02\u0544\u0548\x07\xCE\x02\x02\u0545\u0547" +
		"\x07\xE7\x02\x02\u0546\u0545\x03\x02\x02\x02\u0547\u054A\x03\x02\x02\x02" +
		"\u0548\u0546\x03\x02\x02\x02\u0548\u0549\x03\x02\x02\x02\u0549\u0554\x03" +
		"\x02\x02\x02\u054A\u0548\x03\x02\x02\x02\u054B\u054F\x05T+\x02\u054C\u054E" +
		"\x07\xE7\x02\x02\u054D\u054C\x03\x02\x02\x02\u054E\u0551\x03\x02\x02\x02" +
		"\u054F\u054D\x03\x02\x02\x02\u054F\u0550\x03\x02\x02\x02\u0550\u0553\x03" +
		"\x02\x02\x02\u0551\u054F\x03\x02\x02\x02\u0552\u054B\x03\x02\x02\x02\u0553" +
		"\u0556\x03\x02\x02\x02\u0554\u0552\x03\x02\x02\x02\u0554\u0555\x03\x02" +
		"\x02\x02\u0555\u0558\x03\x02\x02\x02\u0556\u0554\x03\x02\x02\x02\u0557" +
		"\u0559\x05J&\x02\u0558\u0557\x03\x02\x02\x02\u0559\u055A\x03\x02\x02\x02" +
		"\u055A\u0558\x03\x02\x02\x02\u055A\u055B\x03\x02\x02\x02\u055B\u055C\x03" +
		"\x02\x02\x02\u055C\u055E\x07\xD9\x02\x02\u055D\u055F\x05R*\x02\u055E\u055D" +
		"\x03\x02\x02\x02\u055E\u055F\x03\x02\x02\x02\u055F\u0563\x03\x02\x02\x02" +
		"\u0560\u0562\x07\xE7\x02\x02\u0561\u0560\x03\x02\x02\x02\u0562\u0565\x03" +
		"\x02\x02\x02\u0563\u0561\x03\x02\x02\x02\u0563\u0564\x03\x02\x02\x02\u0564" +
		"E\x03\x02\x02\x02\u0565\u0563\x03\x02\x02\x02\u0566\u0567\x07\x89\x02" +
		"\x02\u0567\u0568\x05\u019E\xD0\x02\u0568\u056C\x07\xCE\x02\x02\u0569\u056B" +
		"\x07\xE7\x02\x02\u056A\u0569\x03\x02\x02\x02\u056B\u056E\x03\x02\x02\x02" +
		"\u056C\u056A\x03\x02\x02\x02\u056C\u056D\x03\x02\x02\x02\u056D\u0578\x03" +
		"\x02\x02\x02\u056E\u056C\x03\x02\x02\x02\u056F\u0573\x05T+\x02\u0570\u0572" +
		"\x07\xE7\x02\x02\u0571\u0570\x03\x02\x02\x02\u0572\u0575\x03\x02\x02\x02" +
		"\u0573\u0571\x03\x02\x02\x02\u0573\u0574\x03\x02\x02\x02\u0574\u0577\x03" +
		"\x02\x02\x02\u0575\u0573\x03\x02\x02\x02\u0576\u056F\x03\x02\x02\x02\u0577" +
		"\u057A\x03\x02\x02\x02\u0578\u0576\x03\x02\x02\x02\u0578\u0579\x03\x02" +
		"\x02\x02\u0579\u057C\x03\x02\x02\x02\u057A\u0578\x03\x02\x02\x02\u057B" +
		"\u057D\x05J&\x02\u057C\u057B\x03\x02\x02\x02\u057D\u057E\x03\x02\x02\x02" +
		"\u057E\u057C\x03\x02\x02\x02\u057E\u057F\x03\x02\x02\x02\u057F\u0580\x03" +
		"\x02\x02\x02\u0580\u0582\x07\xD9\x02\x02\u0581\u0583\x05R*\x02\u0582\u0581" +
		"\x03\x02\x02\x02\u0582\u0583\x03\x02\x02\x02\u0583\u0587\x03\x02\x02\x02" +
		"\u0584\u0586\x07\xE7\x02\x02\u0585\u0584\x03\x02\x02\x02\u0586\u0589\x03" +
		"\x02\x02\x02\u0587\u0585\x03\x02\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588" +
		"G\x03\x02\x02\x02\u0589\u0587\x03\x02\x02\x02\u058A\u058B\x07\x8A\x02" +
		"\x02\u058B\u058C\x05\u019E\xD0\x02\u058C\u0590\x07\xCE\x02\x02\u058D\u058F" +
		"\x07\xE7\x02\x02\u058E\u058D\x03\x02\x02\x02\u058F\u0592\x03\x02\x02\x02" +
		"\u0590\u058E\x03\x02\x02\x02\u0590\u0591\x03\x02\x02\x02\u0591\u059C\x03" +
		"\x02\x02\x02\u0592\u0590\x03\x02\x02\x02\u0593\u0597\x05T+\x02\u0594\u0596" +
		"\x07\xE7\x02\x02\u0595\u0594\x03\x02\x02\x02\u0596\u0599\x03\x02\x02\x02" +
		"\u0597\u0595\x03\x02\x02\x02\u0597\u0598\x03\x02\x02\x02\u0598\u059B\x03" +
		"\x02\x02\x02\u0599\u0597\x03\x02\x02\x02\u059A\u0593\x03\x02\x02\x02\u059B" +
		"\u059E\x03\x02\x02\x02\u059C\u059A\x03\x02\x02\x02\u059C\u059D\x03\x02" +
		"\x02\x02\u059DI\x03\x02\x02\x02\u059E\u059C\x03\x02\x02\x02\u059F\u05A0" +
		"\x07\xD9\x02\x02\u05A0\u05A1\x05L\'\x02\u05A1K\x03\x02\x02\x02\u05A2\u05A4" +
		"\x07\xE7\x02\x02\u05A3\u05A2\x03\x02\x02\x02\u05A4\u05A7\x03\x02\x02\x02" +
		"\u05A5\u05A3\x03\x02\x02\x02\u05A5\u05A6\x03\x02\x02\x02\u05A6\u05A8\x03" +
		"\x02\x02\x02\u05A7\u05A5\x03\x02\x02\x02\u05A8\u05AC\x05N(\x02\u05A9\u05AB" +
		"\x07\xE7\x02\x02\u05AA\u05A9\x03\x02\x02\x02\u05AB\u05AE\x03\x02\x02\x02" +
		"\u05AC\u05AA\x03\x02\x02\x02\u05AC\u05AD\x03\x02\x02\x02\u05AD\u05B0\x03" +
		"\x02\x02\x02\u05AE\u05AC\x03\x02\x02\x02\u05AF\u05A5\x03\x02\x02\x02\u05B0" +
		"\u05B1\x03\x02\x02\x02\u05B1\u05AF\x03\x02\x02\x02\u05B1\u05B2\x03\x02" +
		"\x02\x02\u05B2M\x03\x02\x02\x02\u05B3\u05BB\x05\u01FA\xFE\x02\u05B4\u05BB" +
		"\x05\u01E8\xF5\x02\u05B5\u05BB\x05\u0208\u0105\x02\u05B6\u05BB\x05\u01FC" +
		"\xFF\x02\u05B7\u05BB\x05\\/\x02\u05B8\u05BB\x05Z.\x02\u05B9\u05BB\x05" +
		"P)\x02\u05BA\u05B3\x03\x02\x02\x02\u05BA\u05B4\x03\x02\x02\x02\u05BA\u05B5" +
		"\x03\x02\x02\x02\u05BA\u05B6\x03\x02\x02\x02\u05BA\u05B7\x03\x02\x02\x02" +
		"\u05BA\u05B8\x03\x02\x02\x02\u05BA\u05B9\x03\x02\x02\x02\u05BBO\x03\x02" +
		"\x02\x02\u05BC\u05BF\x07\u0153\x02\x02\u05BD\u05BF\x05\u0212\u010A\x02" +
		"\u05BE\u05BC\x03\x02\x02\x02\u05BE\u05BD\x03\x02\x02\x02\u05BFQ\x03\x02" +
		"\x02\x02\u05C0\u05C2\x07\xE7\x02\x02\u05C1\u05C0\x03\x02\x02\x02\u05C2" +
		"\u05C5\x03\x02\x02\x02\u05C3\u05C1\x03\x02\x02\x02\u05C3\u05C4\x03\x02" +
		"\x02\x02\u05C4\u05C6\x03\x02\x02\x02\u05C5\u05C3\x03\x02\x02\x02\u05C6" +
		"\u05C8\x05\u0212\u010A\x02\u05C7\u05C3\x03\x02\x02\x02\u05C8\u05C9\x03" +
		"\x02\x02\x02\u05C9\u05C7\x03\x02\x02\x02\u05C9\u05CA\x03\x02\x02\x02\u05CA" +
		"S\x03\x02\x02\x02\u05CB\u05EC\x07\u0152\x02\x02\u05CC\u05EC\x07\xE8\x02" +
		"\x02\u05CD\u05EC\x05\u0214\u010B\x02\u05CE\u05EC\x05V,\x02\u05CF\u05EC" +
		"\x05\u01F2\xFA\x02\u05D0\u05EC\x05\u01F6\xFC\x02\u05D1\u05EC\x05\u01F4" +
		"\xFB\x02\u05D2\u05EC\x05\u0208\u0105\x02\u05D3\u05EC\x05\u020C\u0107\x02" +
		"\u05D4\u05EC\x05d3\x02\u05D5\u05EC\x05\u01E8\xF5\x02\u05D6\u05EC\x05\u01FE" +
		"\u0100\x02\u05D7\u05EC\x05\u01FA\xFE\x02\u05D8\u05EC\x05\u01FC\xFF\x02" +
		"\u05D9\u05EC\x05\u0212\u010A\x02\u05DA\u05EC\x05\u01EE\xF8\x02\u05DB\u05EC" +
		"\x05\u0200\u0101\x02\u05DC\u05EC\x05\u0202\u0102\x02\u05DD\u05EC\x05\u0204" +
		"\u0103\x02\u05DE\u05EC\x05\u0206\u0104\x02\u05DF\u05EC\x05\u01D0\xE9\x02" +
		"\u05E0\u05EC\x05\u01DA\xEE\x02\u05E1\u05EC\x05\u01CC\xE7\x02\u05E2\u05EC" +
		"\x05\u01C0\xE1\x02\u05E3\u05EC\x05\u01C2\xE2\x02\u05E4\u05EC\x05\u01C6" +
		"\xE4\x02\u05E5\u05EC\x05\u01C4\xE3\x02\u05E6\u05EC\x05\u01C8\xE5\x02\u05E7" +
		"\u05EC\x05\u01EC\xF7\x02\u05E8\u05EC\x05\u020E\u0108\x02\u05E9\u05EC\x05" +
		"\u01F0\xF9\x02\u05EA\u05EC\x05\u021C\u010F\x02\u05EB\u05CB\x03\x02\x02" +
		"\x02\u05EB\u05CC\x03\x02\x02\x02\u05EB\u05CD\x03\x02\x02\x02\u05EB\u05CE" +
		"\x03\x02\x02\x02\u05EB\u05CF\x03\x02\x02\x02\u05EB\u05D0\x03\x02\x02\x02" +
		"\u05EB\u05D1\x03\x02\x02\x02\u05EB\u05D2\x03\x02\x02\x02\u05EB\u05D3\x03" +
		"\x02\x02\x02\u05EB\u05D4\x03\x02\x02\x02\u05EB\u05D5\x03\x02\x02\x02\u05EB" +
		"\u05D6\x03\x02\x02\x02\u05EB\u05D7\x03\x02\x02\x02\u05EB\u05D8\x03\x02" +
		"\x02\x02\u05EB\u05D9\x03\x02\x02\x02\u05EB\u05DA\x03\x02\x02\x02\u05EB" +
		"\u05DB\x03\x02\x02\x02\u05EB\u05DC\x03\x02\x02\x02\u05EB\u05DD\x03\x02" +
		"\x02\x02\u05EB\u05DE\x03\x02\x02\x02\u05EB\u05DF\x03\x02\x02\x02\u05EB" +
		"\u05E0\x03\x02\x02\x02\u05EB\u05E1\x03\x02\x02\x02\u05EB\u05E2\x03\x02" +
		"\x02\x02\u05EB\u05E3\x03\x02\x02\x02\u05EB\u05E4\x03\x02\x02\x02\u05EB" +
		"\u05E5\x03\x02\x02\x02\u05EB\u05E6\x03\x02\x02\x02\u05EB\u05E7\x03\x02" +
		"\x02\x02\u05EB\u05E8\x03\x02\x02\x02\u05EB\u05E9\x03\x02\x02\x02\u05EB" +
		"\u05EA\x03\x02\x02\x02\u05ECU\x03\x02\x02\x02\u05ED\u05F5\x05X-\x02\u05EE" +
		"\u05F4\x05X-\x02\u05EF\u05F4\x05\u01FA\xFE\x02\u05F0\u05F4\x05\u01FC\xFF" +
		"\x02\u05F1\u05F4\x05\u01E8\xF5\x02\u05F2\u05F4\x05\u01EE\xF8\x02\u05F3" +
		"\u05EE\x03\x02\x02\x02\u05F3\u05EF\x03\x02\x02\x02\u05F3\u05F0\x03\x02" +
		"\x02\x02\u05F3\u05F1\x03\x02\x02\x02\u05F3\u05F2\x03\x02\x02\x02\u05F4" +
		"\u05F7\x03\x02\x02\x02\u05F5\u05F3\x03\x02\x02\x02\u05F5\u05F6\x03\x02" +
		"\x02\x02\u05F6W\x03\x02\x02\x02\u05F7\u05F5\x03\x02\x02\x02\u05F8\u05FC" +
		"\x07\xC4\x02\x02\u05F9\u05FD\x07\xE5\x02\x02\u05FA\u05FD\x07\xE6\x02\x02" +
		"\u05FB\u05FD\x03\x02\x02\x02\u05FC\u05F9\x03\x02\x02\x02\u05FC\u05FA\x03" +
		"\x02\x02\x02\u05FC\u05FB\x03\x02\x02\x02\u05FD\u0601\x03\x02\x02\x02\u05FE" +
		"\u0600\x05\u0212\u010A\x02\u05FF\u05FE\x03\x02\x02\x02\u0600\u0603\x03" +
		"\x02\x02\x02\u0601\u05FF\x03\x02\x02\x02\u0601\u0602\x03\x02\x02\x02\u0602" +
		"\u0604\x03\x02\x02\x02\u0603\u0601\x03\x02\x02\x02\u0604\u0605\x05\u0216" +
		"\u010C\x02\u0605Y\x03\x02\x02\x02\u0606\u0608\x05\u01E8\xF5\x02\u0607" +
		"\u0606\x03\x02\x02\x02\u0607\u0608\x03\x02\x02\x02\u0608\u0609\x03\x02" +
		"\x02\x02\u0609\u060B\x07\xC8\x02\x02\u060A\u060C\x05\u0212\u010A\x02\u060B" +
		"\u060A\x03\x02\x02\x02\u060C\u060D\x03\x02\x02\x02\u060D\u060B\x03\x02" +
		"\x02\x02\u060D\u060E\x03\x02\x02\x02\u060E\u060F\x03\x02\x02\x02\u060F" +
		"\u0610\x07\xCE\x02\x02\u0610[\x03\x02\x02\x02\u0611\u0613\x05\u01E8\xF5" +
		"\x02\u0612\u0611\x03\x02\x02\x02\u0612\u0613\x03\x02\x02\x02\u0613\u0614" +
		"\x03\x02\x02\x02\u0614\u0616\x07\xC9\x02\x02\u0615\u0617\x05\u0212\u010A" +
		"\x02\u0616\u0615\x03\x02\x02\x02\u0617\u0618\x03\x02\x02\x02\u0618\u0616" +
		"\x03\x02\x02\x02\u0618\u0619\x03\x02\x02\x02\u0619\u061A\x03\x02\x02\x02" +
		"\u061A\u061B\x07\xCE\x02\x02\u061B]\x03\x02\x02\x02\u061C\u061E\x05\u01E8" +
		"\xF5\x02\u061D\u061C\x03\x02\x02\x02\u061D\u061E\x03\x02\x02\x02\u061E" +
		"\u061F\x03\x02\x02\x02\u061F\u0621\x07\xCB\x02\x02\u0620\u0622\x05\u0212" +
		"\u010A\x02\u0621\u0620\x03\x02\x02\x02\u0622\u0623\x03\x02\x02\x02\u0623" +
		"\u0621\x03\x02\x02\x02\u0623\u0624\x03\x02\x02\x02\u0624\u0625\x03\x02" +
		"\x02\x02\u0625\u0626\x07\xCE\x02\x02\u0626_\x03\x02\x02\x02\u0627\u0628" +
		"\x07\x17\x02\x02\u0628\u0629\x05\u019E\xD0\x02\u0629\u062A\x07\xCE\x02" +
		"\x02\u062A\u0634\x07\xE7\x02\x02\u062B\u062F\x05T+\x02\u062C\u062E\x07" +
		"\xE7\x02\x02\u062D\u062C\x03\x02\x02\x02\u062E\u0631\x03\x02\x02\x02\u062F" +
		"\u062D\x03\x02\x02\x02\u062F\u0630\x03\x02\x02\x02\u0630\u0633\x03\x02" +
		"\x02\x02\u0631\u062F\x03\x02\x02\x02\u0632\u062B\x03\x02\x02\x02\u0633" +
		"\u0636\x03\x02\x02\x02\u0634\u0632\x03\x02\x02\x02\u0634\u0635\x03\x02" +
		"\x02\x02\u0635\u0640\x03\x02\x02\x02\u0636\u0634\x03\x02\x02\x02\u0637" +
		"\u0639\x07\xE7\x02\x02\u0638\u0637\x03\x02\x02\x02\u0639\u063C\x03\x02" +
		"\x02\x02\u063A\u0638\x03\x02\x02\x02\u063A\u063B\x03\x02\x02\x02\u063B" +
		"\u063D\x03\x02\x02\x02\u063C\u063A\x03\x02\x02\x02\u063D\u063F\x05b2\x02" +
		"\u063E\u063A\x03\x02\x02\x02\u063F\u0642\x03\x02\x02\x02\u0640\u063E\x03" +
		"\x02\x02\x02\u0640\u0641\x03\x02\x02\x02\u0641\u0646\x03\x02\x02\x02\u0642" +
		"\u0640\x03\x02\x02\x02\u0643\u0645\x07\xE7\x02\x02\u0644\u0643\x03\x02" +
		"\x02\x02\u0645\u0648\x03\x02\x02\x02\u0646\u0644\x03\x02\x02\x02\u0646" +
		"\u0647\x03\x02\x02\x02\u0647\u0656\x03\x02\x02\x02\u0648\u0646\x03\x02" +
		"\x02\x02\u0649\u0653\x05f4\x02\u064A\u064C\x07\xE7\x02\x02\u064B\u064A" +
		"\x03\x02\x02\x02\u064C\u064F\x03\x02\x02\x02\u064D\u064B\x03\x02\x02\x02" +
		"\u064D\u064E\x03\x02\x02\x02\u064E\u0650\x03\x02\x02\x02\u064F\u064D\x03" +
		"\x02\x02\x02\u0650\u0652\x05f4\x02\u0651\u064D\x03\x02\x02\x02\u0652\u0655" +
		"\x03\x02\x02\x02\u0653\u0651\x03\x02\x02\x02\u0653\u0654\x03\x02\x02\x02" +
		"\u0654\u0657\x03\x02\x02\x02\u0655\u0653\x03\x02\x02\x02\u0656\u0649\x03" +
		"\x02\x02\x02\u0656\u0657\x03\x02\x02\x02\u0657a\x03\x02\x02\x02\u0658" +
		"\u0660\x07\xF5\x02\x02\u0659\u065B\x07\xE7\x02\x02\u065A\u0659\x03\x02" +
		"\x02\x02\u065A\u065B\x03\x02\x02\x02\u065B\u065C\x03\x02\x02\x02\u065C" +
		"\u065E\x05\u0210\u0109\x02\u065D\u065F\x07\xE7\x02\x02\u065E\u065D\x03" +
		"\x02\x02\x02\u065E\u065F\x03\x02\x02\x02\u065F\u0661\x03\x02\x02\x02\u0660" +
		"\u065A\x03\x02\x02\x02\u0660\u0661\x03\x02\x02\x02\u0661\u0662\x03\x02" +
		"\x02\x02\u0662\u0663\x07\xCE\x02\x02\u0663c\x03\x02\x02\x02\u0664\u0665" +
		"\t\x05\x02\x02\u0665e\x03\x02\x02\x02\u0666\u0667\x05T+\x02\u0667g\x03" +
		"\x02\x02\x02\u0668\u0669\x07\x19\x02\x02\u0669\u066A\x05\u019E\xD0\x02" +
		"\u066A\u066B\x07\xCE\x02\x02\u066B\u0675\x07\xE7\x02\x02\u066C\u0670\x05" +
		"T+\x02\u066D\u066F\x07\xE7\x02\x02\u066E\u066D\x03\x02\x02\x02\u066F\u0672" +
		"\x03\x02\x02\x02\u0670\u066E\x03\x02\x02\x02\u0670\u0671\x03\x02\x02\x02" +
		"\u0671\u0674\x03\x02\x02\x02\u0672\u0670\x03\x02\x02\x02\u0673\u066C\x03" +
		"\x02\x02\x02\u0674\u0677\x03\x02\x02\x02\u0675\u0673\x03\x02\x02\x02\u0675" +
		"\u0676\x03\x02\x02\x02\u0676\u067B\x03\x02\x02\x02\u0677\u0675\x03\x02" +
		"\x02\x02\u0678\u067A\x05j6\x02\u0679\u0678\x03\x02\x02\x02\u067A\u067D" +
		"\x03\x02\x02\x02\u067B\u0679\x03\x02\x02\x02\u067B\u067C\x03\x02\x02\x02" +
		"\u067C\u0681\x03\x02\x02\x02\u067D\u067B\x03\x02\x02\x02\u067E\u0680\x07" +
		"\xE7\x02\x02\u067F\u067E\x03\x02\x02\x02\u0680\u0683\x03\x02\x02\x02\u0681" +
		"\u067F\x03\x02\x02\x02\u0681\u0682\x03\x02\x02\x02\u0682\u0691\x03\x02" +
		"\x02\x02\u0683\u0681\x03\x02\x02\x02\u0684\u068E\x05f4\x02\u0685\u0687" +
		"\x07\xE7\x02\x02\u0686\u0685\x03\x02\x02\x02\u0687\u068A\x03\x02\x02\x02" +
		"\u0688\u0686\x03\x02\x02\x02\u0688\u0689\x03\x02\x02\x02\u0689\u068B\x03" +
		"\x02\x02\x02\u068A\u0688\x03\x02\x02\x02\u068B\u068D\x05f4\x02\u068C\u0688" +
		"\x03\x02\x02\x02\u068D\u0690\x03\x02\x02\x02\u068E\u068C\x03\x02\x02\x02" +
		"\u068E\u068F\x03\x02\x02\x02\u068F\u0692\x03\x02\x02\x02\u0690\u068E\x03" +
		"\x02\x02\x02\u0691\u0684\x03\x02\x02\x02\u0691\u0692\x03\x02\x02\x02\u0692" +
		"i\x03\x02\x02\x02\u0693\u0697\x07\xC9\x02\x02\u0694\u0696\v\x02\x02\x02" +
		"\u0695\u0694\x03\x02\x02\x02\u0696\u0699\x03\x02\x02\x02\u0697\u0698\x03" +
		"\x02\x02\x02\u0697\u0695\x03\x02\x02\x02\u0698\u069A\x03\x02\x02\x02\u0699" +
		"\u0697\x03\x02\x02\x02\u069A\u069B\x07\xCE\x02\x02\u069B\u06A6\x07\xE7" +
		"\x02\x02\u069C\u06A0\x07\xC8\x02\x02\u069D\u069F\v\x02\x02\x02\u069E\u069D" +
		"\x03\x02\x02\x02\u069F\u06A2\x03\x02\x02\x02\u06A0\u06A1\x03\x02\x02\x02" +
		"\u06A0\u069E\x03\x02\x02\x02\u06A1\u06A3\x03\x02\x02\x02\u06A2\u06A0\x03" +
		"\x02\x02\x02\u06A3\u06A4\x07\xCE\x02\x02\u06A4\u06A6\x07\xE7\x02\x02\u06A5" +
		"\u0693\x03\x02\x02\x02\u06A5\u069C\x03\x02\x02\x02\u06A6k\x03\x02\x02" +
		"\x02\u06A7\u06A8\x07\x1A\x02\x02\u06A8\u06A9\x05\u019E\xD0\x02\u06A9\u06AA" +
		"\x07\xCE\x02\x02\u06AA\u06B7\x07\xE7\x02\x02\u06AB\u06AE\x05T+\x02\u06AC" +
		"\u06AE\x05n8\x02\u06AD\u06AB\x03\x02\x02\x02\u06AD\u06AC\x03\x02\x02\x02" +
		"\u06AE\u06B2\x03\x02\x02\x02\u06AF\u06B1\x07\xE7\x02\x02\u06B0\u06AF\x03" +
		"\x02\x02\x02\u06B1\u06B4\x03\x02\x02\x02\u06B2\u06B0\x03\x02\x02\x02\u06B2" +
		"\u06B3\x03\x02\x02\x02\u06B3\u06B6\x03\x02\x02\x02\u06B4\u06B2\x03\x02" +
		"\x02\x02\u06B5\u06AD\x03\x02\x02\x02\u06B6\u06B9\x03\x02\x02\x02\u06B7" +
		"\u06B5\x03\x02\x02\x02\u06B7\u06B8\x03\x02\x02\x02\u06B8\u06BD\x03\x02" +
		"\x02\x02\u06B9\u06B7\x03\x02\x02\x02\u06BA\u06BC\x07\xE7\x02\x02\u06BB" +
		"\u06BA\x03\x02\x02\x02\u06BC\u06BF\x03\x02\x02\x02\u06BD\u06BB\x03\x02" +
		"\x02\x02\u06BD\u06BE\x03\x02\x02\x02\u06BE\u06CD\x03\x02\x02\x02\u06BF" +
		"\u06BD\x03\x02\x02\x02\u06C0\u06CA\x05f4\x02\u06C1\u06C3\x07\xE7\x02\x02" +
		"\u06C2\u06C1\x03\x02\x02";
	private static readonly _serializedATNSegment5: string =
		"\x02\u06C3\u06C6\x03\x02\x02\x02\u06C4\u06C2\x03\x02\x02\x02\u06C4\u06C5" +
		"\x03\x02\x02\x02\u06C5\u06C7\x03\x02\x02\x02\u06C6\u06C4\x03\x02\x02\x02" +
		"\u06C7\u06C9\x05f4\x02\u06C8\u06C4\x03\x02\x02\x02\u06C9\u06CC\x03\x02" +
		"\x02\x02\u06CA\u06C8\x03\x02\x02\x02\u06CA\u06CB\x03\x02\x02\x02\u06CB" +
		"\u06CE\x03\x02\x02\x02\u06CC\u06CA\x03\x02\x02\x02\u06CD\u06C0\x03\x02" +
		"\x02\x02\u06CD\u06CE\x03\x02\x02\x02\u06CEm\x03\x02\x02\x02\u06CF\u06D0" +
		"\x07\xCA\x02\x02\u06D0\u06D1\x05\u0212\u010A\x02\u06D1\u06D3\x07\xCE\x02" +
		"\x02\u06D2\u06D4\x05p9\x02\u06D3\u06D2\x03\x02\x02\x02\u06D3\u06D4\x03" +
		"\x02\x02\x02\u06D4\u06DA\x03\x02\x02\x02\u06D5\u06D9\x05\u01FC\xFF\x02" +
		"\u06D6\u06D9\x05\u01E8\xF5\x02\u06D7\u06D9\x05\u01FA\xFE\x02\u06D8\u06D5" +
		"\x03\x02\x02\x02\u06D8\u06D6\x03\x02\x02\x02\u06D8\u06D7\x03\x02\x02\x02" +
		"\u06D9\u06DC\x03\x02\x02\x02\u06DA\u06D8\x03\x02\x02\x02\u06DA\u06DB\x03" +
		"\x02\x02\x02\u06DBo\x03\x02\x02\x02\u06DC\u06DA\x03\x02\x02\x02\u06DD" +
		"\u06E1\x07\u0100\x02\x02\u06DE\u06E0\x07\x04\x02\x02\u06DF\u06DE\x03\x02" +
		"\x02\x02\u06E0\u06E3\x03\x02\x02\x02\u06E1\u06DF\x03\x02\x02\x02\u06E1" +
		"\u06E2\x03\x02\x02\x02\u06E2\u06E4\x03\x02\x02\x02\u06E3\u06E1\x03\x02" +
		"\x02\x02\u06E4\u06E8\x07\xE6\x02\x02\u06E5\u06E7\x07\x04\x02\x02\u06E6" +
		"\u06E5\x03\x02\x02\x02\u06E7\u06EA\x03\x02\x02\x02\u06E8\u06E6\x03\x02" +
		"\x02\x02\u06E8\u06E9\x03\x02\x02\x02\u06E9\u06EB\x03\x02\x02\x02\u06EA" +
		"\u06E8\x03\x02\x02\x02\u06EB\u06EC\x07\xCE\x02\x02\u06ECq\x03\x02\x02" +
		"\x02\u06ED\u06EE\x07\x12\x02\x02\u06EE\u06EF\x05\u019E\xD0\x02\u06EF\u06F0" +
		"\x07\xCE\x02\x02\u06F0\u06FA\x07\xE7\x02\x02\u06F1\u06F5\x05T+\x02\u06F2" +
		"\u06F4\x07\xE7\x02\x02\u06F3\u06F2\x03\x02\x02\x02\u06F4\u06F7\x03\x02" +
		"\x02\x02\u06F5\u06F3\x03\x02\x02\x02\u06F5\u06F6\x03\x02\x02\x02\u06F6" +
		"\u06F9\x03\x02\x02\x02\u06F7\u06F5\x03\x02\x02\x02\u06F8\u06F1\x03\x02" +
		"\x02\x02\u06F9\u06FC\x03\x02\x02\x02\u06FA\u06F8\x03\x02\x02\x02\u06FA" +
		"\u06FB\x03\x02\x02\x02\u06FB\u0700\x03\x02\x02\x02\u06FC\u06FA\x03\x02" +
		"\x02\x02\u06FD\u06FF\x07\xE7\x02\x02\u06FE\u06FD\x03\x02\x02\x02\u06FF" +
		"\u0702\x03\x02\x02\x02\u0700\u06FE\x03\x02\x02\x02\u0700\u0701\x03\x02" +
		"\x02\x02\u0701\u0710\x03\x02\x02\x02\u0702\u0700\x03\x02\x02\x02\u0703" +
		"\u070D\x05f4\x02\u0704\u0706\x07\xE7\x02\x02\u0705\u0704\x03\x02\x02\x02" +
		"\u0706\u0709\x03\x02\x02\x02\u0707\u0705\x03\x02\x02\x02\u0707\u0708\x03" +
		"\x02\x02\x02\u0708\u070A\x03\x02\x02\x02\u0709\u0707\x03\x02\x02\x02\u070A" +
		"\u070C\x05f4\x02\u070B\u0707\x03\x02\x02\x02\u070C\u070F\x03\x02\x02\x02" +
		"\u070D\u070B\x03\x02\x02\x02\u070D\u070E\x03\x02\x02\x02\u070E\u0711\x03" +
		"\x02\x02\x02\u070F\u070D\x03\x02\x02\x02\u0710\u0703\x03\x02\x02\x02\u0710" +
		"\u0711\x03\x02\x02\x02\u0711s\x03\x02\x02\x02\u0712\u0713\x07\x1B\x02" +
		"\x02\u0713\u0714\x05\u019E\xD0\x02\u0714\u0715\x07\xCE\x02\x02\u0715\u071F" +
		"\x07\xE7\x02\x02\u0716\u071A\x05T+\x02\u0717\u0719\x07\xE7\x02\x02\u0718" +
		"\u0717\x03\x02\x02\x02\u0719\u071C\x03\x02\x02\x02\u071A\u0718\x03\x02" +
		"\x02\x02\u071A\u071B\x03\x02\x02\x02\u071B\u071E\x03\x02\x02\x02\u071C" +
		"\u071A\x03\x02\x02\x02\u071D\u0716\x03\x02\x02\x02\u071E\u0721\x03\x02" +
		"\x02\x02\u071F\u071D\x03\x02\x02\x02\u071F\u0720\x03\x02\x02\x02\u0720" +
		"\u0725\x03\x02\x02\x02\u0721\u071F\x03\x02\x02\x02\u0722\u0724\x07\xE7" +
		"\x02\x02\u0723\u0722\x03\x02\x02\x02\u0724\u0727\x03\x02\x02\x02\u0725" +
		"\u0723\x03\x02\x02\x02\u0725\u0726\x03\x02\x02\x02\u0726\u0735\x03\x02" +
		"\x02\x02\u0727\u0725\x03\x02\x02\x02\u0728\u0732\x05f4\x02\u0729\u072B" +
		"\x07\xE7\x02\x02\u072A\u0729\x03\x02\x02\x02\u072B\u072E\x03\x02\x02\x02" +
		"\u072C\u072A\x03\x02\x02\x02\u072C\u072D\x03\x02\x02\x02\u072D\u072F\x03" +
		"\x02\x02\x02\u072E\u072C\x03\x02\x02\x02\u072F\u0731\x05f4\x02\u0730\u072C" +
		"\x03\x02\x02\x02\u0731\u0734\x03\x02\x02\x02\u0732\u0730\x03\x02\x02\x02" +
		"\u0732\u0733\x03\x02\x02\x02\u0733\u0736\x03\x02\x02\x02\u0734\u0732\x03" +
		"\x02\x02\x02\u0735\u0728\x03\x02\x02\x02\u0735\u0736\x03\x02\x02\x02\u0736" +
		"u\x03\x02\x02\x02\u0737\u0738\x07\x1C\x02\x02\u0738\u0739\x05\u019E\xD0" +
		"\x02\u0739\u073A\x07\xCE\x02\x02\u073A\u0744\x07\xE7\x02\x02\u073B\u073F" +
		"\x05T+\x02\u073C\u073E\x07\xE7\x02\x02\u073D\u073C\x03\x02\x02\x02\u073E" +
		"\u0741\x03\x02\x02\x02\u073F\u073D\x03\x02\x02\x02\u073F\u0740\x03\x02" +
		"\x02\x02\u0740\u0743\x03\x02\x02\x02\u0741\u073F\x03\x02\x02\x02\u0742" +
		"\u073B\x03\x02\x02\x02\u0743\u0746\x03\x02\x02\x02\u0744\u0742\x03\x02" +
		"\x02\x02\u0744\u0745\x03\x02\x02\x02\u0745\u074A\x03\x02\x02\x02\u0746" +
		"\u0744\x03\x02\x02\x02\u0747\u0749\x07\xE7\x02\x02\u0748\u0747\x03\x02" +
		"\x02\x02\u0749\u074C\x03\x02\x02\x02\u074A\u0748\x03\x02\x02\x02\u074A" +
		"\u074B\x03\x02\x02\x02\u074B\u075A\x03\x02\x02\x02\u074C\u074A\x03\x02" +
		"\x02\x02\u074D\u0757\x05f4\x02\u074E\u0750\x07\xE7\x02\x02\u074F\u074E" +
		"\x03\x02\x02\x02\u0750\u0753\x03\x02\x02\x02\u0751\u074F\x03\x02\x02\x02" +
		"\u0751\u0752\x03\x02\x02\x02\u0752\u0754\x03\x02\x02\x02\u0753\u0751\x03" +
		"\x02\x02\x02\u0754\u0756\x05f4\x02\u0755\u0751\x03\x02\x02\x02\u0756\u0759" +
		"\x03\x02\x02\x02\u0757\u0755\x03\x02\x02\x02\u0757\u0758\x03\x02\x02\x02" +
		"\u0758\u075B\x03\x02\x02\x02\u0759\u0757\x03\x02\x02\x02\u075A\u074D\x03" +
		"\x02\x02\x02\u075A\u075B\x03\x02\x02\x02\u075Bw\x03\x02\x02\x02\u075C" +
		"\u075D\x07\x1D\x02\x02\u075D\u075E\x05\u019E\xD0\x02\u075E\u0762\x07\xCE" +
		"\x02\x02\u075F\u0761\x07\xE7\x02\x02\u0760\u075F\x03\x02\x02\x02\u0761" +
		"\u0764\x03\x02\x02\x02\u0762\u0760\x03\x02\x02\x02\u0762\u0763\x03\x02" +
		"\x02\x02\u0763\u076E\x03\x02\x02\x02\u0764\u0762\x03\x02\x02\x02\u0765" +
		"\u0769\x05T+\x02\u0766\u0768\x07\xE7\x02\x02\u0767\u0766\x03\x02\x02\x02" +
		"\u0768\u076B\x03\x02\x02\x02\u0769\u0767\x03\x02\x02\x02\u0769\u076A\x03" +
		"\x02\x02\x02\u076A\u076D\x03\x02\x02\x02\u076B\u0769\x03\x02\x02\x02\u076C" +
		"\u0765\x03\x02\x02\x02\u076D\u0770\x03\x02\x02\x02\u076E\u076C\x03\x02" +
		"\x02\x02\u076E\u076F\x03\x02\x02\x02\u076F\u0772\x03\x02\x02\x02\u0770" +
		"\u076E\x03\x02\x02\x02\u0771\u0773\x05\u0210\u0109\x02\u0772\u0771\x03" +
		"\x02\x02\x02\u0772\u0773\x03\x02\x02\x02\u0773\u0777\x03\x02\x02\x02\u0774" +
		"\u0776\x07\xE7\x02\x02\u0775\u0774\x03\x02\x02\x02\u0776\u0779\x03\x02" +
		"\x02\x02\u0777\u0775\x03\x02\x02\x02\u0777\u0778\x03\x02\x02\x02\u0778" +
		"\u0787\x03\x02\x02\x02\u0779\u0777\x03\x02\x02\x02\u077A\u0784\x05f4\x02" +
		"\u077B\u077D\x07\xE7\x02\x02\u077C\u077B\x03\x02\x02\x02\u077D\u0780\x03" +
		"\x02\x02\x02\u077E\u077C\x03\x02\x02\x02\u077E\u077F\x03\x02\x02\x02\u077F" +
		"\u0781\x03\x02\x02\x02\u0780\u077E\x03\x02\x02\x02\u0781\u0783\x05f4\x02" +
		"\u0782\u077E\x03\x02\x02\x02\u0783\u0786\x03\x02\x02\x02\u0784\u0782\x03" +
		"\x02\x02\x02\u0784\u0785\x03\x02\x02\x02\u0785\u0788\x03\x02\x02\x02\u0786" +
		"\u0784\x03\x02\x02\x02\u0787\u077A\x03\x02\x02\x02\u0787\u0788\x03\x02" +
		"\x02\x02\u0788y\x03\x02\x02\x02\u0789\u078A\x07\x1E\x02\x02\u078A\u078B" +
		"\x05\u019E\xD0\x02\u078B\u078D\x07\xCE\x02\x02\u078C\u078E\x07\xE7\x02" +
		"\x02\u078D\u078C\x03\x02\x02\x02\u078E\u078F\x03\x02\x02\x02\u078F\u078D" +
		"\x03\x02\x02\x02\u078F\u0790\x03\x02\x02\x02\u0790\u079A\x03\x02\x02\x02" +
		"\u0791\u0795\x05T+\x02\u0792\u0794\x07\xE7\x02\x02\u0793\u0792\x03\x02" +
		"\x02\x02\u0794\u0797\x03\x02\x02\x02\u0795\u0793\x03\x02\x02\x02\u0795" +
		"\u0796\x03\x02\x02\x02\u0796\u0799\x03\x02\x02\x02\u0797\u0795\x03\x02" +
		"\x02\x02\u0798\u0791\x03\x02\x02\x02\u0799\u079C\x03\x02\x02\x02\u079A" +
		"\u0798\x03\x02\x02\x02\u079A\u079B\x03\x02\x02\x02\u079B\u079E\x03\x02" +
		"\x02\x02\u079C\u079A\x03\x02\x02\x02\u079D\u079F\x05\u0210\u0109\x02\u079E" +
		"\u079D\x03\x02\x02\x02\u079E\u079F\x03\x02\x02\x02\u079F\u07A3\x03\x02" +
		"\x02\x02\u07A0\u07A2\x07\xE7\x02\x02\u07A1\u07A0\x03\x02\x02\x02\u07A2" +
		"\u07A5\x03\x02\x02\x02\u07A3\u07A1\x03\x02\x02\x02\u07A3\u07A4\x03\x02" +
		"\x02\x02\u07A4\u07B3\x03\x02\x02\x02\u07A5\u07A3\x03\x02\x02\x02\u07A6" +
		"\u07B0\x05f4\x02\u07A7\u07A9\x07\xE7\x02\x02\u07A8\u07A7\x03\x02\x02\x02" +
		"\u07A9\u07AC\x03\x02\x02\x02\u07AA\u07A8\x03\x02\x02\x02\u07AA\u07AB\x03" +
		"\x02\x02\x02\u07AB\u07AD\x03\x02\x02\x02\u07AC\u07AA\x03\x02\x02\x02\u07AD" +
		"\u07AF\x05f4\x02\u07AE\u07AA\x03\x02\x02\x02\u07AF\u07B2\x03\x02\x02\x02" +
		"\u07B0\u07AE\x03\x02\x02\x02\u07B0\u07B1\x03\x02\x02\x02\u07B1\u07B4\x03" +
		"\x02\x02\x02\u07B2\u07B0\x03\x02\x02\x02\u07B3\u07A6\x03\x02\x02\x02\u07B3" +
		"\u07B4\x03\x02\x02\x02\u07B4{\x03\x02\x02\x02\u07B5\u07B6\x07\x15\x02" +
		"\x02\u07B6\u07B7\x05\u019E\xD0\x02\u07B7\u07BB\x07\xCE\x02\x02\u07B8\u07BA" +
		"\x07\xE7\x02\x02\u07B9\u07B8\x03\x02\x02\x02\u07BA\u07BD\x03\x02\x02\x02" +
		"\u07BB\u07B9\x03\x02\x02\x02\u07BB\u07BC\x03\x02\x02\x02\u07BC\u07C7\x03" +
		"\x02\x02\x02\u07BD\u07BB\x03\x02\x02\x02\u07BE\u07C2\x05T+\x02\u07BF\u07C1" +
		"\x07\xE7\x02\x02\u07C0\u07BF\x03\x02\x02\x02\u07C1\u07C4\x03\x02\x02\x02" +
		"\u07C2\u07C0\x03\x02\x02\x02\u07C2\u07C3\x03\x02\x02\x02\u07C3\u07C6\x03" +
		"\x02\x02\x02\u07C4\u07C2\x03\x02\x02\x02\u07C5\u07BE\x03\x02\x02\x02\u07C6" +
		"\u07C9\x03\x02\x02\x02\u07C7\u07C5\x03\x02\x02\x02\u07C7\u07C8\x03\x02" +
		"\x02\x02\u07C8}\x03\x02\x02\x02\u07C9\u07C7\x03\x02\x02\x02\u07CA\u07CB" +
		"\x07\x0F\x02\x02\u07CB\u07CC\x05\u019E\xD0\x02\u07CC\u07D0\x07\xCE\x02" +
		"\x02\u07CD\u07CF\x07\xE7\x02\x02\u07CE\u07CD\x03\x02\x02\x02\u07CF\u07D2" +
		"\x03\x02\x02\x02\u07D0\u07CE\x03\x02\x02\x02\u07D0\u07D1\x03\x02\x02\x02" +
		"\u07D1\u07DC\x03\x02\x02\x02\u07D2\u07D0\x03\x02\x02\x02\u07D3\u07D7\x05" +
		"T+\x02\u07D4\u07D6\x07\xE7\x02\x02\u07D5\u07D4\x03\x02\x02\x02\u07D6\u07D9" +
		"\x03\x02\x02\x02\u07D7\u07D5\x03\x02\x02\x02\u07D7\u07D8\x03\x02\x02\x02" +
		"\u07D8\u07DB\x03\x02\x02\x02\u07D9\u07D7\x03\x02\x02\x02\u07DA\u07D3\x03" +
		"\x02\x02\x02\u07DB\u07DE\x03\x02\x02\x02\u07DC\u07DA\x03\x02\x02\x02\u07DC" +
		"\u07DD\x03\x02\x02\x02\u07DD\x7F\x03\x02\x02\x02\u07DE\u07DC\x03\x02\x02" +
		"\x02\u07DF\u07E0\x07\x10\x02\x02\u07E0\u07E1\x05\u019E\xD0\x02\u07E1\u07E5" +
		"\x07\xCE\x02\x02\u07E2\u07E4\x07\xE7\x02\x02\u07E3\u07E2\x03\x02\x02\x02" +
		"\u07E4\u07E7\x03\x02\x02\x02\u07E5\u07E3\x03\x02\x02\x02\u07E5\u07E6\x03" +
		"\x02\x02\x02\u07E6\u07F1\x03\x02\x02\x02\u07E7\u07E5\x03\x02\x02\x02\u07E8" +
		"\u07EC\x05T+\x02\u07E9\u07EB\x07\xE7\x02\x02\u07EA\u07E9\x03\x02\x02\x02" +
		"\u07EB\u07EE\x03\x02\x02\x02\u07EC\u07EA\x03\x02\x02\x02\u07EC\u07ED\x03" +
		"\x02\x02\x02\u07ED\u07F0\x03\x02\x02\x02\u07EE\u07EC\x03\x02\x02\x02\u07EF" +
		"\u07E8\x03\x02\x02\x02\u07F0\u07F3\x03\x02\x02\x02\u07F1\u07EF\x03\x02" +
		"\x02\x02\u07F1\u07F2\x03\x02\x02\x02\u07F2\x81\x03\x02\x02\x02\u07F3\u07F1" +
		"\x03\x02\x02\x02\u07F4\u07F5\x07\x11\x02\x02\u07F5\u07F6\x05\u019E\xD0" +
		"\x02\u07F6\u07FA\x07\xCE\x02\x02\u07F7\u07F9\x07\xE7\x02\x02\u07F8\u07F7" +
		"\x03\x02\x02\x02\u07F9\u07FC\x03\x02\x02\x02\u07FA\u07F8\x03\x02\x02\x02" +
		"\u07FA\u07FB\x03\x02\x02\x02\u07FB\u0806\x03\x02\x02\x02\u07FC\u07FA\x03" +
		"\x02\x02\x02\u07FD\u0801\x05T+\x02\u07FE\u0800\x07\xE7\x02\x02\u07FF\u07FE" +
		"\x03\x02\x02\x02\u0800\u0803\x03\x02\x02\x02\u0801\u07FF\x03\x02\x02\x02" +
		"\u0801\u0802\x03\x02\x02\x02\u0802\u0805\x03\x02\x02\x02\u0803\u0801\x03" +
		"\x02\x02\x02\u0804\u07FD\x03\x02\x02\x02\u0805\u0808\x03\x02\x02\x02\u0806" +
		"\u0804\x03\x02\x02\x02\u0806\u0807\x03\x02\x02\x02\u0807\x83\x03\x02\x02" +
		"\x02\u0808\u0806\x03\x02\x02\x02\u0809\u080A\x073\x02\x02\u080A\u080B" +
		"\x05\u019E\xD0\x02\u080B\u080F\x07\xCE\x02\x02\u080C\u080E\x07\xE7\x02" +
		"\x02\u080D\u080C\x03\x02\x02\x02\u080E\u0811\x03\x02\x02\x02\u080F\u080D" +
		"\x03\x02\x02\x02\u080F\u0810\x03\x02\x02\x02\u0810\u081B\x03\x02\x02\x02" +
		"\u0811\u080F\x03\x02\x02\x02\u0812\u0816\x05T+\x02\u0813\u0815\x07\xE7" +
		"\x02\x02\u0814\u0813\x03\x02\x02\x02\u0815\u0818\x03\x02\x02\x02\u0816" +
		"\u0814\x03\x02\x02\x02\u0816\u0817\x03\x02\x02\x02\u0817\u081A\x03\x02" +
		"\x02\x02\u0818\u0816\x03\x02\x02\x02\u0819\u0812\x03\x02\x02\x02\u081A" +
		"\u081D\x03\x02\x02\x02\u081B\u0819\x03\x02\x02\x02\u081B\u081C\x03\x02" +
		"\x02\x02\u081C\x85\x03\x02\x02\x02\u081D\u081B\x03\x02\x02\x02\u081E\u081F" +
		"\x074\x02\x02\u081F\u0820\x05\u019E\xD0\x02\u0820\u0824\x07\xCE\x02\x02" +
		"\u0821\u0823\x07\xE7\x02\x02\u0822\u0821\x03\x02\x02\x02\u0823\u0826\x03" +
		"\x02\x02\x02\u0824\u0822\x03\x02\x02\x02\u0824\u0825\x03\x02\x02\x02\u0825" +
		"\u0830\x03\x02\x02\x02\u0826\u0824\x03\x02\x02\x02\u0827\u082B\x05T+\x02" +
		"\u0828\u082A\x07\xE7\x02\x02\u0829\u0828\x03\x02\x02\x02\u082A\u082D\x03" +
		"\x02\x02\x02\u082B\u0829\x03\x02\x02\x02\u082B\u082C\x03\x02\x02\x02\u082C" +
		"\u082F\x03\x02\x02\x02\u082D\u082B\x03\x02\x02\x02\u082E\u0827\x03\x02" +
		"\x02\x02\u082F\u0832\x03\x02\x02\x02\u0830\u082E\x03\x02\x02\x02\u0830" +
		"\u0831\x03\x02\x02\x02\u0831\x87\x03\x02\x02\x02\u0832\u0830\x03\x02\x02" +
		"\x02\u0833\u0834\x075\x02\x02\u0834\u0835\x05\u019E\xD0\x02\u0835\u0839" +
		"\x07\xCE\x02\x02\u0836\u0838\x07\xE7\x02\x02\u0837\u0836\x03\x02\x02\x02" +
		"\u0838\u083B\x03\x02\x02\x02\u0839\u0837\x03\x02\x02\x02\u0839\u083A\x03" +
		"\x02\x02\x02\u083A\u0845\x03\x02\x02\x02\u083B\u0839\x03\x02\x02\x02\u083C" +
		"\u0840\x05T+\x02\u083D\u083F\x07\xE7\x02\x02\u083E\u083D\x03\x02\x02\x02" +
		"\u083F\u0842\x03\x02\x02\x02\u0840\u083E\x03\x02\x02\x02\u0840\u0841\x03" +
		"\x02\x02\x02\u0841\u0844\x03\x02\x02\x02\u0842\u0840\x03\x02\x02\x02\u0843" +
		"\u083C\x03\x02\x02\x02\u0844\u0847\x03\x02\x02\x02\u0845\u0843\x03\x02" +
		"\x02\x02\u0845\u0846\x03\x02\x02\x02\u0846\x89\x03\x02\x02\x02\u0847\u0845" +
		"\x03\x02\x02\x02\u0848\u0849\x07\x16\x02\x02\u0849\u084A\x05\u019E\xD0" +
		"\x02\u084A\u084E\x07\xCE\x02\x02\u084B\u084D\x07\xE7\x02\x02\u084C\u084B" +
		"\x03\x02\x02\x02\u084D\u0850\x03\x02\x02\x02\u084E\u084C\x03\x02\x02\x02" +
		"\u084E\u084F\x03\x02\x02\x02\u084F\u085A\x03\x02\x02\x02\u0850\u084E\x03" +
		"\x02\x02\x02\u0851\u0855\x05T+\x02\u0852\u0854\x07\xE7\x02\x02\u0853\u0852" +
		"\x03\x02\x02\x02\u0854\u0857\x03\x02\x02\x02\u0855\u0853\x03\x02\x02\x02" +
		"\u0855\u0856\x03\x02\x02\x02\u0856\u0859\x03\x02\x02\x02\u0857\u0855\x03" +
		"\x02\x02\x02\u0858\u0851\x03\x02\x02\x02\u0859\u085C\x03\x02\x02\x02\u085A" +
		"\u0858\x03\x02\x02\x02\u085A\u085B\x03\x02\x02\x02\u085B\x8B\x03\x02\x02" +
		"\x02\u085C\u085A\x03\x02\x02\x02\u085D\u085E\x07&\x02\x02\u085E\u085F" +
		"\x05\u019E\xD0\x02\u085F\u0863\x07\xCE\x02\x02\u0860\u0862\x07\xE7\x02" +
		"\x02\u0861\u0860\x03\x02\x02\x02\u0862\u0865\x03\x02\x02\x02\u0863\u0861" +
		"\x03\x02\x02\x02\u0863\u0864\x03\x02\x02\x02\u0864\u086F\x03\x02\x02\x02" +
		"\u0865\u0863\x03\x02\x02\x02\u0866\u086A\x05T+\x02\u0867\u0869\x07\xE7" +
		"\x02\x02\u0868\u0867\x03\x02\x02\x02\u0869\u086C\x03\x02\x02\x02\u086A" +
		"\u0868\x03\x02\x02\x02\u086A\u086B\x03\x02\x02\x02\u086B\u086E\x03\x02" +
		"\x02\x02\u086C\u086A\x03\x02\x02\x02\u086D\u0866\x03\x02\x02\x02\u086E" +
		"\u0871\x03\x02\x02\x02\u086F\u086D\x03\x02\x02\x02\u086F\u0870\x03\x02" +
		"\x02\x02\u0870\x8D\x03\x02\x02\x02\u0871\u086F\x03\x02\x02\x02\u0872\u0873" +
		"\x07\'\x02\x02\u0873\u0874\x05\u019E\xD0\x02\u0874\u0878\x07\xCE\x02\x02" +
		"\u0875\u0877\x07\xE7\x02\x02\u0876\u0875\x03\x02\x02\x02\u0877\u087A\x03" +
		"\x02\x02\x02\u0878\u0876\x03\x02\x02\x02\u0878\u0879\x03\x02\x02\x02\u0879" +
		"\u0884\x03\x02\x02\x02\u087A\u0878\x03\x02\x02\x02\u087B\u087F\x05T+\x02" +
		"\u087C\u087E\x07\xE7\x02\x02\u087D\u087C\x03\x02\x02\x02\u087E\u0881\x03" +
		"\x02\x02\x02\u087F\u087D\x03\x02\x02\x02\u087F\u0880\x03\x02\x02\x02\u0880" +
		"\u0883\x03\x02\x02\x02\u0881\u087F\x03\x02\x02\x02\u0882\u087B\x03\x02" +
		"\x02\x02\u0883\u0886\x03\x02\x02\x02\u0884\u0882\x03\x02\x02\x02\u0884" +
		"\u0885\x03\x02\x02\x02\u0885\x8F\x03\x02\x02\x02\u0886\u0884\x03\x02\x02" +
		"\x02\u0887\u0888\x07(\x02\x02\u0888\u0889\x05\u019E\xD0\x02\u0889\u088D" +
		"\x07\xCE\x02\x02\u088A\u088C\x07\xE7\x02\x02\u088B\u088A\x03\x02\x02\x02" +
		"\u088C\u088F\x03\x02\x02\x02\u088D\u088B\x03\x02\x02\x02\u088D\u088E\x03" +
		"\x02\x02\x02\u088E\u0899\x03\x02\x02\x02\u088F\u088D\x03\x02\x02\x02\u0890" +
		"\u0894\x05T+\x02\u0891\u0893\x07\xE7\x02\x02\u0892\u0891\x03\x02\x02\x02" +
		"\u0893\u0896\x03\x02\x02\x02\u0894\u0892\x03\x02\x02\x02\u0894\u0895\x03" +
		"\x02\x02\x02\u0895\u0898\x03\x02\x02\x02\u0896\u0894\x03\x02\x02\x02\u0897" +
		"\u0890\x03\x02\x02\x02\u0898\u089B\x03\x02\x02\x02\u0899\u0897\x03\x02" +
		"\x02\x02\u0899\u089A\x03\x02\x02\x02\u089A\x91\x03\x02\x02\x02\u089B\u0899" +
		"\x03\x02\x02\x02\u089C\u089D\x07)\x02\x02\u089D\u089E\x05\u019E\xD0\x02" +
		"\u089E\u08A2\x07\xCE\x02\x02\u089F\u08A1\x07\xE7\x02\x02\u08A0\u089F\x03" +
		"\x02\x02\x02\u08A1\u08A4\x03\x02\x02\x02\u08A2\u08A0\x03\x02\x02\x02\u08A2" +
		"\u08A3\x03\x02\x02\x02\u08A3\u08AE\x03\x02\x02\x02\u08A4\u08A2\x03\x02" +
		"\x02\x02\u08A5\u08A9\x05T+\x02\u08A6\u08A8\x07\xE7\x02\x02\u08A7\u08A6" +
		"\x03\x02\x02\x02\u08A8\u08AB\x03\x02\x02\x02\u08A9\u08A7\x03\x02\x02\x02" +
		"\u08A9\u08AA\x03\x02\x02\x02\u08AA\u08AD\x03\x02\x02\x02\u08AB\u08A9\x03" +
		"\x02\x02\x02\u08AC\u08A5\x03\x02\x02\x02\u08AD\u08B0\x03\x02\x02\x02\u08AE" +
		"\u08AC\x03\x02\x02\x02\u08AE\u08AF\x03\x02\x02\x02\u08AF\x93\x03\x02\x02" +
		"\x02\u08B0\u08AE\x03\x02\x02\x02\u08B1\u08B2\x07+\x02\x02\u08B2\u08B3" +
		"\x05\u019E\xD0\x02\u08B3\u08B7\x07\xCE\x02\x02\u08B4\u08B6\x07\xE7\x02" +
		"\x02\u08B5\u08B4\x03\x02\x02\x02\u08B6\u08B9\x03\x02\x02\x02\u08B7\u08B5" +
		"\x03\x02\x02\x02\u08B7\u08B8\x03\x02\x02\x02\u08B8\u08C3\x03\x02\x02\x02" +
		"\u08B9\u08B7\x03\x02\x02\x02\u08BA\u08BE\x05T+\x02\u08BB\u08BD\x07\xE7" +
		"\x02\x02\u08BC\u08BB\x03\x02\x02\x02\u08BD\u08C0\x03\x02\x02\x02\u08BE" +
		"\u08BC\x03\x02\x02\x02\u08BE\u08BF\x03\x02\x02\x02\u08BF\u08C2\x03\x02" +
		"\x02\x02\u08C0\u08BE\x03\x02\x02\x02\u08C1\u08BA\x03\x02\x02\x02\u08C2" +
		"\u08C5\x03\x02\x02\x02\u08C3\u08C1\x03\x02\x02\x02\u08C3\u08C4\x03\x02" +
		"\x02\x02\u08C4\x95\x03\x02\x02\x02\u08C5\u08C3\x03\x02\x02\x02\u08C6\u08C7" +
		"\x07,\x02\x02\u08C7\u08C8\x05\u019E\xD0\x02\u08C8\u08CC\x07\xCE\x02\x02" +
		"\u08C9\u08CB\x07\xE7\x02\x02\u08CA\u08C9\x03\x02\x02\x02\u08CB\u08CE\x03" +
		"\x02\x02\x02\u08CC\u08CA\x03\x02\x02\x02\u08CC\u08CD\x03\x02\x02\x02\u08CD" +
		"\u08D8\x03\x02\x02\x02\u08CE\u08CC\x03\x02\x02\x02\u08CF\u08D3\x05T+\x02" +
		"\u08D0\u08D2\x07\xE7\x02\x02\u08D1\u08D0\x03\x02\x02\x02\u08D2\u08D5\x03" +
		"\x02\x02\x02\u08D3\u08D1\x03\x02\x02\x02\u08D3\u08D4\x03\x02\x02\x02\u08D4" +
		"\u08D7\x03\x02\x02\x02\u08D5\u08D3\x03\x02\x02\x02\u08D6\u08CF\x03\x02" +
		"\x02\x02\u08D7\u08DA\x03\x02\x02\x02\u08D8\u08D6\x03\x02\x02\x02\u08D8" +
		"\u08D9\x03\x02\x02\x02\u08D9\x97\x03\x02\x02\x02\u08DA\u08D8\x03\x02\x02" +
		"\x02\u08DB\u08DC\x07-\x02\x02\u08DC\u08DD\x05\u019E\xD0\x02\u08DD\u08E1" +
		"\x07\xCE\x02\x02\u08DE\u08E0\x07\xE7\x02\x02\u08DF\u08DE\x03\x02\x02\x02" +
		"\u08E0\u08E3\x03\x02\x02\x02\u08E1\u08DF\x03\x02\x02\x02\u08E1\u08E2\x03" +
		"\x02\x02\x02\u08E2\u08ED\x03\x02\x02\x02\u08E3\u08E1\x03\x02\x02\x02\u08E4" +
		"\u08E8\x05T+\x02\u08E5\u08E7\x07\xE7\x02\x02\u08E6\u08E5\x03\x02\x02\x02" +
		"\u08E7\u08EA\x03\x02\x02\x02\u08E8\u08E6\x03\x02\x02\x02\u08E8\u08E9\x03" +
		"\x02\x02\x02\u08E9\u08EC\x03\x02\x02\x02\u08EA\u08E8\x03\x02\x02\x02\u08EB" +
		"\u08E4\x03\x02\x02\x02\u08EC\u08EF\x03\x02\x02\x02\u08ED\u08EB\x03\x02" +
		"\x02\x02\u08ED\u08EE\x03\x02\x02\x02\u08EE\x99\x03\x02\x02\x02\u08EF\u08ED" +
		"\x03\x02\x02\x02\u08F0\u08F1\x07.\x02\x02\u08F1\u08F2\x05\u019E\xD0\x02" +
		"\u08F2\u08F6\x07\xCE\x02\x02\u08F3\u08F5\x07\xE7\x02\x02\u08F4\u08F3\x03" +
		"\x02\x02\x02\u08F5\u08F8\x03\x02\x02\x02\u08F6\u08F4\x03\x02\x02\x02\u08F6" +
		"\u08F7\x03\x02\x02\x02\u08F7\u0902\x03\x02\x02\x02\u08F8\u08F6\x03\x02" +
		"\x02\x02\u08F9\u08FD\x05T+\x02\u08FA\u08FC\x07\xE7\x02\x02\u08FB\u08FA" +
		"\x03\x02\x02\x02\u08FC\u08FF\x03\x02\x02\x02\u08FD\u08FB\x03\x02\x02\x02" +
		"\u08FD\u08FE\x03\x02\x02\x02\u08FE\u0901\x03\x02\x02\x02\u08FF\u08FD\x03" +
		"\x02\x02\x02\u0900\u08F9\x03\x02\x02\x02\u0901\u0904\x03\x02\x02\x02\u0902" +
		"\u0900\x03\x02\x02\x02\u0902\u0903\x03\x02\x02\x02\u0903\x9B\x03\x02\x02" +
		"\x02\u0904\u0902\x03\x02\x02\x02\u0905\u0906\x07/\x02\x02\u0906\u0907" +
		"\x05\u019E\xD0\x02\u0907\u090B\x07\xCE\x02\x02\u0908\u090A\x07\xE7\x02" +
		"\x02\u0909\u0908\x03\x02\x02\x02\u090A\u090D\x03\x02\x02\x02\u090B\u0909" +
		"\x03\x02\x02\x02\u090B\u090C\x03\x02\x02\x02\u090C\u0917\x03\x02\x02\x02" +
		"\u090D\u090B\x03\x02\x02\x02\u090E\u0912\x05T+\x02\u090F\u0911\x07\xE7" +
		"\x02\x02\u0910\u090F\x03\x02\x02\x02\u0911\u0914\x03\x02\x02\x02\u0912" +
		"\u0910\x03\x02\x02\x02\u0912\u0913\x03\x02\x02\x02\u0913\u0916\x03\x02" +
		"\x02\x02\u0914\u0912\x03\x02\x02\x02\u0915\u090E\x03\x02\x02\x02\u0916" +
		"\u0919\x03\x02\x02\x02\u0917\u0915\x03\x02\x02\x02\u0917\u0918\x03\x02" +
		"\x02\x02\u0918\x9D\x03\x02\x02\x02\u0919\u0917\x03\x02\x02\x02\u091A\u091B" +
		"\x070\x02\x02\u091B\u091C\x05\u019E\xD0\x02\u091C\u0920\x07\xCE\x02\x02" +
		"\u091D\u091F\x07\xE7\x02\x02\u091E\u091D\x03\x02\x02\x02\u091F\u0922\x03" +
		"\x02\x02\x02\u0920\u091E\x03\x02\x02\x02\u0920\u0921\x03\x02\x02\x02\u0921" +
		"\u092C\x03\x02\x02\x02\u0922\u0920\x03\x02\x02\x02\u0923\u0927\x05T+\x02" +
		"\u0924\u0926\x07\xE7\x02\x02\u0925\u0924\x03\x02\x02\x02\u0926\u0929\x03" +
		"\x02\x02\x02\u0927\u0925\x03\x02\x02\x02\u0927\u0928\x03\x02\x02\x02\u0928" +
		"\u092B\x03\x02\x02\x02\u0929\u0927\x03\x02\x02\x02\u092A\u0923\x03\x02" +
		"\x02\x02\u092B\u092E\x03\x02\x02\x02\u092C\u092A\x03\x02\x02\x02\u092C" +
		"\u092D\x03\x02\x02\x02\u092D\x9F\x03\x02\x02\x02\u092E\u092C\x03\x02\x02" +
		"\x02\u092F\u0930\x071\x02\x02\u0930\u0931\x05\u019E\xD0\x02\u0931\u0935" +
		"\x07\xCE\x02\x02\u0932\u0934\x07\xE7\x02\x02\u0933\u0932\x03\x02\x02\x02" +
		"\u0934\u0937\x03\x02\x02\x02\u0935\u0933\x03\x02\x02\x02\u0935\u0936\x03" +
		"\x02\x02\x02\u0936\u0941\x03\x02\x02\x02\u0937\u0935\x03\x02\x02\x02\u0938" +
		"\u093C\x05T+\x02\u0939\u093B\x07\xE7\x02\x02\u093A\u0939\x03\x02\x02\x02" +
		"\u093B\u093E\x03\x02\x02\x02\u093C\u093A\x03\x02\x02\x02\u093C\u093D\x03" +
		"\x02\x02\x02\u093D\u0940\x03\x02\x02\x02\u093E\u093C\x03\x02\x02\x02\u093F" +
		"\u0938\x03\x02\x02\x02\u0940\u0943\x03\x02\x02\x02\u0941\u093F\x03\x02" +
		"\x02\x02\u0941\u0942\x03\x02\x02\x02\u0942\xA1\x03\x02\x02\x02\u0943\u0941" +
		"\x03\x02\x02\x02\u0944\u0945\x07*\x02\x02\u0945\u0946\x05\u019E\xD0\x02" +
		"\u0946\u094A\x07\xCE\x02\x02\u0947\u0949\x07\xE7\x02\x02\u0948\u0947\x03" +
		"\x02\x02\x02\u0949\u094C\x03\x02\x02\x02\u094A\u0948\x03\x02\x02\x02\u094A" +
		"\u094B\x03\x02\x02\x02\u094B\u0956\x03\x02\x02\x02\u094C\u094A\x03\x02" +
		"\x02\x02\u094D\u0951\x05T+\x02\u094E\u0950\x07\xE7\x02\x02\u094F\u094E" +
		"\x03\x02\x02\x02\u0950\u0953\x03\x02\x02\x02\u0951\u094F\x03\x02\x02\x02" +
		"\u0951\u0952\x03\x02\x02\x02\u0952\u0955\x03\x02\x02\x02\u0953\u0951\x03" +
		"\x02\x02\x02\u0954\u094D\x03\x02\x02\x02\u0955\u0958\x03\x02\x02\x02\u0956" +
		"\u0954\x03\x02\x02\x02\u0956\u0957\x03\x02\x02\x02\u0957\xA3\x03\x02\x02" +
		"\x02\u0958\u0956\x03\x02\x02\x02\u0959\u095A\x072\x02\x02\u095A\u095B" +
		"\x05\u019E\xD0\x02\u095B\u095F\x07\xCE\x02\x02\u095C\u095E\x07\xE7\x02" +
		"\x02\u095D\u095C\x03\x02\x02\x02\u095E\u0961\x03\x02\x02\x02\u095F\u095D" +
		"\x03\x02\x02\x02\u095F\u0960\x03\x02\x02\x02\u0960\u096B\x03\x02\x02\x02" +
		"\u0961\u095F\x03\x02\x02\x02\u0962\u0966\x05T+\x02\u0963\u0965\x07\xE7" +
		"\x02\x02\u0964\u0963\x03\x02\x02\x02\u0965\u0968\x03\x02\x02\x02\u0966" +
		"\u0964\x03\x02\x02\x02\u0966\u0967\x03\x02\x02\x02\u0967\u096A\x03\x02" +
		"\x02\x02\u0968\u0966\x03\x02\x02\x02\u0969\u0962\x03\x02\x02\x02\u096A" +
		"\u096D\x03\x02\x02\x02\u096B\u0969\x03\x02\x02\x02\u096B\u096C\x03\x02" +
		"\x02\x02\u096C\xA5\x03\x02\x02\x02\u096D\u096B\x03\x02\x02\x02\u096E\u096F" +
		"\x07J\x02\x02\u096F\u0970\x05\u019E\xD0\x02\u0970\u0974\x07\xCE\x02\x02" +
		"\u0971\u0973\x07\xE7\x02\x02\u0972\u0971\x03\x02\x02\x02\u0973\u0976\x03" +
		"\x02\x02\x02\u0974\u0972\x03\x02\x02\x02\u0974\u0975\x03\x02\x02\x02\u0975" +
		"\u0980\x03\x02\x02\x02\u0976\u0974\x03\x02\x02\x02\u0977\u097B\x05T+\x02" +
		"\u0978\u097A\x07\xE7\x02\x02\u0979\u0978\x03\x02\x02\x02\u097A\u097D\x03" +
		"\x02\x02\x02\u097B\u0979\x03\x02\x02\x02\u097B\u097C\x03\x02\x02\x02\u097C" +
		"\u097F\x03\x02\x02\x02\u097D\u097B\x03\x02\x02\x02\u097E\u0977\x03\x02" +
		"\x02\x02\u097F\u0982\x03\x02\x02\x02\u0980\u097E\x03\x02\x02\x02\u0980" +
		"\u0981\x03\x02\x02\x02\u0981\xA7\x03\x02\x02\x02\u0982\u0980\x03\x02\x02" +
		"\x02\u0983\u0984\x07K\x02\x02\u0984\u0985\x05\u019E\xD0\x02\u0985\u0989" +
		"\x07\xCE\x02\x02\u0986\u0988\x07\xE7\x02\x02\u0987\u0986\x03\x02\x02\x02" +
		"\u0988\u098B\x03\x02\x02\x02\u0989\u0987\x03\x02\x02\x02\u0989\u098A\x03" +
		"\x02\x02\x02\u098A\u0995\x03\x02\x02\x02\u098B\u0989\x03\x02\x02\x02\u098C" +
		"\u0990\x05T+\x02\u098D\u098F\x07\xE7\x02\x02\u098E\u098D\x03\x02\x02\x02" +
		"\u098F\u0992\x03\x02\x02\x02\u0990\u098E\x03\x02\x02\x02\u0990\u0991\x03" +
		"\x02\x02\x02\u0991\u0994\x03\x02\x02\x02\u0992\u0990\x03\x02\x02\x02\u0993" +
		"\u098C\x03\x02\x02\x02\u0994\u0997\x03\x02\x02\x02\u0995";
	private static readonly _serializedATNSegment6: string =
		"\u0993\x03\x02\x02\x02\u0995\u0996\x03\x02\x02\x02\u0996\xA9\x03\x02\x02" +
		"\x02\u0997\u0995\x03\x02\x02\x02\u0998\u0999\x07L\x02\x02\u0999\u099A" +
		"\x05\u01A4\xD3\x02\u099A\u099E\x07\xCE\x02\x02\u099B\u099D\x07\xE7\x02" +
		"\x02\u099C\u099B\x03\x02\x02\x02\u099D\u09A0\x03\x02\x02\x02\u099E\u099C" +
		"\x03\x02\x02\x02\u099E\u099F\x03\x02\x02\x02\u099F\u09AA\x03\x02\x02\x02" +
		"\u09A0\u099E\x03\x02\x02\x02\u09A1\u09A5\x05T+\x02\u09A2\u09A4\x07\xE7" +
		"\x02\x02\u09A3\u09A2\x03\x02\x02\x02\u09A4\u09A7\x03\x02\x02\x02\u09A5" +
		"\u09A3\x03\x02\x02\x02\u09A5\u09A6\x03\x02\x02\x02\u09A6\u09A9\x03\x02" +
		"\x02\x02\u09A7\u09A5\x03\x02\x02\x02\u09A8\u09A1\x03\x02\x02\x02\u09A9" +
		"\u09AC\x03\x02\x02\x02\u09AA\u09A8\x03\x02\x02\x02\u09AA\u09AB\x03\x02" +
		"\x02\x02\u09AB\xAB\x03\x02\x02\x02\u09AC\u09AA\x03\x02\x02\x02\u09AD\u09AE" +
		"\x07M\x02\x02\u09AE\u09AF\x05\u01A4\xD3\x02\u09AF\u09B3\x07\xCE\x02\x02" +
		"\u09B0\u09B2\x07\xE7\x02\x02\u09B1\u09B0\x03\x02\x02\x02\u09B2\u09B5\x03" +
		"\x02\x02\x02\u09B3\u09B1\x03\x02\x02\x02\u09B3\u09B4\x03\x02\x02\x02\u09B4" +
		"\u09BF\x03\x02\x02\x02\u09B5\u09B3\x03\x02\x02\x02\u09B6\u09BA\x05T+\x02" +
		"\u09B7\u09B9\x07\xE7\x02\x02\u09B8\u09B7\x03\x02\x02\x02\u09B9\u09BC\x03" +
		"\x02\x02\x02\u09BA\u09B8\x03\x02\x02\x02\u09BA\u09BB\x03\x02\x02\x02\u09BB" +
		"\u09BE\x03\x02\x02\x02\u09BC\u09BA\x03\x02\x02\x02\u09BD\u09B6\x03\x02" +
		"\x02\x02\u09BE\u09C1\x03\x02\x02\x02\u09BF\u09BD\x03\x02\x02\x02\u09BF" +
		"\u09C0\x03\x02\x02\x02\u09C0\xAD\x03\x02\x02\x02\u09C1\u09BF\x03\x02\x02" +
		"\x02\u09C2\u09C3\x07N\x02\x02\u09C3\u09C4\x05\u01A4\xD3\x02\u09C4\u09C8" +
		"\x07\xCE\x02\x02\u09C5\u09C7\x07\xE7\x02\x02\u09C6\u09C5\x03\x02\x02\x02" +
		"\u09C7\u09CA\x03\x02\x02\x02\u09C8\u09C6\x03\x02\x02\x02\u09C8\u09C9\x03" +
		"\x02\x02\x02\u09C9\u09D4\x03\x02\x02\x02\u09CA\u09C8\x03\x02\x02\x02\u09CB" +
		"\u09CF\x05T+\x02\u09CC\u09CE\x07\xE7\x02\x02\u09CD\u09CC\x03\x02\x02\x02" +
		"\u09CE\u09D1\x03\x02\x02\x02\u09CF\u09CD\x03\x02\x02\x02\u09CF\u09D0\x03" +
		"\x02\x02\x02\u09D0\u09D3\x03\x02\x02\x02\u09D1\u09CF\x03\x02\x02\x02\u09D2" +
		"\u09CB\x03\x02\x02\x02\u09D3\u09D6\x03\x02\x02\x02\u09D4\u09D2\x03\x02" +
		"\x02\x02\u09D4\u09D5\x03\x02\x02\x02\u09D5\xAF\x03\x02\x02\x02\u09D6\u09D4" +
		"\x03\x02\x02\x02\u09D7\u09D8\x07O\x02\x02\u09D8\u09D9\x05\u01A4\xD3\x02" +
		"\u09D9\u09DD\x07\xCE\x02\x02\u09DA\u09DC\x07\xE7\x02\x02\u09DB\u09DA\x03" +
		"\x02\x02\x02\u09DC\u09DF\x03\x02\x02\x02\u09DD\u09DB\x03\x02\x02\x02\u09DD" +
		"\u09DE\x03\x02\x02\x02\u09DE\u09E9\x03\x02\x02\x02\u09DF\u09DD\x03\x02" +
		"\x02\x02\u09E0\u09E4\x05T+\x02\u09E1\u09E3\x07\xE7\x02\x02\u09E2\u09E1" +
		"\x03\x02\x02\x02\u09E3\u09E6\x03\x02\x02\x02\u09E4\u09E2\x03\x02\x02\x02" +
		"\u09E4\u09E5\x03\x02\x02\x02\u09E5\u09E8\x03\x02\x02\x02\u09E6\u09E4\x03" +
		"\x02\x02\x02\u09E7\u09E0\x03\x02\x02\x02\u09E8\u09EB\x03\x02\x02\x02\u09E9" +
		"\u09E7\x03\x02\x02\x02\u09E9\u09EA\x03\x02\x02\x02\u09EA\xB1\x03\x02\x02" +
		"\x02\u09EB\u09E9\x03\x02\x02\x02\u09EC\u09ED\x07P\x02\x02\u09ED\u09EE" +
		"\x05\u01A4\xD3\x02\u09EE\u09F2\x07\xCE\x02\x02\u09EF\u09F1\x07\xE7\x02" +
		"\x02\u09F0\u09EF\x03\x02\x02\x02\u09F1\u09F4\x03\x02\x02\x02\u09F2\u09F0" +
		"\x03\x02\x02\x02\u09F2\u09F3\x03\x02\x02\x02\u09F3\u09FE\x03\x02\x02\x02" +
		"\u09F4\u09F2\x03\x02\x02\x02\u09F5\u09F9\x05T+\x02\u09F6\u09F8\x07\xE7" +
		"\x02\x02\u09F7\u09F6\x03\x02\x02\x02\u09F8\u09FB\x03\x02\x02\x02\u09F9" +
		"\u09F7\x03\x02\x02\x02\u09F9\u09FA\x03\x02\x02\x02\u09FA\u09FD\x03\x02" +
		"\x02\x02\u09FB\u09F9\x03\x02\x02\x02\u09FC\u09F5\x03\x02\x02\x02\u09FD" +
		"\u0A00\x03\x02\x02\x02\u09FE\u09FC\x03\x02\x02\x02\u09FE\u09FF\x03\x02" +
		"\x02\x02\u09FF\xB3\x03\x02\x02\x02\u0A00\u09FE\x03\x02\x02\x02\u0A01\u0A02" +
		"\x07Q\x02\x02\u0A02\u0A03\x05\u01A4\xD3\x02\u0A03\u0A07\x07\xCE\x02\x02" +
		"\u0A04\u0A06\x07\xE7\x02\x02\u0A05\u0A04\x03\x02\x02\x02\u0A06\u0A09\x03" +
		"\x02\x02\x02\u0A07\u0A05\x03\x02\x02\x02\u0A07\u0A08\x03\x02\x02\x02\u0A08" +
		"\u0A13\x03\x02\x02\x02\u0A09\u0A07\x03\x02\x02\x02\u0A0A\u0A0E\x05T+\x02" +
		"\u0A0B\u0A0D\x07\xE7\x02\x02\u0A0C\u0A0B\x03\x02\x02\x02\u0A0D\u0A10\x03" +
		"\x02\x02\x02\u0A0E\u0A0C\x03\x02\x02\x02\u0A0E\u0A0F\x03\x02\x02\x02\u0A0F" +
		"\u0A12\x03\x02\x02\x02\u0A10\u0A0E\x03\x02\x02\x02\u0A11\u0A0A\x03\x02" +
		"\x02\x02\u0A12\u0A15\x03\x02\x02\x02\u0A13\u0A11\x03\x02\x02\x02\u0A13" +
		"\u0A14\x03\x02\x02\x02\u0A14\xB5\x03\x02\x02\x02\u0A15\u0A13\x03\x02\x02" +
		"\x02\u0A16\u0A17\x07R\x02\x02\u0A17\u0A18\x05\u01A4\xD3\x02\u0A18\u0A1C" +
		"\x07\xCE\x02\x02\u0A19\u0A1B\x07\xE7\x02\x02\u0A1A\u0A19\x03\x02\x02\x02" +
		"\u0A1B\u0A1E\x03\x02\x02\x02\u0A1C\u0A1A\x03\x02\x02\x02\u0A1C\u0A1D\x03" +
		"\x02\x02\x02\u0A1D\u0A28\x03\x02\x02\x02\u0A1E\u0A1C\x03\x02\x02\x02\u0A1F" +
		"\u0A23\x05T+\x02\u0A20\u0A22\x07\xE7\x02\x02\u0A21\u0A20\x03\x02\x02\x02" +
		"\u0A22\u0A25\x03\x02\x02\x02\u0A23\u0A21\x03\x02\x02\x02\u0A23\u0A24\x03" +
		"\x02\x02\x02\u0A24\u0A27\x03\x02\x02\x02\u0A25\u0A23\x03\x02\x02\x02\u0A26" +
		"\u0A1F\x03\x02\x02\x02\u0A27\u0A2A\x03\x02\x02\x02\u0A28\u0A26\x03\x02" +
		"\x02\x02\u0A28\u0A29\x03\x02\x02\x02\u0A29\xB7\x03\x02\x02\x02\u0A2A\u0A28" +
		"\x03\x02\x02\x02\u0A2B\u0A2C\x07S\x02\x02\u0A2C\u0A2D\x05\u01A4\xD3\x02" +
		"\u0A2D\u0A31\x07\xCE\x02\x02\u0A2E\u0A30\x07\xE7\x02\x02\u0A2F\u0A2E\x03" +
		"\x02\x02\x02\u0A30\u0A33\x03\x02\x02\x02\u0A31\u0A2F\x03\x02\x02\x02\u0A31" +
		"\u0A32\x03\x02\x02\x02\u0A32\u0A3D\x03\x02\x02\x02\u0A33\u0A31\x03\x02" +
		"\x02\x02\u0A34\u0A38\x05T+\x02\u0A35\u0A37\x07\xE7\x02\x02\u0A36\u0A35" +
		"\x03\x02\x02\x02\u0A37\u0A3A\x03\x02\x02\x02\u0A38\u0A36\x03\x02\x02\x02" +
		"\u0A38\u0A39\x03\x02\x02\x02\u0A39\u0A3C\x03\x02\x02\x02\u0A3A\u0A38\x03" +
		"\x02\x02\x02\u0A3B\u0A34\x03\x02\x02\x02\u0A3C\u0A3F\x03\x02\x02\x02\u0A3D" +
		"\u0A3B\x03\x02\x02\x02\u0A3D\u0A3E\x03\x02\x02\x02\u0A3E\xB9\x03\x02\x02" +
		"\x02\u0A3F\u0A3D\x03\x02\x02\x02\u0A40\u0A41\x07T\x02\x02\u0A41\u0A42" +
		"\x05\u01A4\xD3\x02\u0A42\u0A46\x07\xCE\x02\x02\u0A43\u0A45\x07\xE7\x02" +
		"\x02\u0A44\u0A43\x03\x02\x02\x02\u0A45\u0A48\x03\x02\x02\x02\u0A46\u0A44" +
		"\x03\x02\x02\x02\u0A46\u0A47\x03\x02\x02\x02\u0A47\u0A52\x03\x02\x02\x02" +
		"\u0A48\u0A46\x03\x02\x02\x02\u0A49\u0A4D\x05T+\x02\u0A4A\u0A4C\x07\xE7" +
		"\x02\x02\u0A4B\u0A4A\x03\x02\x02\x02\u0A4C\u0A4F\x03\x02\x02\x02\u0A4D" +
		"\u0A4B\x03\x02\x02\x02\u0A4D\u0A4E\x03\x02\x02\x02\u0A4E\u0A51\x03\x02" +
		"\x02\x02\u0A4F\u0A4D\x03\x02\x02\x02\u0A50\u0A49\x03\x02\x02\x02\u0A51" +
		"\u0A54\x03\x02\x02\x02\u0A52\u0A50\x03\x02\x02\x02\u0A52\u0A53\x03\x02" +
		"\x02\x02\u0A53\xBB\x03\x02\x02\x02\u0A54\u0A52\x03\x02\x02\x02\u0A55\u0A56" +
		"\x07U\x02\x02\u0A56\u0A57\x05\u01A4\xD3\x02\u0A57\u0A5B\x07\xCE\x02\x02" +
		"\u0A58\u0A5A\x07\xE7\x02\x02\u0A59\u0A58\x03\x02\x02\x02\u0A5A\u0A5D\x03" +
		"\x02\x02\x02\u0A5B\u0A59\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C" +
		"\u0A67\x03\x02\x02\x02\u0A5D\u0A5B\x03\x02\x02\x02\u0A5E\u0A62\x05T+\x02" +
		"\u0A5F\u0A61\x07\xE7\x02\x02\u0A60\u0A5F\x03\x02\x02\x02\u0A61\u0A64\x03" +
		"\x02\x02\x02\u0A62\u0A60\x03\x02\x02\x02\u0A62\u0A63\x03\x02\x02\x02\u0A63" +
		"\u0A66\x03\x02\x02\x02\u0A64\u0A62\x03\x02\x02\x02\u0A65\u0A5E\x03\x02" +
		"\x02\x02\u0A66\u0A69\x03\x02\x02\x02\u0A67\u0A65\x03\x02\x02\x02\u0A67" +
		"\u0A68\x03\x02\x02\x02\u0A68\xBD\x03\x02\x02\x02\u0A69\u0A67\x03\x02\x02" +
		"\x02\u0A6A\u0A6B\x07V\x02\x02\u0A6B\u0A6C\x05\u01A4\xD3\x02\u0A6C\u0A70" +
		"\x07\xCE\x02\x02\u0A6D\u0A6F\x07\xE7\x02\x02\u0A6E\u0A6D\x03\x02\x02\x02" +
		"\u0A6F\u0A72\x03\x02\x02\x02\u0A70\u0A6E\x03\x02\x02\x02\u0A70\u0A71\x03" +
		"\x02\x02\x02\u0A71\u0A7C\x03\x02\x02\x02\u0A72\u0A70\x03\x02\x02\x02\u0A73" +
		"\u0A77\x05T+\x02\u0A74\u0A76\x07\xE7\x02\x02\u0A75\u0A74\x03\x02\x02\x02" +
		"\u0A76\u0A79\x03\x02\x02\x02\u0A77\u0A75\x03\x02\x02\x02\u0A77\u0A78\x03" +
		"\x02\x02\x02\u0A78\u0A7B\x03\x02\x02\x02\u0A79\u0A77\x03\x02\x02\x02\u0A7A" +
		"\u0A73\x03\x02\x02\x02\u0A7B\u0A7E\x03\x02\x02\x02\u0A7C\u0A7A\x03\x02" +
		"\x02\x02\u0A7C\u0A7D\x03\x02\x02\x02\u0A7D\xBF\x03\x02\x02\x02\u0A7E\u0A7C" +
		"\x03\x02\x02\x02\u0A7F\u0A80\x07W\x02\x02\u0A80\u0A81\x05\u01A4\xD3\x02" +
		"\u0A81\u0A85\x07\xCE\x02\x02\u0A82\u0A84\x07\xE7\x02\x02\u0A83\u0A82\x03" +
		"\x02\x02\x02\u0A84\u0A87\x03\x02\x02\x02\u0A85\u0A83\x03\x02\x02\x02\u0A85" +
		"\u0A86\x03\x02\x02\x02\u0A86\u0A91\x03\x02\x02\x02\u0A87\u0A85\x03\x02" +
		"\x02\x02\u0A88\u0A8C\x05T+\x02\u0A89\u0A8B\x07\xE7\x02\x02\u0A8A\u0A89" +
		"\x03\x02\x02\x02\u0A8B\u0A8E\x03\x02\x02\x02\u0A8C\u0A8A\x03\x02\x02\x02" +
		"\u0A8C\u0A8D\x03\x02\x02\x02\u0A8D\u0A90\x03\x02\x02\x02\u0A8E\u0A8C\x03" +
		"\x02\x02\x02\u0A8F\u0A88\x03\x02\x02\x02\u0A90\u0A93\x03\x02\x02\x02\u0A91" +
		"\u0A8F\x03\x02\x02\x02\u0A91\u0A92\x03\x02\x02\x02\u0A92\xC1\x03\x02\x02" +
		"\x02\u0A93\u0A91\x03\x02\x02\x02\u0A94\u0A95\x07X\x02\x02\u0A95\u0A96" +
		"\x05\u01A4\xD3\x02\u0A96\u0A9A\x07\xCE\x02\x02\u0A97\u0A99\x07\xE7\x02" +
		"\x02\u0A98\u0A97\x03\x02\x02\x02\u0A99\u0A9C\x03\x02\x02\x02\u0A9A\u0A98" +
		"\x03\x02\x02\x02\u0A9A\u0A9B\x03\x02\x02\x02\u0A9B\u0AA6\x03\x02\x02\x02" +
		"\u0A9C\u0A9A\x03\x02\x02\x02\u0A9D\u0AA1\x05T+\x02\u0A9E\u0AA0\x07\xE7" +
		"\x02\x02\u0A9F\u0A9E\x03\x02\x02\x02\u0AA0\u0AA3\x03\x02\x02\x02\u0AA1" +
		"\u0A9F\x03\x02\x02\x02\u0AA1\u0AA2\x03\x02\x02\x02\u0AA2\u0AA5\x03\x02" +
		"\x02\x02\u0AA3\u0AA1\x03\x02\x02\x02\u0AA4\u0A9D\x03\x02\x02\x02\u0AA5" +
		"\u0AA8\x03\x02\x02\x02\u0AA6\u0AA4\x03\x02\x02\x02\u0AA6\u0AA7\x03\x02" +
		"\x02\x02\u0AA7\xC3\x03\x02\x02\x02\u0AA8\u0AA6\x03\x02\x02\x02\u0AA9\u0AAA" +
		"\x07Y\x02\x02\u0AAA\u0AAB\x05\u01A4\xD3\x02\u0AAB\u0AAF\x07\xCE\x02\x02" +
		"\u0AAC\u0AAE\x07\xE7\x02\x02\u0AAD\u0AAC\x03\x02\x02\x02\u0AAE\u0AB1\x03" +
		"\x02\x02\x02\u0AAF\u0AAD\x03\x02\x02\x02\u0AAF\u0AB0\x03\x02\x02\x02\u0AB0" +
		"\u0ABB\x03\x02\x02\x02\u0AB1\u0AAF\x03\x02\x02\x02\u0AB2\u0AB6\x05T+\x02" +
		"\u0AB3\u0AB5\x07\xE7\x02\x02\u0AB4\u0AB3\x03\x02\x02\x02\u0AB5\u0AB8\x03" +
		"\x02\x02\x02\u0AB6\u0AB4\x03\x02\x02\x02\u0AB6\u0AB7\x03\x02\x02\x02\u0AB7" +
		"\u0ABA\x03\x02\x02\x02\u0AB8\u0AB6\x03\x02\x02\x02\u0AB9\u0AB2\x03\x02" +
		"\x02\x02\u0ABA\u0ABD\x03\x02\x02\x02\u0ABB\u0AB9\x03\x02\x02\x02\u0ABB" +
		"\u0ABC\x03\x02\x02\x02\u0ABC\xC5\x03\x02\x02\x02\u0ABD\u0ABB\x03\x02\x02" +
		"\x02\u0ABE\u0ABF\x07Z\x02\x02\u0ABF\u0AC0\x05\u01A4\xD3\x02\u0AC0\u0AC4" +
		"\x07\xCE\x02\x02\u0AC1\u0AC3\x07\xE7\x02\x02\u0AC2\u0AC1\x03\x02\x02\x02" +
		"\u0AC3\u0AC6\x03\x02\x02\x02\u0AC4\u0AC2\x03\x02\x02\x02\u0AC4\u0AC5\x03" +
		"\x02\x02\x02\u0AC5\u0AD0\x03\x02\x02\x02\u0AC6\u0AC4\x03\x02\x02\x02\u0AC7" +
		"\u0ACB\x05T+\x02\u0AC8\u0ACA\x07\xE7\x02\x02\u0AC9\u0AC8\x03\x02\x02\x02" +
		"\u0ACA\u0ACD\x03\x02\x02\x02\u0ACB\u0AC9\x03\x02\x02\x02\u0ACB\u0ACC\x03" +
		"\x02\x02\x02\u0ACC\u0ACF\x03\x02\x02\x02\u0ACD\u0ACB\x03\x02\x02\x02\u0ACE" +
		"\u0AC7\x03\x02\x02\x02\u0ACF\u0AD2\x03\x02\x02\x02\u0AD0\u0ACE\x03\x02" +
		"\x02\x02\u0AD0\u0AD1\x03\x02\x02\x02\u0AD1\xC7\x03\x02\x02\x02\u0AD2\u0AD0" +
		"\x03\x02\x02\x02\u0AD3\u0AD4\x07[\x02\x02\u0AD4\u0AD5\x05\u01A4\xD3\x02" +
		"\u0AD5\u0AD9\x07\xCE\x02\x02\u0AD6\u0AD8\x07\xE7\x02\x02\u0AD7\u0AD6\x03" +
		"\x02\x02\x02\u0AD8\u0ADB\x03\x02\x02\x02\u0AD9\u0AD7\x03\x02\x02\x02\u0AD9" +
		"\u0ADA\x03\x02\x02\x02\u0ADA\u0AE5\x03\x02\x02\x02\u0ADB\u0AD9\x03\x02" +
		"\x02\x02\u0ADC\u0AE0\x05T+\x02\u0ADD\u0ADF\x07\xE7\x02\x02\u0ADE\u0ADD" +
		"\x03\x02\x02\x02\u0ADF\u0AE2\x03\x02\x02\x02\u0AE0\u0ADE\x03\x02\x02\x02" +
		"\u0AE0\u0AE1\x03\x02\x02\x02\u0AE1\u0AE4\x03\x02\x02\x02\u0AE2\u0AE0\x03" +
		"\x02\x02\x02\u0AE3\u0ADC\x03\x02\x02\x02\u0AE4\u0AE7\x03\x02\x02\x02\u0AE5" +
		"\u0AE3\x03\x02\x02\x02\u0AE5\u0AE6\x03\x02\x02\x02\u0AE6\xC9\x03\x02\x02" +
		"\x02\u0AE7\u0AE5\x03\x02\x02\x02\u0AE8\u0AE9\x07\\\x02\x02\u0AE9\u0AEA" +
		"\x05\u01A4\xD3\x02\u0AEA\u0AEE\x07\xCE\x02\x02\u0AEB\u0AED\x07\xE7\x02" +
		"\x02\u0AEC\u0AEB\x03\x02\x02\x02\u0AED\u0AF0\x03\x02\x02\x02\u0AEE\u0AEC" +
		"\x03\x02\x02\x02\u0AEE\u0AEF\x03\x02\x02\x02\u0AEF\u0AFA\x03\x02\x02\x02" +
		"\u0AF0\u0AEE\x03\x02\x02\x02\u0AF1\u0AF5\x05T+\x02\u0AF2\u0AF4\x07\xE7" +
		"\x02\x02\u0AF3\u0AF2\x03\x02\x02\x02\u0AF4\u0AF7\x03\x02\x02\x02\u0AF5" +
		"\u0AF3\x03\x02\x02\x02\u0AF5\u0AF6\x03\x02\x02\x02\u0AF6\u0AF9\x03\x02" +
		"\x02\x02\u0AF7\u0AF5\x03\x02\x02\x02\u0AF8\u0AF1\x03\x02\x02\x02\u0AF9" +
		"\u0AFC\x03\x02\x02\x02\u0AFA\u0AF8\x03\x02\x02\x02\u0AFA\u0AFB\x03\x02" +
		"\x02\x02\u0AFB\xCB\x03\x02\x02\x02\u0AFC\u0AFA\x03\x02\x02\x02\u0AFD\u0AFE" +
		"\x07]\x02\x02\u0AFE\u0AFF\x05\u01A4\xD3\x02\u0AFF\u0B03\x07\xCE\x02\x02" +
		"\u0B00\u0B02\x07\xE7\x02\x02\u0B01\u0B00\x03\x02\x02\x02\u0B02\u0B05\x03" +
		"\x02\x02\x02\u0B03\u0B01\x03\x02\x02\x02\u0B03\u0B04\x03\x02\x02\x02\u0B04" +
		"\u0B0F\x03\x02\x02\x02\u0B05\u0B03\x03\x02\x02\x02\u0B06\u0B0A\x05T+\x02" +
		"\u0B07\u0B09\x07\xE7\x02\x02\u0B08\u0B07\x03\x02\x02\x02\u0B09\u0B0C\x03" +
		"\x02\x02\x02\u0B0A\u0B08\x03\x02\x02\x02\u0B0A\u0B0B\x03\x02\x02\x02\u0B0B" +
		"\u0B0E\x03\x02\x02\x02\u0B0C\u0B0A\x03\x02\x02\x02\u0B0D\u0B06\x03\x02" +
		"\x02\x02\u0B0E\u0B11\x03\x02\x02\x02\u0B0F\u0B0D\x03\x02\x02\x02\u0B0F" +
		"\u0B10\x03\x02\x02\x02\u0B10\xCD\x03\x02\x02\x02\u0B11\u0B0F\x03\x02\x02" +
		"\x02\u0B12\u0B13\x07^\x02\x02\u0B13\u0B14\x05\u01A4\xD3\x02\u0B14\u0B18" +
		"\x07\xCE\x02\x02\u0B15\u0B17\x07\xE7\x02\x02\u0B16\u0B15\x03\x02\x02\x02" +
		"\u0B17\u0B1A\x03\x02\x02\x02\u0B18\u0B16\x03\x02\x02\x02\u0B18\u0B19\x03" +
		"\x02\x02\x02\u0B19\u0B24\x03\x02\x02\x02\u0B1A\u0B18\x03\x02\x02\x02\u0B1B" +
		"\u0B1F\x05T+\x02\u0B1C\u0B1E\x07\xE7\x02\x02\u0B1D\u0B1C\x03\x02\x02\x02" +
		"\u0B1E\u0B21\x03\x02\x02\x02\u0B1F\u0B1D\x03\x02\x02\x02\u0B1F\u0B20\x03" +
		"\x02\x02\x02\u0B20\u0B23\x03\x02\x02\x02\u0B21\u0B1F\x03\x02\x02\x02\u0B22" +
		"\u0B1B\x03\x02\x02\x02\u0B23\u0B26\x03\x02\x02\x02\u0B24\u0B22\x03\x02" +
		"\x02\x02\u0B24\u0B25\x03\x02\x02\x02\u0B25\xCF\x03\x02\x02\x02\u0B26\u0B24" +
		"\x03\x02\x02\x02\u0B27\u0B28\x07_\x02\x02\u0B28\u0B29\x05\u01A4\xD3\x02" +
		"\u0B29\u0B2D\x07\xCE\x02\x02\u0B2A\u0B2C\x07\xE7\x02\x02\u0B2B\u0B2A\x03" +
		"\x02\x02\x02\u0B2C\u0B2F\x03\x02\x02\x02\u0B2D\u0B2B\x03\x02\x02\x02\u0B2D" +
		"\u0B2E\x03\x02\x02\x02\u0B2E\u0B39\x03\x02\x02\x02\u0B2F\u0B2D\x03\x02" +
		"\x02\x02\u0B30\u0B34\x05T+\x02\u0B31\u0B33\x07\xE7\x02\x02\u0B32\u0B31" +
		"\x03\x02\x02\x02\u0B33\u0B36\x03\x02\x02\x02\u0B34\u0B32\x03\x02\x02\x02" +
		"\u0B34\u0B35\x03\x02\x02\x02\u0B35\u0B38\x03\x02\x02\x02\u0B36\u0B34\x03" +
		"\x02\x02\x02\u0B37\u0B30\x03\x02\x02\x02\u0B38\u0B3B\x03\x02\x02\x02\u0B39" +
		"\u0B37\x03\x02\x02\x02\u0B39\u0B3A\x03\x02\x02\x02\u0B3A\xD1\x03\x02\x02" +
		"\x02\u0B3B\u0B39\x03\x02\x02\x02\u0B3C\u0B3D\x07`\x02\x02\u0B3D\u0B3E" +
		"\x05\u01A4\xD3\x02\u0B3E\u0B42\x07\xCE\x02\x02\u0B3F\u0B41\x07\xE7\x02" +
		"\x02\u0B40\u0B3F\x03\x02\x02\x02\u0B41\u0B44\x03\x02\x02\x02\u0B42\u0B40" +
		"\x03\x02\x02\x02\u0B42\u0B43\x03\x02\x02\x02\u0B43\u0B4E\x03\x02\x02\x02" +
		"\u0B44\u0B42\x03\x02\x02\x02\u0B45\u0B49\x05T+\x02\u0B46\u0B48\x07\xE7" +
		"\x02\x02\u0B47\u0B46\x03\x02\x02\x02\u0B48\u0B4B\x03\x02\x02\x02\u0B49" +
		"\u0B47\x03\x02\x02\x02\u0B49\u0B4A\x03\x02\x02\x02\u0B4A\u0B4D\x03\x02" +
		"\x02\x02\u0B4B\u0B49\x03\x02\x02\x02\u0B4C\u0B45\x03\x02\x02\x02\u0B4D" +
		"\u0B50\x03\x02\x02\x02\u0B4E\u0B4C\x03\x02\x02\x02\u0B4E\u0B4F\x03\x02" +
		"\x02\x02\u0B4F\xD3\x03\x02\x02\x02\u0B50\u0B4E\x03\x02\x02\x02\u0B51\u0B52" +
		"\x07a\x02\x02\u0B52\u0B53\x05\u01A4\xD3\x02\u0B53\u0B57\x07\xCE\x02\x02" +
		"\u0B54\u0B56\x07\xE7\x02\x02\u0B55\u0B54\x03\x02\x02\x02\u0B56\u0B59\x03" +
		"\x02\x02\x02\u0B57\u0B55\x03\x02\x02\x02\u0B57\u0B58\x03\x02\x02\x02\u0B58" +
		"\u0B63\x03\x02\x02\x02\u0B59\u0B57\x03\x02\x02\x02\u0B5A\u0B5E\x05T+\x02" +
		"\u0B5B\u0B5D\x07\xE7\x02\x02\u0B5C\u0B5B\x03\x02\x02\x02\u0B5D\u0B60\x03" +
		"\x02\x02\x02\u0B5E\u0B5C\x03\x02\x02\x02\u0B5E\u0B5F\x03\x02\x02\x02\u0B5F" +
		"\u0B62\x03\x02\x02\x02\u0B60\u0B5E\x03\x02\x02\x02\u0B61\u0B5A\x03\x02" +
		"\x02\x02\u0B62\u0B65\x03\x02\x02\x02\u0B63\u0B61\x03\x02\x02\x02\u0B63" +
		"\u0B64\x03\x02\x02\x02\u0B64\xD5\x03\x02\x02\x02\u0B65\u0B63\x03\x02\x02" +
		"\x02\u0B66\u0B67\x07b\x02\x02\u0B67\u0B68\x05\u01A4\xD3\x02\u0B68\u0B6C" +
		"\x07\xCE\x02\x02\u0B69\u0B6B\x07\xE7\x02\x02\u0B6A\u0B69\x03\x02\x02\x02" +
		"\u0B6B\u0B6E\x03\x02\x02\x02\u0B6C\u0B6A\x03\x02\x02\x02\u0B6C\u0B6D\x03" +
		"\x02\x02\x02\u0B6D\u0B78\x03\x02\x02\x02\u0B6E\u0B6C\x03\x02\x02\x02\u0B6F" +
		"\u0B73\x05T+\x02\u0B70\u0B72\x07\xE7\x02\x02\u0B71\u0B70\x03\x02\x02\x02" +
		"\u0B72\u0B75\x03\x02\x02\x02\u0B73\u0B71\x03\x02\x02\x02\u0B73\u0B74\x03" +
		"\x02\x02\x02\u0B74\u0B77\x03\x02\x02\x02\u0B75\u0B73\x03\x02\x02\x02\u0B76" +
		"\u0B6F\x03\x02\x02\x02\u0B77\u0B7A\x03\x02\x02\x02\u0B78\u0B76\x03\x02" +
		"\x02\x02\u0B78\u0B79\x03\x02\x02\x02\u0B79\xD7\x03\x02\x02\x02\u0B7A\u0B78" +
		"\x03\x02\x02\x02\u0B7B\u0B7C\x07c\x02\x02\u0B7C\u0B7D\x05\u019E\xD0\x02" +
		"\u0B7D\u0B81\x07\xCE\x02\x02\u0B7E\u0B80\x07\xE7\x02\x02\u0B7F\u0B7E\x03" +
		"\x02\x02\x02\u0B80\u0B83\x03\x02\x02\x02\u0B81\u0B7F\x03\x02\x02\x02\u0B81" +
		"\u0B82\x03\x02\x02\x02\u0B82\u0B8D\x03\x02\x02\x02\u0B83\u0B81\x03\x02" +
		"\x02\x02\u0B84\u0B88\x05T+\x02\u0B85\u0B87\x07\xE7\x02\x02\u0B86\u0B85" +
		"\x03\x02\x02\x02\u0B87\u0B8A\x03\x02\x02\x02\u0B88\u0B86\x03\x02\x02\x02" +
		"\u0B88\u0B89\x03\x02\x02\x02\u0B89\u0B8C\x03\x02\x02\x02\u0B8A\u0B88\x03" +
		"\x02\x02\x02\u0B8B\u0B84\x03\x02\x02\x02\u0B8C\u0B8F\x03\x02\x02\x02\u0B8D" +
		"\u0B8B\x03\x02\x02\x02\u0B8D\u0B8E\x03\x02\x02\x02\u0B8E\xD9\x03\x02\x02" +
		"\x02\u0B8F\u0B8D\x03\x02\x02\x02\u0B90\u0B91\x07d\x02\x02\u0B91\u0B92" +
		"\x05\u019E\xD0\x02\u0B92\u0B96\x07\xCE\x02\x02\u0B93\u0B95\x07\xE7\x02" +
		"\x02\u0B94\u0B93\x03\x02\x02\x02\u0B95\u0B98\x03\x02\x02\x02\u0B96\u0B94" +
		"\x03\x02\x02\x02\u0B96\u0B97\x03\x02\x02\x02\u0B97\u0BA2\x03\x02\x02\x02" +
		"\u0B98\u0B96\x03\x02\x02\x02\u0B99\u0B9D\x05T+\x02\u0B9A\u0B9C\x07\xE7" +
		"\x02\x02\u0B9B\u0B9A\x03\x02\x02\x02\u0B9C\u0B9F\x03\x02\x02\x02\u0B9D" +
		"\u0B9B\x03\x02\x02\x02\u0B9D\u0B9E\x03\x02\x02\x02\u0B9E\u0BA1\x03\x02" +
		"\x02\x02\u0B9F\u0B9D\x03\x02\x02\x02\u0BA0\u0B99\x03\x02\x02\x02\u0BA1" +
		"\u0BA4\x03\x02\x02\x02\u0BA2\u0BA0\x03\x02\x02\x02\u0BA2\u0BA3\x03\x02" +
		"\x02\x02\u0BA3\xDB\x03\x02\x02\x02\u0BA4\u0BA2\x03\x02\x02\x02\u0BA5\u0BA6" +
		"\x07e\x02\x02\u0BA6\u0BA7\x05\u019E\xD0\x02\u0BA7\u0BAB\x07\xCE\x02\x02" +
		"\u0BA8\u0BAA\x07\xE7\x02\x02\u0BA9\u0BA8\x03\x02\x02\x02\u0BAA\u0BAD\x03" +
		"\x02\x02\x02\u0BAB\u0BA9\x03\x02\x02\x02\u0BAB\u0BAC\x03\x02\x02\x02\u0BAC" +
		"\u0BB7\x03\x02\x02\x02\u0BAD\u0BAB\x03\x02\x02\x02\u0BAE\u0BB2\x05T+\x02" +
		"\u0BAF\u0BB1\x07\xE7\x02\x02\u0BB0\u0BAF\x03\x02\x02\x02\u0BB1\u0BB4\x03" +
		"\x02\x02\x02\u0BB2\u0BB0\x03\x02\x02\x02\u0BB2\u0BB3\x03\x02\x02\x02\u0BB3" +
		"\u0BB6\x03\x02\x02\x02\u0BB4\u0BB2\x03\x02\x02\x02\u0BB5\u0BAE\x03\x02" +
		"\x02\x02\u0BB6\u0BB9\x03\x02\x02\x02\u0BB7\u0BB5\x03\x02\x02\x02\u0BB7" +
		"\u0BB8\x03\x02\x02\x02\u0BB8\xDD\x03\x02\x02\x02\u0BB9\u0BB7\x03\x02\x02" +
		"\x02\u0BBA\u0BBB\x07f\x02\x02\u0BBB\u0BBC\x05\u019E\xD0\x02\u0BBC\u0BC0" +
		"\x07\xCE\x02\x02\u0BBD\u0BBF\x07\xE7\x02\x02\u0BBE\u0BBD\x03\x02\x02\x02" +
		"\u0BBF\u0BC2\x03\x02\x02\x02\u0BC0\u0BBE\x03\x02\x02\x02\u0BC0\u0BC1\x03" +
		"\x02\x02\x02\u0BC1\u0BCC\x03\x02\x02\x02\u0BC2\u0BC0\x03\x02\x02\x02\u0BC3" +
		"\u0BC7\x05T+\x02\u0BC4\u0BC6\x07\xE7\x02\x02\u0BC5\u0BC4\x03\x02\x02\x02" +
		"\u0BC6\u0BC9\x03\x02\x02\x02\u0BC7\u0BC5\x03\x02\x02\x02\u0BC7\u0BC8\x03" +
		"\x02\x02\x02\u0BC8\u0BCB\x03\x02\x02\x02\u0BC9\u0BC7\x03\x02\x02\x02\u0BCA" +
		"\u0BC3\x03\x02\x02\x02\u0BCB\u0BCE\x03\x02\x02\x02\u0BCC\u0BCA\x03\x02" +
		"\x02\x02\u0BCC\u0BCD\x03\x02\x02\x02\u0BCD\xDF\x03\x02\x02\x02\u0BCE\u0BCC" +
		"\x03\x02\x02\x02\u0BCF\u0BD0\x07g\x02\x02\u0BD0\u0BD1\x05\u019E\xD0\x02" +
		"\u0BD1\u0BD5\x07\xCE\x02\x02\u0BD2\u0BD4\x07\xE7\x02\x02\u0BD3\u0BD2\x03" +
		"\x02\x02\x02\u0BD4\u0BD7\x03\x02\x02\x02\u0BD5\u0BD3\x03\x02\x02\x02\u0BD5" +
		"\u0BD6\x03\x02\x02\x02\u0BD6\u0BE1\x03\x02\x02\x02\u0BD7\u0BD5\x03\x02" +
		"\x02\x02\u0BD8\u0BDC\x05T+\x02\u0BD9\u0BDB\x07\xE7\x02\x02\u0BDA\u0BD9" +
		"\x03\x02\x02\x02\u0BDB\u0BDE\x03\x02\x02\x02\u0BDC\u0BDA\x03\x02\x02\x02" +
		"\u0BDC\u0BDD\x03\x02\x02\x02\u0BDD\u0BE0\x03\x02\x02\x02\u0BDE\u0BDC\x03" +
		"\x02\x02\x02\u0BDF\u0BD8\x03\x02\x02\x02\u0BE0\u0BE3\x03\x02\x02\x02\u0BE1" +
		"\u0BDF\x03\x02\x02\x02\u0BE1\u0BE2\x03\x02\x02\x02\u0BE2\xE1\x03\x02\x02" +
		"\x02\u0BE3\u0BE1\x03\x02\x02\x02\u0BE4\u0BE5\x07h\x02\x02\u0BE5\u0BE6" +
		"\x05\u019E\xD0\x02\u0BE6\u0BEA\x07\xCE\x02\x02\u0BE7\u0BE9\x07\xE7\x02" +
		"\x02\u0BE8\u0BE7\x03\x02\x02\x02\u0BE9\u0BEC\x03\x02\x02\x02\u0BEA\u0BE8" +
		"\x03\x02\x02\x02\u0BEA\u0BEB\x03\x02\x02\x02\u0BEB\u0BF6\x03\x02\x02\x02" +
		"\u0BEC\u0BEA\x03\x02\x02\x02\u0BED\u0BF1\x05T+\x02\u0BEE\u0BF0\x07\xE7" +
		"\x02\x02\u0BEF\u0BEE\x03\x02\x02\x02\u0BF0\u0BF3\x03\x02\x02\x02\u0BF1" +
		"\u0BEF\x03\x02\x02\x02\u0BF1\u0BF2\x03\x02\x02\x02\u0BF2\u0BF5\x03\x02" +
		"\x02\x02\u0BF3\u0BF1\x03\x02\x02\x02\u0BF4\u0BED\x03\x02\x02\x02\u0BF5" +
		"\u0BF8\x03\x02\x02\x02\u0BF6\u0BF4\x03\x02\x02\x02\u0BF6\u0BF7\x03\x02" +
		"\x02\x02\u0BF7\xE3\x03\x02\x02\x02\u0BF8\u0BF6\x03\x02\x02\x02\u0BF9\u0BFA" +
		"\x07i\x02\x02\u0BFA\u0BFB\x05\u019E\xD0\x02\u0BFB\u0BFF\x07\xCE\x02\x02" +
		"\u0BFC\u0BFE\x07\xE7\x02\x02\u0BFD\u0BFC\x03\x02\x02\x02\u0BFE\u0C01\x03" +
		"\x02\x02\x02\u0BFF\u0BFD\x03\x02\x02\x02\u0BFF\u0C00\x03\x02\x02\x02\u0C00" +
		"\u0C0B\x03\x02\x02\x02\u0C01\u0BFF\x03\x02\x02\x02\u0C02\u0C06\x05T+\x02" +
		"\u0C03\u0C05\x07\xE7\x02\x02\u0C04\u0C03\x03\x02\x02\x02\u0C05\u0C08\x03" +
		"\x02\x02\x02\u0C06\u0C04\x03\x02\x02\x02\u0C06\u0C07\x03\x02\x02\x02\u0C07" +
		"\u0C0A\x03\x02\x02\x02\u0C08\u0C06\x03\x02\x02\x02\u0C09\u0C02\x03\x02" +
		"\x02\x02\u0C0A\u0C0D\x03\x02\x02\x02\u0C0B\u0C09\x03\x02\x02\x02\u0C0B" +
		"\u0C0C\x03\x02\x02\x02\u0C0C\xE5\x03\x02\x02\x02\u0C0D\u0C0B\x03\x02\x02" +
		"\x02\u0C0E\u0C0F\x07j\x02\x02\u0C0F\u0C10\x05\u019E\xD0\x02\u0C10\u0C14" +
		"\x07\xCE\x02\x02\u0C11\u0C13\x07\xE7\x02\x02\u0C12\u0C11\x03\x02\x02\x02" +
		"\u0C13\u0C16\x03\x02\x02\x02\u0C14\u0C12\x03\x02\x02\x02\u0C14\u0C15\x03" +
		"\x02\x02\x02\u0C15\u0C20\x03\x02\x02\x02\u0C16\u0C14\x03\x02\x02\x02\u0C17" +
		"\u0C1B\x05T+\x02\u0C18\u0C1A\x07\xE7\x02\x02\u0C19\u0C18\x03\x02\x02\x02" +
		"\u0C1A\u0C1D\x03\x02\x02\x02\u0C1B\u0C19\x03\x02\x02\x02\u0C1B\u0C1C\x03" +
		"\x02\x02\x02\u0C1C\u0C1F\x03\x02\x02\x02\u0C1D\u0C1B\x03\x02\x02\x02\u0C1E" +
		"\u0C17\x03\x02\x02\x02\u0C1F\u0C22\x03\x02\x02\x02\u0C20\u0C1E\x03\x02" +
		"\x02\x02\u0C20\u0C21\x03\x02\x02\x02\u0C21\xE7\x03\x02\x02\x02\u0C22\u0C20" +
		"\x03\x02\x02\x02\u0C23\u0C24\x07k\x02\x02\u0C24\u0C25\x05\u019E\xD0\x02" +
		"\u0C25\u0C29\x07\xCE\x02\x02\u0C26\u0C28\x07\xE7\x02\x02\u0C27\u0C26\x03" +
		"\x02\x02\x02\u0C28\u0C2B\x03\x02\x02\x02\u0C29\u0C27\x03\x02\x02\x02\u0C29" +
		"\u0C2A\x03\x02\x02\x02\u0C2A\u0C35\x03\x02\x02\x02\u0C2B\u0C29\x03\x02" +
		"\x02\x02\u0C2C\u0C30\x05T+\x02\u0C2D\u0C2F\x07\xE7\x02\x02\u0C2E\u0C2D" +
		"\x03\x02\x02\x02\u0C2F\u0C32\x03\x02\x02\x02\u0C30\u0C2E\x03\x02\x02\x02" +
		"\u0C30\u0C31\x03\x02\x02\x02\u0C31\u0C34\x03\x02\x02\x02\u0C32\u0C30\x03" +
		"\x02\x02\x02\u0C33\u0C2C\x03\x02\x02\x02\u0C34\u0C37\x03\x02\x02\x02\u0C35" +
		"\u0C33\x03\x02\x02\x02\u0C35\u0C36\x03\x02\x02\x02\u0C36\xE9\x03\x02\x02" +
		"\x02\u0C37\u0C35\x03\x02\x02\x02\u0C38\u0C39\x07l\x02\x02\u0C39\u0C3A" +
		"\x05\u019E\xD0\x02\u0C3A\u0C3E\x07\xCE\x02\x02\u0C3B\u0C3D\x07\xE7\x02" +
		"\x02\u0C3C\u0C3B\x03\x02\x02\x02\u0C3D\u0C40\x03\x02\x02\x02\u0C3E\u0C3C" +
		"\x03\x02\x02\x02\u0C3E\u0C3F\x03\x02\x02\x02\u0C3F\u0C4A\x03\x02\x02\x02" +
		"\u0C40\u0C3E\x03\x02\x02\x02\u0C41\u0C45\x05T+\x02\u0C42\u0C44\x07\xE7" +
		"\x02\x02\u0C43\u0C42\x03\x02\x02\x02\u0C44\u0C47\x03\x02\x02\x02\u0C45" +
		"\u0C43\x03\x02\x02\x02\u0C45\u0C46\x03\x02\x02\x02\u0C46\u0C49\x03\x02" +
		"\x02\x02\u0C47\u0C45\x03\x02\x02\x02\u0C48\u0C41\x03\x02\x02\x02\u0C49" +
		"\u0C4C\x03\x02\x02\x02\u0C4A\u0C48\x03\x02\x02\x02\u0C4A\u0C4B\x03\x02" +
		"\x02\x02\u0C4B\xEB\x03\x02\x02\x02\u0C4C\u0C4A\x03\x02\x02\x02\u0C4D\u0C4E" +
		"\x07m\x02\x02\u0C4E\u0C4F\x05\u019E\xD0\x02\u0C4F\u0C53\x07\xCE\x02\x02" +
		"\u0C50\u0C52\x07\xE7\x02\x02\u0C51\u0C50\x03\x02\x02\x02\u0C52\u0C55\x03" +
		"\x02\x02\x02\u0C53\u0C51\x03\x02\x02\x02\u0C53\u0C54\x03\x02\x02\x02\u0C54" +
		"\u0C5F\x03\x02\x02\x02\u0C55\u0C53\x03\x02\x02\x02\u0C56\u0C5A\x05T+\x02" +
		"\u0C57\u0C59\x07\xE7\x02\x02\u0C58\u0C57\x03\x02\x02\x02\u0C59\u0C5C\x03" +
		"\x02\x02\x02\u0C5A\u0C58\x03\x02\x02\x02\u0C5A\u0C5B\x03\x02\x02\x02\u0C5B" +
		"\u0C5E\x03\x02\x02\x02\u0C5C\u0C5A\x03\x02\x02\x02\u0C5D\u0C56\x03\x02" +
		"\x02\x02\u0C5E\u0C61\x03\x02\x02\x02\u0C5F\u0C5D\x03\x02\x02\x02\u0C5F" +
		"\u0C60\x03\x02\x02\x02\u0C60\xED\x03\x02\x02\x02\u0C61\u0C5F\x03\x02\x02" +
		"\x02\u0C62\u0C63\x07n\x02\x02\u0C63\u0C64\x05\u019E\xD0\x02\u0C64\u0C68" +
		"\x07\xCE\x02\x02\u0C65\u0C67\x07\xE7\x02\x02\u0C66\u0C65\x03\x02\x02\x02" +
		"\u0C67\u0C6A\x03\x02\x02\x02\u0C68\u0C66\x03\x02\x02\x02\u0C68\u0C69\x03" +
		"\x02\x02\x02\u0C69\u0C74\x03\x02\x02\x02\u0C6A\u0C68\x03\x02\x02\x02\u0C6B" +
		"\u0C6F\x05T+\x02\u0C6C\u0C6E\x07\xE7\x02\x02\u0C6D\u0C6C\x03\x02\x02\x02" +
		"\u0C6E\u0C71\x03";
	private static readonly _serializedATNSegment7: string =
		"\x02\x02\x02\u0C6F\u0C6D\x03\x02\x02\x02\u0C6F\u0C70\x03\x02\x02\x02\u0C70" +
		"\u0C73\x03\x02\x02\x02\u0C71\u0C6F\x03\x02\x02\x02\u0C72\u0C6B\x03\x02" +
		"\x02\x02\u0C73\u0C76\x03\x02\x02\x02\u0C74\u0C72\x03\x02\x02\x02\u0C74" +
		"\u0C75\x03\x02\x02\x02\u0C75\xEF\x03\x02\x02\x02\u0C76\u0C74\x03\x02\x02" +
		"\x02\u0C77\u0C78\x07o\x02\x02\u0C78\u0C79\x05\u019E\xD0\x02\u0C79\u0C7D" +
		"\x07\xCE\x02\x02\u0C7A\u0C7C\x07\xE7\x02\x02\u0C7B\u0C7A\x03\x02\x02\x02" +
		"\u0C7C\u0C7F\x03\x02\x02\x02\u0C7D\u0C7B\x03\x02\x02\x02\u0C7D\u0C7E\x03" +
		"\x02\x02\x02\u0C7E\u0C89\x03\x02\x02\x02\u0C7F\u0C7D\x03\x02\x02\x02\u0C80" +
		"\u0C84\x05T+\x02\u0C81\u0C83\x07\xE7\x02\x02\u0C82\u0C81\x03\x02\x02\x02" +
		"\u0C83\u0C86\x03\x02\x02\x02\u0C84\u0C82\x03\x02\x02\x02\u0C84\u0C85\x03" +
		"\x02\x02\x02\u0C85\u0C88\x03\x02\x02\x02\u0C86\u0C84\x03\x02\x02\x02\u0C87" +
		"\u0C80\x03\x02\x02\x02\u0C88\u0C8B\x03\x02\x02\x02\u0C89\u0C87\x03\x02" +
		"\x02\x02\u0C89\u0C8A\x03\x02\x02\x02\u0C8A\xF1\x03\x02\x02\x02\u0C8B\u0C89" +
		"\x03\x02\x02\x02\u0C8C\u0C8D\x07p\x02\x02\u0C8D\u0C8E\x05\u019E\xD0\x02" +
		"\u0C8E\u0C92\x07\xCE\x02\x02\u0C8F\u0C91\x07\xE7\x02\x02\u0C90\u0C8F\x03" +
		"\x02\x02\x02\u0C91\u0C94\x03\x02\x02\x02\u0C92\u0C90\x03\x02\x02\x02\u0C92" +
		"\u0C93\x03\x02\x02\x02\u0C93\u0C9E\x03\x02\x02\x02\u0C94\u0C92\x03\x02" +
		"\x02\x02\u0C95\u0C99\x05T+\x02\u0C96\u0C98\x07\xE7\x02\x02\u0C97\u0C96" +
		"\x03\x02\x02\x02\u0C98\u0C9B\x03\x02\x02\x02\u0C99\u0C97\x03\x02\x02\x02" +
		"\u0C99\u0C9A\x03\x02\x02\x02\u0C9A\u0C9D\x03\x02\x02\x02\u0C9B\u0C99\x03" +
		"\x02\x02\x02\u0C9C\u0C95\x03\x02\x02\x02\u0C9D\u0CA0\x03\x02\x02\x02\u0C9E" +
		"\u0C9C\x03\x02\x02\x02\u0C9E\u0C9F\x03\x02\x02\x02\u0C9F\xF3\x03\x02\x02" +
		"\x02\u0CA0\u0C9E\x03\x02\x02\x02\u0CA1\u0CA2\x07q\x02\x02\u0CA2\u0CA3" +
		"\x05\u019E\xD0\x02\u0CA3\u0CA7\x07\xCE\x02\x02\u0CA4\u0CA6\x07\xE7\x02" +
		"\x02\u0CA5\u0CA4\x03\x02\x02\x02\u0CA6\u0CA9\x03\x02\x02\x02\u0CA7\u0CA5" +
		"\x03\x02\x02\x02\u0CA7\u0CA8\x03\x02\x02\x02\u0CA8\u0CB3\x03\x02\x02\x02" +
		"\u0CA9\u0CA7\x03\x02\x02\x02\u0CAA\u0CAE\x05T+\x02\u0CAB\u0CAD\x07\xE7" +
		"\x02\x02\u0CAC\u0CAB\x03\x02\x02\x02\u0CAD\u0CB0\x03\x02\x02\x02\u0CAE" +
		"\u0CAC\x03\x02\x02\x02\u0CAE\u0CAF\x03\x02\x02\x02\u0CAF\u0CB2\x03\x02" +
		"\x02\x02\u0CB0\u0CAE\x03\x02\x02\x02\u0CB1\u0CAA\x03\x02\x02\x02\u0CB2" +
		"\u0CB5\x03\x02\x02\x02\u0CB3\u0CB1\x03\x02\x02\x02\u0CB3\u0CB4\x03\x02" +
		"\x02\x02\u0CB4\xF5\x03\x02\x02\x02\u0CB5\u0CB3\x03\x02\x02\x02\u0CB6\u0CB7" +
		"\x07r\x02\x02\u0CB7\u0CB8\x05\u019E\xD0\x02\u0CB8\u0CBC\x07\xCE\x02\x02" +
		"\u0CB9\u0CBB\x07\xE7\x02\x02\u0CBA\u0CB9\x03\x02\x02\x02\u0CBB\u0CBE\x03" +
		"\x02\x02\x02\u0CBC\u0CBA\x03\x02\x02\x02\u0CBC\u0CBD\x03\x02\x02\x02\u0CBD" +
		"\u0CC8\x03\x02\x02\x02\u0CBE\u0CBC\x03\x02\x02\x02\u0CBF\u0CC3\x05T+\x02" +
		"\u0CC0\u0CC2\x07\xE7\x02\x02\u0CC1\u0CC0\x03\x02\x02\x02\u0CC2\u0CC5\x03" +
		"\x02\x02\x02\u0CC3\u0CC1\x03\x02\x02\x02\u0CC3\u0CC4\x03\x02\x02\x02\u0CC4" +
		"\u0CC7\x03\x02\x02\x02\u0CC5\u0CC3\x03\x02\x02\x02\u0CC6\u0CBF\x03\x02" +
		"\x02\x02\u0CC7\u0CCA\x03\x02\x02\x02\u0CC8\u0CC6\x03\x02\x02\x02\u0CC8" +
		"\u0CC9\x03\x02\x02\x02\u0CC9\xF7\x03\x02\x02\x02\u0CCA\u0CC8\x03\x02\x02" +
		"\x02\u0CCB\u0CCC\x07s\x02\x02\u0CCC\u0CCD\x05\u019E\xD0\x02\u0CCD\u0CD1" +
		"\x07\xCE\x02\x02\u0CCE\u0CD0\x07\xE7\x02\x02\u0CCF\u0CCE\x03\x02\x02\x02" +
		"\u0CD0\u0CD3\x03\x02\x02\x02\u0CD1\u0CCF\x03\x02\x02\x02\u0CD1\u0CD2\x03" +
		"\x02\x02\x02\u0CD2\u0CDD\x03\x02\x02\x02\u0CD3\u0CD1\x03\x02\x02\x02\u0CD4" +
		"\u0CD8\x05T+\x02\u0CD5\u0CD7\x07\xE7\x02\x02\u0CD6\u0CD5\x03\x02\x02\x02" +
		"\u0CD7\u0CDA\x03\x02\x02\x02\u0CD8\u0CD6\x03\x02\x02\x02\u0CD8\u0CD9\x03" +
		"\x02\x02\x02\u0CD9\u0CDC\x03\x02\x02\x02\u0CDA\u0CD8\x03\x02\x02\x02\u0CDB" +
		"\u0CD4\x03\x02\x02\x02\u0CDC\u0CDF\x03\x02\x02\x02\u0CDD\u0CDB\x03\x02" +
		"\x02\x02\u0CDD\u0CDE\x03\x02\x02\x02\u0CDE\xF9\x03\x02\x02\x02\u0CDF\u0CDD" +
		"\x03\x02\x02\x02\u0CE0\u0CE1\x07t\x02\x02\u0CE1\u0CE2\x05\u019E\xD0\x02" +
		"\u0CE2\u0CE6\x07\xCE\x02\x02\u0CE3\u0CE5\x07\xE7\x02\x02\u0CE4\u0CE3\x03" +
		"\x02\x02\x02\u0CE5\u0CE8\x03\x02\x02\x02\u0CE6\u0CE4\x03\x02\x02\x02\u0CE6" +
		"\u0CE7\x03\x02\x02\x02\u0CE7\u0CF2\x03\x02\x02\x02\u0CE8\u0CE6\x03\x02" +
		"\x02\x02\u0CE9\u0CED\x05T+\x02\u0CEA\u0CEC\x07\xE7\x02\x02\u0CEB\u0CEA" +
		"\x03\x02\x02\x02\u0CEC\u0CEF\x03\x02\x02\x02\u0CED\u0CEB\x03\x02\x02\x02" +
		"\u0CED\u0CEE\x03\x02\x02\x02\u0CEE\u0CF1\x03\x02\x02\x02\u0CEF\u0CED\x03" +
		"\x02\x02\x02\u0CF0\u0CE9\x03\x02\x02\x02\u0CF1\u0CF4\x03\x02\x02\x02\u0CF2" +
		"\u0CF0\x03\x02\x02\x02\u0CF2\u0CF3\x03\x02\x02\x02\u0CF3\xFB\x03\x02\x02" +
		"\x02\u0CF4\u0CF2\x03\x02\x02\x02\u0CF5\u0CF6\x07u\x02\x02\u0CF6\u0CF7" +
		"\x05\u019E\xD0\x02\u0CF7\u0CFB\x07\xCE\x02\x02\u0CF8\u0CFA\x07\xE7\x02" +
		"\x02\u0CF9\u0CF8\x03\x02\x02\x02\u0CFA\u0CFD\x03\x02\x02\x02\u0CFB\u0CF9" +
		"\x03\x02\x02\x02\u0CFB\u0CFC\x03\x02\x02\x02\u0CFC\u0D07\x03\x02\x02\x02" +
		"\u0CFD\u0CFB\x03\x02\x02\x02\u0CFE\u0D02\x05T+\x02\u0CFF\u0D01\x07\xE7" +
		"\x02\x02\u0D00\u0CFF\x03\x02\x02\x02\u0D01\u0D04\x03\x02\x02\x02\u0D02" +
		"\u0D00\x03\x02\x02\x02\u0D02\u0D03\x03\x02\x02\x02\u0D03\u0D06\x03\x02" +
		"\x02\x02\u0D04\u0D02\x03\x02\x02\x02\u0D05\u0CFE\x03\x02\x02\x02\u0D06" +
		"\u0D09\x03\x02\x02\x02\u0D07\u0D05\x03\x02\x02\x02\u0D07\u0D08\x03\x02" +
		"\x02\x02\u0D08\xFD\x03\x02\x02\x02\u0D09\u0D07\x03\x02\x02\x02\u0D0A\u0D0B" +
		"\x07v\x02\x02\u0D0B\u0D0C\x05\u019E\xD0\x02\u0D0C\u0D10\x07\xCE\x02\x02" +
		"\u0D0D\u0D0F\x07\xE7\x02\x02\u0D0E\u0D0D\x03\x02\x02\x02\u0D0F\u0D12\x03" +
		"\x02\x02\x02\u0D10\u0D0E\x03\x02\x02\x02\u0D10\u0D11\x03\x02\x02\x02\u0D11" +
		"\u0D1C\x03\x02\x02\x02\u0D12\u0D10\x03\x02\x02\x02\u0D13\u0D17\x05T+\x02" +
		"\u0D14\u0D16\x07\xE7\x02\x02\u0D15\u0D14\x03\x02\x02\x02\u0D16\u0D19\x03" +
		"\x02\x02\x02\u0D17\u0D15\x03\x02\x02\x02\u0D17\u0D18\x03\x02\x02\x02\u0D18" +
		"\u0D1B\x03\x02\x02\x02\u0D19\u0D17\x03\x02\x02\x02\u0D1A\u0D13\x03\x02" +
		"\x02\x02\u0D1B\u0D1E\x03\x02\x02\x02\u0D1C\u0D1A\x03\x02\x02\x02\u0D1C" +
		"\u0D1D\x03\x02\x02\x02\u0D1D\xFF\x03\x02\x02\x02\u0D1E\u0D1C\x03\x02\x02" +
		"\x02\u0D1F\u0D20\x07w\x02\x02\u0D20\u0D21\x05\u019E\xD0\x02\u0D21\u0D25" +
		"\x07\xCE\x02\x02\u0D22\u0D24\x07\xE7\x02\x02\u0D23\u0D22\x03\x02\x02\x02" +
		"\u0D24\u0D27\x03\x02\x02\x02\u0D25\u0D23\x03\x02\x02\x02\u0D25\u0D26\x03" +
		"\x02\x02\x02\u0D26\u0D31\x03\x02\x02\x02\u0D27\u0D25\x03\x02\x02\x02\u0D28" +
		"\u0D2C\x05T+\x02\u0D29\u0D2B\x07\xE7\x02\x02\u0D2A\u0D29\x03\x02\x02\x02" +
		"\u0D2B\u0D2E\x03\x02\x02\x02\u0D2C\u0D2A\x03\x02\x02\x02\u0D2C\u0D2D\x03" +
		"\x02\x02\x02\u0D2D\u0D30\x03\x02\x02\x02\u0D2E\u0D2C\x03\x02\x02\x02\u0D2F" +
		"\u0D28\x03\x02\x02\x02\u0D30\u0D33\x03\x02\x02\x02\u0D31\u0D2F\x03\x02" +
		"\x02\x02\u0D31\u0D32\x03\x02\x02\x02\u0D32\u0101\x03\x02\x02\x02\u0D33" +
		"\u0D31\x03\x02\x02\x02\u0D34\u0D35\x07x\x02\x02\u0D35\u0D36\x05\u019E" +
		"\xD0\x02\u0D36\u0D3A\x07\xCE\x02\x02\u0D37\u0D39\x07\xE7\x02\x02\u0D38" +
		"\u0D37\x03\x02\x02\x02\u0D39\u0D3C\x03\x02\x02\x02\u0D3A\u0D38\x03\x02" +
		"\x02\x02\u0D3A\u0D3B\x03\x02\x02\x02\u0D3B\u0D46\x03\x02\x02\x02\u0D3C" +
		"\u0D3A\x03\x02\x02\x02\u0D3D\u0D41\x05T+\x02\u0D3E\u0D40\x07\xE7\x02\x02" +
		"\u0D3F\u0D3E\x03\x02\x02\x02\u0D40\u0D43\x03\x02\x02\x02\u0D41\u0D3F\x03" +
		"\x02\x02\x02\u0D41\u0D42\x03\x02\x02\x02\u0D42\u0D45\x03\x02\x02\x02\u0D43" +
		"\u0D41\x03\x02\x02\x02\u0D44\u0D3D\x03\x02\x02\x02\u0D45\u0D48\x03\x02" +
		"\x02\x02\u0D46\u0D44\x03\x02\x02\x02\u0D46\u0D47\x03\x02\x02\x02\u0D47" +
		"\u0103\x03\x02\x02\x02\u0D48\u0D46\x03\x02\x02\x02\u0D49\u0D4A\x07y\x02" +
		"\x02\u0D4A\u0D4B\x05\u019E\xD0\x02\u0D4B\u0D4F\x07\xCE\x02\x02\u0D4C\u0D4E" +
		"\x07\xE7\x02\x02\u0D4D\u0D4C\x03\x02\x02\x02\u0D4E\u0D51\x03\x02\x02\x02" +
		"\u0D4F\u0D4D\x03\x02\x02\x02\u0D4F\u0D50\x03\x02\x02\x02\u0D50\u0D5B\x03" +
		"\x02\x02\x02\u0D51\u0D4F\x03\x02\x02\x02\u0D52\u0D56\x05T+\x02\u0D53\u0D55" +
		"\x07\xE7\x02\x02\u0D54\u0D53\x03\x02\x02\x02\u0D55\u0D58\x03\x02\x02\x02" +
		"\u0D56\u0D54\x03\x02\x02\x02\u0D56\u0D57\x03\x02\x02\x02\u0D57\u0D5A\x03" +
		"\x02\x02\x02\u0D58\u0D56\x03\x02\x02\x02\u0D59\u0D52\x03\x02\x02\x02\u0D5A" +
		"\u0D5D\x03\x02\x02\x02\u0D5B\u0D59\x03\x02\x02\x02\u0D5B\u0D5C\x03\x02" +
		"\x02\x02\u0D5C\u0105\x03\x02\x02\x02\u0D5D\u0D5B\x03\x02\x02\x02\u0D5E" +
		"\u0D5F\x07z\x02\x02\u0D5F\u0D60\x05\u019E\xD0\x02\u0D60\u0D64\x07\xCE" +
		"\x02\x02\u0D61\u0D63\x07\xE7\x02\x02\u0D62\u0D61\x03\x02\x02\x02\u0D63" +
		"\u0D66\x03\x02\x02\x02\u0D64\u0D62\x03\x02\x02\x02\u0D64\u0D65\x03\x02" +
		"\x02\x02\u0D65\u0D70\x03\x02\x02\x02\u0D66\u0D64\x03\x02\x02\x02\u0D67" +
		"\u0D6B\x05T+\x02\u0D68\u0D6A\x07\xE7\x02\x02\u0D69\u0D68\x03\x02\x02\x02" +
		"\u0D6A\u0D6D\x03\x02\x02\x02\u0D6B\u0D69\x03\x02\x02\x02\u0D6B\u0D6C\x03" +
		"\x02\x02\x02\u0D6C\u0D6F\x03\x02\x02\x02\u0D6D\u0D6B\x03\x02\x02\x02\u0D6E" +
		"\u0D67\x03\x02\x02\x02\u0D6F\u0D72\x03\x02\x02\x02\u0D70\u0D6E\x03\x02" +
		"\x02\x02\u0D70\u0D71\x03\x02\x02\x02\u0D71\u0107\x03\x02\x02\x02\u0D72" +
		"\u0D70\x03\x02\x02\x02\u0D73\u0D74\x07{\x02\x02\u0D74\u0D75\x05\u019E" +
		"\xD0\x02\u0D75\u0D79\x07\xCE\x02\x02\u0D76\u0D78\x07\xE7\x02\x02\u0D77" +
		"\u0D76\x03\x02\x02\x02\u0D78\u0D7B\x03\x02\x02\x02\u0D79\u0D77\x03\x02" +
		"\x02\x02\u0D79\u0D7A\x03\x02\x02\x02\u0D7A\u0D85\x03\x02\x02\x02\u0D7B" +
		"\u0D79\x03\x02\x02\x02\u0D7C\u0D80\x05T+\x02\u0D7D\u0D7F\x07\xE7\x02\x02" +
		"\u0D7E\u0D7D\x03\x02\x02\x02\u0D7F\u0D82\x03\x02\x02\x02\u0D80\u0D7E\x03" +
		"\x02\x02\x02\u0D80\u0D81\x03\x02\x02\x02\u0D81\u0D84\x03\x02\x02\x02\u0D82" +
		"\u0D80\x03\x02\x02\x02\u0D83\u0D7C\x03\x02\x02\x02\u0D84\u0D87\x03\x02" +
		"\x02\x02\u0D85\u0D83\x03\x02\x02\x02\u0D85\u0D86\x03\x02\x02\x02\u0D86" +
		"\u0109\x03\x02\x02\x02\u0D87\u0D85\x03\x02\x02\x02\u0D88\u0D89\x07|\x02" +
		"\x02\u0D89\u0D8A\x05\u019E\xD0\x02\u0D8A\u0D8E\x07\xCE\x02\x02\u0D8B\u0D8D" +
		"\x07\xE7\x02\x02\u0D8C\u0D8B\x03\x02\x02\x02\u0D8D\u0D90\x03\x02\x02\x02" +
		"\u0D8E\u0D8C\x03\x02\x02\x02\u0D8E\u0D8F\x03\x02\x02\x02\u0D8F\u0D9A\x03" +
		"\x02\x02\x02\u0D90\u0D8E\x03\x02\x02\x02\u0D91\u0D95\x05T+\x02\u0D92\u0D94" +
		"\x07\xE7\x02\x02\u0D93\u0D92\x03\x02\x02\x02\u0D94\u0D97\x03\x02\x02\x02" +
		"\u0D95\u0D93\x03\x02\x02\x02\u0D95\u0D96\x03\x02\x02\x02\u0D96\u0D99\x03" +
		"\x02\x02\x02\u0D97\u0D95\x03\x02\x02\x02\u0D98\u0D91\x03\x02\x02\x02\u0D99" +
		"\u0D9C\x03\x02\x02\x02\u0D9A\u0D98\x03\x02\x02\x02\u0D9A\u0D9B\x03\x02" +
		"\x02\x02\u0D9B\u010B\x03\x02\x02\x02\u0D9C\u0D9A\x03\x02\x02\x02\u0D9D" +
		"\u0D9E\x07}\x02\x02\u0D9E\u0D9F\x05\u019E\xD0\x02\u0D9F\u0DA3\x07\xCE" +
		"\x02\x02\u0DA0\u0DA2\x07\xE7\x02\x02\u0DA1\u0DA0\x03\x02\x02\x02\u0DA2" +
		"\u0DA5\x03\x02\x02\x02\u0DA3\u0DA1\x03\x02\x02\x02\u0DA3\u0DA4\x03\x02" +
		"\x02\x02\u0DA4\u0DAF\x03\x02\x02\x02\u0DA5\u0DA3\x03\x02\x02\x02\u0DA6" +
		"\u0DAA\x05T+\x02\u0DA7\u0DA9\x07\xE7\x02\x02\u0DA8\u0DA7\x03\x02\x02\x02" +
		"\u0DA9\u0DAC\x03\x02\x02\x02\u0DAA\u0DA8\x03\x02\x02\x02\u0DAA\u0DAB\x03" +
		"\x02\x02\x02\u0DAB\u0DAE\x03\x02\x02\x02\u0DAC\u0DAA\x03\x02\x02\x02\u0DAD" +
		"\u0DA6\x03\x02\x02\x02\u0DAE\u0DB1\x03\x02\x02\x02\u0DAF\u0DAD\x03\x02" +
		"\x02\x02\u0DAF\u0DB0\x03\x02\x02\x02\u0DB0\u010D\x03\x02\x02\x02\u0DB1" +
		"\u0DAF\x03\x02\x02\x02\u0DB2\u0DB3\x07~\x02\x02\u0DB3\u0DB4\x05\u019E" +
		"\xD0\x02\u0DB4\u0DB8\x07\xCE\x02\x02\u0DB5\u0DB7\x07\xE7\x02\x02\u0DB6" +
		"\u0DB5\x03\x02\x02\x02\u0DB7\u0DBA\x03\x02\x02\x02\u0DB8\u0DB6\x03\x02" +
		"\x02\x02\u0DB8\u0DB9\x03\x02\x02\x02\u0DB9\u0DC4\x03\x02\x02\x02\u0DBA" +
		"\u0DB8\x03\x02\x02\x02\u0DBB\u0DBF\x05T+\x02\u0DBC\u0DBE\x07\xE7\x02\x02" +
		"\u0DBD\u0DBC\x03\x02\x02\x02\u0DBE\u0DC1\x03\x02\x02\x02\u0DBF\u0DBD\x03" +
		"\x02\x02\x02\u0DBF\u0DC0\x03\x02\x02\x02\u0DC0\u0DC3\x03\x02\x02\x02\u0DC1" +
		"\u0DBF\x03\x02\x02\x02\u0DC2\u0DBB\x03\x02\x02\x02\u0DC3\u0DC6\x03\x02" +
		"\x02\x02\u0DC4\u0DC2\x03\x02\x02\x02\u0DC4\u0DC5\x03\x02\x02\x02\u0DC5" +
		"\u010F\x03\x02\x02\x02\u0DC6\u0DC4\x03\x02\x02\x02\u0DC7\u0DC8\x07\x7F" +
		"\x02\x02\u0DC8\u0DC9\x05\u019E\xD0\x02\u0DC9\u0DCD\x07\xCE\x02\x02\u0DCA" +
		"\u0DCC\x07\xE7\x02\x02\u0DCB\u0DCA\x03\x02\x02\x02\u0DCC\u0DCF\x03\x02" +
		"\x02\x02\u0DCD\u0DCB\x03\x02\x02\x02\u0DCD\u0DCE\x03\x02\x02\x02\u0DCE" +
		"\u0DD9\x03\x02\x02\x02\u0DCF\u0DCD\x03\x02\x02\x02\u0DD0\u0DD4\x05T+\x02" +
		"\u0DD1\u0DD3\x07\xE7\x02\x02\u0DD2\u0DD1\x03\x02\x02\x02\u0DD3\u0DD6\x03" +
		"\x02\x02\x02\u0DD4\u0DD2\x03\x02\x02\x02\u0DD4\u0DD5\x03\x02\x02\x02\u0DD5" +
		"\u0DD8\x03\x02\x02\x02\u0DD6\u0DD4\x03\x02\x02\x02\u0DD7\u0DD0\x03\x02" +
		"\x02\x02\u0DD8\u0DDB\x03\x02\x02\x02\u0DD9\u0DD7\x03\x02\x02\x02\u0DD9" +
		"\u0DDA\x03\x02\x02\x02\u0DDA\u0111\x03\x02\x02\x02\u0DDB\u0DD9\x03\x02" +
		"\x02\x02\u0DDC\u0DDD\x07\x80\x02\x02\u0DDD\u0DDE\x05\u019E\xD0\x02\u0DDE" +
		"\u0DE2\x07\xCE\x02\x02\u0DDF\u0DE1\x07\xE7\x02\x02\u0DE0\u0DDF\x03\x02" +
		"\x02\x02\u0DE1\u0DE4\x03\x02\x02\x02\u0DE2\u0DE0\x03\x02\x02\x02\u0DE2" +
		"\u0DE3\x03\x02\x02\x02\u0DE3\u0DEE\x03\x02\x02\x02\u0DE4\u0DE2\x03\x02" +
		"\x02\x02\u0DE5\u0DE9\x05T+\x02\u0DE6\u0DE8\x07\xE7\x02\x02\u0DE7\u0DE6" +
		"\x03\x02\x02\x02\u0DE8\u0DEB\x03\x02\x02\x02\u0DE9\u0DE7\x03\x02\x02\x02" +
		"\u0DE9\u0DEA\x03\x02\x02\x02\u0DEA\u0DED\x03\x02\x02\x02\u0DEB\u0DE9\x03" +
		"\x02\x02\x02\u0DEC\u0DE5\x03\x02\x02\x02\u0DED\u0DF0\x03\x02\x02\x02\u0DEE" +
		"\u0DEC\x03\x02\x02\x02\u0DEE\u0DEF\x03\x02\x02\x02\u0DEF\u0113\x03\x02" +
		"\x02\x02\u0DF0\u0DEE\x03\x02\x02\x02\u0DF1\u0DF2\x07\x81\x02\x02\u0DF2" +
		"\u0DF3\x05\u019E\xD0\x02\u0DF3\u0DF7\x07\xCE\x02\x02\u0DF4\u0DF6\x07\xE7" +
		"\x02\x02\u0DF5\u0DF4\x03\x02\x02\x02\u0DF6\u0DF9\x03\x02\x02\x02\u0DF7" +
		"\u0DF5\x03\x02\x02\x02\u0DF7\u0DF8\x03\x02\x02\x02\u0DF8\u0E03\x03\x02" +
		"\x02\x02\u0DF9\u0DF7\x03\x02\x02\x02\u0DFA\u0DFE\x05T+\x02\u0DFB\u0DFD" +
		"\x07\xE7\x02\x02\u0DFC\u0DFB\x03\x02\x02\x02\u0DFD\u0E00\x03\x02\x02\x02" +
		"\u0DFE\u0DFC\x03\x02\x02\x02\u0DFE\u0DFF\x03\x02\x02\x02\u0DFF\u0E02\x03" +
		"\x02\x02\x02\u0E00\u0DFE\x03\x02\x02\x02\u0E01\u0DFA\x03\x02\x02\x02\u0E02" +
		"\u0E05\x03\x02\x02\x02\u0E03\u0E01\x03\x02\x02\x02\u0E03\u0E04\x03\x02" +
		"\x02\x02\u0E04\u0115\x03\x02\x02\x02\u0E05\u0E03\x03\x02\x02\x02\u0E06" +
		"\u0E07\x07\x82\x02\x02\u0E07\u0E08\x05\u019E\xD0\x02\u0E08\u0E0C\x07\xCE" +
		"\x02\x02\u0E09\u0E0B\x07\xE7\x02\x02\u0E0A\u0E09\x03\x02\x02\x02\u0E0B" +
		"\u0E0E\x03\x02\x02\x02\u0E0C\u0E0A\x03\x02\x02\x02\u0E0C\u0E0D\x03\x02" +
		"\x02\x02\u0E0D\u0E18\x03\x02\x02\x02\u0E0E\u0E0C\x03\x02\x02\x02\u0E0F" +
		"\u0E13\x05T+\x02\u0E10\u0E12\x07\xE7\x02\x02\u0E11\u0E10\x03\x02\x02\x02" +
		"\u0E12\u0E15\x03\x02\x02\x02\u0E13\u0E11\x03\x02\x02\x02\u0E13\u0E14\x03" +
		"\x02\x02\x02\u0E14\u0E17\x03\x02\x02\x02\u0E15\u0E13\x03\x02\x02\x02\u0E16" +
		"\u0E0F\x03\x02\x02\x02\u0E17\u0E1A\x03\x02\x02\x02\u0E18\u0E16\x03\x02" +
		"\x02\x02\u0E18\u0E19\x03\x02\x02\x02\u0E19\u0117\x03\x02\x02\x02\u0E1A" +
		"\u0E18\x03\x02\x02\x02\u0E1B\u0E1C\x07\x83\x02\x02\u0E1C\u0E1D\x05\u01A4" +
		"\xD3\x02\u0E1D\u0E21\x07\xCE\x02\x02\u0E1E\u0E20\x07\xE7\x02\x02\u0E1F" +
		"\u0E1E\x03\x02\x02\x02\u0E20\u0E23\x03\x02\x02\x02\u0E21\u0E1F\x03\x02" +
		"\x02\x02\u0E21\u0E22\x03\x02\x02\x02\u0E22\u0E2D\x03\x02\x02\x02\u0E23" +
		"\u0E21\x03\x02\x02\x02\u0E24\u0E28\x05T+\x02\u0E25\u0E27\x07\xE7\x02\x02" +
		"\u0E26\u0E25\x03\x02\x02\x02\u0E27\u0E2A\x03\x02\x02\x02\u0E28\u0E26\x03" +
		"\x02\x02\x02\u0E28\u0E29\x03\x02\x02\x02\u0E29\u0E2C\x03\x02\x02\x02\u0E2A" +
		"\u0E28\x03\x02\x02\x02\u0E2B\u0E24\x03\x02\x02\x02\u0E2C\u0E2F\x03\x02" +
		"\x02\x02\u0E2D\u0E2B\x03\x02\x02\x02\u0E2D\u0E2E\x03\x02\x02\x02\u0E2E" +
		"\u0119\x03\x02\x02\x02\u0E2F\u0E2D\x03\x02\x02\x02\u0E30\u0E31\x07\x84" +
		"\x02\x02\u0E31\u0E32\x05\u01A4\xD3\x02\u0E32\u0E36\x07\xCE\x02\x02\u0E33" +
		"\u0E35\x07\xE7\x02\x02\u0E34\u0E33\x03\x02\x02\x02\u0E35\u0E38\x03\x02" +
		"\x02\x02\u0E36\u0E34\x03\x02\x02\x02\u0E36\u0E37\x03\x02\x02\x02\u0E37" +
		"\u0E42\x03\x02\x02\x02\u0E38\u0E36\x03\x02\x02\x02\u0E39\u0E3D\x05T+\x02" +
		"\u0E3A\u0E3C\x07\xE7\x02\x02\u0E3B\u0E3A\x03\x02\x02\x02\u0E3C\u0E3F\x03" +
		"\x02\x02\x02\u0E3D\u0E3B\x03\x02\x02\x02\u0E3D\u0E3E\x03\x02\x02\x02\u0E3E" +
		"\u0E41\x03\x02\x02\x02\u0E3F\u0E3D\x03\x02\x02\x02\u0E40\u0E39\x03\x02" +
		"\x02\x02\u0E41\u0E44\x03\x02\x02\x02\u0E42\u0E40\x03\x02\x02\x02\u0E42" +
		"\u0E43\x03\x02\x02\x02\u0E43\u011B\x03\x02\x02\x02\u0E44\u0E42\x03\x02" +
		"\x02\x02\u0E45\u0E46\x07\x85\x02\x02\u0E46\u0E47\x05\u01A4\xD3\x02\u0E47" +
		"\u0E4B\x07\xCE\x02\x02\u0E48\u0E4A\x07\xE7\x02\x02\u0E49\u0E48\x03\x02" +
		"\x02\x02\u0E4A\u0E4D\x03\x02\x02\x02\u0E4B\u0E49\x03\x02\x02\x02\u0E4B" +
		"\u0E4C\x03\x02\x02\x02\u0E4C\u0E57\x03\x02\x02\x02\u0E4D\u0E4B\x03\x02" +
		"\x02\x02\u0E4E\u0E52\x05T+\x02\u0E4F\u0E51\x07\xE7\x02\x02\u0E50\u0E4F" +
		"\x03\x02\x02\x02\u0E51\u0E54\x03\x02\x02\x02\u0E52\u0E50\x03\x02\x02\x02" +
		"\u0E52\u0E53\x03\x02\x02\x02\u0E53\u0E56\x03\x02\x02\x02\u0E54\u0E52\x03" +
		"\x02\x02\x02\u0E55\u0E4E\x03\x02\x02\x02\u0E56\u0E59\x03\x02\x02\x02\u0E57" +
		"\u0E55\x03\x02\x02\x02\u0E57\u0E58\x03\x02\x02\x02\u0E58\u011D\x03\x02" +
		"\x02\x02\u0E59\u0E57\x03\x02\x02\x02\u0E5A\u0E5B\x07\x86\x02\x02\u0E5B" +
		"\u0E5C\x05\u01A4\xD3\x02\u0E5C\u0E60\x07\xCE\x02\x02\u0E5D\u0E5F\x07\xE7" +
		"\x02\x02\u0E5E\u0E5D\x03\x02\x02\x02\u0E5F\u0E62\x03\x02\x02\x02\u0E60" +
		"\u0E5E\x03\x02\x02\x02\u0E60\u0E61\x03\x02\x02\x02\u0E61\u0E6C\x03\x02" +
		"\x02\x02\u0E62\u0E60\x03\x02\x02\x02\u0E63\u0E67\x05T+\x02\u0E64\u0E66" +
		"\x07\xE7\x02\x02\u0E65\u0E64\x03\x02\x02\x02\u0E66\u0E69\x03\x02\x02\x02" +
		"\u0E67\u0E65\x03\x02\x02\x02\u0E67\u0E68\x03\x02\x02\x02\u0E68\u0E6B\x03" +
		"\x02\x02\x02\u0E69\u0E67\x03\x02\x02\x02\u0E6A\u0E63\x03\x02\x02\x02\u0E6B" +
		"\u0E6E\x03\x02\x02\x02\u0E6C\u0E6A\x03\x02\x02\x02\u0E6C\u0E6D\x03\x02" +
		"\x02\x02\u0E6D\u011F\x03\x02\x02\x02\u0E6E\u0E6C\x03\x02\x02\x02\u0E6F" +
		"\u0E70\x07\x8B\x02\x02\u0E70\u0E71\x05\u019E\xD0\x02\u0E71\u0E75\x07\xCE" +
		"\x02\x02\u0E72\u0E74\x07\xE7\x02\x02\u0E73\u0E72\x03\x02\x02\x02\u0E74" +
		"\u0E77\x03\x02\x02\x02\u0E75\u0E73\x03\x02\x02\x02\u0E75\u0E76\x03\x02" +
		"\x02\x02\u0E76\u0E81\x03\x02\x02\x02\u0E77\u0E75\x03\x02\x02\x02\u0E78" +
		"\u0E7C\x05T+\x02\u0E79\u0E7B\x07\xE7\x02\x02\u0E7A\u0E79\x03\x02\x02\x02" +
		"\u0E7B\u0E7E\x03\x02\x02\x02\u0E7C\u0E7A\x03\x02\x02\x02\u0E7C\u0E7D\x03" +
		"\x02\x02\x02\u0E7D\u0E80\x03\x02\x02\x02\u0E7E\u0E7C\x03\x02\x02\x02\u0E7F" +
		"\u0E78\x03\x02\x02\x02\u0E80\u0E83\x03\x02\x02\x02\u0E81\u0E7F\x03\x02" +
		"\x02\x02\u0E81\u0E82\x03\x02\x02\x02\u0E82\u0121\x03\x02\x02\x02\u0E83" +
		"\u0E81\x03\x02\x02\x02\u0E84\u0E85\x07\x8C\x02\x02\u0E85\u0E86\x05\u019E" +
		"\xD0\x02\u0E86\u0E8A\x07\xCE\x02\x02\u0E87\u0E89\x07\xE7\x02\x02\u0E88" +
		"\u0E87\x03\x02\x02\x02\u0E89\u0E8C\x03\x02\x02\x02\u0E8A\u0E88\x03\x02" +
		"\x02\x02\u0E8A\u0E8B\x03\x02\x02\x02\u0E8B\u0E96\x03\x02\x02\x02\u0E8C" +
		"\u0E8A\x03\x02\x02\x02\u0E8D\u0E91\x05T+\x02\u0E8E\u0E90\x07\xE7\x02\x02" +
		"\u0E8F\u0E8E\x03\x02\x02\x02\u0E90\u0E93\x03\x02\x02\x02\u0E91\u0E8F\x03" +
		"\x02\x02\x02\u0E91\u0E92\x03\x02\x02\x02\u0E92\u0E95\x03\x02\x02\x02\u0E93" +
		"\u0E91\x03\x02\x02\x02\u0E94\u0E8D\x03\x02\x02\x02\u0E95\u0E98\x03\x02" +
		"\x02\x02\u0E96\u0E94\x03\x02\x02\x02\u0E96\u0E97\x03\x02\x02\x02\u0E97" +
		"\u0123\x03\x02\x02\x02\u0E98\u0E96\x03\x02\x02\x02\u0E99\u0E9A\x07\x8D" +
		"\x02\x02\u0E9A\u0E9B\x05\u019E\xD0\x02\u0E9B\u0E9F\x07\xCE\x02\x02\u0E9C" +
		"\u0E9E\x07\xE7\x02\x02\u0E9D\u0E9C\x03\x02\x02\x02\u0E9E\u0EA1\x03\x02" +
		"\x02\x02\u0E9F\u0E9D\x03\x02\x02\x02\u0E9F\u0EA0\x03\x02\x02\x02\u0EA0" +
		"\u0EAB\x03\x02\x02\x02\u0EA1\u0E9F\x03\x02\x02\x02\u0EA2\u0EA6\x05T+\x02" +
		"\u0EA3\u0EA5\x07\xE7\x02\x02\u0EA4\u0EA3\x03\x02\x02\x02\u0EA5\u0EA8\x03" +
		"\x02\x02\x02\u0EA6\u0EA4\x03\x02\x02\x02\u0EA6\u0EA7\x03\x02\x02\x02\u0EA7" +
		"\u0EAA\x03\x02\x02\x02\u0EA8\u0EA6\x03\x02\x02\x02\u0EA9\u0EA2\x03\x02" +
		"\x02\x02\u0EAA\u0EAD\x03\x02\x02\x02\u0EAB\u0EA9\x03\x02\x02\x02\u0EAB" +
		"\u0EAC\x03\x02\x02\x02\u0EAC\u0125\x03\x02\x02\x02\u0EAD\u0EAB\x03\x02" +
		"\x02\x02\u0EAE\u0EAF\x07\x8F\x02\x02\u0EAF\u0EB0\x05\u019E\xD0\x02\u0EB0" +
		"\u0EB4\x07\xCE\x02\x02\u0EB1\u0EB3\x07\xE7\x02\x02\u0EB2\u0EB1\x03\x02" +
		"\x02\x02\u0EB3\u0EB6\x03\x02\x02\x02\u0EB4\u0EB2\x03\x02\x02\x02\u0EB4" +
		"\u0EB5\x03\x02\x02\x02\u0EB5\u0EC0\x03\x02\x02\x02\u0EB6\u0EB4\x03\x02" +
		"\x02\x02\u0EB7\u0EBB\x05T+\x02\u0EB8\u0EBA\x07\xE7\x02\x02\u0EB9\u0EB8" +
		"\x03\x02\x02\x02\u0EBA\u0EBD\x03\x02\x02\x02\u0EBB\u0EB9\x03\x02\x02\x02" +
		"\u0EBB\u0EBC\x03\x02\x02\x02\u0EBC\u0EBF\x03\x02\x02\x02\u0EBD\u0EBB\x03" +
		"\x02\x02\x02\u0EBE\u0EB7\x03\x02\x02\x02\u0EBF\u0EC2\x03\x02\x02\x02\u0EC0" +
		"\u0EBE\x03\x02\x02\x02\u0EC0\u0EC1\x03\x02\x02\x02\u0EC1\u0127\x03\x02" +
		"\x02\x02\u0EC2\u0EC0\x03\x02\x02\x02\u0EC3\u0EC4\x07\x8E\x02\x02\u0EC4" +
		"\u0EC5\x05\u01A4\xD3\x02\u0EC5\u0EC9\x07\xCE\x02\x02\u0EC6\u0EC8\x07\xE7" +
		"\x02\x02\u0EC7\u0EC6\x03\x02\x02\x02\u0EC8\u0ECB\x03\x02\x02\x02\u0EC9" +
		"\u0EC7\x03\x02\x02\x02\u0EC9\u0ECA\x03\x02\x02\x02\u0ECA\u0ED5\x03\x02" +
		"\x02\x02\u0ECB\u0EC9\x03\x02\x02\x02\u0ECC\u0ED0\x05T+\x02\u0ECD\u0ECF" +
		"\x07\xE7\x02\x02\u0ECE\u0ECD\x03\x02\x02\x02\u0ECF\u0ED2\x03\x02\x02\x02" +
		"\u0ED0\u0ECE\x03\x02\x02\x02\u0ED0\u0ED1\x03\x02\x02\x02\u0ED1\u0ED4\x03" +
		"\x02\x02\x02\u0ED2\u0ED0\x03\x02\x02\x02\u0ED3\u0ECC\x03\x02\x02\x02\u0ED4" +
		"\u0ED7\x03\x02\x02\x02\u0ED5\u0ED3\x03\x02\x02\x02\u0ED5\u0ED6\x03\x02" +
		"\x02\x02\u0ED6\u0129\x03\x02\x02\x02\u0ED7\u0ED5\x03\x02\x02\x02\u0ED8" +
		"\u0ED9\x07\x90\x02\x02\u0ED9\u0EDA\x05\u019E\xD0\x02\u0EDA\u0EDE\x07\xCE" +
		"\x02\x02\u0EDB\u0EDD\x07\xE7\x02\x02\u0EDC\u0EDB\x03\x02\x02\x02\u0EDD" +
		"\u0EE0\x03\x02\x02\x02\u0EDE\u0EDC\x03\x02\x02\x02\u0EDE\u0EDF\x03\x02" +
		"\x02\x02\u0EDF\u0EEA\x03\x02\x02\x02\u0EE0\u0EDE\x03\x02\x02\x02\u0EE1" +
		"\u0EE5\x05T+\x02\u0EE2\u0EE4\x07\xE7\x02\x02\u0EE3\u0EE2\x03\x02\x02\x02" +
		"\u0EE4\u0EE7\x03\x02\x02\x02\u0EE5\u0EE3\x03\x02\x02\x02\u0EE5\u0EE6\x03" +
		"\x02\x02\x02\u0EE6\u0EE9\x03\x02\x02\x02\u0EE7\u0EE5\x03\x02\x02\x02\u0EE8" +
		"\u0EE1\x03\x02\x02\x02\u0EE9\u0EEC\x03\x02\x02\x02\u0EEA\u0EE8\x03\x02" +
		"\x02\x02\u0EEA\u0EEB\x03\x02\x02\x02\u0EEB\u012B\x03\x02\x02\x02\u0EEC" +
		"\u0EEA\x03\x02\x02\x02\u0EED\u0EEE\x07\x91\x02\x02\u0EEE\u0EEF\x05\u019E" +
		"\xD0\x02\u0EEF\u0EF3\x07\xCE\x02\x02\u0EF0\u0EF2\x07\xE7\x02\x02\u0EF1" +
		"\u0EF0\x03\x02\x02\x02\u0EF2\u0EF5\x03\x02\x02\x02\u0EF3\u0EF1\x03\x02" +
		"\x02\x02\u0EF3\u0EF4\x03\x02\x02\x02\u0EF4\u0EFF\x03\x02\x02\x02\u0EF5" +
		"\u0EF3\x03\x02\x02\x02\u0EF6\u0EFA\x05T+\x02\u0EF7\u0EF9\x07\xE7\x02\x02" +
		"\u0EF8\u0EF7\x03\x02\x02\x02\u0EF9\u0EFC\x03\x02\x02\x02\u0EFA\u0EF8\x03" +
		"\x02\x02\x02\u0EFA\u0EFB\x03\x02\x02\x02\u0EFB\u0EFE\x03\x02\x02\x02\u0EFC" +
		"\u0EFA\x03\x02\x02\x02\u0EFD\u0EF6\x03\x02\x02\x02\u0EFE\u0F01\x03\x02" +
		"\x02\x02\u0EFF\u0EFD\x03\x02\x02\x02\u0EFF\u0F00\x03\x02\x02\x02\u0F00" +
		"\u012D\x03\x02\x02\x02\u0F01\u0EFF\x03\x02\x02\x02\u0F02\u0F03\x07\x92" +
		"\x02\x02\u0F03\u0F04\x05\u019E\xD0\x02\u0F04\u0F08\x07\xCE\x02\x02\u0F05" +
		"\u0F07\x07\xE7\x02\x02\u0F06\u0F05\x03\x02\x02\x02\u0F07\u0F0A\x03\x02" +
		"\x02\x02\u0F08\u0F06\x03\x02\x02\x02\u0F08\u0F09\x03\x02\x02\x02\u0F09" +
		"\u0F14\x03\x02\x02\x02\u0F0A\u0F08\x03\x02\x02\x02\u0F0B\u0F0F\x05T+\x02" +
		"\u0F0C\u0F0E\x07\xE7\x02\x02\u0F0D\u0F0C\x03\x02\x02\x02\u0F0E\u0F11\x03" +
		"\x02\x02\x02\u0F0F\u0F0D\x03\x02\x02\x02\u0F0F\u0F10\x03\x02\x02\x02\u0F10" +
		"\u0F13\x03\x02\x02\x02\u0F11\u0F0F\x03\x02\x02\x02\u0F12\u0F0B\x03\x02" +
		"\x02\x02\u0F13\u0F16\x03\x02\x02\x02\u0F14\u0F12\x03\x02\x02\x02\u0F14" +
		"\u0F15\x03\x02\x02\x02\u0F15\u012F\x03\x02\x02\x02\u0F16\u0F14\x03\x02" +
		"\x02\x02\u0F17\u0F18\x07\x93\x02\x02\u0F18\u0F19\x05\u019E\xD0\x02\u0F19" +
		"\u0F1D\x07\xCE\x02\x02\u0F1A\u0F1C\x07\xE7\x02\x02\u0F1B\u0F1A\x03\x02" +
		"\x02\x02\u0F1C\u0F1F\x03\x02\x02\x02\u0F1D\u0F1B\x03\x02\x02\x02\u0F1D" +
		"\u0F1E\x03\x02\x02\x02\u0F1E\u0F29\x03\x02\x02\x02\u0F1F\u0F1D\x03\x02" +
		"\x02\x02\u0F20\u0F24\x05T+\x02\u0F21\u0F23\x07\xE7\x02\x02\u0F22\u0F21" +
		"\x03\x02\x02\x02\u0F23\u0F26\x03\x02\x02\x02\u0F24\u0F22\x03\x02\x02\x02" +
		"\u0F24\u0F25\x03\x02\x02\x02\u0F25\u0F28\x03\x02\x02\x02\u0F26\u0F24\x03" +
		"\x02\x02\x02\u0F27\u0F20\x03\x02\x02\x02\u0F28\u0F2B\x03\x02\x02\x02\u0F29" +
		"\u0F27\x03\x02\x02\x02\u0F29\u0F2A\x03\x02\x02\x02\u0F2A\u0131\x03\x02" +
		"\x02\x02\u0F2B\u0F29\x03\x02\x02\x02\u0F2C\u0F2D\x07\x94\x02\x02\u0F2D" +
		"\u0F2E\x05\u019E\xD0\x02\u0F2E\u0F32\x07\xCE\x02\x02\u0F2F\u0F31\x07\xE7" +
		"\x02\x02\u0F30\u0F2F\x03\x02\x02\x02\u0F31\u0F34\x03\x02\x02\x02\u0F32" +
		"\u0F30\x03\x02\x02\x02\u0F32\u0F33\x03\x02\x02\x02\u0F33\u0F3E\x03\x02" +
		"\x02\x02\u0F34\u0F32\x03\x02\x02\x02\u0F35\u0F39\x05T+\x02\u0F36\u0F38" +
		"\x07\xE7\x02\x02\u0F37\u0F36\x03\x02\x02\x02\u0F38\u0F3B\x03\x02\x02\x02" +
		"\u0F39\u0F37\x03\x02\x02\x02\u0F39\u0F3A\x03\x02\x02\x02\u0F3A\u0F3D\x03" +
		"\x02\x02\x02\u0F3B\u0F39\x03\x02\x02\x02\u0F3C\u0F35\x03\x02\x02\x02\u0F3D" +
		"\u0F40\x03\x02\x02\x02\u0F3E\u0F3C\x03\x02\x02\x02\u0F3E\u0F3F\x03\x02" +
		"\x02\x02\u0F3F\u0133\x03\x02\x02\x02\u0F40\u0F3E\x03\x02\x02\x02\u0F41" +
		"\u0F42\x07\x95\x02\x02\u0F42\u0F43\x05\u019E\xD0\x02\u0F43\u0F47\x07\xCE" +
		"\x02\x02\u0F44\u0F46\x07\xE7\x02\x02\u0F45\u0F44\x03\x02\x02\x02\u0F46" +
		"\u0F49\x03\x02\x02\x02\u0F47\u0F45\x03\x02\x02";
	private static readonly _serializedATNSegment8: string =
		"\x02\u0F47\u0F48\x03\x02\x02\x02\u0F48\u0F53\x03\x02\x02\x02\u0F49\u0F47" +
		"\x03\x02\x02\x02\u0F4A\u0F4E\x05T+\x02\u0F4B\u0F4D\x07\xE7\x02\x02\u0F4C" +
		"\u0F4B\x03\x02\x02\x02\u0F4D\u0F50\x03\x02\x02\x02\u0F4E\u0F4C\x03\x02" +
		"\x02\x02\u0F4E\u0F4F\x03\x02\x02\x02\u0F4F\u0F52\x03\x02\x02\x02\u0F50" +
		"\u0F4E\x03\x02\x02\x02\u0F51\u0F4A\x03\x02\x02\x02\u0F52\u0F55\x03\x02" +
		"\x02\x02\u0F53\u0F51\x03\x02\x02\x02\u0F53\u0F54\x03\x02\x02\x02\u0F54" +
		"\u0135\x03\x02\x02\x02\u0F55\u0F53\x03\x02\x02\x02\u0F56\u0F57\x07\x18" +
		"\x02\x02\u0F57\u0F58\x05\u019E\xD0\x02\u0F58\u0F5C\x07\xCE\x02\x02\u0F59" +
		"\u0F5B\x07\xE7\x02\x02\u0F5A\u0F59\x03\x02\x02\x02\u0F5B\u0F5E\x03\x02" +
		"\x02\x02\u0F5C\u0F5A\x03\x02\x02\x02\u0F5C\u0F5D\x03\x02\x02\x02\u0F5D" +
		"\u0F68\x03\x02\x02\x02\u0F5E\u0F5C\x03\x02\x02\x02\u0F5F\u0F63\x05T+\x02" +
		"\u0F60\u0F62\x07\xE7\x02\x02\u0F61\u0F60\x03\x02\x02\x02\u0F62\u0F65\x03" +
		"\x02\x02\x02\u0F63\u0F61\x03\x02\x02\x02\u0F63\u0F64\x03\x02\x02\x02\u0F64" +
		"\u0F67\x03\x02\x02\x02\u0F65\u0F63\x03\x02\x02\x02\u0F66\u0F5F\x03\x02" +
		"\x02\x02\u0F67\u0F6A\x03\x02\x02\x02\u0F68\u0F66\x03\x02\x02\x02\u0F68" +
		"\u0F69\x03\x02\x02\x02\u0F69\u0137\x03\x02\x02\x02\u0F6A\u0F68\x03\x02" +
		"\x02\x02\u0F6B\u0F6C\x07\x96\x02\x02\u0F6C\u0F6D\x05\u019E\xD0\x02\u0F6D" +
		"\u0F71\x07\xCE\x02\x02\u0F6E\u0F70\x07\xE7\x02\x02\u0F6F\u0F6E\x03\x02" +
		"\x02\x02\u0F70\u0F73\x03\x02\x02\x02\u0F71\u0F6F\x03\x02\x02\x02\u0F71" +
		"\u0F72\x03\x02\x02\x02\u0F72\u0F7D\x03\x02\x02\x02\u0F73\u0F71\x03\x02" +
		"\x02\x02\u0F74\u0F78\x05T+\x02\u0F75\u0F77\x07\xE7\x02\x02\u0F76\u0F75" +
		"\x03\x02\x02\x02\u0F77\u0F7A\x03\x02\x02\x02\u0F78\u0F76\x03\x02\x02\x02" +
		"\u0F78\u0F79\x03\x02\x02\x02\u0F79\u0F7C\x03\x02\x02\x02\u0F7A\u0F78\x03" +
		"\x02\x02\x02\u0F7B\u0F74\x03\x02\x02\x02\u0F7C\u0F7F\x03\x02\x02\x02\u0F7D" +
		"\u0F7B\x03\x02\x02\x02\u0F7D\u0F7E\x03\x02\x02\x02\u0F7E\u0139\x03\x02" +
		"\x02\x02\u0F7F\u0F7D\x03\x02\x02\x02\u0F80\u0F81\x07\x97\x02\x02\u0F81" +
		"\u0F82\x05\u019E\xD0\x02\u0F82\u0F86\x07\xCE\x02\x02\u0F83\u0F85\x07\xE7" +
		"\x02\x02\u0F84\u0F83\x03\x02\x02\x02\u0F85\u0F88\x03\x02\x02\x02\u0F86" +
		"\u0F84\x03\x02\x02\x02\u0F86\u0F87\x03\x02\x02\x02\u0F87\u0F92\x03\x02" +
		"\x02\x02\u0F88\u0F86\x03\x02\x02\x02\u0F89\u0F8D\x05T+\x02\u0F8A\u0F8C" +
		"\x07\xE7\x02\x02\u0F8B\u0F8A\x03\x02\x02\x02\u0F8C\u0F8F\x03\x02\x02\x02" +
		"\u0F8D\u0F8B\x03\x02\x02\x02\u0F8D\u0F8E\x03\x02\x02\x02\u0F8E\u0F91\x03" +
		"\x02\x02\x02\u0F8F\u0F8D\x03\x02\x02\x02\u0F90\u0F89\x03\x02\x02\x02\u0F91" +
		"\u0F94\x03\x02\x02\x02\u0F92\u0F90\x03\x02\x02\x02\u0F92\u0F93\x03\x02" +
		"\x02\x02\u0F93\u013B\x03\x02\x02\x02\u0F94\u0F92\x03\x02\x02\x02\u0F95" +
		"\u0F96\x07\x98\x02\x02\u0F96\u0F97\x05\u019E\xD0\x02\u0F97\u0F9B\x07\xCE" +
		"\x02\x02\u0F98\u0F9A\x07\xE7\x02\x02\u0F99\u0F98\x03\x02\x02\x02\u0F9A" +
		"\u0F9D\x03\x02\x02\x02\u0F9B\u0F99\x03\x02\x02\x02\u0F9B\u0F9C\x03\x02" +
		"\x02\x02\u0F9C\u0FA7\x03\x02\x02\x02\u0F9D\u0F9B\x03\x02\x02\x02\u0F9E" +
		"\u0FA2\x05T+\x02\u0F9F\u0FA1\x07\xE7\x02\x02\u0FA0\u0F9F\x03\x02\x02\x02" +
		"\u0FA1\u0FA4\x03\x02\x02\x02\u0FA2\u0FA0\x03\x02\x02\x02\u0FA2\u0FA3\x03" +
		"\x02\x02\x02\u0FA3\u0FA6\x03\x02\x02\x02\u0FA4\u0FA2\x03\x02\x02\x02\u0FA5" +
		"\u0F9E\x03\x02\x02\x02\u0FA6\u0FA9\x03\x02\x02\x02\u0FA7\u0FA5\x03\x02" +
		"\x02\x02\u0FA7\u0FA8\x03\x02\x02\x02\u0FA8\u013D\x03\x02\x02\x02\u0FA9" +
		"\u0FA7\x03\x02\x02\x02\u0FAA\u0FAB\x07\x99\x02\x02\u0FAB\u0FAC\x05\u019E" +
		"\xD0\x02\u0FAC\u0FB0\x07\xCE\x02\x02\u0FAD\u0FAF\x07\xE7\x02\x02\u0FAE" +
		"\u0FAD\x03\x02\x02\x02\u0FAF\u0FB2\x03\x02\x02\x02\u0FB0\u0FAE\x03\x02" +
		"\x02\x02\u0FB0\u0FB1\x03\x02\x02\x02\u0FB1\u0FBC\x03\x02\x02\x02\u0FB2" +
		"\u0FB0\x03\x02\x02\x02\u0FB3\u0FB7\x05T+\x02\u0FB4\u0FB6\x07\xE7\x02\x02" +
		"\u0FB5\u0FB4\x03\x02\x02\x02\u0FB6\u0FB9\x03\x02\x02\x02\u0FB7\u0FB5\x03" +
		"\x02\x02\x02\u0FB7\u0FB8\x03\x02\x02\x02\u0FB8\u0FBB\x03\x02\x02\x02\u0FB9" +
		"\u0FB7\x03\x02\x02\x02\u0FBA\u0FB3\x03\x02\x02\x02\u0FBB\u0FBE\x03\x02" +
		"\x02\x02\u0FBC\u0FBA\x03\x02\x02\x02\u0FBC\u0FBD\x03\x02\x02\x02\u0FBD" +
		"\u013F\x03\x02\x02\x02\u0FBE\u0FBC\x03\x02\x02\x02\u0FBF\u0FC0\x07\x9A" +
		"\x02\x02\u0FC0\u0FC1\x05\u019E\xD0\x02\u0FC1\u0FC5\x07\xCE\x02\x02\u0FC2" +
		"\u0FC4\x07\xE7\x02\x02\u0FC3\u0FC2\x03\x02\x02\x02\u0FC4\u0FC7\x03\x02" +
		"\x02\x02\u0FC5\u0FC3\x03\x02\x02\x02\u0FC5\u0FC6\x03\x02\x02\x02\u0FC6" +
		"\u0FD1\x03\x02\x02\x02\u0FC7\u0FC5\x03\x02\x02\x02\u0FC8\u0FCC\x05T+\x02" +
		"\u0FC9\u0FCB\x07\xE7\x02\x02\u0FCA\u0FC9\x03\x02\x02\x02\u0FCB\u0FCE\x03" +
		"\x02\x02\x02\u0FCC\u0FCA\x03\x02\x02\x02\u0FCC\u0FCD\x03\x02\x02\x02\u0FCD" +
		"\u0FD0\x03\x02\x02\x02\u0FCE\u0FCC\x03\x02\x02\x02\u0FCF\u0FC8\x03\x02" +
		"\x02\x02\u0FD0\u0FD3\x03\x02\x02\x02\u0FD1\u0FCF\x03\x02\x02\x02\u0FD1" +
		"\u0FD2\x03\x02\x02\x02\u0FD2\u0141\x03\x02\x02\x02\u0FD3\u0FD1\x03\x02" +
		"\x02\x02\u0FD4\u0FD5\x07\x9B\x02\x02\u0FD5\u0FD6\x05\u019E\xD0\x02\u0FD6" +
		"\u0FDA\x07\xCE\x02\x02\u0FD7\u0FD9\x07\xE7\x02\x02\u0FD8\u0FD7\x03\x02" +
		"\x02\x02\u0FD9\u0FDC\x03\x02\x02\x02\u0FDA\u0FD8\x03\x02\x02\x02\u0FDA" +
		"\u0FDB\x03\x02\x02\x02\u0FDB\u0FE6\x03\x02\x02\x02\u0FDC\u0FDA\x03\x02" +
		"\x02\x02\u0FDD\u0FE1\x05T+\x02\u0FDE\u0FE0\x07\xE7\x02\x02\u0FDF\u0FDE" +
		"\x03\x02\x02\x02\u0FE0\u0FE3\x03\x02\x02\x02\u0FE1\u0FDF\x03\x02\x02\x02" +
		"\u0FE1\u0FE2\x03\x02\x02\x02\u0FE2\u0FE5\x03\x02\x02\x02\u0FE3\u0FE1\x03" +
		"\x02\x02\x02\u0FE4\u0FDD\x03\x02\x02\x02\u0FE5\u0FE8\x03\x02\x02\x02\u0FE6" +
		"\u0FE4\x03\x02\x02\x02\u0FE6\u0FE7\x03\x02\x02\x02\u0FE7\u0143\x03\x02" +
		"\x02\x02\u0FE8\u0FE6\x03\x02\x02\x02\u0FE9\u0FEA\x07\x9C\x02\x02\u0FEA" +
		"\u0FEB\x05\u019E\xD0\x02\u0FEB\u0FEF\x07\xCE\x02\x02\u0FEC\u0FEE\x07\xE7" +
		"\x02\x02\u0FED\u0FEC\x03\x02\x02\x02\u0FEE\u0FF1\x03\x02\x02\x02\u0FEF" +
		"\u0FED\x03\x02\x02\x02\u0FEF\u0FF0\x03\x02\x02\x02\u0FF0\u0FFB\x03\x02" +
		"\x02\x02\u0FF1\u0FEF\x03\x02\x02\x02\u0FF2\u0FF6\x05T+\x02\u0FF3\u0FF5" +
		"\x07\xE7\x02\x02\u0FF4\u0FF3\x03\x02\x02\x02\u0FF5\u0FF8\x03\x02\x02\x02" +
		"\u0FF6\u0FF4\x03\x02\x02\x02\u0FF6\u0FF7\x03\x02\x02\x02\u0FF7\u0FFA\x03" +
		"\x02\x02\x02\u0FF8\u0FF6\x03\x02\x02\x02\u0FF9\u0FF2\x03\x02\x02\x02\u0FFA" +
		"\u0FFD\x03\x02\x02\x02\u0FFB\u0FF9\x03\x02\x02\x02\u0FFB\u0FFC\x03\x02" +
		"\x02\x02\u0FFC\u0145\x03\x02\x02\x02\u0FFD\u0FFB\x03\x02\x02\x02\u0FFE" +
		"\u0FFF\x07\x9D\x02\x02\u0FFF\u1000\x05\u019E\xD0\x02\u1000\u1004\x07\xCE" +
		"\x02\x02\u1001\u1003\x07\xE7\x02\x02\u1002\u1001\x03\x02\x02\x02\u1003" +
		"\u1006\x03\x02\x02\x02\u1004\u1002\x03\x02\x02\x02\u1004\u1005\x03\x02" +
		"\x02\x02\u1005\u1010\x03\x02\x02\x02\u1006\u1004\x03\x02\x02\x02\u1007" +
		"\u100B\x05T+\x02\u1008\u100A\x07\xE7\x02\x02\u1009\u1008\x03\x02\x02\x02" +
		"\u100A\u100D\x03\x02\x02\x02\u100B\u1009\x03\x02\x02\x02\u100B\u100C\x03" +
		"\x02\x02\x02\u100C\u100F\x03\x02\x02\x02\u100D\u100B\x03\x02\x02\x02\u100E" +
		"\u1007\x03\x02\x02\x02\u100F\u1012\x03\x02\x02\x02\u1010\u100E\x03\x02" +
		"\x02\x02\u1010\u1011\x03\x02\x02\x02\u1011\u0147\x03\x02\x02\x02\u1012" +
		"\u1010\x03\x02\x02\x02\u1013\u1014\x07\x9E\x02\x02\u1014\u1015\x05\u019E" +
		"\xD0\x02\u1015\u1019\x07\xCE\x02\x02\u1016\u1018\x07\xE7\x02\x02\u1017" +
		"\u1016\x03\x02\x02\x02\u1018\u101B\x03\x02\x02\x02\u1019\u1017\x03\x02" +
		"\x02\x02\u1019\u101A\x03\x02\x02\x02\u101A\u1025\x03\x02\x02\x02\u101B" +
		"\u1019\x03\x02\x02\x02\u101C\u1020\x05T+\x02\u101D\u101F\x07\xE7\x02\x02" +
		"\u101E\u101D\x03\x02\x02\x02\u101F\u1022\x03\x02\x02\x02\u1020\u101E\x03" +
		"\x02\x02\x02\u1020\u1021\x03\x02\x02\x02\u1021\u1024\x03\x02\x02\x02\u1022" +
		"\u1020\x03\x02\x02\x02\u1023\u101C\x03\x02\x02\x02\u1024\u1027\x03\x02" +
		"\x02\x02\u1025\u1023\x03\x02\x02\x02\u1025\u1026\x03\x02\x02\x02\u1026" +
		"\u0149\x03\x02\x02\x02\u1027\u1025\x03\x02\x02\x02\u1028\u1029\x07\x9F" +
		"\x02\x02\u1029\u102A\x05\u019E\xD0\x02\u102A\u102E\x07\xCE\x02\x02\u102B" +
		"\u102D\x07\xE7\x02\x02\u102C\u102B\x03\x02\x02\x02\u102D\u1030\x03\x02" +
		"\x02\x02\u102E\u102C\x03\x02\x02\x02\u102E\u102F\x03\x02\x02\x02\u102F" +
		"\u103A\x03\x02\x02\x02\u1030\u102E\x03\x02\x02\x02\u1031\u1035\x05T+\x02" +
		"\u1032\u1034\x07\xE7\x02\x02\u1033\u1032\x03\x02\x02\x02\u1034\u1037\x03" +
		"\x02\x02\x02\u1035\u1033\x03\x02\x02\x02\u1035\u1036\x03\x02\x02\x02\u1036" +
		"\u1039\x03\x02\x02\x02\u1037\u1035\x03\x02\x02\x02\u1038\u1031\x03\x02" +
		"\x02\x02\u1039\u103C\x03\x02\x02\x02\u103A\u1038\x03\x02\x02\x02\u103A" +
		"\u103B\x03\x02\x02\x02\u103B\u014B\x03\x02\x02\x02\u103C\u103A\x03\x02" +
		"\x02\x02\u103D\u103E\x07\xA0\x02\x02\u103E\u103F\x05\u019E\xD0\x02\u103F" +
		"\u1043\x07\xCE\x02\x02\u1040\u1042\x07\xE7\x02\x02\u1041\u1040\x03\x02" +
		"\x02\x02\u1042\u1045\x03\x02\x02\x02\u1043\u1041\x03\x02\x02\x02\u1043" +
		"\u1044\x03\x02\x02\x02\u1044\u104F\x03\x02\x02\x02\u1045\u1043\x03\x02" +
		"\x02\x02\u1046\u104A\x05T+\x02\u1047\u1049\x07\xE7\x02\x02\u1048\u1047" +
		"\x03\x02\x02\x02\u1049\u104C\x03\x02\x02\x02\u104A\u1048\x03\x02\x02\x02" +
		"\u104A\u104B\x03\x02\x02\x02\u104B\u104E\x03\x02\x02\x02\u104C\u104A\x03" +
		"\x02\x02\x02\u104D\u1046\x03\x02\x02\x02\u104E\u1051\x03\x02\x02\x02\u104F" +
		"\u104D\x03\x02\x02\x02\u104F\u1050\x03\x02\x02\x02\u1050\u014D\x03\x02" +
		"\x02\x02\u1051\u104F\x03\x02\x02\x02\u1052\u1053\x07\xA1\x02\x02\u1053" +
		"\u1054\x05\u019E\xD0\x02\u1054\u1058\x07\xCE\x02\x02\u1055\u1057\x07\xE7" +
		"\x02\x02\u1056\u1055\x03\x02\x02\x02\u1057\u105A\x03\x02\x02\x02\u1058" +
		"\u1056\x03\x02\x02\x02\u1058\u1059\x03\x02\x02\x02\u1059\u1064\x03\x02" +
		"\x02\x02\u105A\u1058\x03\x02\x02\x02\u105B\u105F\x05T+\x02\u105C\u105E" +
		"\x07\xE7\x02\x02\u105D\u105C\x03\x02\x02\x02\u105E\u1061\x03\x02\x02\x02" +
		"\u105F\u105D\x03\x02\x02\x02\u105F\u1060\x03\x02\x02\x02\u1060\u1063\x03" +
		"\x02\x02\x02\u1061\u105F\x03\x02\x02\x02\u1062\u105B\x03\x02\x02\x02\u1063" +
		"\u1066\x03\x02\x02\x02\u1064\u1062\x03\x02\x02\x02\u1064\u1065\x03\x02" +
		"\x02\x02\u1065\u014F\x03\x02\x02\x02\u1066\u1064\x03\x02\x02\x02\u1067" +
		"\u1068\x07\xA2\x02\x02\u1068\u1069\x05\u019E\xD0\x02\u1069\u106D\x07\xCE" +
		"\x02\x02\u106A\u106C\x07\xE7\x02\x02\u106B\u106A\x03\x02\x02\x02\u106C" +
		"\u106F\x03\x02\x02\x02\u106D\u106B\x03\x02\x02\x02\u106D\u106E\x03\x02" +
		"\x02\x02\u106E\u1079\x03\x02\x02\x02\u106F\u106D\x03\x02\x02\x02\u1070" +
		"\u1074\x05T+\x02\u1071\u1073\x07\xE7\x02\x02\u1072\u1071\x03\x02\x02\x02" +
		"\u1073\u1076\x03\x02\x02\x02\u1074\u1072\x03\x02\x02\x02\u1074\u1075\x03" +
		"\x02\x02\x02\u1075\u1078\x03\x02\x02\x02\u1076\u1074\x03\x02\x02\x02\u1077" +
		"\u1070\x03\x02\x02\x02\u1078\u107B\x03\x02\x02\x02\u1079\u1077\x03\x02" +
		"\x02\x02\u1079\u107A\x03\x02\x02\x02\u107A\u0151\x03\x02\x02\x02\u107B" +
		"\u1079\x03\x02\x02\x02\u107C\u107D\x07\xA3\x02\x02\u107D\u107E\x05\u019E" +
		"\xD0\x02\u107E\u1082\x07\xCE\x02\x02\u107F\u1081\x07\xE7\x02\x02\u1080" +
		"\u107F\x03\x02\x02\x02\u1081\u1084\x03\x02\x02\x02\u1082\u1080\x03\x02" +
		"\x02\x02\u1082\u1083\x03\x02\x02\x02\u1083\u108E\x03\x02\x02\x02\u1084" +
		"\u1082\x03\x02\x02\x02\u1085\u1089\x05T+\x02\u1086\u1088\x07\xE7\x02\x02" +
		"\u1087\u1086\x03\x02\x02\x02\u1088\u108B\x03\x02\x02\x02\u1089\u1087\x03" +
		"\x02\x02\x02\u1089\u108A\x03\x02\x02\x02\u108A\u108D\x03\x02\x02\x02\u108B" +
		"\u1089\x03\x02\x02\x02\u108C\u1085\x03\x02\x02\x02\u108D\u1090\x03\x02" +
		"\x02\x02\u108E\u108C\x03\x02\x02\x02\u108E\u108F\x03\x02\x02\x02\u108F" +
		"\u0153\x03\x02\x02\x02\u1090\u108E\x03\x02\x02\x02\u1091\u1092\x07\xA4" +
		"\x02\x02\u1092\u1093\x05\u019E\xD0\x02\u1093\u1097\x07\xCE\x02\x02\u1094" +
		"\u1096\x07\xE7\x02\x02\u1095\u1094\x03\x02\x02\x02\u1096\u1099\x03\x02" +
		"\x02\x02\u1097\u1095\x03\x02\x02\x02\u1097\u1098\x03\x02\x02\x02\u1098" +
		"\u10A3\x03\x02\x02\x02\u1099\u1097\x03\x02\x02\x02\u109A\u109E\x05T+\x02" +
		"\u109B\u109D\x07\xE7\x02\x02\u109C\u109B\x03\x02\x02\x02\u109D\u10A0\x03" +
		"\x02\x02\x02\u109E\u109C\x03\x02\x02\x02\u109E\u109F\x03\x02\x02\x02\u109F" +
		"\u10A2\x03\x02\x02\x02\u10A0\u109E\x03\x02\x02\x02\u10A1\u109A\x03\x02" +
		"\x02\x02\u10A2\u10A5\x03\x02\x02\x02\u10A3\u10A1\x03\x02\x02\x02\u10A3" +
		"\u10A4\x03\x02\x02\x02\u10A4\u0155\x03\x02\x02\x02\u10A5\u10A3\x03\x02" +
		"\x02\x02\u10A6\u10A7\x07\xA5\x02\x02\u10A7\u10A8\x05\u019E\xD0\x02\u10A8" +
		"\u10AC\x07\xCE\x02\x02\u10A9\u10AB\x07\xE7\x02\x02\u10AA\u10A9\x03\x02" +
		"\x02\x02\u10AB\u10AE\x03\x02\x02\x02\u10AC\u10AA\x03\x02\x02\x02\u10AC" +
		"\u10AD\x03\x02\x02\x02\u10AD\u10B8\x03\x02\x02\x02\u10AE\u10AC\x03\x02" +
		"\x02\x02\u10AF\u10B3\x05T+\x02\u10B0\u10B2\x07\xE7\x02\x02\u10B1\u10B0" +
		"\x03\x02\x02\x02\u10B2\u10B5\x03\x02\x02\x02\u10B3\u10B1\x03\x02\x02\x02" +
		"\u10B3\u10B4\x03\x02\x02\x02\u10B4\u10B7\x03\x02\x02\x02\u10B5\u10B3\x03" +
		"\x02\x02\x02\u10B6\u10AF\x03\x02\x02\x02\u10B7\u10BA\x03\x02\x02\x02\u10B8" +
		"\u10B6\x03\x02\x02\x02\u10B8\u10B9\x03\x02\x02\x02\u10B9\u0157\x03\x02" +
		"\x02\x02\u10BA\u10B8\x03\x02\x02\x02\u10BB\u10BC\x07\xA6\x02\x02\u10BC" +
		"\u10BD\x05\u019E\xD0\x02\u10BD\u10C1\x07\xCE\x02\x02\u10BE\u10C0\x07\xE7" +
		"\x02\x02\u10BF\u10BE\x03\x02\x02\x02\u10C0\u10C3\x03\x02\x02\x02\u10C1" +
		"\u10BF\x03\x02\x02\x02\u10C1\u10C2\x03\x02\x02\x02\u10C2\u10CD\x03\x02" +
		"\x02\x02\u10C3\u10C1\x03\x02\x02\x02\u10C4\u10C8\x05T+\x02\u10C5\u10C7" +
		"\x07\xE7\x02\x02\u10C6\u10C5\x03\x02\x02\x02\u10C7\u10CA\x03\x02\x02\x02" +
		"\u10C8\u10C6\x03\x02\x02\x02\u10C8\u10C9\x03\x02\x02\x02\u10C9\u10CC\x03" +
		"\x02\x02\x02\u10CA\u10C8\x03\x02\x02\x02\u10CB\u10C4\x03\x02\x02\x02\u10CC" +
		"\u10CF\x03\x02\x02\x02\u10CD\u10CB\x03\x02\x02\x02\u10CD\u10CE\x03\x02" +
		"\x02\x02\u10CE\u0159\x03\x02\x02\x02\u10CF\u10CD\x03\x02\x02\x02\u10D0" +
		"\u10D1\x07\xA7\x02\x02\u10D1\u10D2\x05\u019E\xD0\x02\u10D2\u10D6\x07\xCE" +
		"\x02\x02\u10D3\u10D5\x07\xE7\x02\x02\u10D4\u10D3\x03\x02\x02\x02\u10D5" +
		"\u10D8\x03\x02\x02\x02\u10D6\u10D4\x03\x02\x02\x02\u10D6\u10D7\x03\x02" +
		"\x02\x02\u10D7\u10E2\x03\x02\x02\x02\u10D8\u10D6\x03\x02\x02\x02\u10D9" +
		"\u10DD\x05T+\x02\u10DA\u10DC\x07\xE7\x02\x02\u10DB\u10DA\x03\x02\x02\x02" +
		"\u10DC\u10DF\x03\x02\x02\x02\u10DD\u10DB\x03\x02\x02\x02\u10DD\u10DE\x03" +
		"\x02\x02\x02\u10DE\u10E1\x03\x02\x02\x02\u10DF\u10DD\x03\x02\x02\x02\u10E0" +
		"\u10D9\x03\x02\x02\x02\u10E1\u10E4\x03\x02\x02\x02\u10E2\u10E0\x03\x02" +
		"\x02\x02\u10E2\u10E3\x03\x02\x02\x02\u10E3\u015B\x03\x02\x02\x02\u10E4" +
		"\u10E2\x03\x02\x02\x02\u10E5\u10E6\x07\xA8\x02\x02\u10E6\u10E7\x05\u019E" +
		"\xD0\x02\u10E7\u10EB\x07\xCE\x02\x02\u10E8\u10EA\x07\xE7\x02\x02\u10E9" +
		"\u10E8\x03\x02\x02\x02\u10EA\u10ED\x03\x02\x02\x02\u10EB\u10E9\x03\x02" +
		"\x02\x02\u10EB\u10EC\x03\x02\x02\x02\u10EC\u10F7\x03\x02\x02\x02\u10ED" +
		"\u10EB\x03\x02\x02\x02\u10EE\u10F2\x05T+\x02\u10EF\u10F1\x07\xE7\x02\x02" +
		"\u10F0\u10EF\x03\x02\x02\x02\u10F1\u10F4\x03\x02\x02\x02\u10F2\u10F0\x03" +
		"\x02\x02\x02\u10F2\u10F3\x03\x02\x02\x02\u10F3\u10F6\x03\x02\x02\x02\u10F4" +
		"\u10F2\x03\x02\x02\x02\u10F5\u10EE\x03\x02\x02\x02\u10F6\u10F9\x03\x02" +
		"\x02\x02\u10F7\u10F5\x03\x02\x02\x02\u10F7\u10F8\x03\x02\x02\x02\u10F8" +
		"\u015D\x03\x02\x02\x02\u10F9\u10F7\x03\x02\x02\x02\u10FA\u10FB\x07\xA9" +
		"\x02\x02\u10FB\u10FC\x05\u019E\xD0\x02\u10FC\u1100\x07\xCE\x02\x02\u10FD" +
		"\u10FF\x07\xE7\x02\x02\u10FE\u10FD\x03\x02\x02\x02\u10FF\u1102\x03\x02" +
		"\x02\x02\u1100\u10FE\x03\x02\x02\x02\u1100\u1101\x03\x02\x02\x02\u1101" +
		"\u110C\x03\x02\x02\x02\u1102\u1100\x03\x02\x02\x02\u1103\u1107\x05T+\x02" +
		"\u1104\u1106\x07\xE7\x02\x02\u1105\u1104\x03\x02\x02\x02\u1106\u1109\x03" +
		"\x02\x02\x02\u1107\u1105\x03\x02\x02\x02\u1107\u1108\x03\x02\x02\x02\u1108" +
		"\u110B\x03\x02\x02\x02\u1109\u1107\x03\x02\x02\x02\u110A\u1103\x03\x02" +
		"\x02\x02\u110B\u110E\x03\x02\x02\x02\u110C\u110A\x03\x02\x02\x02\u110C" +
		"\u110D\x03\x02\x02\x02\u110D\u015F\x03\x02\x02\x02\u110E\u110C\x03\x02" +
		"\x02\x02\u110F\u1110\x07\xAA\x02\x02\u1110\u1111\x05\u019E\xD0\x02\u1111" +
		"\u1115\x07\xCE\x02\x02\u1112\u1114\x07\xE7\x02\x02\u1113\u1112\x03\x02" +
		"\x02\x02\u1114\u1117\x03\x02\x02\x02\u1115\u1113\x03\x02\x02\x02\u1115" +
		"\u1116\x03\x02\x02\x02\u1116\u1121\x03\x02\x02\x02\u1117\u1115\x03\x02" +
		"\x02\x02\u1118\u111C\x05T+\x02\u1119\u111B\x07\xE7\x02\x02\u111A\u1119" +
		"\x03\x02\x02\x02\u111B\u111E\x03\x02\x02\x02\u111C\u111A\x03\x02\x02\x02" +
		"\u111C\u111D\x03\x02\x02\x02\u111D\u1120\x03\x02\x02\x02\u111E\u111C\x03" +
		"\x02\x02\x02\u111F\u1118\x03\x02\x02\x02\u1120\u1123\x03\x02\x02\x02\u1121" +
		"\u111F\x03\x02\x02\x02\u1121\u1122\x03\x02\x02\x02\u1122\u0161\x03\x02" +
		"\x02\x02\u1123\u1121\x03\x02\x02\x02\u1124\u1125\x07\xAB\x02\x02\u1125" +
		"\u1126\x05\u019E\xD0\x02\u1126\u112A\x07\xCE\x02\x02\u1127\u1129\x07\xE7" +
		"\x02\x02\u1128\u1127\x03\x02\x02\x02\u1129\u112C\x03\x02\x02\x02\u112A" +
		"\u1128\x03\x02\x02\x02\u112A\u112B\x03\x02\x02\x02\u112B\u1136\x03\x02" +
		"\x02\x02\u112C\u112A\x03\x02\x02\x02\u112D\u1131\x05T+\x02\u112E\u1130" +
		"\x07\xE7\x02\x02\u112F\u112E\x03\x02\x02\x02\u1130\u1133\x03\x02\x02\x02" +
		"\u1131\u112F\x03\x02\x02\x02\u1131\u1132\x03\x02\x02\x02\u1132\u1135\x03" +
		"\x02\x02\x02\u1133\u1131\x03\x02\x02\x02\u1134\u112D\x03\x02\x02\x02\u1135" +
		"\u1138\x03\x02\x02\x02\u1136\u1134\x03\x02\x02\x02\u1136\u1137\x03\x02" +
		"\x02\x02\u1137\u0163\x03\x02\x02\x02\u1138\u1136\x03\x02\x02\x02\u1139" +
		"\u113A\x07\xAC\x02\x02\u113A\u113B\x05\u019E\xD0\x02\u113B\u113F\x07\xCE" +
		"\x02\x02\u113C\u113E\x07\xE7\x02\x02\u113D\u113C\x03\x02\x02\x02\u113E" +
		"\u1141\x03\x02\x02\x02\u113F\u113D\x03\x02\x02\x02\u113F\u1140\x03\x02" +
		"\x02\x02\u1140\u114B\x03\x02\x02\x02\u1141\u113F\x03\x02\x02\x02\u1142" +
		"\u1146\x05T+\x02\u1143\u1145\x07\xE7\x02\x02\u1144\u1143\x03\x02\x02\x02" +
		"\u1145\u1148\x03\x02\x02\x02\u1146\u1144\x03\x02\x02\x02\u1146\u1147\x03" +
		"\x02\x02\x02\u1147\u114A\x03\x02\x02\x02\u1148\u1146\x03\x02\x02\x02\u1149" +
		"\u1142\x03\x02\x02\x02\u114A\u114D\x03\x02\x02\x02\u114B\u1149\x03\x02" +
		"\x02\x02\u114B\u114C\x03\x02\x02\x02\u114C\u0165\x03\x02\x02\x02\u114D" +
		"\u114B\x03\x02\x02\x02\u114E\u114F\x07\xAD\x02\x02\u114F\u1150\x05\u019E" +
		"\xD0\x02\u1150\u1154\x07\xCE\x02\x02\u1151\u1153\x07\xE7\x02\x02\u1152" +
		"\u1151\x03\x02\x02\x02\u1153\u1156\x03\x02\x02\x02\u1154\u1152\x03\x02" +
		"\x02\x02\u1154\u1155\x03\x02\x02\x02\u1155\u1160\x03\x02\x02\x02\u1156" +
		"\u1154\x03\x02\x02\x02\u1157\u115B\x05T+\x02\u1158\u115A\x07\xE7\x02\x02" +
		"\u1159\u1158\x03\x02\x02\x02\u115A\u115D\x03\x02\x02\x02\u115B\u1159\x03" +
		"\x02\x02\x02\u115B\u115C\x03\x02\x02\x02\u115C\u115F\x03\x02\x02\x02\u115D" +
		"\u115B\x03\x02\x02\x02\u115E\u1157\x03\x02\x02\x02\u115F\u1162\x03\x02" +
		"\x02\x02\u1160\u115E\x03\x02\x02\x02\u1160\u1161\x03\x02\x02\x02\u1161" +
		"\u0167\x03\x02\x02\x02\u1162\u1160\x03\x02\x02\x02\u1163\u1164\x07\xAE" +
		"\x02\x02\u1164\u1165\x05\u019E\xD0\x02\u1165\u1169\x07\xCE\x02\x02\u1166" +
		"\u1168\x07\xE7\x02\x02\u1167\u1166\x03\x02\x02\x02\u1168\u116B\x03\x02" +
		"\x02\x02\u1169\u1167\x03\x02\x02\x02\u1169\u116A\x03\x02\x02\x02\u116A" +
		"\u1175\x03\x02\x02\x02\u116B\u1169\x03\x02\x02\x02\u116C\u1170\x05T+\x02" +
		"\u116D\u116F\x07\xE7\x02\x02\u116E\u116D\x03\x02\x02\x02\u116F\u1172\x03" +
		"\x02\x02\x02\u1170\u116E\x03\x02\x02\x02\u1170\u1171\x03\x02\x02\x02\u1171" +
		"\u1174\x03\x02\x02\x02\u1172\u1170\x03\x02\x02\x02\u1173\u116C\x03\x02" +
		"\x02\x02\u1174\u1177\x03\x02\x02\x02\u1175\u1173\x03\x02\x02\x02\u1175" +
		"\u1176\x03\x02\x02\x02\u1176\u0169\x03\x02\x02\x02\u1177\u1175\x03\x02" +
		"\x02\x02\u1178\u1179\x07\xAF\x02\x02\u1179\u117A\x05\u019E\xD0\x02\u117A" +
		"\u117E\x07\xCE\x02\x02\u117B\u117D\x07\xE7\x02\x02\u117C\u117B\x03\x02" +
		"\x02\x02\u117D\u1180\x03\x02\x02\x02\u117E\u117C\x03\x02\x02\x02\u117E" +
		"\u117F\x03\x02\x02\x02\u117F\u118A\x03\x02\x02\x02\u1180\u117E\x03\x02" +
		"\x02\x02\u1181\u1185\x05T+\x02\u1182\u1184\x07\xE7\x02\x02\u1183\u1182" +
		"\x03\x02\x02\x02\u1184\u1187\x03\x02\x02\x02\u1185\u1183\x03\x02\x02\x02" +
		"\u1185\u1186\x03\x02\x02\x02\u1186\u1189\x03\x02\x02\x02\u1187\u1185\x03" +
		"\x02\x02\x02\u1188\u1181\x03\x02\x02\x02\u1189\u118C\x03\x02\x02\x02\u118A" +
		"\u1188\x03\x02\x02\x02\u118A\u118B\x03\x02\x02\x02\u118B\u016B\x03\x02" +
		"\x02\x02\u118C\u118A\x03\x02\x02\x02\u118D\u118E\x07\xB0\x02\x02\u118E" +
		"\u118F\x05\u019E\xD0\x02\u118F\u1193\x07\xCE\x02\x02\u1190\u1192\x07\xE7" +
		"\x02\x02\u1191\u1190\x03\x02\x02\x02\u1192\u1195\x03\x02\x02\x02\u1193" +
		"\u1191\x03\x02\x02\x02\u1193\u1194\x03\x02\x02\x02\u1194\u119F\x03\x02" +
		"\x02\x02\u1195\u1193\x03\x02\x02\x02\u1196\u119A\x05T+\x02\u1197\u1199" +
		"\x07\xE7\x02\x02\u1198\u1197\x03\x02\x02\x02\u1199\u119C\x03\x02\x02\x02" +
		"\u119A\u1198\x03\x02\x02\x02\u119A\u119B\x03\x02\x02\x02\u119B\u119E\x03" +
		"\x02\x02\x02\u119C\u119A\x03\x02\x02\x02\u119D\u1196\x03\x02\x02\x02\u119E" +
		"\u11A1\x03\x02\x02\x02\u119F\u119D\x03\x02\x02\x02\u119F\u11A0\x03\x02" +
		"\x02\x02\u11A0\u016D\x03\x02\x02\x02\u11A1\u119F\x03\x02\x02\x02\u11A2" +
		"\u11A3\x07\xB1\x02\x02\u11A3\u11A4\x05\u019E\xD0\x02\u11A4\u11A8\x07\xCE" +
		"\x02\x02\u11A5\u11A7\x07\xE7\x02\x02\u11A6\u11A5\x03\x02\x02\x02\u11A7" +
		"\u11AA\x03\x02\x02\x02\u11A8\u11A6\x03\x02\x02\x02\u11A8\u11A9\x03\x02" +
		"\x02\x02\u11A9\u11B4\x03\x02\x02\x02\u11AA\u11A8\x03\x02\x02\x02\u11AB" +
		"\u11AF\x05T+\x02\u11AC\u11AE\x07\xE7\x02\x02\u11AD\u11AC\x03\x02\x02\x02" +
		"\u11AE\u11B1\x03\x02\x02\x02\u11AF\u11AD\x03\x02\x02\x02\u11AF\u11B0\x03" +
		"\x02\x02\x02\u11B0\u11B3\x03\x02\x02\x02\u11B1\u11AF\x03\x02\x02\x02\u11B2" +
		"\u11AB\x03\x02\x02\x02\u11B3\u11B6\x03\x02\x02\x02\u11B4\u11B2\x03\x02" +
		"\x02\x02\u11B4\u11B5\x03\x02\x02\x02\u11B5\u016F\x03\x02\x02\x02\u11B6" +
		"\u11B4\x03\x02\x02\x02\u11B7\u11B8\x07\xB2\x02\x02\u11B8\u11B9\x05\u019E" +
		"\xD0\x02\u11B9\u11BD\x07\xCE\x02\x02\u11BA\u11BC\x07\xE7\x02\x02\u11BB" +
		"\u11BA\x03\x02\x02\x02\u11BC\u11BF\x03\x02\x02\x02\u11BD\u11BB\x03\x02" +
		"\x02\x02\u11BD\u11BE\x03\x02\x02\x02\u11BE\u11C9\x03\x02\x02\x02\u11BF" +
		"\u11BD\x03\x02\x02\x02\u11C0\u11C4\x05T+\x02\u11C1\u11C3\x07\xE7\x02\x02" +
		"\u11C2\u11C1\x03\x02\x02\x02\u11C3\u11C6\x03\x02\x02\x02\u11C4\u11C2\x03" +
		"\x02\x02\x02\u11C4\u11C5\x03\x02\x02\x02\u11C5\u11C8\x03\x02\x02\x02\u11C6" +
		"\u11C4\x03\x02\x02\x02\u11C7\u11C0\x03\x02\x02\x02\u11C8\u11CB\x03\x02" +
		"\x02\x02\u11C9\u11C7\x03\x02\x02\x02\u11C9\u11CA\x03\x02\x02\x02\u11CA" +
		"\u0171\x03\x02\x02\x02\u11CB\u11C9\x03\x02\x02\x02\u11CC\u11CD\x07\xB3" +
		"\x02\x02\u11CD\u11CE\x05\u019E\xD0\x02\u11CE\u11D0\x07\xCE\x02\x02\u11CF" +
		"\u11D1\x07\xE7\x02\x02\u11D0\u11CF\x03\x02\x02\x02\u11D1\u11D2\x03\x02" +
		"\x02\x02\u11D2\u11D0\x03\x02\x02\x02\u11D2\u11D3\x03\x02\x02\x02\u11D3" +
		"\u11DD\x03\x02\x02\x02\u11D4\u11D8\x05T+\x02\u11D5\u11D7\x07\xE7\x02\x02" +
		"\u11D6\u11D5\x03\x02\x02\x02\u11D7\u11DA\x03\x02\x02\x02\u11D8\u11D6\x03" +
		"\x02\x02\x02\u11D8\u11D9\x03\x02\x02\x02\u11D9\u11DC\x03\x02\x02\x02\u11DA" +
		"\u11D8\x03\x02\x02\x02\u11DB\u11D4\x03\x02\x02\x02\u11DC\u11DF\x03\x02" +
		"\x02\x02\u11DD\u11DB\x03\x02\x02\x02\u11DD\u11DE\x03\x02\x02\x02\u11DE" +
		"\u11E1\x03\x02\x02\x02\u11DF\u11DD\x03\x02\x02\x02\u11E0\u11E2\x05\u0210" +
		"\u0109\x02\u11E1\u11E0\x03\x02\x02\x02\u11E1\u11E2\x03\x02\x02\x02\u11E2" +
		"\u11E6\x03\x02\x02\x02\u11E3\u11E5\x07\xE7\x02\x02\u11E4\u11E3\x03\x02" +
		"\x02\x02\u11E5\u11E8\x03\x02\x02\x02\u11E6\u11E4\x03\x02\x02\x02\u11E6" +
		"\u11E7\x03\x02\x02\x02\u11E7\u11F6\x03\x02\x02\x02\u11E8\u11E6\x03\x02" +
		"\x02\x02\u11E9\u11F3\x05f4\x02\u11EA\u11EC\x07\xE7\x02\x02\u11EB\u11EA" +
		"\x03\x02\x02\x02\u11EC\u11EF\x03\x02\x02\x02\u11ED\u11EB\x03\x02\x02\x02" +
		"\u11ED\u11EE\x03\x02\x02\x02\u11EE\u11F0\x03\x02\x02\x02\u11EF\u11ED\x03" +
		"\x02\x02\x02\u11F0\u11F2\x05f4\x02\u11F1\u11ED\x03\x02\x02\x02\u11F2\u11F5" +
		"\x03\x02\x02\x02\u11F3\u11F1\x03\x02\x02\x02\u11F3\u11F4\x03\x02\x02\x02" +
		"\u11F4\u11F7\x03\x02\x02\x02\u11F5\u11F3\x03\x02\x02\x02\u11F6\u11E9\x03" +
		"\x02\x02\x02\u11F6\u11F7\x03\x02\x02\x02\u11F7\u0173\x03\x02\x02\x02\u11F8" +
		"\u11F9\x07\xB4\x02\x02\u11F9\u11FA\x05\u019E\xD0\x02\u11FA\u11FE\x07\xCE" +
		"\x02\x02\u11FB\u11FD\x07\xE7\x02\x02\u11FC\u11FB\x03\x02\x02\x02\u11FD" +
		"\u1200\x03\x02\x02\x02\u11FE\u11FC\x03\x02\x02\x02\u11FE\u11FF\x03\x02" +
		"\x02\x02\u11FF\u120A\x03\x02\x02\x02\u1200\u11FE\x03\x02\x02\x02\u1201" +
		"\u1205\x05T+\x02\u1202\u1204\x07\xE7\x02\x02\u1203\u1202\x03\x02\x02\x02" +
		"\u1204\u1207\x03\x02\x02\x02\u1205\u1203\x03\x02\x02\x02\u1205\u1206\x03" +
		"\x02\x02\x02\u1206\u1209\x03\x02\x02\x02\u1207\u1205\x03\x02\x02\x02\u1208" +
		"\u1201\x03\x02\x02\x02\u1209\u120C\x03\x02\x02\x02\u120A\u1208\x03\x02" +
		"\x02\x02\u120A\u120B\x03\x02\x02\x02\u120B\u0175\x03\x02\x02\x02\u120C" +
		"\u120A\x03\x02\x02\x02\u120D\u120E\x07\xB5\x02\x02\u120E\u120F\x05\u019E" +
		"\xD0\x02\u120F\u1213\x07\xCE\x02\x02\u1210\u1212\x07\xE7\x02\x02\u1211" +
		"\u1210\x03\x02\x02\x02\u1212\u1215\x03\x02\x02\x02\u1213\u1211\x03\x02" +
		"\x02\x02\u1213\u1214\x03\x02\x02\x02\u1214\u121F\x03\x02\x02\x02\u1215" +
		"\u1213\x03\x02\x02\x02\u1216\u121A\x05T+\x02\u1217\u1219\x07\xE7\x02\x02" +
		"\u1218\u1217\x03\x02\x02\x02\u1219\u121C\x03\x02\x02\x02\u121A\u1218\x03" +
		"\x02\x02\x02\u121A\u121B\x03\x02\x02\x02\u121B\u121E\x03\x02\x02\x02\u121C" +
		"\u121A\x03\x02\x02\x02\u121D\u1216\x03\x02\x02\x02\u121E\u1221\x03\x02" +
		"\x02\x02\u121F";
	private static readonly _serializedATNSegment9: string =
		"\u121D\x03\x02\x02\x02\u121F\u1220\x03\x02\x02\x02\u1220\u0177\x03\x02" +
		"\x02\x02\u1221\u121F\x03\x02\x02\x02\u1222\u1223\x07\xB6\x02\x02\u1223" +
		"\u1224\x05\u019E\xD0\x02\u1224\u1228\x07\xCE\x02\x02\u1225\u1227\x07\xE7" +
		"\x02\x02\u1226\u1225\x03\x02\x02\x02\u1227\u122A\x03\x02\x02\x02\u1228" +
		"\u1226\x03\x02\x02\x02\u1228\u1229\x03\x02\x02\x02\u1229\u1234\x03\x02" +
		"\x02\x02\u122A\u1228\x03\x02\x02\x02\u122B\u122F\x05T+\x02\u122C\u122E" +
		"\x07\xE7\x02\x02\u122D\u122C\x03\x02\x02\x02\u122E\u1231\x03\x02\x02\x02" +
		"\u122F\u122D\x03\x02\x02\x02\u122F\u1230\x03\x02\x02\x02\u1230\u1233\x03" +
		"\x02\x02\x02\u1231\u122F\x03\x02\x02\x02\u1232\u122B\x03\x02\x02\x02\u1233" +
		"\u1236\x03\x02\x02\x02\u1234\u1232\x03\x02\x02\x02\u1234\u1235\x03\x02" +
		"\x02\x02\u1235\u0179\x03\x02\x02\x02\u1236\u1234\x03\x02\x02\x02\u1237" +
		"\u1238\x07\xB7\x02\x02\u1238\u1239\x05\u019E\xD0\x02\u1239\u123D\x07\xCE" +
		"\x02\x02\u123A\u123C\x07\xE7\x02\x02\u123B\u123A\x03\x02\x02\x02\u123C" +
		"\u123F\x03\x02\x02\x02\u123D\u123B\x03\x02\x02\x02\u123D\u123E\x03\x02" +
		"\x02\x02\u123E\u1249\x03\x02\x02\x02\u123F\u123D\x03\x02\x02\x02\u1240" +
		"\u1244\x05T+\x02\u1241\u1243\x07\xE7\x02\x02\u1242\u1241\x03\x02\x02\x02" +
		"\u1243\u1246\x03\x02\x02\x02\u1244\u1242\x03\x02\x02\x02\u1244\u1245\x03" +
		"\x02\x02\x02\u1245\u1248\x03\x02\x02\x02\u1246\u1244\x03\x02\x02\x02\u1247" +
		"\u1240\x03\x02\x02\x02\u1248\u124B\x03\x02\x02\x02\u1249\u1247\x03\x02" +
		"\x02\x02\u1249\u124A\x03\x02\x02\x02\u124A\u017B\x03\x02\x02\x02\u124B" +
		"\u1249\x03\x02\x02\x02\u124C\u124D\x07\xB8\x02\x02\u124D\u124E\x05\u019E" +
		"\xD0\x02\u124E\u1252\x07\xCE\x02\x02\u124F\u1251\x07\xE7\x02\x02\u1250" +
		"\u124F\x03\x02\x02\x02\u1251\u1254\x03\x02\x02\x02\u1252\u1250\x03\x02" +
		"\x02\x02\u1252\u1253\x03\x02\x02\x02\u1253\u125E\x03\x02\x02\x02\u1254" +
		"\u1252\x03\x02\x02\x02\u1255\u1259\x05T+\x02\u1256\u1258\x07\xE7\x02\x02" +
		"\u1257\u1256\x03\x02\x02\x02\u1258\u125B\x03\x02\x02\x02\u1259\u1257\x03" +
		"\x02\x02\x02\u1259\u125A\x03\x02\x02\x02\u125A\u125D\x03\x02\x02\x02\u125B" +
		"\u1259\x03\x02\x02\x02\u125C\u1255\x03\x02\x02\x02\u125D\u1260\x03\x02" +
		"\x02\x02\u125E\u125C\x03\x02\x02\x02\u125E\u125F\x03\x02\x02\x02\u125F" +
		"\u017D\x03\x02\x02\x02\u1260\u125E\x03\x02\x02\x02\u1261\u1262\x07\xB9" +
		"\x02\x02\u1262\u1263\x05\u019E\xD0\x02\u1263\u1267\x07\xCE\x02\x02\u1264" +
		"\u1266\x07\xE7\x02\x02\u1265\u1264\x03\x02\x02\x02\u1266\u1269\x03\x02" +
		"\x02\x02\u1267\u1265\x03\x02\x02\x02\u1267\u1268\x03\x02\x02\x02\u1268" +
		"\u1273\x03\x02\x02\x02\u1269\u1267\x03\x02\x02\x02\u126A\u126E\x05T+\x02" +
		"\u126B\u126D\x07\xE7\x02\x02\u126C\u126B\x03\x02\x02\x02\u126D\u1270\x03" +
		"\x02\x02\x02\u126E\u126C\x03\x02\x02\x02\u126E\u126F\x03\x02\x02\x02\u126F" +
		"\u1272\x03\x02\x02\x02\u1270\u126E\x03\x02\x02\x02\u1271\u126A\x03\x02" +
		"\x02\x02\u1272\u1275\x03\x02\x02\x02\u1273\u1271\x03\x02\x02\x02\u1273" +
		"\u1274\x03\x02\x02\x02\u1274\u017F\x03\x02\x02\x02\u1275\u1273\x03\x02" +
		"\x02\x02\u1276\u1277\x07\xBA\x02\x02\u1277\u1278\x05\u019E\xD0\x02\u1278" +
		"\u127C\x07\xCE\x02\x02\u1279\u127B\x07\xE7\x02\x02\u127A\u1279\x03\x02" +
		"\x02\x02\u127B\u127E\x03\x02\x02\x02\u127C\u127A\x03\x02\x02\x02\u127C" +
		"\u127D\x03\x02\x02\x02\u127D\u1288\x03\x02\x02\x02\u127E\u127C\x03\x02" +
		"\x02\x02\u127F\u1283\x05T+\x02\u1280\u1282\x07\xE7\x02\x02\u1281\u1280" +
		"\x03\x02\x02\x02\u1282\u1285\x03\x02\x02\x02\u1283\u1281\x03\x02\x02\x02" +
		"\u1283\u1284\x03\x02\x02\x02\u1284\u1287\x03\x02\x02\x02\u1285\u1283\x03" +
		"\x02\x02\x02\u1286\u127F\x03\x02\x02\x02\u1287\u128A\x03\x02\x02\x02\u1288" +
		"\u1286\x03\x02\x02\x02\u1288\u1289\x03\x02\x02\x02\u1289\u0181\x03\x02" +
		"\x02\x02\u128A\u1288\x03\x02\x02\x02\u128B\u128C\x07\xBB\x02\x02\u128C" +
		"\u128D\x05\u019E\xD0\x02\u128D\u1291\x07\xCE\x02\x02\u128E\u1290\x07\xE7" +
		"\x02\x02\u128F\u128E\x03\x02\x02\x02\u1290\u1293\x03\x02\x02\x02\u1291" +
		"\u128F\x03\x02\x02\x02\u1291\u1292\x03\x02\x02\x02\u1292\u129D\x03\x02" +
		"\x02\x02\u1293\u1291\x03\x02\x02\x02\u1294\u1298\x05T+\x02\u1295\u1297" +
		"\x07\xE7\x02\x02\u1296\u1295\x03\x02\x02\x02\u1297\u129A\x03\x02\x02\x02" +
		"\u1298\u1296\x03\x02\x02\x02\u1298\u1299\x03\x02\x02\x02\u1299\u129C\x03" +
		"\x02\x02\x02\u129A\u1298\x03\x02\x02\x02\u129B\u1294\x03\x02\x02\x02\u129C" +
		"\u129F\x03\x02\x02\x02\u129D\u129B\x03\x02\x02\x02\u129D\u129E\x03\x02" +
		"\x02\x02\u129E\u0183\x03\x02\x02\x02\u129F\u129D\x03\x02\x02\x02\u12A0" +
		"\u12A1\x07\xBC\x02\x02\u12A1\u12A2\x05\u01A4\xD3\x02\u12A2\u12A6\x07\xCE" +
		"\x02\x02\u12A3\u12A5\x07\xE7\x02\x02\u12A4\u12A3\x03\x02\x02\x02\u12A5" +
		"\u12A8\x03\x02\x02\x02\u12A6\u12A4\x03\x02\x02\x02\u12A6\u12A7\x03\x02" +
		"\x02\x02\u12A7\u12B2\x03\x02\x02\x02\u12A8\u12A6\x03\x02\x02\x02\u12A9" +
		"\u12AD\x05T+\x02\u12AA\u12AC\x07\xE7\x02\x02\u12AB\u12AA\x03\x02\x02\x02" +
		"\u12AC\u12AF\x03\x02\x02\x02\u12AD\u12AB\x03\x02\x02\x02\u12AD\u12AE\x03" +
		"\x02\x02\x02\u12AE\u12B1\x03\x02\x02\x02\u12AF\u12AD\x03\x02\x02\x02\u12B0" +
		"\u12A9\x03\x02\x02\x02\u12B1\u12B4\x03\x02\x02\x02\u12B2\u12B0\x03\x02" +
		"\x02\x02\u12B2\u12B3\x03\x02\x02\x02\u12B3\u0185\x03\x02\x02\x02\u12B4" +
		"\u12B2\x03\x02\x02\x02\u12B5\u12B6\x07\xBD\x02\x02\u12B6\u12B7\x05\u01A4" +
		"\xD3\x02\u12B7\u12BB\x07\xCE\x02\x02\u12B8\u12BA\x07\xE7\x02\x02\u12B9" +
		"\u12B8\x03\x02\x02\x02\u12BA\u12BD\x03\x02\x02\x02\u12BB\u12B9\x03\x02" +
		"\x02\x02\u12BB\u12BC\x03\x02\x02\x02\u12BC\u12C7\x03\x02\x02\x02\u12BD" +
		"\u12BB\x03\x02\x02\x02\u12BE\u12C2\x05T+\x02\u12BF\u12C1\x07\xE7\x02\x02" +
		"\u12C0\u12BF\x03\x02\x02\x02\u12C1\u12C4\x03\x02\x02\x02\u12C2\u12C0\x03" +
		"\x02\x02\x02\u12C2\u12C3\x03\x02\x02\x02\u12C3\u12C6\x03\x02\x02\x02\u12C4" +
		"\u12C2\x03\x02\x02\x02\u12C5\u12BE\x03\x02\x02\x02\u12C6\u12C9\x03\x02" +
		"\x02\x02\u12C7\u12C5\x03\x02\x02\x02\u12C7\u12C8\x03\x02\x02\x02\u12C8" +
		"\u0187\x03\x02\x02\x02\u12C9\u12C7\x03\x02\x02\x02\u12CA\u12CB\x07\xBE" +
		"\x02\x02\u12CB\u12CC\x05\u01A4\xD3\x02\u12CC\u12D0\x07\xCE\x02\x02\u12CD" +
		"\u12CF\x07\xE7\x02\x02\u12CE\u12CD\x03\x02\x02\x02\u12CF\u12D2\x03\x02" +
		"\x02\x02\u12D0\u12CE\x03\x02\x02\x02\u12D0\u12D1\x03\x02\x02\x02\u12D1" +
		"\u12DC\x03\x02\x02\x02\u12D2\u12D0\x03\x02\x02\x02\u12D3\u12D7\x05T+\x02" +
		"\u12D4\u12D6\x07\xE7\x02\x02\u12D5\u12D4\x03\x02\x02\x02\u12D6\u12D9\x03" +
		"\x02\x02\x02\u12D7\u12D5\x03\x02\x02\x02\u12D7\u12D8\x03\x02\x02\x02\u12D8" +
		"\u12DB\x03\x02\x02\x02\u12D9\u12D7\x03\x02\x02\x02\u12DA\u12D3\x03\x02" +
		"\x02\x02\u12DB\u12DE\x03\x02\x02\x02\u12DC\u12DA\x03\x02\x02\x02\u12DC" +
		"\u12DD\x03\x02\x02\x02\u12DD\u0189\x03\x02\x02\x02\u12DE\u12DC\x03\x02" +
		"\x02\x02\u12DF\u12E7\x05\u021A\u010E\x02\u12E0\u12E7\x05\u01FA\xFE\x02" +
		"\u12E1\u12E7\x05\u01DA\xEE\x02\u12E2\u12E7\x05V,\x02\u12E3\u12E7\x05Z" +
		".\x02\u12E4\u12E7\x05\\/\x02\u12E5\u12E7\x05^0\x02\u12E6\u12DF\x03\x02" +
		"\x02\x02\u12E6\u12E0\x03\x02\x02\x02\u12E6\u12E1\x03\x02\x02\x02\u12E6" +
		"\u12E2\x03\x02\x02\x02\u12E6\u12E3\x03\x02\x02\x02\u12E6\u12E4\x03\x02" +
		"\x02\x02\u12E6\u12E5\x03\x02\x02\x02\u12E7\u12E8\x03\x02\x02\x02\u12E8" +
		"\u12E6\x03\x02\x02\x02\u12E8\u12E9\x03\x02\x02\x02\u12E9\u018B\x03\x02" +
		"\x02\x02\u12EA\u12EB\x07!\x02\x02\u12EB\u12EC\x05\u019E\xD0\x02\u12EC" +
		"\u12F0\x07\xCE\x02\x02\u12ED\u12EF\x07\xE7\x02\x02\u12EE\u12ED\x03\x02" +
		"\x02\x02\u12EF\u12F2\x03\x02\x02\x02\u12F0\u12EE\x03\x02\x02\x02\u12F0" +
		"\u12F1\x03\x02\x02\x02\u12F1\u12FC\x03\x02\x02\x02\u12F2\u12F0\x03\x02" +
		"\x02\x02\u12F3\u12F7\x05T+\x02\u12F4\u12F6\x07\xE7\x02\x02\u12F5\u12F4" +
		"\x03\x02\x02\x02\u12F6\u12F9\x03\x02\x02\x02\u12F7\u12F5\x03\x02\x02\x02" +
		"\u12F7\u12F8\x03\x02\x02\x02\u12F8\u12FB\x03\x02\x02\x02\u12F9\u12F7\x03" +
		"\x02\x02\x02\u12FA\u12F3\x03\x02\x02\x02\u12FB\u12FE\x03\x02\x02\x02\u12FC" +
		"\u12FA\x03\x02\x02\x02\u12FC\u12FD\x03\x02\x02\x02\u12FD\u1337\x03\x02" +
		"\x02\x02\u12FE\u12FC\x03\x02\x02\x02\u12FF\u1300\x07!\x02\x02\u1300\u1301" +
		"\x05\u019E\xD0\x02\u1301\u1305\x07\xCE\x02\x02\u1302\u1304\x07\xE7\x02" +
		"\x02\u1303\u1302\x03\x02\x02\x02\u1304\u1307\x03\x02\x02\x02\u1305\u1303" +
		"\x03\x02\x02\x02\u1305\u1306\x03\x02\x02\x02\u1306\u1311\x03\x02\x02\x02" +
		"\u1307\u1305\x03\x02\x02\x02\u1308\u130C\x05T+\x02\u1309\u130B\x07\xE7" +
		"\x02\x02\u130A\u1309\x03\x02\x02\x02\u130B\u130E\x03\x02\x02\x02\u130C" +
		"\u130A\x03\x02\x02\x02\u130C\u130D\x03\x02\x02\x02\u130D\u1310\x03\x02" +
		"\x02\x02\u130E\u130C\x03\x02\x02\x02\u130F\u1308\x03\x02\x02\x02\u1310" +
		"\u1313\x03\x02\x02\x02\u1311\u130F\x03\x02\x02\x02\u1311\u1312\x03\x02" +
		"\x02\x02\u1312\u131C\x03\x02\x02\x02\u1313\u1311\x03\x02\x02\x02\u1314" +
		"\u1315\t\x06\x02\x02\u1315\u1318\x05\u0212\u010A\x02\u1316\u1317\x07\xE7" +
		"\x02\x02\u1317\u1319\x05\u018E\xC8\x02\u1318\u1316\x03\x02\x02\x02\u1319" +
		"\u131A\x03\x02\x02\x02\u131A\u1318\x03\x02\x02\x02\u131A\u131B\x03\x02" +
		"\x02\x02\u131B\u131D\x03\x02\x02\x02\u131C\u1314\x03\x02\x02\x02\u131D" +
		"\u131E\x03\x02\x02\x02\u131E\u131C\x03\x02\x02\x02\u131E\u131F\x03\x02" +
		"\x02\x02\u131F\u1320\x03\x02\x02\x02\u1320\u1324\t\x06\x02\x02\u1321\u1323" +
		"\x07\xE7\x02\x02\u1322\u1321\x03\x02\x02\x02\u1323\u1326\x03\x02\x02\x02" +
		"\u1324\u1322\x03\x02\x02\x02\u1324\u1325\x03\x02\x02\x02\u1325\u1334\x03" +
		"\x02\x02\x02\u1326\u1324\x03\x02\x02\x02\u1327\u1331\x05f4\x02\u1328\u132A" +
		"\x07\xE7\x02\x02\u1329\u1328\x03\x02\x02\x02\u132A\u132D\x03\x02\x02\x02" +
		"\u132B\u1329\x03\x02\x02\x02\u132B\u132C\x03\x02\x02\x02\u132C\u132E\x03" +
		"\x02\x02\x02\u132D\u132B\x03\x02\x02\x02\u132E\u1330\x05f4\x02\u132F\u132B" +
		"\x03\x02\x02\x02\u1330\u1333\x03\x02\x02\x02\u1331\u132F\x03\x02\x02\x02" +
		"\u1331\u1332\x03\x02\x02\x02\u1332\u1335\x03\x02\x02\x02\u1333\u1331\x03" +
		"\x02\x02\x02\u1334\u1327\x03\x02\x02\x02\u1334\u1335\x03\x02\x02\x02\u1335" +
		"\u1337\x03\x02\x02\x02\u1336\u12EA\x03\x02\x02\x02\u1336\u12FF\x03\x02" +
		"\x02\x02\u1337\u018D\x03\x02\x02\x02\u1338\u1339\x07\xC0\x02\x02\u1339" +
		"\u133A\x05\u0212\u010A\x02\u133A\u133C\x07\xCE\x02\x02\u133B\u133D\x05" +
		"\u019C\xCF\x02\u133C\u133B\x03\x02\x02\x02\u133C\u133D\x03\x02\x02\x02" +
		"\u133D\u018F\x03\x02\x02\x02\u133E\u133F\x07\"\x02\x02\u133F\u1340\x05" +
		"\u019E\xD0\x02\u1340\u1344\x07\xCE\x02\x02\u1341\u1343\x07\xE7\x02\x02" +
		"\u1342\u1341\x03\x02\x02\x02\u1343\u1346\x03\x02\x02\x02\u1344\u1342\x03" +
		"\x02\x02\x02\u1344\u1345\x03\x02\x02\x02\u1345\u1350\x03\x02\x02\x02\u1346" +
		"\u1344\x03\x02\x02\x02\u1347\u134B\x05T+\x02\u1348\u134A\x07\xE7\x02\x02" +
		"\u1349\u1348\x03\x02\x02\x02\u134A\u134D\x03\x02\x02\x02\u134B\u1349\x03" +
		"\x02\x02\x02\u134B\u134C\x03\x02\x02\x02\u134C\u134F\x03\x02\x02\x02\u134D" +
		"\u134B\x03\x02\x02\x02\u134E\u1347\x03\x02\x02\x02\u134F\u1352\x03\x02" +
		"\x02\x02\u1350\u134E\x03\x02\x02\x02\u1350\u1351\x03\x02\x02\x02\u1351" +
		"\u1368\x03\x02\x02\x02\u1352\u1350\x03\x02\x02\x02\u1353\u1355\t\x06\x02" +
		"\x02\u1354\u1356\x05\u0212\u010A\x02\u1355\u1354\x03\x02\x02\x02\u1355" +
		"\u1356\x03\x02\x02\x02\u1356\u135E\x03\x02\x02\x02\u1357\u1359\x07\xE7" +
		"\x02\x02\u1358\u1357\x03\x02\x02\x02\u1359\u135C\x03\x02\x02\x02\u135A" +
		"\u1358\x03\x02\x02\x02\u135A\u135B\x03\x02\x02\x02\u135B\u135D\x03\x02" +
		"\x02\x02\u135C\u135A\x03\x02\x02\x02\u135D\u135F\x05\u018E\xC8\x02\u135E" +
		"\u135A\x03\x02\x02\x02\u135F\u1360\x03\x02\x02\x02\u1360\u135E\x03\x02" +
		"\x02\x02\u1360\u1361\x03\x02\x02\x02\u1361\u1363\x03\x02\x02\x02\u1362" +
		"\u1353\x03\x02\x02\x02\u1363\u1364\x03\x02\x02\x02\u1364\u1362\x03\x02" +
		"\x02\x02\u1364\u1365\x03\x02\x02\x02\u1365\u1366\x03\x02\x02\x02\u1366" +
		"\u1367\t\x06\x02\x02\u1367\u1369\x03\x02\x02\x02\u1368\u1362\x03\x02\x02" +
		"\x02\u1368\u1369\x03\x02\x02\x02\u1369\u0191\x03\x02\x02\x02\u136A\u136B" +
		"\x07#\x02\x02\u136B\u136C\x05\u019E\xD0\x02\u136C\u1370\x07\xCE\x02\x02" +
		"\u136D\u136F\x07\xE7\x02\x02\u136E\u136D\x03\x02\x02\x02\u136F\u1372\x03" +
		"\x02\x02\x02\u1370\u136E\x03\x02\x02\x02\u1370\u1371\x03\x02\x02\x02\u1371" +
		"\u137C\x03\x02\x02\x02\u1372\u1370\x03\x02\x02\x02\u1373\u1377\x05T+\x02" +
		"\u1374\u1376\x07\xE7\x02\x02\u1375\u1374\x03\x02\x02\x02\u1376\u1379\x03" +
		"\x02\x02\x02\u1377\u1375\x03\x02\x02\x02\u1377\u1378\x03\x02\x02\x02\u1378" +
		"\u137B\x03\x02\x02\x02\u1379\u1377\x03\x02\x02\x02\u137A\u1373\x03\x02" +
		"\x02\x02\u137B\u137E\x03\x02\x02\x02\u137C\u137A\x03\x02\x02\x02\u137C" +
		"\u137D\x03\x02\x02\x02\u137D\u138D\x03\x02\x02\x02\u137E\u137C\x03\x02" +
		"\x02\x02\u137F\u1380\t\x06\x02\x02\u1380\u1383\x05\u0212\u010A\x02\u1381" +
		"\u1382\x07\xE7\x02\x02\u1382\u1384\x05\u018E\xC8\x02\u1383\u1381\x03\x02" +
		"\x02\x02\u1384\u1385\x03\x02\x02\x02\u1385\u1383\x03\x02\x02\x02\u1385" +
		"\u1386\x03\x02\x02\x02\u1386\u1388\x03\x02\x02\x02\u1387\u137F\x03\x02" +
		"\x02\x02\u1388\u1389\x03\x02\x02\x02\u1389\u1387\x03\x02\x02\x02\u1389" +
		"\u138A\x03\x02\x02\x02\u138A\u138B\x03\x02\x02\x02\u138B\u138C\t\x06\x02" +
		"\x02\u138C\u138E\x03\x02\x02\x02\u138D\u1387\x03\x02\x02\x02\u138D\u138E" +
		"\x03\x02\x02\x02\u138E\u0193\x03\x02\x02\x02\u138F\u1390\x07$\x02\x02" +
		"\u1390\u1391\x05\u019E\xD0\x02\u1391\u1395\x07\xCE\x02\x02\u1392\u1394" +
		"\x07\xE7\x02\x02\u1393\u1392\x03\x02\x02\x02\u1394\u1397\x03\x02\x02\x02" +
		"\u1395\u1393\x03\x02\x02\x02\u1395\u1396\x03\x02\x02\x02\u1396\u13A1\x03" +
		"\x02\x02\x02\u1397\u1395\x03\x02\x02\x02\u1398\u139C\x05T+\x02\u1399\u139B" +
		"\x07\xE7\x02\x02\u139A\u1399\x03\x02\x02\x02\u139B\u139E\x03\x02\x02\x02" +
		"\u139C\u139A\x03\x02\x02\x02\u139C\u139D\x03\x02\x02\x02\u139D\u13A0\x03" +
		"\x02\x02\x02\u139E\u139C\x03\x02\x02\x02\u139F\u1398\x03\x02\x02\x02\u13A0" +
		"\u13A3\x03\x02\x02\x02\u13A1\u139F\x03\x02\x02\x02\u13A1\u13A2\x03\x02" +
		"\x02\x02\u13A2\u13B2\x03\x02\x02\x02\u13A3\u13A1\x03\x02\x02\x02\u13A4" +
		"\u13A5\t\x06\x02\x02\u13A5\u13A8\x05\u0212\u010A\x02\u13A6\u13A7\x07\xE7" +
		"\x02\x02\u13A7\u13A9\x05\u018E\xC8\x02\u13A8\u13A6\x03\x02\x02\x02\u13A9" +
		"\u13AA\x03\x02\x02\x02\u13AA\u13A8\x03\x02\x02\x02\u13AA\u13AB\x03\x02" +
		"\x02\x02\u13AB\u13AD\x03\x02\x02\x02\u13AC\u13A4\x03\x02\x02\x02\u13AD" +
		"\u13AE\x03\x02\x02\x02\u13AE\u13AC\x03\x02\x02\x02\u13AE\u13AF\x03\x02" +
		"\x02\x02\u13AF\u13B0\x03\x02\x02\x02\u13B0\u13B1\t\x06\x02\x02\u13B1\u13B3" +
		"\x03\x02\x02\x02\u13B2\u13AC\x03\x02\x02\x02\u13B2\u13B3\x03\x02\x02\x02" +
		"\u13B3\u0195\x03\x02\x02\x02\u13B4\u13B5\x07%\x02\x02\u13B5\u13B6\x05" +
		"\u019E\xD0\x02\u13B6\u13BA\x07\xCE\x02\x02\u13B7\u13B9\x07\xE7\x02\x02" +
		"\u13B8\u13B7\x03\x02\x02\x02\u13B9\u13BC\x03\x02\x02\x02\u13BA\u13B8\x03" +
		"\x02\x02\x02\u13BA\u13BB\x03\x02\x02\x02\u13BB\u13C6\x03\x02\x02\x02\u13BC" +
		"\u13BA\x03\x02\x02\x02\u13BD\u13C1\x05T+\x02\u13BE\u13C0\x07\xE7\x02\x02" +
		"\u13BF\u13BE\x03\x02\x02\x02\u13C0\u13C3\x03\x02\x02\x02\u13C1\u13BF\x03" +
		"\x02\x02\x02\u13C1\u13C2\x03\x02\x02\x02\u13C2\u13C5\x03\x02\x02\x02\u13C3" +
		"\u13C1\x03\x02\x02\x02\u13C4\u13BD\x03\x02\x02\x02\u13C5\u13C8\x03\x02" +
		"\x02\x02\u13C6\u13C4\x03\x02\x02\x02\u13C6\u13C7\x03\x02\x02\x02\u13C7" +
		"\u13D7\x03\x02\x02\x02\u13C8\u13C6\x03\x02\x02\x02\u13C9\u13CA\t\x06\x02" +
		"\x02\u13CA\u13CD\x05\u0212\u010A\x02\u13CB\u13CC\x07\xE7\x02\x02\u13CC" +
		"\u13CE\x05\u018E\xC8\x02\u13CD\u13CB\x03\x02\x02\x02\u13CE\u13CF\x03\x02" +
		"\x02\x02\u13CF\u13CD\x03\x02\x02\x02\u13CF\u13D0\x03\x02\x02\x02\u13D0" +
		"\u13D2\x03\x02\x02\x02\u13D1\u13C9\x03\x02\x02\x02\u13D2\u13D3\x03\x02" +
		"\x02\x02\u13D3\u13D1\x03\x02\x02\x02\u13D3\u13D4\x03\x02\x02\x02\u13D4" +
		"\u13D5\x03\x02\x02\x02\u13D5\u13D6\t\x06\x02\x02\u13D6\u13D8\x03\x02\x02" +
		"\x02\u13D7\u13D1\x03\x02\x02\x02\u13D7\u13D8\x03\x02\x02\x02\u13D8\u0197" +
		"\x03\x02\x02\x02\u13D9\u13DA\x07 \x02\x02\u13DA\u13DB\x05\u019E\xD0\x02" +
		"\u13DB\u13DF\x07\xCE\x02\x02\u13DC\u13DE\x07\xE7\x02\x02\u13DD\u13DC\x03" +
		"\x02\x02\x02\u13DE\u13E1\x03\x02\x02\x02\u13DF\u13DD\x03\x02\x02\x02\u13DF" +
		"\u13E0\x03\x02\x02\x02\u13E0\u13EB\x03\x02\x02\x02\u13E1\u13DF\x03\x02" +
		"\x02\x02\u13E2\u13E6\x05T+\x02\u13E3\u13E5\x07\xE7\x02\x02\u13E4\u13E3" +
		"\x03\x02\x02\x02\u13E5\u13E8\x03\x02\x02\x02\u13E6\u13E4\x03\x02\x02\x02" +
		"\u13E6\u13E7\x03\x02\x02\x02\u13E7\u13EA\x03\x02\x02\x02\u13E8\u13E6\x03" +
		"\x02\x02\x02\u13E9\u13E2\x03\x02\x02\x02\u13EA\u13ED\x03\x02\x02\x02\u13EB" +
		"\u13E9\x03\x02\x02\x02\u13EB\u13EC\x03\x02\x02\x02\u13EC\u142B\x03\x02" +
		"\x02\x02\u13ED\u13EB\x03\x02\x02\x02\u13EE\u13EF\x07 \x02\x02\u13EF\u13F0" +
		"\x05\u019E\xD0\x02\u13F0\u13F4\x07\xCE\x02\x02\u13F1\u13F3\x07\xE7\x02" +
		"\x02\u13F2\u13F1\x03\x02\x02\x02\u13F3\u13F6\x03\x02\x02\x02\u13F4\u13F2" +
		"\x03\x02\x02\x02\u13F4\u13F5\x03\x02\x02\x02\u13F5\u1400\x03\x02\x02\x02" +
		"\u13F6\u13F4\x03\x02\x02\x02\u13F7\u13FB\x05T+\x02\u13F8\u13FA\x07\xE7" +
		"\x02\x02\u13F9\u13F8\x03\x02\x02\x02\u13FA\u13FD\x03\x02\x02\x02\u13FB" +
		"\u13F9\x03\x02\x02\x02\u13FB\u13FC\x03\x02\x02\x02\u13FC\u13FF\x03\x02" +
		"\x02\x02\u13FD\u13FB\x03\x02\x02\x02\u13FE\u13F7\x03\x02\x02\x02\u13FF" +
		"\u1402\x03\x02\x02\x02\u1400\u13FE\x03\x02\x02\x02\u1400\u1401\x03\x02" +
		"\x02\x02\u1401\u1410\x03\x02\x02\x02\u1402\u1400\x03\x02\x02\x02\u1403" +
		"\u1404\t\x06\x02\x02\u1404\u140C\x05\u019A\xCE\x02\u1405\u1407\x07\xE7" +
		"\x02\x02\u1406\u1405\x03\x02\x02\x02\u1407\u140A\x03\x02\x02\x02\u1408" +
		"\u1406\x03\x02\x02\x02\u1408\u1409\x03\x02\x02\x02\u1409\u140B\x03\x02" +
		"\x02\x02\u140A\u1408\x03\x02\x02\x02\u140B\u140D\x05\u018E\xC8\x02\u140C" +
		"\u1408\x03\x02\x02\x02\u140D\u140E\x03\x02\x02\x02\u140E\u140C\x03\x02" +
		"\x02\x02\u140E\u140F\x03\x02\x02\x02\u140F\u1411\x03\x02\x02\x02\u1410" +
		"\u1403\x03\x02\x02\x02\u1411\u1412\x03\x02\x02\x02\u1412\u1410\x03\x02" +
		"\x02\x02\u1412\u1413\x03\x02\x02\x02\u1413\u1414\x03\x02\x02\x02\u1414" +
		"\u1418\t\x06\x02\x02\u1415\u1417\x07\xE7\x02\x02\u1416\u1415\x03\x02\x02" +
		"\x02\u1417\u141A\x03\x02\x02\x02\u1418\u1416\x03\x02\x02\x02\u1418\u1419" +
		"\x03\x02\x02\x02\u1419\u1428\x03\x02\x02\x02\u141A\u1418\x03\x02\x02\x02" +
		"\u141B\u1425\x05f4\x02\u141C\u141E\x07\xE7\x02\x02\u141D\u141C\x03\x02" +
		"\x02\x02\u141E\u1421\x03\x02\x02\x02\u141F\u141D\x03\x02\x02\x02\u141F" +
		"\u1420\x03\x02\x02\x02\u1420\u1422\x03\x02\x02\x02\u1421\u141F\x03\x02" +
		"\x02\x02\u1422\u1424\x05f4\x02\u1423\u141F\x03\x02\x02\x02\u1424\u1427" +
		"\x03\x02\x02\x02\u1425\u1423\x03\x02\x02\x02\u1425\u1426\x03\x02\x02\x02" +
		"\u1426\u1429\x03\x02\x02\x02\u1427\u1425\x03\x02\x02\x02\u1428\u141B\x03" +
		"\x02\x02\x02\u1428\u1429\x03\x02\x02\x02\u1429\u142B\x03\x02\x02\x02\u142A" +
		"\u13D9\x03\x02\x02\x02\u142A\u13EE\x03\x02\x02\x02\u142B\u0199\x03\x02" +
		"\x02\x02\u142C\u142E\n\x07\x02\x02\u142D\u142C\x03\x02\x02\x02\u142E\u142F" +
		"\x03\x02\x02\x02\u142F\u142D\x03\x02\x02\x02\u142F\u1430\x03\x02\x02\x02" +
		"\u1430\u019B\x03\x02\x02\x02\u1431\u1432\x07\xFC\x02\x02\u1432\u1433\x07" +
		"\xE5\x02\x02\u1433\u1434\x07\xCE\x02\x02\u1434\u019D\x03\x02\x02\x02\u1435" +
		"\u1437\x05\u01A0\xD1\x02\u1436\u1435\x03\x02\x02\x02\u1437\u143A\x03\x02" +
		"\x02\x02\u1438\u1436\x03\x02\x02\x02\u1438\u1439\x03\x02\x02\x02\u1439" +
		"\u1440\x03\x02\x02\x02\u143A\u1438\x03\x02\x02\x02\u143B\u143F\x07\u013E" +
		"\x02\x02\u143C\u143F\x07\u013F\x02\x02\u143D\u143F\x05\u01A2\xD2\x02\u143E" +
		"\u143B\x03\x02\x02\x02\u143E\u143C\x03\x02\x02\x02\u143E\u143D\x03\x02" +
		"\x02\x02\u143F\u1442\x03\x02\x02\x02\u1440\u143E\x03\x02\x02\x02\u1440" +
		"\u1441\x03\x02\x02\x02\u1441\u019F\x03\x02\x02\x02\u1442\u1440\x03\x02" +
		"\x02\x02\u1443\u1444\t\b\x02\x02\u1444\u01A1\x03\x02\x02\x02\u1445\u144F" +
		"\x05\u01A6\xD4\x02\u1446\u144F\x05\u01DE\xF0\x02\u1447\u144F\x05\u01A8" +
		"\xD5\x02\u1448\u144F\x05\u01AA\xD6\x02\u1449\u144F\x05\u01AC\xD7\x02\u144A" +
		"\u144F\x05\u01AE\xD8\x02\u144B\u144F\x05\u01B0\xD9\x02\u144C\u144F\x05" +
		"\u01B2\xDA\x02\u144D\u144F\x07\u0114\x02\x02\u144E\u1445\x03\x02\x02\x02" +
		"\u144E\u1446\x03\x02\x02\x02\u144E\u1447\x03\x02\x02\x02\u144E\u1448\x03" +
		"\x02\x02\x02\u144E\u1449\x03\x02\x02\x02\u144E\u144A\x03\x02\x02\x02\u144E" +
		"\u144B\x03\x02\x02\x02\u144E\u144C\x03\x02\x02\x02\u144E\u144D\x03\x02" +
		"\x02\x02\u144F\u01A3\x03\x02\x02\x02\u1450\u1457\x07\u013C\x02\x02\u1451" +
		"\u1457\x07\u013D\x02\x02\u1452\u1457\x07\u013E\x02\x02\u1453\u1457\x07" +
		"\u0141\x02\x02\u1454\u1457\x07\u013F\x02\x02\u1455\u1457\x03\x02\x02\x02" +
		"\u1456\u1450\x03\x02\x02\x02\u1456\u1451\x03\x02\x02\x02\u1456\u1452\x03" +
		"\x02\x02\x02\u1456\u1453\x03\x02\x02\x02\u1456\u1454\x03\x02\x02\x02\u1456" +
		"\u1455\x03\x02\x02\x02\u1457\u01A5\x03\x02\x02\x02\u1458\u145B\x07\u010C" +
		"\x02\x02\u1459\u145C\x07\xE0\x02\x02\u145A\u145C\x07\u014F\x02\x02\u145B" +
		"\u1459\x03\x02\x02\x02\u145B\u145A\x03\x02\x02\x02\u145B\u145C\x03\x02" +
		"\x02\x02\u145C\u1466\x03\x02\x02\x02\u145D\u145F\x07\u0121\x02\x02\u145E" +
		"\u1460\x07\xE0\x02\x02\u145F\u145E\x03\x02\x02\x02\u145F\u1460\x03\x02" +
		"\x02\x02\u1460\u1466\x03\x02\x02\x02\u1461\u1463\x07\u010D\x02\x02\u1462" +
		"\u1464\x07\xE0\x02\x02\u1463\u1462\x03\x02\x02\x02\u1463\u1464\x03\x02" +
		"\x02\x02\u1464\u1466\x03\x02\x02\x02\u1465\u1458\x03\x02\x02\x02\u1465" +
		"\u145D\x03\x02\x02\x02\u1465\u1461\x03\x02\x02\x02\u1466\u01A7\x03\x02" +
		"\x02\x02\u1467\u146A\t\t\x02\x02\u1468\u1469\x07\xCF\x02\x02\u1469\u146B" +
		"\x07\xE2\x02\x02\u146A\u1468\x03\x02\x02\x02\u146A\u146B\x03\x02\x02\x02" +
		"\u146B\u01A9\x03\x02\x02\x02\u146C\u146D\t\n\x02\x02\u146D\u01AB\x03\x02" +
		"\x02\x02\u146E\u146F\t\v\x02\x02\u146F\u01AD\x03\x02\x02\x02\u1470\u1471" +
		"\t\f\x02\x02\u1471\u01AF\x03\x02\x02\x02\u1472\u1473\t\r\x02\x02\u1473" +
		"\u01B1\x03\x02\x02\x02\u1474\u1475\t\x0E\x02\x02\u1475\u01B3\x03\x02\x02" +
		"\x02\u1476\u1477\t\x0F\x02\x02\u1477\u01B5\x03\x02\x02\x02\u1478\u1479" +
		"\t\x10\x02\x02\u1479\u01B7\x03\x02\x02\x02\u147A\u147B\t\x11\x02\x02\u147B" +
		"\u01B9\x03\x02\x02\x02\u147C\u147D\t\x12\x02\x02\u147D\u01BB\x03\x02\x02" +
		"\x02\u147E\u1481\x07\u0118\x02\x02\u147F\u1480\x07\xCF\x02\x02\u1480\u1482" +
		"\x07\xE2\x02\x02\u1481\u147F\x03\x02\x02\x02\u1481\u1482\x03\x02\x02\x02" +
		"\u1482\u148E\x03\x02\x02\x02\u1483\u1486\x07\u012B\x02\x02\u1484\u1485" +
		"\x07\xCF\x02\x02\u1485\u1487\x07\xE2\x02\x02\u1486\u1484\x03\x02\x02\x02" +
		"\u1486\u1487\x03\x02\x02\x02\u1487\u148E\x03\x02\x02\x02\u1488\u148B\x07" +
		"\u0138\x02\x02\u1489\u148A\x07\xCF\x02\x02\u148A\u148C\x07\xE2\x02\x02" +
		"\u148B\u1489\x03\x02\x02\x02\u148B\u148C\x03\x02\x02\x02\u148C\u148E\x03" +
		"\x02\x02\x02\u148D\u147E\x03\x02\x02\x02\u148D\u1483\x03\x02\x02\x02\u148D" +
		"\u1488\x03\x02\x02\x02\u148E\u01BD\x03\x02\x02\x02\u148F\u1490\t\x13\x02" +
		"\x02\u1490\u01BF\x03\x02\x02\x02\u1491\u1492\x05\u01B4\xDB\x02\u1492\u1493" +
		"\x07\xCF\x02\x02\u1493\u1494\x05\u01E6\xF4\x02\u1494\u1495\x07\xCE\x02" +
		"\x02\u1495\u1498\x03\x02\x02\x02\u1496\u1498\x07\xE3\x02\x02\u1497\u1491" +
		"\x03\x02\x02\x02\u1497\u1496\x03\x02\x02\x02\u1498\u01C1\x03\x02\x02\x02" +
		"\u1499\u149A\x05\u01B6\xDC\x02\u149A\u149B\x07\xCF\x02\x02\u149B\u149C" +
		"\x05\u01E6\xF4\x02\u149C\u14A1\x07\xCE\x02\x02\u149D\u149E\x07\xFF\x02" +
		"\x02\u149E\u149F\x05\u021A\u010E\x02\u149F\u14A0\x07\xCE\x02\x02\u14A0" +
		"\u14A2\x03\x02\x02\x02\u14A1\u149D\x03\x02\x02\x02\u14A1\u14A2\x03\x02" +
		"\x02\x02\u14A2\u01C3\x03\x02\x02\x02\u14A3\u14A4\x05\u01BA\xDE\x02\u14A4" +
		"\u14A5\x07\xCF\x02\x02\u14A5\u14A6\x05\u01E6\xF4\x02\u14A6\u14AB\x07\xCE" +
		"\x02\x02\u14A7\u14A8\x07\xFF\x02\x02\u14A8\u14A9\x05\u021A\u010E\x02\u14A9" +
		"\u14AA\x07\xCE\x02\x02\u14AA\u14AC\x03\x02\x02\x02\u14AB\u14A7\x03\x02" +
		"\x02\x02\u14AB\u14AC\x03\x02\x02\x02\u14AC\u01C5\x03\x02\x02\x02\u14AD" +
		"\u14AE\x05\u01B8\xDD\x02\u14AE\u14B1\x07\xCF\x02\x02\u14AF\u14B2\x05\u01E6" +
		"\xF4\x02\u14B0\u14B2\x05\u01E4\xF3\x02\u14B1\u14AF\x03\x02\x02\x02\u14B1" +
		"\u14B0\x03\x02\x02\x02\u14B2\u14B3\x03\x02\x02\x02\u14B3\u14B8\x07\xCE" +
		"\x02\x02\u14B4\u14B5\x07\xFF\x02\x02\u14B5\u14B6\x05\u021A\u010E\x02\u14B6" +
		"\u14B7\x07\xCE\x02\x02\u14B7\u14B9\x03\x02\x02\x02\u14B8\u14B4\x03\x02" +
		"\x02\x02\u14B8\u14B9\x03\x02\x02\x02\u14B9\u01C7\x03\x02\x02\x02\u14BA" +
		"\u14BE\x05\u01CA\xE6\x02\u14BB\u14BD\x05\u01E2\xF2\x02\u14BC\u14BB\x03" +
		"\x02\x02\x02\u14BD\u14C0\x03\x02\x02\x02\u14BE\u14BC\x03\x02\x02\x02\u14BE" +
		"\u14BF\x03\x02\x02\x02\u14BF\u01C9\x03\x02\x02\x02\u14C0\u14BE\x03\x02" +
		"\x02\x02\u14C1\u14C2\x05\u01BE\xE0\x02\u14C2\u14C6\x07\xCF\x02\x02\u14C3" +
		"\u14C5\x07\x04\x02\x02\u14C4\u14C3\x03\x02\x02\x02\u14C5\u14C8\x03\x02" +
		"\x02\x02\u14C6\u14C4\x03\x02\x02\x02\u14C6\u14C7\x03\x02\x02\x02\u14C7" +
		"\u14C9\x03\x02\x02\x02\u14C8\u14C6\x03\x02\x02\x02\u14C9\u14CA\x05\u01E6" +
		"\xF4\x02\u14CA\u14CB\x07\xCE\x02\x02\u14CB\u01CB\x03\x02\x02\x02\u14CC" +
		"\u14D0\x05\u01CE\xE8\x02\u14CD\u14CF\x05\u01E2\xF2\x02\u14CE\u14CD\x03" +
		"\x02\x02\x02\u14CF\u14D2\x03\x02\x02\x02\u14D0\u14CE\x03\x02\x02\x02\u14D0" +
		"\u14D1\x03\x02\x02\x02\u14D1\u01CD\x03\x02\x02\x02\u14D2\u14D0\x03\x02" +
		"\x02\x02\u14D3\u14D4\x05\u01BC\xDF\x02\u14D4\u14D5\x07\xCF\x02\x02\u14D5" +
		"\u14D6\x05\u01E6\xF4\x02\u14D6\u14DB\x07\xCE\x02\x02\u14D7\u14D8\x07\xFF" +
		"\x02\x02\u14D8\u14D9\x05\u021A\u010E\x02\u14D9\u14DA\x07\xCE\x02\x02\u14DA" +
		"\u14DC\x03\x02\x02\x02\u14DB\u14D7\x03\x02\x02\x02\u14DB\u14DC\x03\x02" +
		"\x02\x02\u14DC\u01CF\x03\x02\x02\x02\u14DD\u14E1\x05\u01D2\xEA\x02\u14DE" +
		"\u14E0\x05\u01D6\xEC\x02\u14DF\u14DE\x03\x02\x02\x02\u14E0\u14E3\x03";
	private static readonly _serializedATNSegment10: string =
		"\x02\x02\x02\u14E1\u14DF\x03\x02\x02\x02\u14E1\u14E2\x03\x02\x02\x02\u14E2" +
		"\u14E6\x03\x02\x02\x02\u14E3\u14E1\x03\x02\x02\x02\u14E4\u14E5\x07\xE7" +
		"\x02\x02\u14E5\u14E7\x07\u0101\x02\x02\u14E6\u14E4\x03\x02\x02\x02\u14E6" +
		"\u14E7\x03\x02\x02\x02\u14E7\u01D1\x03\x02\x02\x02\u14E8\u14E9\x05\u01D4" +
		"\xEB\x02\u14E9\u14ED\x07\xCF\x02\x02\u14EA\u14EC\x07\x04\x02\x02\u14EB" +
		"\u14EA\x03\x02\x02\x02\u14EC\u14EF\x03\x02\x02\x02\u14ED\u14EB\x03\x02" +
		"\x02\x02\u14ED\u14EE\x03\x02\x02\x02\u14EE\u14F0\x03\x02\x02\x02\u14EF" +
		"\u14ED\x03\x02\x02\x02\u14F0\u14F1\x05\u01E6\xF4\x02\u14F1\u14F2\x07\xCE" +
		"\x02\x02\u14F2\u01D3\x03\x02\x02\x02\u14F3\u14F6\x07\u0116\x02\x02\u14F4" +
		"\u14F7\x07\xE0\x02\x02\u14F5\u14F7\x07\u014F\x02\x02\u14F6\u14F4\x03\x02" +
		"\x02\x02\u14F6\u14F5\x03\x02\x02\x02\u14F6\u14F7\x03\x02\x02\x02\u14F7" +
		"\u1501\x03\x02\x02\x02\u14F8\u14FA\x07\u012A\x02\x02\u14F9\u14FB\x07\xE0" +
		"\x02\x02\u14FA\u14F9\x03\x02\x02\x02\u14FA\u14FB\x03\x02\x02\x02\u14FB" +
		"\u1501\x03\x02\x02\x02\u14FC\u14FE\x07\u0117\x02\x02\u14FD\u14FF\x07\xE0" +
		"\x02\x02\u14FE\u14FD\x03\x02\x02\x02\u14FE\u14FF\x03\x02\x02\x02\u14FF" +
		"\u1501\x03\x02\x02\x02\u1500\u14F3\x03\x02\x02\x02\u1500\u14F8\x03\x02" +
		"\x02\x02\u1500\u14FC\x03\x02\x02\x02\u1501\u01D5\x03\x02\x02\x02\u1502" +
		"\u1503\x07\xFD\x02\x02\u1503\u1504\x07\xCF\x02\x02\u1504\u1505\x05\u01E6" +
		"\xF4\x02\u1505\u1506\x07\xCE\x02\x02\u1506\u1514\x03\x02\x02\x02\u1507" +
		"\u1508\t\x14\x02\x02\u1508\u1509\x07\xCF\x02\x02\u1509\u150A\x07\xE5\x02" +
		"\x02\u150A\u1514\x07\xCE\x02\x02\u150B\u150F\t\x15\x02\x02\u150C\u150E" +
		"\v\x02\x02\x02\u150D\u150C\x03\x02\x02\x02\u150E\u1511\x03\x02\x02\x02" +
		"\u150F\u1510\x03\x02\x02\x02\u150F\u150D\x03\x02\x02\x02\u1510\u1512\x03" +
		"\x02\x02\x02\u1511\u150F\x03\x02\x02\x02\u1512\u1514\x07\xCE\x02\x02\u1513" +
		"\u1502\x03\x02\x02\x02\u1513\u1507\x03\x02\x02\x02\u1513\u150B\x03\x02" +
		"\x02\x02\u1514\u01D7\x03\x02\x02\x02\u1515\u1516\x07\xFD\x02\x02\u1516" +
		"\u1517\x07\xCF\x02\x02\u1517\u1518\x05\u01E6\xF4\x02\u1518\u1519\x07\xCE" +
		"\x02\x02\u1519\u1527\x03\x02\x02\x02\u151A\u151B\t\x14\x02\x02\u151B\u151C" +
		"\x07\xCF\x02\x02\u151C\u151D\x07\xE5\x02\x02\u151D\u1527\x07\xCE\x02\x02" +
		"\u151E\u1522\t\x15\x02\x02\u151F\u1521\v\x02\x02\x02\u1520\u151F\x03\x02" +
		"\x02\x02\u1521\u1524\x03\x02\x02\x02\u1522\u1523\x03\x02\x02\x02\u1522" +
		"\u1520\x03\x02\x02\x02\u1523\u1525\x03\x02\x02\x02\u1524\u1522\x03\x02" +
		"\x02\x02\u1525\u1527\x07\xCE\x02\x02\u1526\u1515\x03\x02\x02\x02\u1526" +
		"\u151A\x03\x02\x02\x02\u1526\u151E\x03\x02\x02\x02\u1527\u01D9\x03\x02" +
		"\x02\x02\u1528\u152C\x05\u01DC\xEF\x02\u1529\u152B\x05\u01E2\xF2\x02\u152A" +
		"\u1529\x03\x02\x02\x02\u152B\u152E\x03\x02\x02\x02\u152C\u152A\x03\x02" +
		"\x02\x02\u152C\u152D\x03\x02\x02\x02\u152D\u01DB\x03\x02\x02\x02\u152E" +
		"\u152C\x03\x02\x02\x02\u152F\u1530\x05\u01E0\xF1\x02\u1530\u1531\x07\xCF" +
		"\x02\x02\u1531\u1532\x05\u01E6\xF4\x02\u1532\u1537\x07\xCE\x02\x02\u1533" +
		"\u1534\x07\xFF\x02\x02\u1534\u1535\x05\u021A\u010E\x02\u1535\u1536\x07" +
		"\xCE\x02\x02\u1536\u1538\x03\x02\x02\x02\u1537\u1533\x03\x02\x02\x02\u1537" +
		"\u1538\x03\x02\x02\x02\u1538\u01DD\x03\x02\x02\x02\u1539\u153C\x07\u010B" +
		"\x02\x02\u153A\u153B\x07\xCF\x02\x02\u153B\u153D\x07\xE1\x02\x02\u153C" +
		"\u153A\x03\x02\x02\x02\u153C\u153D\x03\x02\x02\x02\u153D\u1544\x03\x02" +
		"\x02\x02\u153E\u1541\x07\u0120\x02\x02\u153F\u1540\x07\xCF\x02\x02\u1540" +
		"\u1542\x07\xE1\x02\x02\u1541\u153F\x03\x02\x02\x02\u1541\u1542\x03\x02" +
		"\x02\x02\u1542\u1544\x03\x02\x02\x02\u1543\u1539\x03\x02\x02\x02\u1543" +
		"\u153E\x03\x02\x02\x02\u1544\u01DF\x03\x02\x02\x02\u1545\u1548\x07\u0115" +
		"\x02\x02\u1546\u1547\x07\xCF\x02\x02\u1547\u1549\x07\xE1\x02\x02\u1548" +
		"\u1546\x03\x02\x02\x02\u1548\u1549\x03\x02\x02\x02\u1549\u1555\x03\x02" +
		"\x02\x02\u154A\u154D\x07\u0129\x02\x02\u154B\u154C\x07\xCF\x02\x02\u154C" +
		"\u154E\x07\xE1\x02\x02\u154D\u154B\x03\x02\x02\x02\u154D\u154E\x03\x02" +
		"\x02\x02\u154E\u1555\x03\x02\x02\x02\u154F\u1552\x07\u0139\x02\x02\u1550" +
		"\u1551\x07\xCF\x02\x02\u1551\u1553\x07\xE1\x02\x02\u1552\u1550\x03\x02" +
		"\x02\x02\u1552\u1553\x03\x02\x02\x02\u1553\u1555\x03\x02\x02\x02\u1554" +
		"\u1545\x03\x02\x02\x02\u1554\u154A\x03\x02\x02\x02\u1554\u154F\x03\x02" +
		"\x02\x02\u1555\u01E1\x03\x02\x02\x02\u1556\u1557\x07\xC7\x02\x02\u1557" +
		"\u155A\x05\u0212\u010A\x02\u1558\u155A\x07\xFD\x02\x02\u1559\u1556\x03" +
		"\x02\x02\x02\u1559\u1558\x03\x02\x02\x02\u155A\u155B\x03\x02\x02\x02\u155B" +
		"\u155F\x07\xCF\x02\x02\u155C\u155E\x07\x04\x02\x02\u155D\u155C\x03\x02" +
		"\x02\x02\u155E\u1561\x03\x02\x02\x02\u155F\u155D\x03\x02\x02\x02\u155F" +
		"\u1560\x03\x02\x02\x02\u1560\u1564\x03\x02\x02\x02\u1561\u155F\x03\x02" +
		"\x02\x02\u1562\u1565\x05\u0212\u010A\x02\u1563\u1565\x07\xE7\x02\x02\u1564" +
		"\u1562\x03\x02\x02\x02\u1564\u1563\x03\x02\x02\x02\u1565\u1566\x03\x02" +
		"\x02\x02\u1566\u1564\x03\x02\x02\x02\u1566\u1567\x03\x02\x02\x02\u1567" +
		"\u1568\x03\x02\x02\x02\u1568\u1576\x07\xCE\x02\x02\u1569\u156A\t\x14\x02" +
		"\x02\u156A\u156B\x07\xCF\x02\x02\u156B\u156C\x07\xE5\x02\x02\u156C\u1576" +
		"\x07\xCE\x02\x02\u156D\u1571\t\x15\x02\x02\u156E\u1570\v\x02\x02\x02\u156F" +
		"\u156E\x03\x02\x02\x02\u1570\u1573\x03\x02\x02\x02\u1571\u1572\x03\x02" +
		"\x02\x02\u1571\u156F\x03\x02\x02\x02\u1572\u1574\x03\x02\x02\x02\u1573" +
		"\u1571\x03\x02\x02\x02\u1574\u1576\x07\xCE\x02\x02\u1575\u1559\x03\x02" +
		"\x02\x02\u1575\u1569\x03\x02\x02\x02\u1575\u156D\x03\x02\x02\x02\u1576" +
		"\u01E3\x03\x02\x02\x02\u1577\u1578\x07\u014E\x02\x02\u1578\u1579\x07\xD2" +
		"\x02\x02\u1579\u157A\x07\xE5\x02\x02\u157A\u01E5\x03\x02\x02\x02\u157B" +
		"\u157C\x07\u0151\x02\x02\u157C\u01E7\x03\x02\x02\x02\u157D\u157E\x07\xCD" +
		"\x02\x02\u157E\u1586\x07\xCE\x02\x02\u157F\u1581\x07\x04\x02\x02\u1580" +
		"\u157F\x03\x02\x02\x02\u1581\u1584\x03\x02\x02\x02\u1582\u1580\x03\x02" +
		"\x02\x02\u1582\u1583\x03\x02\x02\x02\u1583\u1585\x03\x02\x02\x02\u1584" +
		"\u1582\x03\x02\x02\x02\u1585\u1587\x05\u01EA\xF6\x02\u1586\u1582\x03\x02" +
		"\x02\x02\u1586\u1587\x03\x02\x02\x02\u1587\u159C\x03\x02\x02\x02\u1588" +
		"\u1589\x07\xCD\x02\x02\u1589\u158E\x05\u0212\u010A\x02\u158A\u158D\x07" +
		"\xCF\x02\x02\u158B\u158D\x05\u0212\u010A\x02\u158C\u158A\x03\x02\x02\x02" +
		"\u158C\u158B\x03\x02\x02\x02\u158D\u1590\x03\x02\x02\x02\u158E\u158C\x03" +
		"\x02\x02\x02\u158E\u158F\x03\x02\x02\x02\u158F\u1591\x03\x02\x02\x02\u1590" +
		"\u158E\x03\x02\x02\x02\u1591\u1599\x07\xCE\x02\x02\u1592\u1594\x07\x04" +
		"\x02\x02\u1593\u1592\x03\x02\x02\x02\u1594\u1597\x03\x02\x02\x02\u1595" +
		"\u1593\x03\x02\x02\x02\u1595\u1596\x03\x02\x02\x02\u1596\u1598\x03\x02" +
		"\x02\x02\u1597\u1595\x03\x02\x02\x02\u1598\u159A\x05\u01EA\xF6\x02\u1599" +
		"\u1595\x03\x02\x02\x02\u1599\u159A\x03\x02\x02\x02\u159A\u159C\x03\x02" +
		"\x02\x02\u159B\u157D\x03\x02\x02\x02\u159B\u1588\x03\x02\x02\x02\u159C" +
		"\u01E9\x03\x02\x02\x02\u159D\u159E\x07\xCD\x02\x02\u159E\u15A3\x05\u0212" +
		"\u010A\x02\u159F\u15A2\x07\xCF\x02\x02\u15A0\u15A2\x05\u0212\u010A\x02" +
		"\u15A1\u159F\x03\x02\x02\x02\u15A1\u15A0\x03\x02\x02\x02\u15A2\u15A5\x03" +
		"\x02\x02\x02\u15A3\u15A1\x03\x02\x02\x02\u15A3\u15A4\x03\x02\x02\x02\u15A4" +
		"\u15A6\x03\x02\x02\x02\u15A5\u15A3\x03\x02\x02\x02\u15A6\u15A7\x07\xCE" +
		"\x02\x02\u15A7\u01EB\x03\x02\x02\x02\u15A8\u15AA\x07\xC1\x02\x02\u15A9" +
		"\u15AB\x05\u0212\u010A\x02\u15AA\u15A9\x03\x02\x02\x02\u15AA\u15AB\x03" +
		"\x02\x02\x02\u15AB\u15AC\x03\x02\x02\x02\u15AC\u15B3\x07\xCE\x02\x02\u15AD" +
		"\u15AF\x07\xC2\x02\x02\u15AE\u15B0\x05\u0212\u010A\x02\u15AF\u15AE\x03" +
		"\x02\x02\x02\u15AF\u15B0\x03\x02\x02\x02\u15B0\u15B1\x03\x02\x02\x02\u15B1" +
		"\u15B3\x07\xCE\x02\x02\u15B2\u15A8\x03\x02\x02\x02\u15B2\u15AD\x03\x02" +
		"\x02\x02\u15B3\u01ED\x03\x02\x02\x02\u15B4\u15BC\x07\xF6\x02\x02\u15B5" +
		"\u15BC\x07\xF4\x02\x02\u15B6\u15B8\x07\xF5\x02\x02\u15B7\u15B9\x07\xEA" +
		"\x02\x02\u15B8\u15B7\x03\x02\x02\x02\u15B8\u15B9\x03\x02\x02\x02\u15B9" +
		"\u15BA\x03\x02\x02\x02\u15BA\u15BC\x07\x02\x02\x03\u15BB\u15B4\x03\x02" +
		"\x02\x02\u15BB\u15B5\x03\x02\x02\x02\u15BB\u15B6\x03\x02\x02\x02\u15BC" +
		"\u01EF\x03\x02\x02\x02\u15BD\u15BF\x07\u011F\x02\x02\u15BE\u15C0\x05\u0212" +
		"\u010A\x02\u15BF\u15BE\x03\x02\x02\x02\u15BF\u15C0\x03\x02\x02\x02\u15C0" +
		"\u15D6\x03\x02\x02\x02\u15C1\u15CB\x05\u0212\u010A\x02\u15C2\u15C6\x07" +
		"\xE7\x02\x02\u15C3\u15C5\x07\x04\x02\x02\u15C4\u15C3\x03\x02\x02\x02\u15C5" +
		"\u15C8\x03\x02\x02\x02\u15C6\u15C4\x03\x02\x02\x02\u15C6\u15C7\x03\x02" +
		"\x02\x02\u15C7\u15CA\x03\x02\x02\x02\u15C8\u15C6\x03\x02\x02\x02\u15C9" +
		"\u15C2\x03\x02\x02\x02\u15CA\u15CD\x03\x02\x02\x02\u15CB\u15C9\x03\x02" +
		"\x02\x02\u15CB\u15CC\x03\x02\x02\x02\u15CC\u15D1\x03\x02\x02\x02\u15CD" +
		"\u15CB\x03\x02\x02\x02\u15CE\u15D0\x07\xE7\x02\x02\u15CF\u15CE\x03\x02" +
		"\x02\x02\u15D0\u15D3\x03\x02\x02\x02\u15D1\u15CF\x03\x02\x02\x02\u15D1" +
		"\u15D2\x03\x02\x02\x02\u15D2\u15D5\x03\x02\x02\x02\u15D3\u15D1\x03\x02" +
		"\x02\x02\u15D4\u15C1\x03\x02\x02\x02\u15D5\u15D8\x03\x02\x02\x02\u15D6" +
		"\u15D4\x03\x02\x02\x02\u15D6\u15D7\x03\x02\x02\x02\u15D7\u15D9\x03\x02" +
		"\x02\x02\u15D8\u15D6\x03\x02\x02\x02\u15D9\u15E5\x07\xCE\x02\x02\u15DA" +
		"\u15E0\x07\u011F\x02\x02\u15DB\u15DF\x05\u0212\u010A\x02\u15DC\u15DF\x07" +
		"\xE7\x02\x02\u15DD\u15DF\x07\x04\x02\x02\u15DE\u15DB\x03\x02\x02\x02\u15DE" +
		"\u15DC\x03\x02\x02\x02\u15DE\u15DD\x03\x02\x02\x02\u15DF\u15E2\x03\x02" +
		"\x02\x02\u15E0\u15DE\x03\x02\x02\x02\u15E0\u15E1\x03\x02\x02\x02\u15E1" +
		"\u15E3\x03\x02\x02\x02\u15E2\u15E0\x03\x02\x02\x02\u15E3\u15E5\x07\x02" +
		"\x02\x03\u15E4\u15BD\x03\x02\x02\x02\u15E4\u15DA\x03\x02\x02\x02\u15E5" +
		"\u01F1\x03\x02\x02\x02\u15E6\u15EB\x07\xEE\x02\x02\u15E7\u15EC\x05\u0212" +
		"\u010A\x02\u15E8\u15EC\x07\xCF\x02\x02\u15E9\u15EC\x07\u0151\x02\x02\u15EA" +
		"\u15EC\x07\xE7\x02\x02\u15EB\u15E7\x03\x02\x02\x02\u15EB\u15E8\x03\x02" +
		"\x02\x02\u15EB\u15E9\x03\x02\x02\x02\u15EB\u15EA\x03\x02\x02\x02\u15EC" +
		"\u15ED\x03\x02\x02\x02\u15ED\u15EB\x03\x02\x02\x02\u15ED\u15EE\x03\x02" +
		"\x02\x02\u15EE\u15EF\x03\x02\x02\x02\u15EF\u15FD\x07\xCE\x02\x02\u15F0" +
		"\u15F8\x07\xEE\x02\x02\u15F1\u15F7\x05\u0212\u010A\x02\u15F2\u15F7\x07" +
		"\xCF\x02\x02\u15F3\u15F7\x07\u0151\x02\x02\u15F4\u15F7\x07\xE7\x02\x02" +
		"\u15F5\u15F7\x07\x04\x02\x02\u15F6\u15F1\x03\x02\x02\x02\u15F6\u15F2\x03" +
		"\x02\x02\x02\u15F6\u15F3\x03\x02\x02\x02\u15F6\u15F4\x03\x02\x02\x02\u15F6" +
		"\u15F5\x03\x02\x02\x02\u15F7\u15FA\x03\x02\x02\x02\u15F8\u15F6\x03\x02" +
		"\x02\x02\u15F8\u15F9\x03\x02\x02\x02\u15F9\u15FB\x03\x02\x02\x02\u15FA" +
		"\u15F8\x03\x02\x02\x02\u15FB\u15FD\x07\x02\x02\x03\u15FC\u15E6\x03\x02" +
		"\x02\x02\u15FC\u15F0\x03\x02\x02\x02\u15FD\u01F3\x03\x02\x02\x02\u15FE" +
		"\u15FF\x07\xED\x02\x02\u15FF\u1600\x05\u0212\u010A\x02\u1600\u1601\x07" +
		"\xCE\x02\x02\u1601\u01F5\x03\x02\x02\x02\u1602\u1606\x07\u0108\x02\x02" +
		"\u1603\u1607\x05\u0212\u010A\x02\u1604\u1607\x07\xCF\x02\x02\u1605\u1607" +
		"\x07\xE7\x02\x02\u1606\u1603\x03\x02\x02\x02\u1606\u1604\x03\x02\x02\x02" +
		"\u1606\u1605\x03\x02\x02\x02\u1607\u1608\x03\x02\x02\x02\u1608\u1606\x03" +
		"\x02\x02\x02\u1608\u1609\x03\x02\x02\x02\u1609\u160A\x03\x02\x02\x02\u160A" +
		"\u160C\x07\xCE\x02\x02\u160B\u160D\x05\u01F8\xFD\x02\u160C\u160B\x03\x02" +
		"\x02\x02\u160C\u160D\x03\x02\x02\x02\u160D\u01F7\x03\x02\x02\x02\u160E" +
		"\u1612\x07\u0108\x02\x02\u160F\u1613\x05\u0212\u010A\x02\u1610\u1613\x07" +
		"\xCF\x02\x02\u1611\u1613\x07\xE7\x02\x02\u1612\u160F\x03\x02\x02\x02\u1612" +
		"\u1610\x03\x02\x02\x02\u1612\u1611\x03\x02\x02\x02\u1613\u1614\x03\x02" +
		"\x02\x02\u1614\u1612\x03\x02\x02\x02\u1614\u1615\x03\x02\x02\x02\u1615" +
		"\u1616\x03\x02\x02\x02\u1616\u1617\x07\xCE\x02\x02\u1617\u01F9\x03\x02" +
		"\x02\x02\u1618\u161C\x07\xC5\x02\x02\u1619\u161B\x07\xE7\x02\x02\u161A" +
		"\u1619\x03\x02\x02\x02\u161B\u161E\x03\x02\x02\x02\u161C\u161A\x03\x02" +
		"\x02\x02\u161C\u161D\x03\x02\x02\x02\u161D\u1620\x03\x02\x02\x02\u161E" +
		"\u161C\x03\x02\x02\x02\u161F\u1621\x05\u0212\u010A\x02\u1620\u161F\x03" +
		"\x02\x02\x02\u1620\u1621\x03\x02\x02\x02\u1621\u1631\x03\x02\x02\x02\u1622" +
		"\u1626\x07\xE7\x02\x02\u1623\u1625\x07\x04\x02\x02\u1624\u1623\x03\x02" +
		"\x02\x02\u1625\u1628\x03\x02\x02\x02\u1626\u1624\x03\x02\x02\x02\u1626" +
		"\u1627\x03\x02\x02\x02\u1627\u162A\x03\x02\x02\x02\u1628\u1626\x03\x02" +
		"\x02\x02\u1629\u1622\x03\x02\x02\x02\u162A\u162D\x03\x02\x02\x02\u162B" +
		"\u1629\x03\x02\x02\x02\u162B\u162C\x03\x02\x02\x02\u162C\u162E\x03\x02" +
		"\x02\x02\u162D\u162B\x03\x02\x02\x02\u162E\u1630\x05\u0212\u010A\x02\u162F" +
		"\u162B\x03\x02\x02\x02\u1630\u1633\x03\x02\x02\x02\u1631\u162F\x03\x02" +
		"\x02\x02\u1631\u1632\x03\x02\x02\x02\u1632\u1637\x03\x02\x02\x02\u1633" +
		"\u1631\x03\x02\x02\x02\u1634\u1636\x07\xE7\x02\x02\u1635\u1634\x03\x02" +
		"\x02\x02\u1636\u1639\x03\x02\x02\x02\u1637\u1635\x03\x02\x02\x02\u1637" +
		"\u1638\x03\x02\x02\x02\u1638\u163A\x03\x02\x02\x02\u1639\u1637\x03\x02" +
		"\x02\x02\u163A\u1647\x07\xCE\x02\x02\u163B\u163F\x07\xC5\x02\x02\u163C" +
		"\u163E\x07\xE7\x02\x02\u163D\u163C\x03\x02\x02\x02\u163E\u1641\x03\x02" +
		"\x02\x02\u163F\u163D\x03\x02\x02\x02\u163F\u1640\x03\x02\x02\x02\u1640" +
		"\u1643\x03\x02\x02\x02\u1641\u163F\x03\x02\x02\x02\u1642\u1644\x05\u0212" +
		"\u010A\x02\u1643\u1642\x03\x02\x02\x02\u1643\u1644\x03\x02\x02\x02\u1644" +
		"\u1645\x03\x02\x02\x02\u1645\u1647\x07\x02\x02\x03\u1646\u1618\x03\x02" +
		"\x02\x02\u1646\u163B\x03\x02\x02\x02\u1647\u01FB\x03\x02\x02\x02\u1648" +
		"\u164A\x07\xC6\x02\x02\u1649\u164B\n\x16\x02\x02\u164A\u1649\x03\x02\x02" +
		"\x02\u164B\u164C\x03\x02\x02\x02\u164C\u164A\x03\x02\x02\x02\u164C\u164D" +
		"\x03\x02\x02\x02\u164D\u164E\x03\x02\x02\x02\u164E\u164F\x07\xCE\x02\x02" +
		"\u164F\u01FD\x03\x02\x02\x02\u1650\u1653\x07\xCC\x02\x02\u1651\u1654\x05" +
		"\u0212\u010A\x02\u1652\u1654\x07\xE7\x02\x02\u1653\u1651\x03\x02\x02\x02" +
		"\u1653\u1652\x03\x02\x02\x02\u1654\u1655\x03\x02\x02\x02\u1655\u1653\x03" +
		"\x02\x02\x02\u1655\u1656\x03\x02\x02\x02\u1656\u1657\x03\x02\x02\x02\u1657" +
		"\u165D\x07\xCE\x02\x02\u1658\u1659\x07\xCC\x02\x02\u1659\u165A\x05\u0212" +
		"\u010A\x02\u165A\u165B\x07\x02\x02\x03\u165B\u165D\x03\x02\x02\x02\u165C" +
		"\u1650\x03\x02\x02\x02\u165C\u1658\x03\x02\x02\x02\u165D\u01FF\x03\x02" +
		"\x02\x02\u165E\u165F\x07\xFA\x02\x02\u165F\u1660\x05\u0212\u010A\x02\u1660" +
		"\u1661\x07\xCE\x02\x02\u1661\u1667\x03\x02\x02\x02\u1662\u1663\x07\xFB" +
		"\x02\x02\u1663\u1664\x05\u0212\u010A\x02\u1664\u1665\x07\xCE\x02\x02\u1665" +
		"\u1667\x03\x02\x02\x02\u1666\u165E\x03\x02\x02\x02\u1666\u1662\x03\x02" +
		"\x02\x02\u1667\u0201\x03\x02\x02\x02\u1668\u1669\x07\xF1\x02\x02\u1669" +
		"\u166A\x07\xCF\x02\x02\u166A\u166B\x07\xE5\x02\x02\u166B\u1672\x07\xCE" +
		"\x02\x02\u166C\u166D\x07\xF1\x02\x02\u166D\u166E\x07\xCF\x02\x02\u166E" +
		"\u166F\x05\u0212\u010A\x02\u166F\u1670\x07\xCE\x02\x02\u1670\u1672\x03" +
		"\x02\x02\x02\u1671\u1668\x03\x02\x02\x02\u1671\u166C\x03\x02\x02\x02\u1672" +
		"\u0203\x03\x02\x02\x02\u1673\u1674\x07\u0106\x02\x02\u1674\u1675\x05\u0212" +
		"\u010A\x02\u1675\u1676\x07\xCE\x02\x02\u1676\u0205\x03\x02\x02\x02\u1677" +
		"\u1678\x07\u0107\x02\x02\u1678\u1679\x05\u0212\u010A\x02\u1679\u167A\x07" +
		"\xCE\x02\x02\u167A\u0207\x03\x02\x02\x02\u167B\u1685\x05\u020A\u0106\x02" +
		"\u167C\u167E\x07\xE7\x02\x02\u167D\u167C\x03\x02\x02\x02\u167E\u1681\x03" +
		"\x02\x02\x02\u167F\u167D\x03\x02\x02\x02\u167F\u1680\x03\x02\x02\x02\u1680" +
		"\u1682\x03\x02\x02\x02\u1681\u167F\x03\x02\x02\x02\u1682\u1684\x05\u020A" +
		"\u0106\x02\u1683\u167F\x03\x02\x02\x02\u1684\u1687\x03\x02\x02\x02\u1685" +
		"\u1683\x03\x02\x02\x02\u1685\u1686\x03\x02\x02\x02\u1686\u0209\x03\x02" +
		"\x02\x02\u1687\u1685\x03\x02\x02\x02\u1688\u1689\x07\xC7\x02\x02\u1689" +
		"\u168A\x05\u0212\u010A\x02\u168A\u168B\t\x17\x02\x02\u168B\u1691\x05\u0212" +
		"\u010A\x02\u168C\u1690\x07\xE7\x02\x02\u168D\u1690\x07\xCF\x02\x02\u168E" +
		"\u1690\x05\u0212\u010A\x02\u168F\u168C\x03\x02\x02\x02\u168F\u168D\x03" +
		"\x02\x02\x02\u168F\u168E\x03\x02\x02\x02\u1690\u1693\x03\x02\x02\x02\u1691" +
		"\u168F\x03\x02\x02\x02\u1691\u1692\x03\x02\x02\x02\u1692\u1694\x03\x02" +
		"\x02\x02\u1693\u1691\x03\x02\x02\x02\u1694\u1695\x07\xCE\x02\x02\u1695" +
		"\u16A0\x03\x02\x02\x02\u1696\u169A\x07\u0104\x02\x02\u1697\u1699\v\x02" +
		"\x02\x02\u1698\u1697\x03\x02\x02\x02\u1699\u169C\x03\x02\x02\x02\u169A" +
		"\u169B\x03\x02\x02\x02\u169A\u1698\x03\x02\x02\x02\u169B\u169D\x03\x02" +
		"\x02\x02\u169C\u169A\x03\x02\x02\x02\u169D\u16A0\x07\xCE\x02\x02\u169E" +
		"\u16A0\x07\xF7\x02\x02\u169F\u1688\x03\x02\x02\x02\u169F\u1696\x03\x02" +
		"\x02\x02\u169F\u169E\x03\x02\x02\x02\u16A0\u020B\x03\x02\x02\x02\u16A1" +
		"\u16A5\x07\xBF\x02\x02\u16A2\u16A6\x05\u0212\u010A\x02\u16A3\u16A6\x07" +
		"\xCF\x02\x02\u16A4\u16A6\x07\xE7\x02\x02\u16A5\u16A2\x03\x02\x02\x02\u16A5" +
		"\u16A3\x03\x02\x02\x02\u16A5\u16A4\x03\x02\x02\x02\u16A6\u16A7\x03\x02" +
		"\x02\x02\u16A7\u16A5\x03\x02\x02\x02\u16A7\u16A8\x03\x02\x02\x02\u16A8" +
		"\u16A9\x03\x02\x02\x02\u16A9\u16B5\x07\xCE\x02\x02\u16AA\u16B0\x07\xBF" +
		"\x02\x02\u16AB\u16AF\x05\u0212\u010A\x02\u16AC\u16AF\x07\xCF\x02\x02\u16AD" +
		"\u16AF\x07\xE7\x02\x02\u16AE\u16AB\x03\x02\x02\x02\u16AE\u16AC\x03\x02" +
		"\x02\x02\u16AE\u16AD\x03\x02\x02\x02\u16AF\u16B2\x03\x02\x02\x02\u16B0" +
		"\u16AE\x03\x02\x02\x02\u16B0\u16B1\x03\x02\x02\x02\u16B1\u16B3\x03\x02" +
		"\x02\x02\u16B2\u16B0\x03\x02\x02\x02\u16B3\u16B5\x07\x02\x02\x03\u16B4" +
		"\u16A1\x03\x02\x02\x02\u16B4\u16AA\x03\x02\x02\x02\u16B5\u020D\x03\x02" +
		"\x02\x02\u16B6\u16B8\x07\xC3\x02\x02\u16B7\u16B9\x05\u0212\u010A\x02\u16B8" +
		"\u16B7\x03\x02\x02\x02\u16B8\u16B9\x03\x02\x02\x02\u16B9\u16BA\x03\x02" +
		"\x02\x02\u16BA\u16BB\x07\xCE\x02\x02\u16BB\u020F\x03\x02\x02\x02\u16BC" +
		"\u16BE\x05\u0212\u010A\x02\u16BD\u16BF\x07\xE7\x02\x02\u16BE\u16BD\x03" +
		"\x02\x02\x02\u16BE\u16BF\x03\x02\x02\x02\u16BF\u16C1\x03\x02\x02\x02\u16C0" +
		"\u16BC\x03\x02\x02\x02\u16C1\u16C2\x03\x02\x02\x02\u16C2\u16C0\x03\x02" +
		"\x02\x02\u16C2\u16C3\x03\x02\x02\x02\u16C3\u0211\x03\x02\x02\x02\u16C4" +
		"\u16CB\x07\xE6\x02\x02\u16C5\u16C7\x07\x04\x02\x02\u16C6\u16C5\x03\x02" +
		"\x02\x02\u16C7\u16C8\x03\x02\x02\x02\u16C8\u16C6\x03\x02\x02\x02\u16C8" +
		"\u16C9\x03\x02\x02\x02\u16C9\u16CA\x03\x02\x02\x02\u16CA\u16CC\x07\xE5" +
		"\x02\x02\u16CB\u16C6\x03\x02\x02\x02\u16CB\u16CC\x03\x02\x02\x02\u16CC" +
		"\u16F2\x03\x02\x02\x02\u16CD\u16D4\x05\u021A\u010E\x02\u16CE\u16D0\x07" +
		"\x04\x02\x02\u16CF\u16CE\x03\x02\x02\x02\u16D0\u16D1\x03\x02\x02\x02\u16D1" +
		"\u16CF\x03\x02\x02\x02\u16D1\u16D2\x03\x02\x02\x02\u16D2\u16D3\x03\x02" +
		"\x02\x02\u16D3\u16D5\x07\xE5\x02\x02\u16D4\u16CF\x03\x02\x02\x02\u16D4" +
		"\u16D5\x03\x02\x02\x02\u16D5\u16F2\x03\x02\x02\x02\u16D6\u16F2\x07\xE5" +
		"\x02\x02\u16D7\u16D8\x07\xCA\x02\x02\u16D8\u16D9\x05\u0212\u010A\x02\u16D9" +
		"\u16DA\x07\xCE\x02\x02\u16DA\u16F2\x03\x02\x02\x02\u16DB\u16DD\x07\x04" +
		"\x02\x02\u16DC\u16DB\x03\x02\x02\x02\u16DD\u16E0\x03\x02\x02\x02\u16DE" +
		"\u16DC\x03\x02\x02\x02\u16DE\u16DF\x03\x02\x02\x02\u16DF\u16E1\x03\x02" +
		"\x02\x02\u16E0\u16DE\x03\x02\x02\x02\u16E1\u16E5\x07\xCF\x02\x02\u16E2" +
		"\u16E4\x07\x04\x02\x02\u16E3\u16E2\x03\x02\x02\x02\u16E4\u16E7\x03\x02" +
		"\x02\x02\u16E5\u16E3\x03\x02\x02\x02\u16E5\u16E6\x03\x02\x02\x02\u16E6" +
		"\u16F2\x03\x02\x02\x02\u16E7\u16E5\x03\x02\x02\x02\u16E8\u16EC\x07\xD0" +
		"\x02\x02\u16E9\u16EB\x07\x04\x02\x02\u16EA\u16E9\x03\x02\x02\x02\u16EB" +
		"\u16EE\x03\x02\x02\x02\u16EC\u16EA\x03\x02\x02\x02\u16EC\u16ED\x03\x02" +
		"\x02\x02\u16ED\u16F2\x03\x02\x02\x02\u16EE\u16EC\x03\x02\x02\x02\u16EF" +
		"\u16F2\x07\xD8\x02\x02\u16F0\u16F2\x07\u0151\x02\x02\u16F1\u16C4\x03\x02" +
		"\x02\x02\u16F1\u16CD\x03\x02\x02\x02\u16F1\u16D6\x03\x02\x02\x02\u16F1" +
		"\u16D7\x03\x02\x02\x02\u16F1\u16DE\x03\x02\x02\x02\u16F1\u16E8\x03\x02" +
		"\x02\x02\u16F1\u16EF\x03\x02\x02\x02\u16F1\u16F0\x03\x02\x02\x02\u16F2" +
		"\u0213\x03\x02\x02\x02\u16F3\u16F4\x07\xDF\x02\x02\u16F4\u0215\x03\x02" +
		"\x02\x02\u16F5\u16F6\x07\xCE\x02\x02\u16F6\u0217\x03\x02\x02\x02\u16F7" +
		"\u16F8\t\x18\x02\x02\u16F8\u0219\x03\x02\x02\x02\u16F9\u1718\x05\u021E" +
		"\u0110\x02\u16FA\u1718\x07\xE8\x02\x02\u16FB\u1718\x07\xEB\x02\x02\u16FC" +
		"\u1718\x07\xE9\x02\x02\u16FD\u1718\x07\xD0\x02\x02\u16FE\u16FF\x07\xD4" +
		"\x02\x02\u16FF\u1718\n\x19\x02\x02\u1700\u1701\x07\xD5\x02\x02\u1701\u1718" +
		"\n\x1A\x02\x02\u1702\u1718\x07\xD7\x02\x02\u1703\u1718\x07\xD6\x02\x02" +
		"\u1704\u1718\x07\u010F\x02\x02\u1705\u1718\x07\u0123\x02\x02\u1706\u1718" +
		"\x07\u0110\x02\x02\u1707\u1718\x07\u0124\x02\x02\u1708\u1718\x07\u0112" +
		"\x02\x02\u1709\u1718\x07\u0127\x02\x02\u170A\u1718\x07\u010C\x02\x02\u170B" +
		"\u1718\x07\u0121\x02\x02\u170C\u1718\x07\u010B\x02\x02\u170D\u1718\x07" +
		"\u0120\x02\x02\u170E\u1718\x07\u010E\x02\x02\u170F\u1718\x07\u0122\x02" +
		"\x02\u1710\u1718\x07\u0111\x02\x02\u1711\u1718\x07\u0126\x02\x02\u1712" +
		"\u1718\x07\u0113\x02\x02\u1713\u1718\x07\u0128\x02\x02\u1714\u1718\x07" +
		"\u013C\x02\x02\u1715\u1718\x07\u013D\x02\x02\u1716\u1718\x07\xDD\x02\x02" +
		"\u1717\u16F9\x03\x02\x02\x02\u1717\u16FA\x03\x02\x02\x02\u1717\u16FB\x03" +
		"\x02\x02\x02\u1717\u16FC\x03\x02\x02\x02\u1717\u16FD\x03\x02\x02\x02\u1717" +
		"\u16FE\x03\x02\x02\x02\u1717\u1700\x03\x02\x02\x02\u1717\u1702\x03\x02" +
		"\x02\x02\u1717\u1703\x03\x02\x02\x02\u1717\u1704\x03\x02\x02\x02\u1717" +
		"\u1705\x03\x02\x02\x02\u1717\u1706\x03\x02\x02\x02\u1717\u1707\x03\x02" +
		"\x02\x02\u1717\u1708\x03\x02\x02\x02\u1717\u1709\x03\x02\x02\x02\u1717" +
		"\u170A\x03\x02\x02\x02\u1717\u170B\x03\x02\x02\x02\u1717\u170C\x03\x02" +
		"\x02\x02\u1717\u170D\x03\x02\x02\x02\u1717\u170E\x03\x02\x02\x02\u1717" +
		"\u170F\x03\x02\x02\x02\u1717\u1710\x03\x02\x02\x02\u1717\u1711\x03\x02" +
		"\x02\x02\u1717\u1712\x03\x02\x02\x02\u1717\u1713\x03\x02\x02\x02\u1717" +
		"\u1714\x03\x02\x02\x02\u1717\u1715\x03\x02\x02\x02\u1717\u1716\x03\x02" +
		"\x02\x02\u1718\u1719\x03\x02\x02\x02\u1719\u1717\x03\x02\x02\x02\u1719" +
		"\u171A\x03\x02\x02\x02\u171A\u021B\x03\x02\x02\x02\u171B\u171C\x07\x04" +
		"\x02\x02\u171C\u021D\x03\x02\x02\x02\u171D\u171E\x07\xEA\x02\x02\u171E" +
		"\u021F\x03\x02\x02\x02\u0311\u0224\u022A\u022F\u0234\u023B\u02F5\u02FD" +
		"\u0304\u0309\u0312\u0318\u031E\u0324\u032D\u0334\u0339\u0341\u0348\u034D" +
		"\u0355\u035C\u0361\u0369\u0370\u0375\u0379\u0380\u0387\u038E\u0394\u039A" +
		"\u03A2\u03AB\u03AF\u03B8\u03BA\u03BF\u03C5\u03CE\u03D0\u03D5\u03DB\u03E4" +
		"\u03EB\u03F0\u03F8\u03FF\u0404\u040C\u0413\u0418\u0420\u0427\u042C\u0434" +
		"\u043B\u0440\u0448\u044F\u0454\u045C\u0463\u0468\u0470\u0477\u047C\u0484" +
		"\u048B\u0490\u0498\u049F\u04A4\u04AC\u04B3\u04B8\u04C0\u04C7\u04CC\u04D4" +
		"\u04DB\u04E0\u04E8\u04EF\u04F4\u04FC\u0503\u0508\u0510\u0517\u051C\u0524" +
		"\u052B\u0530\u0536\u053A\u053F\u0548\u054F\u0554\u055A\u055E\u0563\u056C" +
		"\u0573\u0578\u057E\u0582\u0587\u0590\u0597\u059C\u05A5\u05AC\u05B1\u05BA" +
		"\u05BE\u05C3\u05C9\u05EB\u05F3\u05F5\u05FC\u0601\u0607\u060D\u0612\u0618" +
		"\u061D\u0623\u062F\u0634\u063A\u0640\u0646\u064D\u0653\u0656\u065A\u065E" +
		"\u0660\u0670\u0675\u067B\u0681\u0688\u068E\u0691\u0697\u06A0\u06A5\u06AD" +
		"\u06B2\u06B7\u06BD\u06C4\u06CA\u06CD\u06D3\u06D8\u06DA\u06E1\u06E8\u06F5" +
		"\u06FA\u0700\u0707\u070D\u0710\u071A\u071F\u0725\u072C\u0732\u0735\u073F" +
		"\u0744\u074A\u0751\u0757\u075A\u0762\u0769\u076E\u0772\u0777\u077E\u0784" +
		"\u0787\u078F\u0795\u079A\u079E\u07A3\u07AA\u07B0\u07B3\u07BB\u07C2\u07C7" +
		"\u07D0\u07D7\u07DC\u07E5\u07EC\u07F1\u07FA\u0801\u0806\u080F\u0816\u081B" +
		"\u0824\u082B\u0830\u0839\u0840\u0845\u084E\u0855\u085A\u0863\u086A\u086F" +
		"\u0878\u087F\u0884\u088D\u0894\u0899\u08A2\u08A9\u08AE\u08B7\u08BE\u08C3" +
		"\u08CC\u08D3\u08D8\u08E1\u08E8\u08ED\u08F6\u08FD\u0902\u090B\u0912\u0917" +
		"\u0920\u0927\u092C\u0935\u093C\u0941\u094A\u0951\u0956\u095F\u0966\u096B" +
		"\u0974\u097B\u0980\u0989\u0990\u0995\u099E\u09A5\u09AA\u09B3\u09BA\u09BF" +
		"\u09C8\u09CF\u09D4\u09DD\u09E4\u09E9\u09F2\u09F9\u09FE\u0A07\u0A0E\u0A13" +
		"\u0A1C\u0A23\u0A28\u0A31\u0A38\u0A3D\u0A46\u0A4D\u0A52\u0A5B\u0A62\u0A67" +
		"\u0A70\u0A77\u0A7C\u0A85\u0A8C\u0A91\u0A9A\u0AA1\u0AA6\u0AAF\u0AB6\u0ABB" +
		"\u0AC4\u0ACB\u0AD0\u0AD9\u0AE0\u0AE5\u0AEE\u0AF5\u0AFA\u0B03\u0B0A\u0B0F" +
		"\u0B18\u0B1F\u0B24\u0B2D\u0B34\u0B39\u0B42\u0B49\u0B4E\u0B57\u0B5E\u0B63" +
		"\u0B6C\u0B73\u0B78\u0B81\u0B88\u0B8D\u0B96\u0B9D\u0BA2\u0BAB\u0BB2\u0BB7" +
		"\u0BC0\u0BC7\u0BCC\u0BD5\u0BDC\u0BE1\u0BEA\u0BF1\u0BF6\u0BFF\u0C06\u0C0B" +
		"\u0C14\u0C1B\u0C20\u0C29\u0C30\u0C35\u0C3E\u0C45\u0C4A\u0C53\u0C5A\u0C5F" +
		"\u0C68\u0C6F\u0C74\u0C7D\u0C84\u0C89\u0C92\u0C99\u0C9E\u0CA7\u0CAE\u0CB3" +
		"\u0CBC\u0CC3\u0CC8\u0CD1\u0CD8\u0CDD\u0CE6\u0CED\u0CF2\u0CFB\u0D02\u0D07" +
		"\u0D10\u0D17\u0D1C\u0D25\u0D2C\u0D31\u0D3A\u0D41\u0D46\u0D4F\u0D56\u0D5B" +
		"\u0D64\u0D6B\u0D70\u0D79\u0D80\u0D85\u0D8E\u0D95\u0D9A\u0DA3\u0DAA\u0DAF" +
		"\u0DB8\u0DBF\u0DC4\u0DCD\u0DD4\u0DD9\u0DE2\u0DE9\u0DEE\u0DF7\u0DFE\u0E03" +
		"\u0E0C\u0E13\u0E18\u0E21\u0E28\u0E2D\u0E36\u0E3D\u0E42\u0E4B\u0E52\u0E57" +
		"\u0E60\u0E67\u0E6C\u0E75\u0E7C\u0E81\u0E8A\u0E91\u0E96\u0E9F\u0EA6\u0EAB" +
		"\u0EB4\u0EBB\u0EC0\u0EC9\u0ED0\u0ED5\u0EDE\u0EE5\u0EEA\u0EF3\u0EFA\u0EFF" +
		"\u0F08\u0F0F\u0F14\u0F1D\u0F24\u0F29\u0F32\u0F39\u0F3E\u0F47\u0F4E\u0F53" +
		"\u0F5C\u0F63\u0F68\u0F71\u0F78\u0F7D\u0F86\u0F8D\u0F92\u0F9B\u0FA2\u0FA7" +
		"\u0FB0\u0FB7\u0FBC\u0FC5\u0FCC\u0FD1\u0FDA\u0FE1\u0FE6\u0FEF\u0FF6\u0FFB" +
		"\u1004\u100B\u1010\u1019\u1020\u1025\u102E\u1035\u103A\u1043\u104A\u104F" +
		"\u1058\u105F\u1064\u106D\u1074\u1079\u1082\u1089\u108E\u1097\u109E\u10A3" +
		"\u10AC\u10B3\u10B8\u10C1\u10C8\u10CD\u10D6\u10DD\u10E2\u10EB\u10F2\u10F7" +
		"\u1100\u1107\u110C\u1115\u111C\u1121\u112A\u1131\u1136\u113F\u1146\u114B" +
		"\u1154\u115B\u1160\u1169\u1170\u1175\u117E\u1185\u118A\u1193\u119A\u119F" +
		"\u11A8\u11AF\u11B4\u11BD\u11C4\u11C9\u11D2\u11D8\u11DD\u11E1\u11E6\u11ED" +
		"\u11F3\u11F6\u11FE\u1205\u120A\u1213\u121A\u121F\u1228\u122F\u1234\u123D" +
		"\u1244\u1249\u1252\u1259\u125E\u1267\u126E\u1273\u127C\u1283\u1288\u1291" +
		"\u1298\u129D\u12A6\u12AD\u12B2\u12BB\u12C2\u12C7\u12D0\u12D7\u12DC\u12E6" +
		"\u12E8\u12F0\u12F7\u12FC\u1305\u130C\u1311\u131A\u131E\u1324\u132B\u1331" +
		"\u1334\u1336\u133C\u1344\u134B\u1350\u1355\u135A\u1360\u1364\u1368\u1370" +
		"\u1377\u137C\u1385\u1389\u138D\u1395\u139C\u13A1\u13AA\u13AE\u13B2\u13BA" +
		"\u13C1\u13C6\u13CF\u13D3\u13D7\u13DF\u13E6\u13EB\u13F4\u13FB\u1400\u1408" +
		"\u140E\u1412\u1418\u141F\u1425\u1428\u142A\u142F\u1438";
	private static readonly _serializedATNSegment11: string =
		"\u143E\u1440\u144E\u1456\u145B\u145F\u1463\u1465\u146A\u1481\u1486\u148B" +
		"\u148D\u1497\u14A1\u14AB\u14B1\u14B8\u14BE\u14C6\u14D0\u14DB\u14E1\u14E6" +
		"\u14ED\u14F6\u14FA\u14FE\u1500\u150F\u1513\u1522\u1526\u152C\u1537\u153C" +
		"\u1541\u1543\u1548\u154D\u1552\u1554\u1559\u155F\u1564\u1566\u1571\u1575" +
		"\u1582\u1586\u158C\u158E\u1595\u1599\u159B\u15A1\u15A3\u15AA\u15AF\u15B2" +
		"\u15B8\u15BB\u15BF\u15C6\u15CB\u15D1\u15D6\u15DE\u15E0\u15E4\u15EB\u15ED" +
		"\u15F6\u15F8\u15FC\u1606\u1608\u160C\u1612\u1614\u161C\u1620\u1626\u162B" +
		"\u1631\u1637\u163F\u1643\u1646\u164C\u1653\u1655\u165C\u1666\u1671\u167F" +
		"\u1685\u168F\u1691\u169A\u169F\u16A5\u16A7\u16AE\u16B0\u16B4\u16B8\u16BE" +
		"\u16C2\u16C8\u16CB\u16D1\u16D4\u16DE\u16E5\u16EC\u16F1\u1717\u1719";
	public static readonly _serializedATN: string = Utils.join(
		[
			bitmarkParser._serializedATNSegment0,
			bitmarkParser._serializedATNSegment1,
			bitmarkParser._serializedATNSegment2,
			bitmarkParser._serializedATNSegment3,
			bitmarkParser._serializedATNSegment4,
			bitmarkParser._serializedATNSegment5,
			bitmarkParser._serializedATNSegment6,
			bitmarkParser._serializedATNSegment7,
			bitmarkParser._serializedATNSegment8,
			bitmarkParser._serializedATNSegment9,
			bitmarkParser._serializedATNSegment10,
			bitmarkParser._serializedATNSegment11,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!bitmarkParser.__ATN) {
			bitmarkParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(bitmarkParser._serializedATN));
		}

		return bitmarkParser.__ATN;
	}

}

export class BitmarkContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(bitmarkParser.EOF, 0); }
	public bitmark_(): Bitmark_Context[];
	public bitmark_(i: number): Bitmark_Context;
	public bitmark_(i?: number): Bitmark_Context | Bitmark_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Bitmark_Context);
		} else {
			return this.getRuleContext(i, Bitmark_Context);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bitmark; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBitmark) {
			listener.enterBitmark(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBitmark) {
			listener.exitBitmark(this);
		}
	}
}


export class Bitmark_Context extends ParserRuleContext {
	public bit(): BitContext | undefined {
		return this.tryGetRuleContext(0, BitContext);
	}
	public lines(): LinesContext | undefined {
		return this.tryGetRuleContext(0, LinesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bitmark_; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBitmark_) {
			listener.enterBitmark_(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBitmark_) {
			listener.exitBitmark_(this);
		}
	}
}


export class BitContext extends ParserRuleContext {
	public book(): BookContext | undefined {
		return this.tryGetRuleContext(0, BookContext);
	}
	public chapter(): ChapterContext | undefined {
		return this.tryGetRuleContext(0, ChapterContext);
	}
	public ai_prompt(): Ai_promptContext | undefined {
		return this.tryGetRuleContext(0, Ai_promptContext);
	}
	public note_ai(): Note_aiContext | undefined {
		return this.tryGetRuleContext(0, Note_aiContext);
	}
	public summary_ai(): Summary_aiContext | undefined {
		return this.tryGetRuleContext(0, Summary_aiContext);
	}
	public article_ai(): Article_aiContext | undefined {
		return this.tryGetRuleContext(0, Article_aiContext);
	}
	public summary(): SummaryContext | undefined {
		return this.tryGetRuleContext(0, SummaryContext);
	}
	public toc(): TocContext | undefined {
		return this.tryGetRuleContext(0, TocContext);
	}
	public bit_alias(): Bit_aliasContext | undefined {
		return this.tryGetRuleContext(0, Bit_aliasContext);
	}
	public internal_link(): Internal_linkContext | undefined {
		return this.tryGetRuleContext(0, Internal_linkContext);
	}
	public anchor(): AnchorContext | undefined {
		return this.tryGetRuleContext(0, AnchorContext);
	}
	public group_born(): Group_bornContext | undefined {
		return this.tryGetRuleContext(0, Group_bornContext);
	}
	public group_died(): Group_diedContext | undefined {
		return this.tryGetRuleContext(0, Group_diedContext);
	}
	public essay(): EssayContext | undefined {
		return this.tryGetRuleContext(0, EssayContext);
	}
	public correction(): CorrectionContext | undefined {
		return this.tryGetRuleContext(0, CorrectionContext);
	}
	public mark_(): Mark_Context | undefined {
		return this.tryGetRuleContext(0, Mark_Context);
	}
	public take_picture(): Take_pictureContext | undefined {
		return this.tryGetRuleContext(0, Take_pictureContext);
	}
	public take_audio(): Take_audioContext | undefined {
		return this.tryGetRuleContext(0, Take_audioContext);
	}
	public record_audio(): Record_audioContext | undefined {
		return this.tryGetRuleContext(0, Record_audioContext);
	}
	public preparation_note(): Preparation_noteContext | undefined {
		return this.tryGetRuleContext(0, Preparation_noteContext);
	}
	public assignment(): AssignmentContext | undefined {
		return this.tryGetRuleContext(0, AssignmentContext);
	}
	public article(): ArticleContext | undefined {
		return this.tryGetRuleContext(0, ArticleContext);
	}
	public statement(): StatementContext | undefined {
		return this.tryGetRuleContext(0, StatementContext);
	}
	public details(): DetailsContext | undefined {
		return this.tryGetRuleContext(0, DetailsContext);
	}
	public sample_solution(): Sample_solutionContext | undefined {
		return this.tryGetRuleContext(0, Sample_solutionContext);
	}
	public buttoncopytext(): ButtoncopytextContext | undefined {
		return this.tryGetRuleContext(0, ButtoncopytextContext);
	}
	public wbtcontinue(): WbtcontinueContext | undefined {
		return this.tryGetRuleContext(0, WbtcontinueContext);
	}
	public learningpathdetails(): LearningpathdetailsContext | undefined {
		return this.tryGetRuleContext(0, LearningpathdetailsContext);
	}
	public note(): NoteContext | undefined {
		return this.tryGetRuleContext(0, NoteContext);
	}
	public info(): InfoContext | undefined {
		return this.tryGetRuleContext(0, InfoContext);
	}
	public warning(): WarningContext | undefined {
		return this.tryGetRuleContext(0, WarningContext);
	}
	public remark(): RemarkContext | undefined {
		return this.tryGetRuleContext(0, RemarkContext);
	}
	public hintbit(): HintbitContext | undefined {
		return this.tryGetRuleContext(0, HintbitContext);
	}
	public help(): HelpContext | undefined {
		return this.tryGetRuleContext(0, HelpContext);
	}
	public danger(): DangerContext | undefined {
		return this.tryGetRuleContext(0, DangerContext);
	}
	public bug(): BugContext | undefined {
		return this.tryGetRuleContext(0, BugContext);
	}
	public sidenote(): SidenoteContext | undefined {
		return this.tryGetRuleContext(0, SidenoteContext);
	}
	public stickynote(): StickynoteContext | undefined {
		return this.tryGetRuleContext(0, StickynoteContext);
	}
	public quote(): QuoteContext | undefined {
		return this.tryGetRuleContext(0, QuoteContext);
	}
	public footnote(): FootnoteContext | undefined {
		return this.tryGetRuleContext(0, FootnoteContext);
	}
	public examplebit(): ExamplebitContext | undefined {
		return this.tryGetRuleContext(0, ExamplebitContext);
	}
	public page(): PageContext | undefined {
		return this.tryGetRuleContext(0, PageContext);
	}
	public message(): MessageContext | undefined {
		return this.tryGetRuleContext(0, MessageContext);
	}
	public self_assessment(): Self_assessmentContext | undefined {
		return this.tryGetRuleContext(0, Self_assessmentContext);
	}
	public rating(): RatingContext | undefined {
		return this.tryGetRuleContext(0, RatingContext);
	}
	public survey(): SurveyContext | undefined {
		return this.tryGetRuleContext(0, SurveyContext);
	}
	public survey_1(): Survey_1Context | undefined {
		return this.tryGetRuleContext(0, Survey_1Context);
	}
	public survey_anonymous(): Survey_anonymousContext | undefined {
		return this.tryGetRuleContext(0, Survey_anonymousContext);
	}
	public survey_anonymous_1(): Survey_anonymous_1Context | undefined {
		return this.tryGetRuleContext(0, Survey_anonymous_1Context);
	}
	public hint(): HintContext | undefined {
		return this.tryGetRuleContext(0, HintContext);
	}
	public vendor_padlet_embed(): Vendor_padlet_embedContext | undefined {
		return this.tryGetRuleContext(0, Vendor_padlet_embedContext);
	}
	public scorm(): ScormContext | undefined {
		return this.tryGetRuleContext(0, ScormContext);
	}
	public learning_path_lti(): Learning_path_ltiContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_ltiContext);
	}
	public learning_path_step(): Learning_path_stepContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_stepContext);
	}
	public learning_path_book(): Learning_path_bookContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_bookContext);
	}
	public learning_path_sign(): Learning_path_signContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_signContext);
	}
	public learning_path_video_call(): Learning_path_video_callContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_video_callContext);
	}
	public learning_path_learning_goal(): Learning_path_learning_goalContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_learning_goalContext);
	}
	public learning_path_closing(): Learning_path_closingContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_closingContext);
	}
	public learning_path_feedback(): Learning_path_feedbackContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_feedbackContext);
	}
	public learning_path_bot_training(): Learning_path_bot_trainingContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_bot_trainingContext);
	}
	public learning_path_external_link(): Learning_path_external_linkContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_external_linkContext);
	}
	public learning_path_classroom_training(): Learning_path_classroom_trainingContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_classroom_trainingContext);
	}
	public learning_path_classroom_event(): Learning_path_classroom_eventContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_classroom_eventContext);
	}
	public bot_action_send(): Bot_action_sendContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_sendContext);
	}
	public bot_action_announce(): Bot_action_announceContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_announceContext);
	}
	public bot_action_save(): Bot_action_saveContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_saveContext);
	}
	public bot_action_remind(): Bot_action_remindContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_remindContext);
	}
	public bot_action_response(): Bot_action_responseContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_responseContext);
	}
	public bot_action_true_false(): Bot_action_true_falseContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_true_falseContext);
	}
	public bot_action_rating_number(): Bot_action_rating_numberContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_rating_numberContext);
	}
	public bot_action_rating_stars(): Bot_action_rating_starsContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_rating_starsContext);
	}
	public bit_image(): Bit_imageContext | undefined {
		return this.tryGetRuleContext(0, Bit_imageContext);
	}
	public bit_imageLink(): Bit_imageLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_imageLinkContext);
	}
	public bit_imageZoom(): Bit_imageZoomContext | undefined {
		return this.tryGetRuleContext(0, Bit_imageZoomContext);
	}
	public bit_imagePrototype(): Bit_imagePrototypeContext | undefined {
		return this.tryGetRuleContext(0, Bit_imagePrototypeContext);
	}
	public bit_imageSuperWide(): Bit_imageSuperWideContext | undefined {
		return this.tryGetRuleContext(0, Bit_imageSuperWideContext);
	}
	public bit_audio(): Bit_audioContext | undefined {
		return this.tryGetRuleContext(0, Bit_audioContext);
	}
	public bit_audioLink(): Bit_audioLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_audioLinkContext);
	}
	public bit_audioEmbed(): Bit_audioEmbedContext | undefined {
		return this.tryGetRuleContext(0, Bit_audioEmbedContext);
	}
	public bit_video(): Bit_videoContext | undefined {
		return this.tryGetRuleContext(0, Bit_videoContext);
	}
	public bit_videoLink(): Bit_videoLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_videoLinkContext);
	}
	public bit_videoEmbed(): Bit_videoEmbedContext | undefined {
		return this.tryGetRuleContext(0, Bit_videoEmbedContext);
	}
	public bit_videoPortrait(): Bit_videoPortraitContext | undefined {
		return this.tryGetRuleContext(0, Bit_videoPortraitContext);
	}
	public bit_videoLandscape(): Bit_videoLandscapeContext | undefined {
		return this.tryGetRuleContext(0, Bit_videoLandscapeContext);
	}
	public bit_stillImageFilm(): Bit_stillImageFilmContext | undefined {
		return this.tryGetRuleContext(0, Bit_stillImageFilmContext);
	}
	public bit_stillImageFilmLink(): Bit_stillImageFilmLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_stillImageFilmLinkContext);
	}
	public bit_stillImageFilmEmbed(): Bit_stillImageFilmEmbedContext | undefined {
		return this.tryGetRuleContext(0, Bit_stillImageFilmEmbedContext);
	}
	public bit_document(): Bit_documentContext | undefined {
		return this.tryGetRuleContext(0, Bit_documentContext);
	}
	public bit_documentLink(): Bit_documentLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_documentLinkContext);
	}
	public bit_documentEmbed(): Bit_documentEmbedContext | undefined {
		return this.tryGetRuleContext(0, Bit_documentEmbedContext);
	}
	public bit_documentDownload(): Bit_documentDownloadContext | undefined {
		return this.tryGetRuleContext(0, Bit_documentDownloadContext);
	}
	public bit_websiteLink(): Bit_websiteLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_websiteLinkContext);
	}
	public bit_appLink(): Bit_appLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_appLinkContext);
	}
	public bit_editorial(): Bit_editorialContext | undefined {
		return this.tryGetRuleContext(0, Bit_editorialContext);
	}
	public book_frontispiece(): Book_frontispieceContext | undefined {
		return this.tryGetRuleContext(0, Book_frontispieceContext);
	}
	public book_title(): Book_titleContext | undefined {
		return this.tryGetRuleContext(0, Book_titleContext);
	}
	public book_copyright(): Book_copyrightContext | undefined {
		return this.tryGetRuleContext(0, Book_copyrightContext);
	}
	public book_dedication(): Book_dedicationContext | undefined {
		return this.tryGetRuleContext(0, Book_dedicationContext);
	}
	public book_forword(): Book_forwordContext | undefined {
		return this.tryGetRuleContext(0, Book_forwordContext);
	}
	public book_preface(): Book_prefaceContext | undefined {
		return this.tryGetRuleContext(0, Book_prefaceContext);
	}
	public book_prologue(): Book_prologueContext | undefined {
		return this.tryGetRuleContext(0, Book_prologueContext);
	}
	public book_epilogue(): Book_epilogueContext | undefined {
		return this.tryGetRuleContext(0, Book_epilogueContext);
	}
	public book_introduction(): Book_introductionContext | undefined {
		return this.tryGetRuleContext(0, Book_introductionContext);
	}
	public book_inciting_incident(): Book_inciting_incidentContext | undefined {
		return this.tryGetRuleContext(0, Book_inciting_incidentContext);
	}
	public book_conclusion(): Book_conclusionContext | undefined {
		return this.tryGetRuleContext(0, Book_conclusionContext);
	}
	public book_afterword(): Book_afterwordContext | undefined {
		return this.tryGetRuleContext(0, Book_afterwordContext);
	}
	public book_postscript(): Book_postscriptContext | undefined {
		return this.tryGetRuleContext(0, Book_postscriptContext);
	}
	public book_appendix(): Book_appendixContext | undefined {
		return this.tryGetRuleContext(0, Book_appendixContext);
	}
	public book_addendum(): Book_addendumContext | undefined {
		return this.tryGetRuleContext(0, Book_addendumContext);
	}
	public book_acknowledgments(): Book_acknowledgmentsContext | undefined {
		return this.tryGetRuleContext(0, Book_acknowledgmentsContext);
	}
	public book_list_of_contributors(): Book_list_of_contributorsContext | undefined {
		return this.tryGetRuleContext(0, Book_list_of_contributorsContext);
	}
	public book_bibliography(): Book_bibliographyContext | undefined {
		return this.tryGetRuleContext(0, Book_bibliographyContext);
	}
	public book_reference_list(): Book_reference_listContext | undefined {
		return this.tryGetRuleContext(0, Book_reference_listContext);
	}
	public book_endnotes(): Book_endnotesContext | undefined {
		return this.tryGetRuleContext(0, Book_endnotesContext);
	}
	public book_notes(): Book_notesContext | undefined {
		return this.tryGetRuleContext(0, Book_notesContext);
	}
	public book_copyright_permissions(): Book_copyright_permissionsContext | undefined {
		return this.tryGetRuleContext(0, Book_copyright_permissionsContext);
	}
	public book_teaser(): Book_teaserContext | undefined {
		return this.tryGetRuleContext(0, Book_teaserContext);
	}
	public book_auther_bio(): Book_auther_bioContext | undefined {
		return this.tryGetRuleContext(0, Book_auther_bioContext);
	}
	public book_request_for_a_book_review(): Book_request_for_a_book_reviewContext | undefined {
		return this.tryGetRuleContext(0, Book_request_for_a_book_reviewContext);
	}
	public book_coming_soon(): Book_coming_soonContext | undefined {
		return this.tryGetRuleContext(0, Book_coming_soonContext);
	}
	public book_read_more(): Book_read_moreContext | undefined {
		return this.tryGetRuleContext(0, Book_read_moreContext);
	}
	public book_summary(): Book_summaryContext | undefined {
		return this.tryGetRuleContext(0, Book_summaryContext);
	}
	public book_epigraph(): Book_epigraphContext | undefined {
		return this.tryGetRuleContext(0, Book_epigraphContext);
	}
	public cook_preparation(): Cook_preparationContext | undefined {
		return this.tryGetRuleContext(0, Cook_preparationContext);
	}
	public cook_step(): Cook_stepContext | undefined {
		return this.tryGetRuleContext(0, Cook_stepContext);
	}
	public cook_ingredients(): Cook_ingredientsContext | undefined {
		return this.tryGetRuleContext(0, Cook_ingredientsContext);
	}
	public cook_remark(): Cook_remarkContext | undefined {
		return this.tryGetRuleContext(0, Cook_remarkContext);
	}
	public cook_variation(): Cook_variationContext | undefined {
		return this.tryGetRuleContext(0, Cook_variationContext);
	}
	public cook_insert(): Cook_insertContext | undefined {
		return this.tryGetRuleContext(0, Cook_insertContext);
	}
	public cook_arrangement(): Cook_arrangementContext | undefined {
		return this.tryGetRuleContext(0, Cook_arrangementContext);
	}
	public cook_practice_advise(): Cook_practice_adviseContext | undefined {
		return this.tryGetRuleContext(0, Cook_practice_adviseContext);
	}
	public cook_plate(): Cook_plateContext | undefined {
		return this.tryGetRuleContext(0, Cook_plateContext);
	}
	public cook_recommendation(): Cook_recommendationContext | undefined {
		return this.tryGetRuleContext(0, Cook_recommendationContext);
	}
	public cook_personal_recommendation(): Cook_personal_recommendationContext | undefined {
		return this.tryGetRuleContext(0, Cook_personal_recommendationContext);
	}
	public cook_side_drink(): Cook_side_drinkContext | undefined {
		return this.tryGetRuleContext(0, Cook_side_drinkContext);
	}
	public cook_side_dish(): Cook_side_dishContext | undefined {
		return this.tryGetRuleContext(0, Cook_side_dishContext);
	}
	public cook_timer(): Cook_timerContext | undefined {
		return this.tryGetRuleContext(0, Cook_timerContext);
	}
	public lang_learning_outcomes(): Lang_learning_outcomesContext | undefined {
		return this.tryGetRuleContext(0, Lang_learning_outcomesContext);
	}
	public lang_enabling_language_skills(): Lang_enabling_language_skillsContext | undefined {
		return this.tryGetRuleContext(0, Lang_enabling_language_skillsContext);
	}
	public lang_life_skills(): Lang_life_skillsContext | undefined {
		return this.tryGetRuleContext(0, Lang_life_skillsContext);
	}
	public lang_english_around_world(): Lang_english_around_worldContext | undefined {
		return this.tryGetRuleContext(0, Lang_english_around_worldContext);
	}
	public lang_good_to_know(): Lang_good_to_knowContext | undefined {
		return this.tryGetRuleContext(0, Lang_good_to_knowContext);
	}
	public lang_learning_strategy(): Lang_learning_strategyContext | undefined {
		return this.tryGetRuleContext(0, Lang_learning_strategyContext);
	}
	public lang_like_a_local(): Lang_like_a_localContext | undefined {
		return this.tryGetRuleContext(0, Lang_like_a_localContext);
	}
	public lang_useful_phrases(): Lang_useful_phrasesContext | undefined {
		return this.tryGetRuleContext(0, Lang_useful_phrasesContext);
	}
	public lang_level_down(): Lang_level_downContext | undefined {
		return this.tryGetRuleContext(0, Lang_level_downContext);
	}
	public lang_level_up(): Lang_level_upContext | undefined {
		return this.tryGetRuleContext(0, Lang_level_upContext);
	}
	public lang_extra_activity(): Lang_extra_activityContext | undefined {
		return this.tryGetRuleContext(0, Lang_extra_activityContext);
	}
	public lang_video_script(): Lang_video_scriptContext | undefined {
		return this.tryGetRuleContext(0, Lang_video_scriptContext);
	}
	public lang_audio_script(): Lang_audio_scriptContext | undefined {
		return this.tryGetRuleContext(0, Lang_audio_scriptContext);
	}
	public lang_vocabulary(): Lang_vocabularyContext | undefined {
		return this.tryGetRuleContext(0, Lang_vocabularyContext);
	}
	public lang_homework(): Lang_homeworkContext | undefined {
		return this.tryGetRuleContext(0, Lang_homeworkContext);
	}
	public lang_teacher_note(): Lang_teacher_noteContext | undefined {
		return this.tryGetRuleContext(0, Lang_teacher_noteContext);
	}
	public code(): CodeContext | undefined {
		return this.tryGetRuleContext(0, CodeContext);
	}
	public card1(): Card1Context | undefined {
		return this.tryGetRuleContext(0, Card1Context);
	}
	public question1(): Question1Context | undefined {
		return this.tryGetRuleContext(0, Question1Context);
	}
	public screenshot(): ScreenshotContext | undefined {
		return this.tryGetRuleContext(0, ScreenshotContext);
	}
	public focus_image(): Focus_imageContext | undefined {
		return this.tryGetRuleContext(0, Focus_imageContext);
	}
	public photo(): PhotoContext | undefined {
		return this.tryGetRuleContext(0, PhotoContext);
	}
	public browser_image(): Browser_imageContext | undefined {
		return this.tryGetRuleContext(0, Browser_imageContext);
	}
	public chapter_subject_matter(): Chapter_subject_matterContext | undefined {
		return this.tryGetRuleContext(0, Chapter_subject_matterContext);
	}
	public release_note(): Release_noteContext | undefined {
		return this.tryGetRuleContext(0, Release_noteContext);
	}
	public conclusion(): ConclusionContext | undefined {
		return this.tryGetRuleContext(0, ConclusionContext);
	}
	public featured(): FeaturedContext | undefined {
		return this.tryGetRuleContext(0, FeaturedContext);
	}
	public vendor_amcharts_5_chart(): Vendor_amcharts_5_chartContext | undefined {
		return this.tryGetRuleContext(0, Vendor_amcharts_5_chartContext);
	}
	public newspaper_article(): Newspaper_articleContext | undefined {
		return this.tryGetRuleContext(0, Newspaper_articleContext);
	}
	public blog_article(): Blog_articleContext | undefined {
		return this.tryGetRuleContext(0, Blog_articleContext);
	}
	public book_article(): Book_articleContext | undefined {
		return this.tryGetRuleContext(0, Book_articleContext);
	}
	public notebook_article(): Notebook_articleContext | undefined {
		return this.tryGetRuleContext(0, Notebook_articleContext);
	}
	public workbook_article(): Workbook_articleContext | undefined {
		return this.tryGetRuleContext(0, Workbook_articleContext);
	}
	public release_notes_summary(): Release_notes_summaryContext | undefined {
		return this.tryGetRuleContext(0, Release_notes_summaryContext);
	}
	public review_note(): Review_noteContext | undefined {
		return this.tryGetRuleContext(0, Review_noteContext);
	}
	public review_author_note(): Review_author_noteContext | undefined {
		return this.tryGetRuleContext(0, Review_author_noteContext);
	}
	public review_reviewer_note(): Review_reviewer_noteContext | undefined {
		return this.tryGetRuleContext(0, Review_reviewer_noteContext);
	}
	public review_request_for_review_note(): Review_request_for_review_noteContext | undefined {
		return this.tryGetRuleContext(0, Review_request_for_review_noteContext);
	}
	public review_approved_note(): Review_approved_noteContext | undefined {
		return this.tryGetRuleContext(0, Review_approved_noteContext);
	}
	public checklist(): ChecklistContext | undefined {
		return this.tryGetRuleContext(0, ChecklistContext);
	}
	public video_transcript(): Video_transcriptContext | undefined {
		return this.tryGetRuleContext(0, Video_transcriptContext);
	}
	public audio_transcript(): Audio_transcriptContext | undefined {
		return this.tryGetRuleContext(0, Audio_transcriptContext);
	}
	public image_portrait(): Image_portraitContext | undefined {
		return this.tryGetRuleContext(0, Image_portraitContext);
	}
	public image_landscape(): Image_landscapeContext | undefined {
		return this.tryGetRuleContext(0, Image_landscapeContext);
	}
	public image_on_device(): Image_on_deviceContext | undefined {
		return this.tryGetRuleContext(0, Image_on_deviceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit) {
			listener.enterBit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit) {
			listener.exitBit(this);
		}
	}
}


export class BookContext extends ParserRuleContext {
	public BitBook(): TerminalNode { return this.getToken(bitmarkParser.BitBook, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook) {
			listener.enterBook(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook) {
			listener.exitBook(this);
		}
	}
}


export class ChapterContext extends ParserRuleContext {
	public BitChapter(): TerminalNode { return this.getToken(bitmarkParser.BitChapter, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public anchor(): AnchorContext | undefined {
		return this.tryGetRuleContext(0, AnchorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_chapter; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChapter) {
			listener.enterChapter(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChapter) {
			listener.exitChapter(this);
		}
	}
}


export class Ai_promptContext extends ParserRuleContext {
	public BitAiPrompt(): TerminalNode { return this.getToken(bitmarkParser.BitAiPrompt, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_ai_prompt; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAi_prompt) {
			listener.enterAi_prompt(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAi_prompt) {
			listener.exitAi_prompt(this);
		}
	}
}


export class Note_aiContext extends ParserRuleContext {
	public BitNoteAi(): TerminalNode { return this.getToken(bitmarkParser.BitNoteAi, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_note_ai; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterNote_ai) {
			listener.enterNote_ai(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitNote_ai) {
			listener.exitNote_ai(this);
		}
	}
}


export class Summary_aiContext extends ParserRuleContext {
	public BitSummayAi(): TerminalNode { return this.getToken(bitmarkParser.BitSummayAi, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_summary_ai; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSummary_ai) {
			listener.enterSummary_ai(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSummary_ai) {
			listener.exitSummary_ai(this);
		}
	}
}


export class Article_aiContext extends ParserRuleContext {
	public BitArticleAi(): TerminalNode { return this.getToken(bitmarkParser.BitArticleAi, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_article_ai; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterArticle_ai) {
			listener.enterArticle_ai(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitArticle_ai) {
			listener.exitArticle_ai(this);
		}
	}
}


export class TocContext extends ParserRuleContext {
	public BitToc(): TerminalNode { return this.getToken(bitmarkParser.BitToc, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	public atdef(): AtdefContext | undefined {
		return this.tryGetRuleContext(0, AtdefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_toc; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterToc) {
			listener.enterToc(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitToc) {
			listener.exitToc(this);
		}
	}
}


export class SummaryContext extends ParserRuleContext {
	public BitSummary(): TerminalNode { return this.getToken(bitmarkParser.BitSummary, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public title_etc(): Title_etcContext {
		return this.getRuleContext(0, Title_etcContext);
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_summary; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSummary) {
			listener.enterSummary(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSummary) {
			listener.exitSummary(this);
		}
	}
}


export class Internal_linkContext extends ParserRuleContext {
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public BitIntlink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitIntlink, 0); }
	public BitIntRef(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitIntRef, 0); }
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public BitmarkMinus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
	public BitmarkPlus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_internal_link; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterInternal_link) {
			listener.enterInternal_link(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitInternal_link) {
			listener.exitInternal_link(this);
		}
	}
}


export class Bit_aliasContext extends ParserRuleContext {
	public BitAlias(): TerminalNode { return this.getToken(bitmarkParser.BitAlias, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public angleref(): AnglerefContext {
		return this.getRuleContext(0, AnglerefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_alias; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_alias) {
			listener.enterBit_alias(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_alias) {
			listener.exitBit_alias(this);
		}
	}
}


export class Title_etcContext extends ParserRuleContext {
	public title(): TitleContext[];
	public title(i: number): TitleContext;
	public title(i?: number): TitleContext | TitleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TitleContext);
		} else {
			return this.getRuleContext(i, TitleContext);
		}
	}
	public atdef(): AtdefContext[];
	public atdef(i: number): AtdefContext;
	public atdef(i?: number): AtdefContext | AtdefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AtdefContext);
		} else {
			return this.getRuleContext(i, AtdefContext);
		}
	}
	public item(): ItemContext[];
	public item(i: number): ItemContext;
	public item(i?: number): ItemContext | ItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ItemContext);
		} else {
			return this.getRuleContext(i, ItemContext);
		}
	}
	public instruction(): InstructionContext[];
	public instruction(i: number): InstructionContext;
	public instruction(i?: number): InstructionContext | InstructionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InstructionContext);
		} else {
			return this.getRuleContext(i, InstructionContext);
		}
	}
	public angleref(): AnglerefContext[];
	public angleref(i: number): AnglerefContext;
	public angleref(i?: number): AnglerefContext | AnglerefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AnglerefContext);
		} else {
			return this.getRuleContext(i, AnglerefContext);
		}
	}
	public anchor(): AnchorContext[];
	public anchor(i: number): AnchorContext;
	public anchor(i?: number): AnchorContext | AnchorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AnchorContext);
		} else {
			return this.getRuleContext(i, AnchorContext);
		}
	}
	public progress(): ProgressContext[];
	public progress(i: number): ProgressContext;
	public progress(i?: number): ProgressContext | ProgressContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgressContext);
		} else {
			return this.getRuleContext(i, ProgressContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_title_etc; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterTitle_etc) {
			listener.enterTitle_etc(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitTitle_etc) {
			listener.exitTitle_etc(this);
		}
	}
}


export class Group_bornContext extends ParserRuleContext {
	public BitGroups(): TerminalNode { return this.getToken(bitmarkParser.BitGroups, 0); }
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public lines(): LinesContext[];
	public lines(i: number): LinesContext;
	public lines(i?: number): LinesContext | LinesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LinesContext);
		} else {
			return this.getRuleContext(i, LinesContext);
		}
	}
	public OPR(): TerminalNode[];
	public OPR(i: number): TerminalNode;
	public OPR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.OPR);
		} else {
			return this.getToken(bitmarkParser.OPR, i);
		}
	}
	public OPHASH(): TerminalNode[];
	public OPHASH(i: number): TerminalNode;
	public OPHASH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.OPHASH);
		} else {
			return this.getToken(bitmarkParser.OPHASH, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_group_born; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterGroup_born) {
			listener.enterGroup_born(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitGroup_born) {
			listener.exitGroup_born(this);
		}
	}
}


export class Group_diedContext extends ParserRuleContext {
	public BitGroupt(): TerminalNode { return this.getToken(bitmarkParser.BitGroupt, 0); }
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public lines(): LinesContext[];
	public lines(i: number): LinesContext;
	public lines(i?: number): LinesContext | LinesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LinesContext);
		} else {
			return this.getRuleContext(i, LinesContext);
		}
	}
	public OPR(): TerminalNode[];
	public OPR(i: number): TerminalNode;
	public OPR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.OPR);
		} else {
			return this.getToken(bitmarkParser.OPR, i);
		}
	}
	public OPHASH(): TerminalNode[];
	public OPHASH(i: number): TerminalNode;
	public OPHASH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.OPHASH);
		} else {
			return this.getToken(bitmarkParser.OPHASH, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_group_died; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterGroup_died) {
			listener.enterGroup_died(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitGroup_died) {
			listener.exitGroup_died(this);
		}
	}
}


export class Learning_path_ltiContext extends ParserRuleContext {
	public BitLearningPathLti(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathLti, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_lti; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_lti) {
			listener.enterLearning_path_lti(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_lti) {
			listener.exitLearning_path_lti(this);
		}
	}
}


export class Learning_path_stepContext extends ParserRuleContext {
	public BitLearningPathStep(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathStep, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_step; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_step) {
			listener.enterLearning_path_step(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_step) {
			listener.exitLearning_path_step(this);
		}
	}
}


export class Learning_path_bookContext extends ParserRuleContext {
	public BitLearningPathBook(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathBook, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_book; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_book) {
			listener.enterLearning_path_book(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_book) {
			listener.exitLearning_path_book(this);
		}
	}
}


export class Learning_path_signContext extends ParserRuleContext {
	public BitLearningPathSign(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathSign, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_sign; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_sign) {
			listener.enterLearning_path_sign(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_sign) {
			listener.exitLearning_path_sign(this);
		}
	}
}


export class Learning_path_video_callContext extends ParserRuleContext {
	public BitLearningPathVideoCall(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathVideoCall, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_video_call; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_video_call) {
			listener.enterLearning_path_video_call(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_video_call) {
			listener.exitLearning_path_video_call(this);
		}
	}
}


export class Learning_path_learning_goalContext extends ParserRuleContext {
	public BitLearningPathLearningGoal(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathLearningGoal, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_learning_goal; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_learning_goal) {
			listener.enterLearning_path_learning_goal(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_learning_goal) {
			listener.exitLearning_path_learning_goal(this);
		}
	}
}


export class Learning_path_closingContext extends ParserRuleContext {
	public BitLearningPathClosing(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathClosing, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_closing; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_closing) {
			listener.enterLearning_path_closing(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_closing) {
			listener.exitLearning_path_closing(this);
		}
	}
}


export class Learning_path_feedbackContext extends ParserRuleContext {
	public BitLearningPathFeedback(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathFeedback, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_feedback; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_feedback) {
			listener.enterLearning_path_feedback(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_feedback) {
			listener.exitLearning_path_feedback(this);
		}
	}
}


export class Learning_path_bot_trainingContext extends ParserRuleContext {
	public BitLearningPathBotTraining(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathBotTraining, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_bot_training; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_bot_training) {
			listener.enterLearning_path_bot_training(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_bot_training) {
			listener.exitLearning_path_bot_training(this);
		}
	}
}


export class Learning_path_external_linkContext extends ParserRuleContext {
	public BitLearningPathExternalLink(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathExternalLink, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_external_link; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_external_link) {
			listener.enterLearning_path_external_link(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_external_link) {
			listener.exitLearning_path_external_link(this);
		}
	}
}


export class Learning_path_classroom_trainingContext extends ParserRuleContext {
	public BitLearningPathClassroomTraining(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathClassroomTraining, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_classroom_training; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_classroom_training) {
			listener.enterLearning_path_classroom_training(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_classroom_training) {
			listener.exitLearning_path_classroom_training(this);
		}
	}
}


export class Learning_path_classroom_eventContext extends ParserRuleContext {
	public BitLearningPathClassroomEvent(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathClassroomEvent, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_classroom_event; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_classroom_event) {
			listener.enterLearning_path_classroom_event(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_classroom_event) {
			listener.exitLearning_path_classroom_event(this);
		}
	}
}


export class Bot_action_sendContext extends ParserRuleContext {
	public BitBotActionSend(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionSend, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_send; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_send) {
			listener.enterBot_action_send(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_send) {
			listener.exitBot_action_send(this);
		}
	}
}


export class Bot_action_announceContext extends ParserRuleContext {
	public BitBotActionAnnounce(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionAnnounce, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_announce; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_announce) {
			listener.enterBot_action_announce(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_announce) {
			listener.exitBot_action_announce(this);
		}
	}
}


export class Bot_action_saveContext extends ParserRuleContext {
	public BitBotActionSave(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionSave, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_save; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_save) {
			listener.enterBot_action_save(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_save) {
			listener.exitBot_action_save(this);
		}
	}
}


export class Bot_action_remindContext extends ParserRuleContext {
	public BitBotActionRemind(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionRemind, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_remind; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_remind) {
			listener.enterBot_action_remind(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_remind) {
			listener.exitBot_action_remind(this);
		}
	}
}


export class Bot_action_responseContext extends ParserRuleContext {
	public BitBotActionResponse(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionResponse, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode { return this.getToken(bitmarkParser.HSPL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public bot_action(): Bot_actionContext[];
	public bot_action(i: number): Bot_actionContext;
	public bot_action(i?: number): Bot_actionContext | Bot_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bot_actionContext);
		} else {
			return this.getRuleContext(i, Bot_actionContext);
		}
	}
	public footer(): FooterContext | undefined {
		return this.tryGetRuleContext(0, FooterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_response; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_response) {
			listener.enterBot_action_response(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_response) {
			listener.exitBot_action_response(this);
		}
	}
}


export class Bot_action_true_falseContext extends ParserRuleContext {
	public BitBotActionTrueFalse(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionTrueFalse, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode { return this.getToken(bitmarkParser.HSPL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public bot_action(): Bot_actionContext[];
	public bot_action(i: number): Bot_actionContext;
	public bot_action(i?: number): Bot_actionContext | Bot_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bot_actionContext);
		} else {
			return this.getRuleContext(i, Bot_actionContext);
		}
	}
	public footer(): FooterContext | undefined {
		return this.tryGetRuleContext(0, FooterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_true_false; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_true_false) {
			listener.enterBot_action_true_false(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_true_false) {
			listener.exitBot_action_true_false(this);
		}
	}
}


export class Bot_action_rating_numberContext extends ParserRuleContext {
	public BitBotActionRatingNumber(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionRatingNumber, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode { return this.getToken(bitmarkParser.HSPL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public bot_action(): Bot_actionContext[];
	public bot_action(i: number): Bot_actionContext;
	public bot_action(i?: number): Bot_actionContext | Bot_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bot_actionContext);
		} else {
			return this.getRuleContext(i, Bot_actionContext);
		}
	}
	public footer(): FooterContext | undefined {
		return this.tryGetRuleContext(0, FooterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_rating_number; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_rating_number) {
			listener.enterBot_action_rating_number(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_rating_number) {
			listener.exitBot_action_rating_number(this);
		}
	}
}


export class Bot_action_rating_starsContext extends ParserRuleContext {
	public BitBotActionRatingStars(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionRatingStars, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_rating_stars; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_rating_stars) {
			listener.enterBot_action_rating_stars(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_rating_stars) {
			listener.exitBot_action_rating_stars(this);
		}
	}
}


export class Bot_actionContext extends ParserRuleContext {
	public HSPL(): TerminalNode { return this.getToken(bitmarkParser.HSPL, 0); }
	public bo_actions(): Bo_actionsContext {
		return this.getRuleContext(0, Bo_actionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action) {
			listener.enterBot_action(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action) {
			listener.exitBot_action(this);
		}
	}
}


export class Bo_actionsContext extends ParserRuleContext {
	public boacts(): BoactsContext[];
	public boacts(i: number): BoactsContext;
	public boacts(i?: number): BoactsContext | BoactsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BoactsContext);
		} else {
			return this.getRuleContext(i, BoactsContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bo_actions; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBo_actions) {
			listener.enterBo_actions(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBo_actions) {
			listener.exitBo_actions(this);
		}
	}
}


export class BoactsContext extends ParserRuleContext {
	public instruction(): InstructionContext | undefined {
		return this.tryGetRuleContext(0, InstructionContext);
	}
	public item(): ItemContext | undefined {
		return this.tryGetRuleContext(0, ItemContext);
	}
	public atdef(): AtdefContext | undefined {
		return this.tryGetRuleContext(0, AtdefContext);
	}
	public hint(): HintContext | undefined {
		return this.tryGetRuleContext(0, HintContext);
	}
	public choice_minus(): Choice_minusContext | undefined {
		return this.tryGetRuleContext(0, Choice_minusContext);
	}
	public choice_plus(): Choice_plusContext | undefined {
		return this.tryGetRuleContext(0, Choice_plusContext);
	}
	public feedback(): FeedbackContext | undefined {
		return this.tryGetRuleContext(0, FeedbackContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_boacts; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBoacts) {
			listener.enterBoacts(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBoacts) {
			listener.exitBoacts(this);
		}
	}
}


export class FeedbackContext extends ParserRuleContext {
	public ENCLBARS(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ENCLBARS, 0); }
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_feedback; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFeedback) {
			listener.enterFeedback(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFeedback) {
			listener.exitFeedback(this);
		}
	}
}


export class FooterContext extends ParserRuleContext {
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_footer; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFooter) {
			listener.enterFooter(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFooter) {
			listener.exitFooter(this);
		}
	}
}


export class BitElemContext extends ParserRuleContext {
	public LIST_LINE(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.LIST_LINE, 0); }
	public NOTBITMARK(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NOTBITMARK, 0); }
	public dclines(): DclinesContext | undefined {
		return this.tryGetRuleContext(0, DclinesContext);
	}
	public gap(): GapContext | undefined {
		return this.tryGetRuleContext(0, GapContext);
	}
	public reference(): ReferenceContext | undefined {
		return this.tryGetRuleContext(0, ReferenceContext);
	}
	public dateprop(): DatepropContext | undefined {
		return this.tryGetRuleContext(0, DatepropContext);
	}
	public progress(): ProgressContext | undefined {
		return this.tryGetRuleContext(0, ProgressContext);
	}
	public atdef(): AtdefContext | undefined {
		return this.tryGetRuleContext(0, AtdefContext);
	}
	public dollarans(): DollaransContext | undefined {
		return this.tryGetRuleContext(0, DollaransContext);
	}
	public partans(): PartansContext | undefined {
		return this.tryGetRuleContext(0, PartansContext);
	}
	public item(): ItemContext | undefined {
		return this.tryGetRuleContext(0, ItemContext);
	}
	public title(): TitleContext | undefined {
		return this.tryGetRuleContext(0, TitleContext);
	}
	public instruction(): InstructionContext | undefined {
		return this.tryGetRuleContext(0, InstructionContext);
	}
	public hint(): HintContext | undefined {
		return this.tryGetRuleContext(0, HintContext);
	}
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	public example(): ExampleContext | undefined {
		return this.tryGetRuleContext(0, ExampleContext);
	}
	public bool_label(): Bool_labelContext | undefined {
		return this.tryGetRuleContext(0, Bool_labelContext);
	}
	public progress_points(): Progress_pointsContext | undefined {
		return this.tryGetRuleContext(0, Progress_pointsContext);
	}
	public istracked(): IstrackedContext | undefined {
		return this.tryGetRuleContext(0, IstrackedContext);
	}
	public isinfoonly(): IsinfoonlyContext | undefined {
		return this.tryGetRuleContext(0, IsinfoonlyContext);
	}
	public imagebit(): ImagebitContext | undefined {
		return this.tryGetRuleContext(0, ImagebitContext);
	}
	public audiobit(): AudiobitContext | undefined {
		return this.tryGetRuleContext(0, AudiobitContext);
	}
	public videobit(): VideobitContext | undefined {
		return this.tryGetRuleContext(0, VideobitContext);
	}
	public articlebit(): ArticlebitContext | undefined {
		return this.tryGetRuleContext(0, ArticlebitContext);
	}
	public documentbit(): DocumentbitContext | undefined {
		return this.tryGetRuleContext(0, DocumentbitContext);
	}
	public appbit(): AppbitContext | undefined {
		return this.tryGetRuleContext(0, AppbitContext);
	}
	public websitebit(): WebsitebitContext | undefined {
		return this.tryGetRuleContext(0, WebsitebitContext);
	}
	public stillimagefilmbit(): StillimagefilmbitContext | undefined {
		return this.tryGetRuleContext(0, StillimagefilmbitContext);
	}
	public angleref(): AnglerefContext | undefined {
		return this.tryGetRuleContext(0, AnglerefContext);
	}
	public anchor(): AnchorContext | undefined {
		return this.tryGetRuleContext(0, AnchorContext);
	}
	public bracketed_text(): Bracketed_textContext | undefined {
		return this.tryGetRuleContext(0, Bracketed_textContext);
	}
	public sp(): SpContext | undefined {
		return this.tryGetRuleContext(0, SpContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bitElem; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBitElem) {
			listener.enterBitElem(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBitElem) {
			listener.exitBitElem(this);
		}
	}
}


export class GapContext extends ParserRuleContext {
	public single_gap(): Single_gapContext[];
	public single_gap(i: number): Single_gapContext;
	public single_gap(i?: number): Single_gapContext | Single_gapContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Single_gapContext);
		} else {
			return this.getRuleContext(i, Single_gapContext);
		}
	}
	public instruction(): InstructionContext[];
	public instruction(i: number): InstructionContext;
	public instruction(i?: number): InstructionContext | InstructionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InstructionContext);
		} else {
			return this.getRuleContext(i, InstructionContext);
		}
	}
	public hint(): HintContext[];
	public hint(i: number): HintContext;
	public hint(i?: number): HintContext | HintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HintContext);
		} else {
			return this.getRuleContext(i, HintContext);
		}
	}
	public item(): ItemContext[];
	public item(i: number): ItemContext;
	public item(i?: number): ItemContext | ItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ItemContext);
		} else {
			return this.getRuleContext(i, ItemContext);
		}
	}
	public example(): ExampleContext[];
	public example(i: number): ExampleContext;
	public example(i?: number): ExampleContext | ExampleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExampleContext);
		} else {
			return this.getRuleContext(i, ExampleContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_gap; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterGap) {
			listener.enterGap(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitGap) {
			listener.exitGap(this);
		}
	}
}


export class Single_gapContext extends ParserRuleContext {
	public OPU(): TerminalNode { return this.getToken(bitmarkParser.OPU, 0); }
	public clnsp(): ClnspContext {
		return this.getRuleContext(0, ClnspContext);
	}
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.STRING, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_single_gap; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSingle_gap) {
			listener.enterSingle_gap(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSingle_gap) {
			listener.exitSingle_gap(this);
		}
	}
}


export class Choice_plusContext extends ParserRuleContext {
	public OPP(): TerminalNode { return this.getToken(bitmarkParser.OPP, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public item(): ItemContext | undefined {
		return this.tryGetRuleContext(0, ItemContext);
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_choice_plus; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChoice_plus) {
			listener.enterChoice_plus(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChoice_plus) {
			listener.exitChoice_plus(this);
		}
	}
}


export class Choice_minusContext extends ParserRuleContext {
	public OPM(): TerminalNode { return this.getToken(bitmarkParser.OPM, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public item(): ItemContext | undefined {
		return this.tryGetRuleContext(0, ItemContext);
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_choice_minus; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChoice_minus) {
			listener.enterChoice_minus(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChoice_minus) {
			listener.exitChoice_minus(this);
		}
	}
}


export class Choice_starContext extends ParserRuleContext {
	public OPR(): TerminalNode { return this.getToken(bitmarkParser.OPR, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public item(): ItemContext | undefined {
		return this.tryGetRuleContext(0, ItemContext);
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_choice_star; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChoice_star) {
			listener.enterChoice_star(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChoice_star) {
			listener.exitChoice_star(this);
		}
	}
}


export class EssayContext extends ParserRuleContext {
	public BitEssay(): TerminalNode { return this.getToken(bitmarkParser.BitEssay, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public ml_example(): Ml_exampleContext[];
	public ml_example(i: number): Ml_exampleContext;
	public ml_example(i?: number): Ml_exampleContext | Ml_exampleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ml_exampleContext);
		} else {
			return this.getRuleContext(i, Ml_exampleContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_essay; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterEssay) {
			listener.enterEssay(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitEssay) {
			listener.exitEssay(this);
		}
	}
}


export class Ml_exampleContext extends ParserRuleContext {
	public AtExamplecol(): TerminalNode { return this.getToken(bitmarkParser.AtExamplecol, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public lines(): LinesContext | undefined {
		return this.tryGetRuleContext(0, LinesContext);
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_ml_example; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterMl_example) {
			listener.enterMl_example(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitMl_example) {
			listener.exitMl_example(this);
		}
	}
}


export class PartansContext extends ParserRuleContext {
	public AtPartialAnswerS(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtPartialAnswerS, 0); }
	public AtPartialAnswer(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtPartialAnswer, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_partans; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterPartans) {
			listener.enterPartans(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitPartans) {
			listener.exitPartans(this);
		}
	}
}


export class ResourceContext extends ParserRuleContext {
	public bitElem(): BitElemContext {
		return this.getRuleContext(0, BitElemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_resource; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterResource) {
			listener.enterResource(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitResource) {
			listener.exitResource(this);
		}
	}
}


export class CorrectionContext extends ParserRuleContext {
	public BitCorrection(): TerminalNode { return this.getToken(bitmarkParser.BitCorrection, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public corrs(): CorrsContext[];
	public corrs(i: number): CorrsContext;
	public corrs(i?: number): CorrsContext | CorrsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CorrsContext);
		} else {
			return this.getRuleContext(i, CorrsContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_correction; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCorrection) {
			listener.enterCorrection(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCorrection) {
			listener.exitCorrection(this);
		}
	}
}


export class CorrsContext extends ParserRuleContext {
	public OPM(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPM, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode { return this.getToken(bitmarkParser.NL, 0); }
	public OPP(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_corrs; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCorrs) {
			listener.enterCorrs(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCorrs) {
			listener.exitCorrs(this);
		}
	}
}


export class Mark_Context extends ParserRuleContext {
	public BitMark(): TerminalNode { return this.getToken(bitmarkParser.BitMark, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public mark_text(): Mark_textContext[];
	public mark_text(i: number): Mark_textContext;
	public mark_text(i?: number): Mark_textContext | Mark_textContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Mark_textContext);
		} else {
			return this.getRuleContext(i, Mark_textContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_mark_; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterMark_) {
			listener.enterMark_(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitMark_) {
			listener.exitMark_(this);
		}
	}
}


export class Mark_textContext extends ParserRuleContext {
	public OPS(): TerminalNode { return this.getToken(bitmarkParser.OPS, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public mark_color(): Mark_colorContext | undefined {
		return this.tryGetRuleContext(0, Mark_colorContext);
	}
	public hint(): HintContext[];
	public hint(i: number): HintContext;
	public hint(i?: number): HintContext | HintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HintContext);
		} else {
			return this.getRuleContext(i, HintContext);
		}
	}
	public item(): ItemContext[];
	public item(i: number): ItemContext;
	public item(i?: number): ItemContext | ItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ItemContext);
		} else {
			return this.getRuleContext(i, ItemContext);
		}
	}
	public instruction(): InstructionContext[];
	public instruction(i: number): InstructionContext;
	public instruction(i?: number): InstructionContext | InstructionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InstructionContext);
		} else {
			return this.getRuleContext(i, InstructionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_mark_text; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterMark_text) {
			listener.enterMark_text(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitMark_text) {
			listener.exitMark_text(this);
		}
	}
}


export class Mark_colorContext extends ParserRuleContext {
	public OPAMARK(): TerminalNode { return this.getToken(bitmarkParser.OPAMARK, 0); }
	public STRING(): TerminalNode { return this.getToken(bitmarkParser.STRING, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_mark_color; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterMark_color) {
			listener.enterMark_color(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitMark_color) {
			listener.exitMark_color(this);
		}
	}
}


export class Take_audioContext extends ParserRuleContext {
	public BitTakeAudio(): TerminalNode { return this.getToken(bitmarkParser.BitTakeAudio, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_take_audio; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterTake_audio) {
			listener.enterTake_audio(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitTake_audio) {
			listener.exitTake_audio(this);
		}
	}
}


export class Take_pictureContext extends ParserRuleContext {
	public BitTakepic(): TerminalNode { return this.getToken(bitmarkParser.BitTakepic, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_take_picture; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterTake_picture) {
			listener.enterTake_picture(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitTake_picture) {
			listener.exitTake_picture(this);
		}
	}
}


export class Record_audioContext extends ParserRuleContext {
	public BitRecaud(): TerminalNode { return this.getToken(bitmarkParser.BitRecaud, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_record_audio; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterRecord_audio) {
			listener.enterRecord_audio(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitRecord_audio) {
			listener.exitRecord_audio(this);
		}
	}
}


export class Preparation_noteContext extends ParserRuleContext {
	public BitPrepnote(): TerminalNode { return this.getToken(bitmarkParser.BitPrepnote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public lines(): LinesContext | undefined {
		return this.tryGetRuleContext(0, LinesContext);
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_preparation_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterPreparation_note) {
			listener.enterPreparation_note(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitPreparation_note) {
			listener.exitPreparation_note(this);
		}
	}
}


export class AssignmentContext extends ParserRuleContext {
	public BitAssign(): TerminalNode { return this.getToken(bitmarkParser.BitAssign, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public lines(): LinesContext | undefined {
		return this.tryGetRuleContext(0, LinesContext);
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_assignment; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAssignment) {
			listener.enterAssignment(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAssignment) {
			listener.exitAssignment(this);
		}
	}
}


export class ArticleContext extends ParserRuleContext {
	public BitArticle(): TerminalNode { return this.getToken(bitmarkParser.BitArticle, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_article; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterArticle) {
			listener.enterArticle(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitArticle) {
			listener.exitArticle(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public BitStatement(): TerminalNode { return this.getToken(bitmarkParser.BitStatement, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_statement; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
}


export class DetailsContext extends ParserRuleContext {
	public BitDetails(): TerminalNode { return this.getToken(bitmarkParser.BitDetails, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_details; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDetails) {
			listener.enterDetails(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDetails) {
			listener.exitDetails(this);
		}
	}
}


export class Sample_solutionContext extends ParserRuleContext {
	public BitSampleSolution(): TerminalNode { return this.getToken(bitmarkParser.BitSampleSolution, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_sample_solution; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSample_solution) {
			listener.enterSample_solution(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSample_solution) {
			listener.exitSample_solution(this);
		}
	}
}


export class ButtoncopytextContext extends ParserRuleContext {
	public BitButtonCopytext(): TerminalNode { return this.getToken(bitmarkParser.BitButtonCopytext, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_buttoncopytext; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterButtoncopytext) {
			listener.enterButtoncopytext(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitButtoncopytext) {
			listener.exitButtoncopytext(this);
		}
	}
}


export class WbtcontinueContext extends ParserRuleContext {
	public BitWbtContinue(): TerminalNode { return this.getToken(bitmarkParser.BitWbtContinue, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_wbtcontinue; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWbtcontinue) {
			listener.enterWbtcontinue(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWbtcontinue) {
			listener.exitWbtcontinue(this);
		}
	}
}


export class LearningpathdetailsContext extends ParserRuleContext {
	public BitLearningPathDetails(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathDetails, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learningpathdetails; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearningpathdetails) {
			listener.enterLearningpathdetails(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearningpathdetails) {
			listener.exitLearningpathdetails(this);
		}
	}
}


export class PageContext extends ParserRuleContext {
	public BitPage(): TerminalNode { return this.getToken(bitmarkParser.BitPage, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_page; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterPage) {
			listener.enterPage(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitPage) {
			listener.exitPage(this);
		}
	}
}


export class NoteContext extends ParserRuleContext {
	public BitNote(): TerminalNode { return this.getToken(bitmarkParser.BitNote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterNote) {
			listener.enterNote(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitNote) {
			listener.exitNote(this);
		}
	}
}


export class InfoContext extends ParserRuleContext {
	public BitInfo(): TerminalNode { return this.getToken(bitmarkParser.BitInfo, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_info; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterInfo) {
			listener.enterInfo(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitInfo) {
			listener.exitInfo(this);
		}
	}
}


export class WarningContext extends ParserRuleContext {
	public BitWarning(): TerminalNode { return this.getToken(bitmarkParser.BitWarning, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_warning; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWarning) {
			listener.enterWarning(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWarning) {
			listener.exitWarning(this);
		}
	}
}


export class RemarkContext extends ParserRuleContext {
	public BitRemark(): TerminalNode { return this.getToken(bitmarkParser.BitRemark, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_remark; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterRemark) {
			listener.enterRemark(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitRemark) {
			listener.exitRemark(this);
		}
	}
}


export class HelpContext extends ParserRuleContext {
	public BitHelp(): TerminalNode { return this.getToken(bitmarkParser.BitHelp, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_help; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterHelp) {
			listener.enterHelp(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitHelp) {
			listener.exitHelp(this);
		}
	}
}


export class DangerContext extends ParserRuleContext {
	public BitDanger(): TerminalNode { return this.getToken(bitmarkParser.BitDanger, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_danger; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDanger) {
			listener.enterDanger(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDanger) {
			listener.exitDanger(this);
		}
	}
}


export class BugContext extends ParserRuleContext {
	public BitBug(): TerminalNode { return this.getToken(bitmarkParser.BitBug, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bug; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBug) {
			listener.enterBug(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBug) {
			listener.exitBug(this);
		}
	}
}


export class SidenoteContext extends ParserRuleContext {
	public BitSidenote(): TerminalNode { return this.getToken(bitmarkParser.BitSidenote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_sidenote; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSidenote) {
			listener.enterSidenote(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSidenote) {
			listener.exitSidenote(this);
		}
	}
}


export class StickynoteContext extends ParserRuleContext {
	public BitStickynote(): TerminalNode { return this.getToken(bitmarkParser.BitStickynote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_stickynote; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterStickynote) {
			listener.enterStickynote(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitStickynote) {
			listener.exitStickynote(this);
		}
	}
}


export class QuoteContext extends ParserRuleContext {
	public BitQuote(): TerminalNode { return this.getToken(bitmarkParser.BitQuote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_quote; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterQuote) {
			listener.enterQuote(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitQuote) {
			listener.exitQuote(this);
		}
	}
}


export class FootnoteContext extends ParserRuleContext {
	public BitFootnote(): TerminalNode { return this.getToken(bitmarkParser.BitFootnote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_footnote; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFootnote) {
			listener.enterFootnote(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFootnote) {
			listener.exitFootnote(this);
		}
	}
}


export class HintbitContext extends ParserRuleContext {
	public BitHint(): TerminalNode { return this.getToken(bitmarkParser.BitHint, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_hintbit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterHintbit) {
			listener.enterHintbit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitHintbit) {
			listener.exitHintbit(this);
		}
	}
}


export class ExamplebitContext extends ParserRuleContext {
	public BitExample(): TerminalNode { return this.getToken(bitmarkParser.BitExample, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_examplebit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterExamplebit) {
			listener.enterExamplebit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitExamplebit) {
			listener.exitExamplebit(this);
		}
	}
}


export class Vendor_padlet_embedContext extends ParserRuleContext {
	public BitVendorPadletEmbed(): TerminalNode { return this.getToken(bitmarkParser.BitVendorPadletEmbed, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_vendor_padlet_embed; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVendor_padlet_embed) {
			listener.enterVendor_padlet_embed(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVendor_padlet_embed) {
			listener.exitVendor_padlet_embed(this);
		}
	}
}


export class ScormContext extends ParserRuleContext {
	public BitScorm(): TerminalNode { return this.getToken(bitmarkParser.BitScorm, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_scorm; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterScorm) {
			listener.enterScorm(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitScorm) {
			listener.exitScorm(this);
		}
	}
}


export class Bit_imageContext extends ParserRuleContext {
	public BitImage(): TerminalNode { return this.getToken(bitmarkParser.BitImage, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_image; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_image) {
			listener.enterBit_image(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_image) {
			listener.exitBit_image(this);
		}
	}
}


export class Bit_imageLinkContext extends ParserRuleContext {
	public BitImageLink(): TerminalNode { return this.getToken(bitmarkParser.BitImageLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_imageLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_imageLink) {
			listener.enterBit_imageLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_imageLink) {
			listener.exitBit_imageLink(this);
		}
	}
}


export class Bit_imageZoomContext extends ParserRuleContext {
	public BitImageZoom(): TerminalNode { return this.getToken(bitmarkParser.BitImageZoom, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_imageZoom; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_imageZoom) {
			listener.enterBit_imageZoom(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_imageZoom) {
			listener.exitBit_imageZoom(this);
		}
	}
}


export class Bit_imagePrototypeContext extends ParserRuleContext {
	public BitImagePrototype(): TerminalNode { return this.getToken(bitmarkParser.BitImagePrototype, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_imagePrototype; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_imagePrototype) {
			listener.enterBit_imagePrototype(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_imagePrototype) {
			listener.exitBit_imagePrototype(this);
		}
	}
}


export class Bit_imageSuperWideContext extends ParserRuleContext {
	public BitImageSuperWide(): TerminalNode { return this.getToken(bitmarkParser.BitImageSuperWide, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_imageSuperWide; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_imageSuperWide) {
			listener.enterBit_imageSuperWide(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_imageSuperWide) {
			listener.exitBit_imageSuperWide(this);
		}
	}
}


export class Bit_audioContext extends ParserRuleContext {
	public BitAudio(): TerminalNode { return this.getToken(bitmarkParser.BitAudio, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_audio; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_audio) {
			listener.enterBit_audio(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_audio) {
			listener.exitBit_audio(this);
		}
	}
}


export class Bit_audioLinkContext extends ParserRuleContext {
	public BitAudioLink(): TerminalNode { return this.getToken(bitmarkParser.BitAudioLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_audioLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_audioLink) {
			listener.enterBit_audioLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_audioLink) {
			listener.exitBit_audioLink(this);
		}
	}
}


export class Bit_audioEmbedContext extends ParserRuleContext {
	public BitAudioEmbed(): TerminalNode { return this.getToken(bitmarkParser.BitAudioEmbed, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_audioEmbed; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_audioEmbed) {
			listener.enterBit_audioEmbed(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_audioEmbed) {
			listener.exitBit_audioEmbed(this);
		}
	}
}


export class Bit_videoContext extends ParserRuleContext {
	public BitVideo(): TerminalNode { return this.getToken(bitmarkParser.BitVideo, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_video; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_video) {
			listener.enterBit_video(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_video) {
			listener.exitBit_video(this);
		}
	}
}


export class Bit_videoLinkContext extends ParserRuleContext {
	public BitVideoLink(): TerminalNode { return this.getToken(bitmarkParser.BitVideoLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_videoLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_videoLink) {
			listener.enterBit_videoLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_videoLink) {
			listener.exitBit_videoLink(this);
		}
	}
}


export class Bit_videoEmbedContext extends ParserRuleContext {
	public BitVideoEmbed(): TerminalNode { return this.getToken(bitmarkParser.BitVideoEmbed, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_videoEmbed; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_videoEmbed) {
			listener.enterBit_videoEmbed(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_videoEmbed) {
			listener.exitBit_videoEmbed(this);
		}
	}
}


export class Bit_videoPortraitContext extends ParserRuleContext {
	public BitVideoPortrait(): TerminalNode { return this.getToken(bitmarkParser.BitVideoPortrait, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_videoPortrait; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_videoPortrait) {
			listener.enterBit_videoPortrait(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_videoPortrait) {
			listener.exitBit_videoPortrait(this);
		}
	}
}


export class Bit_videoLandscapeContext extends ParserRuleContext {
	public BitVideoLandscape(): TerminalNode { return this.getToken(bitmarkParser.BitVideoLandscape, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_videoLandscape; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_videoLandscape) {
			listener.enterBit_videoLandscape(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_videoLandscape) {
			listener.exitBit_videoLandscape(this);
		}
	}
}


export class Bit_stillImageFilmContext extends ParserRuleContext {
	public BitStillImageFilm(): TerminalNode { return this.getToken(bitmarkParser.BitStillImageFilm, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_stillImageFilm; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_stillImageFilm) {
			listener.enterBit_stillImageFilm(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_stillImageFilm) {
			listener.exitBit_stillImageFilm(this);
		}
	}
}


export class Bit_stillImageFilmLinkContext extends ParserRuleContext {
	public BitStillImageFilmLink(): TerminalNode { return this.getToken(bitmarkParser.BitStillImageFilmLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_stillImageFilmLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_stillImageFilmLink) {
			listener.enterBit_stillImageFilmLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_stillImageFilmLink) {
			listener.exitBit_stillImageFilmLink(this);
		}
	}
}


export class Bit_stillImageFilmEmbedContext extends ParserRuleContext {
	public BitStillImageFilmEmbed(): TerminalNode { return this.getToken(bitmarkParser.BitStillImageFilmEmbed, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_stillImageFilmEmbed; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_stillImageFilmEmbed) {
			listener.enterBit_stillImageFilmEmbed(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_stillImageFilmEmbed) {
			listener.exitBit_stillImageFilmEmbed(this);
		}
	}
}


export class Bit_websiteLinkContext extends ParserRuleContext {
	public BitWebsiteLink(): TerminalNode { return this.getToken(bitmarkParser.BitWebsiteLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_websiteLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_websiteLink) {
			listener.enterBit_websiteLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_websiteLink) {
			listener.exitBit_websiteLink(this);
		}
	}
}


export class Bit_documentContext extends ParserRuleContext {
	public BitDocument(): TerminalNode { return this.getToken(bitmarkParser.BitDocument, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_document; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_document) {
			listener.enterBit_document(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_document) {
			listener.exitBit_document(this);
		}
	}
}


export class Bit_documentLinkContext extends ParserRuleContext {
	public BitDocumentLink(): TerminalNode { return this.getToken(bitmarkParser.BitDocumentLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_documentLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_documentLink) {
			listener.enterBit_documentLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_documentLink) {
			listener.exitBit_documentLink(this);
		}
	}
}


export class Bit_documentEmbedContext extends ParserRuleContext {
	public BitDocumentEmbed(): TerminalNode { return this.getToken(bitmarkParser.BitDocumentEmbed, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_documentEmbed; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_documentEmbed) {
			listener.enterBit_documentEmbed(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_documentEmbed) {
			listener.exitBit_documentEmbed(this);
		}
	}
}


export class Bit_documentDownloadContext extends ParserRuleContext {
	public BitDocumentDownload(): TerminalNode { return this.getToken(bitmarkParser.BitDocumentDownload, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_documentDownload; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_documentDownload) {
			listener.enterBit_documentDownload(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_documentDownload) {
			listener.exitBit_documentDownload(this);
		}
	}
}


export class Bit_appLinkContext extends ParserRuleContext {
	public BitAppLink(): TerminalNode { return this.getToken(bitmarkParser.BitAppLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_appLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_appLink) {
			listener.enterBit_appLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_appLink) {
			listener.exitBit_appLink(this);
		}
	}
}


export class Bit_editorialContext extends ParserRuleContext {
	public BitEditorial(): TerminalNode { return this.getToken(bitmarkParser.BitEditorial, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_editorial; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_editorial) {
			listener.enterBit_editorial(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_editorial) {
			listener.exitBit_editorial(this);
		}
	}
}


export class Book_frontispieceContext extends ParserRuleContext {
	public BitBookFrontispiece(): TerminalNode { return this.getToken(bitmarkParser.BitBookFrontispiece, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_frontispiece; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_frontispiece) {
			listener.enterBook_frontispiece(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_frontispiece) {
			listener.exitBook_frontispiece(this);
		}
	}
}


export class Book_titleContext extends ParserRuleContext {
	public BitBookTitle(): TerminalNode { return this.getToken(bitmarkParser.BitBookTitle, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_title; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_title) {
			listener.enterBook_title(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_title) {
			listener.exitBook_title(this);
		}
	}
}


export class Book_copyrightContext extends ParserRuleContext {
	public BitBookCopyright(): TerminalNode { return this.getToken(bitmarkParser.BitBookCopyright, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_copyright; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_copyright) {
			listener.enterBook_copyright(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_copyright) {
			listener.exitBook_copyright(this);
		}
	}
}


export class Book_dedicationContext extends ParserRuleContext {
	public BitBookDedication(): TerminalNode { return this.getToken(bitmarkParser.BitBookDedication, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_dedication; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_dedication) {
			listener.enterBook_dedication(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_dedication) {
			listener.exitBook_dedication(this);
		}
	}
}


export class Book_forwordContext extends ParserRuleContext {
	public BitBookForword(): TerminalNode { return this.getToken(bitmarkParser.BitBookForword, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_forword; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_forword) {
			listener.enterBook_forword(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_forword) {
			listener.exitBook_forword(this);
		}
	}
}


export class Book_prefaceContext extends ParserRuleContext {
	public BitBookPreface(): TerminalNode { return this.getToken(bitmarkParser.BitBookPreface, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_preface; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_preface) {
			listener.enterBook_preface(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_preface) {
			listener.exitBook_preface(this);
		}
	}
}


export class Book_prologueContext extends ParserRuleContext {
	public BitBookPrologue(): TerminalNode { return this.getToken(bitmarkParser.BitBookPrologue, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_prologue; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_prologue) {
			listener.enterBook_prologue(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_prologue) {
			listener.exitBook_prologue(this);
		}
	}
}


export class Book_epilogueContext extends ParserRuleContext {
	public BitBookEpilogue(): TerminalNode { return this.getToken(bitmarkParser.BitBookEpilogue, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_epilogue; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_epilogue) {
			listener.enterBook_epilogue(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_epilogue) {
			listener.exitBook_epilogue(this);
		}
	}
}


export class Book_introductionContext extends ParserRuleContext {
	public BitBookIntroduction(): TerminalNode { return this.getToken(bitmarkParser.BitBookIntroduction, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_introduction; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_introduction) {
			listener.enterBook_introduction(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_introduction) {
			listener.exitBook_introduction(this);
		}
	}
}


export class Book_inciting_incidentContext extends ParserRuleContext {
	public BitBookIncitingIncident(): TerminalNode { return this.getToken(bitmarkParser.BitBookIncitingIncident, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_inciting_incident; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_inciting_incident) {
			listener.enterBook_inciting_incident(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_inciting_incident) {
			listener.exitBook_inciting_incident(this);
		}
	}
}


export class Book_conclusionContext extends ParserRuleContext {
	public BitBookConclusion(): TerminalNode { return this.getToken(bitmarkParser.BitBookConclusion, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_conclusion; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_conclusion) {
			listener.enterBook_conclusion(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_conclusion) {
			listener.exitBook_conclusion(this);
		}
	}
}


export class Book_afterwordContext extends ParserRuleContext {
	public BitBookAfterword(): TerminalNode { return this.getToken(bitmarkParser.BitBookAfterword, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_afterword; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_afterword) {
			listener.enterBook_afterword(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_afterword) {
			listener.exitBook_afterword(this);
		}
	}
}


export class Book_postscriptContext extends ParserRuleContext {
	public BitBookPostscript(): TerminalNode { return this.getToken(bitmarkParser.BitBookPostscript, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_postscript; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_postscript) {
			listener.enterBook_postscript(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_postscript) {
			listener.exitBook_postscript(this);
		}
	}
}


export class Book_appendixContext extends ParserRuleContext {
	public BitBookappendix(): TerminalNode { return this.getToken(bitmarkParser.BitBookappendix, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_appendix; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_appendix) {
			listener.enterBook_appendix(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_appendix) {
			listener.exitBook_appendix(this);
		}
	}
}


export class Book_addendumContext extends ParserRuleContext {
	public BitBookAddendum(): TerminalNode { return this.getToken(bitmarkParser.BitBookAddendum, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_addendum; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_addendum) {
			listener.enterBook_addendum(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_addendum) {
			listener.exitBook_addendum(this);
		}
	}
}


export class Book_acknowledgmentsContext extends ParserRuleContext {
	public BitBookAcknowledgments(): TerminalNode { return this.getToken(bitmarkParser.BitBookAcknowledgments, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_acknowledgments; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_acknowledgments) {
			listener.enterBook_acknowledgments(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_acknowledgments) {
			listener.exitBook_acknowledgments(this);
		}
	}
}


export class Book_list_of_contributorsContext extends ParserRuleContext {
	public BitBookListOfContributors(): TerminalNode { return this.getToken(bitmarkParser.BitBookListOfContributors, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_list_of_contributors; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_list_of_contributors) {
			listener.enterBook_list_of_contributors(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_list_of_contributors) {
			listener.exitBook_list_of_contributors(this);
		}
	}
}


export class Book_bibliographyContext extends ParserRuleContext {
	public BitBookBibliography(): TerminalNode { return this.getToken(bitmarkParser.BitBookBibliography, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_bibliography; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_bibliography) {
			listener.enterBook_bibliography(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_bibliography) {
			listener.exitBook_bibliography(this);
		}
	}
}


export class Book_reference_listContext extends ParserRuleContext {
	public BitBookReferenceList(): TerminalNode { return this.getToken(bitmarkParser.BitBookReferenceList, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_reference_list; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_reference_list) {
			listener.enterBook_reference_list(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_reference_list) {
			listener.exitBook_reference_list(this);
		}
	}
}


export class Book_endnotesContext extends ParserRuleContext {
	public BitBookEndnotes(): TerminalNode { return this.getToken(bitmarkParser.BitBookEndnotes, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_endnotes; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_endnotes) {
			listener.enterBook_endnotes(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_endnotes) {
			listener.exitBook_endnotes(this);
		}
	}
}


export class Book_notesContext extends ParserRuleContext {
	public BitBookNotes(): TerminalNode { return this.getToken(bitmarkParser.BitBookNotes, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_notes; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_notes) {
			listener.enterBook_notes(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_notes) {
			listener.exitBook_notes(this);
		}
	}
}


export class Book_copyright_permissionsContext extends ParserRuleContext {
	public BitBookCopyrightPermissions(): TerminalNode { return this.getToken(bitmarkParser.BitBookCopyrightPermissions, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_copyright_permissions; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_copyright_permissions) {
			listener.enterBook_copyright_permissions(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_copyright_permissions) {
			listener.exitBook_copyright_permissions(this);
		}
	}
}


export class Book_teaserContext extends ParserRuleContext {
	public BitBookTeaser(): TerminalNode { return this.getToken(bitmarkParser.BitBookTeaser, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_teaser; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_teaser) {
			listener.enterBook_teaser(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_teaser) {
			listener.exitBook_teaser(this);
		}
	}
}


export class Book_auther_bioContext extends ParserRuleContext {
	public BitBookAutherBio(): TerminalNode { return this.getToken(bitmarkParser.BitBookAutherBio, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_auther_bio; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_auther_bio) {
			listener.enterBook_auther_bio(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_auther_bio) {
			listener.exitBook_auther_bio(this);
		}
	}
}


export class Book_request_for_a_book_reviewContext extends ParserRuleContext {
	public BitBookRequestForABookReview(): TerminalNode { return this.getToken(bitmarkParser.BitBookRequestForABookReview, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_request_for_a_book_review; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_request_for_a_book_review) {
			listener.enterBook_request_for_a_book_review(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_request_for_a_book_review) {
			listener.exitBook_request_for_a_book_review(this);
		}
	}
}


export class Book_coming_soonContext extends ParserRuleContext {
	public BitBookComingSoon(): TerminalNode { return this.getToken(bitmarkParser.BitBookComingSoon, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_coming_soon; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_coming_soon) {
			listener.enterBook_coming_soon(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_coming_soon) {
			listener.exitBook_coming_soon(this);
		}
	}
}


export class Book_read_moreContext extends ParserRuleContext {
	public BitBookReadMore(): TerminalNode { return this.getToken(bitmarkParser.BitBookReadMore, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_read_more; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_read_more) {
			listener.enterBook_read_more(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_read_more) {
			listener.exitBook_read_more(this);
		}
	}
}


export class Book_summaryContext extends ParserRuleContext {
	public BitBookSummary(): TerminalNode { return this.getToken(bitmarkParser.BitBookSummary, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_summary; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_summary) {
			listener.enterBook_summary(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_summary) {
			listener.exitBook_summary(this);
		}
	}
}


export class Book_epigraphContext extends ParserRuleContext {
	public BitBookEpigraph(): TerminalNode { return this.getToken(bitmarkParser.BitBookEpigraph, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_epigraph; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_epigraph) {
			listener.enterBook_epigraph(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_epigraph) {
			listener.exitBook_epigraph(this);
		}
	}
}


export class CodeContext extends ParserRuleContext {
	public BitCode(): TerminalNode { return this.getToken(bitmarkParser.BitCode, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_code; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCode) {
			listener.enterCode(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCode) {
			listener.exitCode(this);
		}
	}
}


export class Card1Context extends ParserRuleContext {
	public BitCard1(): TerminalNode { return this.getToken(bitmarkParser.BitCard1, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_card1; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCard1) {
			listener.enterCard1(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCard1) {
			listener.exitCard1(this);
		}
	}
}


export class Question1Context extends ParserRuleContext {
	public BitQuestion1(): TerminalNode { return this.getToken(bitmarkParser.BitQuestion1, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_question1; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterQuestion1) {
			listener.enterQuestion1(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitQuestion1) {
			listener.exitQuestion1(this);
		}
	}
}


export class ScreenshotContext extends ParserRuleContext {
	public BitScreenshot(): TerminalNode { return this.getToken(bitmarkParser.BitScreenshot, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_screenshot; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterScreenshot) {
			listener.enterScreenshot(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitScreenshot) {
			listener.exitScreenshot(this);
		}
	}
}


export class Focus_imageContext extends ParserRuleContext {
	public BitFocusImage(): TerminalNode { return this.getToken(bitmarkParser.BitFocusImage, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_focus_image; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFocus_image) {
			listener.enterFocus_image(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFocus_image) {
			listener.exitFocus_image(this);
		}
	}
}


export class PhotoContext extends ParserRuleContext {
	public BitPhoto(): TerminalNode { return this.getToken(bitmarkParser.BitPhoto, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_photo; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterPhoto) {
			listener.enterPhoto(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitPhoto) {
			listener.exitPhoto(this);
		}
	}
}


export class Browser_imageContext extends ParserRuleContext {
	public BitBrowserImage(): TerminalNode { return this.getToken(bitmarkParser.BitBrowserImage, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_browser_image; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBrowser_image) {
			listener.enterBrowser_image(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBrowser_image) {
			listener.exitBrowser_image(this);
		}
	}
}


export class Chapter_subject_matterContext extends ParserRuleContext {
	public BitChapterSubjectMatter(): TerminalNode { return this.getToken(bitmarkParser.BitChapterSubjectMatter, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_chapter_subject_matter; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChapter_subject_matter) {
			listener.enterChapter_subject_matter(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChapter_subject_matter) {
			listener.exitChapter_subject_matter(this);
		}
	}
}


export class Release_noteContext extends ParserRuleContext {
	public BitReleaseNote(): TerminalNode { return this.getToken(bitmarkParser.BitReleaseNote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_release_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterRelease_note) {
			listener.enterRelease_note(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitRelease_note) {
			listener.exitRelease_note(this);
		}
	}
}


export class ConclusionContext extends ParserRuleContext {
	public BitConclusion(): TerminalNode { return this.getToken(bitmarkParser.BitConclusion, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_conclusion; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterConclusion) {
			listener.enterConclusion(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitConclusion) {
			listener.exitConclusion(this);
		}
	}
}


export class FeaturedContext extends ParserRuleContext {
	public BitFeatured(): TerminalNode { return this.getToken(bitmarkParser.BitFeatured, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_featured; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFeatured) {
			listener.enterFeatured(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFeatured) {
			listener.exitFeatured(this);
		}
	}
}


export class Vendor_amcharts_5_chartContext extends ParserRuleContext {
	public BitVendorAmcharts5Chart(): TerminalNode { return this.getToken(bitmarkParser.BitVendorAmcharts5Chart, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_vendor_amcharts_5_chart; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVendor_amcharts_5_chart) {
			listener.enterVendor_amcharts_5_chart(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVendor_amcharts_5_chart) {
			listener.exitVendor_amcharts_5_chart(this);
		}
	}
}


export class Newspaper_articleContext extends ParserRuleContext {
	public BitNewspaperArticle(): TerminalNode { return this.getToken(bitmarkParser.BitNewspaperArticle, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_newspaper_article; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterNewspaper_article) {
			listener.enterNewspaper_article(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitNewspaper_article) {
			listener.exitNewspaper_article(this);
		}
	}
}


export class Blog_articleContext extends ParserRuleContext {
	public BitBlogArticle(): TerminalNode { return this.getToken(bitmarkParser.BitBlogArticle, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_blog_article; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBlog_article) {
			listener.enterBlog_article(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBlog_article) {
			listener.exitBlog_article(this);
		}
	}
}


export class Book_articleContext extends ParserRuleContext {
	public BitBookArticle(): TerminalNode { return this.getToken(bitmarkParser.BitBookArticle, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_article; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_article) {
			listener.enterBook_article(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_article) {
			listener.exitBook_article(this);
		}
	}
}


export class Notebook_articleContext extends ParserRuleContext {
	public BitNotebookArticle(): TerminalNode { return this.getToken(bitmarkParser.BitNotebookArticle, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_notebook_article; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterNotebook_article) {
			listener.enterNotebook_article(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitNotebook_article) {
			listener.exitNotebook_article(this);
		}
	}
}


export class Workbook_articleContext extends ParserRuleContext {
	public BitWorkbookArticle(): TerminalNode { return this.getToken(bitmarkParser.BitWorkbookArticle, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_workbook_article; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWorkbook_article) {
			listener.enterWorkbook_article(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWorkbook_article) {
			listener.exitWorkbook_article(this);
		}
	}
}


export class Release_notes_summaryContext extends ParserRuleContext {
	public BitReleaseNotesSummary(): TerminalNode { return this.getToken(bitmarkParser.BitReleaseNotesSummary, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_release_notes_summary; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterRelease_notes_summary) {
			listener.enterRelease_notes_summary(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitRelease_notes_summary) {
			listener.exitRelease_notes_summary(this);
		}
	}
}


export class MessageContext extends ParserRuleContext {
	public BitMessage(): TerminalNode { return this.getToken(bitmarkParser.BitMessage, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_message; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterMessage) {
			listener.enterMessage(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitMessage) {
			listener.exitMessage(this);
		}
	}
}


export class Cook_preparationContext extends ParserRuleContext {
	public BitCookPreparation(): TerminalNode { return this.getToken(bitmarkParser.BitCookPreparation, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_preparation; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_preparation) {
			listener.enterCook_preparation(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_preparation) {
			listener.exitCook_preparation(this);
		}
	}
}


export class Cook_stepContext extends ParserRuleContext {
	public BitCookStep(): TerminalNode { return this.getToken(bitmarkParser.BitCookStep, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_step; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_step) {
			listener.enterCook_step(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_step) {
			listener.exitCook_step(this);
		}
	}
}


export class Cook_ingredientsContext extends ParserRuleContext {
	public BitCookIngredients(): TerminalNode { return this.getToken(bitmarkParser.BitCookIngredients, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_ingredients; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_ingredients) {
			listener.enterCook_ingredients(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_ingredients) {
			listener.exitCook_ingredients(this);
		}
	}
}


export class Cook_remarkContext extends ParserRuleContext {
	public BitCookRremark(): TerminalNode { return this.getToken(bitmarkParser.BitCookRremark, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_remark; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_remark) {
			listener.enterCook_remark(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_remark) {
			listener.exitCook_remark(this);
		}
	}
}


export class Cook_variationContext extends ParserRuleContext {
	public BitCookVariation(): TerminalNode { return this.getToken(bitmarkParser.BitCookVariation, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_variation; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_variation) {
			listener.enterCook_variation(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_variation) {
			listener.exitCook_variation(this);
		}
	}
}


export class Cook_insertContext extends ParserRuleContext {
	public BitCookInsert(): TerminalNode { return this.getToken(bitmarkParser.BitCookInsert, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_insert; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_insert) {
			listener.enterCook_insert(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_insert) {
			listener.exitCook_insert(this);
		}
	}
}


export class Cook_arrangementContext extends ParserRuleContext {
	public BitCookArrangement(): TerminalNode { return this.getToken(bitmarkParser.BitCookArrangement, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_arrangement; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_arrangement) {
			listener.enterCook_arrangement(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_arrangement) {
			listener.exitCook_arrangement(this);
		}
	}
}


export class Cook_practice_adviseContext extends ParserRuleContext {
	public BitCookPracticeAdvise(): TerminalNode { return this.getToken(bitmarkParser.BitCookPracticeAdvise, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_practice_advise; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_practice_advise) {
			listener.enterCook_practice_advise(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_practice_advise) {
			listener.exitCook_practice_advise(this);
		}
	}
}


export class Cook_plateContext extends ParserRuleContext {
	public BitCookPlate(): TerminalNode { return this.getToken(bitmarkParser.BitCookPlate, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_plate; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_plate) {
			listener.enterCook_plate(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_plate) {
			listener.exitCook_plate(this);
		}
	}
}


export class Cook_recommendationContext extends ParserRuleContext {
	public BitCookRecommendation(): TerminalNode { return this.getToken(bitmarkParser.BitCookRecommendation, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_recommendation; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_recommendation) {
			listener.enterCook_recommendation(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_recommendation) {
			listener.exitCook_recommendation(this);
		}
	}
}


export class Cook_personal_recommendationContext extends ParserRuleContext {
	public BitCookPersonalRecommendation(): TerminalNode { return this.getToken(bitmarkParser.BitCookPersonalRecommendation, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_personal_recommendation; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_personal_recommendation) {
			listener.enterCook_personal_recommendation(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_personal_recommendation) {
			listener.exitCook_personal_recommendation(this);
		}
	}
}


export class Cook_side_drinkContext extends ParserRuleContext {
	public BitCookSideDrink(): TerminalNode { return this.getToken(bitmarkParser.BitCookSideDrink, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_side_drink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_side_drink) {
			listener.enterCook_side_drink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_side_drink) {
			listener.exitCook_side_drink(this);
		}
	}
}


export class Cook_side_dishContext extends ParserRuleContext {
	public BitCookSideDish(): TerminalNode { return this.getToken(bitmarkParser.BitCookSideDish, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_side_dish; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_side_dish) {
			listener.enterCook_side_dish(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_side_dish) {
			listener.exitCook_side_dish(this);
		}
	}
}


export class Cook_timerContext extends ParserRuleContext {
	public BitCookTimer(): TerminalNode { return this.getToken(bitmarkParser.BitCookTimer, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_cook_timer; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCook_timer) {
			listener.enterCook_timer(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCook_timer) {
			listener.exitCook_timer(this);
		}
	}
}


export class Lang_learning_outcomesContext extends ParserRuleContext {
	public BitLangLearningOutcomes(): TerminalNode { return this.getToken(bitmarkParser.BitLangLearningOutcomes, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_learning_outcomes; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_learning_outcomes) {
			listener.enterLang_learning_outcomes(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_learning_outcomes) {
			listener.exitLang_learning_outcomes(this);
		}
	}
}


export class Lang_enabling_language_skillsContext extends ParserRuleContext {
	public BitLangEnablingLanguageSkills(): TerminalNode { return this.getToken(bitmarkParser.BitLangEnablingLanguageSkills, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_enabling_language_skills; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_enabling_language_skills) {
			listener.enterLang_enabling_language_skills(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_enabling_language_skills) {
			listener.exitLang_enabling_language_skills(this);
		}
	}
}


export class Lang_life_skillsContext extends ParserRuleContext {
	public BitLangLifeSkills(): TerminalNode { return this.getToken(bitmarkParser.BitLangLifeSkills, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_life_skills; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_life_skills) {
			listener.enterLang_life_skills(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_life_skills) {
			listener.exitLang_life_skills(this);
		}
	}
}


export class Lang_english_around_worldContext extends ParserRuleContext {
	public BitLangEnglishAroundWorld(): TerminalNode { return this.getToken(bitmarkParser.BitLangEnglishAroundWorld, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_english_around_world; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_english_around_world) {
			listener.enterLang_english_around_world(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_english_around_world) {
			listener.exitLang_english_around_world(this);
		}
	}
}


export class Lang_good_to_knowContext extends ParserRuleContext {
	public BitLangGoodtoknow(): TerminalNode { return this.getToken(bitmarkParser.BitLangGoodtoknow, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_good_to_know; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_good_to_know) {
			listener.enterLang_good_to_know(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_good_to_know) {
			listener.exitLang_good_to_know(this);
		}
	}
}


export class Lang_learning_strategyContext extends ParserRuleContext {
	public BitLangLearningStrategy(): TerminalNode { return this.getToken(bitmarkParser.BitLangLearningStrategy, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_learning_strategy; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_learning_strategy) {
			listener.enterLang_learning_strategy(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_learning_strategy) {
			listener.exitLang_learning_strategy(this);
		}
	}
}


export class Lang_like_a_localContext extends ParserRuleContext {
	public BitLangLikeAlocal(): TerminalNode { return this.getToken(bitmarkParser.BitLangLikeAlocal, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_like_a_local; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_like_a_local) {
			listener.enterLang_like_a_local(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_like_a_local) {
			listener.exitLang_like_a_local(this);
		}
	}
}


export class Lang_useful_phrasesContext extends ParserRuleContext {
	public BitLangUsefulPhrases(): TerminalNode { return this.getToken(bitmarkParser.BitLangUsefulPhrases, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_useful_phrases; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_useful_phrases) {
			listener.enterLang_useful_phrases(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_useful_phrases) {
			listener.exitLang_useful_phrases(this);
		}
	}
}


export class Lang_level_downContext extends ParserRuleContext {
	public BitLangLevelDown(): TerminalNode { return this.getToken(bitmarkParser.BitLangLevelDown, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_level_down; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_level_down) {
			listener.enterLang_level_down(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_level_down) {
			listener.exitLang_level_down(this);
		}
	}
}


export class Lang_level_upContext extends ParserRuleContext {
	public BitLangLevelUp(): TerminalNode { return this.getToken(bitmarkParser.BitLangLevelUp, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_level_up; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_level_up) {
			listener.enterLang_level_up(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_level_up) {
			listener.exitLang_level_up(this);
		}
	}
}


export class Lang_extra_activityContext extends ParserRuleContext {
	public BitLangExtraActivity(): TerminalNode { return this.getToken(bitmarkParser.BitLangExtraActivity, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_extra_activity; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_extra_activity) {
			listener.enterLang_extra_activity(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_extra_activity) {
			listener.exitLang_extra_activity(this);
		}
	}
}


export class Lang_video_scriptContext extends ParserRuleContext {
	public BitLangVideoScript(): TerminalNode { return this.getToken(bitmarkParser.BitLangVideoScript, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_video_script; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_video_script) {
			listener.enterLang_video_script(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_video_script) {
			listener.exitLang_video_script(this);
		}
	}
}


export class Lang_audio_scriptContext extends ParserRuleContext {
	public BitLangAudioScript(): TerminalNode { return this.getToken(bitmarkParser.BitLangAudioScript, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_audio_script; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_audio_script) {
			listener.enterLang_audio_script(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_audio_script) {
			listener.exitLang_audio_script(this);
		}
	}
}


export class Lang_vocabularyContext extends ParserRuleContext {
	public BitLangVocabulary(): TerminalNode { return this.getToken(bitmarkParser.BitLangVocabulary, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_vocabulary; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_vocabulary) {
			listener.enterLang_vocabulary(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_vocabulary) {
			listener.exitLang_vocabulary(this);
		}
	}
}


export class Lang_homeworkContext extends ParserRuleContext {
	public BitLangHomework(): TerminalNode { return this.getToken(bitmarkParser.BitLangHomework, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_homework; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_homework) {
			listener.enterLang_homework(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_homework) {
			listener.exitLang_homework(this);
		}
	}
}


export class Lang_teacher_noteContext extends ParserRuleContext {
	public BitLangTeacherNote(): TerminalNode { return this.getToken(bitmarkParser.BitLangTeacherNote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public lines(): LinesContext | undefined {
		return this.tryGetRuleContext(0, LinesContext);
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lang_teacher_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLang_teacher_note) {
			listener.enterLang_teacher_note(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLang_teacher_note) {
			listener.exitLang_teacher_note(this);
		}
	}
}


export class Review_noteContext extends ParserRuleContext {
	public BitReviewNote(): TerminalNode { return this.getToken(bitmarkParser.BitReviewNote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_review_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterReview_note) {
			listener.enterReview_note(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitReview_note) {
			listener.exitReview_note(this);
		}
	}
}


export class Review_author_noteContext extends ParserRuleContext {
	public BitReviewAuthorNote(): TerminalNode { return this.getToken(bitmarkParser.BitReviewAuthorNote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_review_author_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterReview_author_note) {
			listener.enterReview_author_note(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitReview_author_note) {
			listener.exitReview_author_note(this);
		}
	}
}


export class Review_reviewer_noteContext extends ParserRuleContext {
	public BitReviewReviewerNote(): TerminalNode { return this.getToken(bitmarkParser.BitReviewReviewerNote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_review_reviewer_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterReview_reviewer_note) {
			listener.enterReview_reviewer_note(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitReview_reviewer_note) {
			listener.exitReview_reviewer_note(this);
		}
	}
}


export class Review_request_for_review_noteContext extends ParserRuleContext {
	public BitReviewRequestForReviewNote(): TerminalNode { return this.getToken(bitmarkParser.BitReviewRequestForReviewNote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_review_request_for_review_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterReview_request_for_review_note) {
			listener.enterReview_request_for_review_note(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitReview_request_for_review_note) {
			listener.exitReview_request_for_review_note(this);
		}
	}
}


export class Review_approved_noteContext extends ParserRuleContext {
	public BitReviewApprovedNote(): TerminalNode { return this.getToken(bitmarkParser.BitReviewApprovedNote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_review_approved_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterReview_approved_note) {
			listener.enterReview_approved_note(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitReview_approved_note) {
			listener.exitReview_approved_note(this);
		}
	}
}


export class ChecklistContext extends ParserRuleContext {
	public BitChecklist(): TerminalNode { return this.getToken(bitmarkParser.BitChecklist, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_checklist; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChecklist) {
			listener.enterChecklist(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChecklist) {
			listener.exitChecklist(this);
		}
	}
}


export class Video_transcriptContext extends ParserRuleContext {
	public BitVideoTranscript(): TerminalNode { return this.getToken(bitmarkParser.BitVideoTranscript, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_video_transcript; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVideo_transcript) {
			listener.enterVideo_transcript(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVideo_transcript) {
			listener.exitVideo_transcript(this);
		}
	}
}


export class Audio_transcriptContext extends ParserRuleContext {
	public BitAudioTranscript(): TerminalNode { return this.getToken(bitmarkParser.BitAudioTranscript, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_audio_transcript; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAudio_transcript) {
			listener.enterAudio_transcript(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAudio_transcript) {
			listener.exitAudio_transcript(this);
		}
	}
}


export class Image_portraitContext extends ParserRuleContext {
	public BitImagePortrait(): TerminalNode { return this.getToken(bitmarkParser.BitImagePortrait, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_portrait; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_portrait) {
			listener.enterImage_portrait(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_portrait) {
			listener.exitImage_portrait(this);
		}
	}
}


export class Image_landscapeContext extends ParserRuleContext {
	public BitImageLandscape(): TerminalNode { return this.getToken(bitmarkParser.BitImageLandscape, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_landscape; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_landscape) {
			listener.enterImage_landscape(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_landscape) {
			listener.exitImage_landscape(this);
		}
	}
}


export class Image_on_deviceContext extends ParserRuleContext {
	public BitImageOnDevice(): TerminalNode { return this.getToken(bitmarkParser.BitImageOnDevice, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_on_device; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_on_device) {
			listener.enterImage_on_device(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_on_device) {
			listener.exitImage_on_device(this);
		}
	}
}


export class Bot_choiceContext extends ParserRuleContext {
	public words(): WordsContext[];
	public words(i: number): WordsContext;
	public words(i?: number): WordsContext | WordsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WordsContext);
		} else {
			return this.getRuleContext(i, WordsContext);
		}
	}
	public instruction(): InstructionContext[];
	public instruction(i: number): InstructionContext;
	public instruction(i?: number): InstructionContext | InstructionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InstructionContext);
		} else {
			return this.getRuleContext(i, InstructionContext);
		}
	}
	public audiobit(): AudiobitContext[];
	public audiobit(i: number): AudiobitContext;
	public audiobit(i?: number): AudiobitContext | AudiobitContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AudiobitContext);
		} else {
			return this.getRuleContext(i, AudiobitContext);
		}
	}
	public gap(): GapContext[];
	public gap(i: number): GapContext;
	public gap(i?: number): GapContext | GapContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GapContext);
		} else {
			return this.getRuleContext(i, GapContext);
		}
	}
	public choice_plus(): Choice_plusContext[];
	public choice_plus(i: number): Choice_plusContext;
	public choice_plus(i?: number): Choice_plusContext | Choice_plusContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Choice_plusContext);
		} else {
			return this.getRuleContext(i, Choice_plusContext);
		}
	}
	public choice_minus(): Choice_minusContext[];
	public choice_minus(i: number): Choice_minusContext;
	public choice_minus(i?: number): Choice_minusContext | Choice_minusContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Choice_minusContext);
		} else {
			return this.getRuleContext(i, Choice_minusContext);
		}
	}
	public choice_star(): Choice_starContext[];
	public choice_star(i: number): Choice_starContext;
	public choice_star(i?: number): Choice_starContext | Choice_starContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Choice_starContext);
		} else {
			return this.getRuleContext(i, Choice_starContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_choice; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_choice) {
			listener.enterBot_choice(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_choice) {
			listener.exitBot_choice(this);
		}
	}
}


export class RatingContext extends ParserRuleContext {
	public BitRating(): TerminalNode { return this.getToken(bitmarkParser.BitRating, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_rating; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterRating) {
			listener.enterRating(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitRating) {
			listener.exitRating(this);
		}
	}
}


export class Bullet_itemContext extends ParserRuleContext {
	public OPBUL(): TerminalNode { return this.getToken(bitmarkParser.OPBUL, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public atpoint(): AtpointContext | undefined {
		return this.tryGetRuleContext(0, AtpointContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bullet_item; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBullet_item) {
			listener.enterBullet_item(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBullet_item) {
			listener.exitBullet_item(this);
		}
	}
}


export class SurveyContext extends ParserRuleContext {
	public BitSurvey(): TerminalNode { return this.getToken(bitmarkParser.BitSurvey, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_survey; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSurvey) {
			listener.enterSurvey(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSurvey) {
			listener.exitSurvey(this);
		}
	}
}


export class Survey_1Context extends ParserRuleContext {
	public BitSurvey1(): TerminalNode { return this.getToken(bitmarkParser.BitSurvey1, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_survey_1; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSurvey_1) {
			listener.enterSurvey_1(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSurvey_1) {
			listener.exitSurvey_1(this);
		}
	}
}


export class Survey_anonymousContext extends ParserRuleContext {
	public BitSurveyanon(): TerminalNode { return this.getToken(bitmarkParser.BitSurveyanon, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_survey_anonymous; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSurvey_anonymous) {
			listener.enterSurvey_anonymous(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSurvey_anonymous) {
			listener.exitSurvey_anonymous(this);
		}
	}
}


export class Survey_anonymous_1Context extends ParserRuleContext {
	public BitSurveyanon1(): TerminalNode { return this.getToken(bitmarkParser.BitSurveyanon1, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_survey_anonymous_1; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSurvey_anonymous_1) {
			listener.enterSurvey_anonymous_1(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSurvey_anonymous_1) {
			listener.exitSurvey_anonymous_1(this);
		}
	}
}


export class Self_assessmentContext extends ParserRuleContext {
	public BitSelfassess(): TerminalNode { return this.getToken(bitmarkParser.BitSelfassess, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public self_assess_s_and_w(): Self_assess_s_and_wContext[];
	public self_assess_s_and_w(i: number): Self_assess_s_and_wContext;
	public self_assess_s_and_w(i?: number): Self_assess_s_and_wContext | Self_assess_s_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Self_assess_s_and_wContext);
		} else {
			return this.getRuleContext(i, Self_assess_s_and_wContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_self_assessment; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSelf_assessment) {
			listener.enterSelf_assessment(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSelf_assessment) {
			listener.exitSelf_assessment(this);
		}
	}
}


export class Self_assess_s_and_wContext extends ParserRuleContext {
	public OPBUL(): TerminalNode[];
	public OPBUL(i: number): TerminalNode;
	public OPBUL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.OPBUL);
		} else {
			return this.getToken(bitmarkParser.OPBUL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_self_assess_s_and_w; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSelf_assess_s_and_w) {
			listener.enterSelf_assess_s_and_w(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSelf_assess_s_and_w) {
			listener.exitSelf_assess_s_and_w(this);
		}
	}
}


export class AtpointContext extends ParserRuleContext {
	public AtPoints(): TerminalNode { return this.getToken(bitmarkParser.AtPoints, 0); }
	public NUMERIC(): TerminalNode { return this.getToken(bitmarkParser.NUMERIC, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_atpoint; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAtpoint) {
			listener.enterAtpoint(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAtpoint) {
			listener.exitAtpoint(this);
		}
	}
}


export class FormatContext extends ParserRuleContext {
	public resource_format(): Resource_formatContext[];
	public resource_format(i: number): Resource_formatContext;
	public resource_format(i?: number): Resource_formatContext | Resource_formatContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Resource_formatContext);
		} else {
			return this.getRuleContext(i, Resource_formatContext);
		}
	}
	public ColonText(): TerminalNode[];
	public ColonText(i: number): TerminalNode;
	public ColonText(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.ColonText);
		} else {
			return this.getToken(bitmarkParser.ColonText, i);
		}
	}
	public ColonJson(): TerminalNode[];
	public ColonJson(i: number): TerminalNode;
	public ColonJson(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.ColonJson);
		} else {
			return this.getToken(bitmarkParser.ColonJson, i);
		}
	}
	public resource_format_extra(): Resource_format_extraContext[];
	public resource_format_extra(i: number): Resource_format_extraContext;
	public resource_format_extra(i?: number): Resource_format_extraContext | Resource_format_extraContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Resource_format_extraContext);
		} else {
			return this.getRuleContext(i, Resource_format_extraContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFormat) {
			listener.enterFormat(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFormat) {
			listener.exitFormat(this);
		}
	}
}


export class Resource_formatContext extends ParserRuleContext {
	public BitmarkMinus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
	public BitmarkPlus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
	public Prosemirror(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Prosemirror, 0); }
	public Placeholder(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Placeholder, 0); }
	public ColonJson(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ColonJson, 0); }
	public AmpArticle(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
	public AmpDocument(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
	public AmpWebsite(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
	public AmpStillImageFilm(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
	public AmpAudioLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
	public AmpImageLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
	public AmpVideoLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
	public AmpArticleLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
	public AmpDocumentLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
	public AmpAppLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
	public AmpWebsiteLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
	public AmpStillImageFilmLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
	public AmpVideoEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpVideoEmbed, 0); }
	public AmpAudioEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAudioEmbed, 0); }
	public AmpDocumentEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocumentEmbed, 0); }
	public AmpStillImageFilmEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilmEmbed, 0); }
	public AmpDocumentDownload(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocumentDownload, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_resource_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterResource_format) {
			listener.enterResource_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitResource_format) {
			listener.exitResource_format(this);
		}
	}
}


export class Resource_format_extraContext extends ParserRuleContext {
	public image_format(): Image_formatContext | undefined {
		return this.tryGetRuleContext(0, Image_formatContext);
	}
	public audio_format(): Audio_formatContext | undefined {
		return this.tryGetRuleContext(0, Audio_formatContext);
	}
	public video_format(): Video_formatContext | undefined {
		return this.tryGetRuleContext(0, Video_formatContext);
	}
	public article_format(): Article_formatContext | undefined {
		return this.tryGetRuleContext(0, Article_formatContext);
	}
	public document_format(): Document_formatContext | undefined {
		return this.tryGetRuleContext(0, Document_formatContext);
	}
	public app_format(): App_formatContext | undefined {
		return this.tryGetRuleContext(0, App_formatContext);
	}
	public website_format(): Website_formatContext | undefined {
		return this.tryGetRuleContext(0, Website_formatContext);
	}
	public stillimagefilm_format(): Stillimagefilm_formatContext | undefined {
		return this.tryGetRuleContext(0, Stillimagefilm_formatContext);
	}
	public AmpPdf(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpPdf, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_resource_format_extra; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterResource_format_extra) {
			listener.enterResource_format_extra(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitResource_format_extra) {
			listener.exitResource_format_extra(this);
		}
	}
}


export class Format2Context extends ParserRuleContext {
	public BitmarkMinus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
	public BitmarkPlus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
	public ColonText(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ColonText, 0); }
	public Placeholder(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Placeholder, 0); }
	public ColonJson(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ColonJson, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_format2; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFormat2) {
			listener.enterFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFormat2) {
			listener.exitFormat2(this);
		}
	}
}


export class Image_formatContext extends ParserRuleContext {
	public AmpImage(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpImage, 0); }
	public Image_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Image_type, 0); }
	public DotArticleAtt(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
	public AmpImageLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
	public AmpImageZoom(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpImageZoom, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_format) {
			listener.enterImage_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_format) {
			listener.exitImage_format(this);
		}
	}
}


export class Video_formatContext extends ParserRuleContext {
	public AmpVideo(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpVideo, 0); }
	public AmpVideoLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
	public AmpVideoEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpVideoEmbed, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public Video_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Video_type, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_video_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVideo_format) {
			listener.enterVideo_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVideo_format) {
			listener.exitVideo_format(this);
		}
	}
}


export class Article_formatContext extends ParserRuleContext {
	public AmpArticle(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
	public AmpArticleLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_article_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterArticle_format) {
			listener.enterArticle_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitArticle_format) {
			listener.exitArticle_format(this);
		}
	}
}


export class Document_formatContext extends ParserRuleContext {
	public AmpDocument(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
	public AmpDocumentLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
	public AmpDocumentDownload(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocumentDownload, 0); }
	public AmpDocumentEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocumentEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_document_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDocument_format) {
			listener.enterDocument_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDocument_format) {
			listener.exitDocument_format(this);
		}
	}
}


export class App_formatContext extends ParserRuleContext {
	public AmpApp(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpApp, 0); }
	public AmpAppLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_app_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterApp_format) {
			listener.enterApp_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitApp_format) {
			listener.exitApp_format(this);
		}
	}
}


export class Website_formatContext extends ParserRuleContext {
	public AmpWebsite(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
	public AmpWebsiteLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_website_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWebsite_format) {
			listener.enterWebsite_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWebsite_format) {
			listener.exitWebsite_format(this);
		}
	}
}


export class Stillimagefilm_formatContext extends ParserRuleContext {
	public AmpStillImageFilm(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
	public AmpStillImageFilmLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
	public AmpStillImageFilmEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilmEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_stillimagefilm_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterStillimagefilm_format) {
			listener.enterStillimagefilm_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitStillimagefilm_format) {
			listener.exitStillimagefilm_format(this);
		}
	}
}


export class Op_article_formatContext extends ParserRuleContext {
	public OpAmpArticleLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpArticleLink, 0); }
	public OpAmpArticle(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpArticle, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_article_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_article_format) {
			listener.enterOp_article_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_article_format) {
			listener.exitOp_article_format(this);
		}
	}
}


export class Op_document_formatContext extends ParserRuleContext {
	public OpAmpDocumentLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpDocumentLink, 0); }
	public OpAmpDocument(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpDocument, 0); }
	public OpAmpDocumentDownload(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpDocumentDownload, 0); }
	public OpAmpDocumentEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpDocumentEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_document_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_document_format) {
			listener.enterOp_document_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_document_format) {
			listener.exitOp_document_format(this);
		}
	}
}


export class Op_app_formatContext extends ParserRuleContext {
	public OpAmpApp(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpApp, 0); }
	public OpAmpAppLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpAppLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_app_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_app_format) {
			listener.enterOp_app_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_app_format) {
			listener.exitOp_app_format(this);
		}
	}
}


export class Op_website_formatContext extends ParserRuleContext {
	public OpAmpWebsite(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpWebsite, 0); }
	public OpAmpWebsiteLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpWebsiteLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_website_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_website_format) {
			listener.enterOp_website_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_website_format) {
			listener.exitOp_website_format(this);
		}
	}
}


export class Op_video_formatContext extends ParserRuleContext {
	public OpAmpVideo(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpVideo, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public Video_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Video_type, 0); }
	public OpAmpVideoLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpVideoLink, 0); }
	public OpAmpVideoEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpVideoEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_video_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_video_format) {
			listener.enterOp_video_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_video_format) {
			listener.exitOp_video_format(this);
		}
	}
}


export class Op_stillimagefilm_formatContext extends ParserRuleContext {
	public OpAmpStillImageFilm(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilm, 0); }
	public OpAmpStillImageFilmLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmLink, 0); }
	public OpAmpStillImageFilmEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_stillimagefilm_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_stillimagefilm_format) {
			listener.enterOp_stillimagefilm_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_stillimagefilm_format) {
			listener.exitOp_stillimagefilm_format(this);
		}
	}
}


export class ArticlebitContext extends ParserRuleContext {
	public op_article_format(): Op_article_formatContext | undefined {
		return this.tryGetRuleContext(0, Op_article_formatContext);
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext | undefined {
		return this.tryGetRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public ArticleText(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ArticleText, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_articlebit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterArticlebit) {
			listener.enterArticlebit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitArticlebit) {
			listener.exitArticlebit(this);
		}
	}
}


export class DocumentbitContext extends ParserRuleContext {
	public op_document_format(): Op_document_formatContext {
		return this.getRuleContext(0, Op_document_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_documentbit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDocumentbit) {
			listener.enterDocumentbit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDocumentbit) {
			listener.exitDocumentbit(this);
		}
	}
}


export class WebsitebitContext extends ParserRuleContext {
	public op_website_format(): Op_website_formatContext {
		return this.getRuleContext(0, Op_website_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_websitebit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWebsitebit) {
			listener.enterWebsitebit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWebsitebit) {
			listener.exitWebsitebit(this);
		}
	}
}


export class AppbitContext extends ParserRuleContext {
	public op_app_format(): Op_app_formatContext {
		return this.getRuleContext(0, Op_app_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public url(): UrlContext | undefined {
		return this.tryGetRuleContext(0, UrlContext);
	}
	public telephone(): TelephoneContext | undefined {
		return this.tryGetRuleContext(0, TelephoneContext);
	}
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_appbit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAppbit) {
			listener.enterAppbit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAppbit) {
			listener.exitAppbit(this);
		}
	}
}


export class StillimagefilmbitContext extends ParserRuleContext {
	public stillimg_one(): Stillimg_oneContext {
		return this.getRuleContext(0, Stillimg_oneContext);
	}
	public resource_chained(): Resource_chainedContext[];
	public resource_chained(i: number): Resource_chainedContext;
	public resource_chained(i?: number): Resource_chainedContext | Resource_chainedContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Resource_chainedContext);
		} else {
			return this.getRuleContext(i, Resource_chainedContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_stillimagefilmbit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterStillimagefilmbit) {
			listener.enterStillimagefilmbit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitStillimagefilmbit) {
			listener.exitStillimagefilmbit(this);
		}
	}
}


export class Stillimg_oneContext extends ParserRuleContext {
	public op_stillimagefilm_format(): Op_stillimagefilm_formatContext {
		return this.getRuleContext(0, Op_stillimagefilm_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_stillimg_one; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterStillimg_one) {
			listener.enterStillimg_one(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitStillimg_one) {
			listener.exitStillimg_one(this);
		}
	}
}


export class VideobitContext extends ParserRuleContext {
	public video_one(): Video_oneContext {
		return this.getRuleContext(0, Video_oneContext);
	}
	public resource_chained(): Resource_chainedContext[];
	public resource_chained(i: number): Resource_chainedContext;
	public resource_chained(i?: number): Resource_chainedContext | Resource_chainedContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Resource_chainedContext);
		} else {
			return this.getRuleContext(i, Resource_chainedContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_videobit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVideobit) {
			listener.enterVideobit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVideobit) {
			listener.exitVideobit(this);
		}
	}
}


export class Video_oneContext extends ParserRuleContext {
	public op_video_format(): Op_video_formatContext {
		return this.getRuleContext(0, Op_video_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_video_one; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVideo_one) {
			listener.enterVideo_one(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVideo_one) {
			listener.exitVideo_one(this);
		}
	}
}


export class ImagebitContext extends ParserRuleContext {
	public image_one(): Image_oneContext {
		return this.getRuleContext(0, Image_oneContext);
	}
	public image_chained(): Image_chainedContext[];
	public image_chained(i: number): Image_chainedContext;
	public image_chained(i?: number): Image_chainedContext | Image_chainedContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Image_chainedContext);
		} else {
			return this.getRuleContext(i, Image_chainedContext);
		}
	}
	public NL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NL, 0); }
	public ShowInIndex(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ShowInIndex, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_imagebit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImagebit) {
			listener.enterImagebit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImagebit) {
			listener.exitImagebit(this);
		}
	}
}


export class Image_oneContext extends ParserRuleContext {
	public op_image_format(): Op_image_formatContext {
		return this.getRuleContext(0, Op_image_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_one; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_one) {
			listener.enterImage_one(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_one) {
			listener.exitImage_one(this);
		}
	}
}


export class Op_image_formatContext extends ParserRuleContext {
	public OpAmpImage(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpImage, 0); }
	public Image_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Image_type, 0); }
	public DotArticleAtt(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
	public OpAmpImageLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpImageLink, 0); }
	public OpAmpImageZoom(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpImageZoom, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_image_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_image_format) {
			listener.enterOp_image_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_image_format) {
			listener.exitOp_image_format(this);
		}
	}
}


export class Image_chainedContext extends ParserRuleContext {
	public AtSrc(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext | undefined {
		return this.tryGetRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public AtWidth(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
	public AtHeight(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public OpAtCaption(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
	public OpAtSearch(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
	public OpAtLicense(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
	public OpAtCopyright(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_chained; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_chained) {
			listener.enterImage_chained(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_chained) {
			listener.exitImage_chained(this);
		}
	}
}


export class Image_chained4matchContext extends ParserRuleContext {
	public AtSrc(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext | undefined {
		return this.tryGetRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public AtWidth(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
	public AtHeight(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public OpAtCaption(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
	public OpAtSearch(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
	public OpAtLicense(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
	public OpAtCopyright(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_chained4match; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_chained4match) {
			listener.enterImage_chained4match(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_chained4match) {
			listener.exitImage_chained4match(this);
		}
	}
}


export class AudiobitContext extends ParserRuleContext {
	public audio_one(): Audio_oneContext {
		return this.getRuleContext(0, Audio_oneContext);
	}
	public resource_chained(): Resource_chainedContext[];
	public resource_chained(i: number): Resource_chainedContext;
	public resource_chained(i?: number): Resource_chainedContext | Resource_chainedContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Resource_chainedContext);
		} else {
			return this.getRuleContext(i, Resource_chainedContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_audiobit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAudiobit) {
			listener.enterAudiobit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAudiobit) {
			listener.exitAudiobit(this);
		}
	}
}


export class Audio_oneContext extends ParserRuleContext {
	public op_audio_format(): Op_audio_formatContext {
		return this.getRuleContext(0, Op_audio_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_audio_one; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAudio_one) {
			listener.enterAudio_one(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAudio_one) {
			listener.exitAudio_one(this);
		}
	}
}


export class Audio_formatContext extends ParserRuleContext {
	public AmpAudio(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAudio, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public Audio_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
	public AmpAudioLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_audio_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAudio_format) {
			listener.enterAudio_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAudio_format) {
			listener.exitAudio_format(this);
		}
	}
}


export class Op_audio_formatContext extends ParserRuleContext {
	public OpAmpAudio(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpAudio, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public Audio_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
	public OpAmpAudioLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpAudioLink, 0); }
	public OpAmpAudioEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpAudioEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_audio_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_audio_format) {
			listener.enterOp_audio_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_audio_format) {
			listener.exitOp_audio_format(this);
		}
	}
}


export class Resource_chainedContext extends ParserRuleContext {
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public OPA(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPA, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public AtSrc(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public AtWidth(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
	public AtHeight(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public OpAtCaption(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
	public OpAtSearch(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
	public OpAtLicense(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
	public OpAtCopyright(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_resource_chained; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterResource_chained) {
			listener.enterResource_chained(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitResource_chained) {
			listener.exitResource_chained(this);
		}
	}
}


export class TelephoneContext extends ParserRuleContext {
	public TEL(): TerminalNode { return this.getToken(bitmarkParser.TEL, 0); }
	public PLUS(): TerminalNode { return this.getToken(bitmarkParser.PLUS, 0); }
	public NUMERIC(): TerminalNode { return this.getToken(bitmarkParser.NUMERIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_telephone; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterTelephone) {
			listener.enterTelephone(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitTelephone) {
			listener.exitTelephone(this);
		}
	}
}


export class UrlContext extends ParserRuleContext {
	public URL(): TerminalNode { return this.getToken(bitmarkParser.URL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_url; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterUrl) {
			listener.enterUrl(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitUrl) {
			listener.exitUrl(this);
		}
	}
}


export class ItemContext extends ParserRuleContext {
	public OPC(): TerminalNode { return this.getToken(bitmarkParser.OPC, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public lead(): LeadContext | undefined {
		return this.tryGetRuleContext(0, LeadContext);
	}
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_item; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterItem) {
			listener.enterItem(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitItem) {
			listener.exitItem(this);
		}
	}
}


export class LeadContext extends ParserRuleContext {
	public OPC(): TerminalNode { return this.getToken(bitmarkParser.OPC, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lead; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLead) {
			listener.enterLead(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLead) {
			listener.exitLead(this);
		}
	}
}


export class AnglerefContext extends ParserRuleContext {
	public OPRANGLES(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPRANGLES, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	public OPRANGLEL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPRANGLEL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_angleref; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAngleref) {
			listener.enterAngleref(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAngleref) {
			listener.exitAngleref(this);
		}
	}
}


export class ExampleContext extends ParserRuleContext {
	public AtExamplecl(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtExamplecl, 0); }
	public AtExampleWithStr(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtExampleWithStr, 0); }
	public AtExamplecol(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtExamplecol, 0); }
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	public SENTENCE(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.SENTENCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_example; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterExample) {
			listener.enterExample(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitExample) {
			listener.exitExample(this);
		}
	}
}


export class Bracketed_textContext extends ParserRuleContext {
	public BracEnclose(): TerminalNode { return this.getToken(bitmarkParser.BracEnclose, 0); }
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bracketed_text; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBracketed_text) {
			listener.enterBracketed_text(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBracketed_text) {
			listener.exitBracketed_text(this);
		}
	}
}


export class ReferenceContext extends ParserRuleContext {
	public AtReference(): TerminalNode { return this.getToken(bitmarkParser.AtReference, 0); }
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public URL(): TerminalNode[];
	public URL(i: number): TerminalNode;
	public URL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.URL);
		} else {
			return this.getToken(bitmarkParser.URL, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_reference; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterReference) {
			listener.enterReference(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitReference) {
			listener.exitReference(this);
		}
	}
}


export class ProgressContext extends ParserRuleContext {
	public AtProgress(): TerminalNode { return this.getToken(bitmarkParser.AtProgress, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_progress; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterProgress) {
			listener.enterProgress(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitProgress) {
			listener.exitProgress(this);
		}
	}
}


export class DatepropContext extends ParserRuleContext {
	public AtDate(): TerminalNode { return this.getToken(bitmarkParser.AtDate, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public dateprop_chained(): Dateprop_chainedContext | undefined {
		return this.tryGetRuleContext(0, Dateprop_chainedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_dateprop; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDateprop) {
			listener.enterDateprop(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDateprop) {
			listener.exitDateprop(this);
		}
	}
}


export class Dateprop_chainedContext extends ParserRuleContext {
	public AtDate(): TerminalNode { return this.getToken(bitmarkParser.AtDate, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_dateprop_chained; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDateprop_chained) {
			listener.enterDateprop_chained(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDateprop_chained) {
			listener.exitDateprop_chained(this);
		}
	}
}


export class InstructionContext extends ParserRuleContext {
	public OPB(): TerminalNode { return this.getToken(bitmarkParser.OPB, 0); }
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_instruction; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterInstruction) {
			listener.enterInstruction(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitInstruction) {
			listener.exitInstruction(this);
		}
	}
}


export class HintContext extends ParserRuleContext {
	public OPQ(): TerminalNode { return this.getToken(bitmarkParser.OPQ, 0); }
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_hint; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterHint) {
			listener.enterHint(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitHint) {
			listener.exitHint(this);
		}
	}
}


export class TitleContext extends ParserRuleContext {
	public OPHASH(): TerminalNode { return this.getToken(bitmarkParser.OPHASH, 0); }
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_title; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterTitle) {
			listener.enterTitle(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitTitle) {
			listener.exitTitle(this);
		}
	}
}


export class Bool_labelContext extends ParserRuleContext {
	public AtLabeltrue(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtLabeltrue, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public AtLabelfalse(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtLabelfalse, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bool_label; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBool_label) {
			listener.enterBool_label(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBool_label) {
			listener.exitBool_label(this);
		}
	}
}


export class Progress_pointsContext extends ParserRuleContext {
	public AtProgressPoints(): TerminalNode { return this.getToken(bitmarkParser.AtProgressPoints, 0); }
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_progress_points; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterProgress_points) {
			listener.enterProgress_points(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitProgress_points) {
			listener.exitProgress_points(this);
		}
	}
}


export class IstrackedContext extends ParserRuleContext {
	public OpAtIsTracked(): TerminalNode { return this.getToken(bitmarkParser.OpAtIsTracked, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_istracked; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterIstracked) {
			listener.enterIstracked(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitIstracked) {
			listener.exitIstracked(this);
		}
	}
}


export class IsinfoonlyContext extends ParserRuleContext {
	public OpAtIsInfoOnly(): TerminalNode { return this.getToken(bitmarkParser.OpAtIsInfoOnly, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_isinfoonly; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterIsinfoonly) {
			listener.enterIsinfoonly(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitIsinfoonly) {
			listener.exitIsinfoonly(this);
		}
	}
}


export class AtdefContext extends ParserRuleContext {
	public atdef_(): Atdef_Context[];
	public atdef_(i: number): Atdef_Context;
	public atdef_(i?: number): Atdef_Context | Atdef_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Atdef_Context);
		} else {
			return this.getRuleContext(i, Atdef_Context);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_atdef; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAtdef) {
			listener.enterAtdef(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAtdef) {
			listener.exitAtdef(this);
		}
	}
}


export class Atdef_Context extends ParserRuleContext {
	public OPA(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPA, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public DBLCOLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.DBLCOLON, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public OpAtCopyright(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
	public AtSampleSolution(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtSampleSolution, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_atdef_; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAtdef_) {
			listener.enterAtdef_(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAtdef_) {
			listener.exitAtdef_(this);
		}
	}
}


export class DollaransContext extends ParserRuleContext {
	public OPDOLL(): TerminalNode { return this.getToken(bitmarkParser.OPDOLL, 0); }
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_dollarans; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDollarans) {
			listener.enterDollarans(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDollarans) {
			listener.exitDollarans(this);
		}
	}
}


export class AnchorContext extends ParserRuleContext {
	public OPDANGLE(): TerminalNode { return this.getToken(bitmarkParser.OPDANGLE, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_anchor; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAnchor) {
			listener.enterAnchor(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAnchor) {
			listener.exitAnchor(this);
		}
	}
}


export class LinesContext extends ParserRuleContext {
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lines; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLines) {
			listener.enterLines(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLines) {
			listener.exitLines(this);
		}
	}
}


export class S_and_wContext extends ParserRuleContext {
	public STRING(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.STRING, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	public OPS(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPS, 0); }
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public AMP(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AMP, 0); }
	public DBLEQ(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.DBLEQ, 0); }
	public URL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.URL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_s_and_w; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterS_and_w) {
			listener.enterS_and_w(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitS_and_w) {
			listener.exitS_and_w(this);
		}
	}
}


export class DclinesContext extends ParserRuleContext {
	public DCANY(): TerminalNode { return this.getToken(bitmarkParser.DCANY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_dclines; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDclines) {
			listener.enterDclines(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDclines) {
			listener.exitDclines(this);
		}
	}
}


export class ClnspContext extends ParserRuleContext {
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_clnsp; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterClnsp) {
			listener.enterClnsp(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitClnsp) {
			listener.exitClnsp(this);
		}
	}
}


export class SsplContext extends ParserRuleContext {
	public SSPL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.SSPL, 0); }
	public SSPL2(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.SSPL2, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_sspl; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSspl) {
			listener.enterSspl(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSspl) {
			listener.exitSspl(this);
		}
	}
}


export class WordsContext extends ParserRuleContext {
	public sentence(): SentenceContext[];
	public sentence(i: number): SentenceContext;
	public sentence(i?: number): SentenceContext | SentenceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenceContext);
		} else {
			return this.getRuleContext(i, SentenceContext);
		}
	}
	public NOTBITMARK(): TerminalNode[];
	public NOTBITMARK(i: number): TerminalNode;
	public NOTBITMARK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NOTBITMARK);
		} else {
			return this.getToken(bitmarkParser.NOTBITMARK, i);
		}
	}
	public BARSTRING(): TerminalNode[];
	public BARSTRING(i: number): TerminalNode;
	public BARSTRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.BARSTRING);
		} else {
			return this.getToken(bitmarkParser.BARSTRING, i);
		}
	}
	public ELIPSIS(): TerminalNode[];
	public ELIPSIS(i: number): TerminalNode;
	public ELIPSIS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.ELIPSIS);
		} else {
			return this.getToken(bitmarkParser.ELIPSIS, i);
		}
	}
	public AMP(): TerminalNode[];
	public AMP(i: number): TerminalNode;
	public AMP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AMP);
		} else {
			return this.getToken(bitmarkParser.AMP, i);
		}
	}
	public Greater(): TerminalNode[];
	public Greater(i: number): TerminalNode;
	public Greater(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.Greater);
		} else {
			return this.getToken(bitmarkParser.Greater, i);
		}
	}
	public Less(): TerminalNode[];
	public Less(i: number): TerminalNode;
	public Less(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.Less);
		} else {
			return this.getToken(bitmarkParser.Less, i);
		}
	}
	public RightArrow(): TerminalNode[];
	public RightArrow(i: number): TerminalNode;
	public RightArrow(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.RightArrow);
		} else {
			return this.getToken(bitmarkParser.RightArrow, i);
		}
	}
	public RightAngle(): TerminalNode[];
	public RightAngle(i: number): TerminalNode;
	public RightAngle(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.RightAngle);
		} else {
			return this.getToken(bitmarkParser.RightAngle, i);
		}
	}
	public AmpArticle(): TerminalNode[];
	public AmpArticle(i: number): TerminalNode;
	public AmpArticle(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpArticle);
		} else {
			return this.getToken(bitmarkParser.AmpArticle, i);
		}
	}
	public AmpArticleLink(): TerminalNode[];
	public AmpArticleLink(i: number): TerminalNode;
	public AmpArticleLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpArticleLink);
		} else {
			return this.getToken(bitmarkParser.AmpArticleLink, i);
		}
	}
	public AmpDocument(): TerminalNode[];
	public AmpDocument(i: number): TerminalNode;
	public AmpDocument(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpDocument);
		} else {
			return this.getToken(bitmarkParser.AmpDocument, i);
		}
	}
	public AmpDocumentLink(): TerminalNode[];
	public AmpDocumentLink(i: number): TerminalNode;
	public AmpDocumentLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpDocumentLink);
		} else {
			return this.getToken(bitmarkParser.AmpDocumentLink, i);
		}
	}
	public AmpWebsite(): TerminalNode[];
	public AmpWebsite(i: number): TerminalNode;
	public AmpWebsite(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpWebsite);
		} else {
			return this.getToken(bitmarkParser.AmpWebsite, i);
		}
	}
	public AmpWebsiteLink(): TerminalNode[];
	public AmpWebsiteLink(i: number): TerminalNode;
	public AmpWebsiteLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpWebsiteLink);
		} else {
			return this.getToken(bitmarkParser.AmpWebsiteLink, i);
		}
	}
	public AmpImage(): TerminalNode[];
	public AmpImage(i: number): TerminalNode;
	public AmpImage(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpImage);
		} else {
			return this.getToken(bitmarkParser.AmpImage, i);
		}
	}
	public AmpImageLink(): TerminalNode[];
	public AmpImageLink(i: number): TerminalNode;
	public AmpImageLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpImageLink);
		} else {
			return this.getToken(bitmarkParser.AmpImageLink, i);
		}
	}
	public AmpAudio(): TerminalNode[];
	public AmpAudio(i: number): TerminalNode;
	public AmpAudio(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpAudio);
		} else {
			return this.getToken(bitmarkParser.AmpAudio, i);
		}
	}
	public AmpAudioLink(): TerminalNode[];
	public AmpAudioLink(i: number): TerminalNode;
	public AmpAudioLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpAudioLink);
		} else {
			return this.getToken(bitmarkParser.AmpAudioLink, i);
		}
	}
	public AmpVideo(): TerminalNode[];
	public AmpVideo(i: number): TerminalNode;
	public AmpVideo(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpVideo);
		} else {
			return this.getToken(bitmarkParser.AmpVideo, i);
		}
	}
	public AmpVideoLink(): TerminalNode[];
	public AmpVideoLink(i: number): TerminalNode;
	public AmpVideoLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpVideoLink);
		} else {
			return this.getToken(bitmarkParser.AmpVideoLink, i);
		}
	}
	public AmpApp(): TerminalNode[];
	public AmpApp(i: number): TerminalNode;
	public AmpApp(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpApp);
		} else {
			return this.getToken(bitmarkParser.AmpApp, i);
		}
	}
	public AmpAppLink(): TerminalNode[];
	public AmpAppLink(i: number): TerminalNode;
	public AmpAppLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpAppLink);
		} else {
			return this.getToken(bitmarkParser.AmpAppLink, i);
		}
	}
	public AmpStillImageFilm(): TerminalNode[];
	public AmpStillImageFilm(i: number): TerminalNode;
	public AmpStillImageFilm(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpStillImageFilm);
		} else {
			return this.getToken(bitmarkParser.AmpStillImageFilm, i);
		}
	}
	public AmpStillImageFilmLink(): TerminalNode[];
	public AmpStillImageFilmLink(i: number): TerminalNode;
	public AmpStillImageFilmLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpStillImageFilmLink);
		} else {
			return this.getToken(bitmarkParser.AmpStillImageFilmLink, i);
		}
	}
	public BitmarkMinus(): TerminalNode[];
	public BitmarkMinus(i: number): TerminalNode;
	public BitmarkMinus(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.BitmarkMinus);
		} else {
			return this.getToken(bitmarkParser.BitmarkMinus, i);
		}
	}
	public BitmarkPlus(): TerminalNode[];
	public BitmarkPlus(i: number): TerminalNode;
	public BitmarkPlus(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.BitmarkPlus);
		} else {
			return this.getToken(bitmarkParser.BitmarkPlus, i);
		}
	}
	public QUOTE_INDEX(): TerminalNode[];
	public QUOTE_INDEX(i: number): TerminalNode;
	public QUOTE_INDEX(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.QUOTE_INDEX);
		} else {
			return this.getToken(bitmarkParser.QUOTE_INDEX, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_words; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWords) {
			listener.enterWords(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWords) {
			listener.exitWords(this);
		}
	}
}


export class SpContext extends ParserRuleContext {
	public S(): TerminalNode { return this.getToken(bitmarkParser.S, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_sp; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSp) {
			listener.enterSp(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSp) {
			listener.exitSp(this);
		}
	}
}


export class SentenceContext extends ParserRuleContext {
	public SENTENCE(): TerminalNode { return this.getToken(bitmarkParser.SENTENCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_sentence; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSentence) {
			listener.enterSentence(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSentence) {
			listener.exitSentence(this);
		}
	}
}


