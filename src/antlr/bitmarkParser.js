"use strict";
// Generated from ./antlr/bitmarkParser.g4 by ANTLR 4.9.0-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
exports.SentenceContext = exports.SpContext = exports.WordsContext = exports.SsplContext = exports.ClnspContext = exports.DclinesContext = exports.S_and_wContext = exports.LinesContext = exports.AnchorContext = exports.DollaransContext = exports.Atdef_Context = exports.AtdefContext = exports.IsinfoonlyContext = exports.IstrackedContext = exports.Progress_pointsContext = exports.Bool_labelContext = exports.TitleContext = exports.HintContext = exports.InstructionContext = exports.Dateprop_chainedContext = exports.DatepropContext = exports.ProgressContext = exports.ReferenceContext = exports.Bracketed_textContext = exports.ExampleContext = exports.AnglerefContext = exports.LeadContext = exports.ItemContext = exports.UrlContext = exports.TelephoneContext = exports.Resource_chainedContext = exports.Op_audio_formatContext = exports.Audio_formatContext = exports.Audio_oneContext = exports.AudiobitContext = exports.Image_chained4matchContext = exports.Image_chainedContext = exports.Op_image_formatContext = exports.Image_oneContext = exports.ImagebitContext = exports.Video_oneContext = exports.VideobitContext = exports.Stillimg_oneContext = exports.StillimagefilmbitContext = exports.AppbitContext = exports.WebsitebitContext = exports.DocumentbitContext = exports.ArticlebitContext = exports.Op_stillimagefilm_formatContext = exports.Op_video_formatContext = exports.Op_website_formatContext = exports.Op_app_formatContext = exports.Op_document_formatContext = exports.Op_article_formatContext = exports.Stillimagefilm_formatContext = exports.Website_formatContext = exports.App_formatContext = exports.Document_formatContext = exports.Article_formatContext = exports.Video_formatContext = exports.Image_formatContext = exports.Format2Context = exports.Resource_format_extraContext = exports.Resource_formatContext = exports.FormatContext = exports.AtpointContext = exports.Self_assess_s_and_wContext = exports.Self_assessmentContext = exports.Survey_anonymous_1Context = exports.Survey_anonymousContext = exports.Survey_1Context = exports.SurveyContext = exports.Bullet_itemContext = exports.RatingContext = exports.Bot_choiceContext = exports.Logo_attribsContext = exports.LogoContext = exports.Images_logo_graveContext = exports.App_bitmark_from_editorContext = exports.App_bitmark_from_javascriptContext = exports.StdoutContext = exports.App_code_cellContext = exports.Vendor_jupyter_ipynbContext = exports.Vendor_jupyter_cell_markdownContext = exports.Vendor_jupyter_outputContext = exports.Vendor_jupyter_cell_rawContext = exports.Vendor_jupyter_cell_codeContext = exports.Console_logContext = exports.OutputContext = exports.Code_runtimeContext = exports.App_code_ideContext = exports.App_code_editorContext = exports.Vendor_jsfiddle_embedContext = exports.Vendor_jsfiddleContext = exports.Image_render_svgContext = exports.Page_buy_buttonContext = exports.Page_bannerContext = exports.Details_imageContext = exports.Life_skill_stickerContext = exports.App_create_bits_from_imageContext = exports.App_get_screenshotContext = exports.Image_screenshotContext = exports.Image_styledContext = exports.Image_bannerContext = exports.Image_figureContext = exports.Image_moodContext = exports.Video_link_portraitContext = exports.Video_link_landscapeContext = exports.FigureContext = exports.Book_link_prevContext = exports.Book_link_nextContext = exports.Book_linkContext = exports.App_ai_promptContext = exports.Bitmark_exampleContext = exports.Image_on_deviceContext = exports.Image_landscapeContext = exports.Image_portraitContext = exports.Audio_transcriptContext = exports.Video_transcriptContext = exports.ChecklistContext = exports.Review_approved_noteContext = exports.Review_request_for_review_noteContext = exports.Review_reviewer_noteContext = exports.Review_author_noteContext = exports.Review_noteContext = exports.Lang_teacher_noteContext = exports.Lang_homeworkContext = exports.Lang_vocabularyContext = exports.Lang_audio_scriptContext = exports.Lang_video_scriptContext = exports.Lang_extra_activityContext = exports.Lang_level_upContext = exports.Lang_level_downContext = exports.Lang_useful_phrasesContext = exports.Lang_like_a_localContext = exports.Lang_learning_strategyContext = exports.Lang_good_to_knowContext = exports.Lang_english_around_worldContext = exports.Lang_life_skillsContext = exports.Lang_enabling_language_skillsContext = exports.Lang_learning_outcomesContext = exports.Cook_timerContext = exports.Cook_side_dishContext = exports.Cook_side_drinkContext = exports.Cook_personal_recommendationContext = exports.Cook_recommendationContext = exports.Cook_plateContext = exports.Cook_practice_adviseContext = exports.Cook_arrangementContext = exports.Cook_insertContext = exports.Cook_variationContext = exports.Cook_remarkContext = exports.Cook_ingredientsContext = exports.Cook_stepContext = exports.Cook_preparationContext = exports.MessageContext = exports.Release_notes_summaryContext = exports.Workbook_articleContext = exports.Notebook_articleContext = exports.Book_articleContext = exports.Blog_articleContext = exports.Newspaper_articleContext = exports.Vendor_amcharts_5_chartContext = exports.FeaturedContext = exports.ConclusionContext = exports.Release_noteContext = exports.Chapter_subject_matterContext = exports.Browser_imageContext = exports.PhotoContext = exports.Focus_imageContext = exports.ScreenshotContext = exports.Question1Context = exports.Card1Context = exports.CodeContext = exports.Book_epigraphContext = exports.Book_summaryContext = exports.Book_read_moreContext = exports.Book_coming_soonContext = exports.Book_request_for_a_book_reviewContext = exports.Book_auther_bioContext = exports.Book_teaserContext = exports.Book_copyright_permissionsContext = exports.Book_notesContext = exports.Book_endnotesContext = exports.Book_reference_listContext = exports.Book_bibliographyContext = exports.Book_list_of_contributorsContext = exports.Book_acknowledgmentsContext = exports.Book_addendumContext = exports.Book_appendixContext = exports.Book_postscriptContext = exports.Book_afterwordContext = exports.Book_conclusionContext = exports.Book_inciting_incidentContext = exports.Book_introductionContext = exports.Book_epilogueContext = exports.Book_prologueContext = exports.Book_prefaceContext = exports.Book_forwordContext = exports.Book_dedicationContext = exports.Book_copyrightContext = exports.Book_titleContext = exports.Book_frontispieceContext = exports.Bit_editorialContext = exports.Bit_appLinkContext = exports.Bit_documentDownloadContext = exports.Bit_documentEmbedContext = exports.Bit_documentLinkContext = exports.Bit_documentContext = exports.Bit_websiteLinkContext = exports.Bit_stillImageFilmEmbedContext = exports.Bit_stillImageFilmLinkContext = exports.Bit_stillImageFilmContext = exports.Bit_videoLandscapeContext = exports.Bit_videoPortraitContext = exports.Bit_videoEmbedContext = exports.Bit_videoLinkContext = exports.Bit_videoContext = exports.Bit_audioEmbedContext = exports.Bit_audioLinkContext = exports.Bit_audioContext = exports.Bit_imageSuperWideContext = exports.Bit_imagePrototypeContext = exports.Bit_imageZoomContext = exports.Bit_imageLinkContext = exports.Bit_imageContext = exports.ScormContext = exports.Vendor_padlet_embedContext = exports.ExamplebitContext = exports.HintbitContext = exports.FootnoteContext = exports.QuoteContext = exports.StickynoteContext = exports.SidenoteContext = exports.BugContext = exports.DangerContext = exports.HelpContext = exports.RemarkContext = exports.WarningContext = exports.InfoContext = exports.NoteContext = exports.PageContext = exports.LearningpathdetailsContext = exports.WbtcontinueContext = exports.ButtoncopytextContext = exports.Sample_solutionContext = exports.DetailsContext = exports.StatementContext = exports.ArticleContext = exports.AssignmentContext = exports.Preparation_noteContext = exports.Record_audioContext = exports.Take_pictureContext = exports.Take_audioContext = exports.Mark_colorContext = exports.Mark_textContext = exports.Mark_Context = exports.CorrsContext = exports.CorrectionContext = exports.ResourceContext = exports.PartansContext = exports.Ml_exampleContext = exports.EssayContext = exports.Choice_starContext = exports.Choice_minusContext = exports.Choice_plusContext = exports.Single_gapContext = exports.GapContext = exports.BitElem_noResourceContext = exports.BitElemContext = exports.FooterContext = exports.FeedbackContext = exports.BoactsContext = exports.Bo_actionsContext = exports.Bot_actionContext = exports.Bot_action_rating_starsContext = exports.Bot_action_rating_numberContext = exports.Bot_action_true_falseContext = exports.Bot_action_responseContext = exports.Bot_action_remindContext = exports.Bot_action_saveContext = exports.Bot_action_announceContext = exports.Bot_action_sendContext = exports.Learning_path_classroom_eventContext = exports.Learning_path_classroom_trainingContext = exports.Learning_path_external_linkContext = exports.Learning_path_bot_trainingContext = exports.Learning_path_feedbackContext = exports.Learning_path_closingContext = exports.Learning_path_learning_goalContext = exports.Learning_path_video_callContext = exports.Learning_path_signContext = exports.Learning_path_bookContext = exports.Learning_path_stepContext = exports.Learning_path_ltiContext = exports.Group_diedContext = exports.Group_bornContext = exports.Title_etcContext = exports.Bit_aliasContext = exports.Internal_linkContext = exports.SummaryContext = exports.TocContext = exports.Article_aiContext = exports.Summary_aiContext = exports.Note_aiContext = exports.Ai_promptContext = exports.ChapterContext = exports.BookContext = exports.BitContext = exports.Bitmark_Context = exports.BitmarkContext = exports.bitmarkParser = void 0;
const ATN_1 = require("antlr4ts/atn/ATN");
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const FailedPredicateException_1 = require("antlr4ts/FailedPredicateException");
const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
const Parser_1 = require("antlr4ts/Parser");
const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
const RecognitionException_1 = require("antlr4ts/RecognitionException");
const Token_1 = require("antlr4ts/Token");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = require("antlr4ts/misc/Utils");
class bitmarkParser extends Parser_1.Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator_1.ParserATNSimulator(bitmarkParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return bitmarkParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "bitmarkParser.g4"; }
    // @Override
    get ruleNames() { return bitmarkParser.ruleNames; }
    // @Override
    get serializedATN() { return bitmarkParser._serializedATN; }
    createFailedPredicateException(predicate, message) {
        return new FailedPredicateException_1.FailedPredicateException(this, predicate, message);
    }
    // @RuleVersion(0)
    bitmark() {
        let _localctx = new BitmarkContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, bitmarkParser.RULE_bitmark);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 635;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 622;
                            this.bitmark_();
                            this.state = 632;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 626;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.S) {
                                                {
                                                    {
                                                        this.state = 623;
                                                        this.match(bitmarkParser.S);
                                                    }
                                                }
                                                this.state = 628;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 629;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                }
                                this.state = 634;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
                            }
                        }
                    }
                    this.state = 637;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitSelfassess) | (1 << bitmarkParser.BitRating))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitAiPrompt - 32)) | (1 << (bitmarkParser.BitNoteAi - 32)) | (1 << (bitmarkParser.BitSummayAi - 32)) | (1 << (bitmarkParser.BitArticleAi - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitLearningPathBotTraining - 64)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomEvent - 64)) | (1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitImagePrototype - 64)) | (1 << (bitmarkParser.BitImageSuperWide - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitVideoPortrait - 64)) | (1 << (bitmarkParser.BitVideoLandscape - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitEditorial - 96)) | (1 << (bitmarkParser.BitBookFrontispiece - 96)) | (1 << (bitmarkParser.BitBookTitle - 96)) | (1 << (bitmarkParser.BitBookCopyright - 96)) | (1 << (bitmarkParser.BitBookDedication - 96)) | (1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.BitQuestion1 - 128)) | (1 << (bitmarkParser.BitScreenshot - 128)) | (1 << (bitmarkParser.BitFocusImage - 128)) | (1 << (bitmarkParser.BitPhoto - 128)) | (1 << (bitmarkParser.BitBrowserImage - 128)) | (1 << (bitmarkParser.BitBotActionResponse - 128)) | (1 << (bitmarkParser.BitBotActionTrueFalse - 128)) | (1 << (bitmarkParser.BitBotActionRatingNumber - 128)) | (1 << (bitmarkParser.BitBotActionRatingStars - 128)) | (1 << (bitmarkParser.BitChapterSubjectMatter - 128)) | (1 << (bitmarkParser.BitReleaseNote - 128)) | (1 << (bitmarkParser.BitConclusion - 128)) | (1 << (bitmarkParser.BitVendorAmcharts5Chart - 128)) | (1 << (bitmarkParser.BitFeatured - 128)) | (1 << (bitmarkParser.BitNewspaperArticle - 128)) | (1 << (bitmarkParser.BitBlogArticle - 128)) | (1 << (bitmarkParser.BitBookArticle - 128)) | (1 << (bitmarkParser.BitNotebookArticle - 128)) | (1 << (bitmarkParser.BitWorkbookArticle - 128)) | (1 << (bitmarkParser.BitReleaseNotesSummary - 128)) | (1 << (bitmarkParser.BitCookPreparation - 128)) | (1 << (bitmarkParser.BitCookStep - 128)) | (1 << (bitmarkParser.BitCookIngredients - 128)) | (1 << (bitmarkParser.BitCookRremark - 128)) | (1 << (bitmarkParser.BitCookVariation - 128)) | (1 << (bitmarkParser.BitCookInsert - 128)) | (1 << (bitmarkParser.BitCookArrangement - 128)) | (1 << (bitmarkParser.BitCookPracticeAdvise - 128)) | (1 << (bitmarkParser.BitCookPlate - 128)) | (1 << (bitmarkParser.BitCookRecommendation - 128)) | (1 << (bitmarkParser.BitCookPersonalRecommendation - 128)) | (1 << (bitmarkParser.BitCookSideDrink - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.BitCookSideDish - 160)) | (1 << (bitmarkParser.BitCookTimer - 160)) | (1 << (bitmarkParser.BitLangLearningOutcomes - 160)) | (1 << (bitmarkParser.BitLangEnablingLanguageSkills - 160)) | (1 << (bitmarkParser.BitLangLifeSkills - 160)) | (1 << (bitmarkParser.BitLangEnglishAroundWorld - 160)) | (1 << (bitmarkParser.BitLangGoodtoknow - 160)) | (1 << (bitmarkParser.BitLangLearningStrategy - 160)) | (1 << (bitmarkParser.BitLangLikeAlocal - 160)) | (1 << (bitmarkParser.BitLangUsefulPhrases - 160)) | (1 << (bitmarkParser.BitLangLevelDown - 160)) | (1 << (bitmarkParser.BitLangLevelUp - 160)) | (1 << (bitmarkParser.BitLangExtraActivity - 160)) | (1 << (bitmarkParser.BitLangVideoScript - 160)) | (1 << (bitmarkParser.BitLangAudioScript - 160)) | (1 << (bitmarkParser.BitLangVocabulary - 160)) | (1 << (bitmarkParser.BitLangHomework - 160)) | (1 << (bitmarkParser.BitLangTeacherNote - 160)) | (1 << (bitmarkParser.BitReviewNote - 160)) | (1 << (bitmarkParser.BitReviewAuthorNote - 160)) | (1 << (bitmarkParser.BitReviewReviewerNote - 160)) | (1 << (bitmarkParser.BitReviewRequestForReviewNote - 160)) | (1 << (bitmarkParser.BitReviewApprovedNote - 160)) | (1 << (bitmarkParser.BitChecklist - 160)) | (1 << (bitmarkParser.BitVideoTranscript - 160)) | (1 << (bitmarkParser.BitAudioTranscript - 160)) | (1 << (bitmarkParser.BitImagePortrait - 160)) | (1 << (bitmarkParser.BitImageLandscape - 160)) | (1 << (bitmarkParser.BitImageOnDevice - 160)) | (1 << (bitmarkParser.BitBitmarkExample - 160)) | (1 << (bitmarkParser.BitAppAiPrompt - 160)) | (1 << (bitmarkParser.BitBookLink - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.BitBookLinkNext - 192)) | (1 << (bitmarkParser.BitBookLinkPrev - 192)) | (1 << (bitmarkParser.BitFigure - 192)) | (1 << (bitmarkParser.BitVideoLinkLandscape - 192)) | (1 << (bitmarkParser.BitVideoLinkPortrait - 192)) | (1 << (bitmarkParser.BitImageMood - 192)) | (1 << (bitmarkParser.BitImageFigure - 192)) | (1 << (bitmarkParser.BitImageBanner - 192)) | (1 << (bitmarkParser.BitImageStyled - 192)) | (1 << (bitmarkParser.BitImageScreenshot - 192)) | (1 << (bitmarkParser.BitAppGetScreenshot - 192)) | (1 << (bitmarkParser.BitAppCreateBitsFromImage - 192)) | (1 << (bitmarkParser.BitLifeSkillSticker - 192)) | (1 << (bitmarkParser.BitDetailsImage - 192)) | (1 << (bitmarkParser.BitImagesLogoGrave - 192)) | (1 << (bitmarkParser.BitPageBanner - 192)) | (1 << (bitmarkParser.BitPageBuyButton - 192)) | (1 << (bitmarkParser.BitVendorJsfiddle - 192)) | (1 << (bitmarkParser.BitVendorJsfiddleEmbed - 192)) | (1 << (bitmarkParser.BitImageRenderSvg - 192)) | (1 << (bitmarkParser.BitAppCodeEditor - 192)) | (1 << (bitmarkParser.BitAppCodeIde - 192)) | (1 << (bitmarkParser.BitCodeRuntime - 192)) | (1 << (bitmarkParser.BitOutput - 192)) | (1 << (bitmarkParser.BitConsoleLog - 192)) | (1 << (bitmarkParser.BitVenderJupyterCellCode - 192)) | (1 << (bitmarkParser.BitVenderJupyterCellRaw - 192)) | (1 << (bitmarkParser.BitVenderJupyterOutput - 192)) | (1 << (bitmarkParser.BitVenderJupyterCellMarkdown - 192)) | (1 << (bitmarkParser.BitVenderJupyterIpynb - 192)) | (1 << (bitmarkParser.BitAppCodeCell - 192)) | (1 << (bitmarkParser.BitStdout - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.BitAppBitmarkFromJavascript - 224)) | (1 << (bitmarkParser.BitAppBitmarkFromEditor - 224)) | (1 << (bitmarkParser.OPDANGLE - 224)) | (1 << (bitmarkParser.OPQ - 224)) | (1 << (bitmarkParser.OPS - 224)) | (1 << (bitmarkParser.COLON - 224)) | (1 << (bitmarkParser.AMP - 224)) | (1 << (bitmarkParser.Greater - 224)) | (1 << (bitmarkParser.Less - 224)) | (1 << (bitmarkParser.RightAngle - 224)) | (1 << (bitmarkParser.RightArrow - 224)) | (1 << (bitmarkParser.DBLEQ - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (bitmarkParser.QUOTE_INDEX - 256)) | (1 << (bitmarkParser.NUMERIC - 256)) | (1 << (bitmarkParser.STRING - 256)) | (1 << (bitmarkParser.NOTBITMARK - 256)) | (1 << (bitmarkParser.ELIPSIS - 256)) | (1 << (bitmarkParser.SENTENCE - 256)) | (1 << (bitmarkParser.BARSTRING - 256)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                this.state = 642;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 639;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 644;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 645;
                this.match(bitmarkParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bitmark_() {
        let _localctx = new Bitmark_Context(this._ctx, this.state);
        this.enterRule(_localctx, 2, bitmarkParser.RULE_bitmark_);
        try {
            this.state = 649;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.BitBook:
                case bitmarkParser.BitChapter:
                case bitmarkParser.BitToc:
                case bitmarkParser.BitSummary:
                case bitmarkParser.BitIntlink:
                case bitmarkParser.BitIntRef:
                case bitmarkParser.BitAlias:
                case bitmarkParser.BitGroups:
                case bitmarkParser.BitGroupt:
                case bitmarkParser.BitStatement:
                case bitmarkParser.BitDetails:
                case bitmarkParser.BitSampleSolution:
                case bitmarkParser.BitTakeAudio:
                case bitmarkParser.BitArticle:
                case bitmarkParser.BitPage:
                case bitmarkParser.BitEssay:
                case bitmarkParser.BitMessage:
                case bitmarkParser.BitCorrection:
                case bitmarkParser.BitMark:
                case bitmarkParser.BitTakepic:
                case bitmarkParser.BitRecaud:
                case bitmarkParser.BitPrepnote:
                case bitmarkParser.BitAssign:
                case bitmarkParser.BitSelfassess:
                case bitmarkParser.BitRating:
                case bitmarkParser.BitSurvey:
                case bitmarkParser.BitSurvey1:
                case bitmarkParser.BitSurveyanon:
                case bitmarkParser.BitSurveyanon1:
                case bitmarkParser.BitNote:
                case bitmarkParser.BitInfo:
                case bitmarkParser.BitWarning:
                case bitmarkParser.BitRemark:
                case bitmarkParser.BitHint:
                case bitmarkParser.BitHelp:
                case bitmarkParser.BitDanger:
                case bitmarkParser.BitBug:
                case bitmarkParser.BitSidenote:
                case bitmarkParser.BitStickynote:
                case bitmarkParser.BitQuote:
                case bitmarkParser.BitFootnote:
                case bitmarkParser.BitExample:
                case bitmarkParser.BitButtonCopytext:
                case bitmarkParser.BitWbtContinue:
                case bitmarkParser.BitLearningPathDetails:
                case bitmarkParser.BitAiPrompt:
                case bitmarkParser.BitNoteAi:
                case bitmarkParser.BitSummayAi:
                case bitmarkParser.BitArticleAi:
                case bitmarkParser.BitLearningPathLti:
                case bitmarkParser.BitLearningPathStep:
                case bitmarkParser.BitLearningPathBook:
                case bitmarkParser.BitLearningPathSign:
                case bitmarkParser.BitLearningPathVideoCall:
                case bitmarkParser.BitLearningPathLearningGoal:
                case bitmarkParser.BitLearningPathClosing:
                case bitmarkParser.BitLearningPathFeedback:
                case bitmarkParser.BitLearningPathBotTraining:
                case bitmarkParser.BitLearningPathExternalLink:
                case bitmarkParser.BitLearningPathClassroomTraining:
                case bitmarkParser.BitLearningPathClassroomEvent:
                case bitmarkParser.BitBotActionSend:
                case bitmarkParser.BitBotActionAnnounce:
                case bitmarkParser.BitBotActionSave:
                case bitmarkParser.BitBotActionRemind:
                case bitmarkParser.BitVendorPadletEmbed:
                case bitmarkParser.BitScorm:
                case bitmarkParser.BitImage:
                case bitmarkParser.BitImageLink:
                case bitmarkParser.BitImageZoom:
                case bitmarkParser.BitImagePrototype:
                case bitmarkParser.BitImageSuperWide:
                case bitmarkParser.BitAudio:
                case bitmarkParser.BitAudioLink:
                case bitmarkParser.BitAudioEmbed:
                case bitmarkParser.BitVideo:
                case bitmarkParser.BitVideoLink:
                case bitmarkParser.BitVideoEmbed:
                case bitmarkParser.BitVideoPortrait:
                case bitmarkParser.BitVideoLandscape:
                case bitmarkParser.BitStillImageFilm:
                case bitmarkParser.BitStillImageFilmLink:
                case bitmarkParser.BitStillImageFilmEmbed:
                case bitmarkParser.BitWebsiteLink:
                case bitmarkParser.BitDocument:
                case bitmarkParser.BitDocumentLink:
                case bitmarkParser.BitDocumentEmbed:
                case bitmarkParser.BitDocumentDownload:
                case bitmarkParser.BitAppLink:
                case bitmarkParser.BitEditorial:
                case bitmarkParser.BitBookFrontispiece:
                case bitmarkParser.BitBookTitle:
                case bitmarkParser.BitBookCopyright:
                case bitmarkParser.BitBookDedication:
                case bitmarkParser.BitBookForword:
                case bitmarkParser.BitBookPreface:
                case bitmarkParser.BitBookPrologue:
                case bitmarkParser.BitBookEpilogue:
                case bitmarkParser.BitBookIntroduction:
                case bitmarkParser.BitBookIncitingIncident:
                case bitmarkParser.BitBookConclusion:
                case bitmarkParser.BitBookAfterword:
                case bitmarkParser.BitBookPostscript:
                case bitmarkParser.BitBookappendix:
                case bitmarkParser.BitBookAddendum:
                case bitmarkParser.BitBookAcknowledgments:
                case bitmarkParser.BitBookListOfContributors:
                case bitmarkParser.BitBookBibliography:
                case bitmarkParser.BitBookReferenceList:
                case bitmarkParser.BitBookEndnotes:
                case bitmarkParser.BitBookNotes:
                case bitmarkParser.BitBookCopyrightPermissions:
                case bitmarkParser.BitBookTeaser:
                case bitmarkParser.BitBookAutherBio:
                case bitmarkParser.BitBookRequestForABookReview:
                case bitmarkParser.BitBookComingSoon:
                case bitmarkParser.BitBookReadMore:
                case bitmarkParser.BitBookSummary:
                case bitmarkParser.BitBookEpigraph:
                case bitmarkParser.BitCode:
                case bitmarkParser.BitCard1:
                case bitmarkParser.BitQuestion1:
                case bitmarkParser.BitScreenshot:
                case bitmarkParser.BitFocusImage:
                case bitmarkParser.BitPhoto:
                case bitmarkParser.BitBrowserImage:
                case bitmarkParser.BitBotActionResponse:
                case bitmarkParser.BitBotActionTrueFalse:
                case bitmarkParser.BitBotActionRatingNumber:
                case bitmarkParser.BitBotActionRatingStars:
                case bitmarkParser.BitChapterSubjectMatter:
                case bitmarkParser.BitReleaseNote:
                case bitmarkParser.BitConclusion:
                case bitmarkParser.BitVendorAmcharts5Chart:
                case bitmarkParser.BitFeatured:
                case bitmarkParser.BitNewspaperArticle:
                case bitmarkParser.BitBlogArticle:
                case bitmarkParser.BitBookArticle:
                case bitmarkParser.BitNotebookArticle:
                case bitmarkParser.BitWorkbookArticle:
                case bitmarkParser.BitReleaseNotesSummary:
                case bitmarkParser.BitCookPreparation:
                case bitmarkParser.BitCookStep:
                case bitmarkParser.BitCookIngredients:
                case bitmarkParser.BitCookRremark:
                case bitmarkParser.BitCookVariation:
                case bitmarkParser.BitCookInsert:
                case bitmarkParser.BitCookArrangement:
                case bitmarkParser.BitCookPracticeAdvise:
                case bitmarkParser.BitCookPlate:
                case bitmarkParser.BitCookRecommendation:
                case bitmarkParser.BitCookPersonalRecommendation:
                case bitmarkParser.BitCookSideDrink:
                case bitmarkParser.BitCookSideDish:
                case bitmarkParser.BitCookTimer:
                case bitmarkParser.BitLangLearningOutcomes:
                case bitmarkParser.BitLangEnablingLanguageSkills:
                case bitmarkParser.BitLangLifeSkills:
                case bitmarkParser.BitLangEnglishAroundWorld:
                case bitmarkParser.BitLangGoodtoknow:
                case bitmarkParser.BitLangLearningStrategy:
                case bitmarkParser.BitLangLikeAlocal:
                case bitmarkParser.BitLangUsefulPhrases:
                case bitmarkParser.BitLangLevelDown:
                case bitmarkParser.BitLangLevelUp:
                case bitmarkParser.BitLangExtraActivity:
                case bitmarkParser.BitLangVideoScript:
                case bitmarkParser.BitLangAudioScript:
                case bitmarkParser.BitLangVocabulary:
                case bitmarkParser.BitLangHomework:
                case bitmarkParser.BitLangTeacherNote:
                case bitmarkParser.BitReviewNote:
                case bitmarkParser.BitReviewAuthorNote:
                case bitmarkParser.BitReviewReviewerNote:
                case bitmarkParser.BitReviewRequestForReviewNote:
                case bitmarkParser.BitReviewApprovedNote:
                case bitmarkParser.BitChecklist:
                case bitmarkParser.BitVideoTranscript:
                case bitmarkParser.BitAudioTranscript:
                case bitmarkParser.BitImagePortrait:
                case bitmarkParser.BitImageLandscape:
                case bitmarkParser.BitImageOnDevice:
                case bitmarkParser.BitBitmarkExample:
                case bitmarkParser.BitAppAiPrompt:
                case bitmarkParser.BitBookLink:
                case bitmarkParser.BitBookLinkNext:
                case bitmarkParser.BitBookLinkPrev:
                case bitmarkParser.BitFigure:
                case bitmarkParser.BitVideoLinkLandscape:
                case bitmarkParser.BitVideoLinkPortrait:
                case bitmarkParser.BitImageMood:
                case bitmarkParser.BitImageFigure:
                case bitmarkParser.BitImageBanner:
                case bitmarkParser.BitImageStyled:
                case bitmarkParser.BitImageScreenshot:
                case bitmarkParser.BitAppGetScreenshot:
                case bitmarkParser.BitAppCreateBitsFromImage:
                case bitmarkParser.BitLifeSkillSticker:
                case bitmarkParser.BitDetailsImage:
                case bitmarkParser.BitImagesLogoGrave:
                case bitmarkParser.BitPageBanner:
                case bitmarkParser.BitPageBuyButton:
                case bitmarkParser.BitVendorJsfiddle:
                case bitmarkParser.BitVendorJsfiddleEmbed:
                case bitmarkParser.BitImageRenderSvg:
                case bitmarkParser.BitAppCodeEditor:
                case bitmarkParser.BitAppCodeIde:
                case bitmarkParser.BitCodeRuntime:
                case bitmarkParser.BitOutput:
                case bitmarkParser.BitConsoleLog:
                case bitmarkParser.BitVenderJupyterCellCode:
                case bitmarkParser.BitVenderJupyterCellRaw:
                case bitmarkParser.BitVenderJupyterOutput:
                case bitmarkParser.BitVenderJupyterCellMarkdown:
                case bitmarkParser.BitVenderJupyterIpynb:
                case bitmarkParser.BitAppCodeCell:
                case bitmarkParser.BitStdout:
                case bitmarkParser.BitAppBitmarkFromJavascript:
                case bitmarkParser.BitAppBitmarkFromEditor:
                case bitmarkParser.OPDANGLE:
                case bitmarkParser.OPQ:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 647;
                        this.bit();
                    }
                    break;
                case bitmarkParser.S:
                case bitmarkParser.OPS:
                case bitmarkParser.COLON:
                case bitmarkParser.AMP:
                case bitmarkParser.Greater:
                case bitmarkParser.Less:
                case bitmarkParser.RightAngle:
                case bitmarkParser.RightArrow:
                case bitmarkParser.DBLEQ:
                case bitmarkParser.QUOTE_INDEX:
                case bitmarkParser.NUMERIC:
                case bitmarkParser.STRING:
                case bitmarkParser.NOTBITMARK:
                case bitmarkParser.ELIPSIS:
                case bitmarkParser.SENTENCE:
                case bitmarkParser.BARSTRING:
                case bitmarkParser.AmpAudio:
                case bitmarkParser.AmpImage:
                case bitmarkParser.AmpVideo:
                case bitmarkParser.AmpArticle:
                case bitmarkParser.AmpDocument:
                case bitmarkParser.AmpApp:
                case bitmarkParser.AmpWebsite:
                case bitmarkParser.AmpStillImageFilm:
                case bitmarkParser.AmpAudioLink:
                case bitmarkParser.AmpImageLink:
                case bitmarkParser.AmpVideoLink:
                case bitmarkParser.AmpArticleLink:
                case bitmarkParser.AmpDocumentLink:
                case bitmarkParser.AmpAppLink:
                case bitmarkParser.AmpWebsiteLink:
                case bitmarkParser.AmpStillImageFilmLink:
                case bitmarkParser.BitmarkMinus:
                case bitmarkParser.BitmarkPlus:
                case bitmarkParser.URL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 648;
                        this.lines();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit() {
        let _localctx = new BitContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, bitmarkParser.RULE_bit);
        try {
            this.state = 872;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 5, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 651;
                        this.book();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 652;
                        this.chapter();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 653;
                        this.ai_prompt();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 654;
                        this.note_ai();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 655;
                        this.summary_ai();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 656;
                        this.article_ai();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 657;
                        this.summary();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 658;
                        this.toc();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 659;
                        this.bit_alias();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 660;
                        this.internal_link();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 661;
                        this.anchor();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 662;
                        this.group_born();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 663;
                        this.group_died();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 664;
                        this.essay();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 665;
                        this.correction();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 666;
                        this.mark_();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 667;
                        this.take_picture();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 668;
                        this.take_audio();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 669;
                        this.record_audio();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 670;
                        this.preparation_note();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 671;
                        this.assignment();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 672;
                        this.article();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 673;
                        this.statement();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 674;
                        this.details();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 675;
                        this.sample_solution();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 676;
                        this.buttoncopytext();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 677;
                        this.wbtcontinue();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 678;
                        this.learningpathdetails();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 679;
                        this.note();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 680;
                        this.info();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(_localctx, 31);
                    {
                        this.state = 681;
                        this.warning();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(_localctx, 32);
                    {
                        this.state = 682;
                        this.remark();
                    }
                    break;
                case 33:
                    this.enterOuterAlt(_localctx, 33);
                    {
                        this.state = 683;
                        this.hintbit();
                    }
                    break;
                case 34:
                    this.enterOuterAlt(_localctx, 34);
                    {
                        this.state = 684;
                        this.help();
                    }
                    break;
                case 35:
                    this.enterOuterAlt(_localctx, 35);
                    {
                        this.state = 685;
                        this.danger();
                    }
                    break;
                case 36:
                    this.enterOuterAlt(_localctx, 36);
                    {
                        this.state = 686;
                        this.bug();
                    }
                    break;
                case 37:
                    this.enterOuterAlt(_localctx, 37);
                    {
                        this.state = 687;
                        this.sidenote();
                    }
                    break;
                case 38:
                    this.enterOuterAlt(_localctx, 38);
                    {
                        this.state = 688;
                        this.stickynote();
                    }
                    break;
                case 39:
                    this.enterOuterAlt(_localctx, 39);
                    {
                        this.state = 689;
                        this.quote();
                    }
                    break;
                case 40:
                    this.enterOuterAlt(_localctx, 40);
                    {
                        this.state = 690;
                        this.footnote();
                    }
                    break;
                case 41:
                    this.enterOuterAlt(_localctx, 41);
                    {
                        this.state = 691;
                        this.examplebit();
                    }
                    break;
                case 42:
                    this.enterOuterAlt(_localctx, 42);
                    {
                        this.state = 692;
                        this.page();
                    }
                    break;
                case 43:
                    this.enterOuterAlt(_localctx, 43);
                    {
                        this.state = 693;
                        this.message();
                    }
                    break;
                case 44:
                    this.enterOuterAlt(_localctx, 44);
                    {
                        this.state = 694;
                        this.self_assessment();
                    }
                    break;
                case 45:
                    this.enterOuterAlt(_localctx, 45);
                    {
                        this.state = 695;
                        this.rating();
                    }
                    break;
                case 46:
                    this.enterOuterAlt(_localctx, 46);
                    {
                        this.state = 696;
                        this.survey();
                    }
                    break;
                case 47:
                    this.enterOuterAlt(_localctx, 47);
                    {
                        this.state = 697;
                        this.survey_1();
                    }
                    break;
                case 48:
                    this.enterOuterAlt(_localctx, 48);
                    {
                        this.state = 698;
                        this.survey_anonymous();
                    }
                    break;
                case 49:
                    this.enterOuterAlt(_localctx, 49);
                    {
                        this.state = 699;
                        this.survey_anonymous_1();
                    }
                    break;
                case 50:
                    this.enterOuterAlt(_localctx, 50);
                    {
                        this.state = 700;
                        this.hint();
                    }
                    break;
                case 51:
                    this.enterOuterAlt(_localctx, 51);
                    {
                        this.state = 701;
                        this.vendor_padlet_embed();
                    }
                    break;
                case 52:
                    this.enterOuterAlt(_localctx, 52);
                    {
                        this.state = 702;
                        this.scorm();
                    }
                    break;
                case 53:
                    this.enterOuterAlt(_localctx, 53);
                    {
                        this.state = 703;
                        this.learning_path_lti();
                    }
                    break;
                case 54:
                    this.enterOuterAlt(_localctx, 54);
                    {
                        this.state = 704;
                        this.learning_path_step();
                    }
                    break;
                case 55:
                    this.enterOuterAlt(_localctx, 55);
                    {
                        this.state = 705;
                        this.learning_path_book();
                    }
                    break;
                case 56:
                    this.enterOuterAlt(_localctx, 56);
                    {
                        this.state = 706;
                        this.learning_path_sign();
                    }
                    break;
                case 57:
                    this.enterOuterAlt(_localctx, 57);
                    {
                        this.state = 707;
                        this.learning_path_video_call();
                    }
                    break;
                case 58:
                    this.enterOuterAlt(_localctx, 58);
                    {
                        this.state = 708;
                        this.learning_path_learning_goal();
                    }
                    break;
                case 59:
                    this.enterOuterAlt(_localctx, 59);
                    {
                        this.state = 709;
                        this.learning_path_closing();
                    }
                    break;
                case 60:
                    this.enterOuterAlt(_localctx, 60);
                    {
                        this.state = 710;
                        this.learning_path_feedback();
                    }
                    break;
                case 61:
                    this.enterOuterAlt(_localctx, 61);
                    {
                        this.state = 711;
                        this.learning_path_bot_training();
                    }
                    break;
                case 62:
                    this.enterOuterAlt(_localctx, 62);
                    {
                        this.state = 712;
                        this.learning_path_external_link();
                    }
                    break;
                case 63:
                    this.enterOuterAlt(_localctx, 63);
                    {
                        this.state = 713;
                        this.learning_path_classroom_training();
                    }
                    break;
                case 64:
                    this.enterOuterAlt(_localctx, 64);
                    {
                        this.state = 714;
                        this.learning_path_classroom_event();
                    }
                    break;
                case 65:
                    this.enterOuterAlt(_localctx, 65);
                    {
                        this.state = 715;
                        this.bot_action_send();
                    }
                    break;
                case 66:
                    this.enterOuterAlt(_localctx, 66);
                    {
                        this.state = 716;
                        this.bot_action_announce();
                    }
                    break;
                case 67:
                    this.enterOuterAlt(_localctx, 67);
                    {
                        this.state = 717;
                        this.bot_action_save();
                    }
                    break;
                case 68:
                    this.enterOuterAlt(_localctx, 68);
                    {
                        this.state = 718;
                        this.bot_action_remind();
                    }
                    break;
                case 69:
                    this.enterOuterAlt(_localctx, 69);
                    {
                        this.state = 719;
                        this.bot_action_response();
                    }
                    break;
                case 70:
                    this.enterOuterAlt(_localctx, 70);
                    {
                        this.state = 720;
                        this.bot_action_true_false();
                    }
                    break;
                case 71:
                    this.enterOuterAlt(_localctx, 71);
                    {
                        this.state = 721;
                        this.bot_action_rating_number();
                    }
                    break;
                case 72:
                    this.enterOuterAlt(_localctx, 72);
                    {
                        this.state = 722;
                        this.bot_action_rating_stars();
                    }
                    break;
                case 73:
                    this.enterOuterAlt(_localctx, 73);
                    {
                        this.state = 723;
                        this.bit_image();
                    }
                    break;
                case 74:
                    this.enterOuterAlt(_localctx, 74);
                    {
                        this.state = 724;
                        this.bit_imageLink();
                    }
                    break;
                case 75:
                    this.enterOuterAlt(_localctx, 75);
                    {
                        this.state = 725;
                        this.bit_imageZoom();
                    }
                    break;
                case 76:
                    this.enterOuterAlt(_localctx, 76);
                    {
                        this.state = 726;
                        this.bit_imagePrototype();
                    }
                    break;
                case 77:
                    this.enterOuterAlt(_localctx, 77);
                    {
                        this.state = 727;
                        this.bit_imageSuperWide();
                    }
                    break;
                case 78:
                    this.enterOuterAlt(_localctx, 78);
                    {
                        this.state = 728;
                        this.bit_audio();
                    }
                    break;
                case 79:
                    this.enterOuterAlt(_localctx, 79);
                    {
                        this.state = 729;
                        this.bit_audioLink();
                    }
                    break;
                case 80:
                    this.enterOuterAlt(_localctx, 80);
                    {
                        this.state = 730;
                        this.bit_audioEmbed();
                    }
                    break;
                case 81:
                    this.enterOuterAlt(_localctx, 81);
                    {
                        this.state = 731;
                        this.bit_video();
                    }
                    break;
                case 82:
                    this.enterOuterAlt(_localctx, 82);
                    {
                        this.state = 732;
                        this.bit_videoLink();
                    }
                    break;
                case 83:
                    this.enterOuterAlt(_localctx, 83);
                    {
                        this.state = 733;
                        this.bit_videoEmbed();
                    }
                    break;
                case 84:
                    this.enterOuterAlt(_localctx, 84);
                    {
                        this.state = 734;
                        this.bit_videoPortrait();
                    }
                    break;
                case 85:
                    this.enterOuterAlt(_localctx, 85);
                    {
                        this.state = 735;
                        this.bit_videoLandscape();
                    }
                    break;
                case 86:
                    this.enterOuterAlt(_localctx, 86);
                    {
                        this.state = 736;
                        this.bit_stillImageFilm();
                    }
                    break;
                case 87:
                    this.enterOuterAlt(_localctx, 87);
                    {
                        this.state = 737;
                        this.bit_stillImageFilmLink();
                    }
                    break;
                case 88:
                    this.enterOuterAlt(_localctx, 88);
                    {
                        this.state = 738;
                        this.bit_stillImageFilmEmbed();
                    }
                    break;
                case 89:
                    this.enterOuterAlt(_localctx, 89);
                    {
                        this.state = 739;
                        this.bit_document();
                    }
                    break;
                case 90:
                    this.enterOuterAlt(_localctx, 90);
                    {
                        this.state = 740;
                        this.bit_documentLink();
                    }
                    break;
                case 91:
                    this.enterOuterAlt(_localctx, 91);
                    {
                        this.state = 741;
                        this.bit_documentEmbed();
                    }
                    break;
                case 92:
                    this.enterOuterAlt(_localctx, 92);
                    {
                        this.state = 742;
                        this.bit_documentDownload();
                    }
                    break;
                case 93:
                    this.enterOuterAlt(_localctx, 93);
                    {
                        this.state = 743;
                        this.bit_websiteLink();
                    }
                    break;
                case 94:
                    this.enterOuterAlt(_localctx, 94);
                    {
                        this.state = 744;
                        this.bit_appLink();
                    }
                    break;
                case 95:
                    this.enterOuterAlt(_localctx, 95);
                    {
                        this.state = 745;
                        this.bit_editorial();
                    }
                    break;
                case 96:
                    this.enterOuterAlt(_localctx, 96);
                    {
                        this.state = 746;
                        this.book_frontispiece();
                    }
                    break;
                case 97:
                    this.enterOuterAlt(_localctx, 97);
                    {
                        this.state = 747;
                        this.book_title();
                    }
                    break;
                case 98:
                    this.enterOuterAlt(_localctx, 98);
                    {
                        this.state = 748;
                        this.book_copyright();
                    }
                    break;
                case 99:
                    this.enterOuterAlt(_localctx, 99);
                    {
                        this.state = 749;
                        this.book_dedication();
                    }
                    break;
                case 100:
                    this.enterOuterAlt(_localctx, 100);
                    {
                        this.state = 750;
                        this.book_forword();
                    }
                    break;
                case 101:
                    this.enterOuterAlt(_localctx, 101);
                    {
                        this.state = 751;
                        this.book_preface();
                    }
                    break;
                case 102:
                    this.enterOuterAlt(_localctx, 102);
                    {
                        this.state = 752;
                        this.book_prologue();
                    }
                    break;
                case 103:
                    this.enterOuterAlt(_localctx, 103);
                    {
                        this.state = 753;
                        this.book_epilogue();
                    }
                    break;
                case 104:
                    this.enterOuterAlt(_localctx, 104);
                    {
                        this.state = 754;
                        this.book_introduction();
                    }
                    break;
                case 105:
                    this.enterOuterAlt(_localctx, 105);
                    {
                        this.state = 755;
                        this.book_inciting_incident();
                    }
                    break;
                case 106:
                    this.enterOuterAlt(_localctx, 106);
                    {
                        this.state = 756;
                        this.book_conclusion();
                    }
                    break;
                case 107:
                    this.enterOuterAlt(_localctx, 107);
                    {
                        this.state = 757;
                        this.book_afterword();
                    }
                    break;
                case 108:
                    this.enterOuterAlt(_localctx, 108);
                    {
                        this.state = 758;
                        this.book_postscript();
                    }
                    break;
                case 109:
                    this.enterOuterAlt(_localctx, 109);
                    {
                        this.state = 759;
                        this.book_appendix();
                    }
                    break;
                case 110:
                    this.enterOuterAlt(_localctx, 110);
                    {
                        this.state = 760;
                        this.book_addendum();
                    }
                    break;
                case 111:
                    this.enterOuterAlt(_localctx, 111);
                    {
                        this.state = 761;
                        this.book_acknowledgments();
                    }
                    break;
                case 112:
                    this.enterOuterAlt(_localctx, 112);
                    {
                        this.state = 762;
                        this.book_list_of_contributors();
                    }
                    break;
                case 113:
                    this.enterOuterAlt(_localctx, 113);
                    {
                        this.state = 763;
                        this.book_bibliography();
                    }
                    break;
                case 114:
                    this.enterOuterAlt(_localctx, 114);
                    {
                        this.state = 764;
                        this.book_reference_list();
                    }
                    break;
                case 115:
                    this.enterOuterAlt(_localctx, 115);
                    {
                        this.state = 765;
                        this.book_endnotes();
                    }
                    break;
                case 116:
                    this.enterOuterAlt(_localctx, 116);
                    {
                        this.state = 766;
                        this.book_notes();
                    }
                    break;
                case 117:
                    this.enterOuterAlt(_localctx, 117);
                    {
                        this.state = 767;
                        this.book_copyright_permissions();
                    }
                    break;
                case 118:
                    this.enterOuterAlt(_localctx, 118);
                    {
                        this.state = 768;
                        this.book_teaser();
                    }
                    break;
                case 119:
                    this.enterOuterAlt(_localctx, 119);
                    {
                        this.state = 769;
                        this.book_auther_bio();
                    }
                    break;
                case 120:
                    this.enterOuterAlt(_localctx, 120);
                    {
                        this.state = 770;
                        this.book_request_for_a_book_review();
                    }
                    break;
                case 121:
                    this.enterOuterAlt(_localctx, 121);
                    {
                        this.state = 771;
                        this.book_coming_soon();
                    }
                    break;
                case 122:
                    this.enterOuterAlt(_localctx, 122);
                    {
                        this.state = 772;
                        this.book_read_more();
                    }
                    break;
                case 123:
                    this.enterOuterAlt(_localctx, 123);
                    {
                        this.state = 773;
                        this.book_summary();
                    }
                    break;
                case 124:
                    this.enterOuterAlt(_localctx, 124);
                    {
                        this.state = 774;
                        this.book_epigraph();
                    }
                    break;
                case 125:
                    this.enterOuterAlt(_localctx, 125);
                    {
                        this.state = 775;
                        this.cook_preparation();
                    }
                    break;
                case 126:
                    this.enterOuterAlt(_localctx, 126);
                    {
                        this.state = 776;
                        this.cook_step();
                    }
                    break;
                case 127:
                    this.enterOuterAlt(_localctx, 127);
                    {
                        this.state = 777;
                        this.cook_ingredients();
                    }
                    break;
                case 128:
                    this.enterOuterAlt(_localctx, 128);
                    {
                        this.state = 778;
                        this.cook_remark();
                    }
                    break;
                case 129:
                    this.enterOuterAlt(_localctx, 129);
                    {
                        this.state = 779;
                        this.cook_variation();
                    }
                    break;
                case 130:
                    this.enterOuterAlt(_localctx, 130);
                    {
                        this.state = 780;
                        this.cook_insert();
                    }
                    break;
                case 131:
                    this.enterOuterAlt(_localctx, 131);
                    {
                        this.state = 781;
                        this.cook_arrangement();
                    }
                    break;
                case 132:
                    this.enterOuterAlt(_localctx, 132);
                    {
                        this.state = 782;
                        this.cook_practice_advise();
                    }
                    break;
                case 133:
                    this.enterOuterAlt(_localctx, 133);
                    {
                        this.state = 783;
                        this.cook_plate();
                    }
                    break;
                case 134:
                    this.enterOuterAlt(_localctx, 134);
                    {
                        this.state = 784;
                        this.cook_recommendation();
                    }
                    break;
                case 135:
                    this.enterOuterAlt(_localctx, 135);
                    {
                        this.state = 785;
                        this.cook_personal_recommendation();
                    }
                    break;
                case 136:
                    this.enterOuterAlt(_localctx, 136);
                    {
                        this.state = 786;
                        this.cook_side_drink();
                    }
                    break;
                case 137:
                    this.enterOuterAlt(_localctx, 137);
                    {
                        this.state = 787;
                        this.cook_side_dish();
                    }
                    break;
                case 138:
                    this.enterOuterAlt(_localctx, 138);
                    {
                        this.state = 788;
                        this.cook_timer();
                    }
                    break;
                case 139:
                    this.enterOuterAlt(_localctx, 139);
                    {
                        this.state = 789;
                        this.cook_ingredients();
                    }
                    break;
                case 140:
                    this.enterOuterAlt(_localctx, 140);
                    {
                        this.state = 790;
                        this.lang_learning_outcomes();
                    }
                    break;
                case 141:
                    this.enterOuterAlt(_localctx, 141);
                    {
                        this.state = 791;
                        this.lang_enabling_language_skills();
                    }
                    break;
                case 142:
                    this.enterOuterAlt(_localctx, 142);
                    {
                        this.state = 792;
                        this.lang_life_skills();
                    }
                    break;
                case 143:
                    this.enterOuterAlt(_localctx, 143);
                    {
                        this.state = 793;
                        this.lang_english_around_world();
                    }
                    break;
                case 144:
                    this.enterOuterAlt(_localctx, 144);
                    {
                        this.state = 794;
                        this.lang_good_to_know();
                    }
                    break;
                case 145:
                    this.enterOuterAlt(_localctx, 145);
                    {
                        this.state = 795;
                        this.lang_learning_strategy();
                    }
                    break;
                case 146:
                    this.enterOuterAlt(_localctx, 146);
                    {
                        this.state = 796;
                        this.lang_like_a_local();
                    }
                    break;
                case 147:
                    this.enterOuterAlt(_localctx, 147);
                    {
                        this.state = 797;
                        this.lang_useful_phrases();
                    }
                    break;
                case 148:
                    this.enterOuterAlt(_localctx, 148);
                    {
                        this.state = 798;
                        this.lang_level_down();
                    }
                    break;
                case 149:
                    this.enterOuterAlt(_localctx, 149);
                    {
                        this.state = 799;
                        this.lang_level_up();
                    }
                    break;
                case 150:
                    this.enterOuterAlt(_localctx, 150);
                    {
                        this.state = 800;
                        this.lang_extra_activity();
                    }
                    break;
                case 151:
                    this.enterOuterAlt(_localctx, 151);
                    {
                        this.state = 801;
                        this.lang_video_script();
                    }
                    break;
                case 152:
                    this.enterOuterAlt(_localctx, 152);
                    {
                        this.state = 802;
                        this.lang_audio_script();
                    }
                    break;
                case 153:
                    this.enterOuterAlt(_localctx, 153);
                    {
                        this.state = 803;
                        this.lang_vocabulary();
                    }
                    break;
                case 154:
                    this.enterOuterAlt(_localctx, 154);
                    {
                        this.state = 804;
                        this.lang_homework();
                    }
                    break;
                case 155:
                    this.enterOuterAlt(_localctx, 155);
                    {
                        this.state = 805;
                        this.lang_teacher_note();
                    }
                    break;
                case 156:
                    this.enterOuterAlt(_localctx, 156);
                    {
                        this.state = 806;
                        this.code();
                    }
                    break;
                case 157:
                    this.enterOuterAlt(_localctx, 157);
                    {
                        this.state = 807;
                        this.card1();
                    }
                    break;
                case 158:
                    this.enterOuterAlt(_localctx, 158);
                    {
                        this.state = 808;
                        this.question1();
                    }
                    break;
                case 159:
                    this.enterOuterAlt(_localctx, 159);
                    {
                        this.state = 809;
                        this.screenshot();
                    }
                    break;
                case 160:
                    this.enterOuterAlt(_localctx, 160);
                    {
                        this.state = 810;
                        this.focus_image();
                    }
                    break;
                case 161:
                    this.enterOuterAlt(_localctx, 161);
                    {
                        this.state = 811;
                        this.photo();
                    }
                    break;
                case 162:
                    this.enterOuterAlt(_localctx, 162);
                    {
                        this.state = 812;
                        this.browser_image();
                    }
                    break;
                case 163:
                    this.enterOuterAlt(_localctx, 163);
                    {
                        this.state = 813;
                        this.chapter_subject_matter();
                    }
                    break;
                case 164:
                    this.enterOuterAlt(_localctx, 164);
                    {
                        this.state = 814;
                        this.release_note();
                    }
                    break;
                case 165:
                    this.enterOuterAlt(_localctx, 165);
                    {
                        this.state = 815;
                        this.conclusion();
                    }
                    break;
                case 166:
                    this.enterOuterAlt(_localctx, 166);
                    {
                        this.state = 816;
                        this.featured();
                    }
                    break;
                case 167:
                    this.enterOuterAlt(_localctx, 167);
                    {
                        this.state = 817;
                        this.vendor_amcharts_5_chart();
                    }
                    break;
                case 168:
                    this.enterOuterAlt(_localctx, 168);
                    {
                        this.state = 818;
                        this.newspaper_article();
                    }
                    break;
                case 169:
                    this.enterOuterAlt(_localctx, 169);
                    {
                        this.state = 819;
                        this.blog_article();
                    }
                    break;
                case 170:
                    this.enterOuterAlt(_localctx, 170);
                    {
                        this.state = 820;
                        this.book_article();
                    }
                    break;
                case 171:
                    this.enterOuterAlt(_localctx, 171);
                    {
                        this.state = 821;
                        this.notebook_article();
                    }
                    break;
                case 172:
                    this.enterOuterAlt(_localctx, 172);
                    {
                        this.state = 822;
                        this.workbook_article();
                    }
                    break;
                case 173:
                    this.enterOuterAlt(_localctx, 173);
                    {
                        this.state = 823;
                        this.release_notes_summary();
                    }
                    break;
                case 174:
                    this.enterOuterAlt(_localctx, 174);
                    {
                        this.state = 824;
                        this.review_note();
                    }
                    break;
                case 175:
                    this.enterOuterAlt(_localctx, 175);
                    {
                        this.state = 825;
                        this.review_author_note();
                    }
                    break;
                case 176:
                    this.enterOuterAlt(_localctx, 176);
                    {
                        this.state = 826;
                        this.review_reviewer_note();
                    }
                    break;
                case 177:
                    this.enterOuterAlt(_localctx, 177);
                    {
                        this.state = 827;
                        this.review_request_for_review_note();
                    }
                    break;
                case 178:
                    this.enterOuterAlt(_localctx, 178);
                    {
                        this.state = 828;
                        this.review_approved_note();
                    }
                    break;
                case 179:
                    this.enterOuterAlt(_localctx, 179);
                    {
                        this.state = 829;
                        this.checklist();
                    }
                    break;
                case 180:
                    this.enterOuterAlt(_localctx, 180);
                    {
                        this.state = 830;
                        this.video_transcript();
                    }
                    break;
                case 181:
                    this.enterOuterAlt(_localctx, 181);
                    {
                        this.state = 831;
                        this.audio_transcript();
                    }
                    break;
                case 182:
                    this.enterOuterAlt(_localctx, 182);
                    {
                        this.state = 832;
                        this.image_portrait();
                    }
                    break;
                case 183:
                    this.enterOuterAlt(_localctx, 183);
                    {
                        this.state = 833;
                        this.image_landscape();
                    }
                    break;
                case 184:
                    this.enterOuterAlt(_localctx, 184);
                    {
                        this.state = 834;
                        this.image_on_device();
                    }
                    break;
                case 185:
                    this.enterOuterAlt(_localctx, 185);
                    {
                        this.state = 835;
                        this.bitmark_example();
                    }
                    break;
                case 186:
                    this.enterOuterAlt(_localctx, 186);
                    {
                        this.state = 836;
                        this.app_ai_prompt();
                    }
                    break;
                case 187:
                    this.enterOuterAlt(_localctx, 187);
                    {
                        this.state = 837;
                        this.book_link();
                    }
                    break;
                case 188:
                    this.enterOuterAlt(_localctx, 188);
                    {
                        this.state = 838;
                        this.book_link_next();
                    }
                    break;
                case 189:
                    this.enterOuterAlt(_localctx, 189);
                    {
                        this.state = 839;
                        this.book_link_prev();
                    }
                    break;
                case 190:
                    this.enterOuterAlt(_localctx, 190);
                    {
                        this.state = 840;
                        this.figure();
                    }
                    break;
                case 191:
                    this.enterOuterAlt(_localctx, 191);
                    {
                        this.state = 841;
                        this.video_link_landscape();
                    }
                    break;
                case 192:
                    this.enterOuterAlt(_localctx, 192);
                    {
                        this.state = 842;
                        this.video_link_portrait();
                    }
                    break;
                case 193:
                    this.enterOuterAlt(_localctx, 193);
                    {
                        this.state = 843;
                        this.image_mood();
                    }
                    break;
                case 194:
                    this.enterOuterAlt(_localctx, 194);
                    {
                        this.state = 844;
                        this.image_figure();
                    }
                    break;
                case 195:
                    this.enterOuterAlt(_localctx, 195);
                    {
                        this.state = 845;
                        this.image_banner();
                    }
                    break;
                case 196:
                    this.enterOuterAlt(_localctx, 196);
                    {
                        this.state = 846;
                        this.image_styled();
                    }
                    break;
                case 197:
                    this.enterOuterAlt(_localctx, 197);
                    {
                        this.state = 847;
                        this.image_screenshot();
                    }
                    break;
                case 198:
                    this.enterOuterAlt(_localctx, 198);
                    {
                        this.state = 848;
                        this.app_get_screenshot();
                    }
                    break;
                case 199:
                    this.enterOuterAlt(_localctx, 199);
                    {
                        this.state = 849;
                        this.app_create_bits_from_image();
                    }
                    break;
                case 200:
                    this.enterOuterAlt(_localctx, 200);
                    {
                        this.state = 850;
                        this.life_skill_sticker();
                    }
                    break;
                case 201:
                    this.enterOuterAlt(_localctx, 201);
                    {
                        this.state = 851;
                        this.details_image();
                    }
                    break;
                case 202:
                    this.enterOuterAlt(_localctx, 202);
                    {
                        this.state = 852;
                        this.images_logo_grave();
                    }
                    break;
                case 203:
                    this.enterOuterAlt(_localctx, 203);
                    {
                        this.state = 853;
                        this.page_banner();
                    }
                    break;
                case 204:
                    this.enterOuterAlt(_localctx, 204);
                    {
                        this.state = 854;
                        this.page_buy_button();
                    }
                    break;
                case 205:
                    this.enterOuterAlt(_localctx, 205);
                    {
                        this.state = 855;
                        this.vendor_jsfiddle();
                    }
                    break;
                case 206:
                    this.enterOuterAlt(_localctx, 206);
                    {
                        this.state = 856;
                        this.vendor_jsfiddle_embed();
                    }
                    break;
                case 207:
                    this.enterOuterAlt(_localctx, 207);
                    {
                        this.state = 857;
                        this.image_render_svg();
                    }
                    break;
                case 208:
                    this.enterOuterAlt(_localctx, 208);
                    {
                        this.state = 858;
                        this.app_code_editor();
                    }
                    break;
                case 209:
                    this.enterOuterAlt(_localctx, 209);
                    {
                        this.state = 859;
                        this.app_code_ide();
                    }
                    break;
                case 210:
                    this.enterOuterAlt(_localctx, 210);
                    {
                        this.state = 860;
                        this.code_runtime();
                    }
                    break;
                case 211:
                    this.enterOuterAlt(_localctx, 211);
                    {
                        this.state = 861;
                        this.output();
                    }
                    break;
                case 212:
                    this.enterOuterAlt(_localctx, 212);
                    {
                        this.state = 862;
                        this.console_log();
                    }
                    break;
                case 213:
                    this.enterOuterAlt(_localctx, 213);
                    {
                        this.state = 863;
                        this.vendor_jupyter_cell_code();
                    }
                    break;
                case 214:
                    this.enterOuterAlt(_localctx, 214);
                    {
                        this.state = 864;
                        this.vendor_jupyter_cell_raw();
                    }
                    break;
                case 215:
                    this.enterOuterAlt(_localctx, 215);
                    {
                        this.state = 865;
                        this.vendor_jupyter_output();
                    }
                    break;
                case 216:
                    this.enterOuterAlt(_localctx, 216);
                    {
                        this.state = 866;
                        this.vendor_jupyter_cell_markdown();
                    }
                    break;
                case 217:
                    this.enterOuterAlt(_localctx, 217);
                    {
                        this.state = 867;
                        this.vendor_jupyter_ipynb();
                    }
                    break;
                case 218:
                    this.enterOuterAlt(_localctx, 218);
                    {
                        this.state = 868;
                        this.app_code_cell();
                    }
                    break;
                case 219:
                    this.enterOuterAlt(_localctx, 219);
                    {
                        this.state = 869;
                        this.stdout();
                    }
                    break;
                case 220:
                    this.enterOuterAlt(_localctx, 220);
                    {
                        this.state = 870;
                        this.app_bitmark_from_javascript();
                    }
                    break;
                case 221:
                    this.enterOuterAlt(_localctx, 221);
                    {
                        this.state = 871;
                        this.app_bitmark_from_editor();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book() {
        let _localctx = new BookContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, bitmarkParser.RULE_book);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 874;
                this.match(bitmarkParser.BitBook);
                this.state = 875;
                this.format();
                this.state = 876;
                this.match(bitmarkParser.CL);
                this.state = 880;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 6, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 877;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 882;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 6, this._ctx);
                }
                this.state = 892;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 883;
                                this.bitElem();
                                this.state = 887;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 884;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 889;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 894;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    chapter() {
        let _localctx = new ChapterContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, bitmarkParser.RULE_chapter);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 895;
                this.match(bitmarkParser.BitChapter);
                this.state = 896;
                this.format();
                this.state = 897;
                this.match(bitmarkParser.CL);
                this.state = 901;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 898;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 903;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 907;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 10, this._ctx)) {
                    case 1:
                        {
                            this.state = 904;
                            this.anchor();
                            this.state = 905;
                            this.match(bitmarkParser.NL);
                        }
                        break;
                }
                this.state = 909;
                this.resource();
                this.state = 919;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 913;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 910;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 915;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 916;
                                this.resource();
                            }
                        }
                    }
                    this.state = 921;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ai_prompt() {
        let _localctx = new Ai_promptContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, bitmarkParser.RULE_ai_prompt);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 922;
                this.match(bitmarkParser.BitAiPrompt);
                this.state = 923;
                this.format();
                this.state = 924;
                this.match(bitmarkParser.CL);
                this.state = 928;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 925;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 930;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 938;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 931;
                                    this.bitElem();
                                    this.state = 935;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 932;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 937;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 940;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    note_ai() {
        let _localctx = new Note_aiContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, bitmarkParser.RULE_note_ai);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 942;
                this.match(bitmarkParser.BitNoteAi);
                this.state = 943;
                this.format();
                this.state = 944;
                this.match(bitmarkParser.CL);
                this.state = 948;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 945;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 950;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 958;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 951;
                                    this.bitElem();
                                    this.state = 955;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 952;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 957;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 960;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 18, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    summary_ai() {
        let _localctx = new Summary_aiContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, bitmarkParser.RULE_summary_ai);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 962;
                this.match(bitmarkParser.BitSummayAi);
                this.state = 963;
                this.format();
                this.state = 964;
                this.match(bitmarkParser.CL);
                this.state = 968;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 965;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 970;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 978;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 971;
                                    this.bitElem();
                                    this.state = 975;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 972;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 977;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 980;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    article_ai() {
        let _localctx = new Article_aiContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, bitmarkParser.RULE_article_ai);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 982;
                this.match(bitmarkParser.BitArticleAi);
                this.state = 983;
                this.format();
                this.state = 984;
                this.match(bitmarkParser.CL);
                this.state = 988;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 985;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 990;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 998;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 991;
                                    this.bitElem();
                                    this.state = 995;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 992;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 997;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1000;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 24, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    toc() {
        let _localctx = new TocContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, bitmarkParser.RULE_toc);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1002;
                this.match(bitmarkParser.BitToc);
                this.state = 1004;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                    {
                        this.state = 1003;
                        this.s_and_w();
                    }
                }
                this.state = 1006;
                this.match(bitmarkParser.CL);
                this.state = 1007;
                this.match(bitmarkParser.NL);
                this.state = 1011;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPA || _la === bitmarkParser.AtSampleSolution || _la === bitmarkParser.OpAtCopyright) {
                    {
                        this.state = 1008;
                        this.atdef();
                        this.state = 1009;
                        this.match(bitmarkParser.NL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    summary() {
        let _localctx = new SummaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, bitmarkParser.RULE_summary);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1013;
                this.match(bitmarkParser.BitSummary);
                this.state = 1014;
                this.match(bitmarkParser.CL);
                this.state = 1018;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1015;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1020;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
                }
                this.state = 1021;
                this.title_etc();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    internal_link() {
        let _localctx = new Internal_linkContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, bitmarkParser.RULE_internal_link);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1023;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.BitIntlink || _la === bitmarkParser.BitIntRef)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1025;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
                    {
                        this.state = 1024;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1027;
                this.match(bitmarkParser.CL);
                this.state = 1037;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1031;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 1028;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 1033;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 1034;
                                this.bitElem();
                            }
                        }
                    }
                    this.state = 1039;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_alias() {
        let _localctx = new Bit_aliasContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, bitmarkParser.RULE_bit_alias);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1040;
                this.match(bitmarkParser.BitAlias);
                this.state = 1041;
                this.match(bitmarkParser.CL);
                this.state = 1042;
                this.angleref();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    title_etc() {
        let _localctx = new Title_etcContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, bitmarkParser.RULE_title_etc);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1058;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1045;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === bitmarkParser.NL) {
                                    {
                                        this.state = 1044;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1054;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.OPHASH:
                                        {
                                            this.state = 1047;
                                            this.title();
                                        }
                                        break;
                                    case bitmarkParser.OPA:
                                    case bitmarkParser.AtSampleSolution:
                                    case bitmarkParser.OpAtCopyright:
                                        {
                                            this.state = 1048;
                                            this.atdef();
                                        }
                                        break;
                                    case bitmarkParser.OPC:
                                        {
                                            this.state = 1049;
                                            this.item();
                                        }
                                        break;
                                    case bitmarkParser.OPB:
                                        {
                                            this.state = 1050;
                                            this.instruction();
                                        }
                                        break;
                                    case bitmarkParser.OPRANGLES:
                                    case bitmarkParser.OPRANGLEL:
                                        {
                                            this.state = 1051;
                                            this.angleref();
                                        }
                                        break;
                                    case bitmarkParser.OPDANGLE:
                                        {
                                            this.state = 1052;
                                            this.anchor();
                                        }
                                        break;
                                    case bitmarkParser.AtProgress:
                                        {
                                            this.state = 1053;
                                            this.progress();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                        }
                    }
                    this.state = 1060;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    group_born() {
        let _localctx = new Group_bornContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, bitmarkParser.RULE_group_born);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1061;
                this.match(bitmarkParser.BitGroups);
                this.state = 1062;
                this.match(bitmarkParser.CL);
                this.state = 1072;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1063;
                                    this.match(bitmarkParser.NL);
                                    this.state = 1064;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 1067;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            this.state = 1067;
                                            this._errHandler.sync(this);
                                            switch (this.interpreter.adaptivePredict(this._input, 34, this._ctx)) {
                                                case 1:
                                                    {
                                                        this.state = 1065;
                                                        this.s_and_w();
                                                    }
                                                    break;
                                                case 2:
                                                    {
                                                        this.state = 1066;
                                                        this.match(bitmarkParser.COLON);
                                                    }
                                                    break;
                                            }
                                        }
                                        this.state = 1069;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                                    this.state = 1071;
                                    this.match(bitmarkParser.CL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1074;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 1076;
                this.match(bitmarkParser.NL);
                this.state = 1080;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 37, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1077;
                                this.lines();
                            }
                        }
                    }
                    this.state = 1082;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 37, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    group_died() {
        let _localctx = new Group_diedContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, bitmarkParser.RULE_group_died);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1083;
                this.match(bitmarkParser.BitGroupt);
                this.state = 1084;
                this.match(bitmarkParser.CL);
                this.state = 1094;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1085;
                                    this.match(bitmarkParser.NL);
                                    this.state = 1086;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 1089;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            this.state = 1089;
                                            this._errHandler.sync(this);
                                            switch (this.interpreter.adaptivePredict(this._input, 38, this._ctx)) {
                                                case 1:
                                                    {
                                                        this.state = 1087;
                                                        this.s_and_w();
                                                    }
                                                    break;
                                                case 2:
                                                    {
                                                        this.state = 1088;
                                                        this.match(bitmarkParser.COLON);
                                                    }
                                                    break;
                                            }
                                        }
                                        this.state = 1091;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                                    this.state = 1093;
                                    this.match(bitmarkParser.CL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1096;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 40, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 1098;
                this.match(bitmarkParser.NL);
                this.state = 1102;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1099;
                                this.lines();
                            }
                        }
                    }
                    this.state = 1104;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_lti() {
        let _localctx = new Learning_path_ltiContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, bitmarkParser.RULE_learning_path_lti);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1105;
                this.match(bitmarkParser.BitLearningPathLti);
                this.state = 1106;
                this.format();
                this.state = 1107;
                this.match(bitmarkParser.CL);
                this.state = 1111;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1108;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1113;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1121;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1114;
                                    this.bitElem();
                                    this.state = 1118;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1115;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1120;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1123;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_step() {
        let _localctx = new Learning_path_stepContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, bitmarkParser.RULE_learning_path_step);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1125;
                this.match(bitmarkParser.BitLearningPathStep);
                this.state = 1126;
                this.format();
                this.state = 1127;
                this.match(bitmarkParser.CL);
                this.state = 1131;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1128;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1133;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1141;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1134;
                                    this.bitElem();
                                    this.state = 1138;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1135;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1140;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1143;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_book() {
        let _localctx = new Learning_path_bookContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, bitmarkParser.RULE_learning_path_book);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1145;
                this.match(bitmarkParser.BitLearningPathBook);
                this.state = 1146;
                this.format();
                this.state = 1147;
                this.match(bitmarkParser.CL);
                this.state = 1151;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1148;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1153;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1161;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1154;
                                    this.bitElem();
                                    this.state = 1158;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1155;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1160;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1163;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_sign() {
        let _localctx = new Learning_path_signContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, bitmarkParser.RULE_learning_path_sign);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1165;
                this.match(bitmarkParser.BitLearningPathSign);
                this.state = 1166;
                this.format();
                this.state = 1167;
                this.match(bitmarkParser.CL);
                this.state = 1171;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1168;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1173;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1181;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1174;
                                    this.bitElem();
                                    this.state = 1178;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1175;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1180;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1183;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_video_call() {
        let _localctx = new Learning_path_video_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, bitmarkParser.RULE_learning_path_video_call);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1185;
                this.match(bitmarkParser.BitLearningPathVideoCall);
                this.state = 1186;
                this.format();
                this.state = 1187;
                this.match(bitmarkParser.CL);
                this.state = 1191;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1188;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1193;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1201;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1194;
                                    this.bitElem();
                                    this.state = 1198;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1195;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1200;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1203;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_learning_goal() {
        let _localctx = new Learning_path_learning_goalContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, bitmarkParser.RULE_learning_path_learning_goal);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1205;
                this.match(bitmarkParser.BitLearningPathLearningGoal);
                this.state = 1206;
                this.format();
                this.state = 1207;
                this.match(bitmarkParser.CL);
                this.state = 1211;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1208;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1213;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1221;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1214;
                                    this.bitElem();
                                    this.state = 1218;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1215;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1220;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1223;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_closing() {
        let _localctx = new Learning_path_closingContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, bitmarkParser.RULE_learning_path_closing);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1225;
                this.match(bitmarkParser.BitLearningPathClosing);
                this.state = 1226;
                this.format();
                this.state = 1227;
                this.match(bitmarkParser.CL);
                this.state = 1231;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1228;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1233;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1241;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1234;
                                    this.bitElem();
                                    this.state = 1238;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 61, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1235;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1240;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 61, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1243;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_feedback() {
        let _localctx = new Learning_path_feedbackContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, bitmarkParser.RULE_learning_path_feedback);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1245;
                this.match(bitmarkParser.BitLearningPathFeedback);
                this.state = 1246;
                this.format();
                this.state = 1247;
                this.match(bitmarkParser.CL);
                this.state = 1251;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1248;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1253;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1261;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1254;
                                    this.bitElem();
                                    this.state = 1258;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1255;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1260;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1263;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_bot_training() {
        let _localctx = new Learning_path_bot_trainingContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, bitmarkParser.RULE_learning_path_bot_training);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1265;
                this.match(bitmarkParser.BitLearningPathBotTraining);
                this.state = 1266;
                this.format();
                this.state = 1267;
                this.match(bitmarkParser.CL);
                this.state = 1271;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1268;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1273;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1281;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1274;
                                    this.bitElem();
                                    this.state = 1278;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1275;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1280;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1283;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_external_link() {
        let _localctx = new Learning_path_external_linkContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, bitmarkParser.RULE_learning_path_external_link);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1285;
                this.match(bitmarkParser.BitLearningPathExternalLink);
                this.state = 1286;
                this.format();
                this.state = 1287;
                this.match(bitmarkParser.CL);
                this.state = 1291;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1288;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1293;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1301;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1294;
                                    this.bitElem();
                                    this.state = 1298;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1295;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1300;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1303;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_classroom_training() {
        let _localctx = new Learning_path_classroom_trainingContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, bitmarkParser.RULE_learning_path_classroom_training);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1305;
                this.match(bitmarkParser.BitLearningPathClassroomTraining);
                this.state = 1306;
                this.format();
                this.state = 1307;
                this.match(bitmarkParser.CL);
                this.state = 1311;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1308;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1313;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1321;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1314;
                                    this.bitElem();
                                    this.state = 1318;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 73, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1315;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1320;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 73, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1323;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_classroom_event() {
        let _localctx = new Learning_path_classroom_eventContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, bitmarkParser.RULE_learning_path_classroom_event);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1325;
                this.match(bitmarkParser.BitLearningPathClassroomEvent);
                this.state = 1326;
                this.format();
                this.state = 1327;
                this.match(bitmarkParser.CL);
                this.state = 1331;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1328;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1333;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1341;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1334;
                                    this.bitElem();
                                    this.state = 1338;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 76, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1335;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1340;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 76, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1343;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_send() {
        let _localctx = new Bot_action_sendContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, bitmarkParser.RULE_bot_action_send);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1345;
                this.match(bitmarkParser.BitBotActionSend);
                this.state = 1346;
                this.format();
                this.state = 1347;
                this.match(bitmarkParser.CL);
                this.state = 1351;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1348;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1353;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1361;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1354;
                                    this.bitElem();
                                    this.state = 1358;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1355;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1360;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1363;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 80, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_announce() {
        let _localctx = new Bot_action_announceContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, bitmarkParser.RULE_bot_action_announce);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1365;
                this.match(bitmarkParser.BitBotActionAnnounce);
                this.state = 1366;
                this.format();
                this.state = 1367;
                this.match(bitmarkParser.CL);
                this.state = 1371;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1368;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1373;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1381;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1374;
                                    this.bitElem();
                                    this.state = 1378;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 82, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1375;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1380;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 82, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1383;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 83, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_save() {
        let _localctx = new Bot_action_saveContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, bitmarkParser.RULE_bot_action_save);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1385;
                this.match(bitmarkParser.BitBotActionSave);
                this.state = 1386;
                this.format();
                this.state = 1387;
                this.match(bitmarkParser.CL);
                this.state = 1391;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1388;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1393;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1401;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1394;
                                    this.bitElem();
                                    this.state = 1398;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1395;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1400;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1403;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 86, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_remind() {
        let _localctx = new Bot_action_remindContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, bitmarkParser.RULE_bot_action_remind);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1405;
                this.match(bitmarkParser.BitBotActionRemind);
                this.state = 1406;
                this.format();
                this.state = 1407;
                this.match(bitmarkParser.CL);
                this.state = 1411;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1408;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1413;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1421;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1414;
                                    this.bitElem();
                                    this.state = 1418;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1415;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1420;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1423;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 89, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_response() {
        let _localctx = new Bot_action_responseContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, bitmarkParser.RULE_bot_action_response);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1425;
                this.match(bitmarkParser.BitBotActionResponse);
                this.state = 1426;
                this.format();
                this.state = 1427;
                this.match(bitmarkParser.CL);
                this.state = 1431;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1428;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1433;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1443;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (bitmarkParser.OPDOLL - 226)) | (1 << (bitmarkParser.OPRANGLES - 226)) | (1 << (bitmarkParser.OPRANGLEL - 226)) | (1 << (bitmarkParser.OPDANGLE - 226)) | (1 << (bitmarkParser.OPU - 226)) | (1 << (bitmarkParser.OPB - 226)) | (1 << (bitmarkParser.OPQ - 226)) | (1 << (bitmarkParser.OPA - 226)) | (1 << (bitmarkParser.OPS - 226)) | (1 << (bitmarkParser.OPHASH - 226)) | (1 << (bitmarkParser.OPC - 226)) | (1 << (bitmarkParser.COLON - 226)) | (1 << (bitmarkParser.AMP - 226)) | (1 << (bitmarkParser.Greater - 226)) | (1 << (bitmarkParser.Less - 226)) | (1 << (bitmarkParser.RightAngle - 226)) | (1 << (bitmarkParser.RightArrow - 226)) | (1 << (bitmarkParser.DBLEQ - 226)) | (1 << (bitmarkParser.QUOTE_INDEX - 226)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.DCANY - 258)) | (1 << (bitmarkParser.ArticleText - 258)) | (1 << (bitmarkParser.NUMERIC - 258)) | (1 << (bitmarkParser.STRING - 258)) | (1 << (bitmarkParser.NOTBITMARK - 258)) | (1 << (bitmarkParser.ELIPSIS - 258)) | (1 << (bitmarkParser.SENTENCE - 258)) | (1 << (bitmarkParser.BARSTRING - 258)) | (1 << (bitmarkParser.AtProgress - 258)) | (1 << (bitmarkParser.AtReference - 258)) | (1 << (bitmarkParser.AtProgressPoints - 258)) | (1 << (bitmarkParser.AtExampleWithStr - 258)) | (1 << (bitmarkParser.AtExamplecol - 258)) | (1 << (bitmarkParser.AtExamplecl - 258)) | (1 << (bitmarkParser.AtSampleSolution - 258)) | (1 << (bitmarkParser.AtPartialAnswerS - 258)) | (1 << (bitmarkParser.AtPartialAnswer - 258)) | (1 << (bitmarkParser.AtLabeltrue - 258)) | (1 << (bitmarkParser.AtLabelfalse - 258)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (bitmarkParser.OpAtCopyright - 295)) | (1 << (bitmarkParser.OpAtIsTracked - 295)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 295)) | (1 << (bitmarkParser.AtDate - 295)) | (1 << (bitmarkParser.AmpAudio - 295)) | (1 << (bitmarkParser.AmpImage - 295)) | (1 << (bitmarkParser.AmpVideo - 295)) | (1 << (bitmarkParser.AmpArticle - 295)) | (1 << (bitmarkParser.AmpDocument - 295)) | (1 << (bitmarkParser.AmpApp - 295)) | (1 << (bitmarkParser.AmpWebsite - 295)) | (1 << (bitmarkParser.AmpStillImageFilm - 295)) | (1 << (bitmarkParser.OpAmpAudio - 295)) | (1 << (bitmarkParser.OpAmpImage - 295)) | (1 << (bitmarkParser.OpAmpImageZoom - 295)) | (1 << (bitmarkParser.OpAmpVideo - 295)) | (1 << (bitmarkParser.OpAmpArticle - 295)) | (1 << (bitmarkParser.OpAmpDocument - 295)) | (1 << (bitmarkParser.OpAmpApp - 295)) | (1 << (bitmarkParser.OpAmpWebsite - 295)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 295)) | (1 << (bitmarkParser.BracEnclose - 295)) | (1 << (bitmarkParser.AmpAudioLink - 295)) | (1 << (bitmarkParser.AmpImageLink - 295)) | (1 << (bitmarkParser.AmpVideoLink - 295)) | (1 << (bitmarkParser.AmpArticleLink - 295)))) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & ((1 << (bitmarkParser.AmpDocumentLink - 327)) | (1 << (bitmarkParser.AmpAppLink - 327)) | (1 << (bitmarkParser.AmpWebsiteLink - 327)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.OpAmpAudioLink - 327)) | (1 << (bitmarkParser.OpAmpImageLink - 327)) | (1 << (bitmarkParser.OpAmpVideoLink - 327)) | (1 << (bitmarkParser.OpAmpArticleLink - 327)) | (1 << (bitmarkParser.OpAmpDocumentLink - 327)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 327)) | (1 << (bitmarkParser.OpAmpAppLink - 327)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 327)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 327)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 327)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 327)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 327)) | (1 << (bitmarkParser.BitmarkMinus - 327)) | (1 << (bitmarkParser.BitmarkPlus - 327)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 1434;
                            this.bitElem();
                            this.state = 1438;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1435;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1440;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 1445;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1447;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1446;
                                    this.bot_action();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1449;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 93, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 1451;
                this.match(bitmarkParser.HSPL);
                this.state = 1453;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 94, this._ctx)) {
                    case 1:
                        {
                            this.state = 1452;
                            this.footer();
                        }
                        break;
                }
                this.state = 1458;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 95, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1455;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1460;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 95, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_true_false() {
        let _localctx = new Bot_action_true_falseContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, bitmarkParser.RULE_bot_action_true_false);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1461;
                this.match(bitmarkParser.BitBotActionTrueFalse);
                this.state = 1462;
                this.format();
                this.state = 1463;
                this.match(bitmarkParser.CL);
                this.state = 1467;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1464;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1469;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1479;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (bitmarkParser.OPDOLL - 226)) | (1 << (bitmarkParser.OPRANGLES - 226)) | (1 << (bitmarkParser.OPRANGLEL - 226)) | (1 << (bitmarkParser.OPDANGLE - 226)) | (1 << (bitmarkParser.OPU - 226)) | (1 << (bitmarkParser.OPB - 226)) | (1 << (bitmarkParser.OPQ - 226)) | (1 << (bitmarkParser.OPA - 226)) | (1 << (bitmarkParser.OPS - 226)) | (1 << (bitmarkParser.OPHASH - 226)) | (1 << (bitmarkParser.OPC - 226)) | (1 << (bitmarkParser.COLON - 226)) | (1 << (bitmarkParser.AMP - 226)) | (1 << (bitmarkParser.Greater - 226)) | (1 << (bitmarkParser.Less - 226)) | (1 << (bitmarkParser.RightAngle - 226)) | (1 << (bitmarkParser.RightArrow - 226)) | (1 << (bitmarkParser.DBLEQ - 226)) | (1 << (bitmarkParser.QUOTE_INDEX - 226)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.DCANY - 258)) | (1 << (bitmarkParser.ArticleText - 258)) | (1 << (bitmarkParser.NUMERIC - 258)) | (1 << (bitmarkParser.STRING - 258)) | (1 << (bitmarkParser.NOTBITMARK - 258)) | (1 << (bitmarkParser.ELIPSIS - 258)) | (1 << (bitmarkParser.SENTENCE - 258)) | (1 << (bitmarkParser.BARSTRING - 258)) | (1 << (bitmarkParser.AtProgress - 258)) | (1 << (bitmarkParser.AtReference - 258)) | (1 << (bitmarkParser.AtProgressPoints - 258)) | (1 << (bitmarkParser.AtExampleWithStr - 258)) | (1 << (bitmarkParser.AtExamplecol - 258)) | (1 << (bitmarkParser.AtExamplecl - 258)) | (1 << (bitmarkParser.AtSampleSolution - 258)) | (1 << (bitmarkParser.AtPartialAnswerS - 258)) | (1 << (bitmarkParser.AtPartialAnswer - 258)) | (1 << (bitmarkParser.AtLabeltrue - 258)) | (1 << (bitmarkParser.AtLabelfalse - 258)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (bitmarkParser.OpAtCopyright - 295)) | (1 << (bitmarkParser.OpAtIsTracked - 295)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 295)) | (1 << (bitmarkParser.AtDate - 295)) | (1 << (bitmarkParser.AmpAudio - 295)) | (1 << (bitmarkParser.AmpImage - 295)) | (1 << (bitmarkParser.AmpVideo - 295)) | (1 << (bitmarkParser.AmpArticle - 295)) | (1 << (bitmarkParser.AmpDocument - 295)) | (1 << (bitmarkParser.AmpApp - 295)) | (1 << (bitmarkParser.AmpWebsite - 295)) | (1 << (bitmarkParser.AmpStillImageFilm - 295)) | (1 << (bitmarkParser.OpAmpAudio - 295)) | (1 << (bitmarkParser.OpAmpImage - 295)) | (1 << (bitmarkParser.OpAmpImageZoom - 295)) | (1 << (bitmarkParser.OpAmpVideo - 295)) | (1 << (bitmarkParser.OpAmpArticle - 295)) | (1 << (bitmarkParser.OpAmpDocument - 295)) | (1 << (bitmarkParser.OpAmpApp - 295)) | (1 << (bitmarkParser.OpAmpWebsite - 295)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 295)) | (1 << (bitmarkParser.BracEnclose - 295)) | (1 << (bitmarkParser.AmpAudioLink - 295)) | (1 << (bitmarkParser.AmpImageLink - 295)) | (1 << (bitmarkParser.AmpVideoLink - 295)) | (1 << (bitmarkParser.AmpArticleLink - 295)))) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & ((1 << (bitmarkParser.AmpDocumentLink - 327)) | (1 << (bitmarkParser.AmpAppLink - 327)) | (1 << (bitmarkParser.AmpWebsiteLink - 327)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.OpAmpAudioLink - 327)) | (1 << (bitmarkParser.OpAmpImageLink - 327)) | (1 << (bitmarkParser.OpAmpVideoLink - 327)) | (1 << (bitmarkParser.OpAmpArticleLink - 327)) | (1 << (bitmarkParser.OpAmpDocumentLink - 327)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 327)) | (1 << (bitmarkParser.OpAmpAppLink - 327)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 327)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 327)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 327)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 327)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 327)) | (1 << (bitmarkParser.BitmarkMinus - 327)) | (1 << (bitmarkParser.BitmarkPlus - 327)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 1470;
                            this.bitElem();
                            this.state = 1474;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1471;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1476;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 1481;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1483;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1482;
                                    this.bot_action();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1485;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 99, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 1487;
                this.match(bitmarkParser.HSPL);
                this.state = 1489;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 100, this._ctx)) {
                    case 1:
                        {
                            this.state = 1488;
                            this.footer();
                        }
                        break;
                }
                this.state = 1494;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1491;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1496;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_rating_number() {
        let _localctx = new Bot_action_rating_numberContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, bitmarkParser.RULE_bot_action_rating_number);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1497;
                this.match(bitmarkParser.BitBotActionRatingNumber);
                this.state = 1498;
                this.format();
                this.state = 1499;
                this.match(bitmarkParser.CL);
                this.state = 1503;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1500;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1505;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1515;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (bitmarkParser.OPDOLL - 226)) | (1 << (bitmarkParser.OPRANGLES - 226)) | (1 << (bitmarkParser.OPRANGLEL - 226)) | (1 << (bitmarkParser.OPDANGLE - 226)) | (1 << (bitmarkParser.OPU - 226)) | (1 << (bitmarkParser.OPB - 226)) | (1 << (bitmarkParser.OPQ - 226)) | (1 << (bitmarkParser.OPA - 226)) | (1 << (bitmarkParser.OPS - 226)) | (1 << (bitmarkParser.OPHASH - 226)) | (1 << (bitmarkParser.OPC - 226)) | (1 << (bitmarkParser.COLON - 226)) | (1 << (bitmarkParser.AMP - 226)) | (1 << (bitmarkParser.Greater - 226)) | (1 << (bitmarkParser.Less - 226)) | (1 << (bitmarkParser.RightAngle - 226)) | (1 << (bitmarkParser.RightArrow - 226)) | (1 << (bitmarkParser.DBLEQ - 226)) | (1 << (bitmarkParser.QUOTE_INDEX - 226)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.DCANY - 258)) | (1 << (bitmarkParser.ArticleText - 258)) | (1 << (bitmarkParser.NUMERIC - 258)) | (1 << (bitmarkParser.STRING - 258)) | (1 << (bitmarkParser.NOTBITMARK - 258)) | (1 << (bitmarkParser.ELIPSIS - 258)) | (1 << (bitmarkParser.SENTENCE - 258)) | (1 << (bitmarkParser.BARSTRING - 258)) | (1 << (bitmarkParser.AtProgress - 258)) | (1 << (bitmarkParser.AtReference - 258)) | (1 << (bitmarkParser.AtProgressPoints - 258)) | (1 << (bitmarkParser.AtExampleWithStr - 258)) | (1 << (bitmarkParser.AtExamplecol - 258)) | (1 << (bitmarkParser.AtExamplecl - 258)) | (1 << (bitmarkParser.AtSampleSolution - 258)) | (1 << (bitmarkParser.AtPartialAnswerS - 258)) | (1 << (bitmarkParser.AtPartialAnswer - 258)) | (1 << (bitmarkParser.AtLabeltrue - 258)) | (1 << (bitmarkParser.AtLabelfalse - 258)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (bitmarkParser.OpAtCopyright - 295)) | (1 << (bitmarkParser.OpAtIsTracked - 295)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 295)) | (1 << (bitmarkParser.AtDate - 295)) | (1 << (bitmarkParser.AmpAudio - 295)) | (1 << (bitmarkParser.AmpImage - 295)) | (1 << (bitmarkParser.AmpVideo - 295)) | (1 << (bitmarkParser.AmpArticle - 295)) | (1 << (bitmarkParser.AmpDocument - 295)) | (1 << (bitmarkParser.AmpApp - 295)) | (1 << (bitmarkParser.AmpWebsite - 295)) | (1 << (bitmarkParser.AmpStillImageFilm - 295)) | (1 << (bitmarkParser.OpAmpAudio - 295)) | (1 << (bitmarkParser.OpAmpImage - 295)) | (1 << (bitmarkParser.OpAmpImageZoom - 295)) | (1 << (bitmarkParser.OpAmpVideo - 295)) | (1 << (bitmarkParser.OpAmpArticle - 295)) | (1 << (bitmarkParser.OpAmpDocument - 295)) | (1 << (bitmarkParser.OpAmpApp - 295)) | (1 << (bitmarkParser.OpAmpWebsite - 295)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 295)) | (1 << (bitmarkParser.BracEnclose - 295)) | (1 << (bitmarkParser.AmpAudioLink - 295)) | (1 << (bitmarkParser.AmpImageLink - 295)) | (1 << (bitmarkParser.AmpVideoLink - 295)) | (1 << (bitmarkParser.AmpArticleLink - 295)))) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & ((1 << (bitmarkParser.AmpDocumentLink - 327)) | (1 << (bitmarkParser.AmpAppLink - 327)) | (1 << (bitmarkParser.AmpWebsiteLink - 327)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.OpAmpAudioLink - 327)) | (1 << (bitmarkParser.OpAmpImageLink - 327)) | (1 << (bitmarkParser.OpAmpVideoLink - 327)) | (1 << (bitmarkParser.OpAmpArticleLink - 327)) | (1 << (bitmarkParser.OpAmpDocumentLink - 327)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 327)) | (1 << (bitmarkParser.OpAmpAppLink - 327)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 327)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 327)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 327)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 327)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 327)) | (1 << (bitmarkParser.BitmarkMinus - 327)) | (1 << (bitmarkParser.BitmarkPlus - 327)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 1506;
                            this.bitElem();
                            this.state = 1510;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1507;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1512;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 1517;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1519;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1518;
                                    this.bot_action();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1521;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 105, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 1523;
                this.match(bitmarkParser.HSPL);
                this.state = 1525;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 106, this._ctx)) {
                    case 1:
                        {
                            this.state = 1524;
                            this.footer();
                        }
                        break;
                }
                this.state = 1530;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 107, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1527;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1532;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 107, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_rating_stars() {
        let _localctx = new Bot_action_rating_starsContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, bitmarkParser.RULE_bot_action_rating_stars);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1533;
                this.match(bitmarkParser.BitBotActionRatingStars);
                this.state = 1534;
                this.format();
                this.state = 1535;
                this.match(bitmarkParser.CL);
                this.state = 1539;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1536;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1541;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
                }
                this.state = 1551;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 110, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1542;
                                this.bitElem();
                                this.state = 1546;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1543;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1548;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1553;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 110, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action() {
        let _localctx = new Bot_actionContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, bitmarkParser.RULE_bot_action);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1554;
                this.match(bitmarkParser.HSPL);
                this.state = 1555;
                this.bo_actions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bo_actions() {
        let _localctx = new Bo_actionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, bitmarkParser.RULE_bo_actions);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1570;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1560;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1557;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1562;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1563;
                            this.boacts();
                            this.state = 1567;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 112, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1564;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                }
                                this.state = 1569;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 112, this._ctx);
                            }
                        }
                    }
                    this.state = 1572;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & ((1 << (bitmarkParser.OPB - 232)) | (1 << (bitmarkParser.OPQ - 232)) | (1 << (bitmarkParser.OPA - 232)) | (1 << (bitmarkParser.OPP - 232)) | (1 << (bitmarkParser.OPM - 232)) | (1 << (bitmarkParser.OPS - 232)) | (1 << (bitmarkParser.OPC - 232)) | (1 << (bitmarkParser.COLON - 232)) | (1 << (bitmarkParser.AMP - 232)) | (1 << (bitmarkParser.Greater - 232)) | (1 << (bitmarkParser.Less - 232)) | (1 << (bitmarkParser.RightAngle - 232)) | (1 << (bitmarkParser.RightArrow - 232)) | (1 << (bitmarkParser.DBLEQ - 232)) | (1 << (bitmarkParser.QUOTE_INDEX - 232)))) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & ((1 << (bitmarkParser.NUMERIC - 264)) | (1 << (bitmarkParser.STRING - 264)) | (1 << (bitmarkParser.NL - 264)) | (1 << (bitmarkParser.NOTBITMARK - 264)) | (1 << (bitmarkParser.ELIPSIS - 264)) | (1 << (bitmarkParser.SENTENCE - 264)) | (1 << (bitmarkParser.BARSTRING - 264)) | (1 << (bitmarkParser.AtSampleSolution - 264)) | (1 << (bitmarkParser.OpAtCopyright - 264)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)) | (1 << (bitmarkParser.ENCLBARS - 351)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    boacts() {
        let _localctx = new BoactsContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, bitmarkParser.RULE_boacts);
        try {
            this.state = 1581;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 114, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1574;
                        this.instruction();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1575;
                        this.item();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1576;
                        this.atdef();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1577;
                        this.hint();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1578;
                        this.choice_minus();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1579;
                        this.choice_plus();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1580;
                        this.feedback();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    feedback() {
        let _localctx = new FeedbackContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, bitmarkParser.RULE_feedback);
        try {
            this.state = 1585;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.ENCLBARS:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1583;
                        this.match(bitmarkParser.ENCLBARS);
                    }
                    break;
                case bitmarkParser.S:
                case bitmarkParser.OPS:
                case bitmarkParser.COLON:
                case bitmarkParser.AMP:
                case bitmarkParser.Greater:
                case bitmarkParser.Less:
                case bitmarkParser.RightAngle:
                case bitmarkParser.RightArrow:
                case bitmarkParser.DBLEQ:
                case bitmarkParser.QUOTE_INDEX:
                case bitmarkParser.NUMERIC:
                case bitmarkParser.STRING:
                case bitmarkParser.NOTBITMARK:
                case bitmarkParser.ELIPSIS:
                case bitmarkParser.SENTENCE:
                case bitmarkParser.BARSTRING:
                case bitmarkParser.AmpAudio:
                case bitmarkParser.AmpImage:
                case bitmarkParser.AmpVideo:
                case bitmarkParser.AmpArticle:
                case bitmarkParser.AmpDocument:
                case bitmarkParser.AmpApp:
                case bitmarkParser.AmpWebsite:
                case bitmarkParser.AmpStillImageFilm:
                case bitmarkParser.AmpAudioLink:
                case bitmarkParser.AmpImageLink:
                case bitmarkParser.AmpVideoLink:
                case bitmarkParser.AmpArticleLink:
                case bitmarkParser.AmpDocumentLink:
                case bitmarkParser.AmpAppLink:
                case bitmarkParser.AmpWebsiteLink:
                case bitmarkParser.AmpStillImageFilmLink:
                case bitmarkParser.BitmarkMinus:
                case bitmarkParser.BitmarkPlus:
                case bitmarkParser.URL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1584;
                        this.s_and_w();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    footer() {
        let _localctx = new FooterContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, bitmarkParser.RULE_footer);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1594;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1590;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 1587;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 1592;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 1593;
                                    this.s_and_w();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1596;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bitElem() {
        let _localctx = new BitElemContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, bitmarkParser.RULE_bitElem);
        try {
            this.state = 1630;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 118, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1598;
                        this.match(bitmarkParser.LIST_LINE);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1599;
                        this.match(bitmarkParser.NOTBITMARK);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1600;
                        this.dclines();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1601;
                        this.gap();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1602;
                        this.reference();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1603;
                        this.dateprop();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1604;
                        this.progress();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1605;
                        this.atdef();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1606;
                        this.dollarans();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1607;
                        this.partans();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1608;
                        this.item();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1609;
                        this.title();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 1610;
                        this.instruction();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 1611;
                        this.hint();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 1612;
                        this.s_and_w();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 1613;
                        this.example();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 1614;
                        this.bool_label();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 1615;
                        this.progress_points();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 1616;
                        this.istracked();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 1617;
                        this.isinfoonly();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 1618;
                        this.imagebit();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 1619;
                        this.audiobit();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 1620;
                        this.videobit();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 1621;
                        this.articlebit();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 1622;
                        this.documentbit();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 1623;
                        this.appbit();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 1624;
                        this.websitebit();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 1625;
                        this.stillimagefilmbit();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 1626;
                        this.angleref();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 1627;
                        this.anchor();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(_localctx, 31);
                    {
                        this.state = 1628;
                        this.bracketed_text();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(_localctx, 32);
                    {
                        this.state = 1629;
                        this.sp();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bitElem_noResource() {
        let _localctx = new BitElem_noResourceContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, bitmarkParser.RULE_bitElem_noResource);
        try {
            this.state = 1654;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 119, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1632;
                        this.match(bitmarkParser.LIST_LINE);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1633;
                        this.match(bitmarkParser.NOTBITMARK);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1634;
                        this.dclines();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1635;
                        this.gap();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1636;
                        this.reference();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1637;
                        this.dateprop();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1638;
                        this.progress();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1639;
                        this.atdef();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1640;
                        this.dollarans();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1641;
                        this.partans();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1642;
                        this.item();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1643;
                        this.title();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 1644;
                        this.instruction();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 1645;
                        this.hint();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 1646;
                        this.s_and_w();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 1647;
                        this.example();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 1648;
                        this.bool_label();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 1649;
                        this.progress_points();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 1650;
                        this.angleref();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 1651;
                        this.anchor();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 1652;
                        this.bracketed_text();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 1653;
                        this.sp();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    gap() {
        let _localctx = new GapContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, bitmarkParser.RULE_gap);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1656;
                this.single_gap();
                this.state = 1664;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 121, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 1662;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.OPU:
                                    {
                                        this.state = 1657;
                                        this.single_gap();
                                    }
                                    break;
                                case bitmarkParser.OPB:
                                    {
                                        this.state = 1658;
                                        this.instruction();
                                    }
                                    break;
                                case bitmarkParser.OPQ:
                                    {
                                        this.state = 1659;
                                        this.hint();
                                    }
                                    break;
                                case bitmarkParser.OPC:
                                    {
                                        this.state = 1660;
                                        this.item();
                                    }
                                    break;
                                case bitmarkParser.AtExampleWithStr:
                                case bitmarkParser.AtExamplecol:
                                case bitmarkParser.AtExamplecl:
                                    {
                                        this.state = 1661;
                                        this.example();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                    }
                    this.state = 1666;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 121, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    single_gap() {
        let _localctx = new Single_gapContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, bitmarkParser.RULE_single_gap);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1667;
                this.match(bitmarkParser.OPU);
                this.state = 1671;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 122, this._ctx)) {
                    case 1:
                        {
                            this.state = 1668;
                            this.match(bitmarkParser.NUMERIC);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1669;
                            this.match(bitmarkParser.STRING);
                        }
                        break;
                    case 3:
                        // tslint:disable-next-line:no-empty
                        {
                        }
                        break;
                }
                this.state = 1676;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                    {
                        {
                            this.state = 1673;
                            this.s_and_w();
                        }
                    }
                    this.state = 1678;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1679;
                this.clnsp();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    choice_plus() {
        let _localctx = new Choice_plusContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, bitmarkParser.RULE_choice_plus);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1682;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPC) {
                    {
                        this.state = 1681;
                        this.item();
                    }
                }
                this.state = 1684;
                this.match(bitmarkParser.OPP);
                this.state = 1686;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1685;
                            this.s_and_w();
                        }
                    }
                    this.state = 1688;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                this.state = 1690;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    choice_minus() {
        let _localctx = new Choice_minusContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, bitmarkParser.RULE_choice_minus);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1693;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPC) {
                    {
                        this.state = 1692;
                        this.item();
                    }
                }
                this.state = 1695;
                this.match(bitmarkParser.OPM);
                this.state = 1697;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1696;
                            this.s_and_w();
                        }
                    }
                    this.state = 1699;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                this.state = 1701;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    choice_star() {
        let _localctx = new Choice_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, bitmarkParser.RULE_choice_star);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1704;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPC) {
                    {
                        this.state = 1703;
                        this.item();
                    }
                }
                this.state = 1706;
                this.match(bitmarkParser.OPR);
                this.state = 1708;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1707;
                            this.s_and_w();
                        }
                    }
                    this.state = 1710;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                this.state = 1712;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    essay() {
        let _localctx = new EssayContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, bitmarkParser.RULE_essay);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1714;
                this.match(bitmarkParser.BitEssay);
                this.state = 1715;
                this.format();
                this.state = 1716;
                this.match(bitmarkParser.CL);
                this.state = 1717;
                this.match(bitmarkParser.NL);
                this.state = 1727;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 131, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                {
                                    this.state = 1718;
                                    this.bitElem();
                                }
                                this.state = 1722;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1719;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1724;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1729;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 131, this._ctx);
                }
                this.state = 1739;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 133, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1733;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 1730;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 1735;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                {
                                    this.state = 1736;
                                    this.ml_example();
                                }
                            }
                        }
                    }
                    this.state = 1741;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 133, this._ctx);
                }
                this.state = 1745;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1742;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1747;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
                }
                this.state = 1761;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 137, this._ctx)) {
                    case 1:
                        {
                            this.state = 1748;
                            this.resource();
                            this.state = 1758;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 136, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1752;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1749;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1754;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1755;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1760;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 136, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ml_example() {
        let _localctx = new Ml_exampleContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, bitmarkParser.RULE_ml_example);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1763;
                this.match(bitmarkParser.AtExamplecol);
                this.state = 1771;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                    {
                        this.state = 1765;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.NL) {
                            {
                                this.state = 1764;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1767;
                        this.lines();
                        this.state = 1769;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.NL) {
                            {
                                this.state = 1768;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                }
                this.state = 1773;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partans() {
        let _localctx = new PartansContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, bitmarkParser.RULE_partans);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1775;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AtPartialAnswerS || _la === bitmarkParser.AtPartialAnswer)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource() {
        let _localctx = new ResourceContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, bitmarkParser.RULE_resource);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1777;
                this.bitElem();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    correction() {
        let _localctx = new CorrectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, bitmarkParser.RULE_correction);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1779;
                this.match(bitmarkParser.BitCorrection);
                this.state = 1780;
                this.format();
                this.state = 1781;
                this.match(bitmarkParser.CL);
                this.state = 1782;
                this.match(bitmarkParser.NL);
                this.state = 1792;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1783;
                                this.bitElem();
                                this.state = 1787;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1784;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1789;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1794;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
                }
                this.state = 1798;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.OPP || _la === bitmarkParser.OPM) {
                    {
                        {
                            this.state = 1795;
                            this.corrs();
                        }
                    }
                    this.state = 1800;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1804;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1801;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1806;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
                }
                this.state = 1820;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 147, this._ctx)) {
                    case 1:
                        {
                            this.state = 1807;
                            this.resource();
                            this.state = 1817;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 146, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1811;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1808;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1813;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1814;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1819;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 146, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    corrs() {
        let _localctx = new CorrsContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, bitmarkParser.RULE_corrs);
        try {
            let _alt;
            this.state = 1840;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPM:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1822;
                        this.match(bitmarkParser.OPM);
                        this.state = 1826;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 1823;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 1828;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
                        }
                        this.state = 1829;
                        this.match(bitmarkParser.CL);
                        this.state = 1830;
                        this.match(bitmarkParser.NL);
                    }
                    break;
                case bitmarkParser.OPP:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1831;
                        this.match(bitmarkParser.OPP);
                        this.state = 1835;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 1832;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 1837;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
                        }
                        this.state = 1838;
                        this.match(bitmarkParser.CL);
                        this.state = 1839;
                        this.match(bitmarkParser.NL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mark_() {
        let _localctx = new Mark_Context(this._ctx, this.state);
        this.enterRule(_localctx, 108, bitmarkParser.RULE_mark_);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1842;
                this.match(bitmarkParser.BitMark);
                this.state = 1843;
                this.format();
                this.state = 1844;
                this.match(bitmarkParser.CL);
                this.state = 1845;
                this.match(bitmarkParser.NL);
                this.state = 1858;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 153, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1848;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 151, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 1846;
                                            this.bitElem();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 1847;
                                            this.mark_text();
                                        }
                                        break;
                                }
                                this.state = 1853;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1850;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1855;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1860;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 153, this._ctx);
                }
                this.state = 1864;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 154, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1861;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1866;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 154, this._ctx);
                }
                this.state = 1880;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 157, this._ctx)) {
                    case 1:
                        {
                            this.state = 1867;
                            this.resource();
                            this.state = 1877;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 156, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1871;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1868;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1873;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1874;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1879;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 156, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mark_text() {
        let _localctx = new Mark_textContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, bitmarkParser.RULE_mark_text);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1882;
                this.match(bitmarkParser.OPS);
                this.state = 1883;
                this.s_and_w();
                this.state = 1884;
                this.match(bitmarkParser.CL);
                this.state = 1886;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPAMARK) {
                    {
                        this.state = 1885;
                        this.mark_color();
                    }
                }
                this.state = 1893;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 160, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 1891;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.OPQ:
                                    {
                                        this.state = 1888;
                                        this.hint();
                                    }
                                    break;
                                case bitmarkParser.OPC:
                                    {
                                        this.state = 1889;
                                        this.item();
                                    }
                                    break;
                                case bitmarkParser.OPB:
                                    {
                                        this.state = 1890;
                                        this.instruction();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                    }
                    this.state = 1895;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 160, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mark_color() {
        let _localctx = new Mark_colorContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, bitmarkParser.RULE_mark_color);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1896;
                this.match(bitmarkParser.OPAMARK);
                this.state = 1900;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 1897;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 1902;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1903;
                this.match(bitmarkParser.STRING);
                this.state = 1907;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 1904;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 1909;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1910;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    take_audio() {
        let _localctx = new Take_audioContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, bitmarkParser.RULE_take_audio);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1912;
                this.match(bitmarkParser.BitTakeAudio);
                this.state = 1913;
                this.format();
                this.state = 1914;
                this.match(bitmarkParser.CL);
                this.state = 1915;
                this.match(bitmarkParser.NL);
                this.state = 1925;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1916;
                                this.bitElem();
                                this.state = 1920;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1917;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1922;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1927;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
                }
                this.state = 1931;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1928;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1933;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
                }
                this.state = 1947;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 168, this._ctx)) {
                    case 1:
                        {
                            this.state = 1934;
                            this.resource();
                            this.state = 1944;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 167, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1938;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1935;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1940;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1941;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1946;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 167, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    take_picture() {
        let _localctx = new Take_pictureContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, bitmarkParser.RULE_take_picture);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1949;
                this.match(bitmarkParser.BitTakepic);
                this.state = 1950;
                this.format();
                this.state = 1951;
                this.match(bitmarkParser.CL);
                this.state = 1952;
                this.match(bitmarkParser.NL);
                this.state = 1962;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1953;
                                this.bitElem();
                                this.state = 1957;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1954;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1959;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1964;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
                }
                this.state = 1968;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1965;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1970;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
                }
                this.state = 1984;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 174, this._ctx)) {
                    case 1:
                        {
                            this.state = 1971;
                            this.resource();
                            this.state = 1981;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 173, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1975;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1972;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1977;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1978;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1983;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 173, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    record_audio() {
        let _localctx = new Record_audioContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, bitmarkParser.RULE_record_audio);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1986;
                this.match(bitmarkParser.BitRecaud);
                this.state = 1987;
                this.format();
                this.state = 1988;
                this.match(bitmarkParser.CL);
                this.state = 1989;
                this.match(bitmarkParser.NL);
                this.state = 1999;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 176, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1990;
                                this.bitElem();
                                this.state = 1994;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1991;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1996;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2001;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 176, this._ctx);
                }
                this.state = 2005;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 177, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2002;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2007;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 177, this._ctx);
                }
                this.state = 2021;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 180, this._ctx)) {
                    case 1:
                        {
                            this.state = 2008;
                            this.resource();
                            this.state = 2018;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 179, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 2012;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 2009;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 2014;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 2015;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 2020;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 179, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    preparation_note() {
        let _localctx = new Preparation_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, bitmarkParser.RULE_preparation_note);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2023;
                this.match(bitmarkParser.BitPrepnote);
                this.state = 2024;
                this.format();
                this.state = 2025;
                this.match(bitmarkParser.CL);
                this.state = 2029;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2026;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2031;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
                }
                this.state = 2041;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 183, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2032;
                                this.bitElem();
                                this.state = 2036;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 182, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2033;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2038;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 182, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2043;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 183, this._ctx);
                }
                this.state = 2045;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 184, this._ctx)) {
                    case 1:
                        {
                            this.state = 2044;
                            this.lines();
                        }
                        break;
                }
                this.state = 2050;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 185, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2047;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2052;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 185, this._ctx);
                }
                this.state = 2066;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 188, this._ctx)) {
                    case 1:
                        {
                            this.state = 2053;
                            this.resource();
                            this.state = 2063;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 187, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 2057;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 2054;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 2059;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 2060;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 2065;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 187, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    assignment() {
        let _localctx = new AssignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, bitmarkParser.RULE_assignment);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2068;
                this.match(bitmarkParser.BitAssign);
                this.state = 2069;
                this.format();
                this.state = 2070;
                this.match(bitmarkParser.CL);
                this.state = 2072;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2071;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2074;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 2085;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 191, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2076;
                                this.bitElem();
                                this.state = 2080;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2077;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2082;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2087;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 191, this._ctx);
                }
                this.state = 2089;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 192, this._ctx)) {
                    case 1:
                        {
                            this.state = 2088;
                            this.lines();
                        }
                        break;
                }
                this.state = 2094;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 193, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2091;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2096;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 193, this._ctx);
                }
                this.state = 2110;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 196, this._ctx)) {
                    case 1:
                        {
                            this.state = 2097;
                            this.resource();
                            this.state = 2107;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 2101;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 2098;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 2103;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 2104;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 2109;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    article() {
        let _localctx = new ArticleContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, bitmarkParser.RULE_article);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2112;
                this.match(bitmarkParser.BitArticle);
                this.state = 2113;
                this.format();
                this.state = 2114;
                this.match(bitmarkParser.CL);
                this.state = 2118;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2115;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2120;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
                }
                this.state = 2130;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 199, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2121;
                                this.bitElem();
                                this.state = 2125;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2122;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2127;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2132;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 199, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    statement() {
        let _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, bitmarkParser.RULE_statement);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2133;
                this.match(bitmarkParser.BitStatement);
                this.state = 2134;
                this.format();
                this.state = 2135;
                this.match(bitmarkParser.CL);
                this.state = 2139;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 200, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2136;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2141;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 200, this._ctx);
                }
                this.state = 2151;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2142;
                                this.bitElem();
                                this.state = 2146;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2143;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2148;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2153;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    details() {
        let _localctx = new DetailsContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, bitmarkParser.RULE_details);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2154;
                this.match(bitmarkParser.BitDetails);
                this.state = 2155;
                this.format();
                this.state = 2156;
                this.match(bitmarkParser.CL);
                this.state = 2160;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2157;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2162;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
                }
                this.state = 2172;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 205, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2163;
                                this.bitElem();
                                this.state = 2167;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2164;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2169;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2174;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 205, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sample_solution() {
        let _localctx = new Sample_solutionContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, bitmarkParser.RULE_sample_solution);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2175;
                this.match(bitmarkParser.BitSampleSolution);
                this.state = 2176;
                this.format();
                this.state = 2177;
                this.match(bitmarkParser.CL);
                this.state = 2181;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2178;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2183;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
                }
                this.state = 2193;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 208, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2184;
                                this.bitElem();
                                this.state = 2188;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2185;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2190;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2195;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 208, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    buttoncopytext() {
        let _localctx = new ButtoncopytextContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, bitmarkParser.RULE_buttoncopytext);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2196;
                this.match(bitmarkParser.BitButtonCopytext);
                this.state = 2197;
                this.format();
                this.state = 2198;
                this.match(bitmarkParser.CL);
                this.state = 2202;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2199;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2204;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
                }
                this.state = 2214;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2205;
                                this.bitElem();
                                this.state = 2209;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 210, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2206;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2211;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 210, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2216;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    wbtcontinue() {
        let _localctx = new WbtcontinueContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, bitmarkParser.RULE_wbtcontinue);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2217;
                this.match(bitmarkParser.BitWbtContinue);
                this.state = 2218;
                this.format();
                this.state = 2219;
                this.match(bitmarkParser.CL);
                this.state = 2223;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 212, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2220;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2225;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 212, this._ctx);
                }
                this.state = 2235;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 214, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2226;
                                this.bitElem();
                                this.state = 2230;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2227;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2232;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2237;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 214, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learningpathdetails() {
        let _localctx = new LearningpathdetailsContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, bitmarkParser.RULE_learningpathdetails);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2238;
                this.match(bitmarkParser.BitLearningPathDetails);
                this.state = 2239;
                this.format();
                this.state = 2240;
                this.match(bitmarkParser.CL);
                this.state = 2244;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2241;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2246;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
                }
                this.state = 2256;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 217, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2247;
                                this.bitElem();
                                this.state = 2251;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2248;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2253;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2258;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 217, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    page() {
        let _localctx = new PageContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, bitmarkParser.RULE_page);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2259;
                this.match(bitmarkParser.BitPage);
                this.state = 2260;
                this.format();
                this.state = 2261;
                this.match(bitmarkParser.CL);
                this.state = 2265;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 218, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2262;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2267;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 218, this._ctx);
                }
                this.state = 2277;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 220, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2268;
                                this.bitElem();
                                this.state = 2272;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2269;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2274;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2279;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 220, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    note() {
        let _localctx = new NoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, bitmarkParser.RULE_note);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2280;
                this.match(bitmarkParser.BitNote);
                this.state = 2281;
                this.format();
                this.state = 2282;
                this.match(bitmarkParser.CL);
                this.state = 2286;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 221, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2283;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2288;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 221, this._ctx);
                }
                this.state = 2298;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 223, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2289;
                                this.bitElem();
                                this.state = 2293;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2290;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2295;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2300;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 223, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    info() {
        let _localctx = new InfoContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, bitmarkParser.RULE_info);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2301;
                this.match(bitmarkParser.BitInfo);
                this.state = 2302;
                this.format();
                this.state = 2303;
                this.match(bitmarkParser.CL);
                this.state = 2307;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 224, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2304;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2309;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 224, this._ctx);
                }
                this.state = 2319;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2310;
                                this.bitElem();
                                this.state = 2314;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2311;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2316;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2321;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    warning() {
        let _localctx = new WarningContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, bitmarkParser.RULE_warning);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2322;
                this.match(bitmarkParser.BitWarning);
                this.state = 2323;
                this.format();
                this.state = 2324;
                this.match(bitmarkParser.CL);
                this.state = 2328;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 227, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2325;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2330;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 227, this._ctx);
                }
                this.state = 2340;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2331;
                                this.bitElem();
                                this.state = 2335;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2332;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2337;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2342;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    remark() {
        let _localctx = new RemarkContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, bitmarkParser.RULE_remark);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2343;
                this.match(bitmarkParser.BitRemark);
                this.state = 2344;
                this.format();
                this.state = 2345;
                this.match(bitmarkParser.CL);
                this.state = 2349;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 230, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2346;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2351;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 230, this._ctx);
                }
                this.state = 2361;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2352;
                                this.bitElem();
                                this.state = 2356;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2353;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2358;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2363;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    help() {
        let _localctx = new HelpContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, bitmarkParser.RULE_help);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2364;
                this.match(bitmarkParser.BitHelp);
                this.state = 2365;
                this.format();
                this.state = 2366;
                this.match(bitmarkParser.CL);
                this.state = 2370;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2367;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2372;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
                }
                this.state = 2382;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2373;
                                this.bitElem();
                                this.state = 2377;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2374;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2379;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2384;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    danger() {
        let _localctx = new DangerContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, bitmarkParser.RULE_danger);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2385;
                this.match(bitmarkParser.BitDanger);
                this.state = 2386;
                this.format();
                this.state = 2387;
                this.match(bitmarkParser.CL);
                this.state = 2391;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2388;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2393;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
                }
                this.state = 2403;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 238, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2394;
                                this.bitElem();
                                this.state = 2398;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2395;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2400;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2405;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 238, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bug() {
        let _localctx = new BugContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, bitmarkParser.RULE_bug);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2406;
                this.match(bitmarkParser.BitBug);
                this.state = 2407;
                this.format();
                this.state = 2408;
                this.match(bitmarkParser.CL);
                this.state = 2412;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2409;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2414;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);
                }
                this.state = 2424;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2415;
                                this.bitElem();
                                this.state = 2419;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 240, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2416;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2421;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 240, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2426;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sidenote() {
        let _localctx = new SidenoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, bitmarkParser.RULE_sidenote);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2427;
                this.match(bitmarkParser.BitSidenote);
                this.state = 2428;
                this.format();
                this.state = 2429;
                this.match(bitmarkParser.CL);
                this.state = 2433;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2430;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2435;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
                }
                this.state = 2445;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2436;
                                this.bitElem();
                                this.state = 2440;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2437;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2442;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2447;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stickynote() {
        let _localctx = new StickynoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, bitmarkParser.RULE_stickynote);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2448;
                this.match(bitmarkParser.BitStickynote);
                this.state = 2449;
                this.format();
                this.state = 2450;
                this.match(bitmarkParser.CL);
                this.state = 2454;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2451;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2456;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
                }
                this.state = 2466;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 247, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2457;
                                this.bitElem();
                                this.state = 2461;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2458;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2463;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2468;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 247, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    quote() {
        let _localctx = new QuoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, bitmarkParser.RULE_quote);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2469;
                this.match(bitmarkParser.BitQuote);
                this.state = 2470;
                this.format();
                this.state = 2471;
                this.match(bitmarkParser.CL);
                this.state = 2475;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2472;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2477;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);
                }
                this.state = 2487;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 250, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2478;
                                this.bitElem();
                                this.state = 2482;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2479;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2484;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2489;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 250, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    footnote() {
        let _localctx = new FootnoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, bitmarkParser.RULE_footnote);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2490;
                this.match(bitmarkParser.BitFootnote);
                this.state = 2491;
                this.format();
                this.state = 2492;
                this.match(bitmarkParser.CL);
                this.state = 2496;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2493;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2498;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);
                }
                this.state = 2508;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 253, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2499;
                                this.bitElem();
                                this.state = 2503;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2500;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2505;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2510;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 253, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    hintbit() {
        let _localctx = new HintbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, bitmarkParser.RULE_hintbit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2511;
                this.match(bitmarkParser.BitHint);
                this.state = 2512;
                this.format();
                this.state = 2513;
                this.match(bitmarkParser.CL);
                this.state = 2517;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 254, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2514;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2519;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 254, this._ctx);
                }
                this.state = 2529;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2520;
                                this.bitElem();
                                this.state = 2524;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2521;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2526;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2531;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    examplebit() {
        let _localctx = new ExamplebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, bitmarkParser.RULE_examplebit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2532;
                this.match(bitmarkParser.BitExample);
                this.state = 2533;
                this.format();
                this.state = 2534;
                this.match(bitmarkParser.CL);
                this.state = 2538;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2535;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2540;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
                }
                this.state = 2550;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2541;
                                this.bitElem();
                                this.state = 2545;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2542;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2547;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2552;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_padlet_embed() {
        let _localctx = new Vendor_padlet_embedContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, bitmarkParser.RULE_vendor_padlet_embed);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2553;
                this.match(bitmarkParser.BitVendorPadletEmbed);
                this.state = 2554;
                this.format();
                this.state = 2555;
                this.match(bitmarkParser.CL);
                this.state = 2559;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 260, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2556;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2561;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 260, this._ctx);
                }
                this.state = 2571;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2562;
                                this.bitElem();
                                this.state = 2566;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2563;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2568;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2573;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    scorm() {
        let _localctx = new ScormContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, bitmarkParser.RULE_scorm);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2574;
                this.match(bitmarkParser.BitScorm);
                this.state = 2575;
                this.format();
                this.state = 2576;
                this.match(bitmarkParser.CL);
                this.state = 2580;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2577;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2582;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
                }
                this.state = 2592;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 265, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2583;
                                this.bitElem();
                                this.state = 2587;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2584;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2589;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2594;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 265, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_image() {
        let _localctx = new Bit_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, bitmarkParser.RULE_bit_image);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2595;
                this.match(bitmarkParser.BitImage);
                this.state = 2596;
                this.format2();
                this.state = 2597;
                this.match(bitmarkParser.CL);
                this.state = 2601;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 266, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2598;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2603;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 266, this._ctx);
                }
                this.state = 2613;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2604;
                                this.bitElem();
                                this.state = 2608;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 267, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2605;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2610;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 267, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2615;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imageLink() {
        let _localctx = new Bit_imageLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, bitmarkParser.RULE_bit_imageLink);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2616;
                this.match(bitmarkParser.BitImageLink);
                this.state = 2617;
                this.format2();
                this.state = 2618;
                this.match(bitmarkParser.CL);
                this.state = 2622;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 269, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2619;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2624;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 269, this._ctx);
                }
                this.state = 2634;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2625;
                                this.bitElem();
                                this.state = 2629;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 270, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2626;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2631;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 270, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2636;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imageZoom() {
        let _localctx = new Bit_imageZoomContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, bitmarkParser.RULE_bit_imageZoom);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2637;
                this.match(bitmarkParser.BitImageZoom);
                this.state = 2638;
                this.format2();
                this.state = 2639;
                this.match(bitmarkParser.CL);
                this.state = 2643;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 272, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2640;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2645;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 272, this._ctx);
                }
                this.state = 2655;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2646;
                                this.bitElem();
                                this.state = 2650;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 273, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2647;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2652;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 273, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2657;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imagePrototype() {
        let _localctx = new Bit_imagePrototypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 176, bitmarkParser.RULE_bit_imagePrototype);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2658;
                this.match(bitmarkParser.BitImagePrototype);
                this.state = 2659;
                this.format2();
                this.state = 2660;
                this.match(bitmarkParser.CL);
                this.state = 2664;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 275, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2661;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2666;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 275, this._ctx);
                }
                this.state = 2676;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2667;
                                this.bitElem();
                                this.state = 2671;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 276, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2668;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2673;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 276, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2678;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imageSuperWide() {
        let _localctx = new Bit_imageSuperWideContext(this._ctx, this.state);
        this.enterRule(_localctx, 178, bitmarkParser.RULE_bit_imageSuperWide);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2679;
                this.match(bitmarkParser.BitImageSuperWide);
                this.state = 2680;
                this.format2();
                this.state = 2681;
                this.match(bitmarkParser.CL);
                this.state = 2685;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2682;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2687;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
                }
                this.state = 2697;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 280, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2688;
                                this.bitElem();
                                this.state = 2692;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 279, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2689;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2694;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 279, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2699;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 280, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_audio() {
        let _localctx = new Bit_audioContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, bitmarkParser.RULE_bit_audio);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2700;
                this.match(bitmarkParser.BitAudio);
                this.state = 2701;
                this.format2();
                this.state = 2702;
                this.match(bitmarkParser.CL);
                this.state = 2706;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2703;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2708;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
                }
                this.state = 2718;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2709;
                                this.bitElem();
                                this.state = 2713;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 282, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2710;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2715;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 282, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2720;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_audioLink() {
        let _localctx = new Bit_audioLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, bitmarkParser.RULE_bit_audioLink);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2721;
                this.match(bitmarkParser.BitAudioLink);
                this.state = 2722;
                this.format2();
                this.state = 2723;
                this.match(bitmarkParser.CL);
                this.state = 2727;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 284, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2724;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2729;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 284, this._ctx);
                }
                this.state = 2739;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2730;
                                this.bitElem();
                                this.state = 2734;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2731;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2736;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2741;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_audioEmbed() {
        let _localctx = new Bit_audioEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, bitmarkParser.RULE_bit_audioEmbed);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2742;
                this.match(bitmarkParser.BitAudioEmbed);
                this.state = 2743;
                this.format2();
                this.state = 2744;
                this.match(bitmarkParser.CL);
                this.state = 2748;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 287, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2745;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2750;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 287, this._ctx);
                }
                this.state = 2760;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2751;
                                this.bitElem();
                                this.state = 2755;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 288, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2752;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2757;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 288, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2762;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_video() {
        let _localctx = new Bit_videoContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, bitmarkParser.RULE_bit_video);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2763;
                this.match(bitmarkParser.BitVideo);
                this.state = 2764;
                this.format2();
                this.state = 2765;
                this.match(bitmarkParser.CL);
                this.state = 2769;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 290, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2766;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2771;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 290, this._ctx);
                }
                this.state = 2781;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 292, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2772;
                                this.bitElem();
                                this.state = 2776;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2773;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2778;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2783;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 292, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoLink() {
        let _localctx = new Bit_videoLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, bitmarkParser.RULE_bit_videoLink);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2784;
                this.match(bitmarkParser.BitVideoLink);
                this.state = 2785;
                this.format2();
                this.state = 2786;
                this.match(bitmarkParser.CL);
                this.state = 2790;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 293, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2787;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2792;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 293, this._ctx);
                }
                this.state = 2802;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2793;
                                this.bitElem();
                                this.state = 2797;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2794;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2799;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2804;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoEmbed() {
        let _localctx = new Bit_videoEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, bitmarkParser.RULE_bit_videoEmbed);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2805;
                this.match(bitmarkParser.BitVideoEmbed);
                this.state = 2806;
                this.format2();
                this.state = 2807;
                this.match(bitmarkParser.CL);
                this.state = 2811;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 296, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2808;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2813;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 296, this._ctx);
                }
                this.state = 2823;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2814;
                                this.bitElem();
                                this.state = 2818;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2815;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2820;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2825;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoPortrait() {
        let _localctx = new Bit_videoPortraitContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, bitmarkParser.RULE_bit_videoPortrait);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2826;
                this.match(bitmarkParser.BitVideoPortrait);
                this.state = 2827;
                this.format2();
                this.state = 2828;
                this.match(bitmarkParser.CL);
                this.state = 2832;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2829;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2834;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
                }
                this.state = 2844;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2835;
                                this.bitElem();
                                this.state = 2839;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2836;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2841;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2846;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoLandscape() {
        let _localctx = new Bit_videoLandscapeContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, bitmarkParser.RULE_bit_videoLandscape);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2847;
                this.match(bitmarkParser.BitVideoLandscape);
                this.state = 2848;
                this.format2();
                this.state = 2849;
                this.match(bitmarkParser.CL);
                this.state = 2853;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2850;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2855;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
                }
                this.state = 2865;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 304, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2856;
                                this.bitElem();
                                this.state = 2860;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2857;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2862;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2867;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 304, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_stillImageFilm() {
        let _localctx = new Bit_stillImageFilmContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, bitmarkParser.RULE_bit_stillImageFilm);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2868;
                this.match(bitmarkParser.BitStillImageFilm);
                this.state = 2869;
                this.format2();
                this.state = 2870;
                this.match(bitmarkParser.CL);
                this.state = 2874;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2871;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2876;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
                }
                this.state = 2886;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2877;
                                this.bitElem();
                                this.state = 2881;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2878;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2883;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2888;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_stillImageFilmLink() {
        let _localctx = new Bit_stillImageFilmLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, bitmarkParser.RULE_bit_stillImageFilmLink);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2889;
                this.match(bitmarkParser.BitStillImageFilmLink);
                this.state = 2890;
                this.format2();
                this.state = 2891;
                this.match(bitmarkParser.CL);
                this.state = 2895;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2892;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2897;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
                }
                this.state = 2907;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 310, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2898;
                                this.bitElem();
                                this.state = 2902;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2899;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2904;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2909;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 310, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_stillImageFilmEmbed() {
        let _localctx = new Bit_stillImageFilmEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 200, bitmarkParser.RULE_bit_stillImageFilmEmbed);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2910;
                this.match(bitmarkParser.BitStillImageFilmEmbed);
                this.state = 2911;
                this.format2();
                this.state = 2912;
                this.match(bitmarkParser.CL);
                this.state = 2916;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2913;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2918;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);
                }
                this.state = 2928;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2919;
                                this.bitElem();
                                this.state = 2923;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2920;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2925;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2930;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_websiteLink() {
        let _localctx = new Bit_websiteLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, bitmarkParser.RULE_bit_websiteLink);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2931;
                this.match(bitmarkParser.BitWebsiteLink);
                this.state = 2932;
                this.format2();
                this.state = 2933;
                this.match(bitmarkParser.CL);
                this.state = 2937;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 314, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2934;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2939;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 314, this._ctx);
                }
                this.state = 2949;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2940;
                                this.bitElem();
                                this.state = 2944;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2941;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2946;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2951;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_document() {
        let _localctx = new Bit_documentContext(this._ctx, this.state);
        this.enterRule(_localctx, 204, bitmarkParser.RULE_bit_document);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2952;
                this.match(bitmarkParser.BitDocument);
                this.state = 2953;
                this.format2();
                this.state = 2954;
                this.match(bitmarkParser.CL);
                this.state = 2958;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2955;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2960;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
                }
                this.state = 2970;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2961;
                                this.bitElem();
                                this.state = 2965;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2962;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2967;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2972;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_documentLink() {
        let _localctx = new Bit_documentLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 206, bitmarkParser.RULE_bit_documentLink);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2973;
                this.match(bitmarkParser.BitDocumentLink);
                this.state = 2974;
                this.format2();
                this.state = 2975;
                this.match(bitmarkParser.CL);
                this.state = 2979;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 320, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2976;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 2981;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 320, this._ctx);
                }
                this.state = 2991;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2982;
                                this.bitElem();
                                this.state = 2986;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 2983;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 2988;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 2993;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_documentEmbed() {
        let _localctx = new Bit_documentEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 208, bitmarkParser.RULE_bit_documentEmbed);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2994;
                this.match(bitmarkParser.BitDocumentEmbed);
                this.state = 2995;
                this.format2();
                this.state = 2996;
                this.match(bitmarkParser.CL);
                this.state = 3000;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 323, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2997;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3002;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 323, this._ctx);
                }
                this.state = 3012;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 325, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3003;
                                this.bitElem();
                                this.state = 3007;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3004;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3009;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3014;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 325, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_documentDownload() {
        let _localctx = new Bit_documentDownloadContext(this._ctx, this.state);
        this.enterRule(_localctx, 210, bitmarkParser.RULE_bit_documentDownload);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3015;
                this.match(bitmarkParser.BitDocumentDownload);
                this.state = 3016;
                this.format2();
                this.state = 3017;
                this.match(bitmarkParser.CL);
                this.state = 3021;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 326, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3018;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3023;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 326, this._ctx);
                }
                this.state = 3033;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3024;
                                this.bitElem();
                                this.state = 3028;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3025;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3030;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3035;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_appLink() {
        let _localctx = new Bit_appLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 212, bitmarkParser.RULE_bit_appLink);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3036;
                this.match(bitmarkParser.BitAppLink);
                this.state = 3037;
                this.format2();
                this.state = 3038;
                this.match(bitmarkParser.CL);
                this.state = 3042;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 329, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3039;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3044;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 329, this._ctx);
                }
                this.state = 3054;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 331, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3045;
                                this.bitElem();
                                this.state = 3049;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3046;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3051;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3056;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 331, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_editorial() {
        let _localctx = new Bit_editorialContext(this._ctx, this.state);
        this.enterRule(_localctx, 214, bitmarkParser.RULE_bit_editorial);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3057;
                this.match(bitmarkParser.BitEditorial);
                this.state = 3058;
                this.format2();
                this.state = 3059;
                this.match(bitmarkParser.CL);
                this.state = 3063;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3060;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3065;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
                }
                this.state = 3075;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 334, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3066;
                                this.bitElem();
                                this.state = 3070;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3067;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3072;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3077;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 334, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_frontispiece() {
        let _localctx = new Book_frontispieceContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, bitmarkParser.RULE_book_frontispiece);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3078;
                this.match(bitmarkParser.BitBookFrontispiece);
                this.state = 3079;
                this.format();
                this.state = 3080;
                this.match(bitmarkParser.CL);
                this.state = 3084;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3081;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3086;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
                }
                this.state = 3096;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3087;
                                this.bitElem();
                                this.state = 3091;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 336, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3088;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3093;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 336, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3098;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_title() {
        let _localctx = new Book_titleContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, bitmarkParser.RULE_book_title);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3099;
                this.match(bitmarkParser.BitBookTitle);
                this.state = 3100;
                this.format();
                this.state = 3101;
                this.match(bitmarkParser.CL);
                this.state = 3105;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 338, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3102;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3107;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 338, this._ctx);
                }
                this.state = 3117;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 340, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3108;
                                this.bitElem();
                                this.state = 3112;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3109;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3114;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3119;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 340, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_copyright() {
        let _localctx = new Book_copyrightContext(this._ctx, this.state);
        this.enterRule(_localctx, 220, bitmarkParser.RULE_book_copyright);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3120;
                this.match(bitmarkParser.BitBookCopyright);
                this.state = 3121;
                this.format();
                this.state = 3122;
                this.match(bitmarkParser.CL);
                this.state = 3126;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3123;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3128;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
                }
                this.state = 3138;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3129;
                                this.bitElem();
                                this.state = 3133;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3130;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3135;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3140;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_dedication() {
        let _localctx = new Book_dedicationContext(this._ctx, this.state);
        this.enterRule(_localctx, 222, bitmarkParser.RULE_book_dedication);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3141;
                this.match(bitmarkParser.BitBookDedication);
                this.state = 3142;
                this.format();
                this.state = 3143;
                this.match(bitmarkParser.CL);
                this.state = 3147;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3144;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3149;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
                }
                this.state = 3159;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3150;
                                this.bitElem();
                                this.state = 3154;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3151;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3156;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3161;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_forword() {
        let _localctx = new Book_forwordContext(this._ctx, this.state);
        this.enterRule(_localctx, 224, bitmarkParser.RULE_book_forword);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3162;
                this.match(bitmarkParser.BitBookForword);
                this.state = 3163;
                this.format();
                this.state = 3164;
                this.match(bitmarkParser.CL);
                this.state = 3168;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3165;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3170;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
                }
                this.state = 3180;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 349, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3171;
                                this.bitElem();
                                this.state = 3175;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3172;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3177;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3182;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 349, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_preface() {
        let _localctx = new Book_prefaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, bitmarkParser.RULE_book_preface);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3183;
                this.match(bitmarkParser.BitBookPreface);
                this.state = 3184;
                this.format();
                this.state = 3185;
                this.match(bitmarkParser.CL);
                this.state = 3189;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 350, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3186;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3191;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 350, this._ctx);
                }
                this.state = 3201;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3192;
                                this.bitElem();
                                this.state = 3196;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 351, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3193;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3198;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 351, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3203;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_prologue() {
        let _localctx = new Book_prologueContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, bitmarkParser.RULE_book_prologue);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3204;
                this.match(bitmarkParser.BitBookPrologue);
                this.state = 3205;
                this.format();
                this.state = 3206;
                this.match(bitmarkParser.CL);
                this.state = 3210;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3207;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3212;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
                }
                this.state = 3222;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 355, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3213;
                                this.bitElem();
                                this.state = 3217;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3214;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3219;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3224;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 355, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_epilogue() {
        let _localctx = new Book_epilogueContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, bitmarkParser.RULE_book_epilogue);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3225;
                this.match(bitmarkParser.BitBookEpilogue);
                this.state = 3226;
                this.format();
                this.state = 3227;
                this.match(bitmarkParser.CL);
                this.state = 3231;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 356, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3228;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3233;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 356, this._ctx);
                }
                this.state = 3243;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3234;
                                this.bitElem();
                                this.state = 3238;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3235;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3240;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3245;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_introduction() {
        let _localctx = new Book_introductionContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, bitmarkParser.RULE_book_introduction);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3246;
                this.match(bitmarkParser.BitBookIntroduction);
                this.state = 3247;
                this.format();
                this.state = 3248;
                this.match(bitmarkParser.CL);
                this.state = 3252;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 359, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3249;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3254;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 359, this._ctx);
                }
                this.state = 3264;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3255;
                                this.bitElem();
                                this.state = 3259;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 360, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3256;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3261;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 360, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3266;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_inciting_incident() {
        let _localctx = new Book_inciting_incidentContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, bitmarkParser.RULE_book_inciting_incident);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3267;
                this.match(bitmarkParser.BitBookIncitingIncident);
                this.state = 3268;
                this.format();
                this.state = 3269;
                this.match(bitmarkParser.CL);
                this.state = 3273;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3270;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3275;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
                }
                this.state = 3285;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3276;
                                this.bitElem();
                                this.state = 3280;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3277;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3282;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3287;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_conclusion() {
        let _localctx = new Book_conclusionContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, bitmarkParser.RULE_book_conclusion);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3288;
                this.match(bitmarkParser.BitBookConclusion);
                this.state = 3289;
                this.format();
                this.state = 3290;
                this.match(bitmarkParser.CL);
                this.state = 3294;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 365, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3291;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3296;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 365, this._ctx);
                }
                this.state = 3306;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3297;
                                this.bitElem();
                                this.state = 3301;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 366, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3298;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3303;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 366, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3308;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_afterword() {
        let _localctx = new Book_afterwordContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, bitmarkParser.RULE_book_afterword);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3309;
                this.match(bitmarkParser.BitBookAfterword);
                this.state = 3310;
                this.format();
                this.state = 3311;
                this.match(bitmarkParser.CL);
                this.state = 3315;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 368, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3312;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3317;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 368, this._ctx);
                }
                this.state = 3327;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3318;
                                this.bitElem();
                                this.state = 3322;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3319;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3324;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3329;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_postscript() {
        let _localctx = new Book_postscriptContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, bitmarkParser.RULE_book_postscript);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3330;
                this.match(bitmarkParser.BitBookPostscript);
                this.state = 3331;
                this.format();
                this.state = 3332;
                this.match(bitmarkParser.CL);
                this.state = 3336;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 371, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3333;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3338;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 371, this._ctx);
                }
                this.state = 3348;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 373, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3339;
                                this.bitElem();
                                this.state = 3343;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3340;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3345;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3350;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 373, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_appendix() {
        let _localctx = new Book_appendixContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, bitmarkParser.RULE_book_appendix);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3351;
                this.match(bitmarkParser.BitBookappendix);
                this.state = 3352;
                this.format();
                this.state = 3353;
                this.match(bitmarkParser.CL);
                this.state = 3357;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 374, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3354;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3359;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 374, this._ctx);
                }
                this.state = 3369;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 376, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3360;
                                this.bitElem();
                                this.state = 3364;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 375, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3361;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3366;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 375, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3371;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 376, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_addendum() {
        let _localctx = new Book_addendumContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, bitmarkParser.RULE_book_addendum);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3372;
                this.match(bitmarkParser.BitBookAddendum);
                this.state = 3373;
                this.format();
                this.state = 3374;
                this.match(bitmarkParser.CL);
                this.state = 3378;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3375;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3380;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
                }
                this.state = 3390;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 379, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3381;
                                this.bitElem();
                                this.state = 3385;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3382;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3387;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3392;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 379, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_acknowledgments() {
        let _localctx = new Book_acknowledgmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, bitmarkParser.RULE_book_acknowledgments);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3393;
                this.match(bitmarkParser.BitBookAcknowledgments);
                this.state = 3394;
                this.format();
                this.state = 3395;
                this.match(bitmarkParser.CL);
                this.state = 3399;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3396;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3401;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
                }
                this.state = 3411;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3402;
                                this.bitElem();
                                this.state = 3406;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3403;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3408;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3413;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_list_of_contributors() {
        let _localctx = new Book_list_of_contributorsContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, bitmarkParser.RULE_book_list_of_contributors);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3414;
                this.match(bitmarkParser.BitBookListOfContributors);
                this.state = 3415;
                this.format();
                this.state = 3416;
                this.match(bitmarkParser.CL);
                this.state = 3420;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3417;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3422;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
                }
                this.state = 3432;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3423;
                                this.bitElem();
                                this.state = 3427;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3424;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3429;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3434;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_bibliography() {
        let _localctx = new Book_bibliographyContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, bitmarkParser.RULE_book_bibliography);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3435;
                this.match(bitmarkParser.BitBookBibliography);
                this.state = 3436;
                this.format();
                this.state = 3437;
                this.match(bitmarkParser.CL);
                this.state = 3441;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 386, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3438;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3443;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 386, this._ctx);
                }
                this.state = 3453;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3444;
                                this.bitElem();
                                this.state = 3448;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3445;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3450;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3455;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_reference_list() {
        let _localctx = new Book_reference_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, bitmarkParser.RULE_book_reference_list);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3456;
                this.match(bitmarkParser.BitBookReferenceList);
                this.state = 3457;
                this.format();
                this.state = 3458;
                this.match(bitmarkParser.CL);
                this.state = 3462;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 389, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3459;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3464;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 389, this._ctx);
                }
                this.state = 3474;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3465;
                                this.bitElem();
                                this.state = 3469;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 390, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3466;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3471;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 390, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3476;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_endnotes() {
        let _localctx = new Book_endnotesContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, bitmarkParser.RULE_book_endnotes);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3477;
                this.match(bitmarkParser.BitBookEndnotes);
                this.state = 3478;
                this.format();
                this.state = 3479;
                this.match(bitmarkParser.CL);
                this.state = 3483;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3480;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3485;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
                }
                this.state = 3495;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3486;
                                this.bitElem();
                                this.state = 3490;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3487;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3492;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3497;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_notes() {
        let _localctx = new Book_notesContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, bitmarkParser.RULE_book_notes);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3498;
                this.match(bitmarkParser.BitBookNotes);
                this.state = 3499;
                this.format();
                this.state = 3500;
                this.match(bitmarkParser.CL);
                this.state = 3504;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 395, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3501;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3506;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 395, this._ctx);
                }
                this.state = 3516;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3507;
                                this.bitElem();
                                this.state = 3511;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3508;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3513;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3518;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_copyright_permissions() {
        let _localctx = new Book_copyright_permissionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, bitmarkParser.RULE_book_copyright_permissions);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3519;
                this.match(bitmarkParser.BitBookCopyrightPermissions);
                this.state = 3520;
                this.format();
                this.state = 3521;
                this.match(bitmarkParser.CL);
                this.state = 3525;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3522;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3527;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
                }
                this.state = 3537;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3528;
                                this.bitElem();
                                this.state = 3532;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3529;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3534;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3539;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_teaser() {
        let _localctx = new Book_teaserContext(this._ctx, this.state);
        this.enterRule(_localctx, 260, bitmarkParser.RULE_book_teaser);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3540;
                this.match(bitmarkParser.BitBookTeaser);
                this.state = 3541;
                this.format();
                this.state = 3542;
                this.match(bitmarkParser.CL);
                this.state = 3546;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 401, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3543;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3548;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 401, this._ctx);
                }
                this.state = 3558;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3549;
                                this.bitElem();
                                this.state = 3553;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3550;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3555;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3560;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_auther_bio() {
        let _localctx = new Book_auther_bioContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, bitmarkParser.RULE_book_auther_bio);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3561;
                this.match(bitmarkParser.BitBookAutherBio);
                this.state = 3562;
                this.format();
                this.state = 3563;
                this.match(bitmarkParser.CL);
                this.state = 3567;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3564;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3569;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
                }
                this.state = 3579;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3570;
                                this.bitElem();
                                this.state = 3574;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3571;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3576;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3581;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_request_for_a_book_review() {
        let _localctx = new Book_request_for_a_book_reviewContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, bitmarkParser.RULE_book_request_for_a_book_review);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3582;
                this.match(bitmarkParser.BitBookRequestForABookReview);
                this.state = 3583;
                this.format();
                this.state = 3584;
                this.match(bitmarkParser.CL);
                this.state = 3588;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3585;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3590;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
                }
                this.state = 3600;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 409, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3591;
                                this.bitElem();
                                this.state = 3595;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3592;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3597;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3602;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 409, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_coming_soon() {
        let _localctx = new Book_coming_soonContext(this._ctx, this.state);
        this.enterRule(_localctx, 266, bitmarkParser.RULE_book_coming_soon);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3603;
                this.match(bitmarkParser.BitBookComingSoon);
                this.state = 3604;
                this.format();
                this.state = 3605;
                this.match(bitmarkParser.CL);
                this.state = 3609;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3606;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3611;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
                }
                this.state = 3621;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 412, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3612;
                                this.bitElem();
                                this.state = 3616;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3613;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3618;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3623;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 412, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_read_more() {
        let _localctx = new Book_read_moreContext(this._ctx, this.state);
        this.enterRule(_localctx, 268, bitmarkParser.RULE_book_read_more);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3624;
                this.match(bitmarkParser.BitBookReadMore);
                this.state = 3625;
                this.format();
                this.state = 3626;
                this.match(bitmarkParser.CL);
                this.state = 3630;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3627;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3632;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
                }
                this.state = 3642;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3633;
                                this.bitElem();
                                this.state = 3637;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 414, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3634;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3639;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 414, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3644;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_summary() {
        let _localctx = new Book_summaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, bitmarkParser.RULE_book_summary);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3645;
                this.match(bitmarkParser.BitBookSummary);
                this.state = 3646;
                this.format();
                this.state = 3647;
                this.match(bitmarkParser.CL);
                this.state = 3651;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3648;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3653;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
                }
                this.state = 3663;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3654;
                                this.bitElem();
                                this.state = 3658;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3655;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3660;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3665;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_epigraph() {
        let _localctx = new Book_epigraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, bitmarkParser.RULE_book_epigraph);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3666;
                this.match(bitmarkParser.BitBookEpigraph);
                this.state = 3667;
                this.format();
                this.state = 3668;
                this.match(bitmarkParser.CL);
                this.state = 3672;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3669;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3674;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
                }
                this.state = 3684;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3675;
                                this.bitElem();
                                this.state = 3679;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3676;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3681;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3686;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    code() {
        let _localctx = new CodeContext(this._ctx, this.state);
        this.enterRule(_localctx, 274, bitmarkParser.RULE_code);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3687;
                this.match(bitmarkParser.BitCode);
                this.state = 3688;
                this.format();
                this.state = 3689;
                this.match(bitmarkParser.CL);
                this.state = 3693;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 422, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3690;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3695;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 422, this._ctx);
                }
                this.state = 3705;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3696;
                                this.bitElem();
                                this.state = 3700;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3697;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3702;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3707;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    card1() {
        let _localctx = new Card1Context(this._ctx, this.state);
        this.enterRule(_localctx, 276, bitmarkParser.RULE_card1);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3708;
                this.match(bitmarkParser.BitCard1);
                this.state = 3709;
                this.format();
                this.state = 3710;
                this.match(bitmarkParser.CL);
                this.state = 3714;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 425, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3711;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3716;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 425, this._ctx);
                }
                this.state = 3726;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 427, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3717;
                                this.bitElem();
                                this.state = 3721;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3718;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3723;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3728;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 427, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    question1() {
        let _localctx = new Question1Context(this._ctx, this.state);
        this.enterRule(_localctx, 278, bitmarkParser.RULE_question1);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3729;
                this.match(bitmarkParser.BitQuestion1);
                this.state = 3730;
                this.format();
                this.state = 3731;
                this.match(bitmarkParser.CL);
                this.state = 3735;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 428, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3732;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3737;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 428, this._ctx);
                }
                this.state = 3747;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3738;
                                this.bitElem();
                                this.state = 3742;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 429, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3739;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3744;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 429, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3749;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    screenshot() {
        let _localctx = new ScreenshotContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, bitmarkParser.RULE_screenshot);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3750;
                this.match(bitmarkParser.BitScreenshot);
                this.state = 3751;
                this.format2();
                this.state = 3752;
                this.match(bitmarkParser.CL);
                this.state = 3756;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 431, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3753;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3758;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 431, this._ctx);
                }
                this.state = 3768;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3759;
                                this.bitElem();
                                this.state = 3763;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3760;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3765;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3770;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    focus_image() {
        let _localctx = new Focus_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, bitmarkParser.RULE_focus_image);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3771;
                this.match(bitmarkParser.BitFocusImage);
                this.state = 3772;
                this.format2();
                this.state = 3773;
                this.match(bitmarkParser.CL);
                this.state = 3777;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3774;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3779;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
                }
                this.state = 3789;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 436, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3780;
                                this.bitElem();
                                this.state = 3784;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3781;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3786;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3791;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 436, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    photo() {
        let _localctx = new PhotoContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, bitmarkParser.RULE_photo);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3792;
                this.match(bitmarkParser.BitPhoto);
                this.state = 3793;
                this.format2();
                this.state = 3794;
                this.match(bitmarkParser.CL);
                this.state = 3798;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3795;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3800;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
                }
                this.state = 3810;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 439, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3801;
                                this.bitElem();
                                this.state = 3805;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3802;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3807;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3812;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 439, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    browser_image() {
        let _localctx = new Browser_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, bitmarkParser.RULE_browser_image);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3813;
                this.match(bitmarkParser.BitBrowserImage);
                this.state = 3814;
                this.format2();
                this.state = 3815;
                this.match(bitmarkParser.CL);
                this.state = 3819;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3816;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3821;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
                }
                this.state = 3831;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 442, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3822;
                                this.bitElem();
                                this.state = 3826;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3823;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3828;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3833;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 442, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    chapter_subject_matter() {
        let _localctx = new Chapter_subject_matterContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, bitmarkParser.RULE_chapter_subject_matter);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3834;
                this.match(bitmarkParser.BitChapterSubjectMatter);
                this.state = 3835;
                this.format();
                this.state = 3836;
                this.match(bitmarkParser.CL);
                this.state = 3840;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3837;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3842;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
                }
                this.state = 3852;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 445, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3843;
                                this.bitElem();
                                this.state = 3847;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 444, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3844;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3849;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 444, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3854;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 445, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    release_note() {
        let _localctx = new Release_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, bitmarkParser.RULE_release_note);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3855;
                this.match(bitmarkParser.BitReleaseNote);
                this.state = 3856;
                this.format();
                this.state = 3857;
                this.match(bitmarkParser.CL);
                this.state = 3861;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3858;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3863;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
                }
                this.state = 3873;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3864;
                                this.bitElem();
                                this.state = 3868;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 447, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3865;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3870;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 447, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3875;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    conclusion() {
        let _localctx = new ConclusionContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, bitmarkParser.RULE_conclusion);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3876;
                this.match(bitmarkParser.BitConclusion);
                this.state = 3877;
                this.format();
                this.state = 3878;
                this.match(bitmarkParser.CL);
                this.state = 3882;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3879;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3884;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
                }
                this.state = 3894;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 451, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3885;
                                this.bitElem();
                                this.state = 3889;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 450, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3886;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3891;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 450, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3896;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 451, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    featured() {
        let _localctx = new FeaturedContext(this._ctx, this.state);
        this.enterRule(_localctx, 294, bitmarkParser.RULE_featured);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3897;
                this.match(bitmarkParser.BitFeatured);
                this.state = 3898;
                this.format();
                this.state = 3899;
                this.match(bitmarkParser.CL);
                this.state = 3903;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3900;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3905;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
                }
                this.state = 3915;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3906;
                                this.bitElem();
                                this.state = 3910;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 453, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3907;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3912;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 453, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3917;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_amcharts_5_chart() {
        let _localctx = new Vendor_amcharts_5_chartContext(this._ctx, this.state);
        this.enterRule(_localctx, 296, bitmarkParser.RULE_vendor_amcharts_5_chart);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3918;
                this.match(bitmarkParser.BitVendorAmcharts5Chart);
                this.state = 3919;
                this.format2();
                this.state = 3920;
                this.match(bitmarkParser.CL);
                this.state = 3924;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 455, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3921;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3926;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 455, this._ctx);
                }
                this.state = 3936;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 457, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3927;
                                this.bitElem();
                                this.state = 3931;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3928;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3933;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3938;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 457, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    newspaper_article() {
        let _localctx = new Newspaper_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 298, bitmarkParser.RULE_newspaper_article);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3939;
                this.match(bitmarkParser.BitNewspaperArticle);
                this.state = 3940;
                this.format();
                this.state = 3941;
                this.match(bitmarkParser.CL);
                this.state = 3945;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3942;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3947;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
                }
                this.state = 3957;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3948;
                                this.bitElem();
                                this.state = 3952;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 459, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3949;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3954;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 459, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3959;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    blog_article() {
        let _localctx = new Blog_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 300, bitmarkParser.RULE_blog_article);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3960;
                this.match(bitmarkParser.BitBlogArticle);
                this.state = 3961;
                this.format();
                this.state = 3962;
                this.match(bitmarkParser.CL);
                this.state = 3966;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 461, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3963;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3968;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 461, this._ctx);
                }
                this.state = 3978;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 463, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3969;
                                this.bitElem();
                                this.state = 3973;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 462, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3970;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3975;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 462, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 3980;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 463, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_article() {
        let _localctx = new Book_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 302, bitmarkParser.RULE_book_article);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3981;
                this.match(bitmarkParser.BitBookArticle);
                this.state = 3982;
                this.format();
                this.state = 3983;
                this.match(bitmarkParser.CL);
                this.state = 3987;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 464, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3984;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3989;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 464, this._ctx);
                }
                this.state = 3999;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 466, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3990;
                                this.bitElem();
                                this.state = 3994;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 465, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 3991;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 3996;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 465, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4001;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 466, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    notebook_article() {
        let _localctx = new Notebook_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 304, bitmarkParser.RULE_notebook_article);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4002;
                this.match(bitmarkParser.BitNotebookArticle);
                this.state = 4003;
                this.format();
                this.state = 4004;
                this.match(bitmarkParser.CL);
                this.state = 4008;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 467, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4005;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4010;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 467, this._ctx);
                }
                this.state = 4020;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4011;
                                this.bitElem();
                                this.state = 4015;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4012;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4017;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4022;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    workbook_article() {
        let _localctx = new Workbook_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 306, bitmarkParser.RULE_workbook_article);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4023;
                this.match(bitmarkParser.BitWorkbookArticle);
                this.state = 4024;
                this.format();
                this.state = 4025;
                this.match(bitmarkParser.CL);
                this.state = 4029;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4026;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4031;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
                }
                this.state = 4041;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 472, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4032;
                                this.bitElem();
                                this.state = 4036;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4033;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4038;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4043;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 472, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    release_notes_summary() {
        let _localctx = new Release_notes_summaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 308, bitmarkParser.RULE_release_notes_summary);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4044;
                this.match(bitmarkParser.BitReleaseNotesSummary);
                this.state = 4045;
                this.format();
                this.state = 4046;
                this.match(bitmarkParser.CL);
                this.state = 4050;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 473, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4047;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4052;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 473, this._ctx);
                }
                this.state = 4062;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 475, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4053;
                                this.bitElem();
                                this.state = 4057;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 474, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4054;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4059;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 474, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4064;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 475, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    message() {
        let _localctx = new MessageContext(this._ctx, this.state);
        this.enterRule(_localctx, 310, bitmarkParser.RULE_message);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4065;
                this.match(bitmarkParser.BitMessage);
                this.state = 4066;
                this.format();
                this.state = 4067;
                this.match(bitmarkParser.CL);
                this.state = 4071;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 476, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4068;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4073;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 476, this._ctx);
                }
                this.state = 4083;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 478, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4074;
                                this.bitElem();
                                this.state = 4078;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4075;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4080;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4085;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 478, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_preparation() {
        let _localctx = new Cook_preparationContext(this._ctx, this.state);
        this.enterRule(_localctx, 312, bitmarkParser.RULE_cook_preparation);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4086;
                this.match(bitmarkParser.BitCookPreparation);
                this.state = 4087;
                this.format();
                this.state = 4088;
                this.match(bitmarkParser.CL);
                this.state = 4092;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 479, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4089;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4094;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 479, this._ctx);
                }
                this.state = 4104;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 481, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4095;
                                this.bitElem();
                                this.state = 4099;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 480, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4096;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4101;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 480, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4106;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 481, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_step() {
        let _localctx = new Cook_stepContext(this._ctx, this.state);
        this.enterRule(_localctx, 314, bitmarkParser.RULE_cook_step);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4107;
                this.match(bitmarkParser.BitCookStep);
                this.state = 4108;
                this.format();
                this.state = 4109;
                this.match(bitmarkParser.CL);
                this.state = 4113;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 482, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4110;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4115;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 482, this._ctx);
                }
                this.state = 4125;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 484, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4116;
                                this.bitElem();
                                this.state = 4120;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 483, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4117;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4122;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 483, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4127;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 484, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_ingredients() {
        let _localctx = new Cook_ingredientsContext(this._ctx, this.state);
        this.enterRule(_localctx, 316, bitmarkParser.RULE_cook_ingredients);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4128;
                this.match(bitmarkParser.BitCookIngredients);
                this.state = 4129;
                this.format();
                this.state = 4130;
                this.match(bitmarkParser.CL);
                this.state = 4134;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 485, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4131;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4136;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 485, this._ctx);
                }
                this.state = 4146;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 487, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4137;
                                this.bitElem();
                                this.state = 4141;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 486, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4138;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4143;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 486, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4148;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 487, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_remark() {
        let _localctx = new Cook_remarkContext(this._ctx, this.state);
        this.enterRule(_localctx, 318, bitmarkParser.RULE_cook_remark);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4149;
                this.match(bitmarkParser.BitCookRremark);
                this.state = 4150;
                this.format();
                this.state = 4151;
                this.match(bitmarkParser.CL);
                this.state = 4155;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4152;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4157;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
                }
                this.state = 4167;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 490, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4158;
                                this.bitElem();
                                this.state = 4162;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 489, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4159;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4164;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 489, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4169;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 490, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_variation() {
        let _localctx = new Cook_variationContext(this._ctx, this.state);
        this.enterRule(_localctx, 320, bitmarkParser.RULE_cook_variation);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4170;
                this.match(bitmarkParser.BitCookVariation);
                this.state = 4171;
                this.format();
                this.state = 4172;
                this.match(bitmarkParser.CL);
                this.state = 4176;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 491, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4173;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4178;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 491, this._ctx);
                }
                this.state = 4188;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 493, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4179;
                                this.bitElem();
                                this.state = 4183;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 492, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4180;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4185;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 492, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4190;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 493, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_insert() {
        let _localctx = new Cook_insertContext(this._ctx, this.state);
        this.enterRule(_localctx, 322, bitmarkParser.RULE_cook_insert);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4191;
                this.match(bitmarkParser.BitCookInsert);
                this.state = 4192;
                this.format();
                this.state = 4193;
                this.match(bitmarkParser.CL);
                this.state = 4197;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 494, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4194;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4199;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 494, this._ctx);
                }
                this.state = 4209;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 496, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4200;
                                this.bitElem();
                                this.state = 4204;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 495, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4201;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4206;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 495, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4211;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 496, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_arrangement() {
        let _localctx = new Cook_arrangementContext(this._ctx, this.state);
        this.enterRule(_localctx, 324, bitmarkParser.RULE_cook_arrangement);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4212;
                this.match(bitmarkParser.BitCookArrangement);
                this.state = 4213;
                this.format();
                this.state = 4214;
                this.match(bitmarkParser.CL);
                this.state = 4218;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 497, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4215;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4220;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 497, this._ctx);
                }
                this.state = 4230;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 499, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4221;
                                this.bitElem();
                                this.state = 4225;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 498, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4222;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4227;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 498, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4232;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 499, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_practice_advise() {
        let _localctx = new Cook_practice_adviseContext(this._ctx, this.state);
        this.enterRule(_localctx, 326, bitmarkParser.RULE_cook_practice_advise);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4233;
                this.match(bitmarkParser.BitCookPracticeAdvise);
                this.state = 4234;
                this.format();
                this.state = 4235;
                this.match(bitmarkParser.CL);
                this.state = 4239;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 500, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4236;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4241;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 500, this._ctx);
                }
                this.state = 4251;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4242;
                                this.bitElem();
                                this.state = 4246;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 501, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4243;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4248;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 501, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4253;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_plate() {
        let _localctx = new Cook_plateContext(this._ctx, this.state);
        this.enterRule(_localctx, 328, bitmarkParser.RULE_cook_plate);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4254;
                this.match(bitmarkParser.BitCookPlate);
                this.state = 4255;
                this.format();
                this.state = 4256;
                this.match(bitmarkParser.CL);
                this.state = 4260;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 503, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4257;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4262;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 503, this._ctx);
                }
                this.state = 4272;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 505, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4263;
                                this.bitElem();
                                this.state = 4267;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 504, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4264;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4269;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 504, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4274;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 505, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_recommendation() {
        let _localctx = new Cook_recommendationContext(this._ctx, this.state);
        this.enterRule(_localctx, 330, bitmarkParser.RULE_cook_recommendation);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4275;
                this.match(bitmarkParser.BitCookRecommendation);
                this.state = 4276;
                this.format();
                this.state = 4277;
                this.match(bitmarkParser.CL);
                this.state = 4281;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 506, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4278;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4283;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 506, this._ctx);
                }
                this.state = 4293;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 508, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4284;
                                this.bitElem();
                                this.state = 4288;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 507, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4285;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4290;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 507, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4295;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 508, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_personal_recommendation() {
        let _localctx = new Cook_personal_recommendationContext(this._ctx, this.state);
        this.enterRule(_localctx, 332, bitmarkParser.RULE_cook_personal_recommendation);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4296;
                this.match(bitmarkParser.BitCookPersonalRecommendation);
                this.state = 4297;
                this.format();
                this.state = 4298;
                this.match(bitmarkParser.CL);
                this.state = 4302;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 509, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4299;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4304;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 509, this._ctx);
                }
                this.state = 4314;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 511, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4305;
                                this.bitElem();
                                this.state = 4309;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 510, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4306;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4311;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 510, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4316;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 511, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_side_drink() {
        let _localctx = new Cook_side_drinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 334, bitmarkParser.RULE_cook_side_drink);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4317;
                this.match(bitmarkParser.BitCookSideDrink);
                this.state = 4318;
                this.format();
                this.state = 4319;
                this.match(bitmarkParser.CL);
                this.state = 4323;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 512, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4320;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4325;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 512, this._ctx);
                }
                this.state = 4335;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 514, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4326;
                                this.bitElem();
                                this.state = 4330;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 513, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4327;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4332;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 513, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4337;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 514, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_side_dish() {
        let _localctx = new Cook_side_dishContext(this._ctx, this.state);
        this.enterRule(_localctx, 336, bitmarkParser.RULE_cook_side_dish);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4338;
                this.match(bitmarkParser.BitCookSideDish);
                this.state = 4339;
                this.format();
                this.state = 4340;
                this.match(bitmarkParser.CL);
                this.state = 4344;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 515, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4341;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4346;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 515, this._ctx);
                }
                this.state = 4356;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 517, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4347;
                                this.bitElem();
                                this.state = 4351;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 516, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4348;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4353;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 516, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4358;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 517, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cook_timer() {
        let _localctx = new Cook_timerContext(this._ctx, this.state);
        this.enterRule(_localctx, 338, bitmarkParser.RULE_cook_timer);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4359;
                this.match(bitmarkParser.BitCookTimer);
                this.state = 4360;
                this.format();
                this.state = 4361;
                this.match(bitmarkParser.CL);
                this.state = 4365;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 518, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4362;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4367;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 518, this._ctx);
                }
                this.state = 4377;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 520, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4368;
                                this.bitElem();
                                this.state = 4372;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 519, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4369;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4374;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 519, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4379;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 520, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_learning_outcomes() {
        let _localctx = new Lang_learning_outcomesContext(this._ctx, this.state);
        this.enterRule(_localctx, 340, bitmarkParser.RULE_lang_learning_outcomes);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4380;
                this.match(bitmarkParser.BitLangLearningOutcomes);
                this.state = 4381;
                this.format();
                this.state = 4382;
                this.match(bitmarkParser.CL);
                this.state = 4386;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 521, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4383;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4388;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 521, this._ctx);
                }
                this.state = 4398;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 523, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4389;
                                this.bitElem();
                                this.state = 4393;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 522, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4390;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4395;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 522, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4400;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 523, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_enabling_language_skills() {
        let _localctx = new Lang_enabling_language_skillsContext(this._ctx, this.state);
        this.enterRule(_localctx, 342, bitmarkParser.RULE_lang_enabling_language_skills);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4401;
                this.match(bitmarkParser.BitLangEnablingLanguageSkills);
                this.state = 4402;
                this.format();
                this.state = 4403;
                this.match(bitmarkParser.CL);
                this.state = 4407;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 524, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4404;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4409;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 524, this._ctx);
                }
                this.state = 4419;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 526, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4410;
                                this.bitElem();
                                this.state = 4414;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 525, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4411;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4416;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 525, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4421;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 526, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_life_skills() {
        let _localctx = new Lang_life_skillsContext(this._ctx, this.state);
        this.enterRule(_localctx, 344, bitmarkParser.RULE_lang_life_skills);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4422;
                this.match(bitmarkParser.BitLangLifeSkills);
                this.state = 4423;
                this.format();
                this.state = 4424;
                this.match(bitmarkParser.CL);
                this.state = 4428;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 527, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4425;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4430;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 527, this._ctx);
                }
                this.state = 4440;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 529, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4431;
                                this.bitElem();
                                this.state = 4435;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 528, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4432;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4437;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 528, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4442;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 529, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_english_around_world() {
        let _localctx = new Lang_english_around_worldContext(this._ctx, this.state);
        this.enterRule(_localctx, 346, bitmarkParser.RULE_lang_english_around_world);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4443;
                this.match(bitmarkParser.BitLangEnglishAroundWorld);
                this.state = 4444;
                this.format();
                this.state = 4445;
                this.match(bitmarkParser.CL);
                this.state = 4449;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4446;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4451;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
                }
                this.state = 4461;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 532, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4452;
                                this.bitElem();
                                this.state = 4456;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 531, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4453;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4458;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 531, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4463;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 532, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_good_to_know() {
        let _localctx = new Lang_good_to_knowContext(this._ctx, this.state);
        this.enterRule(_localctx, 348, bitmarkParser.RULE_lang_good_to_know);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4464;
                this.match(bitmarkParser.BitLangGoodtoknow);
                this.state = 4465;
                this.format();
                this.state = 4466;
                this.match(bitmarkParser.CL);
                this.state = 4470;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 533, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4467;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4472;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 533, this._ctx);
                }
                this.state = 4482;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 535, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4473;
                                this.bitElem();
                                this.state = 4477;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 534, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4474;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4479;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 534, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4484;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 535, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_learning_strategy() {
        let _localctx = new Lang_learning_strategyContext(this._ctx, this.state);
        this.enterRule(_localctx, 350, bitmarkParser.RULE_lang_learning_strategy);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4485;
                this.match(bitmarkParser.BitLangLearningStrategy);
                this.state = 4486;
                this.format();
                this.state = 4487;
                this.match(bitmarkParser.CL);
                this.state = 4491;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 536, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4488;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4493;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 536, this._ctx);
                }
                this.state = 4503;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4494;
                                this.bitElem();
                                this.state = 4498;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 537, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4495;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4500;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 537, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4505;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_like_a_local() {
        let _localctx = new Lang_like_a_localContext(this._ctx, this.state);
        this.enterRule(_localctx, 352, bitmarkParser.RULE_lang_like_a_local);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4506;
                this.match(bitmarkParser.BitLangLikeAlocal);
                this.state = 4507;
                this.format();
                this.state = 4508;
                this.match(bitmarkParser.CL);
                this.state = 4512;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 539, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4509;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4514;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 539, this._ctx);
                }
                this.state = 4524;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 541, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4515;
                                this.bitElem();
                                this.state = 4519;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4516;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4521;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4526;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 541, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_useful_phrases() {
        let _localctx = new Lang_useful_phrasesContext(this._ctx, this.state);
        this.enterRule(_localctx, 354, bitmarkParser.RULE_lang_useful_phrases);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4527;
                this.match(bitmarkParser.BitLangUsefulPhrases);
                this.state = 4528;
                this.format();
                this.state = 4529;
                this.match(bitmarkParser.CL);
                this.state = 4533;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 542, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4530;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4535;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 542, this._ctx);
                }
                this.state = 4545;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 544, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4536;
                                this.bitElem();
                                this.state = 4540;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 543, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4537;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4542;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 543, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4547;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 544, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_level_down() {
        let _localctx = new Lang_level_downContext(this._ctx, this.state);
        this.enterRule(_localctx, 356, bitmarkParser.RULE_lang_level_down);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4548;
                this.match(bitmarkParser.BitLangLevelDown);
                this.state = 4549;
                this.format();
                this.state = 4550;
                this.match(bitmarkParser.CL);
                this.state = 4554;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4551;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4556;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
                }
                this.state = 4566;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 547, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4557;
                                this.bitElem();
                                this.state = 4561;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 546, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4558;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4563;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 546, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4568;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 547, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_level_up() {
        let _localctx = new Lang_level_upContext(this._ctx, this.state);
        this.enterRule(_localctx, 358, bitmarkParser.RULE_lang_level_up);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4569;
                this.match(bitmarkParser.BitLangLevelUp);
                this.state = 4570;
                this.format();
                this.state = 4571;
                this.match(bitmarkParser.CL);
                this.state = 4575;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 548, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4572;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4577;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 548, this._ctx);
                }
                this.state = 4587;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 550, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4578;
                                this.bitElem();
                                this.state = 4582;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 549, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4579;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4584;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 549, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4589;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 550, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_extra_activity() {
        let _localctx = new Lang_extra_activityContext(this._ctx, this.state);
        this.enterRule(_localctx, 360, bitmarkParser.RULE_lang_extra_activity);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4590;
                this.match(bitmarkParser.BitLangExtraActivity);
                this.state = 4591;
                this.format();
                this.state = 4592;
                this.match(bitmarkParser.CL);
                this.state = 4596;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4593;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4598;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
                }
                this.state = 4608;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 553, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4599;
                                this.bitElem();
                                this.state = 4603;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4600;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4605;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4610;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 553, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_video_script() {
        let _localctx = new Lang_video_scriptContext(this._ctx, this.state);
        this.enterRule(_localctx, 362, bitmarkParser.RULE_lang_video_script);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4611;
                this.match(bitmarkParser.BitLangVideoScript);
                this.state = 4612;
                this.format();
                this.state = 4613;
                this.match(bitmarkParser.CL);
                this.state = 4617;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 554, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4614;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4619;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 554, this._ctx);
                }
                this.state = 4629;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 556, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4620;
                                this.bitElem();
                                this.state = 4624;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4621;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4626;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4631;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 556, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_audio_script() {
        let _localctx = new Lang_audio_scriptContext(this._ctx, this.state);
        this.enterRule(_localctx, 364, bitmarkParser.RULE_lang_audio_script);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4632;
                this.match(bitmarkParser.BitLangAudioScript);
                this.state = 4633;
                this.format();
                this.state = 4634;
                this.match(bitmarkParser.CL);
                this.state = 4638;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4635;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4640;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
                }
                this.state = 4650;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 559, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4641;
                                this.bitElem();
                                this.state = 4645;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 558, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4642;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4647;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 558, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4652;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 559, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_vocabulary() {
        let _localctx = new Lang_vocabularyContext(this._ctx, this.state);
        this.enterRule(_localctx, 366, bitmarkParser.RULE_lang_vocabulary);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4653;
                this.match(bitmarkParser.BitLangVocabulary);
                this.state = 4654;
                this.format();
                this.state = 4655;
                this.match(bitmarkParser.CL);
                this.state = 4659;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4656;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4661;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
                }
                this.state = 4671;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4662;
                                this.bitElem();
                                this.state = 4666;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 561, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4663;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4668;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 561, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4673;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_homework() {
        let _localctx = new Lang_homeworkContext(this._ctx, this.state);
        this.enterRule(_localctx, 368, bitmarkParser.RULE_lang_homework);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4674;
                this.match(bitmarkParser.BitLangHomework);
                this.state = 4675;
                this.format();
                this.state = 4676;
                this.match(bitmarkParser.CL);
                this.state = 4680;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 563, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4677;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4682;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 563, this._ctx);
                }
                this.state = 4692;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 565, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4683;
                                this.bitElem();
                                this.state = 4687;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 564, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4684;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4689;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 564, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4694;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 565, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lang_teacher_note() {
        let _localctx = new Lang_teacher_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 370, bitmarkParser.RULE_lang_teacher_note);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4695;
                this.match(bitmarkParser.BitLangTeacherNote);
                this.state = 4696;
                this.format();
                this.state = 4697;
                this.match(bitmarkParser.CL);
                this.state = 4699;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4698;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4701;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 566, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 4712;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 568, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4703;
                                this.bitElem();
                                this.state = 4707;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 567, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4704;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4709;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 567, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4714;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 568, this._ctx);
                }
                this.state = 4716;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 569, this._ctx)) {
                    case 1:
                        {
                            this.state = 4715;
                            this.lines();
                        }
                        break;
                }
                this.state = 4721;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 570, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4718;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4723;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 570, this._ctx);
                }
                this.state = 4737;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 573, this._ctx)) {
                    case 1:
                        {
                            this.state = 4724;
                            this.resource();
                            this.state = 4734;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 572, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 4728;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 4725;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 4730;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 4731;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 4736;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 572, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    review_note() {
        let _localctx = new Review_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 372, bitmarkParser.RULE_review_note);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4739;
                this.match(bitmarkParser.BitReviewNote);
                this.state = 4740;
                this.format();
                this.state = 4741;
                this.match(bitmarkParser.CL);
                this.state = 4745;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 574, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4742;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4747;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 574, this._ctx);
                }
                this.state = 4757;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 576, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4748;
                                this.bitElem();
                                this.state = 4752;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 575, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4749;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4754;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 575, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4759;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 576, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    review_author_note() {
        let _localctx = new Review_author_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 374, bitmarkParser.RULE_review_author_note);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4760;
                this.match(bitmarkParser.BitReviewAuthorNote);
                this.state = 4761;
                this.format();
                this.state = 4762;
                this.match(bitmarkParser.CL);
                this.state = 4766;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 577, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4763;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4768;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 577, this._ctx);
                }
                this.state = 4778;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 579, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4769;
                                this.bitElem();
                                this.state = 4773;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4770;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4775;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4780;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 579, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    review_reviewer_note() {
        let _localctx = new Review_reviewer_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 376, bitmarkParser.RULE_review_reviewer_note);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4781;
                this.match(bitmarkParser.BitReviewReviewerNote);
                this.state = 4782;
                this.format();
                this.state = 4783;
                this.match(bitmarkParser.CL);
                this.state = 4787;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 580, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4784;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4789;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 580, this._ctx);
                }
                this.state = 4799;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 582, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4790;
                                this.bitElem();
                                this.state = 4794;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 581, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4791;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4796;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 581, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4801;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 582, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    review_request_for_review_note() {
        let _localctx = new Review_request_for_review_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 378, bitmarkParser.RULE_review_request_for_review_note);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4802;
                this.match(bitmarkParser.BitReviewRequestForReviewNote);
                this.state = 4803;
                this.format();
                this.state = 4804;
                this.match(bitmarkParser.CL);
                this.state = 4808;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 583, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4805;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4810;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 583, this._ctx);
                }
                this.state = 4820;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 585, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4811;
                                this.bitElem();
                                this.state = 4815;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 584, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4812;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4817;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 584, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4822;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 585, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    review_approved_note() {
        let _localctx = new Review_approved_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 380, bitmarkParser.RULE_review_approved_note);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4823;
                this.match(bitmarkParser.BitReviewApprovedNote);
                this.state = 4824;
                this.format();
                this.state = 4825;
                this.match(bitmarkParser.CL);
                this.state = 4829;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 586, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4826;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4831;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 586, this._ctx);
                }
                this.state = 4841;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4832;
                                this.bitElem();
                                this.state = 4836;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 587, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4833;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4838;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 587, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4843;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    checklist() {
        let _localctx = new ChecklistContext(this._ctx, this.state);
        this.enterRule(_localctx, 382, bitmarkParser.RULE_checklist);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4844;
                this.match(bitmarkParser.BitChecklist);
                this.state = 4845;
                this.format();
                this.state = 4846;
                this.match(bitmarkParser.CL);
                this.state = 4850;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 589, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4847;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4852;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 589, this._ctx);
                }
                this.state = 4862;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4853;
                                this.bitElem();
                                this.state = 4857;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 590, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4854;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4859;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 590, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4864;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    video_transcript() {
        let _localctx = new Video_transcriptContext(this._ctx, this.state);
        this.enterRule(_localctx, 384, bitmarkParser.RULE_video_transcript);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4865;
                this.match(bitmarkParser.BitVideoTranscript);
                this.state = 4866;
                this.format();
                this.state = 4867;
                this.match(bitmarkParser.CL);
                this.state = 4871;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 592, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4868;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4873;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 592, this._ctx);
                }
                this.state = 4883;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 594, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4874;
                                this.bitElem();
                                this.state = 4878;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 593, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4875;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4880;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 593, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4885;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 594, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    audio_transcript() {
        let _localctx = new Audio_transcriptContext(this._ctx, this.state);
        this.enterRule(_localctx, 386, bitmarkParser.RULE_audio_transcript);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4886;
                this.match(bitmarkParser.BitAudioTranscript);
                this.state = 4887;
                this.format();
                this.state = 4888;
                this.match(bitmarkParser.CL);
                this.state = 4892;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 595, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4889;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4894;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 595, this._ctx);
                }
                this.state = 4904;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 597, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4895;
                                this.bitElem();
                                this.state = 4899;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 596, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4896;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4901;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 596, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4906;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 597, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_portrait() {
        let _localctx = new Image_portraitContext(this._ctx, this.state);
        this.enterRule(_localctx, 388, bitmarkParser.RULE_image_portrait);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4907;
                this.match(bitmarkParser.BitImagePortrait);
                this.state = 4908;
                this.format2();
                this.state = 4909;
                this.match(bitmarkParser.CL);
                this.state = 4913;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 598, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4910;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4915;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 598, this._ctx);
                }
                this.state = 4925;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 600, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4916;
                                this.bitElem();
                                this.state = 4920;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 599, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4917;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4922;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 599, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4927;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 600, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_landscape() {
        let _localctx = new Image_landscapeContext(this._ctx, this.state);
        this.enterRule(_localctx, 390, bitmarkParser.RULE_image_landscape);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4928;
                this.match(bitmarkParser.BitImageLandscape);
                this.state = 4929;
                this.format2();
                this.state = 4930;
                this.match(bitmarkParser.CL);
                this.state = 4934;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 601, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4931;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4936;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 601, this._ctx);
                }
                this.state = 4946;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 603, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4937;
                                this.bitElem();
                                this.state = 4941;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 602, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4938;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4943;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 602, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4948;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 603, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_on_device() {
        let _localctx = new Image_on_deviceContext(this._ctx, this.state);
        this.enterRule(_localctx, 392, bitmarkParser.RULE_image_on_device);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4949;
                this.match(bitmarkParser.BitImageOnDevice);
                this.state = 4950;
                this.format2();
                this.state = 4951;
                this.match(bitmarkParser.CL);
                this.state = 4955;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 604, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4952;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4957;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 604, this._ctx);
                }
                this.state = 4967;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 606, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4958;
                                this.bitElem();
                                this.state = 4962;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 605, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4959;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4964;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 605, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4969;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 606, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bitmark_example() {
        let _localctx = new Bitmark_exampleContext(this._ctx, this.state);
        this.enterRule(_localctx, 394, bitmarkParser.RULE_bitmark_example);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4970;
                this.match(bitmarkParser.BitBitmarkExample);
                this.state = 4971;
                this.format();
                this.state = 4972;
                this.match(bitmarkParser.CL);
                this.state = 4976;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4973;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4978;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
                }
                this.state = 4988;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4979;
                                this.bitElem();
                                this.state = 4983;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 608, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 4980;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 4985;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 608, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 4990;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_ai_prompt() {
        let _localctx = new App_ai_promptContext(this._ctx, this.state);
        this.enterRule(_localctx, 396, bitmarkParser.RULE_app_ai_prompt);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4991;
                this.match(bitmarkParser.BitAppAiPrompt);
                this.state = 4992;
                this.format();
                this.state = 4993;
                this.match(bitmarkParser.CL);
                this.state = 4997;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 610, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4994;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 4999;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 610, this._ctx);
                }
                this.state = 5009;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 612, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5000;
                                this.bitElem();
                                this.state = 5004;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 611, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5001;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5006;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 611, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5011;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 612, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_link() {
        let _localctx = new Book_linkContext(this._ctx, this.state);
        this.enterRule(_localctx, 398, bitmarkParser.RULE_book_link);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5012;
                this.match(bitmarkParser.BitBookLink);
                this.state = 5013;
                this.format();
                this.state = 5014;
                this.match(bitmarkParser.CL);
                this.state = 5018;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 5015;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 5020;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 5028;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 5021;
                                    this.bitElem();
                                    this.state = 5025;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 614, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 5022;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 5027;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 614, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 5030;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 615, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_link_next() {
        let _localctx = new Book_link_nextContext(this._ctx, this.state);
        this.enterRule(_localctx, 400, bitmarkParser.RULE_book_link_next);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5032;
                this.match(bitmarkParser.BitBookLinkNext);
                this.state = 5033;
                this.format();
                this.state = 5034;
                this.match(bitmarkParser.CL);
                this.state = 5038;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 5035;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 5040;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 5048;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 5041;
                                    this.bitElem();
                                    this.state = 5045;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 617, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 5042;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 5047;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 617, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 5050;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 618, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_link_prev() {
        let _localctx = new Book_link_prevContext(this._ctx, this.state);
        this.enterRule(_localctx, 402, bitmarkParser.RULE_book_link_prev);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5052;
                this.match(bitmarkParser.BitBookLinkPrev);
                this.state = 5053;
                this.format();
                this.state = 5054;
                this.match(bitmarkParser.CL);
                this.state = 5058;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 5055;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 5060;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 5068;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 5061;
                                    this.bitElem();
                                    this.state = 5065;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 620, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 5062;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 5067;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 620, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 5070;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 621, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    figure() {
        let _localctx = new FigureContext(this._ctx, this.state);
        this.enterRule(_localctx, 404, bitmarkParser.RULE_figure);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5072;
                this.match(bitmarkParser.BitFigure);
                this.state = 5073;
                this.format();
                this.state = 5074;
                this.match(bitmarkParser.CL);
                this.state = 5078;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5075;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5080;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
                }
                this.state = 5090;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 624, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5081;
                                this.bitElem();
                                this.state = 5085;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 623, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5082;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5087;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 623, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5092;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 624, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    video_link_landscape() {
        let _localctx = new Video_link_landscapeContext(this._ctx, this.state);
        this.enterRule(_localctx, 406, bitmarkParser.RULE_video_link_landscape);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5093;
                this.match(bitmarkParser.BitVideoLinkLandscape);
                this.state = 5094;
                this.format();
                this.state = 5095;
                this.match(bitmarkParser.CL);
                this.state = 5099;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 625, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5096;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5101;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 625, this._ctx);
                }
                this.state = 5111;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 627, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5102;
                                this.bitElem();
                                this.state = 5106;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 626, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5103;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5108;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 626, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5113;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 627, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    video_link_portrait() {
        let _localctx = new Video_link_portraitContext(this._ctx, this.state);
        this.enterRule(_localctx, 408, bitmarkParser.RULE_video_link_portrait);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5114;
                this.match(bitmarkParser.BitVideoLinkPortrait);
                this.state = 5115;
                this.format();
                this.state = 5116;
                this.match(bitmarkParser.CL);
                this.state = 5120;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 628, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5117;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5122;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 628, this._ctx);
                }
                this.state = 5132;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 630, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5123;
                                this.bitElem();
                                this.state = 5127;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 629, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5124;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5129;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 629, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5134;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 630, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_mood() {
        let _localctx = new Image_moodContext(this._ctx, this.state);
        this.enterRule(_localctx, 410, bitmarkParser.RULE_image_mood);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5135;
                this.match(bitmarkParser.BitImageMood);
                this.state = 5136;
                this.format();
                this.state = 5137;
                this.match(bitmarkParser.CL);
                this.state = 5141;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 631, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5138;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5143;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 631, this._ctx);
                }
                this.state = 5153;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 633, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5144;
                                this.bitElem();
                                this.state = 5148;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 632, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5145;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5150;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 632, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5155;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 633, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_figure() {
        let _localctx = new Image_figureContext(this._ctx, this.state);
        this.enterRule(_localctx, 412, bitmarkParser.RULE_image_figure);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5156;
                this.match(bitmarkParser.BitImageFigure);
                this.state = 5157;
                this.format();
                this.state = 5158;
                this.match(bitmarkParser.CL);
                this.state = 5162;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 634, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5159;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5164;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 634, this._ctx);
                }
                this.state = 5174;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 636, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5165;
                                this.bitElem();
                                this.state = 5169;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 635, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5166;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5171;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 635, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5176;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 636, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_banner() {
        let _localctx = new Image_bannerContext(this._ctx, this.state);
        this.enterRule(_localctx, 414, bitmarkParser.RULE_image_banner);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5177;
                this.match(bitmarkParser.BitImageBanner);
                this.state = 5178;
                this.format();
                this.state = 5179;
                this.match(bitmarkParser.CL);
                this.state = 5183;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 637, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5180;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5185;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 637, this._ctx);
                }
                this.state = 5195;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 639, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5186;
                                this.bitElem();
                                this.state = 5190;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 638, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5187;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5192;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 638, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5197;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 639, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_styled() {
        let _localctx = new Image_styledContext(this._ctx, this.state);
        this.enterRule(_localctx, 416, bitmarkParser.RULE_image_styled);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5198;
                this.match(bitmarkParser.BitImageStyled);
                this.state = 5199;
                this.format();
                this.state = 5200;
                this.match(bitmarkParser.CL);
                this.state = 5204;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 640, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5201;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5206;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 640, this._ctx);
                }
                this.state = 5216;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 642, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5207;
                                this.bitElem();
                                this.state = 5211;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 641, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5208;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5213;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 641, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5218;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 642, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_screenshot() {
        let _localctx = new Image_screenshotContext(this._ctx, this.state);
        this.enterRule(_localctx, 418, bitmarkParser.RULE_image_screenshot);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5219;
                this.match(bitmarkParser.BitImageScreenshot);
                this.state = 5220;
                this.format();
                this.state = 5221;
                this.match(bitmarkParser.CL);
                this.state = 5225;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 643, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5222;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5227;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 643, this._ctx);
                }
                this.state = 5237;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 645, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5228;
                                this.bitElem();
                                this.state = 5232;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 644, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5229;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5234;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 644, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5239;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 645, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_get_screenshot() {
        let _localctx = new App_get_screenshotContext(this._ctx, this.state);
        this.enterRule(_localctx, 420, bitmarkParser.RULE_app_get_screenshot);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5240;
                this.match(bitmarkParser.BitAppGetScreenshot);
                this.state = 5241;
                this.format();
                this.state = 5242;
                this.match(bitmarkParser.CL);
                this.state = 5246;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 646, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5243;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5248;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 646, this._ctx);
                }
                this.state = 5258;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 648, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5249;
                                this.bitElem();
                                this.state = 5253;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 647, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5250;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5255;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 647, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5260;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 648, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_create_bits_from_image() {
        let _localctx = new App_create_bits_from_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 422, bitmarkParser.RULE_app_create_bits_from_image);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5261;
                this.match(bitmarkParser.BitAppCreateBitsFromImage);
                this.state = 5262;
                this.format();
                this.state = 5263;
                this.match(bitmarkParser.CL);
                this.state = 5267;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 649, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5264;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5269;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 649, this._ctx);
                }
                this.state = 5279;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 651, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5270;
                                this.bitElem();
                                this.state = 5274;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 650, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5271;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5276;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 650, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5281;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 651, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    life_skill_sticker() {
        let _localctx = new Life_skill_stickerContext(this._ctx, this.state);
        this.enterRule(_localctx, 424, bitmarkParser.RULE_life_skill_sticker);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5282;
                this.match(bitmarkParser.BitLifeSkillSticker);
                this.state = 5283;
                this.format();
                this.state = 5284;
                this.match(bitmarkParser.CL);
                this.state = 5288;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 652, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5285;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5290;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 652, this._ctx);
                }
                this.state = 5300;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 654, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5291;
                                this.bitElem();
                                this.state = 5295;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 653, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5292;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5297;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 653, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5302;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 654, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    details_image() {
        let _localctx = new Details_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 426, bitmarkParser.RULE_details_image);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5303;
                this.match(bitmarkParser.BitDetailsImage);
                this.state = 5304;
                this.format();
                this.state = 5305;
                this.match(bitmarkParser.CL);
                this.state = 5309;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 655, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5306;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5311;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 655, this._ctx);
                }
                this.state = 5321;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 657, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5312;
                                this.bitElem();
                                this.state = 5316;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 656, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5313;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5318;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 656, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5323;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 657, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    page_banner() {
        let _localctx = new Page_bannerContext(this._ctx, this.state);
        this.enterRule(_localctx, 428, bitmarkParser.RULE_page_banner);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5324;
                this.match(bitmarkParser.BitPageBanner);
                this.state = 5325;
                this.format();
                this.state = 5326;
                this.match(bitmarkParser.CL);
                this.state = 5330;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 658, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5327;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5332;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 658, this._ctx);
                }
                this.state = 5342;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 660, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5333;
                                this.bitElem();
                                this.state = 5337;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 659, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5334;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5339;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 659, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5344;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 660, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    page_buy_button() {
        let _localctx = new Page_buy_buttonContext(this._ctx, this.state);
        this.enterRule(_localctx, 430, bitmarkParser.RULE_page_buy_button);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5345;
                this.match(bitmarkParser.BitPageBuyButton);
                this.state = 5346;
                this.format();
                this.state = 5347;
                this.match(bitmarkParser.CL);
                this.state = 5351;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 661, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5348;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5353;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 661, this._ctx);
                }
                this.state = 5363;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 663, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5354;
                                this.bitElem();
                                this.state = 5358;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 662, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5355;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5360;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 662, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5365;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 663, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_render_svg() {
        let _localctx = new Image_render_svgContext(this._ctx, this.state);
        this.enterRule(_localctx, 432, bitmarkParser.RULE_image_render_svg);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5366;
                this.match(bitmarkParser.BitImageRenderSvg);
                this.state = 5367;
                this.format();
                this.state = 5368;
                this.match(bitmarkParser.CL);
                this.state = 5372;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 664, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5369;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5374;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 664, this._ctx);
                }
                this.state = 5384;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 666, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5375;
                                this.bitElem();
                                this.state = 5379;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 665, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5376;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5381;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 665, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5386;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 666, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_jsfiddle() {
        let _localctx = new Vendor_jsfiddleContext(this._ctx, this.state);
        this.enterRule(_localctx, 434, bitmarkParser.RULE_vendor_jsfiddle);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5387;
                this.match(bitmarkParser.BitVendorJsfiddle);
                this.state = 5388;
                this.format();
                this.state = 5389;
                this.match(bitmarkParser.CL);
                this.state = 5393;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 667, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5390;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5395;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 667, this._ctx);
                }
                this.state = 5405;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 669, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5396;
                                this.bitElem();
                                this.state = 5400;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 668, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5397;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5402;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 668, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5407;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 669, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_jsfiddle_embed() {
        let _localctx = new Vendor_jsfiddle_embedContext(this._ctx, this.state);
        this.enterRule(_localctx, 436, bitmarkParser.RULE_vendor_jsfiddle_embed);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5408;
                this.match(bitmarkParser.BitVendorJsfiddleEmbed);
                this.state = 5409;
                this.format();
                this.state = 5410;
                this.match(bitmarkParser.CL);
                this.state = 5414;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 670, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5411;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5416;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 670, this._ctx);
                }
                this.state = 5426;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 672, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5417;
                                this.bitElem();
                                this.state = 5421;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 671, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5418;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5423;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 671, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5428;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 672, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_code_editor() {
        let _localctx = new App_code_editorContext(this._ctx, this.state);
        this.enterRule(_localctx, 438, bitmarkParser.RULE_app_code_editor);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5429;
                this.match(bitmarkParser.BitAppCodeEditor);
                this.state = 5430;
                this.format2();
                this.state = 5431;
                this.match(bitmarkParser.CL);
                this.state = 5435;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 673, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5432;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5437;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 673, this._ctx);
                }
                this.state = 5447;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 675, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5438;
                                this.bitElem();
                                this.state = 5442;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 674, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5439;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5444;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 674, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5449;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 675, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_code_ide() {
        let _localctx = new App_code_ideContext(this._ctx, this.state);
        this.enterRule(_localctx, 440, bitmarkParser.RULE_app_code_ide);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5450;
                this.match(bitmarkParser.BitAppCodeIde);
                this.state = 5451;
                this.format2();
                this.state = 5452;
                this.match(bitmarkParser.CL);
                this.state = 5456;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 676, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5453;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5458;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 676, this._ctx);
                }
                this.state = 5468;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 678, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5459;
                                this.bitElem();
                                this.state = 5463;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 677, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5460;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5465;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 677, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5470;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 678, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    code_runtime() {
        let _localctx = new Code_runtimeContext(this._ctx, this.state);
        this.enterRule(_localctx, 442, bitmarkParser.RULE_code_runtime);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5471;
                this.match(bitmarkParser.BitCodeRuntime);
                this.state = 5472;
                this.format2();
                this.state = 5473;
                this.match(bitmarkParser.CL);
                this.state = 5477;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 679, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5474;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5479;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 679, this._ctx);
                }
                this.state = 5489;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 681, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5480;
                                this.bitElem();
                                this.state = 5484;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 680, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5481;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5486;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 680, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5491;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 681, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    output() {
        let _localctx = new OutputContext(this._ctx, this.state);
        this.enterRule(_localctx, 444, bitmarkParser.RULE_output);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5492;
                this.match(bitmarkParser.BitOutput);
                this.state = 5493;
                this.format2();
                this.state = 5494;
                this.match(bitmarkParser.CL);
                this.state = 5498;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 682, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5495;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5500;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 682, this._ctx);
                }
                this.state = 5510;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 684, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5501;
                                this.bitElem();
                                this.state = 5505;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 683, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5502;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5507;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 683, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5512;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 684, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    console_log() {
        let _localctx = new Console_logContext(this._ctx, this.state);
        this.enterRule(_localctx, 446, bitmarkParser.RULE_console_log);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5513;
                this.match(bitmarkParser.BitConsoleLog);
                this.state = 5514;
                this.format2();
                this.state = 5515;
                this.match(bitmarkParser.CL);
                this.state = 5519;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 685, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5516;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5521;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 685, this._ctx);
                }
                this.state = 5531;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 687, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5522;
                                this.bitElem();
                                this.state = 5526;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 686, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5523;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5528;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 686, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5533;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 687, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_jupyter_cell_code() {
        let _localctx = new Vendor_jupyter_cell_codeContext(this._ctx, this.state);
        this.enterRule(_localctx, 448, bitmarkParser.RULE_vendor_jupyter_cell_code);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5534;
                this.match(bitmarkParser.BitVenderJupyterCellCode);
                this.state = 5535;
                this.format2();
                this.state = 5536;
                this.match(bitmarkParser.CL);
                this.state = 5540;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 688, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5537;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5542;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 688, this._ctx);
                }
                this.state = 5552;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 690, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5543;
                                this.bitElem();
                                this.state = 5547;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 689, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5544;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5549;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 689, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5554;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 690, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_jupyter_cell_raw() {
        let _localctx = new Vendor_jupyter_cell_rawContext(this._ctx, this.state);
        this.enterRule(_localctx, 450, bitmarkParser.RULE_vendor_jupyter_cell_raw);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5555;
                this.match(bitmarkParser.BitVenderJupyterCellRaw);
                this.state = 5556;
                this.format2();
                this.state = 5557;
                this.match(bitmarkParser.CL);
                this.state = 5561;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 691, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5558;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5563;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 691, this._ctx);
                }
                this.state = 5573;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 693, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5564;
                                this.bitElem();
                                this.state = 5568;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 692, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5565;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5570;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 692, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5575;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 693, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_jupyter_output() {
        let _localctx = new Vendor_jupyter_outputContext(this._ctx, this.state);
        this.enterRule(_localctx, 452, bitmarkParser.RULE_vendor_jupyter_output);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5576;
                this.match(bitmarkParser.BitVenderJupyterOutput);
                this.state = 5577;
                this.format2();
                this.state = 5578;
                this.match(bitmarkParser.CL);
                this.state = 5582;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 694, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5579;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5584;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 694, this._ctx);
                }
                this.state = 5594;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 696, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5585;
                                this.bitElem();
                                this.state = 5589;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 695, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5586;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5591;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 695, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5596;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 696, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_jupyter_cell_markdown() {
        let _localctx = new Vendor_jupyter_cell_markdownContext(this._ctx, this.state);
        this.enterRule(_localctx, 454, bitmarkParser.RULE_vendor_jupyter_cell_markdown);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5597;
                this.match(bitmarkParser.BitVenderJupyterCellMarkdown);
                this.state = 5598;
                this.format2();
                this.state = 5599;
                this.match(bitmarkParser.CL);
                this.state = 5603;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 697, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5600;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5605;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 697, this._ctx);
                }
                this.state = 5615;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 699, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5606;
                                this.bitElem();
                                this.state = 5610;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 698, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5607;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5612;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 698, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5617;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 699, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_jupyter_ipynb() {
        let _localctx = new Vendor_jupyter_ipynbContext(this._ctx, this.state);
        this.enterRule(_localctx, 456, bitmarkParser.RULE_vendor_jupyter_ipynb);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5618;
                this.match(bitmarkParser.BitVenderJupyterIpynb);
                this.state = 5619;
                this.format2();
                this.state = 5620;
                this.match(bitmarkParser.CL);
                this.state = 5624;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 700, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5621;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5626;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 700, this._ctx);
                }
                this.state = 5636;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 702, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5627;
                                this.bitElem();
                                this.state = 5631;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 701, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5628;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5633;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 701, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5638;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 702, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_code_cell() {
        let _localctx = new App_code_cellContext(this._ctx, this.state);
        this.enterRule(_localctx, 458, bitmarkParser.RULE_app_code_cell);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5639;
                this.match(bitmarkParser.BitAppCodeCell);
                this.state = 5640;
                this.format2();
                this.state = 5641;
                this.match(bitmarkParser.CL);
                this.state = 5645;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 703, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5642;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5647;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 703, this._ctx);
                }
                this.state = 5657;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 705, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5648;
                                this.bitElem();
                                this.state = 5652;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 704, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5649;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5654;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 704, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5659;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 705, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stdout() {
        let _localctx = new StdoutContext(this._ctx, this.state);
        this.enterRule(_localctx, 460, bitmarkParser.RULE_stdout);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5660;
                this.match(bitmarkParser.BitStdout);
                this.state = 5661;
                this.format2();
                this.state = 5662;
                this.match(bitmarkParser.CL);
                this.state = 5666;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 706, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5663;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5668;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 706, this._ctx);
                }
                this.state = 5678;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 708, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5669;
                                this.bitElem();
                                this.state = 5673;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 707, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5670;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5675;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 707, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5680;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 708, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_bitmark_from_javascript() {
        let _localctx = new App_bitmark_from_javascriptContext(this._ctx, this.state);
        this.enterRule(_localctx, 462, bitmarkParser.RULE_app_bitmark_from_javascript);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5681;
                this.match(bitmarkParser.BitAppBitmarkFromJavascript);
                this.state = 5682;
                this.format2();
                this.state = 5683;
                this.match(bitmarkParser.CL);
                this.state = 5687;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 709, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5684;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5689;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 709, this._ctx);
                }
                this.state = 5699;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 711, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5690;
                                this.bitElem();
                                this.state = 5694;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 710, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5691;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5696;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 710, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5701;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 711, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_bitmark_from_editor() {
        let _localctx = new App_bitmark_from_editorContext(this._ctx, this.state);
        this.enterRule(_localctx, 464, bitmarkParser.RULE_app_bitmark_from_editor);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5702;
                this.match(bitmarkParser.BitAppBitmarkFromEditor);
                this.state = 5703;
                this.format2();
                this.state = 5704;
                this.match(bitmarkParser.CL);
                this.state = 5708;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 712, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5705;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5710;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 712, this._ctx);
                }
                this.state = 5720;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 714, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5711;
                                this.bitElem();
                                this.state = 5715;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 713, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5712;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5717;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 713, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5722;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 714, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    images_logo_grave() {
        let _localctx = new Images_logo_graveContext(this._ctx, this.state);
        this.enterRule(_localctx, 466, bitmarkParser.RULE_images_logo_grave);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5723;
                this.match(bitmarkParser.BitImagesLogoGrave);
                this.state = 5724;
                this.format();
                this.state = 5725;
                this.match(bitmarkParser.CL);
                this.state = 5729;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 5726;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 5731;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 5741;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (bitmarkParser.OPDOLL - 226)) | (1 << (bitmarkParser.OPRANGLES - 226)) | (1 << (bitmarkParser.OPRANGLEL - 226)) | (1 << (bitmarkParser.OPDANGLE - 226)) | (1 << (bitmarkParser.OPU - 226)) | (1 << (bitmarkParser.OPB - 226)) | (1 << (bitmarkParser.OPQ - 226)) | (1 << (bitmarkParser.OPA - 226)) | (1 << (bitmarkParser.OPS - 226)) | (1 << (bitmarkParser.OPHASH - 226)) | (1 << (bitmarkParser.OPC - 226)) | (1 << (bitmarkParser.COLON - 226)) | (1 << (bitmarkParser.AMP - 226)) | (1 << (bitmarkParser.Greater - 226)) | (1 << (bitmarkParser.Less - 226)) | (1 << (bitmarkParser.RightAngle - 226)) | (1 << (bitmarkParser.RightArrow - 226)) | (1 << (bitmarkParser.DBLEQ - 226)) | (1 << (bitmarkParser.QUOTE_INDEX - 226)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.DCANY - 258)) | (1 << (bitmarkParser.NUMERIC - 258)) | (1 << (bitmarkParser.STRING - 258)) | (1 << (bitmarkParser.NOTBITMARK - 258)) | (1 << (bitmarkParser.ELIPSIS - 258)) | (1 << (bitmarkParser.SENTENCE - 258)) | (1 << (bitmarkParser.BARSTRING - 258)) | (1 << (bitmarkParser.AtProgress - 258)) | (1 << (bitmarkParser.AtReference - 258)) | (1 << (bitmarkParser.AtProgressPoints - 258)) | (1 << (bitmarkParser.AtExampleWithStr - 258)) | (1 << (bitmarkParser.AtExamplecol - 258)) | (1 << (bitmarkParser.AtExamplecl - 258)) | (1 << (bitmarkParser.AtSampleSolution - 258)) | (1 << (bitmarkParser.AtPartialAnswerS - 258)) | (1 << (bitmarkParser.AtPartialAnswer - 258)) | (1 << (bitmarkParser.AtLabeltrue - 258)) | (1 << (bitmarkParser.AtLabelfalse - 258)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (bitmarkParser.OpAtCopyright - 295)) | (1 << (bitmarkParser.AtDate - 295)) | (1 << (bitmarkParser.AmpAudio - 295)) | (1 << (bitmarkParser.AmpImage - 295)) | (1 << (bitmarkParser.AmpVideo - 295)) | (1 << (bitmarkParser.AmpArticle - 295)) | (1 << (bitmarkParser.AmpDocument - 295)) | (1 << (bitmarkParser.AmpApp - 295)) | (1 << (bitmarkParser.AmpWebsite - 295)) | (1 << (bitmarkParser.AmpStillImageFilm - 295)) | (1 << (bitmarkParser.BracEnclose - 295)) | (1 << (bitmarkParser.AmpAudioLink - 295)) | (1 << (bitmarkParser.AmpImageLink - 295)) | (1 << (bitmarkParser.AmpVideoLink - 295)) | (1 << (bitmarkParser.AmpArticleLink - 295)))) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & ((1 << (bitmarkParser.AmpDocumentLink - 327)) | (1 << (bitmarkParser.AmpAppLink - 327)) | (1 << (bitmarkParser.AmpWebsiteLink - 327)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.BitmarkMinus - 327)) | (1 << (bitmarkParser.BitmarkPlus - 327)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 5732;
                            this.bitElem_noResource();
                            this.state = 5736;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 5733;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 5738;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 5743;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 5745;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5744;
                            this.logo();
                        }
                    }
                    this.state = 5747;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (bitmarkParser.OpAmpImage - 313)) | (1 << (bitmarkParser.OpAmpImageZoom - 313)) | (1 << (bitmarkParser.OpAmpImageLink - 313)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    logo() {
        let _localctx = new LogoContext(this._ctx, this.state);
        this.enterRule(_localctx, 468, bitmarkParser.RULE_logo);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5749;
                this.image_one();
                this.state = 5753;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & ((1 << (bitmarkParser.AtWidth - 274)) | (1 << (bitmarkParser.AtHeight - 274)) | (1 << (bitmarkParser.OPATALT - 274)) | (1 << (bitmarkParser.OpAtCaption - 274)) | (1 << (bitmarkParser.OpAtLicense - 274)) | (1 << (bitmarkParser.OpAtCopyright - 274)) | (1 << (bitmarkParser.OpAtSearch - 274)))) !== 0)) {
                    {
                        {
                            this.state = 5750;
                            this.logo_attribs();
                        }
                    }
                    this.state = 5755;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 5756;
                this.match(bitmarkParser.NL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    logo_attribs() {
        let _localctx = new Logo_attribsContext(this._ctx, this.state);
        this.enterRule(_localctx, 470, bitmarkParser.RULE_logo_attribs);
        let _la;
        try {
            let _alt;
            this.state = 5770;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtWidth:
                case bitmarkParser.AtHeight:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5758;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 5759;
                        this.match(bitmarkParser.COLON);
                        this.state = 5760;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 5761;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPATALT:
                case bitmarkParser.OpAtCaption:
                case bitmarkParser.OpAtLicense:
                case bitmarkParser.OpAtCopyright:
                case bitmarkParser.OpAtSearch:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5762;
                        _la = this._input.LA(1);
                        if (!(((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (bitmarkParser.OPATALT - 290)) | (1 << (bitmarkParser.OpAtCaption - 290)) | (1 << (bitmarkParser.OpAtLicense - 290)) | (1 << (bitmarkParser.OpAtCopyright - 290)) | (1 << (bitmarkParser.OpAtSearch - 290)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 5766;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 720, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 5763;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 5768;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 720, this._ctx);
                        }
                        this.state = 5769;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_choice() {
        let _localctx = new Bot_choiceContext(this._ctx, this.state);
        this.enterRule(_localctx, 472, bitmarkParser.RULE_bot_choice);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5779;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 5779;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 722, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5772;
                                    this.words();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 5773;
                                    this.instruction();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 5774;
                                    this.audiobit();
                                }
                                break;
                            case 4:
                                {
                                    this.state = 5775;
                                    this.gap();
                                }
                                break;
                            case 5:
                                {
                                    this.state = 5776;
                                    this.choice_plus();
                                }
                                break;
                            case 6:
                                {
                                    this.state = 5777;
                                    this.choice_minus();
                                }
                                break;
                            case 7:
                                {
                                    this.state = 5778;
                                    this.choice_star();
                                }
                                break;
                        }
                    }
                    this.state = 5781;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & ((1 << (bitmarkParser.OPU - 231)) | (1 << (bitmarkParser.OPB - 231)) | (1 << (bitmarkParser.OPP - 231)) | (1 << (bitmarkParser.OPM - 231)) | (1 << (bitmarkParser.OPR - 231)) | (1 << (bitmarkParser.OPC - 231)) | (1 << (bitmarkParser.AMP - 231)) | (1 << (bitmarkParser.Greater - 231)) | (1 << (bitmarkParser.Less - 231)) | (1 << (bitmarkParser.RightAngle - 231)) | (1 << (bitmarkParser.RightArrow - 231)) | (1 << (bitmarkParser.QUOTE_INDEX - 231)))) !== 0) || ((((_la - 267)) & ~0x1F) === 0 && ((1 << (_la - 267)) & ((1 << (bitmarkParser.NOTBITMARK - 267)) | (1 << (bitmarkParser.ELIPSIS - 267)) | (1 << (bitmarkParser.SENTENCE - 267)) | (1 << (bitmarkParser.BARSTRING - 267)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.OpAmpAudio - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)) | (1 << (bitmarkParser.OpAmpAudioLink - 302)))) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (bitmarkParser.OpAmpAudioEmbed - 348)) | (1 << (bitmarkParser.BitmarkMinus - 348)) | (1 << (bitmarkParser.BitmarkPlus - 348)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    rating() {
        let _localctx = new RatingContext(this._ctx, this.state);
        this.enterRule(_localctx, 474, bitmarkParser.RULE_rating);
        let _la;
        try {
            let _alt;
            this.state = 5859;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 736, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5783;
                        this.match(bitmarkParser.BitRating);
                        this.state = 5784;
                        this.format();
                        this.state = 5785;
                        this.match(bitmarkParser.CL);
                        this.state = 5789;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 724, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 5786;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                            }
                            this.state = 5791;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 724, this._ctx);
                        }
                        this.state = 5801;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 726, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 5792;
                                        this.bitElem();
                                        this.state = 5796;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 725, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 5793;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 5798;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 725, this._ctx);
                                        }
                                    }
                                }
                            }
                            this.state = 5803;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 726, this._ctx);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5804;
                        this.match(bitmarkParser.BitRating);
                        this.state = 5805;
                        this.format();
                        this.state = 5806;
                        this.match(bitmarkParser.CL);
                        this.state = 5810;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.NL) {
                            {
                                {
                                    this.state = 5807;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            this.state = 5812;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 5822;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (bitmarkParser.OPDOLL - 226)) | (1 << (bitmarkParser.OPRANGLES - 226)) | (1 << (bitmarkParser.OPRANGLEL - 226)) | (1 << (bitmarkParser.OPDANGLE - 226)) | (1 << (bitmarkParser.OPU - 226)) | (1 << (bitmarkParser.OPB - 226)) | (1 << (bitmarkParser.OPQ - 226)) | (1 << (bitmarkParser.OPA - 226)) | (1 << (bitmarkParser.OPS - 226)) | (1 << (bitmarkParser.OPHASH - 226)) | (1 << (bitmarkParser.OPC - 226)) | (1 << (bitmarkParser.COLON - 226)) | (1 << (bitmarkParser.AMP - 226)) | (1 << (bitmarkParser.Greater - 226)) | (1 << (bitmarkParser.Less - 226)) | (1 << (bitmarkParser.RightAngle - 226)) | (1 << (bitmarkParser.RightArrow - 226)) | (1 << (bitmarkParser.DBLEQ - 226)) | (1 << (bitmarkParser.QUOTE_INDEX - 226)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.DCANY - 258)) | (1 << (bitmarkParser.ArticleText - 258)) | (1 << (bitmarkParser.NUMERIC - 258)) | (1 << (bitmarkParser.STRING - 258)) | (1 << (bitmarkParser.NOTBITMARK - 258)) | (1 << (bitmarkParser.ELIPSIS - 258)) | (1 << (bitmarkParser.SENTENCE - 258)) | (1 << (bitmarkParser.BARSTRING - 258)) | (1 << (bitmarkParser.AtProgress - 258)) | (1 << (bitmarkParser.AtReference - 258)) | (1 << (bitmarkParser.AtProgressPoints - 258)) | (1 << (bitmarkParser.AtExampleWithStr - 258)) | (1 << (bitmarkParser.AtExamplecol - 258)) | (1 << (bitmarkParser.AtExamplecl - 258)) | (1 << (bitmarkParser.AtSampleSolution - 258)) | (1 << (bitmarkParser.AtPartialAnswerS - 258)) | (1 << (bitmarkParser.AtPartialAnswer - 258)) | (1 << (bitmarkParser.AtLabeltrue - 258)) | (1 << (bitmarkParser.AtLabelfalse - 258)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (bitmarkParser.OpAtCopyright - 295)) | (1 << (bitmarkParser.OpAtIsTracked - 295)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 295)) | (1 << (bitmarkParser.AtDate - 295)) | (1 << (bitmarkParser.AmpAudio - 295)) | (1 << (bitmarkParser.AmpImage - 295)) | (1 << (bitmarkParser.AmpVideo - 295)) | (1 << (bitmarkParser.AmpArticle - 295)) | (1 << (bitmarkParser.AmpDocument - 295)) | (1 << (bitmarkParser.AmpApp - 295)) | (1 << (bitmarkParser.AmpWebsite - 295)) | (1 << (bitmarkParser.AmpStillImageFilm - 295)) | (1 << (bitmarkParser.OpAmpAudio - 295)) | (1 << (bitmarkParser.OpAmpImage - 295)) | (1 << (bitmarkParser.OpAmpImageZoom - 295)) | (1 << (bitmarkParser.OpAmpVideo - 295)) | (1 << (bitmarkParser.OpAmpArticle - 295)) | (1 << (bitmarkParser.OpAmpDocument - 295)) | (1 << (bitmarkParser.OpAmpApp - 295)) | (1 << (bitmarkParser.OpAmpWebsite - 295)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 295)) | (1 << (bitmarkParser.BracEnclose - 295)) | (1 << (bitmarkParser.AmpAudioLink - 295)) | (1 << (bitmarkParser.AmpImageLink - 295)) | (1 << (bitmarkParser.AmpVideoLink - 295)) | (1 << (bitmarkParser.AmpArticleLink - 295)))) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & ((1 << (bitmarkParser.AmpDocumentLink - 327)) | (1 << (bitmarkParser.AmpAppLink - 327)) | (1 << (bitmarkParser.AmpWebsiteLink - 327)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.OpAmpAudioLink - 327)) | (1 << (bitmarkParser.OpAmpImageLink - 327)) | (1 << (bitmarkParser.OpAmpVideoLink - 327)) | (1 << (bitmarkParser.OpAmpArticleLink - 327)) | (1 << (bitmarkParser.OpAmpDocumentLink - 327)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 327)) | (1 << (bitmarkParser.OpAmpAppLink - 327)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 327)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 327)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 327)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 327)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 327)) | (1 << (bitmarkParser.BitmarkMinus - 327)) | (1 << (bitmarkParser.BitmarkPlus - 327)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                            {
                                {
                                    this.state = 5813;
                                    this.bitElem();
                                    this.state = 5817;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 5814;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 5819;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            this.state = 5824;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 5833;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 5825;
                                            _la = this._input.LA(1);
                                            if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                            this.state = 5826;
                                            this.s_and_w();
                                            this.state = 5829;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            do {
                                                {
                                                    {
                                                        this.state = 5827;
                                                        this.match(bitmarkParser.NL);
                                                        this.state = 5828;
                                                        this.bullet_item();
                                                    }
                                                }
                                                this.state = 5831;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            } while (_la === bitmarkParser.NL);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 5835;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 731, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        this.state = 5837;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 5841;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 732, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 5838;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                            }
                            this.state = 5843;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 732, this._ctx);
                        }
                        this.state = 5857;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 735, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5844;
                                    this.resource();
                                    this.state = 5854;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 734, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 5848;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                    while (_la === bitmarkParser.NL) {
                                                        {
                                                            {
                                                                this.state = 5845;
                                                                this.match(bitmarkParser.NL);
                                                            }
                                                        }
                                                        this.state = 5850;
                                                        this._errHandler.sync(this);
                                                        _la = this._input.LA(1);
                                                    }
                                                    this.state = 5851;
                                                    this.resource();
                                                }
                                            }
                                        }
                                        this.state = 5856;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 734, this._ctx);
                                    }
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bullet_item() {
        let _localctx = new Bullet_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 476, bitmarkParser.RULE_bullet_item);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5861;
                this.match(bitmarkParser.OPBUL);
                this.state = 5862;
                this.s_and_w();
                this.state = 5863;
                this.match(bitmarkParser.CL);
                this.state = 5865;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.AtPoints) {
                    {
                        this.state = 5864;
                        this.atpoint();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey() {
        let _localctx = new SurveyContext(this._ctx, this.state);
        this.enterRule(_localctx, 478, bitmarkParser.RULE_survey);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5867;
                this.match(bitmarkParser.BitSurvey);
                this.state = 5868;
                this.format();
                this.state = 5869;
                this.match(bitmarkParser.CL);
                this.state = 5873;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 738, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5870;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5875;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 738, this._ctx);
                }
                this.state = 5885;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 740, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5876;
                                this.bitElem();
                                this.state = 5880;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 739, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5877;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5882;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 739, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5887;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 740, this._ctx);
                }
                this.state = 5909;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2) {
                    {
                        this.state = 5903;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 5888;
                                            _la = this._input.LA(1);
                                            if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                            this.state = 5890;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                                                {
                                                    this.state = 5889;
                                                    this.s_and_w();
                                                }
                                            }
                                            this.state = 5899;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            do {
                                                {
                                                    {
                                                        this.state = 5895;
                                                        this._errHandler.sync(this);
                                                        _la = this._input.LA(1);
                                                        while (_la === bitmarkParser.NL) {
                                                            {
                                                                {
                                                                    this.state = 5892;
                                                                    this.match(bitmarkParser.NL);
                                                                }
                                                            }
                                                            this.state = 5897;
                                                            this._errHandler.sync(this);
                                                            _la = this._input.LA(1);
                                                        }
                                                        this.state = 5898;
                                                        this.bullet_item();
                                                    }
                                                }
                                                this.state = 5901;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            } while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 5905;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 744, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        this.state = 5907;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey_1() {
        let _localctx = new Survey_1Context(this._ctx, this.state);
        this.enterRule(_localctx, 480, bitmarkParser.RULE_survey_1);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5911;
                this.match(bitmarkParser.BitSurvey1);
                this.state = 5912;
                this.format();
                this.state = 5913;
                this.match(bitmarkParser.CL);
                this.state = 5917;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 746, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5914;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5919;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 746, this._ctx);
                }
                this.state = 5929;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 748, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5920;
                                this.bitElem();
                                this.state = 5924;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 747, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5921;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5926;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 747, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5931;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 748, this._ctx);
                }
                this.state = 5946;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2) {
                    {
                        this.state = 5940;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 5932;
                                            _la = this._input.LA(1);
                                            if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                            this.state = 5933;
                                            this.s_and_w();
                                            this.state = 5936;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            do {
                                                {
                                                    {
                                                        this.state = 5934;
                                                        this.match(bitmarkParser.NL);
                                                        this.state = 5935;
                                                        this.bullet_item();
                                                    }
                                                }
                                                this.state = 5938;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            } while (_la === bitmarkParser.NL);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 5942;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 750, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        this.state = 5944;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey_anonymous() {
        let _localctx = new Survey_anonymousContext(this._ctx, this.state);
        this.enterRule(_localctx, 482, bitmarkParser.RULE_survey_anonymous);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5948;
                this.match(bitmarkParser.BitSurveyanon);
                this.state = 5949;
                this.format();
                this.state = 5950;
                this.match(bitmarkParser.CL);
                this.state = 5954;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 752, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5951;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5956;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 752, this._ctx);
                }
                this.state = 5966;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 754, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5957;
                                this.bitElem();
                                this.state = 5961;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 753, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5958;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 5963;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 753, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 5968;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 754, this._ctx);
                }
                this.state = 5983;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2) {
                    {
                        this.state = 5977;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 5969;
                                            _la = this._input.LA(1);
                                            if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                            this.state = 5970;
                                            this.s_and_w();
                                            this.state = 5973;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            do {
                                                {
                                                    {
                                                        this.state = 5971;
                                                        this.match(bitmarkParser.NL);
                                                        this.state = 5972;
                                                        this.bullet_item();
                                                    }
                                                }
                                                this.state = 5975;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            } while (_la === bitmarkParser.NL);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 5979;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 756, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        this.state = 5981;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey_anonymous_1() {
        let _localctx = new Survey_anonymous_1Context(this._ctx, this.state);
        this.enterRule(_localctx, 484, bitmarkParser.RULE_survey_anonymous_1);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5985;
                this.match(bitmarkParser.BitSurveyanon1);
                this.state = 5986;
                this.format();
                this.state = 5987;
                this.match(bitmarkParser.CL);
                this.state = 5991;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 758, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5988;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 5993;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 758, this._ctx);
                }
                this.state = 6003;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 760, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5994;
                                this.bitElem();
                                this.state = 5998;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 759, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 5995;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 6000;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 759, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 6005;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 760, this._ctx);
                }
                this.state = 6020;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2) {
                    {
                        this.state = 6014;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 6006;
                                            _la = this._input.LA(1);
                                            if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                            this.state = 6007;
                                            this.s_and_w();
                                            this.state = 6010;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            do {
                                                {
                                                    {
                                                        this.state = 6008;
                                                        this.match(bitmarkParser.NL);
                                                        this.state = 6009;
                                                        this.bullet_item();
                                                    }
                                                }
                                                this.state = 6012;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            } while (_la === bitmarkParser.NL);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 6016;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 762, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        this.state = 6018;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    self_assessment() {
        let _localctx = new Self_assessmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 486, bitmarkParser.RULE_self_assessment);
        let _la;
        try {
            let _alt;
            this.state = 6103;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 777, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6022;
                        this.match(bitmarkParser.BitSelfassess);
                        this.state = 6023;
                        this.format();
                        this.state = 6024;
                        this.match(bitmarkParser.CL);
                        this.state = 6028;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 764, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6025;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                            }
                            this.state = 6030;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 764, this._ctx);
                        }
                        this.state = 6040;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 766, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6031;
                                        this.bitElem();
                                        this.state = 6035;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 765, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 6032;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                            }
                                            this.state = 6037;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 765, this._ctx);
                                        }
                                    }
                                }
                            }
                            this.state = 6042;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 766, this._ctx);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6043;
                        this.match(bitmarkParser.BitSelfassess);
                        this.state = 6044;
                        this.format();
                        this.state = 6045;
                        this.match(bitmarkParser.CL);
                        this.state = 6049;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.NL) {
                            {
                                {
                                    this.state = 6046;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            this.state = 6051;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6061;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (bitmarkParser.OPDOLL - 226)) | (1 << (bitmarkParser.OPRANGLES - 226)) | (1 << (bitmarkParser.OPRANGLEL - 226)) | (1 << (bitmarkParser.OPDANGLE - 226)) | (1 << (bitmarkParser.OPU - 226)) | (1 << (bitmarkParser.OPB - 226)) | (1 << (bitmarkParser.OPQ - 226)) | (1 << (bitmarkParser.OPA - 226)) | (1 << (bitmarkParser.OPS - 226)) | (1 << (bitmarkParser.OPHASH - 226)) | (1 << (bitmarkParser.OPC - 226)) | (1 << (bitmarkParser.COLON - 226)) | (1 << (bitmarkParser.AMP - 226)) | (1 << (bitmarkParser.Greater - 226)) | (1 << (bitmarkParser.Less - 226)) | (1 << (bitmarkParser.RightAngle - 226)) | (1 << (bitmarkParser.RightArrow - 226)) | (1 << (bitmarkParser.DBLEQ - 226)) | (1 << (bitmarkParser.QUOTE_INDEX - 226)))) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (bitmarkParser.DCANY - 258)) | (1 << (bitmarkParser.ArticleText - 258)) | (1 << (bitmarkParser.NUMERIC - 258)) | (1 << (bitmarkParser.STRING - 258)) | (1 << (bitmarkParser.NOTBITMARK - 258)) | (1 << (bitmarkParser.ELIPSIS - 258)) | (1 << (bitmarkParser.SENTENCE - 258)) | (1 << (bitmarkParser.BARSTRING - 258)) | (1 << (bitmarkParser.AtProgress - 258)) | (1 << (bitmarkParser.AtReference - 258)) | (1 << (bitmarkParser.AtProgressPoints - 258)) | (1 << (bitmarkParser.AtExampleWithStr - 258)) | (1 << (bitmarkParser.AtExamplecol - 258)) | (1 << (bitmarkParser.AtExamplecl - 258)) | (1 << (bitmarkParser.AtSampleSolution - 258)) | (1 << (bitmarkParser.AtPartialAnswerS - 258)) | (1 << (bitmarkParser.AtPartialAnswer - 258)) | (1 << (bitmarkParser.AtLabeltrue - 258)) | (1 << (bitmarkParser.AtLabelfalse - 258)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (bitmarkParser.OpAtCopyright - 295)) | (1 << (bitmarkParser.OpAtIsTracked - 295)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 295)) | (1 << (bitmarkParser.AtDate - 295)) | (1 << (bitmarkParser.AmpAudio - 295)) | (1 << (bitmarkParser.AmpImage - 295)) | (1 << (bitmarkParser.AmpVideo - 295)) | (1 << (bitmarkParser.AmpArticle - 295)) | (1 << (bitmarkParser.AmpDocument - 295)) | (1 << (bitmarkParser.AmpApp - 295)) | (1 << (bitmarkParser.AmpWebsite - 295)) | (1 << (bitmarkParser.AmpStillImageFilm - 295)) | (1 << (bitmarkParser.OpAmpAudio - 295)) | (1 << (bitmarkParser.OpAmpImage - 295)) | (1 << (bitmarkParser.OpAmpImageZoom - 295)) | (1 << (bitmarkParser.OpAmpVideo - 295)) | (1 << (bitmarkParser.OpAmpArticle - 295)) | (1 << (bitmarkParser.OpAmpDocument - 295)) | (1 << (bitmarkParser.OpAmpApp - 295)) | (1 << (bitmarkParser.OpAmpWebsite - 295)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 295)) | (1 << (bitmarkParser.BracEnclose - 295)) | (1 << (bitmarkParser.AmpAudioLink - 295)) | (1 << (bitmarkParser.AmpImageLink - 295)) | (1 << (bitmarkParser.AmpVideoLink - 295)) | (1 << (bitmarkParser.AmpArticleLink - 295)))) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & ((1 << (bitmarkParser.AmpDocumentLink - 327)) | (1 << (bitmarkParser.AmpAppLink - 327)) | (1 << (bitmarkParser.AmpWebsiteLink - 327)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.OpAmpAudioLink - 327)) | (1 << (bitmarkParser.OpAmpImageLink - 327)) | (1 << (bitmarkParser.OpAmpVideoLink - 327)) | (1 << (bitmarkParser.OpAmpArticleLink - 327)) | (1 << (bitmarkParser.OpAmpDocumentLink - 327)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 327)) | (1 << (bitmarkParser.OpAmpAppLink - 327)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 327)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 327)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 327)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 327)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 327)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 327)) | (1 << (bitmarkParser.BitmarkMinus - 327)) | (1 << (bitmarkParser.BitmarkPlus - 327)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                            {
                                {
                                    this.state = 6052;
                                    this.bitElem();
                                    this.state = 6056;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 6053;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 6058;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            this.state = 6063;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6077;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 6064;
                                            _la = this._input.LA(1);
                                            if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                            this.state = 6065;
                                            this.self_assess_s_and_w();
                                            this.state = 6073;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            do {
                                                {
                                                    {
                                                        this.state = 6069;
                                                        this._errHandler.sync(this);
                                                        _la = this._input.LA(1);
                                                        while (_la === bitmarkParser.NL) {
                                                            {
                                                                {
                                                                    this.state = 6066;
                                                                    this.match(bitmarkParser.NL);
                                                                }
                                                            }
                                                            this.state = 6071;
                                                            this._errHandler.sync(this);
                                                            _la = this._input.LA(1);
                                                        }
                                                        this.state = 6072;
                                                        this.bullet_item();
                                                    }
                                                }
                                                this.state = 6075;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            } while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 6079;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 772, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        this.state = 6081;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6085;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 773, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6082;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                            }
                            this.state = 6087;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 773, this._ctx);
                        }
                        this.state = 6101;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 776, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6088;
                                    this.resource();
                                    this.state = 6098;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 775, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 6092;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                    while (_la === bitmarkParser.NL) {
                                                        {
                                                            {
                                                                this.state = 6089;
                                                                this.match(bitmarkParser.NL);
                                                            }
                                                        }
                                                        this.state = 6094;
                                                        this._errHandler.sync(this);
                                                        _la = this._input.LA(1);
                                                    }
                                                    this.state = 6095;
                                                    this.resource();
                                                }
                                            }
                                        }
                                        this.state = 6100;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 775, this._ctx);
                                    }
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    self_assess_s_and_w() {
        let _localctx = new Self_assess_s_and_wContext(this._ctx, this.state);
        this.enterRule(_localctx, 488, bitmarkParser.RULE_self_assess_s_and_w);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6106;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 6105;
                                    _la = this._input.LA(1);
                                    if (_la <= 0 || (_la === bitmarkParser.OPBUL)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 6108;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 778, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    atpoint() {
        let _localctx = new AtpointContext(this._ctx, this.state);
        this.enterRule(_localctx, 490, bitmarkParser.RULE_atpoint);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6110;
                this.match(bitmarkParser.AtPoints);
                this.state = 6111;
                this.match(bitmarkParser.NUMERIC);
                this.state = 6112;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    format() {
        let _localctx = new FormatContext(this._ctx, this.state);
        this.enterRule(_localctx, 492, bitmarkParser.RULE_format);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6117;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 779, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 6114;
                                this.resource_format();
                            }
                        }
                    }
                    this.state = 6119;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 779, this._ctx);
                }
                this.state = 6125;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpImageZoom - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpPdf - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpDocumentDownload - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 342)) & ~0x1F) === 0 && ((1 << (_la - 342)) & ((1 << (bitmarkParser.AmpVideoEmbed - 342)) | (1 << (bitmarkParser.AmpDocumentEmbed - 342)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 342)) | (1 << (bitmarkParser.ColonText - 342)) | (1 << (bitmarkParser.ColonJson - 342)))) !== 0)) {
                    {
                        this.state = 6123;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.ColonText:
                                {
                                    this.state = 6120;
                                    this.match(bitmarkParser.ColonText);
                                }
                                break;
                            case bitmarkParser.ColonJson:
                                {
                                    this.state = 6121;
                                    this.match(bitmarkParser.ColonJson);
                                }
                                break;
                            case bitmarkParser.AmpAudio:
                            case bitmarkParser.AmpImage:
                            case bitmarkParser.AmpImageZoom:
                            case bitmarkParser.AmpVideo:
                            case bitmarkParser.AmpArticle:
                            case bitmarkParser.AmpDocument:
                            case bitmarkParser.AmpApp:
                            case bitmarkParser.AmpWebsite:
                            case bitmarkParser.AmpStillImageFilm:
                            case bitmarkParser.AmpPdf:
                            case bitmarkParser.AmpAudioLink:
                            case bitmarkParser.AmpImageLink:
                            case bitmarkParser.AmpVideoLink:
                            case bitmarkParser.AmpArticleLink:
                            case bitmarkParser.AmpDocumentLink:
                            case bitmarkParser.AmpDocumentDownload:
                            case bitmarkParser.AmpAppLink:
                            case bitmarkParser.AmpWebsiteLink:
                            case bitmarkParser.AmpStillImageFilmLink:
                            case bitmarkParser.AmpVideoEmbed:
                            case bitmarkParser.AmpDocumentEmbed:
                            case bitmarkParser.AmpStillImageFilmEmbed:
                                {
                                    this.state = 6122;
                                    this.resource_format_extra();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 6127;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource_format() {
        let _localctx = new Resource_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 494, bitmarkParser.RULE_resource_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6128;
                _la = this._input.LA(1);
                if (!(((((_la - 306)) & ~0x1F) === 0 && ((1 << (_la - 306)) & ((1 << (bitmarkParser.AmpArticle - 306)) | (1 << (bitmarkParser.AmpDocument - 306)) | (1 << (bitmarkParser.AmpWebsite - 306)) | (1 << (bitmarkParser.AmpStillImageFilm - 306)) | (1 << (bitmarkParser.AmpAudioLink - 306)) | (1 << (bitmarkParser.AmpImageLink - 306)) | (1 << (bitmarkParser.AmpVideoLink - 306)) | (1 << (bitmarkParser.AmpArticleLink - 306)) | (1 << (bitmarkParser.AmpDocumentLink - 306)) | (1 << (bitmarkParser.AmpDocumentDownload - 306)) | (1 << (bitmarkParser.AmpAppLink - 306)) | (1 << (bitmarkParser.AmpWebsiteLink - 306)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 306)))) !== 0) || ((((_la - 342)) & ~0x1F) === 0 && ((1 << (_la - 342)) & ((1 << (bitmarkParser.AmpVideoEmbed - 342)) | (1 << (bitmarkParser.AmpAudioEmbed - 342)) | (1 << (bitmarkParser.AmpDocumentEmbed - 342)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 342)) | (1 << (bitmarkParser.BitmarkMinus - 342)) | (1 << (bitmarkParser.BitmarkPlus - 342)) | (1 << (bitmarkParser.ColonJson - 342)) | (1 << (bitmarkParser.Prosemirror - 342)) | (1 << (bitmarkParser.Placeholder - 342)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource_format_extra() {
        let _localctx = new Resource_format_extraContext(this._ctx, this.state);
        this.enterRule(_localctx, 496, bitmarkParser.RULE_resource_format_extra);
        try {
            this.state = 6139;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AmpImage:
                case bitmarkParser.AmpImageZoom:
                case bitmarkParser.AmpImageLink:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6130;
                        this.image_format();
                    }
                    break;
                case bitmarkParser.AmpAudio:
                case bitmarkParser.AmpAudioLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6131;
                        this.audio_format();
                    }
                    break;
                case bitmarkParser.AmpVideo:
                case bitmarkParser.AmpVideoLink:
                case bitmarkParser.AmpVideoEmbed:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6132;
                        this.video_format();
                    }
                    break;
                case bitmarkParser.AmpArticle:
                case bitmarkParser.AmpArticleLink:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6133;
                        this.article_format();
                    }
                    break;
                case bitmarkParser.AmpDocument:
                case bitmarkParser.AmpDocumentLink:
                case bitmarkParser.AmpDocumentDownload:
                case bitmarkParser.AmpDocumentEmbed:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6134;
                        this.document_format();
                    }
                    break;
                case bitmarkParser.AmpApp:
                case bitmarkParser.AmpAppLink:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 6135;
                        this.app_format();
                    }
                    break;
                case bitmarkParser.AmpWebsite:
                case bitmarkParser.AmpWebsiteLink:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 6136;
                        this.website_format();
                    }
                    break;
                case bitmarkParser.AmpStillImageFilm:
                case bitmarkParser.AmpStillImageFilmLink:
                case bitmarkParser.AmpStillImageFilmEmbed:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 6137;
                        this.stillimagefilm_format();
                    }
                    break;
                case bitmarkParser.AmpPdf:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 6138;
                        this.match(bitmarkParser.AmpPdf);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    format2() {
        let _localctx = new Format2Context(this._ctx, this.state);
        this.enterRule(_localctx, 498, bitmarkParser.RULE_format2);
        try {
            this.state = 6147;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.BitmarkMinus:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6141;
                        this.match(bitmarkParser.BitmarkMinus);
                    }
                    break;
                case bitmarkParser.BitmarkPlus:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6142;
                        this.match(bitmarkParser.BitmarkPlus);
                    }
                    break;
                case bitmarkParser.ColonText:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6143;
                        this.match(bitmarkParser.ColonText);
                    }
                    break;
                case bitmarkParser.Placeholder:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6144;
                        this.match(bitmarkParser.Placeholder);
                    }
                    break;
                case bitmarkParser.ColonJson:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6145;
                        this.match(bitmarkParser.ColonJson);
                    }
                    break;
                case bitmarkParser.CL:
                    this.enterOuterAlt(_localctx, 6);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_format() {
        let _localctx = new Image_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 500, bitmarkParser.RULE_image_format);
        let _la;
        try {
            this.state = 6162;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AmpImage:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6149;
                        this.match(bitmarkParser.AmpImage);
                        this.state = 6152;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.Image_type:
                                {
                                    {
                                        this.state = 6150;
                                        this.match(bitmarkParser.Image_type);
                                    }
                                }
                                break;
                            case bitmarkParser.DotArticleAtt:
                                {
                                    {
                                        this.state = 6151;
                                        this.match(bitmarkParser.DotArticleAtt);
                                    }
                                }
                                break;
                            case bitmarkParser.CL:
                            case bitmarkParser.AmpAudio:
                            case bitmarkParser.AmpImage:
                            case bitmarkParser.AmpImageZoom:
                            case bitmarkParser.AmpVideo:
                            case bitmarkParser.AmpArticle:
                            case bitmarkParser.AmpDocument:
                            case bitmarkParser.AmpApp:
                            case bitmarkParser.AmpWebsite:
                            case bitmarkParser.AmpStillImageFilm:
                            case bitmarkParser.AmpPdf:
                            case bitmarkParser.AmpAudioLink:
                            case bitmarkParser.AmpImageLink:
                            case bitmarkParser.AmpVideoLink:
                            case bitmarkParser.AmpArticleLink:
                            case bitmarkParser.AmpDocumentLink:
                            case bitmarkParser.AmpDocumentDownload:
                            case bitmarkParser.AmpAppLink:
                            case bitmarkParser.AmpWebsiteLink:
                            case bitmarkParser.AmpStillImageFilmLink:
                            case bitmarkParser.AmpVideoEmbed:
                            case bitmarkParser.AmpDocumentEmbed:
                            case bitmarkParser.AmpStillImageFilmEmbed:
                            case bitmarkParser.ColonText:
                            case bitmarkParser.ColonJson:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case bitmarkParser.AmpImageLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6154;
                        this.match(bitmarkParser.AmpImageLink);
                        this.state = 6156;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 6155;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.AmpImageZoom:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6158;
                        this.match(bitmarkParser.AmpImageZoom);
                        this.state = 6160;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 6159;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    video_format() {
        let _localctx = new Video_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 502, bitmarkParser.RULE_video_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6164;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpVideo || _la === bitmarkParser.AmpVideoLink || _la === bitmarkParser.AmpVideoEmbed)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6167;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.COLON) {
                    {
                        this.state = 6165;
                        this.match(bitmarkParser.COLON);
                        this.state = 6166;
                        this.match(bitmarkParser.Video_type);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    article_format() {
        let _localctx = new Article_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 504, bitmarkParser.RULE_article_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6169;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpArticle || _la === bitmarkParser.AmpArticleLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    document_format() {
        let _localctx = new Document_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 506, bitmarkParser.RULE_document_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6171;
                _la = this._input.LA(1);
                if (!(((((_la - 307)) & ~0x1F) === 0 && ((1 << (_la - 307)) & ((1 << (bitmarkParser.AmpDocument - 307)) | (1 << (bitmarkParser.AmpDocumentLink - 307)) | (1 << (bitmarkParser.AmpDocumentDownload - 307)))) !== 0) || _la === bitmarkParser.AmpDocumentEmbed)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_format() {
        let _localctx = new App_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 508, bitmarkParser.RULE_app_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6173;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpApp || _la === bitmarkParser.AmpAppLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    website_format() {
        let _localctx = new Website_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 510, bitmarkParser.RULE_website_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6175;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpWebsite || _la === bitmarkParser.AmpWebsiteLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stillimagefilm_format() {
        let _localctx = new Stillimagefilm_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 512, bitmarkParser.RULE_stillimagefilm_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6177;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpStillImageFilm || _la === bitmarkParser.AmpStillImageFilmLink || _la === bitmarkParser.AmpStillImageFilmEmbed)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_article_format() {
        let _localctx = new Op_article_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 514, bitmarkParser.RULE_op_article_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6179;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.OpAmpArticle || _la === bitmarkParser.OpAmpArticleLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_document_format() {
        let _localctx = new Op_document_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 516, bitmarkParser.RULE_op_document_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6181;
                _la = this._input.LA(1);
                if (!(((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (bitmarkParser.OpAmpDocument - 318)) | (1 << (bitmarkParser.OpAmpDocumentLink - 318)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 318)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 318)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_app_format() {
        let _localctx = new Op_app_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 518, bitmarkParser.RULE_op_app_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6183;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.OpAmpApp || _la === bitmarkParser.OpAmpAppLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_website_format() {
        let _localctx = new Op_website_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 520, bitmarkParser.RULE_op_website_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6185;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.OpAmpWebsite || _la === bitmarkParser.OpAmpWebsiteLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_video_format() {
        let _localctx = new Op_video_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 522, bitmarkParser.RULE_op_video_format);
        try {
            this.state = 6202;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpVideo:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6187;
                        this.match(bitmarkParser.OpAmpVideo);
                        this.state = 6190;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 789, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6188;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 6189;
                                    this.match(bitmarkParser.Video_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpVideoLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6192;
                        this.match(bitmarkParser.OpAmpVideoLink);
                        this.state = 6195;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 790, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6193;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 6194;
                                    this.match(bitmarkParser.Video_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpVideoEmbed:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6197;
                        this.match(bitmarkParser.OpAmpVideoEmbed);
                        this.state = 6200;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 791, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6198;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 6199;
                                    this.match(bitmarkParser.Video_type);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_stillimagefilm_format() {
        let _localctx = new Op_stillimagefilm_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 524, bitmarkParser.RULE_op_stillimagefilm_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6204;
                _la = this._input.LA(1);
                if (!(((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & ((1 << (bitmarkParser.OpAmpStillImageFilm - 321)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 321)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 321)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    articlebit() {
        let _localctx = new ArticlebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 526, bitmarkParser.RULE_articlebit);
        try {
            this.state = 6212;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpArticle:
                case bitmarkParser.OpAmpArticleLink:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6206;
                        this.op_article_format();
                        this.state = 6207;
                        this.match(bitmarkParser.COLON);
                        this.state = 6208;
                        this.url();
                        this.state = 6209;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.ArticleText:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6211;
                        this.match(bitmarkParser.ArticleText);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    documentbit() {
        let _localctx = new DocumentbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 528, bitmarkParser.RULE_documentbit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6214;
                this.op_document_format();
                this.state = 6215;
                this.match(bitmarkParser.COLON);
                this.state = 6216;
                this.url();
                this.state = 6217;
                this.match(bitmarkParser.CL);
                this.state = 6222;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPATALT) {
                    {
                        this.state = 6218;
                        this.match(bitmarkParser.OPATALT);
                        this.state = 6219;
                        this.words();
                        this.state = 6220;
                        this.match(bitmarkParser.CL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    websitebit() {
        let _localctx = new WebsitebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 530, bitmarkParser.RULE_websitebit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6224;
                this.op_website_format();
                this.state = 6225;
                this.match(bitmarkParser.COLON);
                this.state = 6226;
                this.url();
                this.state = 6227;
                this.match(bitmarkParser.CL);
                this.state = 6232;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPATALT) {
                    {
                        this.state = 6228;
                        this.match(bitmarkParser.OPATALT);
                        this.state = 6229;
                        this.words();
                        this.state = 6230;
                        this.match(bitmarkParser.CL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    appbit() {
        let _localctx = new AppbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 532, bitmarkParser.RULE_appbit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6234;
                this.op_app_format();
                this.state = 6235;
                this.match(bitmarkParser.COLON);
                this.state = 6238;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.URL:
                        {
                            this.state = 6236;
                            this.url();
                        }
                        break;
                    case bitmarkParser.TEL:
                        {
                            this.state = 6237;
                            this.telephone();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 6240;
                this.match(bitmarkParser.CL);
                this.state = 6245;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPATALT) {
                    {
                        this.state = 6241;
                        this.match(bitmarkParser.OPATALT);
                        this.state = 6242;
                        this.words();
                        this.state = 6243;
                        this.match(bitmarkParser.CL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stillimagefilmbit() {
        let _localctx = new StillimagefilmbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 534, bitmarkParser.RULE_stillimagefilmbit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6247;
                this.stillimg_one();
                this.state = 6251;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 798, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 6248;
                                this.resource_chained();
                            }
                        }
                    }
                    this.state = 6253;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 798, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stillimg_one() {
        let _localctx = new Stillimg_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 536, bitmarkParser.RULE_stillimg_one);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6254;
                this.op_stillimagefilm_format();
                this.state = 6255;
                this.match(bitmarkParser.COLON);
                this.state = 6259;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 6256;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 6261;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 6262;
                this.url();
                this.state = 6263;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    videobit() {
        let _localctx = new VideobitContext(this._ctx, this.state);
        this.enterRule(_localctx, 538, bitmarkParser.RULE_videobit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6265;
                this.video_one();
                this.state = 6269;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 800, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 6266;
                                this.resource_chained();
                            }
                        }
                    }
                    this.state = 6271;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 800, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    video_one() {
        let _localctx = new Video_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 540, bitmarkParser.RULE_video_one);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6272;
                this.op_video_format();
                this.state = 6273;
                this.match(bitmarkParser.COLON);
                this.state = 6274;
                this.url();
                this.state = 6275;
                this.match(bitmarkParser.CL);
                this.state = 6280;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 801, this._ctx)) {
                    case 1:
                        {
                            this.state = 6276;
                            this.match(bitmarkParser.OPATALT);
                            this.state = 6277;
                            this.words();
                            this.state = 6278;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    imagebit() {
        let _localctx = new ImagebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 542, bitmarkParser.RULE_imagebit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6282;
                this.image_one();
                this.state = 6286;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 802, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 6283;
                                this.image_chained();
                            }
                        }
                    }
                    this.state = 6288;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 802, this._ctx);
                }
                this.state = 6291;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 803, this._ctx)) {
                    case 1:
                        {
                            this.state = 6289;
                            this.match(bitmarkParser.NL);
                            this.state = 6290;
                            this.match(bitmarkParser.ShowInIndex);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_one() {
        let _localctx = new Image_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 544, bitmarkParser.RULE_image_one);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6293;
                this.op_image_format();
                this.state = 6294;
                this.match(bitmarkParser.COLON);
                this.state = 6298;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 6295;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 6300;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 6301;
                this.url();
                this.state = 6302;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_image_format() {
        let _localctx = new Op_image_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 546, bitmarkParser.RULE_op_image_format);
        let _la;
        try {
            this.state = 6317;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpImage:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6304;
                        this.match(bitmarkParser.OpAmpImage);
                        this.state = 6307;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.Image_type:
                                {
                                    {
                                        this.state = 6305;
                                        this.match(bitmarkParser.Image_type);
                                    }
                                }
                                break;
                            case bitmarkParser.DotArticleAtt:
                                {
                                    {
                                        this.state = 6306;
                                        this.match(bitmarkParser.DotArticleAtt);
                                    }
                                }
                                break;
                            case bitmarkParser.COLON:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpImageLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6309;
                        this.match(bitmarkParser.OpAmpImageLink);
                        this.state = 6311;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 6310;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.OpAmpImageZoom:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6313;
                        this.match(bitmarkParser.OpAmpImageZoom);
                        this.state = 6315;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 6314;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_chained() {
        let _localctx = new Image_chainedContext(this._ctx, this.state);
        this.enterRule(_localctx, 548, bitmarkParser.RULE_image_chained);
        let _la;
        try {
            let _alt;
            this.state = 6336;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtSrc:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6319;
                        this.match(bitmarkParser.AtSrc);
                        this.state = 6320;
                        this.match(bitmarkParser.COLON);
                        this.state = 6321;
                        this.url();
                        this.state = 6322;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtWidth:
                case bitmarkParser.AtHeight:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6324;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6325;
                        this.match(bitmarkParser.COLON);
                        this.state = 6326;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 6327;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPATALT:
                case bitmarkParser.OpAtCaption:
                case bitmarkParser.OpAtLicense:
                case bitmarkParser.OpAtCopyright:
                case bitmarkParser.OpAtSearch:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6328;
                        _la = this._input.LA(1);
                        if (!(((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (bitmarkParser.OPATALT - 290)) | (1 << (bitmarkParser.OpAtCaption - 290)) | (1 << (bitmarkParser.OpAtLicense - 290)) | (1 << (bitmarkParser.OpAtCopyright - 290)) | (1 << (bitmarkParser.OpAtSearch - 290)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6332;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 809, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 6329;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 6334;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 809, this._ctx);
                        }
                        this.state = 6335;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_chained4match() {
        let _localctx = new Image_chained4matchContext(this._ctx, this.state);
        this.enterRule(_localctx, 550, bitmarkParser.RULE_image_chained4match);
        let _la;
        try {
            let _alt;
            this.state = 6355;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtSrc:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6338;
                        this.match(bitmarkParser.AtSrc);
                        this.state = 6339;
                        this.match(bitmarkParser.COLON);
                        this.state = 6340;
                        this.url();
                        this.state = 6341;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtWidth:
                case bitmarkParser.AtHeight:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6343;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6344;
                        this.match(bitmarkParser.COLON);
                        this.state = 6345;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 6346;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPATALT:
                case bitmarkParser.OpAtCaption:
                case bitmarkParser.OpAtLicense:
                case bitmarkParser.OpAtCopyright:
                case bitmarkParser.OpAtSearch:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6347;
                        _la = this._input.LA(1);
                        if (!(((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (bitmarkParser.OPATALT - 290)) | (1 << (bitmarkParser.OpAtCaption - 290)) | (1 << (bitmarkParser.OpAtLicense - 290)) | (1 << (bitmarkParser.OpAtCopyright - 290)) | (1 << (bitmarkParser.OpAtSearch - 290)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6351;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 811, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 6348;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 6353;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 811, this._ctx);
                        }
                        this.state = 6354;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    audiobit() {
        let _localctx = new AudiobitContext(this._ctx, this.state);
        this.enterRule(_localctx, 552, bitmarkParser.RULE_audiobit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6357;
                this.audio_one();
                this.state = 6361;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 813, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 6358;
                                this.resource_chained();
                            }
                        }
                    }
                    this.state = 6363;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 813, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    audio_one() {
        let _localctx = new Audio_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 554, bitmarkParser.RULE_audio_one);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6364;
                this.op_audio_format();
                this.state = 6365;
                this.match(bitmarkParser.COLON);
                this.state = 6366;
                this.url();
                this.state = 6367;
                this.match(bitmarkParser.CL);
                this.state = 6372;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 814, this._ctx)) {
                    case 1:
                        {
                            this.state = 6368;
                            this.match(bitmarkParser.OPATALT);
                            this.state = 6369;
                            this.words();
                            this.state = 6370;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    audio_format() {
        let _localctx = new Audio_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 556, bitmarkParser.RULE_audio_format);
        let _la;
        try {
            this.state = 6384;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AmpAudio:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6374;
                        this.match(bitmarkParser.AmpAudio);
                        this.state = 6377;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.COLON) {
                            {
                                this.state = 6375;
                                this.match(bitmarkParser.COLON);
                                this.state = 6376;
                                this.match(bitmarkParser.Audio_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.AmpAudioLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6379;
                        this.match(bitmarkParser.AmpAudioLink);
                        this.state = 6382;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.COLON) {
                            {
                                this.state = 6380;
                                this.match(bitmarkParser.COLON);
                                this.state = 6381;
                                this.match(bitmarkParser.Audio_type);
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_audio_format() {
        let _localctx = new Op_audio_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 558, bitmarkParser.RULE_op_audio_format);
        try {
            this.state = 6401;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpAudio:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6386;
                        this.match(bitmarkParser.OpAmpAudio);
                        this.state = 6389;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 818, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6387;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 6388;
                                    this.match(bitmarkParser.Audio_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpAudioLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6391;
                        this.match(bitmarkParser.OpAmpAudioLink);
                        this.state = 6394;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 819, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6392;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 6393;
                                    this.match(bitmarkParser.Audio_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpAudioEmbed:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6396;
                        this.match(bitmarkParser.OpAmpAudioEmbed);
                        this.state = 6399;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 820, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6397;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 6398;
                                    this.match(bitmarkParser.Audio_type);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource_chained() {
        let _localctx = new Resource_chainedContext(this._ctx, this.state);
        this.enterRule(_localctx, 560, bitmarkParser.RULE_resource_chained);
        let _la;
        try {
            let _alt;
            this.state = 6434;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPA:
                case bitmarkParser.AtSrc:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6406;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.OPA:
                                {
                                    this.state = 6403;
                                    this.match(bitmarkParser.OPA);
                                    this.state = 6404;
                                    this.s_and_w();
                                }
                                break;
                            case bitmarkParser.AtSrc:
                                {
                                    this.state = 6405;
                                    this.match(bitmarkParser.AtSrc);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                        this.state = 6408;
                        this.match(bitmarkParser.COLON);
                        this.state = 6412;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 823, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6409;
                                        this.match(bitmarkParser.S);
                                    }
                                }
                            }
                            this.state = 6414;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 823, this._ctx);
                        }
                        this.state = 6417;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 6417;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.S:
                                    case bitmarkParser.OPS:
                                    case bitmarkParser.COLON:
                                    case bitmarkParser.AMP:
                                    case bitmarkParser.Greater:
                                    case bitmarkParser.Less:
                                    case bitmarkParser.RightAngle:
                                    case bitmarkParser.RightArrow:
                                    case bitmarkParser.DBLEQ:
                                    case bitmarkParser.QUOTE_INDEX:
                                    case bitmarkParser.NUMERIC:
                                    case bitmarkParser.STRING:
                                    case bitmarkParser.NOTBITMARK:
                                    case bitmarkParser.ELIPSIS:
                                    case bitmarkParser.SENTENCE:
                                    case bitmarkParser.BARSTRING:
                                    case bitmarkParser.AmpAudio:
                                    case bitmarkParser.AmpImage:
                                    case bitmarkParser.AmpVideo:
                                    case bitmarkParser.AmpArticle:
                                    case bitmarkParser.AmpDocument:
                                    case bitmarkParser.AmpApp:
                                    case bitmarkParser.AmpWebsite:
                                    case bitmarkParser.AmpStillImageFilm:
                                    case bitmarkParser.AmpAudioLink:
                                    case bitmarkParser.AmpImageLink:
                                    case bitmarkParser.AmpVideoLink:
                                    case bitmarkParser.AmpArticleLink:
                                    case bitmarkParser.AmpDocumentLink:
                                    case bitmarkParser.AmpAppLink:
                                    case bitmarkParser.AmpWebsiteLink:
                                    case bitmarkParser.AmpStillImageFilmLink:
                                    case bitmarkParser.BitmarkMinus:
                                    case bitmarkParser.BitmarkPlus:
                                    case bitmarkParser.URL:
                                        {
                                            this.state = 6415;
                                            this.s_and_w();
                                        }
                                        break;
                                    case bitmarkParser.NL:
                                        {
                                            this.state = 6416;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                            this.state = 6419;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                        this.state = 6421;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtWidth:
                case bitmarkParser.AtHeight:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6422;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6423;
                        this.match(bitmarkParser.COLON);
                        this.state = 6424;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 6425;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPATALT:
                case bitmarkParser.OpAtCaption:
                case bitmarkParser.OpAtLicense:
                case bitmarkParser.OpAtCopyright:
                case bitmarkParser.OpAtSearch:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6426;
                        _la = this._input.LA(1);
                        if (!(((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (bitmarkParser.OPATALT - 290)) | (1 << (bitmarkParser.OpAtCaption - 290)) | (1 << (bitmarkParser.OpAtLicense - 290)) | (1 << (bitmarkParser.OpAtCopyright - 290)) | (1 << (bitmarkParser.OpAtSearch - 290)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6430;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 826, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 6427;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 6432;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 826, this._ctx);
                        }
                        this.state = 6433;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    telephone() {
        let _localctx = new TelephoneContext(this._ctx, this.state);
        this.enterRule(_localctx, 562, bitmarkParser.RULE_telephone);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6436;
                this.match(bitmarkParser.TEL);
                this.state = 6437;
                this.match(bitmarkParser.PLUS);
                this.state = 6438;
                this.match(bitmarkParser.NUMERIC);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    url() {
        let _localctx = new UrlContext(this._ctx, this.state);
        this.enterRule(_localctx, 564, bitmarkParser.RULE_url);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6440;
                this.match(bitmarkParser.URL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    item() {
        let _localctx = new ItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 566, bitmarkParser.RULE_item);
        let _la;
        try {
            this.state = 6472;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 834, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6442;
                        this.match(bitmarkParser.OPC);
                        this.state = 6443;
                        this.match(bitmarkParser.CL);
                        this.state = 6451;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 829, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6447;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.S) {
                                        {
                                            {
                                                this.state = 6444;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 6449;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 6450;
                                    this.lead();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6453;
                        this.match(bitmarkParser.OPC);
                        this.state = 6454;
                        this.s_and_w();
                        this.state = 6459;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                            {
                                this.state = 6457;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 830, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 6455;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 6456;
                                            this.s_and_w();
                                        }
                                        break;
                                }
                            }
                            this.state = 6461;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6462;
                        this.match(bitmarkParser.CL);
                        this.state = 6470;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 833, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6466;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.S) {
                                        {
                                            {
                                                this.state = 6463;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 6468;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 6469;
                                    this.lead();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lead() {
        let _localctx = new LeadContext(this._ctx, this.state);
        this.enterRule(_localctx, 568, bitmarkParser.RULE_lead);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6474;
                this.match(bitmarkParser.OPC);
                this.state = 6475;
                this.s_and_w();
                this.state = 6480;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                    {
                        this.state = 6478;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 835, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6476;
                                    this.match(bitmarkParser.COLON);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 6477;
                                    this.s_and_w();
                                }
                                break;
                        }
                    }
                    this.state = 6482;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 6483;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    angleref() {
        let _localctx = new AnglerefContext(this._ctx, this.state);
        this.enterRule(_localctx, 570, bitmarkParser.RULE_angleref);
        let _la;
        try {
            this.state = 6495;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPRANGLES:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6485;
                        this.match(bitmarkParser.OPRANGLES);
                        this.state = 6487;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                            {
                                this.state = 6486;
                                this.s_and_w();
                            }
                        }
                        this.state = 6489;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPRANGLEL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6490;
                        this.match(bitmarkParser.OPRANGLEL);
                        this.state = 6492;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                            {
                                this.state = 6491;
                                this.s_and_w();
                            }
                        }
                        this.state = 6494;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    example() {
        let _localctx = new ExampleContext(this._ctx, this.state);
        this.enterRule(_localctx, 572, bitmarkParser.RULE_example);
        let _la;
        try {
            this.state = 6504;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtExamplecl:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6497;
                        this.match(bitmarkParser.AtExamplecl);
                    }
                    break;
                case bitmarkParser.AtExampleWithStr:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6498;
                        this.match(bitmarkParser.AtExampleWithStr);
                    }
                    break;
                case bitmarkParser.AtExamplecol:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6499;
                        this.match(bitmarkParser.AtExamplecol);
                        this.state = 6501;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.SENTENCE) {
                            {
                                this.state = 6500;
                                this.match(bitmarkParser.SENTENCE);
                            }
                        }
                        this.state = 6503;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bracketed_text() {
        let _localctx = new Bracketed_textContext(this._ctx, this.state);
        this.enterRule(_localctx, 574, bitmarkParser.RULE_bracketed_text);
        let _la;
        try {
            let _alt;
            this.state = 6545;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 849, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6506;
                        this.match(bitmarkParser.BracEnclose);
                        this.state = 6508;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 842, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6507;
                                    this.s_and_w();
                                }
                                break;
                        }
                        this.state = 6531;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                            {
                                {
                                    this.state = 6510;
                                    this.s_and_w();
                                    this.state = 6520;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 844, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 6511;
                                                    this.match(bitmarkParser.NL);
                                                    this.state = 6515;
                                                    this._errHandler.sync(this);
                                                    _alt = this.interpreter.adaptivePredict(this._input, 843, this._ctx);
                                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                                        if (_alt === 1) {
                                                            {
                                                                {
                                                                    this.state = 6512;
                                                                    this.match(bitmarkParser.S);
                                                                }
                                                            }
                                                        }
                                                        this.state = 6517;
                                                        this._errHandler.sync(this);
                                                        _alt = this.interpreter.adaptivePredict(this._input, 843, this._ctx);
                                                    }
                                                }
                                            }
                                        }
                                        this.state = 6522;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 844, this._ctx);
                                    }
                                    this.state = 6526;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 6523;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 6528;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            this.state = 6533;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6534;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6535;
                        this.match(bitmarkParser.BracEnclose);
                        this.state = 6541;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                            {
                                this.state = 6539;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 847, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 6536;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 6537;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 6538;
                                            this.match(bitmarkParser.S);
                                        }
                                        break;
                                }
                            }
                            this.state = 6543;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6544;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    reference() {
        let _localctx = new ReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 576, bitmarkParser.RULE_reference);
        let _la;
        try {
            this.state = 6569;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 854, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6547;
                        this.match(bitmarkParser.AtReference);
                        this.state = 6552;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 6552;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 850, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 6548;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 6549;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 6550;
                                            this.match(bitmarkParser.URL);
                                        }
                                        break;
                                    case 4:
                                        {
                                            this.state = 6551;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                }
                            }
                            this.state = 6554;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                        this.state = 6556;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6557;
                        this.match(bitmarkParser.AtReference);
                        this.state = 6565;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                            {
                                this.state = 6563;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 852, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 6558;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 6559;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 6560;
                                            this.match(bitmarkParser.URL);
                                        }
                                        break;
                                    case 4:
                                        {
                                            this.state = 6561;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    case 5:
                                        {
                                            this.state = 6562;
                                            this.match(bitmarkParser.S);
                                        }
                                        break;
                                }
                            }
                            this.state = 6567;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6568;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    progress() {
        let _localctx = new ProgressContext(this._ctx, this.state);
        this.enterRule(_localctx, 578, bitmarkParser.RULE_progress);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6571;
                this.match(bitmarkParser.AtProgress);
                this.state = 6572;
                this.s_and_w();
                this.state = 6573;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dateprop() {
        let _localctx = new DatepropContext(this._ctx, this.state);
        this.enterRule(_localctx, 580, bitmarkParser.RULE_dateprop);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6575;
                this.match(bitmarkParser.AtDate);
                this.state = 6579;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 6579;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 855, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6576;
                                    this.s_and_w();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 6577;
                                    this.match(bitmarkParser.COLON);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 6578;
                                    this.match(bitmarkParser.NL);
                                }
                                break;
                        }
                    }
                    this.state = 6581;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                this.state = 6583;
                this.match(bitmarkParser.CL);
                this.state = 6585;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 857, this._ctx)) {
                    case 1:
                        {
                            this.state = 6584;
                            this.dateprop_chained();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dateprop_chained() {
        let _localctx = new Dateprop_chainedContext(this._ctx, this.state);
        this.enterRule(_localctx, 582, bitmarkParser.RULE_dateprop_chained);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6587;
                this.match(bitmarkParser.AtDate);
                this.state = 6591;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 6591;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 858, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6588;
                                    this.s_and_w();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 6589;
                                    this.match(bitmarkParser.COLON);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 6590;
                                    this.match(bitmarkParser.NL);
                                }
                                break;
                        }
                    }
                    this.state = 6593;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                this.state = 6595;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    instruction() {
        let _localctx = new InstructionContext(this._ctx, this.state);
        this.enterRule(_localctx, 584, bitmarkParser.RULE_instruction);
        let _la;
        try {
            let _alt;
            this.state = 6643;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 868, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6597;
                        this.match(bitmarkParser.OPB);
                        this.state = 6601;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 860, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6598;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                            }
                            this.state = 6603;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 860, this._ctx);
                        }
                        this.state = 6605;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 861, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6604;
                                    this.s_and_w();
                                }
                                break;
                        }
                        this.state = 6622;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 864, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6616;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        while (_la === bitmarkParser.NL) {
                                            {
                                                {
                                                    this.state = 6607;
                                                    this.match(bitmarkParser.NL);
                                                    this.state = 6611;
                                                    this._errHandler.sync(this);
                                                    _alt = this.interpreter.adaptivePredict(this._input, 862, this._ctx);
                                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                                        if (_alt === 1) {
                                                            {
                                                                {
                                                                    this.state = 6608;
                                                                    this.match(bitmarkParser.S);
                                                                }
                                                            }
                                                        }
                                                        this.state = 6613;
                                                        this._errHandler.sync(this);
                                                        _alt = this.interpreter.adaptivePredict(this._input, 862, this._ctx);
                                                    }
                                                }
                                            }
                                            this.state = 6618;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                        this.state = 6619;
                                        this.s_and_w();
                                    }
                                }
                            }
                            this.state = 6624;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 864, this._ctx);
                        }
                        this.state = 6628;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.NL) {
                            {
                                {
                                    this.state = 6625;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            this.state = 6630;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6631;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6632;
                        this.match(bitmarkParser.OPB);
                        this.state = 6636;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.NL) {
                            {
                                {
                                    this.state = 6633;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            this.state = 6638;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6640;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                            {
                                this.state = 6639;
                                this.s_and_w();
                            }
                        }
                        this.state = 6642;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    hint() {
        let _localctx = new HintContext(this._ctx, this.state);
        this.enterRule(_localctx, 586, bitmarkParser.RULE_hint);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6645;
                this.match(bitmarkParser.OPQ);
                this.state = 6647;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 6646;
                            _la = this._input.LA(1);
                            if (_la <= 0 || (_la === bitmarkParser.CL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    this.state = 6649;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.OPDOT) | (1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitPlaceholder) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.CLOZE) | (1 << bitmarkParser.MATCH) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitBotint) | (1 << bitmarkParser.BitSelfassess) | (1 << bitmarkParser.BitRating))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitAiPrompt - 32)) | (1 << (bitmarkParser.BitNoteAi - 32)) | (1 << (bitmarkParser.BitSummayAi - 32)) | (1 << (bitmarkParser.BitArticleAi - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitLearningPathBotTraining - 64)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 64)) | (1 << (bitmarkParser.BitLearningPathClassroomEvent - 64)) | (1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitImagePrototype - 64)) | (1 << (bitmarkParser.BitImageSuperWide - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitVideoPortrait - 64)) | (1 << (bitmarkParser.BitVideoLandscape - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitEditorial - 96)) | (1 << (bitmarkParser.BitBookFrontispiece - 96)) | (1 << (bitmarkParser.BitBookTitle - 96)) | (1 << (bitmarkParser.BitBookCopyright - 96)) | (1 << (bitmarkParser.BitBookDedication - 96)) | (1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.BitQuestion1 - 128)) | (1 << (bitmarkParser.BitScreenshot - 128)) | (1 << (bitmarkParser.BitFocusImage - 128)) | (1 << (bitmarkParser.BitPhoto - 128)) | (1 << (bitmarkParser.BitBrowserImage - 128)) | (1 << (bitmarkParser.BitBotActionResponse - 128)) | (1 << (bitmarkParser.BitBotActionTrueFalse - 128)) | (1 << (bitmarkParser.BitBotActionRatingNumber - 128)) | (1 << (bitmarkParser.BitBotActionRatingStars - 128)) | (1 << (bitmarkParser.BitChapterSubjectMatter - 128)) | (1 << (bitmarkParser.BitReleaseNote - 128)) | (1 << (bitmarkParser.BitConclusion - 128)) | (1 << (bitmarkParser.BitVendorAmcharts5Chart - 128)) | (1 << (bitmarkParser.BitFeatured - 128)) | (1 << (bitmarkParser.BitNewspaperArticle - 128)) | (1 << (bitmarkParser.BitBlogArticle - 128)) | (1 << (bitmarkParser.BitBookArticle - 128)) | (1 << (bitmarkParser.BitNotebookArticle - 128)) | (1 << (bitmarkParser.BitWorkbookArticle - 128)) | (1 << (bitmarkParser.BitReleaseNotesSummary - 128)) | (1 << (bitmarkParser.BitCookPreparation - 128)) | (1 << (bitmarkParser.BitCookStep - 128)) | (1 << (bitmarkParser.BitCookIngredients - 128)) | (1 << (bitmarkParser.BitCookRremark - 128)) | (1 << (bitmarkParser.BitCookVariation - 128)) | (1 << (bitmarkParser.BitCookInsert - 128)) | (1 << (bitmarkParser.BitCookArrangement - 128)) | (1 << (bitmarkParser.BitCookPracticeAdvise - 128)) | (1 << (bitmarkParser.BitCookPlate - 128)) | (1 << (bitmarkParser.BitCookRecommendation - 128)) | (1 << (bitmarkParser.BitCookPersonalRecommendation - 128)) | (1 << (bitmarkParser.BitCookSideDrink - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.BitCookSideDish - 160)) | (1 << (bitmarkParser.BitCookTimer - 160)) | (1 << (bitmarkParser.BitLangLearningOutcomes - 160)) | (1 << (bitmarkParser.BitLangEnablingLanguageSkills - 160)) | (1 << (bitmarkParser.BitLangLifeSkills - 160)) | (1 << (bitmarkParser.BitLangEnglishAroundWorld - 160)) | (1 << (bitmarkParser.BitLangGoodtoknow - 160)) | (1 << (bitmarkParser.BitLangLearningStrategy - 160)) | (1 << (bitmarkParser.BitLangLikeAlocal - 160)) | (1 << (bitmarkParser.BitLangUsefulPhrases - 160)) | (1 << (bitmarkParser.BitLangLevelDown - 160)) | (1 << (bitmarkParser.BitLangLevelUp - 160)) | (1 << (bitmarkParser.BitLangExtraActivity - 160)) | (1 << (bitmarkParser.BitLangVideoScript - 160)) | (1 << (bitmarkParser.BitLangAudioScript - 160)) | (1 << (bitmarkParser.BitLangVocabulary - 160)) | (1 << (bitmarkParser.BitLangHomework - 160)) | (1 << (bitmarkParser.BitLangTeacherNote - 160)) | (1 << (bitmarkParser.BitReviewNote - 160)) | (1 << (bitmarkParser.BitReviewAuthorNote - 160)) | (1 << (bitmarkParser.BitReviewReviewerNote - 160)) | (1 << (bitmarkParser.BitReviewRequestForReviewNote - 160)) | (1 << (bitmarkParser.BitReviewApprovedNote - 160)) | (1 << (bitmarkParser.BitChecklist - 160)) | (1 << (bitmarkParser.BitVideoTranscript - 160)) | (1 << (bitmarkParser.BitAudioTranscript - 160)) | (1 << (bitmarkParser.BitImagePortrait - 160)) | (1 << (bitmarkParser.BitImageLandscape - 160)) | (1 << (bitmarkParser.BitImageOnDevice - 160)) | (1 << (bitmarkParser.BitBitmarkExample - 160)) | (1 << (bitmarkParser.BitAppAiPrompt - 160)) | (1 << (bitmarkParser.BitBookLink - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.BitBookLinkNext - 192)) | (1 << (bitmarkParser.BitBookLinkPrev - 192)) | (1 << (bitmarkParser.BitFigure - 192)) | (1 << (bitmarkParser.BitVideoLinkLandscape - 192)) | (1 << (bitmarkParser.BitVideoLinkPortrait - 192)) | (1 << (bitmarkParser.BitImageMood - 192)) | (1 << (bitmarkParser.BitImageFigure - 192)) | (1 << (bitmarkParser.BitImageBanner - 192)) | (1 << (bitmarkParser.BitImageStyled - 192)) | (1 << (bitmarkParser.BitImageScreenshot - 192)) | (1 << (bitmarkParser.BitAppGetScreenshot - 192)) | (1 << (bitmarkParser.BitAppCreateBitsFromImage - 192)) | (1 << (bitmarkParser.BitLifeSkillSticker - 192)) | (1 << (bitmarkParser.BitDetailsImage - 192)) | (1 << (bitmarkParser.BitImagesLogoGrave - 192)) | (1 << (bitmarkParser.BitPageBanner - 192)) | (1 << (bitmarkParser.BitPageBuyButton - 192)) | (1 << (bitmarkParser.BitVendorJsfiddle - 192)) | (1 << (bitmarkParser.BitVendorJsfiddleEmbed - 192)) | (1 << (bitmarkParser.BitImageRenderSvg - 192)) | (1 << (bitmarkParser.BitAppCodeEditor - 192)) | (1 << (bitmarkParser.BitAppCodeIde - 192)) | (1 << (bitmarkParser.BitCodeRuntime - 192)) | (1 << (bitmarkParser.BitOutput - 192)) | (1 << (bitmarkParser.BitConsoleLog - 192)) | (1 << (bitmarkParser.BitVenderJupyterCellCode - 192)) | (1 << (bitmarkParser.BitVenderJupyterCellRaw - 192)) | (1 << (bitmarkParser.BitVenderJupyterOutput - 192)) | (1 << (bitmarkParser.BitVenderJupyterCellMarkdown - 192)) | (1 << (bitmarkParser.BitVenderJupyterIpynb - 192)) | (1 << (bitmarkParser.BitAppCodeCell - 192)) | (1 << (bitmarkParser.BitStdout - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.BitAppBitmarkFromJavascript - 224)) | (1 << (bitmarkParser.BitAppBitmarkFromEditor - 224)) | (1 << (bitmarkParser.OPDOLL - 224)) | (1 << (bitmarkParser.OPBUL - 224)) | (1 << (bitmarkParser.OPRANGLES - 224)) | (1 << (bitmarkParser.OPRANGLEL - 224)) | (1 << (bitmarkParser.OPDANGLE - 224)) | (1 << (bitmarkParser.OPU - 224)) | (1 << (bitmarkParser.OPB - 224)) | (1 << (bitmarkParser.OPQ - 224)) | (1 << (bitmarkParser.OPA - 224)) | (1 << (bitmarkParser.OPP - 224)) | (1 << (bitmarkParser.OPM - 224)) | (1 << (bitmarkParser.OPS - 224)) | (1 << (bitmarkParser.OPR - 224)) | (1 << (bitmarkParser.OPHASH - 224)) | (1 << (bitmarkParser.OPC - 224)) | (1 << (bitmarkParser.COLON - 224)) | (1 << (bitmarkParser.AMP - 224)) | (1 << (bitmarkParser.DBLCOLON - 224)) | (1 << (bitmarkParser.PLUS - 224)) | (1 << (bitmarkParser.DotAt - 224)) | (1 << (bitmarkParser.Greater - 224)) | (1 << (bitmarkParser.Less - 224)) | (1 << (bitmarkParser.RightAngle - 224)) | (1 << (bitmarkParser.RightArrow - 224)) | (1 << (bitmarkParser.DBLEQ - 224)) | (1 << (bitmarkParser.HSPL - 224)) | (1 << (bitmarkParser.HSPL2 - 224)) | (1 << (bitmarkParser.SSPL - 224)) | (1 << (bitmarkParser.SSPL2 - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (bitmarkParser.QUOTE_INDEX - 256)) | (1 << (bitmarkParser.COMMENT - 256)) | (1 << (bitmarkParser.DCANY - 256)) | (1 << (bitmarkParser.Image_type - 256)) | (1 << (bitmarkParser.Audio_type - 256)) | (1 << (bitmarkParser.Video_type - 256)) | (1 << (bitmarkParser.ArticleText - 256)) | (1 << (bitmarkParser.NOTCL - 256)) | (1 << (bitmarkParser.NUMERIC - 256)) | (1 << (bitmarkParser.STRING - 256)) | (1 << (bitmarkParser.NL - 256)) | (1 << (bitmarkParser.NOTBITMARK - 256)) | (1 << (bitmarkParser.ELIPSIS - 256)) | (1 << (bitmarkParser.SENTENCE - 256)) | (1 << (bitmarkParser.BARSTRING - 256)) | (1 << (bitmarkParser.OPAT - 256)) | (1 << (bitmarkParser.AtProgress - 256)) | (1 << (bitmarkParser.AtReference - 256)) | (1 << (bitmarkParser.AtWidth - 256)) | (1 << (bitmarkParser.AtHeight - 256)) | (1 << (bitmarkParser.AtProgressPoints - 256)) | (1 << (bitmarkParser.AtShortanswer - 256)) | (1 << (bitmarkParser.AtLonganswer - 256)) | (1 << (bitmarkParser.AtExampleWithStr - 256)) | (1 << (bitmarkParser.AtExamplecol - 256)) | (1 << (bitmarkParser.AtExamplecl - 256)) | (1 << (bitmarkParser.AtSampleSolution - 256)) | (1 << (bitmarkParser.AtPartialAnswerS - 256)) | (1 << (bitmarkParser.AtPartialAnswer - 256)) | (1 << (bitmarkParser.AtLabeltrue - 256)) | (1 << (bitmarkParser.AtLabelfalse - 256)) | (1 << (bitmarkParser.AtPoints - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (bitmarkParser.AtSrc - 288)) | (1 << (bitmarkParser.AtPartner - 288)) | (1 << (bitmarkParser.OPATALT - 288)) | (1 << (bitmarkParser.OPAMARK - 288)) | (1 << (bitmarkParser.ShowInIndex - 288)) | (1 << (bitmarkParser.OpAtCaption - 288)) | (1 << (bitmarkParser.OpAtLicense - 288)) | (1 << (bitmarkParser.OpAtCopyright - 288)) | (1 << (bitmarkParser.OpAtSearch - 288)) | (1 << (bitmarkParser.OpAtIsTracked - 288)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 288)) | (1 << (bitmarkParser.AtDate - 288)) | (1 << (bitmarkParser.Http - 288)) | (1 << (bitmarkParser.Https - 288)) | (1 << (bitmarkParser.AmpAudio - 288)) | (1 << (bitmarkParser.AmpImage - 288)) | (1 << (bitmarkParser.AmpImageZoom - 288)) | (1 << (bitmarkParser.AmpVideo - 288)) | (1 << (bitmarkParser.AmpArticle - 288)) | (1 << (bitmarkParser.AmpDocument - 288)) | (1 << (bitmarkParser.AmpApp - 288)) | (1 << (bitmarkParser.AmpWebsite - 288)) | (1 << (bitmarkParser.AmpStillImageFilm - 288)) | (1 << (bitmarkParser.AmpPdf - 288)) | (1 << (bitmarkParser.OpAmpAudio - 288)) | (1 << (bitmarkParser.OpAmpImage - 288)) | (1 << (bitmarkParser.OpAmpImageZoom - 288)) | (1 << (bitmarkParser.OpAmpVideo - 288)) | (1 << (bitmarkParser.OpAmpArticle - 288)) | (1 << (bitmarkParser.OpAmpArticleAtt - 288)) | (1 << (bitmarkParser.OpAmpDocument - 288)) | (1 << (bitmarkParser.OpAmpApp - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (bitmarkParser.OpAmpWebsite - 320)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 320)) | (1 << (bitmarkParser.BracEnclose - 320)) | (1 << (bitmarkParser.AmpAudioLink - 320)) | (1 << (bitmarkParser.AmpImageLink - 320)) | (1 << (bitmarkParser.AmpVideoLink - 320)) | (1 << (bitmarkParser.AmpArticleLink - 320)) | (1 << (bitmarkParser.AmpDocumentLink - 320)) | (1 << (bitmarkParser.AmpDocumentDownload - 320)) | (1 << (bitmarkParser.AmpAppLink - 320)) | (1 << (bitmarkParser.AmpWebsiteLink - 320)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 320)) | (1 << (bitmarkParser.OpAmpAudioLink - 320)) | (1 << (bitmarkParser.OpAmpImageLink - 320)) | (1 << (bitmarkParser.OpAmpVideoLink - 320)) | (1 << (bitmarkParser.OpAmpArticleLink - 320)) | (1 << (bitmarkParser.OpAmpDocumentLink - 320)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 320)) | (1 << (bitmarkParser.OpAmpAppLink - 320)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 320)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 320)) | (1 << (bitmarkParser.AmpImageEmbed - 320)) | (1 << (bitmarkParser.AmpVideoEmbed - 320)) | (1 << (bitmarkParser.AmpAudioEmbed - 320)) | (1 << (bitmarkParser.AmpDocumentEmbed - 320)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 320)) | (1 << (bitmarkParser.OpAmpImageEmbed - 320)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 320)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 320)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 320)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 320)) | (1 << (bitmarkParser.BitmarkMinus - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (bitmarkParser.BitmarkPlus - 352)) | (1 << (bitmarkParser.ColonText - 352)) | (1 << (bitmarkParser.ColonJson - 352)) | (1 << (bitmarkParser.Prosemirror - 352)) | (1 << (bitmarkParser.Placeholder - 352)) | (1 << (bitmarkParser.BASIC - 352)) | (1 << (bitmarkParser.JPG - 352)) | (1 << (bitmarkParser.PNG - 352)) | (1 << (bitmarkParser.GIF - 352)) | (1 << (bitmarkParser.SVG - 352)) | (1 << (bitmarkParser.MP2 - 352)) | (1 << (bitmarkParser.MP3 - 352)) | (1 << (bitmarkParser.MP4 - 352)) | (1 << (bitmarkParser.FLV - 352)) | (1 << (bitmarkParser.WMV - 352)) | (1 << (bitmarkParser.MPEG - 352)) | (1 << (bitmarkParser.MPG - 352)) | (1 << (bitmarkParser.TEL - 352)) | (1 << (bitmarkParser.DotArticleAtt - 352)) | (1 << (bitmarkParser.STAR - 352)) | (1 << (bitmarkParser.URL - 352)) | (1 << (bitmarkParser.LIST_LINE - 352)) | (1 << (bitmarkParser.ENCLBARS - 352)))) !== 0));
                this.state = 6651;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    title() {
        let _localctx = new TitleContext(this._ctx, this.state);
        this.enterRule(_localctx, 588, bitmarkParser.RULE_title);
        let _la;
        try {
            this.state = 6665;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 872, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6653;
                        this.match(bitmarkParser.OPHASH);
                        this.state = 6656;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 6656;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.S:
                                    case bitmarkParser.OPS:
                                    case bitmarkParser.COLON:
                                    case bitmarkParser.AMP:
                                    case bitmarkParser.Greater:
                                    case bitmarkParser.Less:
                                    case bitmarkParser.RightAngle:
                                    case bitmarkParser.RightArrow:
                                    case bitmarkParser.DBLEQ:
                                    case bitmarkParser.QUOTE_INDEX:
                                    case bitmarkParser.NUMERIC:
                                    case bitmarkParser.STRING:
                                    case bitmarkParser.NOTBITMARK:
                                    case bitmarkParser.ELIPSIS:
                                    case bitmarkParser.SENTENCE:
                                    case bitmarkParser.BARSTRING:
                                    case bitmarkParser.AmpAudio:
                                    case bitmarkParser.AmpImage:
                                    case bitmarkParser.AmpVideo:
                                    case bitmarkParser.AmpArticle:
                                    case bitmarkParser.AmpDocument:
                                    case bitmarkParser.AmpApp:
                                    case bitmarkParser.AmpWebsite:
                                    case bitmarkParser.AmpStillImageFilm:
                                    case bitmarkParser.AmpAudioLink:
                                    case bitmarkParser.AmpImageLink:
                                    case bitmarkParser.AmpVideoLink:
                                    case bitmarkParser.AmpArticleLink:
                                    case bitmarkParser.AmpDocumentLink:
                                    case bitmarkParser.AmpAppLink:
                                    case bitmarkParser.AmpWebsiteLink:
                                    case bitmarkParser.AmpStillImageFilmLink:
                                    case bitmarkParser.BitmarkMinus:
                                    case bitmarkParser.BitmarkPlus:
                                    case bitmarkParser.URL:
                                        {
                                            this.state = 6654;
                                            this.s_and_w();
                                        }
                                        break;
                                    case bitmarkParser.NL:
                                        {
                                            this.state = 6655;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                            this.state = 6658;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                        this.state = 6660;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6661;
                        this.match(bitmarkParser.OPHASH);
                        this.state = 6662;
                        this.s_and_w();
                        this.state = 6663;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bool_label() {
        let _localctx = new Bool_labelContext(this._ctx, this.state);
        this.enterRule(_localctx, 590, bitmarkParser.RULE_bool_label);
        try {
            this.state = 6675;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtLabeltrue:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6667;
                        this.match(bitmarkParser.AtLabeltrue);
                        this.state = 6668;
                        this.s_and_w();
                        this.state = 6669;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtLabelfalse:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6671;
                        this.match(bitmarkParser.AtLabelfalse);
                        this.state = 6672;
                        this.s_and_w();
                        this.state = 6673;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    progress_points() {
        let _localctx = new Progress_pointsContext(this._ctx, this.state);
        this.enterRule(_localctx, 592, bitmarkParser.RULE_progress_points);
        try {
            this.state = 6686;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 874, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6677;
                        this.match(bitmarkParser.AtProgressPoints);
                        this.state = 6678;
                        this.match(bitmarkParser.COLON);
                        this.state = 6679;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 6680;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6681;
                        this.match(bitmarkParser.AtProgressPoints);
                        this.state = 6682;
                        this.match(bitmarkParser.COLON);
                        this.state = 6683;
                        this.s_and_w();
                        this.state = 6684;
                        this.match(bitmarkParser.CL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    istracked() {
        let _localctx = new IstrackedContext(this._ctx, this.state);
        this.enterRule(_localctx, 594, bitmarkParser.RULE_istracked);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6688;
                this.match(bitmarkParser.OpAtIsTracked);
                this.state = 6689;
                this.s_and_w();
                this.state = 6690;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    isinfoonly() {
        let _localctx = new IsinfoonlyContext(this._ctx, this.state);
        this.enterRule(_localctx, 596, bitmarkParser.RULE_isinfoonly);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6692;
                this.match(bitmarkParser.OpAtIsInfoOnly);
                this.state = 6693;
                this.s_and_w();
                this.state = 6694;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    atdef() {
        let _localctx = new AtdefContext(this._ctx, this.state);
        this.enterRule(_localctx, 598, bitmarkParser.RULE_atdef);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6696;
                this.atdef_();
                this.state = 6706;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 876, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 6700;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 6697;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 6702;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 6703;
                                this.atdef_();
                            }
                        }
                    }
                    this.state = 6708;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 876, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    atdef_() {
        let _localctx = new Atdef_Context(this._ctx, this.state);
        this.enterRule(_localctx, 600, bitmarkParser.RULE_atdef_);
        let _la;
        try {
            let _alt;
            this.state = 6732;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPA:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6709;
                        this.match(bitmarkParser.OPA);
                        this.state = 6710;
                        this.s_and_w();
                        this.state = 6711;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.COLON || _la === bitmarkParser.DBLCOLON)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6712;
                        this.s_and_w();
                        this.state = 6718;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                            {
                                this.state = 6716;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 877, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 6713;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 6714;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 6715;
                                            this.s_and_w();
                                        }
                                        break;
                                }
                            }
                            this.state = 6720;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6721;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OpAtCopyright:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6723;
                        this.match(bitmarkParser.OpAtCopyright);
                        this.state = 6727;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 879, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 6724;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 6729;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 879, this._ctx);
                        }
                        this.state = 6730;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtSampleSolution:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6731;
                        this.match(bitmarkParser.AtSampleSolution);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dollarans() {
        let _localctx = new DollaransContext(this._ctx, this.state);
        this.enterRule(_localctx, 602, bitmarkParser.RULE_dollarans);
        let _la;
        try {
            this.state = 6753;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 885, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6734;
                        this.match(bitmarkParser.OPDOLL);
                        this.state = 6738;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 6738;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 881, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 6735;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 6736;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 6737;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                }
                            }
                            this.state = 6740;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0));
                        this.state = 6742;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6743;
                        this.match(bitmarkParser.OPDOLL);
                        this.state = 6749;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NL - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                            {
                                this.state = 6747;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 883, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 6744;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 6745;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 6746;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                }
                            }
                            this.state = 6751;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6752;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    anchor() {
        let _localctx = new AnchorContext(this._ctx, this.state);
        this.enterRule(_localctx, 604, bitmarkParser.RULE_anchor);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6755;
                this.match(bitmarkParser.OPDANGLE);
                this.state = 6757;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.S || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OPS - 237)) | (1 << (bitmarkParser.COLON - 237)) | (1 << (bitmarkParser.AMP - 237)) | (1 << (bitmarkParser.Greater - 237)) | (1 << (bitmarkParser.Less - 237)) | (1 << (bitmarkParser.RightAngle - 237)) | (1 << (bitmarkParser.RightArrow - 237)) | (1 << (bitmarkParser.DBLEQ - 237)) | (1 << (bitmarkParser.QUOTE_INDEX - 237)) | (1 << (bitmarkParser.NUMERIC - 237)) | (1 << (bitmarkParser.STRING - 237)) | (1 << (bitmarkParser.NOTBITMARK - 237)) | (1 << (bitmarkParser.ELIPSIS - 237)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (bitmarkParser.AmpAudio - 302)) | (1 << (bitmarkParser.AmpImage - 302)) | (1 << (bitmarkParser.AmpVideo - 302)) | (1 << (bitmarkParser.AmpArticle - 302)) | (1 << (bitmarkParser.AmpDocument - 302)) | (1 << (bitmarkParser.AmpApp - 302)) | (1 << (bitmarkParser.AmpWebsite - 302)) | (1 << (bitmarkParser.AmpStillImageFilm - 302)) | (1 << (bitmarkParser.AmpAudioLink - 302)) | (1 << (bitmarkParser.AmpImageLink - 302)) | (1 << (bitmarkParser.AmpVideoLink - 302)) | (1 << (bitmarkParser.AmpArticleLink - 302)) | (1 << (bitmarkParser.AmpDocumentLink - 302)) | (1 << (bitmarkParser.AmpAppLink - 302)) | (1 << (bitmarkParser.AmpWebsiteLink - 302)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 302)))) !== 0) || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & ((1 << (bitmarkParser.BitmarkMinus - 351)) | (1 << (bitmarkParser.BitmarkPlus - 351)) | (1 << (bitmarkParser.URL - 351)))) !== 0)) {
                    {
                        this.state = 6756;
                        this.s_and_w();
                    }
                }
                this.state = 6759;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lines() {
        let _localctx = new LinesContext(this._ctx, this.state);
        this.enterRule(_localctx, 606, bitmarkParser.RULE_lines);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6765;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 6761;
                                    this.s_and_w();
                                    this.state = 6763;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 887, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 6762;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 6767;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 888, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    s_and_w() {
        let _localctx = new S_and_wContext(this._ctx, this.state);
        this.enterRule(_localctx, 608, bitmarkParser.RULE_s_and_w);
        let _la;
        try {
            let _alt;
            this.state = 6814;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 896, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6769;
                        this.match(bitmarkParser.STRING);
                        this.state = 6776;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 890, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6771;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 6770;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 6773;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S);
                                    this.state = 6775;
                                    this.match(bitmarkParser.NUMERIC);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6778;
                        this.words();
                        this.state = 6785;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 892, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6780;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 6779;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 6782;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S);
                                    this.state = 6784;
                                    this.match(bitmarkParser.NUMERIC);
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6787;
                        this.match(bitmarkParser.NUMERIC);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6788;
                        this.match(bitmarkParser.OPS);
                        this.state = 6789;
                        this.s_and_w();
                        this.state = 6790;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6795;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S) {
                            {
                                {
                                    this.state = 6792;
                                    this.match(bitmarkParser.S);
                                }
                            }
                            this.state = 6797;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 6798;
                        this.match(bitmarkParser.COLON);
                        this.state = 6802;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 894, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6799;
                                        this.match(bitmarkParser.S);
                                    }
                                }
                            }
                            this.state = 6804;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 894, this._ctx);
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 6805;
                        this.match(bitmarkParser.AMP);
                        this.state = 6809;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 895, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6806;
                                        this.match(bitmarkParser.S);
                                    }
                                }
                            }
                            this.state = 6811;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 895, this._ctx);
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 6812;
                        this.match(bitmarkParser.DBLEQ);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 6813;
                        this.match(bitmarkParser.URL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dclines() {
        let _localctx = new DclinesContext(this._ctx, this.state);
        this.enterRule(_localctx, 610, bitmarkParser.RULE_dclines);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6816;
                this.match(bitmarkParser.DCANY);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    clnsp() {
        let _localctx = new ClnspContext(this._ctx, this.state);
        this.enterRule(_localctx, 612, bitmarkParser.RULE_clnsp);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6818;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sspl() {
        let _localctx = new SsplContext(this._ctx, this.state);
        this.enterRule(_localctx, 614, bitmarkParser.RULE_sspl);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6820;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.SSPL || _la === bitmarkParser.SSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    words() {
        let _localctx = new WordsContext(this._ctx, this.state);
        this.enterRule(_localctx, 616, bitmarkParser.RULE_words);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6852;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                this.state = 6852;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.SENTENCE:
                                        {
                                            this.state = 6822;
                                            this.sentence();
                                        }
                                        break;
                                    case bitmarkParser.NOTBITMARK:
                                        {
                                            this.state = 6823;
                                            this.match(bitmarkParser.NOTBITMARK);
                                        }
                                        break;
                                    case bitmarkParser.BARSTRING:
                                        {
                                            this.state = 6824;
                                            this.match(bitmarkParser.BARSTRING);
                                        }
                                        break;
                                    case bitmarkParser.ELIPSIS:
                                        {
                                            this.state = 6825;
                                            this.match(bitmarkParser.ELIPSIS);
                                        }
                                        break;
                                    case bitmarkParser.AMP:
                                        {
                                            this.state = 6826;
                                            this.match(bitmarkParser.AMP);
                                        }
                                        break;
                                    case bitmarkParser.Greater:
                                        {
                                            this.state = 6827;
                                            this.match(bitmarkParser.Greater);
                                            this.state = 6828;
                                            _la = this._input.LA(1);
                                            if (_la <= 0 || (_la === bitmarkParser.Greater)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                        }
                                        break;
                                    case bitmarkParser.Less:
                                        {
                                            this.state = 6829;
                                            this.match(bitmarkParser.Less);
                                            this.state = 6830;
                                            _la = this._input.LA(1);
                                            if (_la <= 0 || (_la === bitmarkParser.Less)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                        }
                                        break;
                                    case bitmarkParser.RightArrow:
                                        {
                                            this.state = 6831;
                                            this.match(bitmarkParser.RightArrow);
                                        }
                                        break;
                                    case bitmarkParser.RightAngle:
                                        {
                                            this.state = 6832;
                                            this.match(bitmarkParser.RightAngle);
                                        }
                                        break;
                                    case bitmarkParser.AmpArticle:
                                        {
                                            this.state = 6833;
                                            this.match(bitmarkParser.AmpArticle);
                                        }
                                        break;
                                    case bitmarkParser.AmpArticleLink:
                                        {
                                            this.state = 6834;
                                            this.match(bitmarkParser.AmpArticleLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpDocument:
                                        {
                                            this.state = 6835;
                                            this.match(bitmarkParser.AmpDocument);
                                        }
                                        break;
                                    case bitmarkParser.AmpDocumentLink:
                                        {
                                            this.state = 6836;
                                            this.match(bitmarkParser.AmpDocumentLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpWebsite:
                                        {
                                            this.state = 6837;
                                            this.match(bitmarkParser.AmpWebsite);
                                        }
                                        break;
                                    case bitmarkParser.AmpWebsiteLink:
                                        {
                                            this.state = 6838;
                                            this.match(bitmarkParser.AmpWebsiteLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpImage:
                                        {
                                            this.state = 6839;
                                            this.match(bitmarkParser.AmpImage);
                                        }
                                        break;
                                    case bitmarkParser.AmpImageLink:
                                        {
                                            this.state = 6840;
                                            this.match(bitmarkParser.AmpImageLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpAudio:
                                        {
                                            this.state = 6841;
                                            this.match(bitmarkParser.AmpAudio);
                                        }
                                        break;
                                    case bitmarkParser.AmpAudioLink:
                                        {
                                            this.state = 6842;
                                            this.match(bitmarkParser.AmpAudioLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpVideo:
                                        {
                                            this.state = 6843;
                                            this.match(bitmarkParser.AmpVideo);
                                        }
                                        break;
                                    case bitmarkParser.AmpVideoLink:
                                        {
                                            this.state = 6844;
                                            this.match(bitmarkParser.AmpVideoLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpApp:
                                        {
                                            this.state = 6845;
                                            this.match(bitmarkParser.AmpApp);
                                        }
                                        break;
                                    case bitmarkParser.AmpAppLink:
                                        {
                                            this.state = 6846;
                                            this.match(bitmarkParser.AmpAppLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpStillImageFilm:
                                        {
                                            this.state = 6847;
                                            this.match(bitmarkParser.AmpStillImageFilm);
                                        }
                                        break;
                                    case bitmarkParser.AmpStillImageFilmLink:
                                        {
                                            this.state = 6848;
                                            this.match(bitmarkParser.AmpStillImageFilmLink);
                                        }
                                        break;
                                    case bitmarkParser.BitmarkMinus:
                                        {
                                            this.state = 6849;
                                            this.match(bitmarkParser.BitmarkMinus);
                                        }
                                        break;
                                    case bitmarkParser.BitmarkPlus:
                                        {
                                            this.state = 6850;
                                            this.match(bitmarkParser.BitmarkPlus);
                                        }
                                        break;
                                    case bitmarkParser.QUOTE_INDEX:
                                        {
                                            this.state = 6851;
                                            this.match(bitmarkParser.QUOTE_INDEX);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 6854;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 898, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sp() {
        let _localctx = new SpContext(this._ctx, this.state);
        this.enterRule(_localctx, 618, bitmarkParser.RULE_sp);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6856;
                this.match(bitmarkParser.S);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sentence() {
        let _localctx = new SentenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 620, bitmarkParser.RULE_sentence);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6858;
                this.match(bitmarkParser.SENTENCE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    static get _ATN() {
        if (!bitmarkParser.__ATN) {
            bitmarkParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(bitmarkParser._serializedATN));
        }
        return bitmarkParser.__ATN;
    }
}
exports.bitmarkParser = bitmarkParser;
bitmarkParser.OPDOT = 1;
bitmarkParser.S = 2;
bitmarkParser.BitBook = 3;
bitmarkParser.BitChapter = 4;
bitmarkParser.BitToc = 5;
bitmarkParser.BitSummary = 6;
bitmarkParser.BitIntlink = 7;
bitmarkParser.BitIntRef = 8;
bitmarkParser.BitAlias = 9;
bitmarkParser.BitGroups = 10;
bitmarkParser.BitGroupt = 11;
bitmarkParser.BitPlaceholder = 12;
bitmarkParser.BitStatement = 13;
bitmarkParser.BitDetails = 14;
bitmarkParser.BitSampleSolution = 15;
bitmarkParser.BitTakeAudio = 16;
bitmarkParser.CLOZE = 17;
bitmarkParser.MATCH = 18;
bitmarkParser.BitArticle = 19;
bitmarkParser.BitPage = 20;
bitmarkParser.BitEssay = 21;
bitmarkParser.BitMessage = 22;
bitmarkParser.BitCorrection = 23;
bitmarkParser.BitMark = 24;
bitmarkParser.BitTakepic = 25;
bitmarkParser.BitRecaud = 26;
bitmarkParser.BitPrepnote = 27;
bitmarkParser.BitAssign = 28;
bitmarkParser.BitBotint = 29;
bitmarkParser.BitSelfassess = 30;
bitmarkParser.BitRating = 31;
bitmarkParser.BitSurvey = 32;
bitmarkParser.BitSurvey1 = 33;
bitmarkParser.BitSurveyanon = 34;
bitmarkParser.BitSurveyanon1 = 35;
bitmarkParser.BitNote = 36;
bitmarkParser.BitInfo = 37;
bitmarkParser.BitWarning = 38;
bitmarkParser.BitRemark = 39;
bitmarkParser.BitHint = 40;
bitmarkParser.BitHelp = 41;
bitmarkParser.BitDanger = 42;
bitmarkParser.BitBug = 43;
bitmarkParser.BitSidenote = 44;
bitmarkParser.BitStickynote = 45;
bitmarkParser.BitQuote = 46;
bitmarkParser.BitFootnote = 47;
bitmarkParser.BitExample = 48;
bitmarkParser.BitButtonCopytext = 49;
bitmarkParser.BitWbtContinue = 50;
bitmarkParser.BitLearningPathDetails = 51;
bitmarkParser.BitAiPrompt = 52;
bitmarkParser.BitNoteAi = 53;
bitmarkParser.BitSummayAi = 54;
bitmarkParser.BitArticleAi = 55;
bitmarkParser.BitLearningPathLti = 56;
bitmarkParser.BitLearningPathStep = 57;
bitmarkParser.BitLearningPathBook = 58;
bitmarkParser.BitLearningPathSign = 59;
bitmarkParser.BitLearningPathVideoCall = 60;
bitmarkParser.BitLearningPathLearningGoal = 61;
bitmarkParser.BitLearningPathClosing = 62;
bitmarkParser.BitLearningPathFeedback = 63;
bitmarkParser.BitLearningPathBotTraining = 64;
bitmarkParser.BitLearningPathExternalLink = 65;
bitmarkParser.BitLearningPathClassroomTraining = 66;
bitmarkParser.BitLearningPathClassroomEvent = 67;
bitmarkParser.BitBotActionSend = 68;
bitmarkParser.BitBotActionAnnounce = 69;
bitmarkParser.BitBotActionSave = 70;
bitmarkParser.BitBotActionRemind = 71;
bitmarkParser.BitVendorPadletEmbed = 72;
bitmarkParser.BitScorm = 73;
bitmarkParser.BitImage = 74;
bitmarkParser.BitImageLink = 75;
bitmarkParser.BitImageZoom = 76;
bitmarkParser.BitImagePrototype = 77;
bitmarkParser.BitImageSuperWide = 78;
bitmarkParser.BitAudio = 79;
bitmarkParser.BitAudioLink = 80;
bitmarkParser.BitAudioEmbed = 81;
bitmarkParser.BitVideo = 82;
bitmarkParser.BitVideoLink = 83;
bitmarkParser.BitVideoEmbed = 84;
bitmarkParser.BitVideoPortrait = 85;
bitmarkParser.BitVideoLandscape = 86;
bitmarkParser.BitStillImageFilm = 87;
bitmarkParser.BitStillImageFilmLink = 88;
bitmarkParser.BitStillImageFilmEmbed = 89;
bitmarkParser.BitWebsiteLink = 90;
bitmarkParser.BitDocument = 91;
bitmarkParser.BitDocumentLink = 92;
bitmarkParser.BitDocumentEmbed = 93;
bitmarkParser.BitDocumentDownload = 94;
bitmarkParser.BitAppLink = 95;
bitmarkParser.BitEditorial = 96;
bitmarkParser.BitBookFrontispiece = 97;
bitmarkParser.BitBookTitle = 98;
bitmarkParser.BitBookCopyright = 99;
bitmarkParser.BitBookDedication = 100;
bitmarkParser.BitBookForword = 101;
bitmarkParser.BitBookPreface = 102;
bitmarkParser.BitBookPrologue = 103;
bitmarkParser.BitBookEpilogue = 104;
bitmarkParser.BitBookIntroduction = 105;
bitmarkParser.BitBookIncitingIncident = 106;
bitmarkParser.BitBookConclusion = 107;
bitmarkParser.BitBookAfterword = 108;
bitmarkParser.BitBookPostscript = 109;
bitmarkParser.BitBookappendix = 110;
bitmarkParser.BitBookAddendum = 111;
bitmarkParser.BitBookAcknowledgments = 112;
bitmarkParser.BitBookListOfContributors = 113;
bitmarkParser.BitBookBibliography = 114;
bitmarkParser.BitBookReferenceList = 115;
bitmarkParser.BitBookEndnotes = 116;
bitmarkParser.BitBookNotes = 117;
bitmarkParser.BitBookCopyrightPermissions = 118;
bitmarkParser.BitBookTeaser = 119;
bitmarkParser.BitBookAutherBio = 120;
bitmarkParser.BitBookRequestForABookReview = 121;
bitmarkParser.BitBookComingSoon = 122;
bitmarkParser.BitBookReadMore = 123;
bitmarkParser.BitBookSummary = 124;
bitmarkParser.BitBookEpigraph = 125;
bitmarkParser.BitCode = 126;
bitmarkParser.BitCard1 = 127;
bitmarkParser.BitQuestion1 = 128;
bitmarkParser.BitScreenshot = 129;
bitmarkParser.BitFocusImage = 130;
bitmarkParser.BitPhoto = 131;
bitmarkParser.BitBrowserImage = 132;
bitmarkParser.BitBotActionResponse = 133;
bitmarkParser.BitBotActionTrueFalse = 134;
bitmarkParser.BitBotActionRatingNumber = 135;
bitmarkParser.BitBotActionRatingStars = 136;
bitmarkParser.BitChapterSubjectMatter = 137;
bitmarkParser.BitReleaseNote = 138;
bitmarkParser.BitConclusion = 139;
bitmarkParser.BitVendorAmcharts5Chart = 140;
bitmarkParser.BitFeatured = 141;
bitmarkParser.BitNewspaperArticle = 142;
bitmarkParser.BitBlogArticle = 143;
bitmarkParser.BitBookArticle = 144;
bitmarkParser.BitNotebookArticle = 145;
bitmarkParser.BitWorkbookArticle = 146;
bitmarkParser.BitReleaseNotesSummary = 147;
bitmarkParser.BitCookPreparation = 148;
bitmarkParser.BitCookStep = 149;
bitmarkParser.BitCookIngredients = 150;
bitmarkParser.BitCookRremark = 151;
bitmarkParser.BitCookVariation = 152;
bitmarkParser.BitCookInsert = 153;
bitmarkParser.BitCookArrangement = 154;
bitmarkParser.BitCookPracticeAdvise = 155;
bitmarkParser.BitCookPlate = 156;
bitmarkParser.BitCookRecommendation = 157;
bitmarkParser.BitCookPersonalRecommendation = 158;
bitmarkParser.BitCookSideDrink = 159;
bitmarkParser.BitCookSideDish = 160;
bitmarkParser.BitCookTimer = 161;
bitmarkParser.BitLangLearningOutcomes = 162;
bitmarkParser.BitLangEnablingLanguageSkills = 163;
bitmarkParser.BitLangLifeSkills = 164;
bitmarkParser.BitLangEnglishAroundWorld = 165;
bitmarkParser.BitLangGoodtoknow = 166;
bitmarkParser.BitLangLearningStrategy = 167;
bitmarkParser.BitLangLikeAlocal = 168;
bitmarkParser.BitLangUsefulPhrases = 169;
bitmarkParser.BitLangLevelDown = 170;
bitmarkParser.BitLangLevelUp = 171;
bitmarkParser.BitLangExtraActivity = 172;
bitmarkParser.BitLangVideoScript = 173;
bitmarkParser.BitLangAudioScript = 174;
bitmarkParser.BitLangVocabulary = 175;
bitmarkParser.BitLangHomework = 176;
bitmarkParser.BitLangTeacherNote = 177;
bitmarkParser.BitReviewNote = 178;
bitmarkParser.BitReviewAuthorNote = 179;
bitmarkParser.BitReviewReviewerNote = 180;
bitmarkParser.BitReviewRequestForReviewNote = 181;
bitmarkParser.BitReviewApprovedNote = 182;
bitmarkParser.BitChecklist = 183;
bitmarkParser.BitVideoTranscript = 184;
bitmarkParser.BitAudioTranscript = 185;
bitmarkParser.BitImagePortrait = 186;
bitmarkParser.BitImageLandscape = 187;
bitmarkParser.BitImageOnDevice = 188;
bitmarkParser.BitBitmarkExample = 189;
bitmarkParser.BitAppAiPrompt = 190;
bitmarkParser.BitBookLink = 191;
bitmarkParser.BitBookLinkNext = 192;
bitmarkParser.BitBookLinkPrev = 193;
bitmarkParser.BitFigure = 194;
bitmarkParser.BitVideoLinkLandscape = 195;
bitmarkParser.BitVideoLinkPortrait = 196;
bitmarkParser.BitImageMood = 197;
bitmarkParser.BitImageFigure = 198;
bitmarkParser.BitImageBanner = 199;
bitmarkParser.BitImageStyled = 200;
bitmarkParser.BitImageScreenshot = 201;
bitmarkParser.BitAppGetScreenshot = 202;
bitmarkParser.BitAppCreateBitsFromImage = 203;
bitmarkParser.BitLifeSkillSticker = 204;
bitmarkParser.BitDetailsImage = 205;
bitmarkParser.BitImagesLogoGrave = 206;
bitmarkParser.BitPageBanner = 207;
bitmarkParser.BitPageBuyButton = 208;
bitmarkParser.BitVendorJsfiddle = 209;
bitmarkParser.BitVendorJsfiddleEmbed = 210;
bitmarkParser.BitImageRenderSvg = 211;
bitmarkParser.BitAppCodeEditor = 212;
bitmarkParser.BitAppCodeIde = 213;
bitmarkParser.BitCodeRuntime = 214;
bitmarkParser.BitOutput = 215;
bitmarkParser.BitConsoleLog = 216;
bitmarkParser.BitVenderJupyterCellCode = 217;
bitmarkParser.BitVenderJupyterCellRaw = 218;
bitmarkParser.BitVenderJupyterOutput = 219;
bitmarkParser.BitVenderJupyterCellMarkdown = 220;
bitmarkParser.BitVenderJupyterIpynb = 221;
bitmarkParser.BitAppCodeCell = 222;
bitmarkParser.BitStdout = 223;
bitmarkParser.BitAppBitmarkFromJavascript = 224;
bitmarkParser.BitAppBitmarkFromEditor = 225;
bitmarkParser.OPDOLL = 226;
bitmarkParser.OPBUL = 227;
bitmarkParser.OPRANGLES = 228;
bitmarkParser.OPRANGLEL = 229;
bitmarkParser.OPDANGLE = 230;
bitmarkParser.OPU = 231;
bitmarkParser.OPB = 232;
bitmarkParser.OPQ = 233;
bitmarkParser.OPA = 234;
bitmarkParser.OPP = 235;
bitmarkParser.OPM = 236;
bitmarkParser.OPS = 237;
bitmarkParser.OPR = 238;
bitmarkParser.OPHASH = 239;
bitmarkParser.OPC = 240;
bitmarkParser.CL = 241;
bitmarkParser.COLON = 242;
bitmarkParser.AMP = 243;
bitmarkParser.DBLCOLON = 244;
bitmarkParser.PLUS = 245;
bitmarkParser.DotAt = 246;
bitmarkParser.Greater = 247;
bitmarkParser.Less = 248;
bitmarkParser.RightAngle = 249;
bitmarkParser.RightArrow = 250;
bitmarkParser.DBLEQ = 251;
bitmarkParser.HSPL = 252;
bitmarkParser.HSPL2 = 253;
bitmarkParser.SSPL = 254;
bitmarkParser.SSPL2 = 255;
bitmarkParser.QUOTE_INDEX = 256;
bitmarkParser.COMMENT = 257;
bitmarkParser.DCANY = 258;
bitmarkParser.Image_type = 259;
bitmarkParser.Audio_type = 260;
bitmarkParser.Video_type = 261;
bitmarkParser.ArticleText = 262;
bitmarkParser.NOTCL = 263;
bitmarkParser.NUMERIC = 264;
bitmarkParser.STRING = 265;
bitmarkParser.NL = 266;
bitmarkParser.NOTBITMARK = 267;
bitmarkParser.ELIPSIS = 268;
bitmarkParser.SENTENCE = 269;
bitmarkParser.BARSTRING = 270;
bitmarkParser.OPAT = 271;
bitmarkParser.AtProgress = 272;
bitmarkParser.AtReference = 273;
bitmarkParser.AtWidth = 274;
bitmarkParser.AtHeight = 275;
bitmarkParser.AtProgressPoints = 276;
bitmarkParser.AtShortanswer = 277;
bitmarkParser.AtLonganswer = 278;
bitmarkParser.AtExampleWithStr = 279;
bitmarkParser.AtExamplecol = 280;
bitmarkParser.AtExamplecl = 281;
bitmarkParser.AtSampleSolution = 282;
bitmarkParser.AtPartialAnswerS = 283;
bitmarkParser.AtPartialAnswer = 284;
bitmarkParser.AtLabeltrue = 285;
bitmarkParser.AtLabelfalse = 286;
bitmarkParser.AtPoints = 287;
bitmarkParser.AtSrc = 288;
bitmarkParser.AtPartner = 289;
bitmarkParser.OPATALT = 290;
bitmarkParser.OPAMARK = 291;
bitmarkParser.ShowInIndex = 292;
bitmarkParser.OpAtCaption = 293;
bitmarkParser.OpAtLicense = 294;
bitmarkParser.OpAtCopyright = 295;
bitmarkParser.OpAtSearch = 296;
bitmarkParser.OpAtIsTracked = 297;
bitmarkParser.OpAtIsInfoOnly = 298;
bitmarkParser.AtDate = 299;
bitmarkParser.Http = 300;
bitmarkParser.Https = 301;
bitmarkParser.AmpAudio = 302;
bitmarkParser.AmpImage = 303;
bitmarkParser.AmpImageZoom = 304;
bitmarkParser.AmpVideo = 305;
bitmarkParser.AmpArticle = 306;
bitmarkParser.AmpDocument = 307;
bitmarkParser.AmpApp = 308;
bitmarkParser.AmpWebsite = 309;
bitmarkParser.AmpStillImageFilm = 310;
bitmarkParser.AmpPdf = 311;
bitmarkParser.OpAmpAudio = 312;
bitmarkParser.OpAmpImage = 313;
bitmarkParser.OpAmpImageZoom = 314;
bitmarkParser.OpAmpVideo = 315;
bitmarkParser.OpAmpArticle = 316;
bitmarkParser.OpAmpArticleAtt = 317;
bitmarkParser.OpAmpDocument = 318;
bitmarkParser.OpAmpApp = 319;
bitmarkParser.OpAmpWebsite = 320;
bitmarkParser.OpAmpStillImageFilm = 321;
bitmarkParser.BracEnclose = 322;
bitmarkParser.AmpAudioLink = 323;
bitmarkParser.AmpImageLink = 324;
bitmarkParser.AmpVideoLink = 325;
bitmarkParser.AmpArticleLink = 326;
bitmarkParser.AmpDocumentLink = 327;
bitmarkParser.AmpDocumentDownload = 328;
bitmarkParser.AmpAppLink = 329;
bitmarkParser.AmpWebsiteLink = 330;
bitmarkParser.AmpStillImageFilmLink = 331;
bitmarkParser.OpAmpAudioLink = 332;
bitmarkParser.OpAmpImageLink = 333;
bitmarkParser.OpAmpVideoLink = 334;
bitmarkParser.OpAmpArticleLink = 335;
bitmarkParser.OpAmpDocumentLink = 336;
bitmarkParser.OpAmpDocumentDownload = 337;
bitmarkParser.OpAmpAppLink = 338;
bitmarkParser.OpAmpWebsiteLink = 339;
bitmarkParser.OpAmpStillImageFilmLink = 340;
bitmarkParser.AmpImageEmbed = 341;
bitmarkParser.AmpVideoEmbed = 342;
bitmarkParser.AmpAudioEmbed = 343;
bitmarkParser.AmpDocumentEmbed = 344;
bitmarkParser.AmpStillImageFilmEmbed = 345;
bitmarkParser.OpAmpImageEmbed = 346;
bitmarkParser.OpAmpVideoEmbed = 347;
bitmarkParser.OpAmpAudioEmbed = 348;
bitmarkParser.OpAmpDocumentEmbed = 349;
bitmarkParser.OpAmpStillImageFilmEmbed = 350;
bitmarkParser.BitmarkMinus = 351;
bitmarkParser.BitmarkPlus = 352;
bitmarkParser.ColonText = 353;
bitmarkParser.ColonJson = 354;
bitmarkParser.Prosemirror = 355;
bitmarkParser.Placeholder = 356;
bitmarkParser.BASIC = 357;
bitmarkParser.JPG = 358;
bitmarkParser.PNG = 359;
bitmarkParser.GIF = 360;
bitmarkParser.SVG = 361;
bitmarkParser.MP2 = 362;
bitmarkParser.MP3 = 363;
bitmarkParser.MP4 = 364;
bitmarkParser.FLV = 365;
bitmarkParser.WMV = 366;
bitmarkParser.MPEG = 367;
bitmarkParser.MPG = 368;
bitmarkParser.TEL = 369;
bitmarkParser.DotArticleAtt = 370;
bitmarkParser.STAR = 371;
bitmarkParser.URL = 372;
bitmarkParser.LIST_LINE = 373;
bitmarkParser.ENCLBARS = 374;
bitmarkParser.RULE_bitmark = 0;
bitmarkParser.RULE_bitmark_ = 1;
bitmarkParser.RULE_bit = 2;
bitmarkParser.RULE_book = 3;
bitmarkParser.RULE_chapter = 4;
bitmarkParser.RULE_ai_prompt = 5;
bitmarkParser.RULE_note_ai = 6;
bitmarkParser.RULE_summary_ai = 7;
bitmarkParser.RULE_article_ai = 8;
bitmarkParser.RULE_toc = 9;
bitmarkParser.RULE_summary = 10;
bitmarkParser.RULE_internal_link = 11;
bitmarkParser.RULE_bit_alias = 12;
bitmarkParser.RULE_title_etc = 13;
bitmarkParser.RULE_group_born = 14;
bitmarkParser.RULE_group_died = 15;
bitmarkParser.RULE_learning_path_lti = 16;
bitmarkParser.RULE_learning_path_step = 17;
bitmarkParser.RULE_learning_path_book = 18;
bitmarkParser.RULE_learning_path_sign = 19;
bitmarkParser.RULE_learning_path_video_call = 20;
bitmarkParser.RULE_learning_path_learning_goal = 21;
bitmarkParser.RULE_learning_path_closing = 22;
bitmarkParser.RULE_learning_path_feedback = 23;
bitmarkParser.RULE_learning_path_bot_training = 24;
bitmarkParser.RULE_learning_path_external_link = 25;
bitmarkParser.RULE_learning_path_classroom_training = 26;
bitmarkParser.RULE_learning_path_classroom_event = 27;
bitmarkParser.RULE_bot_action_send = 28;
bitmarkParser.RULE_bot_action_announce = 29;
bitmarkParser.RULE_bot_action_save = 30;
bitmarkParser.RULE_bot_action_remind = 31;
bitmarkParser.RULE_bot_action_response = 32;
bitmarkParser.RULE_bot_action_true_false = 33;
bitmarkParser.RULE_bot_action_rating_number = 34;
bitmarkParser.RULE_bot_action_rating_stars = 35;
bitmarkParser.RULE_bot_action = 36;
bitmarkParser.RULE_bo_actions = 37;
bitmarkParser.RULE_boacts = 38;
bitmarkParser.RULE_feedback = 39;
bitmarkParser.RULE_footer = 40;
bitmarkParser.RULE_bitElem = 41;
bitmarkParser.RULE_bitElem_noResource = 42;
bitmarkParser.RULE_gap = 43;
bitmarkParser.RULE_single_gap = 44;
bitmarkParser.RULE_choice_plus = 45;
bitmarkParser.RULE_choice_minus = 46;
bitmarkParser.RULE_choice_star = 47;
bitmarkParser.RULE_essay = 48;
bitmarkParser.RULE_ml_example = 49;
bitmarkParser.RULE_partans = 50;
bitmarkParser.RULE_resource = 51;
bitmarkParser.RULE_correction = 52;
bitmarkParser.RULE_corrs = 53;
bitmarkParser.RULE_mark_ = 54;
bitmarkParser.RULE_mark_text = 55;
bitmarkParser.RULE_mark_color = 56;
bitmarkParser.RULE_take_audio = 57;
bitmarkParser.RULE_take_picture = 58;
bitmarkParser.RULE_record_audio = 59;
bitmarkParser.RULE_preparation_note = 60;
bitmarkParser.RULE_assignment = 61;
bitmarkParser.RULE_article = 62;
bitmarkParser.RULE_statement = 63;
bitmarkParser.RULE_details = 64;
bitmarkParser.RULE_sample_solution = 65;
bitmarkParser.RULE_buttoncopytext = 66;
bitmarkParser.RULE_wbtcontinue = 67;
bitmarkParser.RULE_learningpathdetails = 68;
bitmarkParser.RULE_page = 69;
bitmarkParser.RULE_note = 70;
bitmarkParser.RULE_info = 71;
bitmarkParser.RULE_warning = 72;
bitmarkParser.RULE_remark = 73;
bitmarkParser.RULE_help = 74;
bitmarkParser.RULE_danger = 75;
bitmarkParser.RULE_bug = 76;
bitmarkParser.RULE_sidenote = 77;
bitmarkParser.RULE_stickynote = 78;
bitmarkParser.RULE_quote = 79;
bitmarkParser.RULE_footnote = 80;
bitmarkParser.RULE_hintbit = 81;
bitmarkParser.RULE_examplebit = 82;
bitmarkParser.RULE_vendor_padlet_embed = 83;
bitmarkParser.RULE_scorm = 84;
bitmarkParser.RULE_bit_image = 85;
bitmarkParser.RULE_bit_imageLink = 86;
bitmarkParser.RULE_bit_imageZoom = 87;
bitmarkParser.RULE_bit_imagePrototype = 88;
bitmarkParser.RULE_bit_imageSuperWide = 89;
bitmarkParser.RULE_bit_audio = 90;
bitmarkParser.RULE_bit_audioLink = 91;
bitmarkParser.RULE_bit_audioEmbed = 92;
bitmarkParser.RULE_bit_video = 93;
bitmarkParser.RULE_bit_videoLink = 94;
bitmarkParser.RULE_bit_videoEmbed = 95;
bitmarkParser.RULE_bit_videoPortrait = 96;
bitmarkParser.RULE_bit_videoLandscape = 97;
bitmarkParser.RULE_bit_stillImageFilm = 98;
bitmarkParser.RULE_bit_stillImageFilmLink = 99;
bitmarkParser.RULE_bit_stillImageFilmEmbed = 100;
bitmarkParser.RULE_bit_websiteLink = 101;
bitmarkParser.RULE_bit_document = 102;
bitmarkParser.RULE_bit_documentLink = 103;
bitmarkParser.RULE_bit_documentEmbed = 104;
bitmarkParser.RULE_bit_documentDownload = 105;
bitmarkParser.RULE_bit_appLink = 106;
bitmarkParser.RULE_bit_editorial = 107;
bitmarkParser.RULE_book_frontispiece = 108;
bitmarkParser.RULE_book_title = 109;
bitmarkParser.RULE_book_copyright = 110;
bitmarkParser.RULE_book_dedication = 111;
bitmarkParser.RULE_book_forword = 112;
bitmarkParser.RULE_book_preface = 113;
bitmarkParser.RULE_book_prologue = 114;
bitmarkParser.RULE_book_epilogue = 115;
bitmarkParser.RULE_book_introduction = 116;
bitmarkParser.RULE_book_inciting_incident = 117;
bitmarkParser.RULE_book_conclusion = 118;
bitmarkParser.RULE_book_afterword = 119;
bitmarkParser.RULE_book_postscript = 120;
bitmarkParser.RULE_book_appendix = 121;
bitmarkParser.RULE_book_addendum = 122;
bitmarkParser.RULE_book_acknowledgments = 123;
bitmarkParser.RULE_book_list_of_contributors = 124;
bitmarkParser.RULE_book_bibliography = 125;
bitmarkParser.RULE_book_reference_list = 126;
bitmarkParser.RULE_book_endnotes = 127;
bitmarkParser.RULE_book_notes = 128;
bitmarkParser.RULE_book_copyright_permissions = 129;
bitmarkParser.RULE_book_teaser = 130;
bitmarkParser.RULE_book_auther_bio = 131;
bitmarkParser.RULE_book_request_for_a_book_review = 132;
bitmarkParser.RULE_book_coming_soon = 133;
bitmarkParser.RULE_book_read_more = 134;
bitmarkParser.RULE_book_summary = 135;
bitmarkParser.RULE_book_epigraph = 136;
bitmarkParser.RULE_code = 137;
bitmarkParser.RULE_card1 = 138;
bitmarkParser.RULE_question1 = 139;
bitmarkParser.RULE_screenshot = 140;
bitmarkParser.RULE_focus_image = 141;
bitmarkParser.RULE_photo = 142;
bitmarkParser.RULE_browser_image = 143;
bitmarkParser.RULE_chapter_subject_matter = 144;
bitmarkParser.RULE_release_note = 145;
bitmarkParser.RULE_conclusion = 146;
bitmarkParser.RULE_featured = 147;
bitmarkParser.RULE_vendor_amcharts_5_chart = 148;
bitmarkParser.RULE_newspaper_article = 149;
bitmarkParser.RULE_blog_article = 150;
bitmarkParser.RULE_book_article = 151;
bitmarkParser.RULE_notebook_article = 152;
bitmarkParser.RULE_workbook_article = 153;
bitmarkParser.RULE_release_notes_summary = 154;
bitmarkParser.RULE_message = 155;
bitmarkParser.RULE_cook_preparation = 156;
bitmarkParser.RULE_cook_step = 157;
bitmarkParser.RULE_cook_ingredients = 158;
bitmarkParser.RULE_cook_remark = 159;
bitmarkParser.RULE_cook_variation = 160;
bitmarkParser.RULE_cook_insert = 161;
bitmarkParser.RULE_cook_arrangement = 162;
bitmarkParser.RULE_cook_practice_advise = 163;
bitmarkParser.RULE_cook_plate = 164;
bitmarkParser.RULE_cook_recommendation = 165;
bitmarkParser.RULE_cook_personal_recommendation = 166;
bitmarkParser.RULE_cook_side_drink = 167;
bitmarkParser.RULE_cook_side_dish = 168;
bitmarkParser.RULE_cook_timer = 169;
bitmarkParser.RULE_lang_learning_outcomes = 170;
bitmarkParser.RULE_lang_enabling_language_skills = 171;
bitmarkParser.RULE_lang_life_skills = 172;
bitmarkParser.RULE_lang_english_around_world = 173;
bitmarkParser.RULE_lang_good_to_know = 174;
bitmarkParser.RULE_lang_learning_strategy = 175;
bitmarkParser.RULE_lang_like_a_local = 176;
bitmarkParser.RULE_lang_useful_phrases = 177;
bitmarkParser.RULE_lang_level_down = 178;
bitmarkParser.RULE_lang_level_up = 179;
bitmarkParser.RULE_lang_extra_activity = 180;
bitmarkParser.RULE_lang_video_script = 181;
bitmarkParser.RULE_lang_audio_script = 182;
bitmarkParser.RULE_lang_vocabulary = 183;
bitmarkParser.RULE_lang_homework = 184;
bitmarkParser.RULE_lang_teacher_note = 185;
bitmarkParser.RULE_review_note = 186;
bitmarkParser.RULE_review_author_note = 187;
bitmarkParser.RULE_review_reviewer_note = 188;
bitmarkParser.RULE_review_request_for_review_note = 189;
bitmarkParser.RULE_review_approved_note = 190;
bitmarkParser.RULE_checklist = 191;
bitmarkParser.RULE_video_transcript = 192;
bitmarkParser.RULE_audio_transcript = 193;
bitmarkParser.RULE_image_portrait = 194;
bitmarkParser.RULE_image_landscape = 195;
bitmarkParser.RULE_image_on_device = 196;
bitmarkParser.RULE_bitmark_example = 197;
bitmarkParser.RULE_app_ai_prompt = 198;
bitmarkParser.RULE_book_link = 199;
bitmarkParser.RULE_book_link_next = 200;
bitmarkParser.RULE_book_link_prev = 201;
bitmarkParser.RULE_figure = 202;
bitmarkParser.RULE_video_link_landscape = 203;
bitmarkParser.RULE_video_link_portrait = 204;
bitmarkParser.RULE_image_mood = 205;
bitmarkParser.RULE_image_figure = 206;
bitmarkParser.RULE_image_banner = 207;
bitmarkParser.RULE_image_styled = 208;
bitmarkParser.RULE_image_screenshot = 209;
bitmarkParser.RULE_app_get_screenshot = 210;
bitmarkParser.RULE_app_create_bits_from_image = 211;
bitmarkParser.RULE_life_skill_sticker = 212;
bitmarkParser.RULE_details_image = 213;
bitmarkParser.RULE_page_banner = 214;
bitmarkParser.RULE_page_buy_button = 215;
bitmarkParser.RULE_image_render_svg = 216;
bitmarkParser.RULE_vendor_jsfiddle = 217;
bitmarkParser.RULE_vendor_jsfiddle_embed = 218;
bitmarkParser.RULE_app_code_editor = 219;
bitmarkParser.RULE_app_code_ide = 220;
bitmarkParser.RULE_code_runtime = 221;
bitmarkParser.RULE_output = 222;
bitmarkParser.RULE_console_log = 223;
bitmarkParser.RULE_vendor_jupyter_cell_code = 224;
bitmarkParser.RULE_vendor_jupyter_cell_raw = 225;
bitmarkParser.RULE_vendor_jupyter_output = 226;
bitmarkParser.RULE_vendor_jupyter_cell_markdown = 227;
bitmarkParser.RULE_vendor_jupyter_ipynb = 228;
bitmarkParser.RULE_app_code_cell = 229;
bitmarkParser.RULE_stdout = 230;
bitmarkParser.RULE_app_bitmark_from_javascript = 231;
bitmarkParser.RULE_app_bitmark_from_editor = 232;
bitmarkParser.RULE_images_logo_grave = 233;
bitmarkParser.RULE_logo = 234;
bitmarkParser.RULE_logo_attribs = 235;
bitmarkParser.RULE_bot_choice = 236;
bitmarkParser.RULE_rating = 237;
bitmarkParser.RULE_bullet_item = 238;
bitmarkParser.RULE_survey = 239;
bitmarkParser.RULE_survey_1 = 240;
bitmarkParser.RULE_survey_anonymous = 241;
bitmarkParser.RULE_survey_anonymous_1 = 242;
bitmarkParser.RULE_self_assessment = 243;
bitmarkParser.RULE_self_assess_s_and_w = 244;
bitmarkParser.RULE_atpoint = 245;
bitmarkParser.RULE_format = 246;
bitmarkParser.RULE_resource_format = 247;
bitmarkParser.RULE_resource_format_extra = 248;
bitmarkParser.RULE_format2 = 249;
bitmarkParser.RULE_image_format = 250;
bitmarkParser.RULE_video_format = 251;
bitmarkParser.RULE_article_format = 252;
bitmarkParser.RULE_document_format = 253;
bitmarkParser.RULE_app_format = 254;
bitmarkParser.RULE_website_format = 255;
bitmarkParser.RULE_stillimagefilm_format = 256;
bitmarkParser.RULE_op_article_format = 257;
bitmarkParser.RULE_op_document_format = 258;
bitmarkParser.RULE_op_app_format = 259;
bitmarkParser.RULE_op_website_format = 260;
bitmarkParser.RULE_op_video_format = 261;
bitmarkParser.RULE_op_stillimagefilm_format = 262;
bitmarkParser.RULE_articlebit = 263;
bitmarkParser.RULE_documentbit = 264;
bitmarkParser.RULE_websitebit = 265;
bitmarkParser.RULE_appbit = 266;
bitmarkParser.RULE_stillimagefilmbit = 267;
bitmarkParser.RULE_stillimg_one = 268;
bitmarkParser.RULE_videobit = 269;
bitmarkParser.RULE_video_one = 270;
bitmarkParser.RULE_imagebit = 271;
bitmarkParser.RULE_image_one = 272;
bitmarkParser.RULE_op_image_format = 273;
bitmarkParser.RULE_image_chained = 274;
bitmarkParser.RULE_image_chained4match = 275;
bitmarkParser.RULE_audiobit = 276;
bitmarkParser.RULE_audio_one = 277;
bitmarkParser.RULE_audio_format = 278;
bitmarkParser.RULE_op_audio_format = 279;
bitmarkParser.RULE_resource_chained = 280;
bitmarkParser.RULE_telephone = 281;
bitmarkParser.RULE_url = 282;
bitmarkParser.RULE_item = 283;
bitmarkParser.RULE_lead = 284;
bitmarkParser.RULE_angleref = 285;
bitmarkParser.RULE_example = 286;
bitmarkParser.RULE_bracketed_text = 287;
bitmarkParser.RULE_reference = 288;
bitmarkParser.RULE_progress = 289;
bitmarkParser.RULE_dateprop = 290;
bitmarkParser.RULE_dateprop_chained = 291;
bitmarkParser.RULE_instruction = 292;
bitmarkParser.RULE_hint = 293;
bitmarkParser.RULE_title = 294;
bitmarkParser.RULE_bool_label = 295;
bitmarkParser.RULE_progress_points = 296;
bitmarkParser.RULE_istracked = 297;
bitmarkParser.RULE_isinfoonly = 298;
bitmarkParser.RULE_atdef = 299;
bitmarkParser.RULE_atdef_ = 300;
bitmarkParser.RULE_dollarans = 301;
bitmarkParser.RULE_anchor = 302;
bitmarkParser.RULE_lines = 303;
bitmarkParser.RULE_s_and_w = 304;
bitmarkParser.RULE_dclines = 305;
bitmarkParser.RULE_clnsp = 306;
bitmarkParser.RULE_sspl = 307;
bitmarkParser.RULE_words = 308;
bitmarkParser.RULE_sp = 309;
bitmarkParser.RULE_sentence = 310;
// tslint:disable:no-trailing-whitespace
bitmarkParser.ruleNames = [
    "bitmark", "bitmark_", "bit", "book", "chapter", "ai_prompt", "note_ai",
    "summary_ai", "article_ai", "toc", "summary", "internal_link", "bit_alias",
    "title_etc", "group_born", "group_died", "learning_path_lti", "learning_path_step",
    "learning_path_book", "learning_path_sign", "learning_path_video_call",
    "learning_path_learning_goal", "learning_path_closing", "learning_path_feedback",
    "learning_path_bot_training", "learning_path_external_link", "learning_path_classroom_training",
    "learning_path_classroom_event", "bot_action_send", "bot_action_announce",
    "bot_action_save", "bot_action_remind", "bot_action_response", "bot_action_true_false",
    "bot_action_rating_number", "bot_action_rating_stars", "bot_action", "bo_actions",
    "boacts", "feedback", "footer", "bitElem", "bitElem_noResource", "gap",
    "single_gap", "choice_plus", "choice_minus", "choice_star", "essay", "ml_example",
    "partans", "resource", "correction", "corrs", "mark_", "mark_text", "mark_color",
    "take_audio", "take_picture", "record_audio", "preparation_note", "assignment",
    "article", "statement", "details", "sample_solution", "buttoncopytext",
    "wbtcontinue", "learningpathdetails", "page", "note", "info", "warning",
    "remark", "help", "danger", "bug", "sidenote", "stickynote", "quote",
    "footnote", "hintbit", "examplebit", "vendor_padlet_embed", "scorm", "bit_image",
    "bit_imageLink", "bit_imageZoom", "bit_imagePrototype", "bit_imageSuperWide",
    "bit_audio", "bit_audioLink", "bit_audioEmbed", "bit_video", "bit_videoLink",
    "bit_videoEmbed", "bit_videoPortrait", "bit_videoLandscape", "bit_stillImageFilm",
    "bit_stillImageFilmLink", "bit_stillImageFilmEmbed", "bit_websiteLink",
    "bit_document", "bit_documentLink", "bit_documentEmbed", "bit_documentDownload",
    "bit_appLink", "bit_editorial", "book_frontispiece", "book_title", "book_copyright",
    "book_dedication", "book_forword", "book_preface", "book_prologue", "book_epilogue",
    "book_introduction", "book_inciting_incident", "book_conclusion", "book_afterword",
    "book_postscript", "book_appendix", "book_addendum", "book_acknowledgments",
    "book_list_of_contributors", "book_bibliography", "book_reference_list",
    "book_endnotes", "book_notes", "book_copyright_permissions", "book_teaser",
    "book_auther_bio", "book_request_for_a_book_review", "book_coming_soon",
    "book_read_more", "book_summary", "book_epigraph", "code", "card1", "question1",
    "screenshot", "focus_image", "photo", "browser_image", "chapter_subject_matter",
    "release_note", "conclusion", "featured", "vendor_amcharts_5_chart", "newspaper_article",
    "blog_article", "book_article", "notebook_article", "workbook_article",
    "release_notes_summary", "message", "cook_preparation", "cook_step", "cook_ingredients",
    "cook_remark", "cook_variation", "cook_insert", "cook_arrangement", "cook_practice_advise",
    "cook_plate", "cook_recommendation", "cook_personal_recommendation", "cook_side_drink",
    "cook_side_dish", "cook_timer", "lang_learning_outcomes", "lang_enabling_language_skills",
    "lang_life_skills", "lang_english_around_world", "lang_good_to_know",
    "lang_learning_strategy", "lang_like_a_local", "lang_useful_phrases",
    "lang_level_down", "lang_level_up", "lang_extra_activity", "lang_video_script",
    "lang_audio_script", "lang_vocabulary", "lang_homework", "lang_teacher_note",
    "review_note", "review_author_note", "review_reviewer_note", "review_request_for_review_note",
    "review_approved_note", "checklist", "video_transcript", "audio_transcript",
    "image_portrait", "image_landscape", "image_on_device", "bitmark_example",
    "app_ai_prompt", "book_link", "book_link_next", "book_link_prev", "figure",
    "video_link_landscape", "video_link_portrait", "image_mood", "image_figure",
    "image_banner", "image_styled", "image_screenshot", "app_get_screenshot",
    "app_create_bits_from_image", "life_skill_sticker", "details_image", "page_banner",
    "page_buy_button", "image_render_svg", "vendor_jsfiddle", "vendor_jsfiddle_embed",
    "app_code_editor", "app_code_ide", "code_runtime", "output", "console_log",
    "vendor_jupyter_cell_code", "vendor_jupyter_cell_raw", "vendor_jupyter_output",
    "vendor_jupyter_cell_markdown", "vendor_jupyter_ipynb", "app_code_cell",
    "stdout", "app_bitmark_from_javascript", "app_bitmark_from_editor", "images_logo_grave",
    "logo", "logo_attribs", "bot_choice", "rating", "bullet_item", "survey",
    "survey_1", "survey_anonymous", "survey_anonymous_1", "self_assessment",
    "self_assess_s_and_w", "atpoint", "format", "resource_format", "resource_format_extra",
    "format2", "image_format", "video_format", "article_format", "document_format",
    "app_format", "website_format", "stillimagefilm_format", "op_article_format",
    "op_document_format", "op_app_format", "op_website_format", "op_video_format",
    "op_stillimagefilm_format", "articlebit", "documentbit", "websitebit",
    "appbit", "stillimagefilmbit", "stillimg_one", "videobit", "video_one",
    "imagebit", "image_one", "op_image_format", "image_chained", "image_chained4match",
    "audiobit", "audio_one", "audio_format", "op_audio_format", "resource_chained",
    "telephone", "url", "item", "lead", "angleref", "example", "bracketed_text",
    "reference", "progress", "dateprop", "dateprop_chained", "instruction",
    "hint", "title", "bool_label", "progress_points", "istracked", "isinfoonly",
    "atdef", "atdef_", "dollarans", "anchor", "lines", "s_and_w", "dclines",
    "clnsp", "sspl", "words", "sp", "sentence",
];
bitmarkParser._LITERAL_NAMES = [
    undefined, "'[.'", undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'CLOZE'", "'MATCH'", undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, "':'", "'&'", "'::'", "'+'",
    "'.@'", "'>'", "'<'", "'\u25BA'", "'\u2192'", "'=='", undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'[@'", undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, "'http://'", "'https://'",
    "'&audio'", "'&image'", "'&image-zoom'", "'&video'", "'&article'", "'&document'",
    "'&app'", "'&website'", "'&still-image-film'", "'&pdf'", undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, "'&audio-link'", "'&image-link'", "'&video-link'",
    "'&article-link'", "'&document-link'", "'&document-download'", "'&app-link'",
    "'&website-link'", "'&still-image-film-link'", undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, "'&image-embed'",
    "'&video-embed'", "'&daudio-embed'", "'&document-embed'", "'&still-image-film-embed'",
    undefined, undefined, undefined, undefined, undefined, "':bitmark--'",
    "':bitmark++'", "':text'", "':json'", "':prosemirror'", "':placeholder'",
    "':basic'", "':jpg'", "':png'", "':gif'", "':svg'", "':mp2'", "':mp3'",
    "':mp4'", "':flv'", "':wmv'", "':mpeg'", "':mpg'", "'tel:'", "'.article-attachment'",
    "'*'",
];
bitmarkParser._SYMBOLIC_NAMES = [
    undefined, "OPDOT", "S", "BitBook", "BitChapter", "BitToc", "BitSummary",
    "BitIntlink", "BitIntRef", "BitAlias", "BitGroups", "BitGroupt", "BitPlaceholder",
    "BitStatement", "BitDetails", "BitSampleSolution", "BitTakeAudio", "CLOZE",
    "MATCH", "BitArticle", "BitPage", "BitEssay", "BitMessage", "BitCorrection",
    "BitMark", "BitTakepic", "BitRecaud", "BitPrepnote", "BitAssign", "BitBotint",
    "BitSelfassess", "BitRating", "BitSurvey", "BitSurvey1", "BitSurveyanon",
    "BitSurveyanon1", "BitNote", "BitInfo", "BitWarning", "BitRemark", "BitHint",
    "BitHelp", "BitDanger", "BitBug", "BitSidenote", "BitStickynote", "BitQuote",
    "BitFootnote", "BitExample", "BitButtonCopytext", "BitWbtContinue", "BitLearningPathDetails",
    "BitAiPrompt", "BitNoteAi", "BitSummayAi", "BitArticleAi", "BitLearningPathLti",
    "BitLearningPathStep", "BitLearningPathBook", "BitLearningPathSign", "BitLearningPathVideoCall",
    "BitLearningPathLearningGoal", "BitLearningPathClosing", "BitLearningPathFeedback",
    "BitLearningPathBotTraining", "BitLearningPathExternalLink", "BitLearningPathClassroomTraining",
    "BitLearningPathClassroomEvent", "BitBotActionSend", "BitBotActionAnnounce",
    "BitBotActionSave", "BitBotActionRemind", "BitVendorPadletEmbed", "BitScorm",
    "BitImage", "BitImageLink", "BitImageZoom", "BitImagePrototype", "BitImageSuperWide",
    "BitAudio", "BitAudioLink", "BitAudioEmbed", "BitVideo", "BitVideoLink",
    "BitVideoEmbed", "BitVideoPortrait", "BitVideoLandscape", "BitStillImageFilm",
    "BitStillImageFilmLink", "BitStillImageFilmEmbed", "BitWebsiteLink", "BitDocument",
    "BitDocumentLink", "BitDocumentEmbed", "BitDocumentDownload", "BitAppLink",
    "BitEditorial", "BitBookFrontispiece", "BitBookTitle", "BitBookCopyright",
    "BitBookDedication", "BitBookForword", "BitBookPreface", "BitBookPrologue",
    "BitBookEpilogue", "BitBookIntroduction", "BitBookIncitingIncident", "BitBookConclusion",
    "BitBookAfterword", "BitBookPostscript", "BitBookappendix", "BitBookAddendum",
    "BitBookAcknowledgments", "BitBookListOfContributors", "BitBookBibliography",
    "BitBookReferenceList", "BitBookEndnotes", "BitBookNotes", "BitBookCopyrightPermissions",
    "BitBookTeaser", "BitBookAutherBio", "BitBookRequestForABookReview", "BitBookComingSoon",
    "BitBookReadMore", "BitBookSummary", "BitBookEpigraph", "BitCode", "BitCard1",
    "BitQuestion1", "BitScreenshot", "BitFocusImage", "BitPhoto", "BitBrowserImage",
    "BitBotActionResponse", "BitBotActionTrueFalse", "BitBotActionRatingNumber",
    "BitBotActionRatingStars", "BitChapterSubjectMatter", "BitReleaseNote",
    "BitConclusion", "BitVendorAmcharts5Chart", "BitFeatured", "BitNewspaperArticle",
    "BitBlogArticle", "BitBookArticle", "BitNotebookArticle", "BitWorkbookArticle",
    "BitReleaseNotesSummary", "BitCookPreparation", "BitCookStep", "BitCookIngredients",
    "BitCookRremark", "BitCookVariation", "BitCookInsert", "BitCookArrangement",
    "BitCookPracticeAdvise", "BitCookPlate", "BitCookRecommendation", "BitCookPersonalRecommendation",
    "BitCookSideDrink", "BitCookSideDish", "BitCookTimer", "BitLangLearningOutcomes",
    "BitLangEnablingLanguageSkills", "BitLangLifeSkills", "BitLangEnglishAroundWorld",
    "BitLangGoodtoknow", "BitLangLearningStrategy", "BitLangLikeAlocal", "BitLangUsefulPhrases",
    "BitLangLevelDown", "BitLangLevelUp", "BitLangExtraActivity", "BitLangVideoScript",
    "BitLangAudioScript", "BitLangVocabulary", "BitLangHomework", "BitLangTeacherNote",
    "BitReviewNote", "BitReviewAuthorNote", "BitReviewReviewerNote", "BitReviewRequestForReviewNote",
    "BitReviewApprovedNote", "BitChecklist", "BitVideoTranscript", "BitAudioTranscript",
    "BitImagePortrait", "BitImageLandscape", "BitImageOnDevice", "BitBitmarkExample",
    "BitAppAiPrompt", "BitBookLink", "BitBookLinkNext", "BitBookLinkPrev",
    "BitFigure", "BitVideoLinkLandscape", "BitVideoLinkPortrait", "BitImageMood",
    "BitImageFigure", "BitImageBanner", "BitImageStyled", "BitImageScreenshot",
    "BitAppGetScreenshot", "BitAppCreateBitsFromImage", "BitLifeSkillSticker",
    "BitDetailsImage", "BitImagesLogoGrave", "BitPageBanner", "BitPageBuyButton",
    "BitVendorJsfiddle", "BitVendorJsfiddleEmbed", "BitImageRenderSvg", "BitAppCodeEditor",
    "BitAppCodeIde", "BitCodeRuntime", "BitOutput", "BitConsoleLog", "BitVenderJupyterCellCode",
    "BitVenderJupyterCellRaw", "BitVenderJupyterOutput", "BitVenderJupyterCellMarkdown",
    "BitVenderJupyterIpynb", "BitAppCodeCell", "BitStdout", "BitAppBitmarkFromJavascript",
    "BitAppBitmarkFromEditor", "OPDOLL", "OPBUL", "OPRANGLES", "OPRANGLEL",
    "OPDANGLE", "OPU", "OPB", "OPQ", "OPA", "OPP", "OPM", "OPS", "OPR", "OPHASH",
    "OPC", "CL", "COLON", "AMP", "DBLCOLON", "PLUS", "DotAt", "Greater", "Less",
    "RightAngle", "RightArrow", "DBLEQ", "HSPL", "HSPL2", "SSPL", "SSPL2",
    "QUOTE_INDEX", "COMMENT", "DCANY", "Image_type", "Audio_type", "Video_type",
    "ArticleText", "NOTCL", "NUMERIC", "STRING", "NL", "NOTBITMARK", "ELIPSIS",
    "SENTENCE", "BARSTRING", "OPAT", "AtProgress", "AtReference", "AtWidth",
    "AtHeight", "AtProgressPoints", "AtShortanswer", "AtLonganswer", "AtExampleWithStr",
    "AtExamplecol", "AtExamplecl", "AtSampleSolution", "AtPartialAnswerS",
    "AtPartialAnswer", "AtLabeltrue", "AtLabelfalse", "AtPoints", "AtSrc",
    "AtPartner", "OPATALT", "OPAMARK", "ShowInIndex", "OpAtCaption", "OpAtLicense",
    "OpAtCopyright", "OpAtSearch", "OpAtIsTracked", "OpAtIsInfoOnly", "AtDate",
    "Http", "Https", "AmpAudio", "AmpImage", "AmpImageZoom", "AmpVideo", "AmpArticle",
    "AmpDocument", "AmpApp", "AmpWebsite", "AmpStillImageFilm", "AmpPdf",
    "OpAmpAudio", "OpAmpImage", "OpAmpImageZoom", "OpAmpVideo", "OpAmpArticle",
    "OpAmpArticleAtt", "OpAmpDocument", "OpAmpApp", "OpAmpWebsite", "OpAmpStillImageFilm",
    "BracEnclose", "AmpAudioLink", "AmpImageLink", "AmpVideoLink", "AmpArticleLink",
    "AmpDocumentLink", "AmpDocumentDownload", "AmpAppLink", "AmpWebsiteLink",
    "AmpStillImageFilmLink", "OpAmpAudioLink", "OpAmpImageLink", "OpAmpVideoLink",
    "OpAmpArticleLink", "OpAmpDocumentLink", "OpAmpDocumentDownload", "OpAmpAppLink",
    "OpAmpWebsiteLink", "OpAmpStillImageFilmLink", "AmpImageEmbed", "AmpVideoEmbed",
    "AmpAudioEmbed", "AmpDocumentEmbed", "AmpStillImageFilmEmbed", "OpAmpImageEmbed",
    "OpAmpVideoEmbed", "OpAmpAudioEmbed", "OpAmpDocumentEmbed", "OpAmpStillImageFilmEmbed",
    "BitmarkMinus", "BitmarkPlus", "ColonText", "ColonJson", "Prosemirror",
    "Placeholder", "BASIC", "JPG", "PNG", "GIF", "SVG", "MP2", "MP3", "MP4",
    "FLV", "WMV", "MPEG", "MPG", "TEL", "DotArticleAtt", "STAR", "URL", "LIST_LINE",
    "ENCLBARS",
];
bitmarkParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(bitmarkParser._LITERAL_NAMES, bitmarkParser._SYMBOLIC_NAMES, []);
bitmarkParser._serializedATNSegments = 13;
bitmarkParser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0178\u1ACF\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
    "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
    "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
    "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
    "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
    "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
    "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
    "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
    "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
    "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
    "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
    "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
    "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
    "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
    "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
    "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
    "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
    "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
    "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
    "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
    "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
    "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
    "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
    "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
    "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
    "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
    "\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
    "\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
    "\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
    "\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
    "\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
    "\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
    "\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
    "\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
    "\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
    "\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
    "\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
    "\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
    "\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
    "\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
    "\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
    "\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
    "\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
    "\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
    "\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
    "\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
    "\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
    "\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
    "\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
    "\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
    "\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
    "\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
    "\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
    "\u0137\t\u0137\x04\u0138\t\u0138\x03\x02\x03\x02\x07\x02\u0273\n\x02\f" +
    "\x02\x0E\x02\u0276\v\x02\x03\x02\x07\x02\u0279\n\x02\f\x02\x0E\x02\u027C" +
    "\v\x02\x06\x02\u027E\n\x02\r\x02\x0E\x02\u027F\x03\x02\x07\x02\u0283\n" +
    "\x02\f\x02\x0E\x02\u0286\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x05\x03" +
    "\u028C\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u036B\n\x04" +
    "\x03\x05\x03\x05\x03\x05\x03\x05\x07\x05\u0371\n\x05\f\x05\x0E\x05\u0374" +
    "\v\x05\x03\x05\x03\x05\x07\x05\u0378\n\x05\f\x05\x0E\x05\u037B\v\x05\x07" +
    "\x05\u037D\n\x05\f\x05\x0E\x05\u0380\v\x05\x03\x06\x03\x06\x03\x06\x03" +
    "\x06\x07\x06\u0386\n\x06\f\x06\x0E\x06\u0389\v\x06\x03\x06\x03\x06\x03" +
    "\x06\x05\x06\u038E\n\x06\x03\x06\x03\x06\x07\x06\u0392\n\x06\f\x06\x0E" +
    "\x06\u0395\v\x06\x03\x06\x07\x06\u0398\n\x06\f\x06\x0E\x06\u039B\v\x06" +
    "\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07\u03A1\n\x07\f\x07\x0E\x07\u03A4" +
    "\v\x07\x03\x07\x03\x07\x07\x07\u03A8\n\x07\f\x07\x0E\x07\u03AB\v\x07\x06" +
    "\x07\u03AD\n\x07\r\x07\x0E\x07\u03AE\x03\b\x03\b\x03\b\x03\b\x07\b\u03B5" +
    "\n\b\f\b\x0E\b\u03B8\v\b\x03\b\x03\b\x07\b\u03BC\n\b\f\b\x0E\b\u03BF\v" +
    "\b\x06\b\u03C1\n\b\r\b\x0E\b\u03C2\x03\t\x03\t\x03\t\x03\t\x07\t\u03C9" +
    "\n\t\f\t\x0E\t\u03CC\v\t\x03\t\x03\t\x07\t\u03D0\n\t\f\t\x0E\t\u03D3\v" +
    "\t\x06\t\u03D5\n\t\r\t\x0E\t\u03D6\x03\n\x03\n\x03\n\x03\n\x07\n\u03DD" +
    "\n\n\f\n\x0E\n\u03E0\v\n\x03\n\x03\n\x07\n\u03E4\n\n\f\n\x0E\n\u03E7\v" +
    "\n\x06\n\u03E9\n\n\r\n\x0E\n\u03EA\x03\v\x03\v\x05\v\u03EF\n\v\x03\v\x03" +
    "\v\x03\v\x03\v\x03\v\x05\v\u03F6\n\v\x03\f\x03\f\x03\f\x07\f\u03FB\n\f" +
    "\f\f\x0E\f\u03FE\v\f\x03\f\x03\f\x03\r\x03\r\x05\r\u0404\n\r\x03\r\x03" +
    "\r\x07\r\u0408\n\r\f\r\x0E\r\u040B\v\r\x03\r\x07\r\u040E\n\r\f\r\x0E\r" +
    "\u0411\v\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x05\x0F\u0418\n\x0F" +
    "\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u0421" +
    "\n\x0F\x07\x0F\u0423\n\x0F\f\x0F\x0E\x0F\u0426\v\x0F\x03\x10\x03\x10\x03" +
    "\x10\x03\x10\x03\x10\x03\x10\x06\x10\u042E\n\x10\r\x10\x0E\x10\u042F\x03" +
    "\x10\x06\x10\u0433\n\x10\r\x10\x0E\x10\u0434\x03\x10\x03\x10\x07\x10\u0439" +
    "\n\x10\f\x10\x0E\x10\u043C\v\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
    "\x03\x11\x06\x11\u0444\n\x11\r\x11\x0E\x11\u0445\x03\x11\x06\x11\u0449" +
    "\n\x11\r\x11\x0E\x11\u044A\x03\x11\x03\x11\x07\x11\u044F\n\x11\f\x11\x0E" +
    "\x11\u0452\v\x11\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12\u0458\n\x12\f" +
    "\x12\x0E\x12\u045B\v\x12\x03\x12\x03\x12\x07\x12\u045F\n\x12\f\x12\x0E" +
    "\x12\u0462\v\x12\x06\x12\u0464\n\x12\r\x12\x0E\x12\u0465\x03\x13\x03\x13" +
    "\x03\x13\x03\x13\x07\x13\u046C\n\x13\f\x13\x0E\x13\u046F\v\x13\x03\x13" +
    "\x03\x13\x07\x13\u0473\n\x13\f\x13\x0E\x13\u0476\v\x13\x06\x13\u0478\n" +
    "\x13\r\x13\x0E\x13\u0479\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\u0480" +
    "\n\x14\f\x14\x0E\x14\u0483\v\x14\x03\x14\x03\x14\x07\x14\u0487\n\x14\f" +
    "\x14\x0E\x14\u048A\v\x14\x06\x14\u048C\n\x14\r\x14\x0E\x14\u048D\x03\x15" +
    "\x03\x15\x03\x15\x03\x15\x07\x15\u0494\n\x15\f\x15\x0E\x15\u0497\v\x15" +
    "\x03\x15\x03\x15\x07\x15\u049B\n\x15\f\x15\x0E\x15\u049E\v\x15\x06\x15" +
    "\u04A0\n\x15\r\x15\x0E\x15\u04A1\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16" +
    "\u04A8\n\x16\f\x16\x0E\x16\u04AB\v\x16\x03\x16\x03\x16\x07\x16\u04AF\n" +
    "\x16\f\x16\x0E\x16\u04B2\v\x16\x06\x16\u04B4\n\x16\r\x16\x0E\x16\u04B5" +
    "\x03\x17\x03\x17\x03\x17\x03\x17\x07\x17\u04BC\n\x17\f\x17\x0E\x17\u04BF" +
    "\v\x17\x03\x17\x03\x17\x07\x17\u04C3\n\x17\f\x17\x0E\x17\u04C6\v\x17\x06" +
    "\x17\u04C8\n\x17\r\x17\x0E\x17\u04C9\x03\x18\x03\x18\x03\x18\x03\x18\x07" +
    "\x18\u04D0\n\x18\f\x18\x0E\x18\u04D3\v\x18\x03\x18\x03\x18\x07\x18\u04D7" +
    "\n\x18\f\x18\x0E\x18\u04DA\v\x18\x06\x18\u04DC\n\x18\r\x18\x0E\x18\u04DD" +
    "\x03\x19\x03\x19\x03\x19\x03\x19\x07\x19\u04E4\n\x19\f\x19\x0E\x19\u04E7" +
    "\v\x19\x03\x19\x03\x19\x07\x19\u04EB\n\x19\f\x19\x0E\x19\u04EE\v\x19\x06" +
    "\x19\u04F0\n\x19\r\x19\x0E\x19\u04F1\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07" +
    "\x1A\u04F8\n\x1A\f\x1A\x0E\x1A\u04FB\v\x1A\x03\x1A\x03\x1A\x07\x1A\u04FF" +
    "\n\x1A\f\x1A\x0E\x1A\u0502\v\x1A\x06\x1A\u0504\n\x1A\r\x1A\x0E\x1A\u0505" +
    "\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x07\x1B\u050C\n\x1B\f\x1B\x0E\x1B\u050F" +
    "\v\x1B\x03\x1B\x03\x1B\x07\x1B\u0513\n\x1B\f\x1B\x0E\x1B\u0516\v\x1B\x06" +
    "\x1B\u0518\n\x1B\r\x1B\x0E\x1B\u0519\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x07" +
    "\x1C\u0520\n\x1C\f\x1C\x0E\x1C\u0523\v\x1C\x03\x1C\x03\x1C\x07\x1C\u0527" +
    "\n\x1C\f\x1C\x0E\x1C\u052A\v\x1C\x06\x1C\u052C\n\x1C\r\x1C\x0E\x1C\u052D" +
    "\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u0534\n\x1D\f\x1D\x0E\x1D\u0537" +
    "\v\x1D\x03\x1D\x03\x1D\x07\x1D\u053B\n\x1D\f\x1D\x0E\x1D\u053E\v\x1D\x06" +
    "\x1D\u0540\n\x1D\r\x1D\x0E\x1D\u0541\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07" +
    "\x1E\u0548\n\x1E\f\x1E\x0E\x1E\u054B\v\x1E\x03\x1E\x03\x1E\x07\x1E\u054F" +
    "\n\x1E\f\x1E\x0E\x1E\u0552\v\x1E\x06\x1E\u0554\n\x1E\r\x1E\x0E\x1E\u0555" +
    "\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F\u055C\n\x1F\f\x1F\x0E\x1F\u055F" +
    "\v\x1F\x03\x1F\x03\x1F\x07\x1F\u0563\n\x1F\f\x1F\x0E\x1F\u0566\v\x1F\x06" +
    "\x1F\u0568\n\x1F\r\x1F\x0E\x1F\u0569\x03 \x03 \x03 \x03 \x07 \u0570\n" +
    " \f \x0E \u0573\v \x03 \x03 \x07 \u0577\n \f \x0E \u057A\v \x06 \u057C" +
    "\n \r \x0E \u057D\x03!\x03!\x03!\x03!\x07!\u0584\n!\f!\x0E!\u0587\v!\x03" +
    "!\x03!\x07!\u058B\n!\f!\x0E!\u058E\v!\x06!\u0590\n!\r!\x0E!\u0591\x03" +
    "\"\x03\"\x03\"\x03\"\x07\"\u0598\n\"\f\"\x0E\"\u059B\v\"\x03\"\x03\"\x07" +
    "\"\u059F\n\"\f\"\x0E\"\u05A2\v\"\x07\"\u05A4\n\"\f\"\x0E\"\u05A7\v\"\x03" +
    "\"\x06\"\u05AA\n\"\r\"\x0E\"\u05AB\x03\"\x03\"\x05\"\u05B0\n\"\x03\"\x07" +
    "\"\u05B3\n\"\f\"\x0E\"\u05B6\v\"\x03#\x03#\x03#\x03#\x07#\u05BC\n#\f#" +
    "\x0E#\u05BF\v#\x03#\x03#\x07#\u05C3\n#\f#\x0E#\u05C6\v#\x07#\u05C8\n#" +
    "\f#\x0E#\u05CB\v#\x03#\x06#\u05CE\n#\r#\x0E#\u05CF\x03#\x03#\x05#\u05D4" +
    "\n#\x03#\x07#\u05D7\n#\f#\x0E#\u05DA\v#\x03$\x03$\x03$\x03$\x07$\u05E0" +
    "\n$\f$\x0E$\u05E3\v$\x03$\x03$\x07$\u05E7\n$\f$\x0E$\u05EA\v$\x07$\u05EC" +
    "\n$\f$\x0E$\u05EF\v$\x03$\x06$\u05F2\n$\r$\x0E$\u05F3\x03$\x03$\x05$\u05F8" +
    "\n$\x03$\x07$\u05FB\n$\f$\x0E$\u05FE\v$\x03%\x03%\x03%\x03%\x07%\u0604" +
    "\n%\f%\x0E%\u0607\v%\x03%\x03%\x07%\u060B\n%\f%\x0E%\u060E\v%\x07%\u0610" +
    "\n%\f%\x0E%\u0613\v%\x03&\x03&\x03&\x03\'\x07\'\u0619\n\'\f\'\x0E\'\u061C" +
    "\v\'\x03\'\x03\'\x07\'\u0620\n\'\f\'\x0E\'\u0623\v\'\x06\'\u0625\n\'\r" +
    "\'\x0E\'\u0626\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x05(\u0630\n(\x03)\x03" +
    ")\x05)\u0634\n)\x03*\x07*\u0637\n*\f*\x0E*\u063A\v*\x03*\x06*\u063D\n" +
    "*\r*\x0E*\u063E\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03" +
    "+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03" +
    "+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x05+\u0661\n+\x03,\x03,\x03,\x03" +
    ",\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03" +
    ",\x03,\x03,\x03,\x03,\x05,\u0679\n,\x03-\x03-\x03-\x03-\x03-\x03-\x07" +
    "-\u0681\n-\f-\x0E-\u0684\v-\x03.\x03.\x03.\x03.\x05.\u068A\n.\x03.\x07" +
    ".\u068D\n.\f.\x0E.\u0690\v.\x03.\x03.\x03/\x05/\u0695\n/\x03/\x03/\x06" +
    "/\u0699\n/\r/\x0E/\u069A\x03/\x03/\x030\x050\u06A0\n0\x030\x030\x060\u06A4" +
    "\n0\r0\x0E0\u06A5\x030\x030\x031\x051\u06AB\n1\x031\x031\x061\u06AF\n" +
    "1\r1\x0E1\u06B0\x031\x031\x032\x032\x032\x032\x032\x032\x072\u06BB\n2" +
    "\f2\x0E2\u06BE\v2\x072\u06C0\n2\f2\x0E2\u06C3\v2\x032\x072\u06C6\n2\f" +
    "2\x0E2\u06C9\v2\x032\x072\u06CC\n2\f2\x0E2\u06CF\v2\x032\x072\u06D2\n" +
    "2\f2\x0E2\u06D5\v2\x032\x032\x072\u06D9\n2\f2\x0E2\u06DC\v2\x032\x072" +
    "\u06DF\n2\f2\x0E2\u06E2\v2\x052\u06E4\n2\x033\x033\x053\u06E8\n3\x033" +
    "\x033\x053\u06EC\n3\x053\u06EE\n3\x033\x033\x034\x034\x035\x035\x036\x03" +
    "6\x036\x036\x036\x036\x076\u06FC\n6\f6\x0E6\u06FF\v6\x076\u0701\n6\f6" +
    "\x0E6\u0704\v6\x036\x076\u0707\n6\f6\x0E6\u070A\v6\x036\x076\u070D\n6" +
    "\f6\x0E6\u0710\v6\x036\x036\x076\u0714\n6\f6\x0E6\u0717\v6\x036\x076\u071A" +
    "\n6\f6\x0E6\u071D\v6\x056\u071F\n6\x037\x037\x077\u0723\n7\f7\x0E7\u0726" +
    "\v7\x037\x037\x037\x037\x077\u072C\n7\f7\x0E7\u072F\v7\x037\x037\x057" +
    "\u0733\n7\x038\x038\x038\x038\x038\x038\x058\u073B\n8\x038\x078\u073E" +
    "\n8\f8\x0E8\u0741\v8\x078\u0743\n8\f8\x0E8\u0746\v8\x038\x078\u0749\n" +
    "8\f8\x0E8\u074C\v8\x038\x038\x078\u0750\n8\f8\x0E8\u0753\v8\x038\x078" +
    "\u0756\n8\f8\x0E8\u0759\v8\x058\u075B\n8\x039\x039\x039\x039\x059\u0761" +
    "\n9\x039\x039\x039\x079\u0766\n9\f9\x0E9\u0769\v9\x03:\x03:\x07:\u076D" +
    "\n:\f:\x0E:\u0770\v:\x03:\x03:\x07:\u0774\n:\f:\x0E:\u0777\v:\x03:\x03" +
    ":\x03;\x03;\x03;\x03;\x03;\x03;\x07;\u0781\n;\f;\x0E;\u0784\v;\x07;\u0786" +
    "\n;\f;\x0E;\u0789\v;\x03;\x07;\u078C\n;\f;\x0E;\u078F\v;\x03;\x03;\x07" +
    ";\u0793\n;\f;\x0E;\u0796\v;\x03;\x07;\u0799\n;\f;\x0E;\u079C\v;\x05;\u079E" +
    "\n;\x03<\x03<\x03<\x03<\x03<\x03<\x07<\u07A6\n<\f<\x0E<\u07A9\v<\x07<" +
    "\u07AB\n<\f<\x0E<\u07AE\v<\x03<\x07<\u07B1\n<\f<\x0E<\u07B4\v<\x03<\x03" +
    "<\x07<\u07B8\n<\f<\x0E<\u07BB\v<\x03<\x07<\u07BE\n<\f<\x0E<\u07C1\v<\x05" +
    "<\u07C3\n<\x03=\x03=\x03=\x03=\x03=\x03=\x07=\u07CB\n=\f=\x0E=\u07CE\v" +
    "=\x07=\u07D0\n=\f=\x0E=\u07D3\v=\x03=\x07=\u07D6\n=\f=\x0E=\u07D9\v=\x03" +
    "=\x03=\x07=\u07DD\n=\f=\x0E=\u07E0\v=\x03=\x07=\u07E3\n=\f=\x0E=\u07E6" +
    "\v=\x05=\u07E8\n=\x03>\x03>\x03>\x03>\x07>\u07EE\n>\f>\x0E>\u07F1\v>\x03" +
    ">\x03>\x07>\u07F5\n>\f>\x0E>\u07F8\v>\x07>\u07FA\n>\f>\x0E>\u07FD\v>\x03" +
    ">\x05>\u0800\n>\x03>\x07>\u0803\n>\f>\x0E>\u0806\v>\x03>\x03>\x07>\u080A" +
    "\n>\f>\x0E>\u080D\v>\x03>\x07>\u0810\n>\f>\x0E>\u0813\v>\x05>\u0815\n" +
    ">\x03?\x03?\x03?\x03?\x06?\u081B\n?\r?\x0E?\u081C\x03?\x03?\x07?\u0821" +
    "\n?\f?\x0E?\u0824\v?\x07?\u0826\n?\f?\x0E?\u0829\v?\x03?\x05?\u082C\n" +
    "?\x03?\x07?\u082F\n?\f?\x0E?\u0832\v?\x03?\x03?\x07?\u0836\n?\f?\x0E?" +
    "\u0839\v?\x03?\x07?\u083C\n?\f?\x0E?\u083F\v?\x05?\u0841\n?\x03@\x03@" +
    "\x03@\x03@\x07@\u0847\n@\f@\x0E@\u084A\v@\x03@\x03@\x07@\u084E\n@\f@\x0E" +
    "@\u0851\v@\x07@\u0853\n@\f@\x0E@\u0856\v@\x03A\x03A\x03A\x03A\x07A\u085C" +
    "\nA\fA\x0EA\u085F\vA\x03A\x03A\x07A\u0863\nA\fA\x0EA\u0866\vA\x07A\u0868" +
    "\nA\fA\x0EA\u086B\vA\x03B\x03B\x03B\x03B\x07B\u0871\nB\fB\x0EB\u0874\v" +
    "B\x03B\x03B\x07B\u0878\nB\fB\x0EB\u087B\vB\x07B\u087D\nB\fB\x0EB\u0880" +
    "\vB\x03C\x03C\x03C\x03C\x07C\u0886\nC\fC\x0EC\u0889\vC\x03C\x03C\x07C" +
    "\u088D\nC\fC\x0EC\u0890\vC\x07C\u0892\nC\fC\x0EC\u0895\vC\x03D\x03D\x03" +
    "D\x03D\x07D\u089B\nD\fD\x0ED\u089E\vD\x03D\x03D\x07D\u08A2\nD\fD\x0ED" +
    "\u08A5\vD\x07D\u08A7\nD\fD\x0ED\u08AA\vD\x03E\x03E\x03E\x03E\x07E\u08B0" +
    "\nE\fE\x0EE\u08B3\vE\x03E\x03E\x07E\u08B7\nE\fE\x0EE\u08BA\vE\x07E\u08BC" +
    "\nE\fE\x0EE\u08BF\vE\x03F\x03F\x03F\x03F\x07F\u08C5\nF\fF\x0EF\u08C8\v" +
    "F\x03F\x03F\x07F\u08CC\nF\fF\x0EF\u08CF\vF\x07F\u08D1\nF\fF\x0EF\u08D4" +
    "\vF\x03G\x03G\x03G\x03G\x07G\u08DA\nG\fG\x0EG\u08DD\vG\x03G\x03G\x07G" +
    "\u08E1\nG\fG\x0EG\u08E4\vG\x07G\u08E6\nG\fG\x0EG\u08E9\vG\x03H\x03H\x03" +
    "H\x03H\x07H\u08EF\nH\fH\x0EH\u08F2\vH\x03H\x03H\x07H\u08F6\nH";
bitmarkParser._serializedATNSegment1 = "\fH\x0EH\u08F9\vH\x07H\u08FB\nH\fH\x0EH\u08FE\vH\x03I\x03I\x03I\x03I\x07" +
    "I\u0904\nI\fI\x0EI\u0907\vI\x03I\x03I\x07I\u090B\nI\fI\x0EI\u090E\vI\x07" +
    "I\u0910\nI\fI\x0EI\u0913\vI\x03J\x03J\x03J\x03J\x07J\u0919\nJ\fJ\x0EJ" +
    "\u091C\vJ\x03J\x03J\x07J\u0920\nJ\fJ\x0EJ\u0923\vJ\x07J\u0925\nJ\fJ\x0E" +
    "J\u0928\vJ\x03K\x03K\x03K\x03K\x07K\u092E\nK\fK\x0EK\u0931\vK\x03K\x03" +
    "K\x07K\u0935\nK\fK\x0EK\u0938\vK\x07K\u093A\nK\fK\x0EK\u093D\vK\x03L\x03" +
    "L\x03L\x03L\x07L\u0943\nL\fL\x0EL\u0946\vL\x03L\x03L\x07L\u094A\nL\fL" +
    "\x0EL\u094D\vL\x07L\u094F\nL\fL\x0EL\u0952\vL\x03M\x03M\x03M\x03M\x07" +
    "M\u0958\nM\fM\x0EM\u095B\vM\x03M\x03M\x07M\u095F\nM\fM\x0EM\u0962\vM\x07" +
    "M\u0964\nM\fM\x0EM\u0967\vM\x03N\x03N\x03N\x03N\x07N\u096D\nN\fN\x0EN" +
    "\u0970\vN\x03N\x03N\x07N\u0974\nN\fN\x0EN\u0977\vN\x07N\u0979\nN\fN\x0E" +
    "N\u097C\vN\x03O\x03O\x03O\x03O\x07O\u0982\nO\fO\x0EO\u0985\vO\x03O\x03" +
    "O\x07O\u0989\nO\fO\x0EO\u098C\vO\x07O\u098E\nO\fO\x0EO\u0991\vO\x03P\x03" +
    "P\x03P\x03P\x07P\u0997\nP\fP\x0EP\u099A\vP\x03P\x03P\x07P\u099E\nP\fP" +
    "\x0EP\u09A1\vP\x07P\u09A3\nP\fP\x0EP\u09A6\vP\x03Q\x03Q\x03Q\x03Q\x07" +
    "Q\u09AC\nQ\fQ\x0EQ\u09AF\vQ\x03Q\x03Q\x07Q\u09B3\nQ\fQ\x0EQ\u09B6\vQ\x07" +
    "Q\u09B8\nQ\fQ\x0EQ\u09BB\vQ\x03R\x03R\x03R\x03R\x07R\u09C1\nR\fR\x0ER" +
    "\u09C4\vR\x03R\x03R\x07R\u09C8\nR\fR\x0ER\u09CB\vR\x07R\u09CD\nR\fR\x0E" +
    "R\u09D0\vR\x03S\x03S\x03S\x03S\x07S\u09D6\nS\fS\x0ES\u09D9\vS\x03S\x03" +
    "S\x07S\u09DD\nS\fS\x0ES\u09E0\vS\x07S\u09E2\nS\fS\x0ES\u09E5\vS\x03T\x03" +
    "T\x03T\x03T\x07T\u09EB\nT\fT\x0ET\u09EE\vT\x03T\x03T\x07T\u09F2\nT\fT" +
    "\x0ET\u09F5\vT\x07T\u09F7\nT\fT\x0ET\u09FA\vT\x03U\x03U\x03U\x03U\x07" +
    "U\u0A00\nU\fU\x0EU\u0A03\vU\x03U\x03U\x07U\u0A07\nU\fU\x0EU\u0A0A\vU\x07" +
    "U\u0A0C\nU\fU\x0EU\u0A0F\vU\x03V\x03V\x03V\x03V\x07V\u0A15\nV\fV\x0EV" +
    "\u0A18\vV\x03V\x03V\x07V\u0A1C\nV\fV\x0EV\u0A1F\vV\x07V\u0A21\nV\fV\x0E" +
    "V\u0A24\vV\x03W\x03W\x03W\x03W\x07W\u0A2A\nW\fW\x0EW\u0A2D\vW\x03W\x03" +
    "W\x07W\u0A31\nW\fW\x0EW\u0A34\vW\x07W\u0A36\nW\fW\x0EW\u0A39\vW\x03X\x03" +
    "X\x03X\x03X\x07X\u0A3F\nX\fX\x0EX\u0A42\vX\x03X\x03X\x07X\u0A46\nX\fX" +
    "\x0EX\u0A49\vX\x07X\u0A4B\nX\fX\x0EX\u0A4E\vX\x03Y\x03Y\x03Y\x03Y\x07" +
    "Y\u0A54\nY\fY\x0EY\u0A57\vY\x03Y\x03Y\x07Y\u0A5B\nY\fY\x0EY\u0A5E\vY\x07" +
    "Y\u0A60\nY\fY\x0EY\u0A63\vY\x03Z\x03Z\x03Z\x03Z\x07Z\u0A69\nZ\fZ\x0EZ" +
    "\u0A6C\vZ\x03Z\x03Z\x07Z\u0A70\nZ\fZ\x0EZ\u0A73\vZ\x07Z\u0A75\nZ\fZ\x0E" +
    "Z\u0A78\vZ\x03[\x03[\x03[\x03[\x07[\u0A7E\n[\f[\x0E[\u0A81\v[\x03[\x03" +
    "[\x07[\u0A85\n[\f[\x0E[\u0A88\v[\x07[\u0A8A\n[\f[\x0E[\u0A8D\v[\x03\\" +
    "\x03\\\x03\\\x03\\\x07\\\u0A93\n\\\f\\\x0E\\\u0A96\v\\\x03\\\x03\\\x07" +
    "\\\u0A9A\n\\\f\\\x0E\\\u0A9D\v\\\x07\\\u0A9F\n\\\f\\\x0E\\\u0AA2\v\\\x03" +
    "]\x03]\x03]\x03]\x07]\u0AA8\n]\f]\x0E]\u0AAB\v]\x03]\x03]\x07]\u0AAF\n" +
    "]\f]\x0E]\u0AB2\v]\x07]\u0AB4\n]\f]\x0E]\u0AB7\v]\x03^\x03^\x03^\x03^" +
    "\x07^\u0ABD\n^\f^\x0E^\u0AC0\v^\x03^\x03^\x07^\u0AC4\n^\f^\x0E^\u0AC7" +
    "\v^\x07^\u0AC9\n^\f^\x0E^\u0ACC\v^\x03_\x03_\x03_\x03_\x07_\u0AD2\n_\f" +
    "_\x0E_\u0AD5\v_\x03_\x03_\x07_\u0AD9\n_\f_\x0E_\u0ADC\v_\x07_\u0ADE\n" +
    "_\f_\x0E_\u0AE1\v_\x03`\x03`\x03`\x03`\x07`\u0AE7\n`\f`\x0E`\u0AEA\v`" +
    "\x03`\x03`\x07`\u0AEE\n`\f`\x0E`\u0AF1\v`\x07`\u0AF3\n`\f`\x0E`\u0AF6" +
    "\v`\x03a\x03a\x03a\x03a\x07a\u0AFC\na\fa\x0Ea\u0AFF\va\x03a\x03a\x07a" +
    "\u0B03\na\fa\x0Ea\u0B06\va\x07a\u0B08\na\fa\x0Ea\u0B0B\va\x03b\x03b\x03" +
    "b\x03b\x07b\u0B11\nb\fb\x0Eb\u0B14\vb\x03b\x03b\x07b\u0B18\nb\fb\x0Eb" +
    "\u0B1B\vb\x07b\u0B1D\nb\fb\x0Eb\u0B20\vb\x03c\x03c\x03c\x03c\x07c\u0B26" +
    "\nc\fc\x0Ec\u0B29\vc\x03c\x03c\x07c\u0B2D\nc\fc\x0Ec\u0B30\vc\x07c\u0B32" +
    "\nc\fc\x0Ec\u0B35\vc\x03d\x03d\x03d\x03d\x07d\u0B3B\nd\fd\x0Ed\u0B3E\v" +
    "d\x03d\x03d\x07d\u0B42\nd\fd\x0Ed\u0B45\vd\x07d\u0B47\nd\fd\x0Ed\u0B4A" +
    "\vd\x03e\x03e\x03e\x03e\x07e\u0B50\ne\fe\x0Ee\u0B53\ve\x03e\x03e\x07e" +
    "\u0B57\ne\fe\x0Ee\u0B5A\ve\x07e\u0B5C\ne\fe\x0Ee\u0B5F\ve\x03f\x03f\x03" +
    "f\x03f\x07f\u0B65\nf\ff\x0Ef\u0B68\vf\x03f\x03f\x07f\u0B6C\nf\ff\x0Ef" +
    "\u0B6F\vf\x07f\u0B71\nf\ff\x0Ef\u0B74\vf\x03g\x03g\x03g\x03g\x07g\u0B7A" +
    "\ng\fg\x0Eg\u0B7D\vg\x03g\x03g\x07g\u0B81\ng\fg\x0Eg\u0B84\vg\x07g\u0B86" +
    "\ng\fg\x0Eg\u0B89\vg\x03h\x03h\x03h\x03h\x07h\u0B8F\nh\fh\x0Eh\u0B92\v" +
    "h\x03h\x03h\x07h\u0B96\nh\fh\x0Eh\u0B99\vh\x07h\u0B9B\nh\fh\x0Eh\u0B9E" +
    "\vh\x03i\x03i\x03i\x03i\x07i\u0BA4\ni\fi\x0Ei\u0BA7\vi\x03i\x03i\x07i" +
    "\u0BAB\ni\fi\x0Ei\u0BAE\vi\x07i\u0BB0\ni\fi\x0Ei\u0BB3\vi\x03j\x03j\x03" +
    "j\x03j\x07j\u0BB9\nj\fj\x0Ej\u0BBC\vj\x03j\x03j\x07j\u0BC0\nj\fj\x0Ej" +
    "\u0BC3\vj\x07j\u0BC5\nj\fj\x0Ej\u0BC8\vj\x03k\x03k\x03k\x03k\x07k\u0BCE" +
    "\nk\fk\x0Ek\u0BD1\vk\x03k\x03k\x07k\u0BD5\nk\fk\x0Ek\u0BD8\vk\x07k\u0BDA" +
    "\nk\fk\x0Ek\u0BDD\vk\x03l\x03l\x03l\x03l\x07l\u0BE3\nl\fl\x0El\u0BE6\v" +
    "l\x03l\x03l\x07l\u0BEA\nl\fl\x0El\u0BED\vl\x07l\u0BEF\nl\fl\x0El\u0BF2" +
    "\vl\x03m\x03m\x03m\x03m\x07m\u0BF8\nm\fm\x0Em\u0BFB\vm\x03m\x03m\x07m" +
    "\u0BFF\nm\fm\x0Em\u0C02\vm\x07m\u0C04\nm\fm\x0Em\u0C07\vm\x03n\x03n\x03" +
    "n\x03n\x07n\u0C0D\nn\fn\x0En\u0C10\vn\x03n\x03n\x07n\u0C14\nn\fn\x0En" +
    "\u0C17\vn\x07n\u0C19\nn\fn\x0En\u0C1C\vn\x03o\x03o\x03o\x03o\x07o\u0C22" +
    "\no\fo\x0Eo\u0C25\vo\x03o\x03o\x07o\u0C29\no\fo\x0Eo\u0C2C\vo\x07o\u0C2E" +
    "\no\fo\x0Eo\u0C31\vo\x03p\x03p\x03p\x03p\x07p\u0C37\np\fp\x0Ep\u0C3A\v" +
    "p\x03p\x03p\x07p\u0C3E\np\fp\x0Ep\u0C41\vp\x07p\u0C43\np\fp\x0Ep\u0C46" +
    "\vp\x03q\x03q\x03q\x03q\x07q\u0C4C\nq\fq\x0Eq\u0C4F\vq\x03q\x03q\x07q" +
    "\u0C53\nq\fq\x0Eq\u0C56\vq\x07q\u0C58\nq\fq\x0Eq\u0C5B\vq\x03r\x03r\x03" +
    "r\x03r\x07r\u0C61\nr\fr\x0Er\u0C64\vr\x03r\x03r\x07r\u0C68\nr\fr\x0Er" +
    "\u0C6B\vr\x07r\u0C6D\nr\fr\x0Er\u0C70\vr\x03s\x03s\x03s\x03s\x07s\u0C76" +
    "\ns\fs\x0Es\u0C79\vs\x03s\x03s\x07s\u0C7D\ns\fs\x0Es\u0C80\vs\x07s\u0C82" +
    "\ns\fs\x0Es\u0C85\vs\x03t\x03t\x03t\x03t\x07t\u0C8B\nt\ft\x0Et\u0C8E\v" +
    "t\x03t\x03t\x07t\u0C92\nt\ft\x0Et\u0C95\vt\x07t\u0C97\nt\ft\x0Et\u0C9A" +
    "\vt\x03u\x03u\x03u\x03u\x07u\u0CA0\nu\fu\x0Eu\u0CA3\vu\x03u\x03u\x07u" +
    "\u0CA7\nu\fu\x0Eu\u0CAA\vu\x07u\u0CAC\nu\fu\x0Eu\u0CAF\vu\x03v\x03v\x03" +
    "v\x03v\x07v\u0CB5\nv\fv\x0Ev\u0CB8\vv\x03v\x03v\x07v\u0CBC\nv\fv\x0Ev" +
    "\u0CBF\vv\x07v\u0CC1\nv\fv\x0Ev\u0CC4\vv\x03w\x03w\x03w\x03w\x07w\u0CCA" +
    "\nw\fw\x0Ew\u0CCD\vw\x03w\x03w\x07w\u0CD1\nw\fw\x0Ew\u0CD4\vw\x07w\u0CD6" +
    "\nw\fw\x0Ew\u0CD9\vw\x03x\x03x\x03x\x03x\x07x\u0CDF\nx\fx\x0Ex\u0CE2\v" +
    "x\x03x\x03x\x07x\u0CE6\nx\fx\x0Ex\u0CE9\vx\x07x\u0CEB\nx\fx\x0Ex\u0CEE" +
    "\vx\x03y\x03y\x03y\x03y\x07y\u0CF4\ny\fy\x0Ey\u0CF7\vy\x03y\x03y\x07y" +
    "\u0CFB\ny\fy\x0Ey\u0CFE\vy\x07y\u0D00\ny\fy\x0Ey\u0D03\vy\x03z\x03z\x03" +
    "z\x03z\x07z\u0D09\nz\fz\x0Ez\u0D0C\vz\x03z\x03z\x07z\u0D10\nz\fz\x0Ez" +
    "\u0D13\vz\x07z\u0D15\nz\fz\x0Ez\u0D18\vz\x03{\x03{\x03{\x03{\x07{\u0D1E" +
    "\n{\f{\x0E{\u0D21\v{\x03{\x03{\x07{\u0D25\n{\f{\x0E{\u0D28\v{\x07{\u0D2A" +
    "\n{\f{\x0E{\u0D2D\v{\x03|\x03|\x03|\x03|\x07|\u0D33\n|\f|\x0E|\u0D36\v" +
    "|\x03|\x03|\x07|\u0D3A\n|\f|\x0E|\u0D3D\v|\x07|\u0D3F\n|\f|\x0E|\u0D42" +
    "\v|\x03}\x03}\x03}\x03}\x07}\u0D48\n}\f}\x0E}\u0D4B\v}\x03}\x03}\x07}" +
    "\u0D4F\n}\f}\x0E}\u0D52\v}\x07}\u0D54\n}\f}\x0E}\u0D57\v}\x03~\x03~\x03" +
    "~\x03~\x07~\u0D5D\n~\f~\x0E~\u0D60\v~\x03~\x03~\x07~\u0D64\n~\f~\x0E~" +
    "\u0D67\v~\x07~\u0D69\n~\f~\x0E~\u0D6C\v~\x03\x7F\x03\x7F\x03\x7F\x03\x7F" +
    "\x07\x7F\u0D72\n\x7F\f\x7F\x0E\x7F\u0D75\v\x7F\x03\x7F\x03\x7F\x07\x7F" +
    "\u0D79\n\x7F\f\x7F\x0E\x7F\u0D7C\v\x7F\x07\x7F\u0D7E\n\x7F\f\x7F\x0E\x7F" +
    "\u0D81\v\x7F\x03\x80\x03\x80\x03\x80\x03\x80\x07\x80\u0D87\n\x80\f\x80" +
    "\x0E\x80\u0D8A\v\x80\x03\x80\x03\x80\x07\x80\u0D8E\n\x80\f\x80\x0E\x80" +
    "\u0D91\v\x80\x07\x80\u0D93\n\x80\f\x80\x0E\x80\u0D96\v\x80\x03\x81\x03" +
    "\x81\x03\x81\x03\x81\x07\x81\u0D9C\n\x81\f\x81\x0E\x81\u0D9F\v\x81\x03" +
    "\x81\x03\x81\x07\x81\u0DA3\n\x81\f\x81\x0E\x81\u0DA6\v\x81\x07\x81\u0DA8" +
    "\n\x81\f\x81\x0E\x81\u0DAB\v\x81\x03\x82\x03\x82\x03\x82\x03\x82\x07\x82" +
    "\u0DB1\n\x82\f\x82\x0E\x82\u0DB4\v\x82\x03\x82\x03\x82\x07\x82\u0DB8\n" +
    "\x82\f\x82\x0E\x82\u0DBB\v\x82\x07\x82\u0DBD\n\x82\f\x82\x0E\x82\u0DC0" +
    "\v\x82\x03\x83\x03\x83\x03\x83\x03\x83\x07\x83\u0DC6\n\x83\f\x83\x0E\x83" +
    "\u0DC9\v\x83\x03\x83\x03\x83\x07\x83\u0DCD\n\x83\f\x83\x0E\x83\u0DD0\v" +
    "\x83\x07\x83\u0DD2\n\x83\f\x83\x0E\x83\u0DD5\v\x83\x03\x84\x03\x84\x03" +
    "\x84\x03\x84\x07\x84\u0DDB\n\x84\f\x84\x0E\x84\u0DDE\v\x84\x03\x84\x03" +
    "\x84\x07\x84\u0DE2\n\x84\f\x84\x0E\x84\u0DE5\v\x84\x07\x84\u0DE7\n\x84" +
    "\f\x84\x0E\x84\u0DEA\v\x84\x03\x85\x03\x85\x03\x85\x03\x85\x07\x85\u0DF0" +
    "\n\x85\f\x85\x0E\x85\u0DF3\v\x85\x03\x85\x03\x85\x07\x85\u0DF7\n\x85\f" +
    "\x85\x0E\x85\u0DFA\v\x85\x07\x85\u0DFC\n\x85\f\x85\x0E\x85\u0DFF\v\x85" +
    "\x03\x86\x03\x86\x03\x86\x03\x86\x07\x86\u0E05\n\x86\f\x86\x0E\x86\u0E08" +
    "\v\x86\x03\x86\x03\x86\x07\x86\u0E0C\n\x86\f\x86\x0E\x86\u0E0F\v\x86\x07" +
    "\x86\u0E11\n\x86\f\x86\x0E\x86\u0E14\v\x86\x03\x87\x03\x87\x03\x87\x03" +
    "\x87\x07\x87\u0E1A\n\x87\f\x87\x0E\x87\u0E1D\v\x87\x03\x87\x03\x87\x07" +
    "\x87\u0E21\n\x87\f\x87\x0E\x87\u0E24\v\x87\x07\x87\u0E26\n\x87\f\x87\x0E" +
    "\x87\u0E29\v\x87\x03\x88\x03\x88\x03\x88\x03\x88\x07\x88\u0E2F\n\x88\f" +
    "\x88\x0E\x88\u0E32\v\x88\x03\x88\x03\x88\x07\x88\u0E36\n\x88\f\x88\x0E" +
    "\x88\u0E39\v\x88\x07\x88\u0E3B\n\x88\f\x88\x0E\x88\u0E3E\v\x88\x03\x89" +
    "\x03\x89\x03\x89\x03\x89\x07\x89\u0E44\n\x89\f\x89\x0E\x89\u0E47\v\x89" +
    "\x03\x89\x03\x89\x07\x89\u0E4B\n\x89\f\x89\x0E\x89\u0E4E\v\x89\x07\x89" +
    "\u0E50\n\x89\f\x89\x0E\x89\u0E53\v\x89\x03\x8A\x03\x8A\x03\x8A\x03\x8A" +
    "\x07\x8A\u0E59\n\x8A\f\x8A\x0E\x8A\u0E5C\v\x8A\x03\x8A\x03\x8A\x07\x8A" +
    "\u0E60\n\x8A\f\x8A\x0E\x8A\u0E63\v\x8A\x07\x8A\u0E65\n\x8A\f\x8A\x0E\x8A" +
    "\u0E68\v\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x07\x8B\u0E6E\n\x8B\f\x8B" +
    "\x0E\x8B\u0E71\v\x8B\x03\x8B\x03\x8B\x07\x8B\u0E75\n\x8B\f\x8B\x0E\x8B" +
    "\u0E78\v\x8B\x07\x8B\u0E7A\n\x8B\f\x8B\x0E\x8B\u0E7D\v\x8B\x03\x8C\x03" +
    "\x8C\x03\x8C\x03\x8C\x07\x8C\u0E83\n\x8C\f\x8C\x0E\x8C\u0E86\v\x8C\x03" +
    "\x8C\x03\x8C\x07\x8C\u0E8A\n\x8C\f\x8C\x0E\x8C\u0E8D\v\x8C\x07\x8C\u0E8F" +
    "\n\x8C\f\x8C\x0E\x8C\u0E92\v\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x07\x8D" +
    "\u0E98\n\x8D\f\x8D\x0E\x8D\u0E9B\v\x8D\x03\x8D\x03\x8D\x07\x8D\u0E9F\n" +
    "\x8D\f\x8D\x0E\x8D\u0EA2\v\x8D\x07\x8D\u0EA4\n\x8D\f\x8D\x0E\x8D\u0EA7" +
    "\v\x8D\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x07\x8E\u0EAD\n\x8E\f\x8E\x0E\x8E" +
    "\u0EB0\v\x8E\x03\x8E\x03\x8E\x07\x8E\u0EB4\n\x8E\f\x8E\x0E\x8E\u0EB7\v" +
    "\x8E\x07\x8E\u0EB9\n\x8E\f\x8E\x0E\x8E\u0EBC\v\x8E\x03\x8F\x03\x8F\x03" +
    "\x8F\x03\x8F\x07\x8F\u0EC2\n\x8F\f\x8F\x0E\x8F\u0EC5\v\x8F\x03\x8F\x03" +
    "\x8F\x07\x8F\u0EC9\n\x8F\f\x8F\x0E\x8F\u0ECC\v\x8F\x07\x8F\u0ECE\n\x8F" +
    "\f\x8F\x0E\x8F\u0ED1\v\x8F\x03\x90\x03\x90\x03\x90\x03\x90\x07\x90\u0ED7" +
    "\n\x90\f\x90\x0E\x90\u0EDA\v\x90\x03\x90\x03\x90\x07\x90\u0EDE\n\x90\f" +
    "\x90\x0E\x90\u0EE1\v\x90\x07\x90\u0EE3\n\x90\f\x90\x0E\x90\u0EE6\v\x90" +
    "\x03\x91\x03\x91\x03\x91\x03\x91\x07\x91\u0EEC\n\x91\f\x91\x0E\x91\u0EEF" +
    "\v\x91\x03\x91\x03\x91\x07\x91\u0EF3\n\x91\f\x91\x0E\x91\u0EF6\v\x91\x07" +
    "\x91\u0EF8\n\x91\f\x91\x0E\x91\u0EFB\v\x91\x03\x92\x03\x92\x03\x92\x03" +
    "\x92\x07\x92\u0F01\n\x92\f\x92\x0E\x92\u0F04\v\x92\x03\x92\x03\x92\x07" +
    "\x92\u0F08\n\x92\f\x92\x0E\x92\u0F0B\v\x92\x07\x92\u0F0D\n\x92\f\x92\x0E" +
    "\x92\u0F10\v\x92\x03\x93\x03\x93\x03\x93\x03\x93\x07\x93\u0F16\n\x93\f" +
    "\x93\x0E\x93\u0F19\v\x93\x03\x93\x03\x93\x07\x93\u0F1D\n\x93\f\x93\x0E" +
    "\x93\u0F20\v\x93\x07\x93\u0F22\n\x93\f\x93\x0E\x93\u0F25\v\x93\x03\x94" +
    "\x03\x94\x03\x94\x03\x94\x07\x94\u0F2B\n\x94\f\x94\x0E\x94\u0F2E\v\x94" +
    "\x03\x94\x03\x94\x07\x94\u0F32\n\x94\f\x94\x0E\x94\u0F35\v\x94\x07\x94" +
    "\u0F37\n\x94\f\x94\x0E\x94\u0F3A\v\x94\x03\x95\x03\x95\x03\x95\x03\x95" +
    "\x07\x95\u0F40\n\x95\f\x95\x0E\x95\u0F43\v\x95\x03\x95\x03\x95\x07\x95" +
    "\u0F47\n\x95\f\x95\x0E\x95\u0F4A\v\x95\x07\x95\u0F4C\n\x95\f\x95\x0E\x95" +
    "\u0F4F\v\x95\x03\x96\x03\x96\x03\x96\x03\x96\x07\x96\u0F55\n\x96\f\x96" +
    "\x0E\x96\u0F58\v\x96\x03\x96\x03\x96\x07\x96\u0F5C\n\x96\f\x96\x0E\x96" +
    "\u0F5F\v\x96\x07\x96\u0F61\n\x96\f\x96\x0E\x96\u0F64\v\x96\x03\x97\x03" +
    "\x97\x03\x97\x03\x97\x07\x97\u0F6A\n\x97\f\x97\x0E\x97\u0F6D\v\x97\x03" +
    "\x97\x03\x97\x07\x97\u0F71\n\x97\f\x97\x0E\x97\u0F74\v\x97\x07\x97\u0F76" +
    "\n\x97\f\x97\x0E\x97\u0F79\v\x97\x03\x98\x03\x98\x03\x98\x03\x98\x07\x98" +
    "\u0F7F\n\x98\f\x98\x0E\x98\u0F82\v\x98\x03\x98\x03\x98\x07\x98\u0F86\n" +
    "\x98\f\x98\x0E\x98\u0F89\v\x98\x07\x98\u0F8B\n\x98\f\x98\x0E\x98\u0F8E" +
    "\v\x98\x03\x99\x03\x99\x03\x99\x03\x99\x07\x99\u0F94\n\x99\f\x99\x0E\x99" +
    "\u0F97\v\x99\x03\x99\x03\x99\x07\x99\u0F9B\n\x99\f\x99\x0E\x99\u0F9E\v" +
    "\x99\x07\x99\u0FA0\n\x99\f\x99\x0E\x99\u0FA3\v\x99\x03\x9A\x03\x9A\x03" +
    "\x9A\x03\x9A\x07\x9A\u0FA9\n\x9A\f\x9A\x0E\x9A\u0FAC\v\x9A\x03\x9A\x03" +
    "\x9A\x07\x9A\u0FB0\n\x9A\f\x9A\x0E\x9A\u0FB3\v\x9A\x07\x9A\u0FB5\n\x9A" +
    "\f\x9A\x0E\x9A\u0FB8\v\x9A\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x07\x9B\u0FBE" +
    "\n\x9B\f\x9B\x0E\x9B\u0FC1\v\x9B\x03\x9B\x03\x9B\x07\x9B\u0FC5\n\x9B\f" +
    "\x9B\x0E\x9B\u0FC8\v\x9B\x07\x9B\u0FCA\n\x9B\f\x9B\x0E\x9B\u0FCD\v\x9B" +
    "\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x07\x9C\u0FD3\n\x9C\f\x9C\x0E\x9C\u0FD6" +
    "\v\x9C\x03\x9C\x03\x9C\x07\x9C\u0FDA\n\x9C\f\x9C\x0E\x9C\u0FDD\v\x9C\x07" +
    "\x9C\u0FDF\n\x9C\f\x9C\x0E\x9C\u0FE2\v\x9C\x03\x9D\x03\x9D\x03\x9D\x03" +
    "\x9D\x07\x9D\u0FE8\n\x9D\f\x9D\x0E\x9D\u0FEB\v\x9D\x03\x9D\x03\x9D\x07" +
    "\x9D\u0FEF\n\x9D\f\x9D\x0E\x9D\u0FF2\v\x9D\x07\x9D\u0FF4\n\x9D\f\x9D\x0E" +
    "\x9D\u0FF7\v\x9D\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x07\x9E\u0FFD\n\x9E\f" +
    "\x9E\x0E\x9E\u1000\v\x9E\x03\x9E\x03\x9E\x07\x9E\u1004\n\x9E\f\x9E\x0E" +
    "\x9E\u1007\v\x9E\x07\x9E\u1009\n\x9E\f\x9E\x0E\x9E\u100C\v\x9E\x03\x9F" +
    "\x03\x9F\x03\x9F\x03\x9F\x07\x9F\u1012\n\x9F\f\x9F\x0E\x9F\u1015\v\x9F" +
    "\x03\x9F\x03\x9F\x07\x9F\u1019\n\x9F\f\x9F\x0E\x9F\u101C\v\x9F\x07\x9F" +
    "\u101E\n\x9F\f\x9F\x0E\x9F\u1021\v\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0" +
    "\x07\xA0\u1027\n\xA0\f\xA0\x0E\xA0\u102A\v\xA0\x03\xA0\x03\xA0\x07\xA0" +
    "\u102E\n\xA0\f\xA0\x0E\xA0\u1031\v\xA0\x07\xA0\u1033\n\xA0\f\xA0\x0E\xA0" +
    "\u1036\v\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x07\xA1\u103C\n\xA1\f\xA1" +
    "\x0E\xA1\u103F\v\xA1\x03\xA1\x03\xA1\x07\xA1\u1043\n\xA1\f\xA1\x0E\xA1" +
    "\u1046\v\xA1\x07\xA1\u1048\n\xA1\f\xA1\x0E\xA1\u104B\v\xA1\x03\xA2\x03" +
    "\xA2\x03\xA2\x03\xA2\x07\xA2\u1051\n\xA2\f\xA2\x0E\xA2\u1054\v\xA2\x03" +
    "\xA2\x03\xA2\x07\xA2\u1058\n\xA2\f\xA2\x0E\xA2\u105B\v\xA2\x07\xA2\u105D" +
    "\n\xA2\f\xA2\x0E\xA2\u1060\v\xA2\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x07\xA3" +
    "\u1066\n\xA3\f\xA3\x0E\xA3\u1069\v\xA3\x03\xA3\x03\xA3\x07\xA3\u106D\n" +
    "\xA3\f\xA3\x0E\xA3\u1070\v\xA3\x07\xA3\u1072\n\xA3\f\xA3\x0E\xA3\u1075" +
    "\v\xA3\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x07\xA4\u107B\n\xA4\f\xA4\x0E\xA4" +
    "\u107E\v\xA4\x03\xA4\x03\xA4\x07\xA4\u1082\n\xA4\f\xA4\x0E\xA4\u1085\v" +
    "\xA4\x07\xA4\u1087\n\xA4\f\xA4\x0E\xA4\u108A\v\xA4\x03\xA5\x03\xA5\x03" +
    "\xA5\x03\xA5\x07\xA5\u1090\n\xA5\f\xA5\x0E\xA5\u1093\v\xA5\x03\xA5\x03" +
    "\xA5\x07\xA5\u1097\n\xA5\f\xA5\x0E\xA5\u109A\v\xA5\x07\xA5\u109C\n\xA5" +
    "\f\xA5\x0E\xA5\u109F\v\xA5\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x07\xA6\u10A5" +
    "\n\xA6\f\xA6\x0E\xA6\u10A8\v\xA6\x03\xA6\x03\xA6\x07\xA6\u10AC\n\xA6\f" +
    "\xA6\x0E\xA6\u10AF\v\xA6\x07\xA6\u10B1\n\xA6\f\xA6\x0E\xA6\u10B4\v\xA6" +
    "\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x07\xA7\u10BA\n\xA7\f\xA7\x0E\xA7\u10BD" +
    "\v\xA7\x03\xA7\x03\xA7\x07\xA7\u10C1\n\xA7\f\xA7\x0E\xA7\u10C4\v\xA7\x07" +
    "\xA7\u10C6\n\xA7\f\xA7\x0E\xA7\u10C9\v\xA7\x03\xA8\x03\xA8\x03\xA8\x03" +
    "\xA8\x07\xA8\u10CF\n\xA8\f\xA8\x0E\xA8\u10D2\v\xA8\x03\xA8\x03\xA8\x07" +
    "\xA8\u10D6\n\xA8\f\xA8\x0E\xA8\u10D9\v\xA8\x07\xA8\u10DB\n\xA8\f\xA8\x0E" +
    "\xA8\u10DE\v\xA8\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x07\xA9\u10E4\n\xA9\f" +
    "\xA9\x0E\xA9\u10E7\v\xA9\x03\xA9\x03\xA9\x07\xA9\u10EB\n\xA9\f\xA9\x0E" +
    "\xA9\u10EE\v\xA9\x07\xA9\u10F0\n\xA9\f\xA9\x0E\xA9\u10F3\v\xA9\x03\xAA" +
    "\x03\xAA\x03\xAA\x03\xAA\x07\xAA\u10F9\n\xAA\f\xAA\x0E\xAA\u10FC\v\xAA" +
    "\x03\xAA\x03\xAA\x07\xAA\u1100\n\xAA\f\xAA\x0E\xAA\u1103\v\xAA\x07\xAA" +
    "\u1105\n\xAA\f\xAA\x0E\xAA\u1108\v\xAA\x03\xAB\x03\xAB\x03\xAB\x03\xAB" +
    "\x07\xAB\u110E\n\xAB\f\xAB\x0E\xAB\u1111\v\xAB\x03\xAB\x03\xAB\x07\xAB" +
    "\u1115\n\xAB\f\xAB\x0E\xAB\u1118\v\xAB\x07\xAB\u111A\n\xAB\f\xAB\x0E\xAB" +
    "\u111D\v\xAB\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x07\xAC\u1123\n\xAC\f\xAC" +
    "\x0E\xAC\u1126\v\xAC\x03\xAC\x03\xAC\x07\xAC\u112A\n\xAC\f\xAC\x0E\xAC" +
    "\u112D\v\xAC\x07\xAC\u112F\n\xAC\f\xAC\x0E\xAC\u1132\v\xAC\x03\xAD\x03" +
    "\xAD\x03\xAD\x03\xAD\x07\xAD\u1138\n\xAD\f\xAD\x0E\xAD\u113B\v\xAD\x03" +
    "\xAD\x03\xAD\x07\xAD\u113F\n\xAD\f\xAD\x0E\xAD\u1142\v\xAD\x07\xAD\u1144" +
    "\n\xAD\f\xAD\x0E\xAD\u1147\v\xAD\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x07\xAE" +
    "\u114D\n\xAE\f\xAE\x0E\xAE\u1150\v\xAE\x03\xAE\x03\xAE\x07\xAE\u1154\n" +
    "\xAE\f\xAE\x0E\xAE\u1157\v\xAE\x07\xAE\u1159\n\xAE\f\xAE\x0E\xAE\u115C" +
    "\v\xAE\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x07\xAF\u1162\n\xAF\f\xAF\x0E\xAF" +
    "\u1165\v\xAF\x03\xAF\x03\xAF\x07\xAF\u1169\n\xAF\f\xAF\x0E\xAF\u116C\v" +
    "\xAF\x07\xAF\u116E\n\xAF\f\xAF\x0E\xAF\u1171\v\xAF\x03\xB0\x03\xB0\x03" +
    "\xB0\x03\xB0\x07\xB0\u1177\n\xB0\f\xB0\x0E\xB0\u117A\v\xB0\x03\xB0\x03" +
    "\xB0\x07\xB0\u117E\n\xB0\f\xB0\x0E\xB0\u1181\v\xB0\x07";
bitmarkParser._serializedATNSegment2 = "\xB0\u1183\n\xB0\f\xB0\x0E\xB0\u1186\v\xB0\x03\xB1\x03\xB1\x03\xB1\x03" +
    "\xB1\x07\xB1\u118C\n\xB1\f\xB1\x0E\xB1\u118F\v\xB1\x03\xB1\x03\xB1\x07" +
    "\xB1\u1193\n\xB1\f\xB1\x0E\xB1\u1196\v\xB1\x07\xB1\u1198\n\xB1\f\xB1\x0E" +
    "\xB1\u119B\v\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x07\xB2\u11A1\n\xB2\f" +
    "\xB2\x0E\xB2\u11A4\v\xB2\x03\xB2\x03\xB2\x07\xB2\u11A8\n\xB2\f\xB2\x0E" +
    "\xB2\u11AB\v\xB2\x07\xB2\u11AD\n\xB2\f\xB2\x0E\xB2\u11B0\v\xB2\x03\xB3" +
    "\x03\xB3\x03\xB3\x03\xB3\x07\xB3\u11B6\n\xB3\f\xB3\x0E\xB3\u11B9\v\xB3" +
    "\x03\xB3\x03\xB3\x07\xB3\u11BD\n\xB3\f\xB3\x0E\xB3\u11C0\v\xB3\x07\xB3" +
    "\u11C2\n\xB3\f\xB3\x0E\xB3\u11C5\v\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB4" +
    "\x07\xB4\u11CB\n\xB4\f\xB4\x0E\xB4\u11CE\v\xB4\x03\xB4\x03\xB4\x07\xB4" +
    "\u11D2\n\xB4\f\xB4\x0E\xB4\u11D5\v\xB4\x07\xB4\u11D7\n\xB4\f\xB4\x0E\xB4" +
    "\u11DA\v\xB4\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x07\xB5\u11E0\n\xB5\f\xB5" +
    "\x0E\xB5\u11E3\v\xB5\x03\xB5\x03\xB5\x07\xB5\u11E7\n\xB5\f\xB5\x0E\xB5" +
    "\u11EA\v\xB5\x07\xB5\u11EC\n\xB5\f\xB5\x0E\xB5\u11EF\v\xB5\x03\xB6\x03" +
    "\xB6\x03\xB6\x03\xB6\x07\xB6\u11F5\n\xB6\f\xB6\x0E\xB6\u11F8\v\xB6\x03" +
    "\xB6\x03\xB6\x07\xB6\u11FC\n\xB6\f\xB6\x0E\xB6\u11FF\v\xB6\x07\xB6\u1201" +
    "\n\xB6\f\xB6\x0E\xB6\u1204\v\xB6\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x07\xB7" +
    "\u120A\n\xB7\f\xB7\x0E\xB7\u120D\v\xB7\x03\xB7\x03\xB7\x07\xB7\u1211\n" +
    "\xB7\f\xB7\x0E\xB7\u1214\v\xB7\x07\xB7\u1216\n\xB7\f\xB7\x0E\xB7\u1219" +
    "\v\xB7\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x07\xB8\u121F\n\xB8\f\xB8\x0E\xB8" +
    "\u1222\v\xB8\x03\xB8\x03\xB8\x07\xB8\u1226\n\xB8\f\xB8\x0E\xB8\u1229\v" +
    "\xB8\x07\xB8\u122B\n\xB8\f\xB8\x0E\xB8\u122E\v\xB8\x03\xB9\x03\xB9\x03" +
    "\xB9\x03\xB9\x07\xB9\u1234\n\xB9\f\xB9\x0E\xB9\u1237\v\xB9\x03\xB9\x03" +
    "\xB9\x07\xB9\u123B\n\xB9\f\xB9\x0E\xB9\u123E\v\xB9\x07\xB9\u1240\n\xB9" +
    "\f\xB9\x0E\xB9\u1243\v\xB9\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x07\xBA\u1249" +
    "\n\xBA\f\xBA\x0E\xBA\u124C\v\xBA\x03\xBA\x03\xBA\x07\xBA\u1250\n\xBA\f" +
    "\xBA\x0E\xBA\u1253\v\xBA\x07\xBA\u1255\n\xBA\f\xBA\x0E\xBA\u1258\v\xBA" +
    "\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x06\xBB\u125E\n\xBB\r\xBB\x0E\xBB\u125F" +
    "\x03\xBB\x03\xBB\x07\xBB\u1264\n\xBB\f\xBB\x0E\xBB\u1267\v\xBB\x07\xBB" +
    "\u1269\n\xBB\f\xBB\x0E\xBB\u126C\v\xBB\x03\xBB\x05\xBB\u126F\n\xBB\x03" +
    "\xBB\x07\xBB\u1272\n\xBB\f\xBB\x0E\xBB\u1275\v\xBB\x03\xBB\x03\xBB\x07" +
    "\xBB\u1279\n\xBB\f\xBB\x0E\xBB\u127C\v\xBB\x03\xBB\x07\xBB\u127F\n\xBB" +
    "\f\xBB\x0E\xBB\u1282\v\xBB\x05\xBB\u1284\n\xBB\x03\xBC\x03\xBC\x03\xBC" +
    "\x03\xBC\x07\xBC\u128A\n\xBC\f\xBC\x0E\xBC\u128D\v\xBC\x03\xBC\x03\xBC" +
    "\x07\xBC\u1291\n\xBC\f\xBC\x0E\xBC\u1294\v\xBC\x07\xBC\u1296\n\xBC\f\xBC" +
    "\x0E\xBC\u1299\v\xBC\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x07\xBD\u129F\n\xBD" +
    "\f\xBD\x0E\xBD\u12A2\v\xBD\x03\xBD\x03\xBD\x07\xBD\u12A6\n\xBD\f\xBD\x0E" +
    "\xBD\u12A9\v\xBD\x07\xBD\u12AB\n\xBD\f\xBD\x0E\xBD\u12AE\v\xBD\x03\xBE" +
    "\x03\xBE\x03\xBE\x03\xBE\x07\xBE\u12B4\n\xBE\f\xBE\x0E\xBE\u12B7\v\xBE" +
    "\x03\xBE\x03\xBE\x07\xBE\u12BB\n\xBE\f\xBE\x0E\xBE\u12BE\v\xBE\x07\xBE" +
    "\u12C0\n\xBE\f\xBE\x0E\xBE\u12C3\v\xBE\x03\xBF\x03\xBF\x03\xBF\x03\xBF" +
    "\x07\xBF\u12C9\n\xBF\f\xBF\x0E\xBF\u12CC\v\xBF\x03\xBF\x03\xBF\x07\xBF" +
    "\u12D0\n\xBF\f\xBF\x0E\xBF\u12D3\v\xBF\x07\xBF\u12D5\n\xBF\f\xBF\x0E\xBF" +
    "\u12D8\v\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x07\xC0\u12DE\n\xC0\f\xC0" +
    "\x0E\xC0\u12E1\v\xC0\x03\xC0\x03\xC0\x07\xC0\u12E5\n\xC0\f\xC0\x0E\xC0" +
    "\u12E8\v\xC0\x07\xC0\u12EA\n\xC0\f\xC0\x0E\xC0\u12ED\v\xC0\x03\xC1\x03" +
    "\xC1\x03\xC1\x03\xC1\x07\xC1\u12F3\n\xC1\f\xC1\x0E\xC1\u12F6\v\xC1\x03" +
    "\xC1\x03\xC1\x07\xC1\u12FA\n\xC1\f\xC1\x0E\xC1\u12FD\v\xC1\x07\xC1\u12FF" +
    "\n\xC1\f\xC1\x0E\xC1\u1302\v\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x07\xC2" +
    "\u1308\n\xC2\f\xC2\x0E\xC2\u130B\v\xC2\x03\xC2\x03\xC2\x07\xC2\u130F\n" +
    "\xC2\f\xC2\x0E\xC2\u1312\v\xC2\x07\xC2\u1314\n\xC2\f\xC2\x0E\xC2\u1317" +
    "\v\xC2\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x07\xC3\u131D\n\xC3\f\xC3\x0E\xC3" +
    "\u1320\v\xC3\x03\xC3\x03\xC3\x07\xC3\u1324\n\xC3\f\xC3\x0E\xC3\u1327\v" +
    "\xC3\x07\xC3\u1329\n\xC3\f\xC3\x0E\xC3\u132C\v\xC3\x03\xC4\x03\xC4\x03" +
    "\xC4\x03\xC4\x07\xC4\u1332\n\xC4\f\xC4\x0E\xC4\u1335\v\xC4\x03\xC4\x03" +
    "\xC4\x07\xC4\u1339\n\xC4\f\xC4\x0E\xC4\u133C\v\xC4\x07\xC4\u133E\n\xC4" +
    "\f\xC4\x0E\xC4\u1341\v\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x07\xC5\u1347" +
    "\n\xC5\f\xC5\x0E\xC5\u134A\v\xC5\x03\xC5\x03\xC5\x07\xC5\u134E\n\xC5\f" +
    "\xC5\x0E\xC5\u1351\v\xC5\x07\xC5\u1353\n\xC5\f\xC5\x0E\xC5\u1356\v\xC5" +
    "\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x07\xC6\u135C\n\xC6\f\xC6\x0E\xC6\u135F" +
    "\v\xC6\x03\xC6\x03\xC6\x07\xC6\u1363\n\xC6\f\xC6\x0E\xC6\u1366\v\xC6\x07" +
    "\xC6\u1368\n\xC6\f\xC6\x0E\xC6\u136B\v\xC6\x03\xC7\x03\xC7\x03\xC7\x03" +
    "\xC7\x07\xC7\u1371\n\xC7\f\xC7\x0E\xC7\u1374\v\xC7\x03\xC7\x03\xC7\x07" +
    "\xC7\u1378\n\xC7\f\xC7\x0E\xC7\u137B\v\xC7\x07\xC7\u137D\n\xC7\f\xC7\x0E" +
    "\xC7\u1380\v\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x07\xC8\u1386\n\xC8\f" +
    "\xC8\x0E\xC8\u1389\v\xC8\x03\xC8\x03\xC8\x07\xC8\u138D\n\xC8\f\xC8\x0E" +
    "\xC8\u1390\v\xC8\x07\xC8\u1392\n\xC8\f\xC8\x0E\xC8\u1395\v\xC8\x03\xC9" +
    "\x03\xC9\x03\xC9\x03\xC9\x07\xC9\u139B\n\xC9\f\xC9\x0E\xC9\u139E\v\xC9" +
    "\x03\xC9\x03\xC9\x07\xC9\u13A2\n\xC9\f\xC9\x0E\xC9\u13A5\v\xC9\x06\xC9" +
    "\u13A7\n\xC9\r\xC9\x0E\xC9\u13A8\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x07\xCA" +
    "\u13AF\n\xCA\f\xCA\x0E\xCA\u13B2\v\xCA\x03\xCA\x03\xCA\x07\xCA\u13B6\n" +
    "\xCA\f\xCA\x0E\xCA\u13B9\v\xCA\x06\xCA\u13BB\n\xCA\r\xCA\x0E\xCA\u13BC" +
    "\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x07\xCB\u13C3\n\xCB\f\xCB\x0E\xCB\u13C6" +
    "\v\xCB\x03\xCB\x03\xCB\x07\xCB\u13CA\n\xCB\f\xCB\x0E\xCB\u13CD\v\xCB\x06" +
    "\xCB\u13CF\n\xCB\r\xCB\x0E\xCB\u13D0\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x07" +
    "\xCC\u13D7\n\xCC\f\xCC\x0E\xCC\u13DA\v\xCC\x03\xCC\x03\xCC\x07\xCC\u13DE" +
    "\n\xCC\f\xCC\x0E\xCC\u13E1\v\xCC\x07\xCC\u13E3\n\xCC\f\xCC\x0E\xCC\u13E6" +
    "\v\xCC\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x07\xCD\u13EC\n\xCD\f\xCD\x0E\xCD" +
    "\u13EF\v\xCD\x03\xCD\x03\xCD\x07\xCD\u13F3\n\xCD\f\xCD\x0E\xCD\u13F6\v" +
    "\xCD\x07\xCD\u13F8\n\xCD\f\xCD\x0E\xCD\u13FB\v\xCD\x03\xCE\x03\xCE\x03" +
    "\xCE\x03\xCE\x07\xCE\u1401\n\xCE\f\xCE\x0E\xCE\u1404\v\xCE\x03\xCE\x03" +
    "\xCE\x07\xCE\u1408\n\xCE\f\xCE\x0E\xCE\u140B\v\xCE\x07\xCE\u140D\n\xCE" +
    "\f\xCE\x0E\xCE\u1410\v\xCE\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x07\xCF\u1416" +
    "\n\xCF\f\xCF\x0E\xCF\u1419\v\xCF\x03\xCF\x03\xCF\x07\xCF\u141D\n\xCF\f" +
    "\xCF\x0E\xCF\u1420\v\xCF\x07\xCF\u1422\n\xCF\f\xCF\x0E\xCF\u1425\v\xCF" +
    "\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x07\xD0\u142B\n\xD0\f\xD0\x0E\xD0\u142E" +
    "\v\xD0\x03\xD0\x03\xD0\x07\xD0\u1432\n\xD0\f\xD0\x0E\xD0\u1435\v\xD0\x07" +
    "\xD0\u1437\n\xD0\f\xD0\x0E\xD0\u143A\v\xD0\x03\xD1\x03\xD1\x03\xD1\x03" +
    "\xD1\x07\xD1\u1440\n\xD1\f\xD1\x0E\xD1\u1443\v\xD1\x03\xD1\x03\xD1\x07" +
    "\xD1\u1447\n\xD1\f\xD1\x0E\xD1\u144A\v\xD1\x07\xD1\u144C\n\xD1\f\xD1\x0E" +
    "\xD1\u144F\v\xD1\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x07\xD2\u1455\n\xD2\f" +
    "\xD2\x0E\xD2\u1458\v\xD2\x03\xD2\x03\xD2\x07\xD2\u145C\n\xD2\f\xD2\x0E" +
    "\xD2\u145F\v\xD2\x07\xD2\u1461\n\xD2\f\xD2\x0E\xD2\u1464\v\xD2\x03\xD3" +
    "\x03\xD3\x03\xD3\x03\xD3\x07\xD3\u146A\n\xD3\f\xD3\x0E\xD3\u146D\v\xD3" +
    "\x03\xD3\x03\xD3\x07\xD3\u1471\n\xD3\f\xD3\x0E\xD3\u1474\v\xD3\x07\xD3" +
    "\u1476\n\xD3\f\xD3\x0E\xD3\u1479\v\xD3\x03\xD4\x03\xD4\x03\xD4\x03\xD4" +
    "\x07\xD4\u147F\n\xD4\f\xD4\x0E\xD4\u1482\v\xD4\x03\xD4\x03\xD4\x07\xD4" +
    "\u1486\n\xD4\f\xD4\x0E\xD4\u1489\v\xD4\x07\xD4\u148B\n\xD4\f\xD4\x0E\xD4" +
    "\u148E\v\xD4\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x07\xD5\u1494\n\xD5\f\xD5" +
    "\x0E\xD5\u1497\v\xD5\x03\xD5\x03\xD5\x07\xD5\u149B\n\xD5\f\xD5\x0E\xD5" +
    "\u149E\v\xD5\x07\xD5\u14A0\n\xD5\f\xD5\x0E\xD5\u14A3\v\xD5\x03\xD6\x03" +
    "\xD6\x03\xD6\x03\xD6\x07\xD6\u14A9\n\xD6\f\xD6\x0E\xD6\u14AC\v\xD6\x03" +
    "\xD6\x03\xD6\x07\xD6\u14B0\n\xD6\f\xD6\x0E\xD6\u14B3\v\xD6\x07\xD6\u14B5" +
    "\n\xD6\f\xD6\x0E\xD6\u14B8\v\xD6\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x07\xD7" +
    "\u14BE\n\xD7\f\xD7\x0E\xD7\u14C1\v\xD7\x03\xD7\x03\xD7\x07\xD7\u14C5\n" +
    "\xD7\f\xD7\x0E\xD7\u14C8\v\xD7\x07\xD7\u14CA\n\xD7\f\xD7\x0E\xD7\u14CD" +
    "\v\xD7\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x07\xD8\u14D3\n\xD8\f\xD8\x0E\xD8" +
    "\u14D6\v\xD8\x03\xD8\x03\xD8\x07\xD8\u14DA\n\xD8\f\xD8\x0E\xD8\u14DD\v" +
    "\xD8\x07\xD8\u14DF\n\xD8\f\xD8\x0E\xD8\u14E2\v\xD8\x03\xD9\x03\xD9\x03" +
    "\xD9\x03\xD9\x07\xD9\u14E8\n\xD9\f\xD9\x0E\xD9\u14EB\v\xD9\x03\xD9\x03" +
    "\xD9\x07\xD9\u14EF\n\xD9\f\xD9\x0E\xD9\u14F2\v\xD9\x07\xD9\u14F4\n\xD9" +
    "\f\xD9\x0E\xD9\u14F7\v\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x07\xDA\u14FD" +
    "\n\xDA\f\xDA\x0E\xDA\u1500\v\xDA\x03\xDA\x03\xDA\x07\xDA\u1504\n\xDA\f" +
    "\xDA\x0E\xDA\u1507\v\xDA\x07\xDA\u1509\n\xDA\f\xDA\x0E\xDA\u150C\v\xDA" +
    "\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x07\xDB\u1512\n\xDB\f\xDB\x0E\xDB\u1515" +
    "\v\xDB\x03\xDB\x03\xDB\x07\xDB\u1519\n\xDB\f\xDB\x0E\xDB\u151C\v\xDB\x07" +
    "\xDB\u151E\n\xDB\f\xDB\x0E\xDB\u1521\v\xDB\x03\xDC\x03\xDC\x03\xDC\x03" +
    "\xDC\x07\xDC\u1527\n\xDC\f\xDC\x0E\xDC\u152A\v\xDC\x03\xDC\x03\xDC\x07" +
    "\xDC\u152E\n\xDC\f\xDC\x0E\xDC\u1531\v\xDC\x07\xDC\u1533\n\xDC\f\xDC\x0E" +
    "\xDC\u1536\v\xDC\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x07\xDD\u153C\n\xDD\f" +
    "\xDD\x0E\xDD\u153F\v\xDD\x03\xDD\x03\xDD\x07\xDD\u1543\n\xDD\f\xDD\x0E" +
    "\xDD\u1546\v\xDD\x07\xDD\u1548\n\xDD\f\xDD\x0E\xDD\u154B\v\xDD\x03\xDE" +
    "\x03\xDE\x03\xDE\x03\xDE\x07\xDE\u1551\n\xDE\f\xDE\x0E\xDE\u1554\v\xDE" +
    "\x03\xDE\x03\xDE\x07\xDE\u1558\n\xDE\f\xDE\x0E\xDE\u155B\v\xDE\x07\xDE" +
    "\u155D\n\xDE\f\xDE\x0E\xDE\u1560\v\xDE\x03\xDF\x03\xDF\x03\xDF\x03\xDF" +
    "\x07\xDF\u1566\n\xDF\f\xDF\x0E\xDF\u1569\v\xDF\x03\xDF\x03\xDF\x07\xDF" +
    "\u156D\n\xDF\f\xDF\x0E\xDF\u1570\v\xDF\x07\xDF\u1572\n\xDF\f\xDF\x0E\xDF" +
    "\u1575\v\xDF\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x07\xE0\u157B\n\xE0\f\xE0" +
    "\x0E\xE0\u157E\v\xE0\x03\xE0\x03\xE0\x07\xE0\u1582\n\xE0\f\xE0\x0E\xE0" +
    "\u1585\v\xE0\x07\xE0\u1587\n\xE0\f\xE0\x0E\xE0\u158A\v\xE0\x03\xE1\x03" +
    "\xE1\x03\xE1\x03\xE1\x07\xE1\u1590\n\xE1\f\xE1\x0E\xE1\u1593\v\xE1\x03" +
    "\xE1\x03\xE1\x07\xE1\u1597\n\xE1\f\xE1\x0E\xE1\u159A\v\xE1\x07\xE1\u159C" +
    "\n\xE1\f\xE1\x0E\xE1\u159F\v\xE1\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x07\xE2" +
    "\u15A5\n\xE2\f\xE2\x0E\xE2\u15A8\v\xE2\x03\xE2\x03\xE2\x07\xE2\u15AC\n" +
    "\xE2\f\xE2\x0E\xE2\u15AF\v\xE2\x07\xE2\u15B1\n\xE2\f\xE2\x0E\xE2\u15B4" +
    "\v\xE2\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x07\xE3\u15BA\n\xE3\f\xE3\x0E\xE3" +
    "\u15BD\v\xE3\x03\xE3\x03\xE3\x07\xE3\u15C1\n\xE3\f\xE3\x0E\xE3\u15C4\v" +
    "\xE3\x07\xE3\u15C6\n\xE3\f\xE3\x0E\xE3\u15C9\v\xE3\x03\xE4\x03\xE4\x03" +
    "\xE4\x03\xE4\x07\xE4\u15CF\n\xE4\f\xE4\x0E\xE4\u15D2\v\xE4\x03\xE4\x03" +
    "\xE4\x07\xE4\u15D6\n\xE4\f\xE4\x0E\xE4\u15D9\v\xE4\x07\xE4\u15DB\n\xE4" +
    "\f\xE4\x0E\xE4\u15DE\v\xE4\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x07\xE5\u15E4" +
    "\n\xE5\f\xE5\x0E\xE5\u15E7\v\xE5\x03\xE5\x03\xE5\x07\xE5\u15EB\n\xE5\f" +
    "\xE5\x0E\xE5\u15EE\v\xE5\x07\xE5\u15F0\n\xE5\f\xE5\x0E\xE5\u15F3\v\xE5" +
    "\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x07\xE6\u15F9\n\xE6\f\xE6\x0E\xE6\u15FC" +
    "\v\xE6\x03\xE6\x03\xE6\x07\xE6\u1600\n\xE6\f\xE6\x0E\xE6\u1603\v\xE6\x07" +
    "\xE6\u1605\n\xE6\f\xE6\x0E\xE6\u1608\v\xE6\x03\xE7\x03\xE7\x03\xE7\x03" +
    "\xE7\x07\xE7\u160E\n\xE7\f\xE7\x0E\xE7\u1611\v\xE7\x03\xE7\x03\xE7\x07" +
    "\xE7\u1615\n\xE7\f\xE7\x0E\xE7\u1618\v\xE7\x07\xE7\u161A\n\xE7\f\xE7\x0E" +
    "\xE7\u161D\v\xE7\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x07\xE8\u1623\n\xE8\f" +
    "\xE8\x0E\xE8\u1626\v\xE8\x03\xE8\x03\xE8\x07\xE8\u162A\n\xE8\f\xE8\x0E" +
    "\xE8\u162D\v\xE8\x07\xE8\u162F\n\xE8\f\xE8\x0E\xE8\u1632\v\xE8\x03\xE9" +
    "\x03\xE9\x03\xE9\x03\xE9\x07\xE9\u1638\n\xE9\f\xE9\x0E\xE9\u163B\v\xE9" +
    "\x03\xE9\x03\xE9\x07\xE9\u163F\n\xE9\f\xE9\x0E\xE9\u1642\v\xE9\x07\xE9" +
    "\u1644\n\xE9\f\xE9\x0E\xE9\u1647\v\xE9\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
    "\x07\xEA\u164D\n\xEA\f\xEA\x0E\xEA\u1650\v\xEA\x03\xEA\x03\xEA\x07\xEA" +
    "\u1654\n\xEA\f\xEA\x0E\xEA\u1657\v\xEA\x07\xEA\u1659\n\xEA\f\xEA\x0E\xEA" +
    "\u165C\v\xEA\x03\xEB\x03\xEB\x03\xEB\x03\xEB\x07\xEB\u1662\n\xEB\f\xEB" +
    "\x0E\xEB\u1665\v\xEB\x03\xEB\x03\xEB\x07\xEB\u1669\n\xEB\f\xEB\x0E\xEB" +
    "\u166C\v\xEB\x07\xEB\u166E\n\xEB\f\xEB\x0E\xEB\u1671\v\xEB\x03\xEB\x06" +
    "\xEB\u1674\n\xEB\r\xEB\x0E\xEB\u1675\x03\xEC\x03\xEC\x07\xEC\u167A\n\xEC" +
    "\f\xEC\x0E\xEC\u167D\v\xEC\x03\xEC\x03\xEC\x03\xED\x03\xED\x03\xED\x03" +
    "\xED\x03\xED\x03\xED\x07\xED\u1687\n\xED\f\xED\x0E\xED\u168A\v\xED\x03" +
    "\xED\x05\xED\u168D\n\xED\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE" +
    "\x03\xEE\x06\xEE\u1696\n\xEE\r\xEE\x0E\xEE\u1697\x03\xEF\x03\xEF\x03\xEF" +
    "\x03\xEF\x07\xEF\u169E\n\xEF\f\xEF\x0E\xEF\u16A1\v\xEF\x03\xEF\x03\xEF" +
    "\x07\xEF\u16A5\n\xEF\f\xEF\x0E\xEF\u16A8\v\xEF\x07\xEF\u16AA\n\xEF\f\xEF" +
    "\x0E\xEF\u16AD\v\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x07\xEF\u16B3\n\xEF" +
    "\f\xEF\x0E\xEF\u16B6\v\xEF\x03\xEF\x03\xEF\x07\xEF\u16BA\n\xEF\f\xEF\x0E" +
    "\xEF\u16BD\v\xEF\x07\xEF\u16BF\n\xEF\f\xEF\x0E\xEF\u16C2\v\xEF\x03\xEF" +
    "\x03\xEF\x03\xEF\x03\xEF\x06\xEF\u16C8\n\xEF\r\xEF\x0E\xEF\u16C9\x06\xEF" +
    "\u16CC\n\xEF\r\xEF\x0E\xEF\u16CD\x03\xEF\x03\xEF\x07\xEF\u16D2\n\xEF\f" +
    "\xEF\x0E\xEF\u16D5\v\xEF\x03\xEF\x03\xEF\x07\xEF\u16D9\n\xEF\f\xEF\x0E" +
    "\xEF\u16DC\v\xEF\x03\xEF\x07\xEF\u16DF\n\xEF\f\xEF\x0E\xEF\u16E2\v\xEF" +
    "\x05\xEF\u16E4\n\xEF\x05\xEF\u16E6\n\xEF\x03\xF0\x03\xF0\x03\xF0\x03\xF0" +
    "\x05\xF0\u16EC\n\xF0\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x07\xF1\u16F2\n\xF1" +
    "\f\xF1\x0E\xF1\u16F5\v\xF1\x03\xF1\x03\xF1\x07\xF1\u16F9\n\xF1\f\xF1\x0E" +
    "\xF1\u16FC\v\xF1\x07\xF1\u16FE\n\xF1\f\xF1\x0E\xF1\u1701\v\xF1\x03\xF1" +
    "\x03\xF1\x05\xF1\u1705\n\xF1\x03\xF1\x07\xF1\u1708\n\xF1\f\xF1\x0E\xF1" +
    "\u170B\v\xF1\x03\xF1\x06\xF1\u170E\n\xF1\r\xF1\x0E\xF1\u170F\x06\xF1\u1712" +
    "\n\xF1\r\xF1\x0E\xF1\u1713\x03\xF1\x03\xF1\x05\xF1\u1718\n\xF1\x03\xF2" +
    "\x03\xF2\x03\xF2\x03\xF2\x07\xF2\u171E\n\xF2\f\xF2\x0E\xF2\u1721\v\xF2" +
    "\x03\xF2\x03\xF2\x07\xF2\u1725\n\xF2\f\xF2\x0E\xF2\u1728\v\xF2\x07\xF2" +
    "\u172A\n\xF2\f\xF2\x0E\xF2\u172D\v\xF2\x03\xF2\x03\xF2\x03\xF2\x03\xF2" +
    "\x06\xF2\u1733\n\xF2\r\xF2\x0E\xF2\u1734\x06\xF2\u1737\n\xF2\r\xF2\x0E" +
    "\xF2\u1738\x03\xF2\x03\xF2\x05\xF2\u173D\n\xF2\x03\xF3\x03\xF3\x03\xF3" +
    "\x03\xF3\x07\xF3\u1743\n\xF3\f\xF3\x0E\xF3\u1746\v\xF3\x03\xF3\x03\xF3" +
    "\x07\xF3\u174A\n\xF3\f\xF3\x0E\xF3\u174D\v\xF3\x07\xF3\u174F\n\xF3\f\xF3" +
    "\x0E\xF3\u1752\v\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x06\xF3\u1758\n\xF3" +
    "\r\xF3\x0E\xF3\u1759\x06\xF3\u175C\n\xF3\r\xF3\x0E\xF3\u175D\x03\xF3\x03" +
    "\xF3\x05\xF3\u1762\n\xF3\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x07\xF4\u1768" +
    "\n\xF4\f\xF4\x0E\xF4\u176B\v\xF4\x03\xF4\x03\xF4\x07\xF4\u176F\n\xF4\f" +
    "\xF4\x0E\xF4\u1772\v\xF4\x07\xF4\u1774\n\xF4\f\xF4\x0E\xF4\u1777\v\xF4" +
    "\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x06\xF4\u177D\n\xF4\r\xF4\x0E\xF4\u177E" +
    "\x06\xF4\u1781\n\xF4\r\xF4\x0E\xF4\u1782\x03\xF4\x03\xF4\x05\xF4\u1787" +
    "\n\xF4\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x07\xF5\u178D\n\xF5\f\xF5\x0E\xF5" +
    "\u1790\v\xF5\x03\xF5\x03\xF5\x07\xF5\u1794\n\xF5\f\xF5\x0E\xF5\u1797\v" +
    "\xF5\x07\xF5\u1799\n\xF5\f\xF5\x0E\xF5\u179C\v\xF5\x03\xF5\x03\xF5\x03" +
    "\xF5\x03\xF5\x07\xF5\u17A2\n\xF5\f\xF5\x0E\xF5\u17A5\v\xF5\x03\xF5\x03" +
    "\xF5\x07\xF5\u17A9\n\xF5\f\xF5\x0E\xF5\u17AC\v\xF5\x07\xF5\u17AE\n\xF5" +
    "\f\xF5\x0E\xF5\u17B1\v\xF5\x03\xF5\x03\xF5\x03\xF5\x07\xF5\u17B6\n\xF5" +
    "\f\xF5\x0E\xF5\u17B9\v\xF5\x03\xF5\x06\xF5\u17BC\n\xF5\r\xF5\x0E\xF5\u17BD" +
    "\x06\xF5\u17C0\n\xF5\r\xF5\x0E\xF5\u17C1\x03\xF5\x03\xF5\x07\xF5\u17C6" +
    "\n\xF5\f\xF5\x0E\xF5\u17C9\v\xF5\x03\xF5\x03\xF5\x07\xF5\u17CD\n\xF5\f" +
    "\xF5\x0E\xF5\u17D0\v\xF5\x03\xF5\x07\xF5\u17D3\n\xF5\f\xF5\x0E\xF5\u17D6" +
    "\v\xF5\x05\xF5\u17D8\n\xF5\x05\xF5\u17DA\n\xF5\x03\xF6\x06\xF6\u17DD\n" +
    "\xF6\r\xF6\x0E\xF6\u17DE\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF8\x07\xF8" +
    "\u17E6\n\xF8\f\xF8\x0E\xF8\u17E9\v\xF8\x03\xF8\x03\xF8\x03\xF8\x07\xF8" +
    "\u17EE\n\xF8\f\xF8\x0E\xF8\u17F1\v\xF8\x03\xF9\x03\xF9\x03\xFA\x03\xFA" +
    "\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u17FE" +
    "\n\xFA\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x05\xFB\u1806\n" +
    "\xFB\x03\xFC\x03\xFC\x03\xFC\x05\xFC\u180B\n\xFC\x03\xFC\x03\xFC\x05\xFC" +
    "\u180F\n\xFC\x03\xFC\x03\xFC\x05\xFC\u1813\n\xFC\x05\xFC\u1815\n\xFC\x03" +
    "\xFD\x03\xFD\x03\xFD\x05\xFD\u181A\n\xFD\x03\xFE\x03\xFE\x03\xFF\x03\xFF" +
    "\x03\u0100\x03\u0100\x03\u0101\x03\u0101\x03\u0102\x03\u0102\x03\u0103" +
    "\x03\u0103\x03\u0104\x03\u0104\x03\u0105\x03\u0105\x03\u0106\x03\u0106" +
    "\x03\u0107\x03\u0107\x03\u0107\x05\u0107\u1831\n\u0107\x03\u0107\x03\u0107" +
    "\x03\u0107\x05\u0107\u1836\n\u0107\x03\u0107\x03\u0107\x03\u0107\x05\u0107" +
    "\u183B\n\u0107\x05\u0107\u183D\n\u0107\x03\u0108\x03\u0108\x03\u0109\x03" +
    "\u0109\x03\u0109\x03\u0109\x03\u0109\x03\u0109\x05\u0109\u1847\n\u0109" +
    "\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
    "\x03\u010A\x05\u010A\u1851\n\u010A\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
    "\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x05\u010B\u185B\n\u010B\x03\u010C" +
    "\x03\u010C\x03\u010C\x03\u010C\x05\u010C\u1861\n\u010C\x03\u010C\x03\u010C" +
    "\x03\u010C\x03\u010C\x03\u010C\x05\u010C\u1868\n\u010C\x03\u010D\x03\u010D" +
    "\x07\u010D\u186C\n\u010D\f\u010D\x0E\u010D\u186F\v\u010D\x03\u010E\x03" +
    "\u010E\x03\u010E\x07\u010E\u1874\n\u010E\f\u010E\x0E\u010E\u1877\v\u010E" +
    "\x03\u010E\x03\u010E\x03\u010E\x03\u010F\x03\u010F\x07\u010F\u187E\n\u010F" +
    "\f\u010F\x0E\u010F\u1881\v\u010F\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
    "\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x05\u0110\u188B\n\u0110\x03\u0111" +
    "\x03\u0111\x07\u0111\u188F\n\u0111\f\u0111\x0E\u0111\u1892\v\u0111\x03" +
    "\u0111\x03\u0111\x05\u0111\u1896\n\u0111\x03\u0112\x03\u0112\x03\u0112" +
    "\x07\u0112\u189B\n\u0112\f\u0112\x0E\u0112\u189E\v\u0112\x03\u0112\x03" +
    "\u0112\x03\u0112\x03\u0113\x03\u0113\x03\u0113\x05\u0113\u18A6\n\u0113" +
    "\x03\u0113\x03\u0113\x05\u0113\u18AA\n\u0113\x03\u0113\x03\u0113\x05\u0113" +
    "\u18AE\n\u0113\x05\u0113\u18B0\n\u0113\x03\u0114\x03\u0114\x03\u0114\x03" +
    "\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03" +
    "\u0114\x07\u0114\u18BD\n\u0114\f\u0114\x0E\u0114\u18C0\v\u0114\x03\u0114" +
    "\x05\u0114\u18C3\n\u0114\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115" +
    "\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x07\u0115" +
    "\u18D0\n\u0115\f\u0115\x0E\u0115\u18D3\v\u0115\x03\u0115\x05\u0115\u18D6" +
    "\n\u0115\x03\u0116\x03\u0116\x07\u0116\u18DA\n\u0116\f\u0116\x0E\u0116" +
    "\u18DD\v\u0116\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0117" +
    "\x03\u0117\x03\u0117\x05\u0117\u18E7\n\u0117\x03\u0118\x03\u0118\x03\u0118" +
    "\x05\u0118\u18EC\n\u0118\x03\u0118\x03\u0118\x03\u0118\x05\u0118\u18F1" +
    "\n\u0118\x05\u0118\u18F3\n\u0118\x03\u0119\x03\u0119\x03\u0119\x05\u0119" +
    "\u18F8\n\u0119\x03\u0119\x03\u0119\x03\u0119\x05\u0119\u18FD\n\u0119\x03" +
    "\u0119\x03\u0119\x03\u0119\x05\u0119\u1902\n\u0119\x05\u0119\u1904\n\u0119" +
    "\x03\u011A\x03\u011A\x03\u011A\x05\u011A\u1909\n\u011A\x03\u011A\x03\u011A" +
    "\x07\u011A\u190D\n\u011A\f\u011A\x0E\u011A\u1910\v\u011A\x03\u011A\x03" +
    "\u011A\x06\u011A\u1914\n\u011A\r\u011A\x0E\u011A\u1915\x03\u011A\x03\u011A" +
    "\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x07\u011A\u191F\n\u011A" +
    "\f\u011A\x0E\u011A\u1922\v\u011A\x03\u011A\x05\u011A\u1925\n\u011A\x03" +
    "\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011C\x03\u011C\x03\u011D\x03" +
    "\u011D\x03\u011D\x07\u011D\u1930\n\u011D\f\u011D\x0E\u011D\u1933\v\u011D" +
    "\x03\u011D\x05\u011D\u1936\n\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D" +
    "\x07\u011D\u193C\n\u011D\f\u011D\x0E\u011D\u193F\v\u011D\x03\u011D\x03" +
    "\u011D\x07\u011D\u1943\n\u011D\f\u011D\x0E\u011D\u1946\v\u011D\x03\u011D" +
    "\x05\u011D\u1949\n\u011D\x05\u011D\u194B\n\u011D\x03\u011E\x03\u011E\x03" +
    "\u011E\x03\u011E\x07\u011E\u1951\n\u011E\f\u011E\x0E\u011E\u1954\v\u011E" +
    "\x03\u011E\x03\u011E\x03\u011F\x03\u011F\x05\u011F\u195A\n\u011F\x03\u011F" +
    "\x03\u011F\x03\u011F\x05\u011F\u195F\n\u011F\x03\u011F\x05\u011F\u1962" +
    "\n\u011F\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x05\u0120\u1968\n\u0120" +
    "\x03\u0120\x05\u0120\u196B\n\u0120\x03\u0121\x03\u0121\x05\u0121\u196F" +
    "\n\u0121\x03\u0121\x03\u0121\x03\u0121\x07\u0121\u1974\n\u0121\f\u0121" +
    "\x0E\u0121\u1977\v\u0121\x07\u0121\u1979\n\u0121\f\u0121\x0E\u0121\u197C" +
    "\v\u0121\x03\u0121\x07\u0121\u197F\n\u0121\f\u0121\x0E\u0121\u1982\v\u0121" +
    "\x07\u0121\u1984\n\u0121\f\u0121\x0E\u0121\u1987\v\u0121\x03\u0121\x03" +
    "\u0121\x03\u0121\x03\u0121\x03\u0121\x07\u0121\u198E\n\u0121\f\u0121\x0E" +
    "\u0121\u1991\v\u0121\x03\u0121\x05\u0121\u1994\n\u0121\x03\u0122\x03\u0122" +
    "\x03\u0122\x03\u0122\x03\u0122\x06\u0122\u199B\n\u0122\r\u0122\x0E\u0122" +
    "\u199C\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03" +
    "\u0122\x07\u0122\u19A6\n\u0122\f\u0122\x0E\u0122\u19A9\v\u0122\x03\u0122" +
    "\x05\u0122\u19AC\n\u0122\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0124" +
    "\x03\u0124\x03\u0124\x03\u0124\x06\u0124\u19B6\n\u0124\r\u0124\x0E\u0124" +
    "\u19B7\x03\u0124\x03\u0124\x05\u0124\u19BC\n\u0124\x03\u0125\x03\u0125" +
    "\x03\u0125\x03\u0125\x06\u0125\u19C2\n\u0125\r\u0125\x0E\u0125\u19C3\x03" +
    "\u0125\x03\u0125\x03\u0126\x03\u0126\x07\u0126\u19CA\n\u0126\f\u0126\x0E" +
    "\u0126\u19CD\v\u0126\x03\u0126\x05\u0126\u19D0\n\u0126\x03\u0126\x03\u0126" +
    "\x07\u0126\u19D4\n\u0126\f\u0126\x0E\u0126\u19D7\v\u0126\x07\u0126\u19D9" +
    "\n\u0126\f\u0126\x0E\u0126\u19DC\v\u0126\x03\u0126\x07\u0126\u19DF\n\u0126" +
    "\f\u0126\x0E\u0126\u19E2\v\u0126\x03\u0126\x07\u0126\u19E5\n\u0126\f\u0126" +
    "\x0E\u0126\u19E8\v\u0126\x03\u0126\x03\u0126\x03\u0126\x07\u0126\u19ED" +
    "\n\u0126\f\u0126\x0E\u0126\u19F0\v\u0126\x03\u0126\x05\u0126\u19F3\n\u0126" +
    "\x03\u0126\x05\u0126\u19F6\n\u0126\x03\u0127\x03\u0127\x06\u0127\u19FA" +
    "\n\u0127\r\u0127\x0E\u0127\u19FB\x03\u0127\x03\u0127\x03\u0128\x03\u0128" +
    "\x03\u0128\x06\u0128\u1A03\n\u0128\r\u0128\x0E\u0128\u1A04\x03\u0128\x03" +
    "\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128\u1A0C\n\u0128\x03\u0129" +
    "\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129" +
    "\x05\u0129\u1A16\n\u0129\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x03\u012A" +
    "\x03\u012A\x03\u012A\x03";
bitmarkParser._serializedATNSegment3 = "\u012A\x03\u012A\x05\u012A\u1A21\n\u012A\x03\u012B\x03\u012B\x03\u012B" +
    "\x03\u012B\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012D\x03\u012D" +
    "\x07\u012D\u1A2D\n\u012D\f\u012D\x0E\u012D\u1A30\v\u012D\x03\u012D\x07" +
    "\u012D\u1A33\n\u012D\f\u012D\x0E\u012D\u1A36\v\u012D\x03\u012E\x03\u012E" +
    "\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x07\u012E\u1A3F\n\u012E" +
    "\f\u012E\x0E\u012E\u1A42\v\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E" +
    "\x07\u012E\u1A48\n\u012E\f\u012E\x0E\u012E\u1A4B\v\u012E\x03\u012E\x03" +
    "\u012E\x05\u012E\u1A4F\n\u012E\x03\u012F\x03\u012F\x03\u012F\x03\u012F" +
    "\x06\u012F\u1A55\n\u012F\r\u012F\x0E\u012F\u1A56\x03\u012F\x03\u012F\x03" +
    "\u012F\x03\u012F\x03\u012F\x07\u012F\u1A5E\n\u012F\f\u012F\x0E\u012F\u1A61" +
    "\v\u012F\x03\u012F\x05\u012F\u1A64\n\u012F\x03\u0130\x03\u0130\x05\u0130" +
    "\u1A68\n\u0130\x03\u0130\x03\u0130\x03\u0131\x03\u0131\x05\u0131\u1A6E" +
    "\n\u0131\x06\u0131\u1A70\n\u0131\r\u0131\x0E\u0131\u1A71\x03\u0132\x03" +
    "\u0132\x06\u0132\u1A76\n\u0132\r\u0132\x0E\u0132\u1A77\x03\u0132\x05\u0132" +
    "\u1A7B\n\u0132\x03\u0132\x03\u0132\x06\u0132\u1A7F\n\u0132\r\u0132\x0E" +
    "\u0132\u1A80\x03\u0132\x05\u0132\u1A84\n\u0132\x03\u0132\x03\u0132\x03" +
    "\u0132\x03\u0132\x03\u0132\x03\u0132\x07\u0132\u1A8C\n\u0132\f\u0132\x0E" +
    "\u0132\u1A8F\v\u0132\x03\u0132\x03\u0132\x07\u0132\u1A93\n\u0132\f\u0132" +
    "\x0E\u0132\u1A96\v\u0132\x03\u0132\x03\u0132\x07\u0132\u1A9A\n\u0132\f" +
    "\u0132\x0E\u0132\u1A9D\v\u0132\x03\u0132\x03\u0132\x05\u0132\u1AA1\n\u0132" +
    "\x03\u0133\x03\u0133\x03\u0134\x03\u0134\x03\u0135\x03\u0135\x03\u0136" +
    "\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136" +
    "\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136" +
    "\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136" +
    "\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136" +
    "\x03\u0136\x06\u0136\u1AC7\n\u0136\r\u0136\x0E\u0136\u1AC8\x03\u0137\x03" +
    "\u0137\x03\u0138\x03\u0138\x03\u0138\t\u0724\u072D\u1688\u18BE\u18D1\u1920" +
    "\u1A49\x02\x02\u0139\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02" +
    "\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02" +
    "\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02" +
    ">\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02" +
    "Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02" +
    "v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A" +
    "\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C" +
    "\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE" +
    "\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0" +
    "\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2" +
    "\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4" +
    "\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6" +
    "\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106" +
    "\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114" +
    "\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122" +
    "\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130" +
    "\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E" +
    "\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C" +
    "\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A" +
    "\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168" +
    "\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176" +
    "\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184" +
    "\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192" +
    "\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0" +
    "\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE" +
    "\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC" +
    "\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA" +
    "\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8" +
    "\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6" +
    "\x02\u01E8\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4" +
    "\x02\u01F6\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202" +
    "\x02\u0204\x02\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\u0210" +
    "\x02\u0212\x02\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02\u021E" +
    "\x02\u0220\x02\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02\u022C" +
    "\x02\u022E\x02\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02\u023A" +
    "\x02\u023C\x02\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02\u0248" +
    "\x02\u024A\x02\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02\u0256" +
    "\x02\u0258\x02\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02\u0264" +
    "\x02\u0266\x02\u0268\x02\u026A\x02\u026C\x02\u026E\x02\x02\x1B\x03\x02" +
    "\t\n\x03\x02\u0161\u0162\x03\x02\xF0\xF1\x03\x02\u011D\u011E\x03\x02\u0114" +
    "\u0115\x04\x02\u0124\u0124\u0127\u012A\x03\x02\xFE\xFF\x03\x02\xE5\xE5" +
    "\b\x02\u0134\u0135\u0137\u0138\u0145\u014D\u0158\u015B\u0161\u0162\u0164" +
    "\u0166\x05\x02\u0133\u0133\u0147\u0147\u0158\u0158\x04\x02\u0134\u0134" +
    "\u0148\u0148\x05\x02\u0135\u0135\u0149\u014A\u015A\u015A\x04\x02\u0136" +
    "\u0136\u014B\u014B\x04\x02\u0137\u0137\u014C\u014C\x05\x02\u0138\u0138" +
    "\u014D\u014D\u015B\u015B\x04\x02\u013E\u013E\u0151\u0151\x05\x02\u0140" +
    "\u0140\u0152\u0153\u015F\u015F\x04\x02\u0141\u0141\u0154\u0154\x04\x02" +
    "\u0142\u0142\u0155\u0155\x05\x02\u0143\u0143\u0156\u0156\u0160\u0160\x03" +
    "\x02\xF3\xF3\x04\x02\xF4\xF4\xF6\xF6\x03\x02\u0100\u0101\x03\x02\xF9\xF9" +
    "\x03\x02\xFA\xFA\x02\u1E7D\x02\u027D\x03\x02\x02\x02\x04\u028B\x03\x02" +
    "\x02\x02\x06\u036A\x03\x02\x02\x02\b\u036C\x03\x02\x02\x02\n\u0381\x03" +
    "\x02\x02\x02\f\u039C\x03\x02\x02\x02\x0E\u03B0\x03\x02\x02\x02\x10\u03C4" +
    "\x03\x02\x02\x02\x12\u03D8\x03\x02\x02\x02\x14\u03EC\x03\x02\x02\x02\x16" +
    "\u03F7\x03\x02\x02\x02\x18\u0401\x03\x02\x02\x02\x1A\u0412\x03\x02\x02" +
    "\x02\x1C\u0424\x03\x02\x02\x02\x1E\u0427\x03\x02\x02\x02 \u043D\x03\x02" +
    "\x02\x02\"\u0453\x03\x02\x02\x02$\u0467\x03\x02\x02\x02&\u047B\x03\x02" +
    "\x02\x02(\u048F\x03\x02\x02\x02*\u04A3\x03\x02\x02\x02,\u04B7\x03\x02" +
    "\x02\x02.\u04CB\x03\x02\x02\x020\u04DF\x03\x02\x02\x022\u04F3\x03\x02" +
    "\x02\x024\u0507\x03\x02\x02\x026\u051B\x03\x02\x02\x028\u052F\x03\x02" +
    "\x02\x02:\u0543\x03\x02\x02\x02<\u0557\x03\x02\x02\x02>\u056B\x03\x02" +
    "\x02\x02@\u057F\x03\x02\x02\x02B\u0593\x03\x02\x02\x02D\u05B7\x03\x02" +
    "\x02\x02F\u05DB\x03\x02\x02\x02H\u05FF\x03\x02\x02\x02J\u0614\x03\x02" +
    "\x02\x02L\u0624\x03\x02\x02\x02N\u062F\x03\x02\x02\x02P\u0633\x03\x02" +
    "\x02\x02R\u063C\x03\x02\x02\x02T\u0660\x03\x02\x02\x02V\u0678\x03\x02" +
    "\x02\x02X\u067A\x03\x02\x02\x02Z\u0685\x03\x02\x02\x02\\\u0694\x03\x02" +
    "\x02\x02^\u069F\x03\x02\x02\x02`\u06AA\x03\x02\x02\x02b\u06B4\x03\x02" +
    "\x02\x02d\u06E5\x03\x02\x02\x02f\u06F1\x03\x02\x02\x02h\u06F3\x03\x02" +
    "\x02\x02j\u06F5\x03\x02\x02\x02l\u0732\x03\x02\x02\x02n\u0734\x03\x02" +
    "\x02\x02p\u075C\x03\x02\x02\x02r\u076A\x03\x02\x02\x02t\u077A\x03\x02" +
    "\x02\x02v\u079F\x03\x02\x02\x02x\u07C4\x03\x02\x02\x02z\u07E9\x03\x02" +
    "\x02\x02|\u0816\x03\x02\x02\x02~\u0842\x03\x02\x02\x02\x80\u0857\x03\x02" +
    "\x02\x02\x82\u086C\x03\x02\x02\x02\x84\u0881\x03\x02\x02\x02\x86\u0896" +
    "\x03\x02\x02\x02\x88\u08AB\x03\x02\x02\x02\x8A\u08C0\x03\x02\x02\x02\x8C" +
    "\u08D5\x03\x02\x02\x02\x8E\u08EA\x03\x02\x02\x02\x90\u08FF\x03\x02\x02" +
    "\x02\x92\u0914\x03\x02\x02\x02\x94\u0929\x03\x02\x02\x02\x96\u093E\x03" +
    "\x02\x02\x02\x98\u0953\x03\x02\x02\x02\x9A\u0968\x03\x02\x02\x02\x9C\u097D" +
    "\x03\x02\x02\x02\x9E\u0992\x03\x02\x02\x02\xA0\u09A7\x03\x02\x02\x02\xA2" +
    "\u09BC\x03\x02\x02\x02\xA4\u09D1\x03\x02\x02\x02\xA6\u09E6\x03\x02\x02" +
    "\x02\xA8\u09FB\x03\x02\x02\x02\xAA\u0A10\x03\x02\x02\x02\xAC\u0A25\x03" +
    "\x02\x02\x02\xAE\u0A3A\x03\x02\x02\x02\xB0\u0A4F\x03\x02\x02\x02\xB2\u0A64" +
    "\x03\x02\x02\x02\xB4\u0A79\x03\x02\x02\x02\xB6\u0A8E\x03\x02\x02\x02\xB8" +
    "\u0AA3\x03\x02\x02\x02\xBA\u0AB8\x03\x02\x02\x02\xBC\u0ACD\x03\x02\x02" +
    "\x02\xBE\u0AE2\x03\x02\x02\x02\xC0\u0AF7\x03\x02\x02\x02\xC2\u0B0C\x03" +
    "\x02\x02\x02\xC4\u0B21\x03\x02\x02\x02\xC6\u0B36\x03\x02\x02\x02\xC8\u0B4B" +
    "\x03\x02\x02\x02\xCA\u0B60\x03\x02\x02\x02\xCC\u0B75\x03\x02\x02\x02\xCE" +
    "\u0B8A\x03\x02\x02\x02\xD0\u0B9F\x03\x02\x02\x02\xD2\u0BB4\x03\x02\x02" +
    "\x02\xD4\u0BC9\x03\x02\x02\x02\xD6\u0BDE\x03\x02\x02\x02\xD8\u0BF3\x03" +
    "\x02\x02\x02\xDA\u0C08\x03\x02\x02\x02\xDC\u0C1D\x03\x02\x02\x02\xDE\u0C32" +
    "\x03\x02\x02\x02\xE0\u0C47\x03\x02\x02\x02\xE2\u0C5C\x03\x02\x02\x02\xE4" +
    "\u0C71\x03\x02\x02\x02\xE6\u0C86\x03\x02\x02\x02\xE8\u0C9B\x03\x02\x02" +
    "\x02\xEA\u0CB0\x03\x02\x02\x02\xEC\u0CC5\x03\x02\x02\x02\xEE\u0CDA\x03" +
    "\x02\x02\x02\xF0\u0CEF\x03\x02\x02\x02\xF2\u0D04\x03\x02\x02\x02\xF4\u0D19" +
    "\x03\x02\x02\x02\xF6\u0D2E\x03\x02\x02\x02\xF8\u0D43\x03\x02\x02\x02\xFA" +
    "\u0D58\x03\x02\x02\x02\xFC\u0D6D\x03\x02\x02\x02\xFE\u0D82\x03\x02\x02" +
    "\x02\u0100\u0D97\x03\x02\x02\x02\u0102\u0DAC\x03\x02\x02\x02\u0104\u0DC1" +
    "\x03\x02\x02\x02\u0106\u0DD6\x03\x02\x02\x02\u0108\u0DEB\x03\x02\x02\x02" +
    "\u010A\u0E00\x03\x02\x02\x02\u010C\u0E15\x03\x02\x02\x02\u010E\u0E2A\x03" +
    "\x02\x02\x02\u0110\u0E3F\x03\x02\x02\x02\u0112\u0E54\x03\x02\x02\x02\u0114" +
    "\u0E69\x03\x02\x02\x02\u0116\u0E7E\x03\x02\x02\x02\u0118\u0E93\x03\x02" +
    "\x02\x02\u011A\u0EA8\x03\x02\x02\x02\u011C\u0EBD\x03\x02\x02\x02\u011E" +
    "\u0ED2\x03\x02\x02\x02\u0120\u0EE7\x03\x02\x02\x02\u0122\u0EFC\x03\x02" +
    "\x02\x02\u0124\u0F11\x03\x02\x02\x02\u0126\u0F26\x03\x02\x02\x02\u0128" +
    "\u0F3B\x03\x02\x02\x02\u012A\u0F50\x03\x02\x02\x02\u012C\u0F65\x03\x02" +
    "\x02\x02\u012E\u0F7A\x03\x02\x02\x02\u0130\u0F8F\x03\x02\x02\x02\u0132" +
    "\u0FA4\x03\x02\x02\x02\u0134\u0FB9\x03\x02\x02\x02\u0136\u0FCE\x03\x02" +
    "\x02\x02\u0138\u0FE3\x03\x02\x02\x02\u013A\u0FF8\x03\x02\x02\x02\u013C" +
    "\u100D\x03\x02\x02\x02\u013E\u1022\x03\x02\x02\x02\u0140\u1037\x03\x02" +
    "\x02\x02\u0142\u104C\x03\x02\x02\x02\u0144\u1061\x03\x02\x02\x02\u0146" +
    "\u1076\x03\x02\x02\x02\u0148\u108B\x03\x02\x02\x02\u014A\u10A0\x03\x02" +
    "\x02\x02\u014C\u10B5\x03\x02\x02\x02\u014E\u10CA\x03\x02\x02\x02\u0150" +
    "\u10DF\x03\x02\x02\x02\u0152\u10F4\x03\x02\x02\x02\u0154\u1109\x03\x02" +
    "\x02\x02\u0156\u111E\x03\x02\x02\x02\u0158\u1133\x03\x02\x02\x02\u015A" +
    "\u1148\x03\x02\x02\x02\u015C\u115D\x03\x02\x02\x02\u015E\u1172\x03\x02" +
    "\x02\x02\u0160\u1187\x03\x02\x02\x02\u0162\u119C\x03\x02\x02\x02\u0164" +
    "\u11B1\x03\x02\x02\x02\u0166\u11C6\x03\x02\x02\x02\u0168\u11DB\x03\x02" +
    "\x02\x02\u016A\u11F0\x03\x02\x02\x02\u016C\u1205\x03\x02\x02\x02\u016E" +
    "\u121A\x03\x02\x02\x02\u0170\u122F\x03\x02\x02\x02\u0172\u1244\x03\x02" +
    "\x02\x02\u0174\u1259\x03\x02\x02\x02\u0176\u1285\x03\x02\x02\x02\u0178" +
    "\u129A\x03\x02\x02\x02\u017A\u12AF\x03\x02\x02\x02\u017C\u12C4\x03\x02" +
    "\x02\x02\u017E\u12D9\x03\x02\x02\x02\u0180\u12EE\x03\x02\x02\x02\u0182" +
    "\u1303\x03\x02\x02\x02\u0184\u1318\x03\x02\x02\x02\u0186\u132D\x03\x02" +
    "\x02\x02\u0188\u1342\x03\x02\x02\x02\u018A\u1357\x03\x02\x02\x02\u018C" +
    "\u136C\x03\x02\x02\x02\u018E\u1381\x03\x02\x02\x02\u0190\u1396\x03\x02" +
    "\x02\x02\u0192\u13AA\x03\x02\x02\x02\u0194\u13BE\x03\x02\x02\x02\u0196" +
    "\u13D2\x03\x02\x02\x02\u0198\u13E7\x03\x02\x02\x02\u019A\u13FC\x03\x02" +
    "\x02\x02\u019C\u1411\x03\x02\x02\x02\u019E\u1426\x03\x02\x02\x02\u01A0" +
    "\u143B\x03\x02\x02\x02\u01A2\u1450\x03\x02\x02\x02\u01A4\u1465\x03\x02" +
    "\x02\x02\u01A6\u147A\x03\x02\x02\x02\u01A8\u148F\x03\x02\x02\x02\u01AA" +
    "\u14A4\x03\x02\x02\x02\u01AC\u14B9\x03\x02\x02\x02\u01AE\u14CE\x03\x02" +
    "\x02\x02\u01B0\u14E3\x03\x02\x02\x02\u01B2\u14F8\x03\x02\x02\x02\u01B4" +
    "\u150D\x03\x02\x02\x02\u01B6\u1522\x03\x02\x02\x02\u01B8\u1537\x03\x02" +
    "\x02\x02\u01BA\u154C\x03\x02\x02\x02\u01BC\u1561\x03\x02\x02\x02\u01BE" +
    "\u1576\x03\x02\x02\x02\u01C0\u158B\x03\x02\x02\x02\u01C2\u15A0\x03\x02" +
    "\x02\x02\u01C4\u15B5\x03\x02\x02\x02\u01C6\u15CA\x03\x02\x02\x02\u01C8" +
    "\u15DF\x03\x02\x02\x02\u01CA\u15F4\x03\x02\x02\x02\u01CC\u1609\x03\x02" +
    "\x02\x02\u01CE\u161E\x03\x02\x02\x02\u01D0\u1633\x03\x02\x02\x02\u01D2" +
    "\u1648\x03\x02\x02\x02\u01D4\u165D\x03\x02\x02\x02\u01D6\u1677\x03\x02" +
    "\x02\x02\u01D8\u168C\x03\x02\x02\x02\u01DA\u1695\x03\x02\x02\x02\u01DC" +
    "\u16E5\x03\x02\x02\x02\u01DE\u16E7\x03\x02\x02\x02\u01E0\u16ED\x03\x02" +
    "\x02\x02\u01E2\u1719\x03\x02\x02\x02\u01E4\u173E\x03\x02\x02\x02\u01E6" +
    "\u1763\x03\x02\x02\x02\u01E8\u17D9\x03\x02\x02\x02\u01EA\u17DC\x03\x02" +
    "\x02\x02\u01EC\u17E0\x03\x02\x02\x02\u01EE\u17E7\x03\x02\x02\x02\u01F0" +
    "\u17F2\x03\x02\x02\x02\u01F2\u17FD\x03\x02\x02\x02\u01F4\u1805\x03\x02" +
    "\x02\x02\u01F6\u1814\x03\x02\x02\x02\u01F8\u1816\x03\x02\x02\x02\u01FA" +
    "\u181B\x03\x02\x02\x02\u01FC\u181D\x03\x02\x02\x02\u01FE\u181F\x03\x02" +
    "\x02\x02\u0200\u1821\x03\x02\x02\x02\u0202\u1823\x03\x02\x02\x02\u0204" +
    "\u1825\x03\x02\x02\x02\u0206\u1827\x03\x02\x02\x02\u0208\u1829\x03\x02" +
    "\x02\x02\u020A\u182B\x03\x02\x02\x02\u020C\u183C\x03\x02\x02\x02\u020E" +
    "\u183E\x03\x02\x02\x02\u0210\u1846\x03\x02\x02\x02\u0212\u1848\x03\x02" +
    "\x02\x02\u0214\u1852\x03\x02\x02\x02\u0216\u185C\x03\x02\x02\x02\u0218" +
    "\u1869\x03\x02\x02\x02\u021A\u1870\x03\x02\x02\x02\u021C\u187B\x03\x02" +
    "\x02\x02\u021E\u1882\x03\x02\x02\x02\u0220\u188C\x03\x02\x02\x02\u0222" +
    "\u1897\x03\x02\x02\x02\u0224\u18AF\x03\x02\x02\x02\u0226\u18C2\x03\x02" +
    "\x02\x02\u0228\u18D5\x03\x02\x02\x02\u022A\u18D7\x03\x02\x02\x02\u022C" +
    "\u18DE\x03\x02\x02\x02\u022E\u18F2\x03\x02\x02\x02\u0230\u1903\x03\x02" +
    "\x02\x02\u0232\u1924\x03\x02\x02\x02\u0234\u1926\x03\x02\x02\x02\u0236" +
    "\u192A\x03\x02\x02\x02\u0238\u194A\x03\x02\x02\x02\u023A\u194C\x03\x02" +
    "\x02\x02\u023C\u1961\x03\x02\x02\x02\u023E\u196A\x03\x02\x02\x02\u0240" +
    "\u1993\x03\x02\x02\x02\u0242\u19AB\x03\x02\x02\x02\u0244\u19AD\x03\x02" +
    "\x02\x02\u0246\u19B1\x03\x02\x02\x02\u0248\u19BD\x03\x02\x02\x02\u024A" +
    "\u19F5\x03\x02\x02\x02\u024C\u19F7\x03\x02\x02\x02\u024E\u1A0B\x03\x02" +
    "\x02\x02\u0250\u1A15\x03\x02\x02\x02\u0252\u1A20\x03\x02\x02\x02\u0254" +
    "\u1A22\x03\x02\x02\x02\u0256\u1A26\x03\x02\x02\x02\u0258\u1A2A\x03\x02" +
    "\x02\x02\u025A\u1A4E\x03\x02\x02\x02\u025C\u1A63\x03\x02\x02\x02\u025E" +
    "\u1A65\x03\x02\x02\x02\u0260\u1A6F\x03\x02\x02\x02\u0262\u1AA0\x03\x02" +
    "\x02\x02\u0264\u1AA2\x03\x02\x02\x02\u0266\u1AA4\x03\x02\x02\x02\u0268" +
    "\u1AA6\x03\x02\x02\x02\u026A\u1AC6\x03\x02\x02\x02\u026C\u1ACA\x03\x02" +
    "\x02\x02\u026E\u1ACC\x03\x02\x02\x02\u0270\u027A\x05\x04\x03\x02\u0271" +
    "\u0273\x07\x04\x02\x02\u0272\u0271\x03\x02\x02\x02\u0273\u0276\x03\x02" +
    "\x02\x02\u0274\u0272\x03\x02\x02\x02\u0274\u0275\x03\x02\x02\x02\u0275" +
    "\u0277\x03\x02\x02\x02\u0276\u0274\x03\x02\x02\x02\u0277\u0279\x07\u010C" +
    "\x02\x02\u0278\u0274\x03\x02\x02\x02\u0279\u027C\x03\x02\x02\x02\u027A" +
    "\u0278\x03\x02\x02\x02\u027A\u027B\x03\x02\x02\x02\u027B\u027E\x03\x02" +
    "\x02\x02\u027C\u027A\x03\x02\x02\x02\u027D\u0270\x03\x02\x02\x02\u027E" +
    "\u027F\x03\x02\x02\x02\u027F\u027D\x03\x02\x02\x02\u027F\u0280\x03\x02" +
    "\x02\x02\u0280\u0284\x03\x02\x02\x02\u0281\u0283\x07\u010C\x02\x02\u0282" +
    "\u0281\x03\x02\x02\x02\u0283\u0286\x03\x02\x02\x02\u0284\u0282\x03\x02" +
    "\x02\x02\u0284\u0285\x03\x02\x02\x02\u0285\u0287\x03\x02\x02\x02\u0286" +
    "\u0284\x03\x02\x02\x02\u0287\u0288\x07\x02\x02\x03\u0288\x03\x03\x02\x02" +
    "\x02\u0289\u028C\x05\x06\x04\x02\u028A\u028C\x05\u0260\u0131\x02\u028B" +
    "\u0289\x03\x02\x02\x02\u028B\u028A\x03\x02\x02\x02\u028C\x05\x03\x02\x02" +
    "\x02\u028D\u036B\x05\b\x05\x02\u028E\u036B\x05\n\x06\x02\u028F\u036B\x05" +
    "\f\x07\x02\u0290\u036B\x05\x0E\b\x02\u0291\u036B\x05\x10\t\x02\u0292\u036B" +
    "\x05\x12\n\x02\u0293\u036B\x05\x16\f\x02\u0294\u036B\x05\x14\v\x02\u0295" +
    "\u036B\x05\x1A\x0E\x02\u0296\u036B\x05\x18\r\x02\u0297\u036B\x05\u025E" +
    "\u0130\x02\u0298\u036B\x05\x1E\x10\x02\u0299\u036B\x05 \x11\x02\u029A" +
    "\u036B\x05b2\x02\u029B\u036B\x05j6\x02\u029C\u036B\x05n8\x02\u029D\u036B" +
    "\x05v<\x02\u029E\u036B\x05t;\x02\u029F\u036B\x05x=\x02\u02A0\u036B\x05" +
    "z>\x02\u02A1\u036B\x05|?\x02\u02A2\u036B\x05~@\x02\u02A3\u036B\x05\x80" +
    "A\x02\u02A4\u036B\x05\x82B\x02\u02A5\u036B\x05\x84C\x02\u02A6\u036B\x05" +
    "\x86D\x02\u02A7\u036B\x05\x88E\x02\u02A8\u036B\x05\x8AF\x02\u02A9\u036B" +
    "\x05\x8EH\x02\u02AA\u036B\x05\x90I\x02\u02AB\u036B\x05\x92J\x02\u02AC" +
    "\u036B\x05\x94K\x02\u02AD\u036B\x05\xA4S\x02\u02AE\u036B\x05\x96L\x02" +
    "\u02AF\u036B\x05\x98M\x02\u02B0\u036B\x05\x9AN\x02\u02B1\u036B\x05\x9C" +
    "O\x02\u02B2\u036B\x05\x9EP\x02\u02B3\u036B\x05\xA0Q\x02\u02B4\u036B\x05" +
    "\xA2R\x02\u02B5\u036B\x05\xA6T\x02\u02B6\u036B\x05\x8CG\x02\u02B7\u036B" +
    "\x05\u0138\x9D\x02\u02B8\u036B\x05\u01E8\xF5\x02\u02B9\u036B\x05\u01DC" +
    "\xEF\x02\u02BA\u036B\x05\u01E0\xF1\x02\u02BB\u036B\x05\u01E2\xF2\x02\u02BC" +
    "\u036B\x05\u01E4\xF3\x02\u02BD\u036B\x05\u01E6\xF4\x02\u02BE\u036B\x05" +
    "\u024C\u0127\x02\u02BF\u036B\x05\xA8U\x02\u02C0\u036B\x05\xAAV\x02\u02C1" +
    "\u036B\x05\"\x12\x02\u02C2\u036B\x05$\x13\x02\u02C3\u036B\x05&\x14\x02" +
    "\u02C4\u036B\x05(\x15\x02\u02C5\u036B\x05*\x16\x02\u02C6\u036B\x05,\x17" +
    "\x02\u02C7\u036B\x05.\x18\x02\u02C8\u036B\x050\x19\x02\u02C9\u036B\x05" +
    "2\x1A\x02\u02CA\u036B\x054\x1B\x02\u02CB\u036B\x056\x1C\x02\u02CC\u036B" +
    "\x058\x1D\x02\u02CD\u036B\x05:\x1E\x02\u02CE\u036B\x05<\x1F\x02\u02CF" +
    "\u036B\x05> \x02\u02D0\u036B\x05@!\x02\u02D1\u036B\x05B\"\x02\u02D2\u036B" +
    "\x05D#\x02\u02D3\u036B\x05F$\x02\u02D4\u036B\x05H%\x02\u02D5\u036B\x05" +
    "\xACW\x02\u02D6\u036B\x05\xAEX\x02\u02D7\u036B\x05\xB0Y\x02\u02D8\u036B" +
    "\x05\xB2Z\x02\u02D9\u036B\x05\xB4[\x02\u02DA\u036B\x05\xB6\\\x02\u02DB" +
    "\u036B\x05\xB8]\x02\u02DC\u036B\x05\xBA^\x02\u02DD\u036B\x05\xBC_\x02" +
    "\u02DE\u036B\x05\xBE`\x02\u02DF\u036B\x05\xC0a\x02\u02E0\u036B\x05\xC2" +
    "b\x02\u02E1\u036B\x05\xC4c\x02\u02E2\u036B\x05\xC6d\x02\u02E3\u036B\x05" +
    "\xC8e\x02\u02E4\u036B\x05\xCAf\x02\u02E5\u036B\x05\xCEh\x02\u02E6\u036B" +
    "\x05\xD0i\x02\u02E7\u036B\x05\xD2j\x02\u02E8\u036B\x05\xD4k\x02\u02E9" +
    "\u036B\x05\xCCg\x02\u02EA\u036B\x05\xD6l\x02\u02EB\u036B\x05\xD8m\x02" +
    "\u02EC\u036B\x05\xDAn\x02\u02ED\u036B\x05\xDCo\x02\u02EE\u036B\x05\xDE" +
    "p\x02\u02EF\u036B\x05\xE0q\x02\u02F0\u036B\x05\xE2r\x02\u02F1\u036B\x05" +
    "\xE4s\x02\u02F2\u036B\x05\xE6t\x02\u02F3\u036B\x05\xE8u\x02\u02F4\u036B" +
    "\x05\xEAv\x02\u02F5\u036B\x05\xECw\x02\u02F6\u036B\x05\xEEx\x02\u02F7" +
    "\u036B\x05\xF0y\x02\u02F8\u036B\x05\xF2z\x02\u02F9\u036B\x05\xF4{\x02" +
    "\u02FA\u036B\x05\xF6|\x02\u02FB\u036B\x05\xF8}\x02\u02FC\u036B\x05\xFA" +
    "~\x02\u02FD\u036B\x05\xFC\x7F\x02\u02FE\u036B\x05\xFE\x80\x02\u02FF\u036B" +
    "\x05\u0100\x81\x02\u0300\u036B\x05\u0102\x82\x02\u0301\u036B\x05\u0104" +
    "\x83\x02\u0302\u036B\x05\u0106\x84\x02\u0303\u036B\x05\u0108\x85\x02\u0304" +
    "\u036B\x05\u010A\x86\x02\u0305\u036B\x05\u010C\x87\x02\u0306\u036B\x05" +
    "\u010E\x88\x02\u0307\u036B\x05\u0110\x89\x02\u0308\u036B\x05\u0112\x8A" +
    "\x02\u0309\u036B\x05\u013A\x9E\x02\u030A\u036B\x05\u013C\x9F\x02\u030B" +
    "\u036B\x05\u013E\xA0\x02\u030C\u036B\x05\u0140\xA1\x02\u030D\u036B\x05" +
    "\u0142\xA2\x02\u030E\u036B\x05\u0144\xA3\x02\u030F\u036B\x05\u0146\xA4" +
    "\x02\u0310\u036B\x05\u0148\xA5\x02\u0311\u036B\x05\u014A\xA6\x02\u0312" +
    "\u036B\x05\u014C\xA7\x02\u0313\u036B\x05\u014E\xA8\x02\u0314\u036B\x05" +
    "\u0150\xA9\x02\u0315\u036B\x05\u0152\xAA\x02\u0316\u036B\x05\u0154\xAB" +
    "\x02\u0317\u036B\x05\u013E\xA0\x02\u0318\u036B\x05\u0156\xAC\x02\u0319" +
    "\u036B\x05\u0158\xAD\x02\u031A\u036B\x05\u015A\xAE\x02\u031B\u036B\x05" +
    "\u015C\xAF\x02\u031C\u036B\x05\u015E\xB0\x02\u031D\u036B\x05\u0160\xB1" +
    "\x02\u031E\u036B\x05\u0162\xB2\x02\u031F\u036B\x05\u0164\xB3\x02\u0320" +
    "\u036B\x05\u0166\xB4\x02\u0321\u036B\x05\u0168\xB5\x02\u0322\u036B\x05" +
    "\u016A\xB6\x02\u0323\u036B\x05\u016C\xB7\x02\u0324\u036B\x05\u016E\xB8" +
    "\x02\u0325\u036B\x05\u0170\xB9\x02\u0326\u036B\x05\u0172\xBA\x02\u0327" +
    "\u036B\x05\u0174\xBB\x02\u0328\u036B\x05\u0114\x8B\x02\u0329\u036B\x05" +
    "\u0116\x8C\x02\u032A\u036B\x05\u0118\x8D\x02\u032B\u036B\x05\u011A\x8E" +
    "\x02\u032C\u036B\x05\u011C\x8F\x02\u032D\u036B\x05\u011E\x90\x02\u032E" +
    "\u036B\x05\u0120\x91\x02\u032F\u036B\x05\u0122\x92\x02\u0330\u036B\x05" +
    "\u0124\x93\x02\u0331\u036B\x05\u0126\x94\x02\u0332\u036B\x05\u0128\x95" +
    "\x02\u0333\u036B\x05\u012A\x96\x02\u0334\u036B\x05\u012C\x97\x02\u0335" +
    "\u036B\x05\u012E\x98\x02\u0336\u036B\x05\u0130\x99\x02\u0337\u036B\x05" +
    "\u0132\x9A\x02\u0338\u036B\x05\u0134\x9B\x02\u0339\u036B\x05\u0136\x9C" +
    "\x02\u033A\u036B\x05\u0176\xBC\x02\u033B\u036B\x05\u0178\xBD\x02\u033C" +
    "\u036B\x05\u017A\xBE\x02\u033D\u036B\x05\u017C\xBF\x02\u033E\u036B\x05" +
    "\u017E\xC0\x02\u033F\u036B\x05\u0180\xC1\x02\u0340\u036B\x05\u0182\xC2" +
    "\x02\u0341\u036B\x05\u0184\xC3\x02\u0342\u036B\x05\u0186\xC4\x02\u0343" +
    "\u036B\x05\u0188\xC5\x02\u0344\u036B\x05\u018A\xC6\x02\u0345\u036B\x05" +
    "\u018C\xC7\x02\u0346\u036B\x05\u018E\xC8\x02\u0347\u036B\x05\u0190\xC9" +
    "\x02\u0348\u036B\x05\u0192\xCA\x02\u0349\u036B\x05\u0194\xCB\x02\u034A" +
    "\u036B\x05\u0196\xCC\x02\u034B\u036B\x05\u0198\xCD\x02\u034C\u036B\x05" +
    "\u019A\xCE\x02\u034D\u036B\x05\u019C\xCF\x02\u034E\u036B\x05\u019E\xD0" +
    "\x02\u034F\u036B\x05\u01A0\xD1\x02\u0350\u036B\x05\u01A2\xD2\x02\u0351" +
    "\u036B\x05\u01A4\xD3\x02\u0352\u036B\x05\u01A6\xD4\x02\u0353\u036B\x05" +
    "\u01A8\xD5\x02\u0354\u036B\x05\u01AA\xD6\x02\u0355\u036B\x05\u01AC\xD7" +
    "\x02\u0356\u036B\x05\u01D4\xEB\x02\u0357\u036B\x05\u01AE\xD8\x02\u0358" +
    "\u036B\x05\u01B0\xD9\x02\u0359\u036B\x05\u01B4\xDB\x02\u035A\u036B\x05" +
    "\u01B6\xDC\x02\u035B\u036B\x05\u01B2\xDA\x02\u035C\u036B\x05\u01B8\xDD" +
    "\x02\u035D\u036B\x05\u01BA\xDE\x02\u035E\u036B\x05\u01BC\xDF\x02\u035F" +
    "\u036B\x05\u01BE\xE0\x02\u0360\u036B\x05\u01C0\xE1\x02\u0361\u036B\x05" +
    "\u01C2\xE2\x02\u0362\u036B\x05\u01C4\xE3\x02\u0363\u036B\x05\u01C6\xE4" +
    "\x02\u0364\u036B\x05\u01C8\xE5\x02\u0365\u036B\x05\u01CA\xE6\x02\u0366" +
    "\u036B\x05\u01CC\xE7\x02\u0367\u036B\x05\u01CE\xE8\x02\u0368\u036B\x05" +
    "\u01D0\xE9\x02\u0369\u036B\x05\u01D2\xEA\x02\u036A\u028D\x03\x02\x02\x02" +
    "\u036A\u028E\x03\x02\x02\x02\u036A\u028F\x03\x02\x02\x02\u036A\u0290\x03" +
    "\x02\x02\x02\u036A\u0291\x03\x02\x02\x02\u036A\u0292\x03\x02\x02\x02\u036A" +
    "\u0293\x03\x02\x02\x02\u036A\u0294\x03\x02\x02\x02\u036A\u0295\x03\x02" +
    "\x02\x02\u036A\u0296\x03\x02\x02\x02\u036A\u0297\x03\x02\x02\x02\u036A" +
    "\u0298\x03\x02\x02\x02\u036A\u0299\x03\x02\x02\x02\u036A\u029A\x03\x02" +
    "\x02\x02\u036A\u029B\x03\x02\x02\x02\u036A\u029C\x03\x02\x02\x02\u036A" +
    "\u029D\x03\x02\x02\x02\u036A\u029E\x03\x02\x02\x02\u036A\u029F\x03\x02" +
    "\x02\x02\u036A\u02A0\x03\x02\x02\x02\u036A\u02A1\x03\x02\x02\x02\u036A" +
    "\u02A2\x03\x02\x02\x02\u036A\u02A3\x03\x02\x02\x02\u036A\u02A4\x03\x02" +
    "\x02\x02\u036A\u02A5\x03\x02\x02\x02\u036A\u02A6\x03\x02\x02\x02\u036A" +
    "\u02A7\x03\x02\x02\x02\u036A\u02A8\x03\x02\x02\x02\u036A\u02A9\x03\x02" +
    "\x02\x02\u036A\u02AA\x03\x02\x02\x02\u036A\u02AB\x03\x02\x02\x02\u036A" +
    "\u02AC\x03\x02\x02\x02\u036A\u02AD\x03\x02\x02\x02\u036A\u02AE\x03\x02" +
    "\x02\x02\u036A\u02AF\x03\x02\x02\x02\u036A\u02B0\x03\x02\x02\x02\u036A" +
    "\u02B1\x03\x02\x02\x02\u036A\u02B2\x03\x02\x02\x02\u036A\u02B3\x03\x02" +
    "\x02\x02\u036A\u02B4\x03\x02\x02\x02\u036A\u02B5\x03\x02\x02\x02\u036A" +
    "\u02B6\x03\x02\x02\x02\u036A\u02B7\x03\x02\x02\x02\u036A\u02B8\x03\x02" +
    "\x02\x02\u036A\u02B9\x03\x02\x02\x02\u036A\u02BA\x03\x02\x02\x02\u036A" +
    "\u02BB\x03\x02\x02\x02\u036A\u02BC\x03\x02\x02\x02\u036A\u02BD\x03\x02" +
    "\x02\x02\u036A\u02BE\x03\x02\x02\x02\u036A\u02BF\x03\x02\x02\x02\u036A" +
    "\u02C0\x03\x02\x02\x02\u036A\u02C1\x03\x02\x02\x02\u036A\u02C2\x03\x02" +
    "\x02\x02\u036A\u02C3\x03\x02\x02\x02\u036A\u02C4\x03\x02\x02\x02\u036A" +
    "\u02C5\x03\x02\x02\x02\u036A\u02C6\x03\x02\x02\x02\u036A\u02C7\x03\x02" +
    "\x02\x02\u036A\u02C8\x03\x02\x02\x02\u036A\u02C9\x03\x02\x02\x02\u036A" +
    "\u02CA\x03\x02\x02\x02\u036A\u02CB\x03\x02\x02\x02\u036A\u02CC\x03\x02" +
    "\x02\x02\u036A\u02CD\x03\x02\x02\x02\u036A\u02CE\x03\x02\x02\x02\u036A" +
    "\u02CF\x03\x02\x02\x02\u036A\u02D0\x03\x02\x02\x02\u036A\u02D1\x03\x02" +
    "\x02\x02\u036A\u02D2\x03\x02\x02\x02\u036A\u02D3\x03\x02\x02\x02\u036A" +
    "\u02D4\x03\x02\x02\x02\u036A\u02D5";
bitmarkParser._serializedATNSegment4 = "\x03\x02\x02\x02\u036A\u02D6\x03\x02\x02\x02\u036A\u02D7\x03\x02\x02\x02" +
    "\u036A\u02D8\x03\x02\x02\x02\u036A\u02D9\x03\x02\x02\x02\u036A\u02DA\x03" +
    "\x02\x02\x02\u036A\u02DB\x03\x02\x02\x02\u036A\u02DC\x03\x02\x02\x02\u036A" +
    "\u02DD\x03\x02\x02\x02\u036A\u02DE\x03\x02\x02\x02\u036A\u02DF\x03\x02" +
    "\x02\x02\u036A\u02E0\x03\x02\x02\x02\u036A\u02E1\x03\x02\x02\x02\u036A" +
    "\u02E2\x03\x02\x02\x02\u036A\u02E3\x03\x02\x02\x02\u036A\u02E4\x03\x02" +
    "\x02\x02\u036A\u02E5\x03\x02\x02\x02\u036A\u02E6\x03\x02\x02\x02\u036A" +
    "\u02E7\x03\x02\x02\x02\u036A\u02E8\x03\x02\x02\x02\u036A\u02E9\x03\x02" +
    "\x02\x02\u036A\u02EA\x03\x02\x02\x02\u036A\u02EB\x03\x02\x02\x02\u036A" +
    "\u02EC\x03\x02\x02\x02\u036A\u02ED\x03\x02\x02\x02\u036A\u02EE\x03\x02" +
    "\x02\x02\u036A\u02EF\x03\x02\x02\x02\u036A\u02F0\x03\x02\x02\x02\u036A" +
    "\u02F1\x03\x02\x02\x02\u036A\u02F2\x03\x02\x02\x02\u036A\u02F3\x03\x02" +
    "\x02\x02\u036A\u02F4\x03\x02\x02\x02\u036A\u02F5\x03\x02\x02\x02\u036A" +
    "\u02F6\x03\x02\x02\x02\u036A\u02F7\x03\x02\x02\x02\u036A\u02F8\x03\x02" +
    "\x02\x02\u036A\u02F9\x03\x02\x02\x02\u036A\u02FA\x03\x02\x02\x02\u036A" +
    "\u02FB\x03\x02\x02\x02\u036A\u02FC\x03\x02\x02\x02\u036A\u02FD\x03\x02" +
    "\x02\x02\u036A\u02FE\x03\x02\x02\x02\u036A\u02FF\x03\x02\x02\x02\u036A" +
    "\u0300\x03\x02\x02\x02\u036A\u0301\x03\x02\x02\x02\u036A\u0302\x03\x02" +
    "\x02\x02\u036A\u0303\x03\x02\x02\x02\u036A\u0304\x03\x02\x02\x02\u036A" +
    "\u0305\x03\x02\x02\x02\u036A\u0306\x03\x02\x02\x02\u036A\u0307\x03\x02" +
    "\x02\x02\u036A\u0308\x03\x02\x02\x02\u036A\u0309\x03\x02\x02\x02\u036A" +
    "\u030A\x03\x02\x02\x02\u036A\u030B\x03\x02\x02\x02\u036A\u030C\x03\x02" +
    "\x02\x02\u036A\u030D\x03\x02\x02\x02\u036A\u030E\x03\x02\x02\x02\u036A" +
    "\u030F\x03\x02\x02\x02\u036A\u0310\x03\x02\x02\x02\u036A\u0311\x03\x02" +
    "\x02\x02\u036A\u0312\x03\x02\x02\x02\u036A\u0313\x03\x02\x02\x02\u036A" +
    "\u0314\x03\x02\x02\x02\u036A\u0315\x03\x02\x02\x02\u036A\u0316\x03\x02" +
    "\x02\x02\u036A\u0317\x03\x02\x02\x02\u036A\u0318\x03\x02\x02\x02\u036A" +
    "\u0319\x03\x02\x02\x02\u036A\u031A\x03\x02\x02\x02\u036A\u031B\x03\x02" +
    "\x02\x02\u036A\u031C\x03\x02\x02\x02\u036A\u031D\x03\x02\x02\x02\u036A" +
    "\u031E\x03\x02\x02\x02\u036A\u031F\x03\x02\x02\x02\u036A\u0320\x03\x02" +
    "\x02\x02\u036A\u0321\x03\x02\x02\x02\u036A\u0322\x03\x02\x02\x02\u036A" +
    "\u0323\x03\x02\x02\x02\u036A\u0324\x03\x02\x02\x02\u036A\u0325\x03\x02" +
    "\x02\x02\u036A\u0326\x03\x02\x02\x02\u036A\u0327\x03\x02\x02\x02\u036A" +
    "\u0328\x03\x02\x02\x02\u036A\u0329\x03\x02\x02\x02\u036A\u032A\x03\x02" +
    "\x02\x02\u036A\u032B\x03\x02\x02\x02\u036A\u032C\x03\x02\x02\x02\u036A" +
    "\u032D\x03\x02\x02\x02\u036A\u032E\x03\x02\x02\x02\u036A\u032F\x03\x02" +
    "\x02\x02\u036A\u0330\x03\x02\x02\x02\u036A\u0331\x03\x02\x02\x02\u036A" +
    "\u0332\x03\x02\x02\x02\u036A\u0333\x03\x02\x02\x02\u036A\u0334\x03\x02" +
    "\x02\x02\u036A\u0335\x03\x02\x02\x02\u036A\u0336\x03\x02\x02\x02\u036A" +
    "\u0337\x03\x02\x02\x02\u036A\u0338\x03\x02\x02\x02\u036A\u0339\x03\x02" +
    "\x02\x02\u036A\u033A\x03\x02\x02\x02\u036A\u033B\x03\x02\x02\x02\u036A" +
    "\u033C\x03\x02\x02\x02\u036A\u033D\x03\x02\x02\x02\u036A\u033E\x03\x02" +
    "\x02\x02\u036A\u033F\x03\x02\x02\x02\u036A\u0340\x03\x02\x02\x02\u036A" +
    "\u0341\x03\x02\x02\x02\u036A\u0342\x03\x02\x02\x02\u036A\u0343\x03\x02" +
    "\x02\x02\u036A\u0344\x03\x02\x02\x02\u036A\u0345\x03\x02\x02\x02\u036A" +
    "\u0346\x03\x02\x02\x02\u036A\u0347\x03\x02\x02\x02\u036A\u0348\x03\x02" +
    "\x02\x02\u036A\u0349\x03\x02\x02\x02\u036A\u034A\x03\x02\x02\x02\u036A" +
    "\u034B\x03\x02\x02\x02\u036A\u034C\x03\x02\x02\x02\u036A\u034D\x03\x02" +
    "\x02\x02\u036A\u034E\x03\x02\x02\x02\u036A\u034F\x03\x02\x02\x02\u036A" +
    "\u0350\x03\x02\x02\x02\u036A\u0351\x03\x02\x02\x02\u036A\u0352\x03\x02" +
    "\x02\x02\u036A\u0353\x03\x02\x02\x02\u036A\u0354\x03\x02\x02\x02\u036A" +
    "\u0355\x03\x02\x02\x02\u036A\u0356\x03\x02\x02\x02\u036A\u0357\x03\x02" +
    "\x02\x02\u036A\u0358\x03\x02\x02\x02\u036A\u0359\x03\x02\x02\x02\u036A" +
    "\u035A\x03\x02\x02\x02\u036A\u035B\x03\x02\x02\x02\u036A\u035C\x03\x02" +
    "\x02\x02\u036A\u035D\x03\x02\x02\x02\u036A\u035E\x03\x02\x02\x02\u036A" +
    "\u035F\x03\x02\x02\x02\u036A\u0360\x03\x02\x02\x02\u036A\u0361\x03\x02" +
    "\x02\x02\u036A\u0362\x03\x02\x02\x02\u036A\u0363\x03\x02\x02\x02\u036A" +
    "\u0364\x03\x02\x02\x02\u036A\u0365\x03\x02\x02\x02\u036A\u0366\x03\x02" +
    "\x02\x02\u036A\u0367\x03\x02\x02\x02\u036A\u0368\x03\x02\x02\x02\u036A" +
    "\u0369\x03\x02\x02\x02\u036B\x07\x03\x02\x02\x02\u036C\u036D\x07\x05\x02" +
    "\x02\u036D\u036E\x05\u01EE\xF8\x02\u036E\u0372\x07\xF3\x02\x02\u036F\u0371" +
    "\x07\u010C\x02\x02\u0370\u036F\x03\x02\x02\x02\u0371\u0374\x03\x02\x02" +
    "\x02\u0372\u0370\x03\x02\x02\x02\u0372\u0373\x03\x02\x02\x02\u0373\u037E" +
    "\x03\x02\x02\x02\u0374\u0372\x03\x02\x02\x02\u0375\u0379\x05T+\x02\u0376" +
    "\u0378\x07\u010C\x02\x02\u0377\u0376\x03\x02\x02\x02\u0378\u037B\x03\x02" +
    "\x02\x02\u0379\u0377\x03\x02\x02\x02\u0379\u037A\x03\x02\x02\x02\u037A" +
    "\u037D\x03\x02\x02\x02\u037B\u0379\x03\x02\x02\x02\u037C\u0375\x03\x02" +
    "\x02\x02\u037D\u0380\x03\x02\x02\x02\u037E\u037C\x03\x02\x02\x02\u037E" +
    "\u037F\x03\x02\x02\x02\u037F\t\x03\x02\x02\x02\u0380\u037E\x03\x02\x02" +
    "\x02\u0381\u0382\x07\x06\x02\x02\u0382\u0383\x05\u01EE\xF8\x02\u0383\u0387" +
    "\x07\xF3\x02\x02\u0384\u0386\x07\u010C\x02\x02\u0385\u0384\x03\x02\x02" +
    "\x02\u0386\u0389\x03\x02\x02\x02\u0387\u0385\x03\x02\x02\x02\u0387\u0388" +
    "\x03\x02\x02\x02\u0388\u038D\x03\x02\x02\x02\u0389\u0387\x03\x02\x02\x02" +
    "\u038A\u038B\x05\u025E\u0130\x02\u038B\u038C\x07\u010C\x02\x02\u038C\u038E" +
    "\x03\x02\x02\x02\u038D\u038A\x03\x02\x02\x02\u038D\u038E\x03\x02\x02\x02" +
    "\u038E\u038F\x03\x02\x02\x02\u038F\u0399\x05h5\x02\u0390\u0392\x07\u010C" +
    "\x02\x02\u0391\u0390\x03\x02\x02\x02\u0392\u0395\x03\x02\x02\x02\u0393" +
    "\u0391\x03\x02\x02\x02\u0393\u0394\x03\x02\x02\x02\u0394\u0396\x03\x02" +
    "\x02\x02\u0395\u0393\x03\x02\x02\x02\u0396\u0398\x05h5\x02\u0397\u0393" +
    "\x03\x02\x02\x02\u0398\u039B\x03\x02\x02\x02\u0399\u0397\x03\x02\x02\x02" +
    "\u0399\u039A\x03\x02\x02\x02\u039A\v\x03\x02\x02\x02\u039B\u0399\x03\x02" +
    "\x02\x02\u039C\u039D\x076\x02\x02\u039D\u039E\x05\u01EE\xF8\x02\u039E" +
    "\u03A2\x07\xF3\x02\x02\u039F\u03A1\x07\u010C\x02\x02\u03A0\u039F\x03\x02" +
    "\x02\x02\u03A1\u03A4\x03\x02\x02\x02\u03A2\u03A0\x03\x02\x02\x02\u03A2" +
    "\u03A3\x03\x02\x02\x02\u03A3\u03AC\x03\x02\x02\x02\u03A4\u03A2\x03\x02" +
    "\x02\x02\u03A5\u03A9\x05T+\x02\u03A6\u03A8\x07\u010C\x02\x02\u03A7\u03A6" +
    "\x03\x02\x02\x02\u03A8\u03AB\x03\x02\x02\x02\u03A9\u03A7\x03\x02\x02\x02" +
    "\u03A9\u03AA\x03\x02\x02\x02\u03AA\u03AD\x03\x02\x02\x02\u03AB\u03A9\x03" +
    "\x02\x02\x02\u03AC\u03A5\x03\x02\x02\x02\u03AD\u03AE\x03\x02\x02\x02\u03AE" +
    "\u03AC\x03\x02\x02\x02\u03AE\u03AF\x03\x02\x02\x02\u03AF\r\x03\x02\x02" +
    "\x02\u03B0\u03B1\x077\x02\x02\u03B1\u03B2\x05\u01EE\xF8\x02\u03B2\u03B6" +
    "\x07\xF3\x02\x02\u03B3\u03B5\x07\u010C\x02\x02\u03B4\u03B3\x03\x02\x02" +
    "\x02\u03B5\u03B8\x03\x02\x02\x02\u03B6\u03B4\x03\x02\x02\x02\u03B6\u03B7" +
    "\x03\x02\x02\x02\u03B7\u03C0\x03\x02\x02\x02\u03B8\u03B6\x03\x02\x02\x02" +
    "\u03B9\u03BD\x05T+\x02\u03BA\u03BC\x07\u010C\x02\x02\u03BB\u03BA\x03\x02" +
    "\x02\x02\u03BC\u03BF\x03\x02\x02\x02\u03BD\u03BB\x03\x02\x02\x02\u03BD" +
    "\u03BE\x03\x02\x02\x02\u03BE\u03C1\x03\x02\x02\x02\u03BF\u03BD\x03\x02" +
    "\x02\x02\u03C0\u03B9\x03\x02\x02\x02\u03C1\u03C2\x03\x02\x02\x02\u03C2" +
    "\u03C0\x03\x02\x02\x02\u03C2\u03C3\x03\x02\x02\x02\u03C3\x0F\x03\x02\x02" +
    "\x02\u03C4\u03C5\x078\x02\x02\u03C5\u03C6\x05\u01EE\xF8\x02\u03C6\u03CA" +
    "\x07\xF3\x02\x02\u03C7\u03C9\x07\u010C\x02\x02\u03C8\u03C7\x03\x02\x02" +
    "\x02\u03C9\u03CC\x03\x02\x02\x02\u03CA\u03C8\x03\x02\x02\x02\u03CA\u03CB" +
    "\x03\x02\x02\x02\u03CB\u03D4\x03\x02\x02\x02\u03CC\u03CA\x03\x02\x02\x02" +
    "\u03CD\u03D1\x05T+\x02\u03CE\u03D0\x07\u010C\x02\x02\u03CF\u03CE\x03\x02" +
    "\x02\x02\u03D0\u03D3\x03\x02\x02\x02\u03D1\u03CF\x03\x02\x02\x02\u03D1" +
    "\u03D2\x03\x02\x02\x02\u03D2\u03D5\x03\x02\x02\x02\u03D3\u03D1\x03\x02" +
    "\x02\x02\u03D4\u03CD\x03\x02\x02\x02\u03D5\u03D6\x03\x02\x02\x02\u03D6" +
    "\u03D4\x03\x02\x02\x02\u03D6\u03D7\x03\x02\x02\x02\u03D7\x11\x03\x02\x02" +
    "\x02\u03D8\u03D9\x079\x02\x02\u03D9\u03DA\x05\u01EE\xF8\x02\u03DA\u03DE" +
    "\x07\xF3\x02\x02\u03DB\u03DD\x07\u010C\x02\x02\u03DC\u03DB\x03\x02\x02" +
    "\x02\u03DD\u03E0\x03\x02\x02\x02\u03DE\u03DC\x03\x02\x02\x02\u03DE\u03DF" +
    "\x03\x02\x02\x02\u03DF\u03E8\x03\x02\x02\x02\u03E0\u03DE\x03\x02\x02\x02" +
    "\u03E1\u03E5\x05T+\x02\u03E2\u03E4\x07\u010C\x02\x02\u03E3\u03E2\x03\x02" +
    "\x02\x02\u03E4\u03E7\x03\x02\x02\x02\u03E5\u03E3\x03\x02\x02\x02\u03E5" +
    "\u03E6\x03\x02\x02\x02\u03E6\u03E9\x03\x02\x02\x02\u03E7\u03E5\x03\x02" +
    "\x02\x02\u03E8\u03E1\x03\x02\x02\x02\u03E9\u03EA\x03\x02\x02\x02\u03EA" +
    "\u03E8\x03\x02\x02\x02\u03EA\u03EB\x03\x02\x02\x02\u03EB\x13\x03\x02\x02" +
    "\x02\u03EC\u03EE\x07\x07\x02\x02\u03ED\u03EF\x05\u0262\u0132\x02\u03EE" +
    "\u03ED\x03\x02\x02\x02\u03EE\u03EF\x03\x02\x02\x02\u03EF\u03F0\x03\x02" +
    "\x02\x02\u03F0\u03F1\x07\xF3\x02\x02\u03F1\u03F5\x07\u010C\x02\x02\u03F2" +
    "\u03F3\x05\u0258\u012D\x02\u03F3\u03F4\x07\u010C\x02\x02\u03F4\u03F6\x03" +
    "\x02\x02\x02\u03F5\u03F2\x03\x02\x02\x02\u03F5\u03F6\x03\x02\x02\x02\u03F6" +
    "\x15\x03\x02\x02\x02\u03F7\u03F8\x07\b\x02\x02\u03F8\u03FC\x07\xF3\x02" +
    "\x02\u03F9\u03FB\x07\u010C\x02\x02\u03FA\u03F9\x03\x02\x02\x02\u03FB\u03FE" +
    "\x03\x02\x02\x02\u03FC\u03FA\x03\x02\x02\x02\u03FC\u03FD\x03\x02\x02\x02" +
    "\u03FD\u03FF\x03\x02\x02\x02\u03FE\u03FC\x03\x02\x02\x02\u03FF\u0400\x05" +
    "\x1C\x0F\x02\u0400\x17\x03\x02\x02\x02\u0401\u0403\t\x02\x02\x02\u0402" +
    "\u0404\t\x03\x02\x02\u0403\u0402\x03\x02\x02\x02\u0403\u0404\x03\x02\x02" +
    "\x02\u0404\u0405\x03\x02\x02\x02\u0405\u040F\x07\xF3\x02\x02\u0406\u0408" +
    "\x07\u010C\x02\x02\u0407\u0406\x03\x02\x02\x02\u0408\u040B\x03\x02\x02" +
    "\x02\u0409\u0407\x03\x02\x02\x02\u0409\u040A\x03\x02\x02\x02\u040A\u040C" +
    "\x03\x02\x02\x02\u040B\u0409\x03\x02\x02\x02\u040C\u040E\x05T+\x02\u040D" +
    "\u0409\x03\x02\x02\x02\u040E\u0411\x03\x02\x02\x02\u040F\u040D\x03\x02" +
    "\x02\x02\u040F\u0410\x03\x02\x02\x02\u0410\x19\x03\x02\x02\x02\u0411\u040F" +
    "\x03\x02\x02\x02\u0412\u0413\x07\v\x02\x02\u0413\u0414\x07\xF3\x02\x02" +
    "\u0414\u0415\x05\u023C\u011F\x02\u0415\x1B\x03\x02\x02\x02\u0416\u0418" +
    "\x07\u010C\x02\x02\u0417\u0416\x03\x02\x02\x02\u0417\u0418\x03\x02\x02" +
    "\x02\u0418\u0420\x03\x02\x02\x02\u0419\u0421\x05\u024E\u0128\x02\u041A" +
    "\u0421\x05\u0258\u012D\x02\u041B\u0421\x05\u0238\u011D\x02\u041C\u0421" +
    "\x05\u024A\u0126\x02\u041D\u0421\x05\u023C\u011F\x02\u041E\u0421\x05\u025E" +
    "\u0130\x02\u041F\u0421\x05\u0244\u0123\x02\u0420\u0419\x03\x02\x02\x02" +
    "\u0420\u041A\x03\x02\x02\x02\u0420\u041B\x03\x02\x02\x02\u0420\u041C\x03" +
    "\x02\x02\x02\u0420\u041D\x03\x02\x02\x02\u0420\u041E\x03\x02\x02\x02\u0420" +
    "\u041F\x03\x02\x02\x02\u0421\u0423\x03\x02\x02\x02\u0422\u0417\x03\x02" +
    "\x02\x02\u0423\u0426\x03\x02\x02\x02\u0424\u0422\x03\x02\x02\x02\u0424" +
    "\u0425\x03\x02\x02\x02\u0425\x1D\x03\x02\x02\x02\u0426\u0424\x03\x02\x02" +
    "\x02\u0427\u0428\x07\f\x02\x02\u0428\u0432\x07\xF3\x02\x02\u0429\u042A" +
    "\x07\u010C\x02\x02\u042A\u042D\t\x04\x02\x02\u042B\u042E\x05\u0262\u0132" +
    "\x02\u042C\u042E\x07\xF4\x02\x02\u042D\u042B\x03\x02\x02\x02\u042D\u042C" +
    "\x03\x02\x02\x02\u042E\u042F\x03\x02\x02\x02\u042F\u042D\x03\x02\x02\x02" +
    "\u042F\u0430\x03\x02\x02\x02\u0430\u0431\x03\x02\x02\x02\u0431\u0433\x07" +
    "\xF3\x02\x02\u0432\u0429\x03\x02\x02\x02\u0433\u0434\x03\x02\x02\x02\u0434" +
    "\u0432\x03\x02\x02\x02\u0434\u0435\x03\x02\x02\x02\u0435\u0436\x03\x02" +
    "\x02\x02\u0436\u043A\x07\u010C\x02\x02\u0437\u0439\x05\u0260\u0131\x02" +
    "\u0438\u0437\x03\x02\x02\x02\u0439\u043C\x03\x02\x02\x02\u043A\u0438\x03" +
    "\x02\x02\x02\u043A\u043B\x03\x02\x02\x02\u043B\x1F\x03\x02\x02\x02\u043C" +
    "\u043A\x03\x02\x02\x02\u043D\u043E\x07\r\x02\x02\u043E\u0448\x07\xF3\x02" +
    "\x02\u043F\u0440\x07\u010C\x02\x02\u0440\u0443\t\x04\x02\x02\u0441\u0444" +
    "\x05\u0262\u0132\x02\u0442\u0444\x07\xF4\x02\x02\u0443\u0441\x03\x02\x02" +
    "\x02\u0443\u0442\x03\x02\x02\x02\u0444\u0445\x03\x02\x02\x02\u0445\u0443" +
    "\x03\x02\x02\x02\u0445\u0446\x03\x02\x02\x02\u0446\u0447\x03\x02\x02\x02" +
    "\u0447\u0449\x07\xF3\x02\x02\u0448\u043F\x03\x02\x02\x02\u0449\u044A\x03" +
    "\x02\x02\x02\u044A\u0448\x03\x02\x02\x02\u044A\u044B\x03\x02\x02\x02\u044B" +
    "\u044C\x03\x02\x02\x02\u044C\u0450\x07\u010C\x02\x02\u044D\u044F\x05\u0260" +
    "\u0131\x02\u044E\u044D\x03\x02\x02\x02\u044F\u0452\x03\x02\x02\x02\u0450" +
    "\u044E\x03\x02\x02\x02\u0450\u0451\x03\x02\x02\x02\u0451!\x03\x02\x02" +
    "\x02\u0452\u0450\x03\x02\x02\x02\u0453\u0454\x07:\x02\x02\u0454\u0455" +
    "\x05\u01EE\xF8\x02\u0455\u0459\x07\xF3\x02\x02\u0456\u0458\x07\u010C\x02" +
    "\x02\u0457\u0456\x03\x02\x02\x02\u0458\u045B\x03\x02\x02\x02\u0459\u0457" +
    "\x03\x02\x02\x02\u0459\u045A\x03\x02\x02\x02\u045A\u0463\x03\x02\x02\x02" +
    "\u045B\u0459\x03\x02\x02\x02\u045C\u0460\x05T+\x02\u045D\u045F\x07\u010C" +
    "\x02\x02\u045E\u045D\x03\x02\x02\x02\u045F\u0462\x03\x02\x02\x02\u0460" +
    "\u045E\x03\x02\x02\x02\u0460\u0461\x03\x02\x02\x02\u0461\u0464\x03\x02" +
    "\x02\x02\u0462\u0460\x03\x02\x02\x02\u0463\u045C\x03\x02\x02\x02\u0464" +
    "\u0465\x03\x02\x02\x02\u0465\u0463\x03\x02\x02\x02\u0465\u0466\x03\x02" +
    "\x02\x02\u0466#\x03\x02\x02\x02\u0467\u0468\x07;\x02\x02\u0468\u0469\x05" +
    "\u01EE\xF8\x02\u0469\u046D\x07\xF3\x02\x02\u046A\u046C\x07\u010C\x02\x02" +
    "\u046B\u046A\x03\x02\x02\x02\u046C\u046F\x03\x02\x02\x02\u046D\u046B\x03" +
    "\x02\x02\x02\u046D\u046E\x03\x02\x02\x02\u046E\u0477\x03\x02\x02\x02\u046F" +
    "\u046D\x03\x02\x02\x02\u0470\u0474\x05T+\x02\u0471\u0473\x07\u010C\x02" +
    "\x02\u0472\u0471\x03\x02\x02\x02\u0473\u0476\x03\x02\x02\x02\u0474\u0472" +
    "\x03\x02\x02\x02\u0474\u0475\x03\x02\x02\x02\u0475\u0478\x03\x02\x02\x02" +
    "\u0476\u0474\x03\x02\x02\x02\u0477\u0470\x03\x02\x02\x02\u0478\u0479\x03" +
    "\x02\x02\x02\u0479\u0477\x03\x02\x02\x02\u0479\u047A\x03\x02\x02\x02\u047A" +
    "%\x03\x02\x02\x02\u047B\u047C\x07<\x02\x02\u047C\u047D\x05\u01EE\xF8\x02" +
    "\u047D\u0481\x07\xF3\x02\x02\u047E\u0480\x07\u010C\x02\x02\u047F\u047E" +
    "\x03\x02\x02\x02\u0480\u0483\x03\x02\x02\x02\u0481\u047F\x03\x02\x02\x02" +
    "\u0481\u0482\x03\x02\x02\x02\u0482\u048B\x03\x02\x02\x02\u0483\u0481\x03" +
    "\x02\x02\x02\u0484\u0488\x05T+\x02\u0485\u0487\x07\u010C\x02\x02\u0486" +
    "\u0485\x03\x02\x02\x02\u0487\u048A\x03\x02\x02\x02\u0488\u0486\x03\x02" +
    "\x02\x02\u0488\u0489\x03\x02\x02\x02\u0489\u048C\x03\x02\x02\x02\u048A" +
    "\u0488\x03\x02\x02\x02\u048B\u0484\x03\x02\x02\x02\u048C\u048D\x03\x02" +
    "\x02\x02\u048D\u048B\x03\x02\x02\x02\u048D\u048E\x03\x02\x02\x02\u048E" +
    "\'\x03\x02\x02\x02\u048F\u0490\x07=\x02\x02\u0490\u0491\x05\u01EE\xF8" +
    "\x02\u0491\u0495\x07\xF3\x02\x02\u0492\u0494\x07\u010C\x02\x02\u0493\u0492" +
    "\x03\x02\x02\x02\u0494\u0497\x03\x02\x02\x02\u0495\u0493\x03\x02\x02\x02" +
    "\u0495\u0496\x03\x02\x02\x02\u0496\u049F\x03\x02\x02\x02\u0497\u0495\x03" +
    "\x02\x02\x02\u0498\u049C\x05T+\x02\u0499\u049B\x07\u010C\x02\x02\u049A" +
    "\u0499\x03\x02\x02\x02\u049B\u049E\x03\x02\x02\x02\u049C\u049A\x03\x02" +
    "\x02\x02\u049C\u049D\x03\x02\x02\x02\u049D\u04A0\x03\x02\x02\x02\u049E" +
    "\u049C\x03\x02\x02\x02\u049F\u0498\x03\x02\x02\x02\u04A0\u04A1\x03\x02" +
    "\x02\x02\u04A1\u049F\x03\x02\x02\x02\u04A1\u04A2\x03\x02\x02\x02\u04A2" +
    ")\x03\x02\x02\x02\u04A3\u04A4\x07>\x02\x02\u04A4\u04A5\x05\u01EE\xF8\x02" +
    "\u04A5\u04A9\x07\xF3\x02\x02\u04A6\u04A8\x07\u010C\x02\x02\u04A7\u04A6" +
    "\x03\x02\x02\x02\u04A8\u04AB\x03\x02\x02\x02\u04A9\u04A7\x03\x02\x02\x02" +
    "\u04A9\u04AA\x03\x02\x02\x02\u04AA\u04B3\x03\x02\x02\x02\u04AB\u04A9\x03" +
    "\x02\x02\x02\u04AC\u04B0\x05T+\x02\u04AD\u04AF\x07\u010C\x02\x02\u04AE" +
    "\u04AD\x03\x02\x02\x02\u04AF\u04B2\x03\x02\x02\x02\u04B0\u04AE\x03\x02" +
    "\x02\x02\u04B0\u04B1\x03\x02\x02\x02\u04B1\u04B4\x03\x02\x02\x02\u04B2" +
    "\u04B0\x03\x02\x02\x02\u04B3\u04AC\x03\x02\x02\x02\u04B4\u04B5\x03\x02" +
    "\x02\x02\u04B5\u04B3\x03\x02\x02\x02\u04B5\u04B6\x03\x02\x02\x02\u04B6" +
    "+\x03\x02\x02\x02\u04B7\u04B8\x07?\x02\x02\u04B8\u04B9\x05\u01EE\xF8\x02" +
    "\u04B9\u04BD\x07\xF3\x02\x02\u04BA\u04BC\x07\u010C\x02\x02\u04BB\u04BA" +
    "\x03\x02\x02\x02\u04BC\u04BF\x03\x02\x02\x02\u04BD\u04BB\x03\x02\x02\x02" +
    "\u04BD\u04BE\x03\x02\x02\x02\u04BE\u04C7\x03\x02\x02\x02\u04BF\u04BD\x03" +
    "\x02\x02\x02\u04C0\u04C4\x05T+\x02\u04C1\u04C3\x07\u010C\x02\x02\u04C2" +
    "\u04C1\x03\x02\x02\x02\u04C3\u04C6\x03\x02\x02\x02\u04C4\u04C2\x03\x02" +
    "\x02\x02\u04C4\u04C5\x03\x02\x02\x02\u04C5\u04C8\x03\x02\x02\x02\u04C6" +
    "\u04C4\x03\x02\x02\x02\u04C7\u04C0\x03\x02\x02\x02\u04C8\u04C9\x03\x02" +
    "\x02\x02\u04C9\u04C7\x03\x02\x02\x02\u04C9\u04CA\x03\x02\x02\x02\u04CA" +
    "-\x03\x02\x02\x02\u04CB\u04CC\x07@\x02\x02\u04CC\u04CD\x05\u01EE\xF8\x02" +
    "\u04CD\u04D1\x07\xF3\x02\x02\u04CE\u04D0\x07\u010C\x02\x02\u04CF\u04CE" +
    "\x03\x02\x02\x02\u04D0\u04D3\x03\x02\x02\x02\u04D1\u04CF\x03\x02\x02\x02" +
    "\u04D1\u04D2\x03\x02\x02\x02\u04D2\u04DB\x03\x02\x02\x02\u04D3\u04D1\x03" +
    "\x02\x02\x02\u04D4\u04D8\x05T+\x02\u04D5\u04D7\x07\u010C\x02\x02\u04D6" +
    "\u04D5\x03\x02\x02\x02\u04D7\u04DA\x03\x02\x02\x02\u04D8\u04D6\x03\x02" +
    "\x02\x02\u04D8\u04D9\x03\x02\x02\x02\u04D9\u04DC\x03\x02\x02\x02\u04DA" +
    "\u04D8\x03\x02\x02\x02\u04DB\u04D4\x03\x02\x02\x02\u04DC\u04DD\x03\x02" +
    "\x02\x02\u04DD\u04DB\x03\x02\x02\x02\u04DD\u04DE\x03\x02\x02\x02\u04DE" +
    "/\x03\x02\x02\x02\u04DF\u04E0\x07A\x02\x02\u04E0\u04E1\x05\u01EE\xF8\x02" +
    "\u04E1\u04E5\x07\xF3\x02\x02\u04E2\u04E4\x07\u010C\x02\x02\u04E3\u04E2" +
    "\x03\x02\x02\x02\u04E4\u04E7\x03\x02\x02\x02\u04E5\u04E3\x03\x02\x02\x02" +
    "\u04E5\u04E6\x03\x02\x02\x02\u04E6\u04EF\x03\x02\x02\x02\u04E7\u04E5\x03" +
    "\x02\x02\x02\u04E8\u04EC\x05T+\x02\u04E9\u04EB\x07\u010C\x02\x02\u04EA" +
    "\u04E9\x03\x02\x02\x02\u04EB\u04EE\x03\x02\x02\x02\u04EC\u04EA\x03\x02" +
    "\x02\x02\u04EC\u04ED\x03\x02\x02\x02\u04ED\u04F0\x03\x02\x02\x02\u04EE" +
    "\u04EC\x03\x02\x02\x02\u04EF\u04E8\x03\x02\x02\x02\u04F0\u04F1\x03\x02" +
    "\x02\x02\u04F1\u04EF\x03\x02\x02\x02\u04F1\u04F2\x03\x02\x02\x02\u04F2" +
    "1\x03\x02\x02\x02\u04F3\u04F4\x07B\x02\x02\u04F4\u04F5\x05\u01EE\xF8\x02" +
    "\u04F5\u04F9\x07\xF3\x02\x02\u04F6\u04F8\x07\u010C\x02\x02\u04F7\u04F6" +
    "\x03\x02\x02\x02\u04F8\u04FB\x03\x02\x02\x02\u04F9\u04F7\x03\x02\x02\x02" +
    "\u04F9\u04FA\x03\x02\x02\x02\u04FA\u0503\x03\x02\x02\x02\u04FB\u04F9\x03" +
    "\x02\x02\x02\u04FC\u0500\x05T+\x02\u04FD\u04FF\x07\u010C\x02\x02\u04FE" +
    "\u04FD\x03\x02\x02\x02\u04FF\u0502\x03\x02\x02\x02\u0500\u04FE\x03\x02" +
    "\x02\x02\u0500\u0501\x03\x02\x02\x02\u0501\u0504\x03\x02\x02\x02\u0502" +
    "\u0500\x03\x02\x02\x02\u0503\u04FC\x03\x02\x02\x02\u0504\u0505\x03\x02" +
    "\x02\x02\u0505\u0503\x03\x02\x02\x02\u0505\u0506\x03\x02\x02\x02\u0506" +
    "3\x03\x02\x02\x02\u0507\u0508\x07C\x02\x02\u0508\u0509\x05\u01EE\xF8\x02" +
    "\u0509\u050D\x07\xF3\x02\x02\u050A\u050C\x07\u010C\x02\x02\u050B\u050A" +
    "\x03\x02\x02\x02\u050C\u050F\x03\x02\x02\x02\u050D\u050B\x03\x02\x02\x02" +
    "\u050D\u050E\x03\x02\x02\x02\u050E\u0517\x03\x02\x02\x02\u050F\u050D\x03" +
    "\x02\x02\x02\u0510\u0514\x05T+\x02\u0511\u0513\x07\u010C\x02\x02\u0512" +
    "\u0511\x03\x02\x02\x02\u0513\u0516\x03\x02\x02\x02\u0514\u0512\x03\x02" +
    "\x02\x02\u0514\u0515\x03\x02\x02\x02\u0515\u0518\x03\x02\x02\x02\u0516" +
    "\u0514\x03\x02\x02\x02\u0517\u0510\x03\x02\x02\x02\u0518\u0519\x03\x02" +
    "\x02\x02\u0519\u0517\x03\x02\x02\x02\u0519\u051A\x03\x02\x02\x02\u051A" +
    "5\x03\x02\x02\x02\u051B\u051C\x07D\x02\x02\u051C\u051D\x05\u01EE\xF8\x02" +
    "\u051D\u0521\x07\xF3\x02\x02\u051E\u0520\x07\u010C\x02\x02\u051F\u051E" +
    "\x03\x02\x02\x02\u0520\u0523\x03\x02\x02\x02\u0521\u051F\x03\x02\x02\x02" +
    "\u0521\u0522\x03\x02\x02\x02\u0522\u052B\x03\x02\x02\x02\u0523\u0521\x03" +
    "\x02\x02\x02\u0524\u0528\x05T+\x02\u0525\u0527\x07\u010C\x02\x02\u0526" +
    "\u0525\x03\x02\x02\x02\u0527\u052A\x03\x02\x02\x02\u0528\u0526\x03\x02" +
    "\x02\x02\u0528\u0529\x03\x02\x02\x02\u0529\u052C\x03\x02\x02\x02\u052A" +
    "\u0528\x03\x02\x02\x02\u052B\u0524\x03\x02\x02\x02\u052C\u052D\x03\x02" +
    "\x02\x02\u052D\u052B\x03\x02\x02\x02\u052D\u052E\x03\x02\x02\x02\u052E" +
    "7\x03\x02\x02\x02\u052F\u0530\x07E\x02\x02\u0530\u0531\x05\u01EE\xF8\x02" +
    "\u0531\u0535\x07\xF3\x02\x02\u0532\u0534\x07\u010C\x02\x02\u0533\u0532" +
    "\x03\x02\x02\x02\u0534\u0537\x03\x02\x02\x02\u0535\u0533\x03\x02\x02\x02" +
    "\u0535\u0536\x03\x02\x02\x02\u0536\u053F\x03\x02\x02\x02\u0537\u0535\x03" +
    "\x02\x02\x02\u0538\u053C\x05T+\x02\u0539\u053B\x07\u010C\x02\x02\u053A" +
    "\u0539\x03\x02\x02\x02\u053B\u053E\x03\x02\x02\x02\u053C\u053A\x03\x02" +
    "\x02\x02\u053C\u053D\x03\x02\x02\x02\u053D\u0540\x03\x02\x02\x02\u053E" +
    "\u053C\x03\x02\x02\x02\u053F\u0538\x03\x02\x02\x02\u0540\u0541\x03\x02" +
    "\x02\x02\u0541\u053F\x03\x02\x02\x02\u0541\u0542\x03\x02\x02\x02\u0542" +
    "9\x03\x02\x02\x02\u0543\u0544\x07F\x02\x02\u0544\u0545\x05\u01EE\xF8\x02" +
    "\u0545\u0549\x07\xF3\x02\x02\u0546\u0548\x07\u010C\x02\x02\u0547\u0546" +
    "\x03\x02\x02\x02\u0548\u054B\x03\x02\x02\x02\u0549\u0547\x03\x02\x02\x02" +
    "\u0549\u054A\x03\x02\x02\x02\u054A\u0553\x03\x02\x02\x02\u054B\u0549\x03" +
    "\x02\x02\x02\u054C\u0550\x05T+\x02\u054D\u054F\x07\u010C\x02\x02\u054E" +
    "\u054D\x03\x02\x02\x02\u054F\u0552\x03\x02\x02\x02\u0550\u054E\x03\x02" +
    "\x02\x02\u0550\u0551\x03\x02\x02\x02\u0551\u0554\x03\x02\x02\x02\u0552" +
    "\u0550\x03\x02\x02\x02\u0553\u054C\x03\x02\x02\x02\u0554\u0555\x03\x02" +
    "\x02\x02\u0555\u0553\x03\x02\x02\x02\u0555\u0556\x03\x02\x02\x02\u0556" +
    ";\x03\x02\x02\x02\u0557\u0558\x07G\x02\x02\u0558\u0559\x05\u01EE\xF8\x02" +
    "\u0559\u055D\x07\xF3\x02\x02\u055A\u055C\x07\u010C\x02\x02\u055B\u055A" +
    "\x03\x02\x02\x02\u055C\u055F\x03\x02\x02\x02\u055D\u055B\x03\x02\x02\x02" +
    "\u055D\u055E\x03\x02\x02\x02\u055E\u0567\x03\x02\x02\x02\u055F\u055D\x03" +
    "\x02\x02\x02\u0560\u0564\x05T+\x02\u0561\u0563\x07\u010C\x02\x02\u0562" +
    "\u0561\x03\x02\x02\x02\u0563\u0566\x03\x02\x02\x02\u0564\u0562\x03\x02" +
    "\x02\x02\u0564\u0565\x03\x02\x02\x02\u0565\u0568\x03\x02\x02\x02\u0566" +
    "\u0564\x03\x02\x02\x02\u0567\u0560\x03\x02\x02\x02\u0568\u0569\x03\x02" +
    "\x02\x02\u0569\u0567\x03\x02\x02\x02\u0569\u056A\x03\x02\x02\x02\u056A" +
    "=\x03\x02\x02\x02\u056B\u056C\x07H\x02\x02\u056C\u056D\x05\u01EE\xF8\x02" +
    "\u056D\u0571\x07\xF3\x02\x02\u056E\u0570\x07\u010C\x02\x02\u056F\u056E" +
    "\x03\x02\x02\x02\u0570\u0573\x03\x02\x02\x02\u0571\u056F\x03\x02\x02\x02" +
    "\u0571\u0572\x03\x02\x02\x02\u0572\u057B\x03\x02\x02\x02\u0573\u0571\x03" +
    "\x02\x02\x02\u0574\u0578\x05T+\x02\u0575\u0577\x07\u010C\x02\x02\u0576" +
    "\u0575\x03\x02\x02\x02\u0577\u057A\x03\x02\x02\x02\u0578\u0576\x03\x02" +
    "\x02\x02\u0578\u0579\x03\x02\x02\x02\u0579\u057C\x03\x02\x02\x02\u057A" +
    "\u0578\x03\x02\x02\x02\u057B\u0574\x03\x02\x02\x02\u057C\u057D\x03\x02" +
    "\x02\x02\u057D\u057B\x03\x02\x02\x02\u057D\u057E\x03\x02\x02\x02\u057E" +
    "?\x03\x02\x02\x02\u057F\u0580\x07I\x02\x02\u0580\u0581\x05\u01EE\xF8\x02" +
    "\u0581\u0585\x07\xF3\x02\x02\u0582\u0584\x07\u010C\x02\x02\u0583\u0582" +
    "\x03\x02\x02\x02\u0584\u0587\x03\x02\x02\x02\u0585\u0583\x03\x02\x02\x02" +
    "\u0585\u0586\x03\x02\x02\x02\u0586\u058F\x03\x02\x02\x02\u0587\u0585\x03" +
    "\x02\x02\x02\u0588\u058C\x05T+\x02\u0589\u058B\x07\u010C\x02\x02\u058A" +
    "\u0589\x03\x02\x02\x02\u058B\u058E\x03\x02\x02\x02\u058C\u058A\x03\x02" +
    "\x02\x02\u058C\u058D\x03\x02\x02\x02\u058D\u0590\x03\x02\x02\x02\u058E" +
    "\u058C\x03\x02\x02\x02\u058F\u0588\x03\x02\x02\x02\u0590\u0591\x03\x02" +
    "\x02\x02\u0591\u058F\x03\x02\x02\x02\u0591\u0592\x03\x02\x02\x02\u0592" +
    "A\x03\x02\x02\x02\u0593\u0594\x07\x87\x02\x02\u0594\u0595\x05\u01EE\xF8" +
    "\x02\u0595\u0599\x07\xF3\x02\x02\u0596\u0598\x07\u010C\x02\x02\u0597\u0596" +
    "\x03\x02\x02\x02\u0598\u059B\x03\x02\x02\x02\u0599\u0597\x03\x02\x02\x02" +
    "\u0599\u059A\x03\x02\x02\x02\u059A\u05A5\x03\x02\x02\x02\u059B\u0599\x03" +
    "\x02\x02\x02\u059C\u05A0\x05T+\x02\u059D\u059F\x07\u010C\x02\x02\u059E" +
    "\u059D\x03\x02\x02\x02\u059F\u05A2\x03\x02\x02\x02\u05A0\u059E\x03\x02" +
    "\x02\x02\u05A0\u05A1\x03\x02\x02\x02\u05A1\u05A4\x03\x02\x02\x02\u05A2" +
    "\u05A0\x03\x02\x02\x02\u05A3\u059C\x03\x02\x02\x02\u05A4\u05A7\x03\x02" +
    "\x02\x02\u05A5\u05A3\x03\x02\x02\x02\u05A5\u05A6\x03\x02\x02\x02\u05A6" +
    "\u05A9\x03\x02\x02\x02\u05A7\u05A5\x03\x02\x02\x02\u05A8\u05AA\x05J&\x02" +
    "\u05A9\u05A8\x03\x02\x02\x02\u05AA\u05AB\x03\x02\x02\x02\u05AB\u05A9\x03" +
    "\x02\x02\x02\u05AB\u05AC\x03\x02\x02\x02\u05AC\u05AD\x03\x02\x02\x02\u05AD" +
    "\u05AF\x07\xFE\x02\x02\u05AE\u05B0\x05R*\x02\u05AF\u05AE\x03\x02\x02\x02" +
    "\u05AF\u05B0\x03\x02\x02\x02\u05B0\u05B4\x03\x02\x02\x02\u05B1\u05B3\x07" +
    "\u010C\x02\x02\u05B2\u05B1\x03\x02\x02\x02\u05B3\u05B6\x03\x02\x02\x02" +
    "\u05B4\u05B2\x03\x02\x02\x02\u05B4\u05B5\x03\x02\x02\x02\u05B5C\x03\x02" +
    "\x02\x02\u05B6\u05B4\x03\x02\x02\x02\u05B7\u05B8\x07\x88\x02\x02\u05B8" +
    "\u05B9\x05\u01EE";
bitmarkParser._serializedATNSegment5 = "\xF8\x02\u05B9\u05BD\x07\xF3\x02\x02\u05BA\u05BC\x07\u010C\x02\x02\u05BB" +
    "\u05BA\x03\x02\x02\x02\u05BC\u05BF\x03\x02\x02\x02\u05BD\u05BB\x03\x02" +
    "\x02\x02\u05BD\u05BE\x03\x02\x02\x02\u05BE\u05C9\x03\x02\x02\x02\u05BF" +
    "\u05BD\x03\x02\x02\x02\u05C0\u05C4\x05T+\x02\u05C1\u05C3\x07\u010C\x02" +
    "\x02\u05C2\u05C1\x03\x02\x02\x02\u05C3\u05C6\x03\x02\x02\x02\u05C4\u05C2" +
    "\x03\x02\x02\x02\u05C4\u05C5\x03\x02\x02\x02\u05C5\u05C8\x03\x02\x02\x02" +
    "\u05C6\u05C4\x03\x02\x02\x02\u05C7\u05C0\x03\x02\x02\x02\u05C8\u05CB\x03" +
    "\x02\x02\x02\u05C9\u05C7\x03\x02\x02\x02\u05C9\u05CA\x03\x02\x02\x02\u05CA" +
    "\u05CD\x03\x02\x02\x02\u05CB\u05C9\x03\x02\x02\x02\u05CC\u05CE\x05J&\x02" +
    "\u05CD\u05CC\x03\x02\x02\x02\u05CE\u05CF\x03\x02\x02\x02\u05CF\u05CD\x03" +
    "\x02\x02\x02\u05CF\u05D0\x03\x02\x02\x02\u05D0\u05D1\x03\x02\x02\x02\u05D1" +
    "\u05D3\x07\xFE\x02\x02\u05D2\u05D4\x05R*\x02\u05D3\u05D2\x03\x02\x02\x02" +
    "\u05D3\u05D4\x03\x02\x02\x02\u05D4\u05D8\x03\x02\x02\x02\u05D5\u05D7\x07" +
    "\u010C\x02\x02\u05D6\u05D5\x03\x02\x02\x02\u05D7\u05DA\x03\x02\x02\x02" +
    "\u05D8\u05D6\x03\x02\x02\x02\u05D8\u05D9\x03\x02\x02\x02\u05D9E\x03\x02" +
    "\x02\x02\u05DA\u05D8\x03\x02\x02\x02\u05DB\u05DC\x07\x89\x02\x02\u05DC" +
    "\u05DD\x05\u01EE\xF8\x02\u05DD\u05E1\x07\xF3\x02\x02\u05DE\u05E0\x07\u010C" +
    "\x02\x02\u05DF\u05DE\x03\x02\x02\x02\u05E0\u05E3\x03\x02\x02\x02\u05E1" +
    "\u05DF\x03\x02\x02\x02\u05E1\u05E2\x03\x02\x02\x02\u05E2\u05ED\x03\x02" +
    "\x02\x02\u05E3\u05E1\x03\x02\x02\x02\u05E4\u05E8\x05T+\x02\u05E5\u05E7" +
    "\x07\u010C\x02\x02\u05E6\u05E5\x03\x02\x02\x02\u05E7\u05EA\x03\x02\x02" +
    "\x02\u05E8\u05E6\x03\x02\x02\x02\u05E8\u05E9\x03\x02\x02\x02\u05E9\u05EC" +
    "\x03\x02\x02\x02\u05EA\u05E8\x03\x02\x02\x02\u05EB\u05E4\x03\x02\x02\x02" +
    "\u05EC\u05EF\x03\x02\x02\x02\u05ED\u05EB\x03\x02\x02\x02\u05ED\u05EE\x03" +
    "\x02\x02\x02\u05EE\u05F1\x03\x02\x02\x02\u05EF\u05ED\x03\x02\x02\x02\u05F0" +
    "\u05F2\x05J&\x02\u05F1\u05F0\x03\x02\x02\x02\u05F2\u05F3\x03\x02\x02\x02" +
    "\u05F3\u05F1\x03\x02\x02\x02\u05F3\u05F4\x03\x02\x02\x02\u05F4\u05F5\x03" +
    "\x02\x02\x02\u05F5\u05F7\x07\xFE\x02\x02\u05F6\u05F8\x05R*\x02\u05F7\u05F6" +
    "\x03\x02\x02\x02\u05F7\u05F8\x03\x02\x02\x02\u05F8\u05FC\x03\x02\x02\x02" +
    "\u05F9\u05FB\x07\u010C\x02\x02\u05FA\u05F9\x03\x02\x02\x02\u05FB\u05FE" +
    "\x03\x02\x02\x02\u05FC\u05FA\x03\x02\x02\x02\u05FC\u05FD\x03\x02\x02\x02" +
    "\u05FDG\x03\x02\x02\x02\u05FE\u05FC\x03\x02\x02\x02\u05FF\u0600\x07\x8A" +
    "\x02\x02\u0600\u0601\x05\u01EE\xF8\x02\u0601\u0605\x07\xF3\x02\x02\u0602" +
    "\u0604\x07\u010C\x02\x02\u0603\u0602\x03\x02\x02\x02\u0604\u0607\x03\x02" +
    "\x02\x02\u0605\u0603\x03\x02\x02\x02\u0605\u0606\x03\x02\x02\x02\u0606" +
    "\u0611\x03\x02\x02\x02\u0607\u0605\x03\x02\x02\x02\u0608\u060C\x05T+\x02" +
    "\u0609\u060B\x07\u010C\x02\x02\u060A\u0609\x03\x02\x02\x02\u060B\u060E" +
    "\x03\x02\x02\x02\u060C\u060A\x03\x02\x02\x02\u060C\u060D\x03\x02\x02\x02" +
    "\u060D\u0610\x03\x02\x02\x02\u060E\u060C\x03\x02\x02\x02\u060F\u0608\x03" +
    "\x02\x02\x02\u0610\u0613\x03\x02\x02\x02\u0611\u060F\x03\x02\x02\x02\u0611" +
    "\u0612\x03\x02\x02\x02\u0612I\x03\x02\x02\x02\u0613\u0611\x03\x02\x02" +
    "\x02\u0614\u0615\x07\xFE\x02\x02\u0615\u0616\x05L\'\x02\u0616K\x03\x02" +
    "\x02\x02\u0617\u0619\x07\u010C\x02\x02\u0618\u0617\x03\x02\x02\x02\u0619" +
    "\u061C\x03\x02\x02\x02\u061A\u0618\x03\x02\x02\x02\u061A\u061B\x03\x02" +
    "\x02\x02\u061B\u061D\x03\x02\x02\x02\u061C\u061A\x03\x02\x02\x02\u061D" +
    "\u0621\x05N(\x02\u061E\u0620\x07\u010C\x02\x02\u061F\u061E\x03\x02\x02" +
    "\x02\u0620\u0623\x03\x02\x02\x02\u0621\u061F\x03\x02\x02\x02\u0621\u0622" +
    "\x03\x02\x02\x02\u0622\u0625\x03\x02\x02\x02\u0623\u0621\x03\x02\x02\x02" +
    "\u0624\u061A\x03\x02\x02\x02\u0625\u0626\x03\x02\x02\x02\u0626\u0624\x03" +
    "\x02\x02\x02\u0626\u0627\x03\x02\x02\x02\u0627M\x03\x02\x02\x02\u0628" +
    "\u0630\x05\u024A\u0126\x02\u0629\u0630\x05\u0238\u011D\x02\u062A\u0630" +
    "\x05\u0258\u012D\x02\u062B\u0630\x05\u024C\u0127\x02\u062C\u0630\x05^" +
    "0\x02\u062D\u0630\x05\\/\x02\u062E\u0630\x05P)\x02\u062F\u0628\x03\x02" +
    "\x02\x02\u062F\u0629\x03\x02\x02\x02\u062F\u062A\x03\x02\x02\x02\u062F" +
    "\u062B\x03\x02\x02\x02\u062F\u062C\x03\x02\x02\x02\u062F\u062D\x03\x02" +
    "\x02\x02\u062F\u062E\x03\x02\x02\x02\u0630O\x03\x02\x02\x02\u0631\u0634" +
    "\x07\u0178\x02\x02\u0632\u0634\x05\u0262\u0132\x02\u0633\u0631\x03\x02" +
    "\x02\x02\u0633\u0632\x03\x02\x02\x02\u0634Q\x03\x02\x02\x02\u0635\u0637" +
    "\x07\u010C\x02\x02\u0636\u0635\x03\x02\x02\x02\u0637\u063A\x03\x02\x02" +
    "\x02\u0638\u0636\x03\x02\x02\x02\u0638\u0639\x03\x02\x02\x02\u0639\u063B" +
    "\x03\x02\x02\x02\u063A\u0638\x03\x02\x02\x02\u063B\u063D\x05\u0262\u0132" +
    "\x02\u063C\u0638\x03\x02\x02\x02\u063D\u063E\x03\x02\x02\x02\u063E\u063C" +
    "\x03\x02\x02\x02\u063E\u063F\x03\x02\x02\x02\u063FS\x03\x02\x02\x02\u0640" +
    "\u0661\x07\u0177\x02\x02\u0641\u0661\x07\u010D\x02\x02\u0642\u0661\x05" +
    "\u0264\u0133\x02\u0643\u0661\x05X-\x02\u0644\u0661\x05\u0242\u0122\x02" +
    "\u0645\u0661\x05\u0246\u0124\x02\u0646\u0661\x05\u0244\u0123\x02\u0647" +
    "\u0661\x05\u0258\u012D\x02\u0648\u0661\x05\u025C\u012F\x02\u0649\u0661" +
    "\x05f4\x02\u064A\u0661\x05\u0238\u011D\x02\u064B\u0661\x05\u024E\u0128" +
    "\x02\u064C\u0661\x05\u024A\u0126\x02\u064D\u0661\x05\u024C\u0127\x02\u064E" +
    "\u0661\x05\u0262\u0132\x02\u064F\u0661\x05\u023E\u0120\x02\u0650\u0661" +
    "\x05\u0250\u0129\x02\u0651\u0661\x05\u0252\u012A\x02\u0652\u0661\x05\u0254" +
    "\u012B\x02\u0653\u0661\x05\u0256\u012C\x02\u0654\u0661\x05\u0220\u0111" +
    "\x02\u0655\u0661\x05\u022A\u0116\x02\u0656\u0661\x05\u021C\u010F\x02\u0657" +
    "\u0661\x05\u0210\u0109\x02\u0658\u0661\x05\u0212\u010A\x02\u0659\u0661" +
    "\x05\u0216\u010C\x02\u065A\u0661\x05\u0214\u010B\x02\u065B\u0661\x05\u0218" +
    "\u010D\x02\u065C\u0661\x05\u023C\u011F\x02\u065D\u0661\x05\u025E\u0130" +
    "\x02\u065E\u0661\x05\u0240\u0121\x02\u065F\u0661\x05\u026C\u0137\x02\u0660" +
    "\u0640\x03\x02\x02\x02\u0660\u0641\x03\x02\x02\x02\u0660\u0642\x03\x02" +
    "\x02\x02\u0660\u0643\x03\x02\x02\x02\u0660\u0644\x03\x02\x02\x02\u0660" +
    "\u0645\x03\x02\x02\x02\u0660\u0646\x03\x02\x02\x02\u0660\u0647\x03\x02" +
    "\x02\x02\u0660\u0648\x03\x02\x02\x02\u0660\u0649\x03\x02\x02\x02\u0660" +
    "\u064A\x03\x02\x02\x02\u0660\u064B\x03\x02\x02\x02\u0660\u064C\x03\x02" +
    "\x02\x02\u0660\u064D\x03\x02\x02\x02\u0660\u064E\x03\x02\x02\x02\u0660" +
    "\u064F\x03\x02\x02\x02\u0660\u0650\x03\x02\x02\x02\u0660\u0651\x03\x02" +
    "\x02\x02\u0660\u0652\x03\x02\x02\x02\u0660\u0653\x03\x02\x02\x02\u0660" +
    "\u0654\x03\x02\x02\x02\u0660\u0655\x03\x02\x02\x02\u0660\u0656\x03\x02" +
    "\x02\x02\u0660\u0657\x03\x02\x02\x02\u0660\u0658\x03\x02\x02\x02\u0660" +
    "\u0659\x03\x02\x02\x02\u0660\u065A\x03\x02\x02\x02\u0660\u065B\x03\x02" +
    "\x02\x02\u0660\u065C\x03\x02\x02\x02\u0660\u065D\x03\x02\x02\x02\u0660" +
    "\u065E\x03\x02\x02\x02\u0660\u065F\x03\x02\x02\x02\u0661U\x03\x02\x02" +
    "\x02\u0662\u0679\x07\u0177\x02\x02\u0663\u0679\x07\u010D\x02\x02\u0664" +
    "\u0679\x05\u0264\u0133\x02\u0665\u0679\x05X-\x02\u0666\u0679\x05\u0242" +
    "\u0122\x02\u0667\u0679\x05\u0246\u0124\x02\u0668\u0679\x05\u0244\u0123" +
    "\x02\u0669\u0679\x05\u0258\u012D\x02\u066A\u0679\x05\u025C\u012F\x02\u066B" +
    "\u0679\x05f4\x02\u066C\u0679\x05\u0238\u011D\x02\u066D\u0679\x05\u024E" +
    "\u0128\x02\u066E\u0679\x05\u024A\u0126\x02\u066F\u0679\x05\u024C\u0127" +
    "\x02\u0670\u0679\x05\u0262\u0132\x02\u0671\u0679\x05\u023E\u0120\x02\u0672" +
    "\u0679\x05\u0250\u0129\x02\u0673\u0679\x05\u0252\u012A\x02\u0674\u0679" +
    "\x05\u023C\u011F\x02\u0675\u0679\x05\u025E\u0130\x02\u0676\u0679\x05\u0240" +
    "\u0121\x02\u0677\u0679\x05\u026C\u0137\x02\u0678\u0662\x03\x02\x02\x02" +
    "\u0678\u0663\x03\x02\x02\x02\u0678\u0664\x03\x02\x02\x02\u0678\u0665\x03" +
    "\x02\x02\x02\u0678\u0666\x03\x02\x02\x02\u0678\u0667\x03\x02\x02\x02\u0678" +
    "\u0668\x03\x02\x02\x02\u0678\u0669\x03\x02\x02\x02\u0678\u066A\x03\x02" +
    "\x02\x02\u0678\u066B\x03\x02\x02\x02\u0678\u066C\x03\x02\x02\x02\u0678" +
    "\u066D\x03\x02\x02\x02\u0678\u066E\x03\x02\x02\x02\u0678\u066F\x03\x02" +
    "\x02\x02\u0678\u0670\x03\x02\x02\x02\u0678\u0671\x03\x02\x02\x02\u0678" +
    "\u0672\x03\x02\x02\x02\u0678\u0673\x03\x02\x02\x02\u0678\u0674\x03\x02" +
    "\x02\x02\u0678\u0675\x03\x02\x02\x02\u0678\u0676\x03\x02\x02\x02\u0678" +
    "\u0677\x03\x02\x02\x02\u0679W\x03\x02\x02\x02\u067A\u0682\x05Z.\x02\u067B" +
    "\u0681\x05Z.\x02\u067C\u0681\x05\u024A\u0126\x02\u067D\u0681\x05\u024C" +
    "\u0127\x02\u067E\u0681\x05\u0238\u011D\x02\u067F\u0681\x05\u023E\u0120" +
    "\x02\u0680\u067B\x03\x02\x02\x02\u0680\u067C\x03\x02\x02\x02\u0680\u067D" +
    "\x03\x02\x02\x02\u0680\u067E\x03\x02\x02\x02\u0680\u067F\x03\x02\x02\x02" +
    "\u0681\u0684\x03\x02\x02\x02\u0682\u0680\x03\x02\x02\x02\u0682\u0683\x03" +
    "\x02\x02\x02\u0683Y\x03\x02\x02\x02\u0684\u0682\x03\x02\x02\x02\u0685" +
    "\u0689\x07\xE9\x02\x02\u0686\u068A\x07\u010A\x02\x02\u0687\u068A\x07\u010B" +
    "\x02\x02\u0688\u068A\x03\x02\x02\x02\u0689\u0686\x03\x02\x02\x02\u0689" +
    "\u0687\x03\x02\x02\x02\u0689\u0688\x03\x02\x02\x02\u068A\u068E\x03\x02" +
    "\x02\x02\u068B\u068D\x05\u0262\u0132\x02\u068C\u068B\x03\x02\x02\x02\u068D" +
    "\u0690\x03\x02\x02\x02\u068E\u068C\x03\x02\x02\x02\u068E\u068F\x03\x02" +
    "\x02\x02\u068F\u0691\x03\x02\x02\x02\u0690\u068E\x03\x02\x02\x02\u0691" +
    "\u0692\x05\u0266\u0134\x02\u0692[\x03\x02\x02\x02\u0693\u0695\x05\u0238" +
    "\u011D\x02\u0694\u0693\x03\x02\x02\x02\u0694\u0695\x03\x02\x02\x02\u0695" +
    "\u0696\x03\x02\x02\x02\u0696\u0698\x07\xED\x02\x02\u0697\u0699\x05\u0262" +
    "\u0132\x02\u0698\u0697\x03\x02\x02\x02\u0699\u069A\x03\x02\x02\x02\u069A" +
    "\u0698\x03\x02\x02\x02\u069A\u069B\x03\x02\x02\x02\u069B\u069C\x03\x02" +
    "\x02\x02\u069C\u069D\x07\xF3\x02\x02\u069D]\x03\x02\x02\x02\u069E\u06A0" +
    "\x05\u0238\u011D\x02\u069F\u069E\x03\x02\x02\x02\u069F\u06A0\x03\x02\x02" +
    "\x02\u06A0\u06A1\x03\x02\x02\x02\u06A1\u06A3\x07\xEE\x02\x02\u06A2\u06A4" +
    "\x05\u0262\u0132\x02\u06A3\u06A2\x03\x02\x02\x02\u06A4\u06A5\x03\x02\x02" +
    "\x02\u06A5\u06A3\x03\x02\x02\x02\u06A5\u06A6\x03\x02\x02\x02\u06A6\u06A7" +
    "\x03\x02\x02\x02\u06A7\u06A8\x07\xF3\x02\x02\u06A8_\x03\x02\x02\x02\u06A9" +
    "\u06AB\x05\u0238\u011D\x02\u06AA\u06A9\x03\x02\x02\x02\u06AA\u06AB\x03" +
    "\x02\x02\x02\u06AB\u06AC\x03\x02\x02\x02\u06AC\u06AE\x07\xF0\x02\x02\u06AD" +
    "\u06AF\x05\u0262\u0132\x02\u06AE\u06AD\x03\x02\x02\x02\u06AF\u06B0\x03" +
    "\x02\x02\x02\u06B0\u06AE\x03\x02\x02\x02\u06B0\u06B1\x03\x02\x02\x02\u06B1" +
    "\u06B2\x03\x02\x02\x02\u06B2\u06B3\x07\xF3\x02\x02\u06B3a\x03\x02\x02" +
    "\x02\u06B4\u06B5\x07\x17\x02\x02\u06B5\u06B6\x05\u01EE\xF8\x02\u06B6\u06B7" +
    "\x07\xF3\x02\x02\u06B7\u06C1\x07\u010C\x02\x02\u06B8\u06BC\x05T+\x02\u06B9" +
    "\u06BB\x07\u010C\x02\x02\u06BA\u06B9\x03\x02\x02\x02\u06BB\u06BE\x03\x02" +
    "\x02\x02\u06BC\u06BA\x03\x02\x02\x02\u06BC\u06BD\x03\x02\x02\x02\u06BD" +
    "\u06C0\x03\x02\x02\x02\u06BE\u06BC\x03\x02\x02\x02\u06BF\u06B8\x03\x02" +
    "\x02\x02\u06C0\u06C3\x03\x02\x02\x02\u06C1\u06BF\x03\x02\x02\x02\u06C1" +
    "\u06C2\x03\x02\x02\x02\u06C2\u06CD\x03\x02\x02\x02\u06C3\u06C1\x03\x02" +
    "\x02\x02\u06C4\u06C6\x07\u010C\x02\x02\u06C5\u06C4\x03\x02\x02\x02\u06C6" +
    "\u06C9\x03\x02\x02\x02\u06C7\u06C5\x03\x02\x02\x02\u06C7\u06C8\x03\x02" +
    "\x02\x02\u06C8\u06CA\x03\x02\x02\x02\u06C9\u06C7\x03\x02\x02\x02\u06CA" +
    "\u06CC\x05d3\x02\u06CB\u06C7\x03\x02\x02\x02\u06CC\u06CF\x03\x02\x02\x02" +
    "\u06CD\u06CB\x03\x02\x02\x02\u06CD\u06CE\x03\x02\x02\x02\u06CE\u06D3\x03" +
    "\x02\x02\x02\u06CF\u06CD\x03\x02\x02\x02\u06D0\u06D2\x07\u010C\x02\x02" +
    "\u06D1\u06D0\x03\x02\x02\x02\u06D2\u06D5\x03\x02\x02\x02\u06D3\u06D1\x03" +
    "\x02\x02\x02\u06D3\u06D4\x03\x02\x02\x02\u06D4\u06E3\x03\x02\x02\x02\u06D5" +
    "\u06D3\x03\x02\x02\x02\u06D6\u06E0\x05h5\x02\u06D7\u06D9\x07\u010C\x02" +
    "\x02\u06D8\u06D7\x03\x02\x02\x02\u06D9\u06DC\x03\x02\x02\x02\u06DA\u06D8" +
    "\x03\x02\x02\x02\u06DA\u06DB\x03\x02\x02\x02\u06DB\u06DD\x03\x02\x02\x02" +
    "\u06DC\u06DA\x03\x02\x02\x02\u06DD\u06DF\x05h5\x02\u06DE\u06DA\x03\x02" +
    "\x02\x02\u06DF\u06E2\x03\x02\x02\x02\u06E0\u06DE\x03\x02\x02\x02\u06E0" +
    "\u06E1\x03\x02\x02\x02\u06E1\u06E4\x03\x02\x02\x02\u06E2\u06E0\x03\x02" +
    "\x02\x02\u06E3\u06D6\x03\x02\x02\x02\u06E3\u06E4\x03\x02\x02\x02\u06E4" +
    "c\x03\x02\x02\x02\u06E5\u06ED\x07\u011A\x02\x02\u06E6\u06E8\x07\u010C" +
    "\x02\x02\u06E7\u06E6\x03\x02\x02\x02\u06E7\u06E8\x03\x02\x02\x02\u06E8" +
    "\u06E9\x03\x02\x02\x02\u06E9\u06EB\x05\u0260\u0131\x02\u06EA\u06EC\x07" +
    "\u010C\x02\x02\u06EB\u06EA\x03\x02\x02\x02\u06EB\u06EC\x03\x02\x02\x02" +
    "\u06EC\u06EE\x03\x02\x02\x02\u06ED\u06E7\x03\x02\x02\x02\u06ED\u06EE\x03" +
    "\x02\x02\x02\u06EE\u06EF\x03\x02\x02\x02\u06EF\u06F0\x07\xF3\x02\x02\u06F0" +
    "e\x03\x02\x02\x02\u06F1\u06F2\t\x05\x02\x02\u06F2g\x03\x02\x02\x02\u06F3" +
    "\u06F4\x05T+\x02\u06F4i\x03\x02\x02\x02\u06F5\u06F6\x07\x19\x02\x02\u06F6" +
    "\u06F7\x05\u01EE\xF8\x02\u06F7\u06F8\x07\xF3\x02\x02\u06F8\u0702\x07\u010C" +
    "\x02\x02\u06F9\u06FD\x05T+\x02\u06FA\u06FC\x07\u010C\x02\x02\u06FB\u06FA" +
    "\x03\x02\x02\x02\u06FC\u06FF\x03\x02\x02\x02\u06FD\u06FB\x03\x02\x02\x02" +
    "\u06FD\u06FE\x03\x02\x02\x02\u06FE\u0701\x03\x02\x02\x02\u06FF\u06FD\x03" +
    "\x02\x02\x02\u0700\u06F9\x03\x02\x02\x02\u0701\u0704\x03\x02\x02\x02\u0702" +
    "\u0700\x03\x02\x02\x02\u0702\u0703\x03\x02\x02\x02\u0703\u0708\x03\x02" +
    "\x02\x02\u0704\u0702\x03\x02\x02\x02\u0705\u0707\x05l7\x02\u0706\u0705" +
    "\x03\x02\x02\x02\u0707\u070A\x03\x02\x02\x02\u0708\u0706\x03\x02\x02\x02" +
    "\u0708\u0709\x03\x02\x02\x02\u0709\u070E\x03\x02\x02\x02\u070A\u0708\x03" +
    "\x02\x02\x02\u070B\u070D\x07\u010C\x02\x02\u070C\u070B\x03\x02\x02\x02" +
    "\u070D\u0710\x03\x02\x02\x02\u070E\u070C\x03\x02\x02\x02\u070E\u070F\x03" +
    "\x02\x02\x02\u070F\u071E\x03\x02\x02\x02\u0710\u070E\x03\x02\x02\x02\u0711" +
    "\u071B\x05h5\x02\u0712\u0714\x07\u010C\x02\x02\u0713\u0712\x03\x02\x02" +
    "\x02\u0714\u0717\x03\x02\x02\x02\u0715\u0713\x03\x02\x02\x02\u0715\u0716" +
    "\x03\x02\x02\x02\u0716\u0718\x03\x02\x02\x02\u0717\u0715\x03\x02\x02\x02" +
    "\u0718\u071A\x05h5\x02\u0719\u0715\x03\x02\x02\x02\u071A\u071D\x03\x02" +
    "\x02\x02\u071B\u0719\x03\x02\x02\x02\u071B\u071C\x03\x02\x02\x02\u071C" +
    "\u071F\x03\x02\x02\x02\u071D\u071B\x03\x02\x02\x02\u071E\u0711\x03\x02" +
    "\x02\x02\u071E\u071F\x03\x02\x02\x02\u071Fk\x03\x02\x02\x02\u0720\u0724" +
    "\x07\xEE\x02\x02\u0721\u0723\v\x02\x02\x02\u0722\u0721\x03\x02\x02\x02" +
    "\u0723\u0726\x03\x02\x02\x02\u0724\u0725\x03\x02\x02\x02\u0724\u0722\x03" +
    "\x02\x02\x02\u0725\u0727\x03\x02\x02\x02\u0726\u0724\x03\x02\x02\x02\u0727" +
    "\u0728\x07\xF3\x02\x02\u0728\u0733\x07\u010C\x02\x02\u0729\u072D\x07\xED" +
    "\x02\x02\u072A\u072C\v\x02\x02\x02\u072B\u072A\x03\x02\x02\x02\u072C\u072F" +
    "\x03\x02\x02\x02\u072D\u072E\x03\x02\x02\x02\u072D\u072B\x03\x02\x02\x02" +
    "\u072E\u0730\x03\x02\x02\x02\u072F\u072D\x03\x02\x02\x02\u0730\u0731\x07" +
    "\xF3\x02\x02\u0731\u0733\x07\u010C\x02\x02\u0732\u0720\x03\x02\x02\x02" +
    "\u0732\u0729\x03\x02\x02\x02\u0733m\x03\x02\x02\x02\u0734\u0735\x07\x1A" +
    "\x02\x02\u0735\u0736\x05\u01EE\xF8\x02\u0736\u0737\x07\xF3\x02\x02\u0737" +
    "\u0744\x07\u010C\x02\x02\u0738\u073B\x05T+\x02\u0739\u073B\x05p9\x02\u073A" +
    "\u0738\x03\x02\x02\x02\u073A\u0739\x03\x02\x02\x02\u073B\u073F\x03\x02" +
    "\x02\x02\u073C\u073E\x07\u010C\x02\x02\u073D\u073C\x03\x02\x02\x02\u073E" +
    "\u0741\x03\x02\x02\x02\u073F\u073D\x03\x02\x02\x02\u073F\u0740\x03\x02" +
    "\x02\x02\u0740\u0743\x03\x02\x02\x02\u0741\u073F\x03\x02\x02\x02\u0742" +
    "\u073A\x03\x02\x02\x02\u0743\u0746\x03\x02\x02\x02\u0744\u0742\x03\x02" +
    "\x02\x02\u0744\u0745\x03\x02\x02\x02\u0745\u074A\x03\x02\x02\x02\u0746" +
    "\u0744\x03\x02\x02\x02\u0747\u0749\x07\u010C\x02\x02\u0748\u0747\x03\x02" +
    "\x02\x02\u0749\u074C\x03\x02\x02\x02\u074A\u0748\x03\x02\x02\x02\u074A" +
    "\u074B\x03\x02\x02\x02\u074B\u075A\x03\x02\x02\x02\u074C\u074A\x03\x02" +
    "\x02\x02\u074D\u0757\x05h5\x02\u074E\u0750\x07\u010C\x02\x02\u074F\u074E" +
    "\x03\x02\x02\x02\u0750\u0753\x03\x02\x02\x02\u0751\u074F\x03\x02\x02\x02" +
    "\u0751\u0752\x03\x02\x02\x02\u0752\u0754\x03\x02\x02\x02\u0753\u0751\x03" +
    "\x02\x02\x02\u0754\u0756\x05h5\x02\u0755\u0751\x03\x02\x02\x02\u0756\u0759" +
    "\x03\x02\x02\x02\u0757\u0755\x03\x02\x02\x02\u0757\u0758\x03\x02\x02\x02" +
    "\u0758\u075B\x03\x02\x02\x02\u0759\u0757\x03\x02\x02\x02\u075A\u074D\x03" +
    "\x02\x02\x02\u075A\u075B\x03\x02\x02\x02\u075Bo\x03\x02\x02\x02\u075C" +
    "\u075D\x07\xEF\x02\x02\u075D\u075E\x05\u0262\u0132\x02\u075E\u0760\x07" +
    "\xF3\x02\x02\u075F\u0761\x05r:\x02\u0760\u075F\x03\x02\x02\x02\u0760\u0761" +
    "\x03\x02\x02\x02\u0761\u0767\x03\x02\x02\x02\u0762\u0766\x05\u024C\u0127" +
    "\x02\u0763\u0766\x05\u0238\u011D\x02\u0764\u0766\x05\u024A\u0126\x02\u0765" +
    "\u0762\x03\x02\x02\x02\u0765\u0763\x03\x02\x02\x02\u0765\u0764\x03\x02" +
    "\x02\x02\u0766\u0769\x03\x02\x02\x02\u0767\u0765\x03\x02\x02\x02\u0767" +
    "\u0768\x03\x02\x02\x02\u0768q\x03\x02\x02\x02\u0769\u0767\x03\x02\x02" +
    "\x02\u076A\u076E\x07\u0125\x02\x02\u076B\u076D\x07\x04\x02\x02\u076C\u076B" +
    "\x03\x02\x02\x02\u076D\u0770\x03\x02\x02\x02\u076E\u076C\x03\x02\x02\x02" +
    "\u076E\u076F\x03\x02\x02\x02\u076F\u0771\x03\x02\x02\x02\u0770\u076E\x03" +
    "\x02\x02\x02\u0771\u0775\x07\u010B\x02\x02\u0772\u0774\x07\x04\x02\x02" +
    "\u0773\u0772\x03\x02\x02\x02\u0774\u0777\x03\x02\x02\x02\u0775\u0773\x03" +
    "\x02\x02\x02\u0775\u0776\x03\x02\x02\x02\u0776\u0778\x03\x02\x02\x02\u0777" +
    "\u0775\x03\x02\x02\x02\u0778\u0779\x07\xF3\x02\x02\u0779s\x03\x02\x02" +
    "\x02\u077A\u077B\x07\x12\x02\x02\u077B\u077C\x05\u01EE\xF8\x02\u077C\u077D" +
    "\x07\xF3\x02\x02\u077D\u0787\x07\u010C\x02\x02\u077E\u0782\x05T+\x02\u077F" +
    "\u0781\x07\u010C\x02\x02\u0780\u077F\x03\x02\x02\x02\u0781\u0784\x03\x02" +
    "\x02\x02\u0782\u0780\x03\x02\x02\x02\u0782\u0783\x03\x02\x02\x02\u0783" +
    "\u0786\x03\x02\x02\x02\u0784\u0782\x03\x02\x02\x02\u0785\u077E\x03\x02" +
    "\x02\x02\u0786\u0789\x03\x02\x02\x02\u0787\u0785\x03\x02\x02\x02\u0787" +
    "\u0788\x03\x02\x02\x02\u0788\u078D\x03\x02\x02\x02\u0789\u0787\x03\x02" +
    "\x02\x02\u078A\u078C\x07\u010C\x02\x02\u078B\u078A\x03\x02\x02\x02\u078C" +
    "\u078F\x03\x02\x02\x02\u078D\u078B\x03\x02\x02\x02\u078D\u078E\x03\x02" +
    "\x02\x02\u078E\u079D\x03\x02\x02\x02\u078F\u078D\x03\x02\x02\x02\u0790" +
    "\u079A\x05h5\x02\u0791\u0793\x07\u010C\x02\x02\u0792\u0791\x03\x02\x02" +
    "\x02\u0793\u0796\x03\x02\x02\x02\u0794\u0792\x03\x02\x02\x02\u0794\u0795" +
    "\x03\x02\x02\x02\u0795\u0797\x03\x02\x02\x02\u0796\u0794\x03\x02\x02\x02" +
    "\u0797\u0799\x05h5\x02\u0798\u0794\x03\x02\x02\x02\u0799\u079C\x03\x02" +
    "\x02\x02\u079A\u0798\x03\x02\x02\x02\u079A\u079B\x03\x02\x02\x02\u079B" +
    "\u079E\x03\x02\x02\x02\u079C\u079A\x03\x02\x02\x02\u079D\u0790\x03\x02" +
    "\x02\x02\u079D\u079E\x03\x02\x02\x02\u079Eu\x03\x02\x02\x02\u079F\u07A0" +
    "\x07\x1B\x02\x02\u07A0\u07A1\x05\u01EE\xF8\x02\u07A1\u07A2\x07\xF3\x02" +
    "\x02\u07A2\u07AC\x07\u010C\x02\x02\u07A3\u07A7\x05T+\x02\u07A4\u07A6\x07" +
    "\u010C\x02\x02\u07A5\u07A4\x03\x02\x02\x02\u07A6\u07A9\x03\x02\x02\x02" +
    "\u07A7\u07A5\x03\x02\x02\x02\u07A7\u07A8\x03\x02\x02\x02\u07A8\u07AB\x03" +
    "\x02\x02\x02\u07A9\u07A7\x03\x02\x02\x02\u07AA\u07A3\x03\x02\x02\x02\u07AB" +
    "\u07AE\x03\x02\x02\x02\u07AC\u07AA\x03\x02\x02\x02\u07AC\u07AD\x03\x02" +
    "\x02\x02\u07AD\u07B2\x03\x02\x02\x02\u07AE\u07AC\x03\x02\x02\x02\u07AF" +
    "\u07B1\x07\u010C\x02\x02\u07B0\u07AF\x03\x02\x02\x02\u07B1\u07B4\x03\x02" +
    "\x02\x02\u07B2\u07B0\x03\x02\x02\x02\u07B2\u07B3\x03\x02\x02\x02\u07B3" +
    "\u07C2\x03\x02\x02\x02\u07B4\u07B2\x03\x02\x02\x02\u07B5\u07BF\x05h5\x02" +
    "\u07B6\u07B8\x07\u010C\x02\x02\u07B7\u07B6\x03\x02\x02\x02\u07B8\u07BB" +
    "\x03\x02\x02\x02\u07B9\u07B7\x03\x02\x02\x02\u07B9\u07BA\x03\x02\x02\x02" +
    "\u07BA\u07BC\x03\x02\x02\x02\u07BB\u07B9\x03\x02\x02\x02\u07BC\u07BE\x05" +
    "h5\x02\u07BD\u07B9\x03\x02\x02\x02\u07BE\u07C1\x03\x02\x02\x02\u07BF\u07BD" +
    "\x03\x02\x02\x02\u07BF\u07C0\x03\x02\x02\x02\u07C0\u07C3\x03\x02\x02\x02" +
    "\u07C1\u07BF\x03\x02\x02\x02\u07C2\u07B5\x03\x02\x02\x02\u07C2\u07C3\x03" +
    "\x02\x02\x02\u07C3w\x03\x02\x02\x02\u07C4\u07C5\x07\x1C\x02\x02\u07C5" +
    "\u07C6\x05\u01EE\xF8\x02\u07C6\u07C7\x07\xF3\x02\x02\u07C7\u07D1\x07\u010C" +
    "\x02\x02\u07C8\u07CC\x05T+\x02\u07C9\u07CB\x07\u010C\x02\x02\u07CA\u07C9" +
    "\x03\x02\x02\x02\u07CB\u07CE\x03\x02\x02\x02\u07CC\u07CA\x03\x02\x02\x02" +
    "\u07CC\u07CD\x03\x02\x02\x02\u07CD\u07D0\x03\x02\x02\x02\u07CE\u07CC\x03" +
    "\x02\x02\x02\u07CF\u07C8\x03\x02\x02\x02\u07D0\u07D3\x03\x02\x02\x02\u07D1" +
    "\u07CF\x03\x02\x02\x02\u07D1\u07D2\x03\x02\x02\x02\u07D2\u07D7\x03\x02" +
    "\x02\x02\u07D3\u07D1\x03\x02\x02\x02\u07D4\u07D6\x07\u010C\x02\x02\u07D5" +
    "\u07D4\x03\x02\x02\x02\u07D6\u07D9\x03\x02\x02\x02\u07D7\u07D5\x03\x02" +
    "\x02\x02\u07D7\u07D8\x03\x02\x02\x02\u07D8\u07E7\x03\x02\x02\x02\u07D9" +
    "\u07D7\x03\x02\x02\x02\u07DA\u07E4\x05h5\x02\u07DB\u07DD\x07\u010C\x02" +
    "\x02\u07DC\u07DB\x03\x02\x02\x02\u07DD\u07E0\x03\x02\x02\x02\u07DE\u07DC" +
    "\x03\x02\x02\x02\u07DE\u07DF\x03\x02\x02\x02\u07DF\u07E1\x03\x02\x02\x02" +
    "\u07E0\u07DE\x03\x02\x02\x02\u07E1\u07E3\x05h5\x02\u07E2\u07DE\x03\x02" +
    "\x02\x02\u07E3\u07E6\x03\x02\x02\x02\u07E4\u07E2\x03\x02\x02\x02\u07E4" +
    "\u07E5\x03\x02\x02\x02\u07E5\u07E8\x03\x02\x02\x02\u07E6\u07E4\x03\x02" +
    "\x02\x02\u07E7\u07DA\x03\x02\x02\x02\u07E7\u07E8\x03\x02\x02\x02\u07E8" +
    "y\x03\x02\x02\x02\u07E9\u07EA\x07\x1D\x02\x02\u07EA\u07EB\x05\u01EE\xF8" +
    "\x02\u07EB\u07EF\x07\xF3\x02\x02\u07EC\u07EE\x07\u010C\x02\x02\u07ED\u07EC" +
    "\x03\x02\x02\x02\u07EE\u07F1\x03\x02\x02\x02\u07EF\u07ED\x03\x02\x02\x02" +
    "\u07EF\u07F0\x03\x02\x02\x02\u07F0\u07FB\x03\x02\x02\x02\u07F1\u07EF\x03" +
    "\x02\x02\x02\u07F2\u07F6\x05T+\x02\u07F3\u07F5\x07\u010C\x02\x02\u07F4" +
    "\u07F3\x03\x02\x02\x02\u07F5\u07F8\x03\x02\x02\x02\u07F6\u07F4\x03\x02" +
    "\x02\x02\u07F6\u07F7\x03\x02\x02\x02\u07F7\u07FA\x03\x02\x02\x02\u07F8" +
    "\u07F6\x03\x02\x02\x02\u07F9\u07F2\x03\x02\x02\x02\u07FA\u07FD\x03\x02" +
    "\x02\x02\u07FB\u07F9\x03\x02\x02\x02\u07FB\u07FC\x03\x02\x02\x02\u07FC" +
    "\u07FF\x03\x02\x02\x02\u07FD\u07FB\x03\x02\x02\x02\u07FE\u0800\x05\u0260" +
    "\u0131\x02\u07FF\u07FE\x03\x02\x02\x02\u07FF\u0800\x03\x02\x02\x02\u0800" +
    "\u0804\x03\x02\x02\x02\u0801\u0803\x07\u010C\x02\x02\u0802\u0801\x03\x02" +
    "\x02\x02\u0803\u0806\x03\x02\x02\x02\u0804\u0802\x03\x02\x02\x02\u0804" +
    "\u0805\x03\x02\x02\x02\u0805\u0814\x03\x02\x02\x02\u0806\u0804\x03\x02" +
    "\x02\x02\u0807\u0811\x05h5\x02\u0808\u080A\x07\u010C\x02\x02\u0809\u0808" +
    "\x03\x02\x02\x02\u080A\u080D\x03\x02\x02\x02\u080B\u0809\x03\x02\x02\x02" +
    "\u080B\u080C\x03\x02\x02\x02\u080C\u080E\x03\x02\x02\x02\u080D\u080B\x03" +
    "\x02\x02\x02\u080E\u0810\x05h5\x02\u080F\u080B\x03\x02\x02\x02\u0810\u0813" +
    "\x03\x02\x02\x02\u0811\u080F\x03\x02\x02\x02\u0811\u0812\x03\x02\x02\x02" +
    "\u0812\u0815\x03\x02\x02\x02\u0813\u0811\x03\x02\x02\x02\u0814\u0807\x03" +
    "\x02\x02\x02\u0814\u0815\x03\x02\x02\x02\u0815{\x03\x02\x02\x02\u0816" +
    "\u0817\x07\x1E\x02\x02\u0817\u0818\x05\u01EE\xF8\x02\u0818\u081A\x07\xF3" +
    "\x02\x02\u0819\u081B\x07\u010C\x02\x02\u081A\u0819\x03\x02\x02\x02\u081B" +
    "\u081C\x03\x02\x02\x02\u081C\u081A\x03\x02\x02\x02\u081C\u081D\x03\x02" +
    "\x02\x02\u081D\u0827\x03\x02\x02\x02\u081E\u0822\x05T+\x02\u081F\u0821" +
    "\x07\u010C\x02\x02\u0820\u081F\x03\x02\x02\x02\u0821\u0824\x03\x02\x02" +
    "\x02\u0822\u0820\x03\x02\x02\x02\u0822\u0823\x03\x02\x02\x02\u0823\u0826" +
    "\x03\x02\x02\x02\u0824\u0822\x03\x02\x02\x02\u0825\u081E\x03\x02\x02\x02" +
    "\u0826\u0829\x03\x02\x02\x02\u0827\u0825\x03\x02\x02\x02\u0827\u0828\x03" +
    "\x02\x02\x02\u0828\u082B\x03\x02\x02\x02\u0829\u0827\x03\x02\x02\x02\u082A" +
    "\u082C\x05\u0260\u0131\x02\u082B\u082A\x03\x02\x02\x02\u082B\u082C\x03" +
    "\x02\x02\x02\u082C\u0830\x03\x02\x02\x02\u082D\u082F\x07\u010C\x02\x02" +
    "\u082E\u082D\x03\x02\x02\x02\u082F\u0832\x03\x02\x02\x02\u0830\u082E\x03" +
    "\x02\x02\x02\u0830\u0831\x03\x02\x02\x02\u0831\u0840\x03\x02\x02\x02\u0832" +
    "\u0830\x03\x02\x02\x02\u0833\u083D\x05h5\x02\u0834\u0836\x07\u010C\x02" +
    "\x02\u0835\u0834\x03\x02\x02\x02\u0836\u0839\x03\x02\x02\x02\u0837\u0835" +
    "\x03\x02\x02\x02\u0837\u0838\x03\x02\x02\x02\u0838\u083A\x03\x02\x02\x02" +
    "\u0839\u0837\x03\x02\x02\x02\u083A\u083C\x05h5\x02\u083B\u0837\x03\x02" +
    "\x02\x02\u083C\u083F\x03\x02\x02\x02\u083D\u083B\x03\x02\x02\x02\u083D" +
    "\u083E\x03\x02\x02\x02\u083E\u0841\x03\x02\x02\x02\u083F\u083D\x03\x02" +
    "\x02\x02\u0840\u0833\x03\x02\x02\x02\u0840\u0841\x03\x02\x02\x02\u0841" +
    "}\x03\x02\x02\x02\u0842\u0843\x07\x15\x02\x02\u0843\u0844\x05\u01EE\xF8" +
    "\x02\u0844\u0848\x07\xF3\x02\x02\u0845\u0847\x07\u010C\x02\x02\u0846\u0845" +
    "\x03\x02\x02\x02\u0847\u084A\x03\x02\x02\x02\u0848\u0846\x03\x02\x02\x02" +
    "\u0848\u0849\x03\x02\x02\x02\u0849\u0854\x03\x02\x02\x02\u084A\u0848\x03" +
    "\x02\x02\x02\u084B\u084F\x05T+\x02\u084C\u084E\x07\u010C\x02\x02\u084D" +
    "\u084C\x03\x02\x02\x02\u084E\u0851\x03\x02\x02\x02\u084F\u084D\x03\x02" +
    "\x02\x02\u084F\u0850\x03\x02\x02\x02\u0850\u0853\x03\x02\x02\x02\u0851" +
    "\u084F\x03\x02\x02\x02\u0852\u084B\x03\x02\x02\x02\u0853\u0856\x03\x02" +
    "\x02\x02\u0854\u0852\x03\x02\x02\x02\u0854\u0855\x03\x02\x02\x02\u0855" +
    "\x7F\x03\x02\x02\x02";
bitmarkParser._serializedATNSegment6 = "\u0856\u0854\x03\x02\x02\x02\u0857\u0858\x07\x0F\x02\x02\u0858\u0859\x05" +
    "\u01EE\xF8\x02\u0859\u085D\x07\xF3\x02\x02\u085A\u085C\x07\u010C\x02\x02" +
    "\u085B\u085A\x03\x02\x02\x02\u085C\u085F\x03\x02\x02\x02\u085D\u085B\x03" +
    "\x02\x02\x02\u085D\u085E\x03\x02\x02\x02\u085E\u0869\x03\x02\x02\x02\u085F" +
    "\u085D\x03\x02\x02\x02\u0860\u0864\x05T+\x02\u0861\u0863\x07\u010C\x02" +
    "\x02\u0862\u0861\x03\x02\x02\x02\u0863\u0866\x03\x02\x02\x02\u0864\u0862" +
    "\x03\x02\x02\x02\u0864\u0865\x03\x02\x02\x02\u0865\u0868\x03\x02\x02\x02" +
    "\u0866\u0864\x03\x02\x02\x02\u0867\u0860\x03\x02\x02\x02\u0868\u086B\x03" +
    "\x02\x02\x02\u0869\u0867\x03\x02\x02\x02\u0869\u086A\x03\x02\x02\x02\u086A" +
    "\x81\x03\x02\x02\x02\u086B\u0869\x03\x02\x02\x02\u086C\u086D\x07\x10\x02" +
    "\x02\u086D\u086E\x05\u01EE\xF8\x02\u086E\u0872\x07\xF3\x02\x02\u086F\u0871" +
    "\x07\u010C\x02\x02\u0870\u086F\x03\x02\x02\x02\u0871\u0874\x03\x02\x02" +
    "\x02\u0872\u0870\x03\x02\x02\x02\u0872\u0873\x03\x02\x02\x02\u0873\u087E" +
    "\x03\x02\x02\x02\u0874\u0872\x03\x02\x02\x02\u0875\u0879\x05T+\x02\u0876" +
    "\u0878\x07\u010C\x02\x02\u0877\u0876\x03\x02\x02\x02\u0878\u087B\x03\x02" +
    "\x02\x02\u0879\u0877\x03\x02\x02\x02\u0879\u087A\x03\x02\x02\x02\u087A" +
    "\u087D\x03\x02\x02\x02\u087B\u0879\x03\x02\x02\x02\u087C\u0875\x03\x02" +
    "\x02\x02\u087D\u0880\x03\x02\x02\x02\u087E\u087C\x03\x02\x02\x02\u087E" +
    "\u087F\x03\x02\x02\x02\u087F\x83\x03\x02\x02\x02\u0880\u087E\x03\x02\x02" +
    "\x02\u0881\u0882\x07\x11\x02\x02\u0882\u0883\x05\u01EE\xF8\x02\u0883\u0887" +
    "\x07\xF3\x02\x02\u0884\u0886\x07\u010C\x02\x02\u0885\u0884\x03\x02\x02" +
    "\x02\u0886\u0889\x03\x02\x02\x02\u0887\u0885\x03\x02\x02\x02\u0887\u0888" +
    "\x03\x02\x02\x02\u0888\u0893\x03\x02\x02\x02\u0889\u0887\x03\x02\x02\x02" +
    "\u088A\u088E\x05T+\x02\u088B\u088D\x07\u010C\x02\x02\u088C\u088B\x03\x02" +
    "\x02\x02\u088D\u0890\x03\x02\x02\x02\u088E\u088C\x03\x02\x02\x02\u088E" +
    "\u088F\x03\x02\x02\x02\u088F\u0892\x03\x02\x02\x02\u0890\u088E\x03\x02" +
    "\x02\x02\u0891\u088A\x03\x02\x02\x02\u0892\u0895\x03\x02\x02\x02\u0893" +
    "\u0891\x03\x02\x02\x02\u0893\u0894\x03\x02\x02\x02\u0894\x85\x03\x02\x02" +
    "\x02\u0895\u0893\x03\x02\x02\x02\u0896\u0897\x073\x02\x02\u0897\u0898" +
    "\x05\u01EE\xF8\x02\u0898\u089C\x07\xF3\x02\x02\u0899\u089B\x07\u010C\x02" +
    "\x02\u089A\u0899\x03\x02\x02\x02\u089B\u089E\x03\x02\x02\x02\u089C\u089A" +
    "\x03\x02\x02\x02\u089C\u089D\x03\x02\x02\x02\u089D\u08A8\x03\x02\x02\x02" +
    "\u089E\u089C\x03\x02\x02\x02\u089F\u08A3\x05T+\x02\u08A0\u08A2\x07\u010C" +
    "\x02\x02\u08A1\u08A0\x03\x02\x02\x02\u08A2\u08A5\x03\x02\x02\x02\u08A3" +
    "\u08A1\x03\x02\x02\x02\u08A3\u08A4\x03\x02\x02\x02\u08A4\u08A7\x03\x02" +
    "\x02\x02\u08A5\u08A3\x03\x02\x02\x02\u08A6\u089F\x03\x02\x02\x02\u08A7" +
    "\u08AA\x03\x02\x02\x02\u08A8\u08A6\x03\x02\x02\x02\u08A8\u08A9\x03\x02" +
    "\x02\x02\u08A9\x87\x03\x02\x02\x02\u08AA\u08A8\x03\x02\x02\x02\u08AB\u08AC" +
    "\x074\x02\x02\u08AC\u08AD\x05\u01EE\xF8\x02\u08AD\u08B1\x07\xF3\x02\x02" +
    "\u08AE\u08B0\x07\u010C\x02\x02\u08AF\u08AE\x03\x02\x02\x02\u08B0\u08B3" +
    "\x03\x02\x02\x02\u08B1\u08AF\x03\x02\x02\x02\u08B1\u08B2\x03\x02\x02\x02" +
    "\u08B2\u08BD\x03\x02\x02\x02\u08B3\u08B1\x03\x02\x02\x02\u08B4\u08B8\x05" +
    "T+\x02\u08B5\u08B7\x07\u010C\x02\x02\u08B6\u08B5\x03\x02\x02\x02\u08B7" +
    "\u08BA\x03\x02\x02\x02\u08B8\u08B6\x03\x02\x02\x02\u08B8\u08B9\x03\x02" +
    "\x02\x02\u08B9\u08BC\x03\x02\x02\x02\u08BA\u08B8\x03\x02\x02\x02\u08BB" +
    "\u08B4\x03\x02\x02\x02\u08BC\u08BF\x03\x02\x02\x02\u08BD\u08BB\x03\x02" +
    "\x02\x02\u08BD\u08BE\x03\x02\x02\x02\u08BE\x89\x03\x02\x02\x02\u08BF\u08BD" +
    "\x03\x02\x02\x02\u08C0\u08C1\x075\x02\x02\u08C1\u08C2\x05\u01EE\xF8\x02" +
    "\u08C2\u08C6\x07\xF3\x02\x02\u08C3\u08C5\x07\u010C\x02\x02\u08C4\u08C3" +
    "\x03\x02\x02\x02\u08C5\u08C8\x03\x02\x02\x02\u08C6\u08C4\x03\x02\x02\x02" +
    "\u08C6\u08C7\x03\x02\x02\x02\u08C7\u08D2\x03\x02\x02\x02\u08C8\u08C6\x03" +
    "\x02\x02\x02\u08C9\u08CD\x05T+\x02\u08CA\u08CC\x07\u010C\x02\x02\u08CB" +
    "\u08CA\x03\x02\x02\x02\u08CC\u08CF\x03\x02\x02\x02\u08CD\u08CB\x03\x02" +
    "\x02\x02\u08CD\u08CE\x03\x02\x02\x02\u08CE\u08D1\x03\x02\x02\x02\u08CF" +
    "\u08CD\x03\x02\x02\x02\u08D0\u08C9\x03\x02\x02\x02\u08D1\u08D4\x03\x02" +
    "\x02\x02\u08D2\u08D0\x03\x02\x02\x02\u08D2\u08D3\x03\x02\x02\x02\u08D3" +
    "\x8B\x03\x02\x02\x02\u08D4\u08D2\x03\x02\x02\x02\u08D5\u08D6\x07\x16\x02" +
    "\x02\u08D6\u08D7\x05\u01EE\xF8\x02\u08D7\u08DB\x07\xF3\x02\x02\u08D8\u08DA" +
    "\x07\u010C\x02\x02\u08D9\u08D8\x03\x02\x02\x02\u08DA\u08DD\x03\x02\x02" +
    "\x02\u08DB\u08D9\x03\x02\x02\x02\u08DB\u08DC\x03\x02\x02\x02\u08DC\u08E7" +
    "\x03\x02\x02\x02\u08DD\u08DB\x03\x02\x02\x02\u08DE\u08E2\x05T+\x02\u08DF" +
    "\u08E1\x07\u010C\x02\x02\u08E0\u08DF\x03\x02\x02\x02\u08E1\u08E4\x03\x02" +
    "\x02\x02\u08E2\u08E0\x03\x02\x02\x02\u08E2\u08E3\x03\x02\x02\x02\u08E3" +
    "\u08E6\x03\x02\x02\x02\u08E4\u08E2\x03\x02\x02\x02\u08E5\u08DE\x03\x02" +
    "\x02\x02\u08E6\u08E9\x03\x02\x02\x02\u08E7\u08E5\x03\x02\x02\x02\u08E7" +
    "\u08E8\x03\x02\x02\x02\u08E8\x8D\x03\x02\x02\x02\u08E9\u08E7\x03\x02\x02" +
    "\x02\u08EA\u08EB\x07&\x02\x02\u08EB\u08EC\x05\u01EE\xF8\x02\u08EC\u08F0" +
    "\x07\xF3\x02\x02\u08ED\u08EF\x07\u010C\x02\x02\u08EE\u08ED\x03\x02\x02" +
    "\x02\u08EF\u08F2\x03\x02\x02\x02\u08F0\u08EE\x03\x02\x02\x02\u08F0\u08F1" +
    "\x03\x02\x02\x02\u08F1\u08FC\x03\x02\x02\x02\u08F2\u08F0\x03\x02\x02\x02" +
    "\u08F3\u08F7\x05T+\x02\u08F4\u08F6\x07\u010C\x02\x02\u08F5\u08F4\x03\x02" +
    "\x02\x02\u08F6\u08F9\x03\x02\x02\x02\u08F7\u08F5\x03\x02\x02\x02\u08F7" +
    "\u08F8\x03\x02\x02\x02\u08F8\u08FB\x03\x02\x02\x02\u08F9\u08F7\x03\x02" +
    "\x02\x02\u08FA\u08F3\x03\x02\x02\x02\u08FB\u08FE\x03\x02\x02\x02\u08FC" +
    "\u08FA\x03\x02\x02\x02\u08FC\u08FD\x03\x02\x02\x02\u08FD\x8F\x03\x02\x02" +
    "\x02\u08FE\u08FC\x03\x02\x02\x02\u08FF\u0900\x07\'\x02\x02\u0900\u0901" +
    "\x05\u01EE\xF8\x02\u0901\u0905\x07\xF3\x02\x02\u0902\u0904\x07\u010C\x02" +
    "\x02\u0903\u0902\x03\x02\x02\x02\u0904\u0907\x03\x02\x02\x02\u0905\u0903" +
    "\x03\x02\x02\x02\u0905\u0906\x03\x02\x02\x02\u0906\u0911\x03\x02\x02\x02" +
    "\u0907\u0905\x03\x02\x02\x02\u0908\u090C\x05T+\x02\u0909\u090B\x07\u010C" +
    "\x02\x02\u090A\u0909\x03\x02\x02\x02\u090B\u090E\x03\x02\x02\x02\u090C" +
    "\u090A\x03\x02\x02\x02\u090C\u090D\x03\x02\x02\x02\u090D\u0910\x03\x02" +
    "\x02\x02\u090E\u090C\x03\x02\x02\x02\u090F\u0908\x03\x02\x02\x02\u0910" +
    "\u0913\x03\x02\x02\x02\u0911\u090F\x03\x02\x02\x02\u0911\u0912\x03\x02" +
    "\x02\x02\u0912\x91\x03\x02\x02\x02\u0913\u0911\x03\x02\x02\x02\u0914\u0915" +
    "\x07(\x02\x02\u0915\u0916\x05\u01EE\xF8\x02\u0916\u091A\x07\xF3\x02\x02" +
    "\u0917\u0919\x07\u010C\x02\x02\u0918\u0917\x03\x02\x02\x02\u0919\u091C" +
    "\x03\x02\x02\x02\u091A\u0918\x03\x02\x02\x02\u091A\u091B\x03\x02\x02\x02" +
    "\u091B\u0926\x03\x02\x02\x02\u091C\u091A\x03\x02\x02\x02\u091D\u0921\x05" +
    "T+\x02\u091E\u0920\x07\u010C\x02\x02\u091F\u091E\x03\x02\x02\x02\u0920" +
    "\u0923\x03\x02\x02\x02\u0921\u091F\x03\x02\x02\x02\u0921\u0922\x03\x02" +
    "\x02\x02\u0922\u0925\x03\x02\x02\x02\u0923\u0921\x03\x02\x02\x02\u0924" +
    "\u091D\x03\x02\x02\x02\u0925\u0928\x03\x02\x02\x02\u0926\u0924\x03\x02" +
    "\x02\x02\u0926\u0927\x03\x02\x02\x02\u0927\x93\x03\x02\x02\x02\u0928\u0926" +
    "\x03\x02\x02\x02\u0929\u092A\x07)\x02\x02\u092A\u092B\x05\u01EE\xF8\x02" +
    "\u092B\u092F\x07\xF3\x02\x02\u092C\u092E\x07\u010C\x02\x02\u092D\u092C" +
    "\x03\x02\x02\x02\u092E\u0931\x03\x02\x02\x02\u092F\u092D\x03\x02\x02\x02" +
    "\u092F\u0930\x03\x02\x02\x02\u0930\u093B\x03\x02\x02\x02\u0931\u092F\x03" +
    "\x02\x02\x02\u0932\u0936\x05T+\x02\u0933\u0935\x07\u010C\x02\x02\u0934" +
    "\u0933\x03\x02\x02\x02\u0935\u0938\x03\x02\x02\x02\u0936\u0934\x03\x02" +
    "\x02\x02\u0936\u0937\x03\x02\x02\x02\u0937\u093A\x03\x02\x02\x02\u0938" +
    "\u0936\x03\x02\x02\x02\u0939\u0932\x03\x02\x02\x02\u093A\u093D\x03\x02" +
    "\x02\x02\u093B\u0939\x03\x02\x02\x02\u093B\u093C\x03\x02\x02\x02\u093C" +
    "\x95\x03\x02\x02\x02\u093D\u093B\x03\x02\x02\x02\u093E\u093F\x07+\x02" +
    "\x02\u093F\u0940\x05\u01EE\xF8\x02\u0940\u0944\x07\xF3\x02\x02\u0941\u0943" +
    "\x07\u010C\x02\x02\u0942\u0941\x03\x02\x02\x02\u0943\u0946\x03\x02\x02" +
    "\x02\u0944\u0942\x03\x02\x02\x02\u0944\u0945\x03\x02\x02\x02\u0945\u0950" +
    "\x03\x02\x02\x02\u0946\u0944\x03\x02\x02\x02\u0947\u094B\x05T+\x02\u0948" +
    "\u094A\x07\u010C\x02\x02\u0949\u0948\x03\x02\x02\x02\u094A\u094D\x03\x02" +
    "\x02\x02\u094B\u0949\x03\x02\x02\x02\u094B\u094C\x03\x02\x02\x02\u094C" +
    "\u094F\x03\x02\x02\x02\u094D\u094B\x03\x02\x02\x02\u094E\u0947\x03\x02" +
    "\x02\x02\u094F\u0952\x03\x02\x02\x02\u0950\u094E\x03\x02\x02\x02\u0950" +
    "\u0951\x03\x02\x02\x02\u0951\x97\x03\x02\x02\x02\u0952\u0950\x03\x02\x02" +
    "\x02\u0953\u0954\x07,\x02\x02\u0954\u0955\x05\u01EE\xF8\x02\u0955\u0959" +
    "\x07\xF3\x02\x02\u0956\u0958\x07\u010C\x02\x02\u0957\u0956\x03\x02\x02" +
    "\x02\u0958\u095B\x03\x02\x02\x02\u0959\u0957\x03\x02\x02\x02\u0959\u095A" +
    "\x03\x02\x02\x02\u095A\u0965\x03\x02\x02\x02\u095B\u0959\x03\x02\x02\x02" +
    "\u095C\u0960\x05T+\x02\u095D\u095F\x07\u010C\x02\x02\u095E\u095D\x03\x02" +
    "\x02\x02\u095F\u0962\x03\x02\x02\x02\u0960\u095E\x03\x02\x02\x02\u0960" +
    "\u0961\x03\x02\x02\x02\u0961\u0964\x03\x02\x02\x02\u0962\u0960\x03\x02" +
    "\x02\x02\u0963\u095C\x03\x02\x02\x02\u0964\u0967\x03\x02\x02\x02\u0965" +
    "\u0963\x03\x02\x02\x02\u0965\u0966\x03\x02\x02\x02\u0966\x99\x03\x02\x02" +
    "\x02\u0967\u0965\x03\x02\x02\x02\u0968\u0969\x07-\x02\x02\u0969\u096A" +
    "\x05\u01EE\xF8\x02\u096A\u096E\x07\xF3\x02\x02\u096B\u096D\x07\u010C\x02" +
    "\x02\u096C\u096B\x03\x02\x02\x02\u096D\u0970\x03\x02\x02\x02\u096E\u096C" +
    "\x03\x02\x02\x02\u096E\u096F\x03\x02\x02\x02\u096F\u097A\x03\x02\x02\x02" +
    "\u0970\u096E\x03\x02\x02\x02\u0971\u0975\x05T+\x02\u0972\u0974\x07\u010C" +
    "\x02\x02\u0973\u0972\x03\x02\x02\x02\u0974\u0977\x03\x02\x02\x02\u0975" +
    "\u0973\x03\x02\x02\x02\u0975\u0976\x03\x02\x02\x02\u0976\u0979\x03\x02" +
    "\x02\x02\u0977\u0975\x03\x02\x02\x02\u0978\u0971\x03\x02\x02\x02\u0979" +
    "\u097C\x03\x02\x02\x02\u097A\u0978\x03\x02\x02\x02\u097A\u097B\x03\x02" +
    "\x02\x02\u097B\x9B\x03\x02\x02\x02\u097C\u097A\x03\x02\x02\x02\u097D\u097E" +
    "\x07.\x02\x02\u097E\u097F\x05\u01EE\xF8\x02\u097F\u0983\x07\xF3\x02\x02" +
    "\u0980\u0982\x07\u010C\x02\x02\u0981\u0980\x03\x02\x02\x02\u0982\u0985" +
    "\x03\x02\x02\x02\u0983\u0981\x03\x02\x02\x02\u0983\u0984\x03\x02\x02\x02" +
    "\u0984\u098F\x03\x02\x02\x02\u0985\u0983\x03\x02\x02\x02\u0986\u098A\x05" +
    "T+\x02\u0987\u0989\x07\u010C\x02\x02\u0988\u0987\x03\x02\x02\x02\u0989" +
    "\u098C\x03\x02\x02\x02\u098A\u0988\x03\x02\x02\x02\u098A\u098B\x03\x02" +
    "\x02\x02\u098B\u098E\x03\x02\x02\x02\u098C\u098A\x03\x02\x02\x02\u098D" +
    "\u0986\x03\x02\x02\x02\u098E\u0991\x03\x02\x02\x02\u098F\u098D\x03\x02" +
    "\x02\x02\u098F\u0990\x03\x02\x02\x02\u0990\x9D\x03\x02\x02\x02\u0991\u098F" +
    "\x03\x02\x02\x02\u0992\u0993\x07/\x02\x02\u0993\u0994\x05\u01EE\xF8\x02" +
    "\u0994\u0998\x07\xF3\x02\x02\u0995\u0997\x07\u010C\x02\x02\u0996\u0995" +
    "\x03\x02\x02\x02\u0997\u099A\x03\x02\x02\x02\u0998\u0996\x03\x02\x02\x02" +
    "\u0998\u0999\x03\x02\x02\x02\u0999\u09A4\x03\x02\x02\x02\u099A\u0998\x03" +
    "\x02\x02\x02\u099B\u099F\x05T+\x02\u099C\u099E\x07\u010C\x02\x02\u099D" +
    "\u099C\x03\x02\x02\x02\u099E\u09A1\x03\x02\x02\x02\u099F\u099D\x03\x02" +
    "\x02\x02\u099F\u09A0\x03\x02\x02\x02\u09A0\u09A3\x03\x02\x02\x02\u09A1" +
    "\u099F\x03\x02\x02\x02\u09A2\u099B\x03\x02\x02\x02\u09A3\u09A6\x03\x02" +
    "\x02\x02\u09A4\u09A2\x03\x02\x02\x02\u09A4\u09A5\x03\x02\x02\x02\u09A5" +
    "\x9F\x03\x02\x02\x02\u09A6\u09A4\x03\x02\x02\x02\u09A7\u09A8\x070\x02" +
    "\x02\u09A8\u09A9\x05\u01EE\xF8\x02\u09A9\u09AD\x07\xF3\x02\x02\u09AA\u09AC" +
    "\x07\u010C\x02\x02\u09AB\u09AA\x03\x02\x02\x02\u09AC\u09AF\x03\x02\x02" +
    "\x02\u09AD\u09AB\x03\x02\x02\x02\u09AD\u09AE\x03\x02\x02\x02\u09AE\u09B9" +
    "\x03\x02\x02\x02\u09AF\u09AD\x03\x02\x02\x02\u09B0\u09B4\x05T+\x02\u09B1" +
    "\u09B3\x07\u010C\x02\x02\u09B2\u09B1\x03\x02\x02\x02\u09B3\u09B6\x03\x02" +
    "\x02\x02\u09B4\u09B2\x03\x02\x02\x02\u09B4\u09B5\x03\x02\x02\x02\u09B5" +
    "\u09B8\x03\x02\x02\x02\u09B6\u09B4\x03\x02\x02\x02\u09B7\u09B0\x03\x02" +
    "\x02\x02\u09B8\u09BB\x03\x02\x02\x02\u09B9\u09B7\x03\x02\x02\x02\u09B9" +
    "\u09BA\x03\x02\x02\x02\u09BA\xA1\x03\x02\x02\x02\u09BB\u09B9\x03\x02\x02" +
    "\x02\u09BC\u09BD\x071\x02\x02\u09BD\u09BE\x05\u01EE\xF8\x02\u09BE\u09C2" +
    "\x07\xF3\x02\x02\u09BF\u09C1\x07\u010C\x02\x02\u09C0\u09BF\x03\x02\x02" +
    "\x02\u09C1\u09C4\x03\x02\x02\x02\u09C2\u09C0\x03\x02\x02\x02\u09C2\u09C3" +
    "\x03\x02\x02\x02\u09C3\u09CE\x03\x02\x02\x02\u09C4\u09C2\x03\x02\x02\x02" +
    "\u09C5\u09C9\x05T+\x02\u09C6\u09C8\x07\u010C\x02\x02\u09C7\u09C6\x03\x02" +
    "\x02\x02\u09C8\u09CB\x03\x02\x02\x02\u09C9\u09C7\x03\x02\x02\x02\u09C9" +
    "\u09CA\x03\x02\x02\x02\u09CA\u09CD\x03\x02\x02\x02\u09CB\u09C9\x03\x02" +
    "\x02\x02\u09CC\u09C5\x03\x02\x02\x02\u09CD\u09D0\x03\x02\x02\x02\u09CE" +
    "\u09CC\x03\x02\x02\x02\u09CE\u09CF\x03\x02\x02\x02\u09CF\xA3\x03\x02\x02" +
    "\x02\u09D0\u09CE\x03\x02\x02\x02\u09D1\u09D2\x07*\x02\x02\u09D2\u09D3" +
    "\x05\u01EE\xF8\x02\u09D3\u09D7\x07\xF3\x02\x02\u09D4\u09D6\x07\u010C\x02" +
    "\x02\u09D5\u09D4\x03\x02\x02\x02\u09D6\u09D9\x03\x02\x02\x02\u09D7\u09D5" +
    "\x03\x02\x02\x02\u09D7\u09D8\x03\x02\x02\x02\u09D8\u09E3\x03\x02\x02\x02" +
    "\u09D9\u09D7\x03\x02\x02\x02\u09DA\u09DE\x05T+\x02\u09DB\u09DD\x07\u010C" +
    "\x02\x02\u09DC\u09DB\x03\x02\x02\x02\u09DD\u09E0\x03\x02\x02\x02\u09DE" +
    "\u09DC\x03\x02\x02\x02\u09DE\u09DF\x03\x02\x02\x02\u09DF\u09E2\x03\x02" +
    "\x02\x02\u09E0\u09DE\x03\x02\x02\x02\u09E1\u09DA\x03\x02\x02\x02\u09E2" +
    "\u09E5\x03\x02\x02\x02\u09E3\u09E1\x03\x02\x02\x02\u09E3\u09E4\x03\x02" +
    "\x02\x02\u09E4\xA5\x03\x02\x02\x02\u09E5\u09E3\x03\x02\x02\x02\u09E6\u09E7" +
    "\x072\x02\x02\u09E7\u09E8\x05\u01EE\xF8\x02\u09E8\u09EC\x07\xF3\x02\x02" +
    "\u09E9\u09EB\x07\u010C\x02\x02\u09EA\u09E9\x03\x02\x02\x02\u09EB\u09EE" +
    "\x03\x02\x02\x02\u09EC\u09EA\x03\x02\x02\x02\u09EC\u09ED\x03\x02\x02\x02" +
    "\u09ED\u09F8\x03\x02\x02\x02\u09EE\u09EC\x03\x02\x02\x02\u09EF\u09F3\x05" +
    "T+\x02\u09F0\u09F2\x07\u010C\x02\x02\u09F1\u09F0\x03\x02\x02\x02\u09F2" +
    "\u09F5\x03\x02\x02\x02\u09F3\u09F1\x03\x02\x02\x02\u09F3\u09F4\x03\x02" +
    "\x02\x02\u09F4\u09F7\x03\x02\x02\x02\u09F5\u09F3\x03\x02\x02\x02\u09F6" +
    "\u09EF\x03\x02\x02\x02\u09F7\u09FA\x03\x02\x02\x02\u09F8\u09F6\x03\x02" +
    "\x02\x02\u09F8\u09F9\x03\x02\x02\x02\u09F9\xA7\x03\x02\x02\x02\u09FA\u09F8" +
    "\x03\x02\x02\x02\u09FB\u09FC\x07J\x02\x02\u09FC\u09FD\x05\u01EE\xF8\x02" +
    "\u09FD\u0A01\x07\xF3\x02\x02\u09FE\u0A00\x07\u010C\x02\x02\u09FF\u09FE" +
    "\x03\x02\x02\x02\u0A00\u0A03\x03\x02\x02\x02\u0A01\u09FF\x03\x02\x02\x02" +
    "\u0A01\u0A02\x03\x02\x02\x02\u0A02\u0A0D\x03\x02\x02\x02\u0A03\u0A01\x03" +
    "\x02\x02\x02\u0A04\u0A08\x05T+\x02\u0A05\u0A07\x07\u010C\x02\x02\u0A06" +
    "\u0A05\x03\x02\x02\x02\u0A07\u0A0A\x03\x02\x02\x02\u0A08\u0A06\x03\x02" +
    "\x02\x02\u0A08\u0A09\x03\x02\x02\x02\u0A09\u0A0C\x03\x02\x02\x02\u0A0A" +
    "\u0A08\x03\x02\x02\x02\u0A0B\u0A04\x03\x02\x02\x02\u0A0C\u0A0F\x03\x02" +
    "\x02\x02\u0A0D\u0A0B\x03\x02\x02\x02\u0A0D\u0A0E\x03\x02\x02\x02\u0A0E" +
    "\xA9\x03\x02\x02\x02\u0A0F\u0A0D\x03\x02\x02\x02\u0A10\u0A11\x07K\x02" +
    "\x02\u0A11\u0A12\x05\u01EE\xF8\x02\u0A12\u0A16\x07\xF3\x02\x02\u0A13\u0A15" +
    "\x07\u010C\x02\x02\u0A14\u0A13\x03\x02\x02\x02\u0A15\u0A18\x03\x02\x02" +
    "\x02\u0A16\u0A14\x03\x02\x02\x02\u0A16\u0A17\x03\x02\x02\x02\u0A17\u0A22" +
    "\x03\x02\x02\x02\u0A18\u0A16\x03\x02\x02\x02\u0A19\u0A1D\x05T+\x02\u0A1A" +
    "\u0A1C\x07\u010C\x02\x02\u0A1B\u0A1A\x03\x02\x02\x02\u0A1C\u0A1F\x03\x02" +
    "\x02\x02\u0A1D\u0A1B\x03\x02\x02\x02\u0A1D\u0A1E\x03\x02\x02\x02\u0A1E" +
    "\u0A21\x03\x02\x02\x02\u0A1F\u0A1D\x03\x02\x02\x02\u0A20\u0A19\x03\x02" +
    "\x02\x02\u0A21\u0A24\x03\x02\x02\x02\u0A22\u0A20\x03\x02\x02\x02\u0A22" +
    "\u0A23\x03\x02\x02\x02\u0A23\xAB\x03\x02\x02\x02\u0A24\u0A22\x03\x02\x02" +
    "\x02\u0A25\u0A26\x07L\x02\x02\u0A26\u0A27\x05\u01F4\xFB\x02\u0A27\u0A2B" +
    "\x07\xF3\x02\x02\u0A28\u0A2A\x07\u010C\x02\x02\u0A29\u0A28\x03\x02\x02" +
    "\x02\u0A2A\u0A2D\x03\x02\x02\x02\u0A2B\u0A29\x03\x02\x02\x02\u0A2B\u0A2C" +
    "\x03\x02\x02\x02\u0A2C\u0A37\x03\x02\x02\x02\u0A2D\u0A2B\x03\x02\x02\x02" +
    "\u0A2E\u0A32\x05T+\x02\u0A2F\u0A31\x07\u010C\x02\x02\u0A30\u0A2F\x03\x02" +
    "\x02\x02\u0A31\u0A34\x03\x02\x02\x02\u0A32\u0A30\x03\x02\x02\x02\u0A32" +
    "\u0A33\x03\x02\x02\x02\u0A33\u0A36\x03\x02\x02\x02\u0A34\u0A32\x03\x02" +
    "\x02\x02\u0A35\u0A2E\x03\x02\x02\x02\u0A36\u0A39\x03\x02\x02\x02\u0A37" +
    "\u0A35\x03\x02\x02\x02\u0A37\u0A38\x03\x02\x02\x02\u0A38\xAD\x03\x02\x02" +
    "\x02\u0A39\u0A37\x03\x02\x02\x02\u0A3A\u0A3B\x07M\x02\x02\u0A3B\u0A3C" +
    "\x05\u01F4\xFB\x02\u0A3C\u0A40\x07\xF3\x02\x02\u0A3D\u0A3F\x07\u010C\x02" +
    "\x02\u0A3E\u0A3D\x03\x02\x02\x02\u0A3F\u0A42\x03\x02\x02\x02\u0A40\u0A3E" +
    "\x03\x02\x02\x02\u0A40\u0A41\x03\x02\x02\x02\u0A41\u0A4C\x03\x02\x02\x02" +
    "\u0A42\u0A40\x03\x02\x02\x02\u0A43\u0A47\x05T+\x02\u0A44\u0A46\x07\u010C" +
    "\x02\x02\u0A45\u0A44\x03\x02\x02\x02\u0A46\u0A49\x03\x02\x02\x02\u0A47" +
    "\u0A45\x03\x02\x02\x02\u0A47\u0A48\x03\x02\x02\x02\u0A48\u0A4B\x03\x02" +
    "\x02\x02\u0A49\u0A47\x03\x02\x02\x02\u0A4A\u0A43\x03\x02\x02\x02\u0A4B" +
    "\u0A4E\x03\x02\x02\x02\u0A4C\u0A4A\x03\x02\x02\x02\u0A4C\u0A4D\x03\x02" +
    "\x02\x02\u0A4D\xAF\x03\x02\x02\x02\u0A4E\u0A4C\x03\x02\x02\x02\u0A4F\u0A50" +
    "\x07N\x02\x02\u0A50\u0A51\x05\u01F4\xFB\x02\u0A51\u0A55\x07\xF3\x02\x02" +
    "\u0A52\u0A54\x07\u010C\x02\x02\u0A53\u0A52\x03\x02\x02\x02\u0A54\u0A57" +
    "\x03\x02\x02\x02\u0A55\u0A53\x03\x02\x02\x02\u0A55\u0A56\x03\x02\x02\x02" +
    "\u0A56\u0A61\x03\x02\x02\x02\u0A57\u0A55\x03\x02\x02\x02\u0A58\u0A5C\x05" +
    "T+\x02\u0A59\u0A5B\x07\u010C\x02\x02\u0A5A\u0A59\x03\x02\x02\x02\u0A5B" +
    "\u0A5E\x03\x02\x02\x02\u0A5C\u0A5A\x03\x02\x02\x02\u0A5C\u0A5D\x03\x02" +
    "\x02\x02\u0A5D\u0A60\x03\x02\x02\x02\u0A5E\u0A5C\x03\x02\x02\x02\u0A5F" +
    "\u0A58\x03\x02\x02\x02\u0A60\u0A63\x03\x02\x02\x02\u0A61\u0A5F\x03\x02" +
    "\x02\x02\u0A61\u0A62\x03\x02\x02\x02\u0A62\xB1\x03\x02\x02\x02\u0A63\u0A61" +
    "\x03\x02\x02\x02\u0A64\u0A65\x07O\x02\x02\u0A65\u0A66\x05\u01F4\xFB\x02" +
    "\u0A66\u0A6A\x07\xF3\x02\x02\u0A67\u0A69\x07\u010C\x02\x02\u0A68\u0A67" +
    "\x03\x02\x02\x02\u0A69\u0A6C\x03\x02\x02\x02\u0A6A\u0A68\x03\x02\x02\x02" +
    "\u0A6A\u0A6B\x03\x02\x02\x02\u0A6B\u0A76\x03\x02\x02\x02\u0A6C\u0A6A\x03" +
    "\x02\x02\x02\u0A6D\u0A71\x05T+\x02\u0A6E\u0A70\x07\u010C\x02\x02\u0A6F" +
    "\u0A6E\x03\x02\x02\x02\u0A70\u0A73\x03\x02\x02\x02\u0A71\u0A6F\x03\x02" +
    "\x02\x02\u0A71\u0A72\x03\x02\x02\x02\u0A72\u0A75\x03\x02\x02\x02\u0A73" +
    "\u0A71\x03\x02\x02\x02\u0A74\u0A6D\x03\x02\x02\x02\u0A75\u0A78\x03\x02" +
    "\x02\x02\u0A76\u0A74\x03\x02\x02\x02\u0A76\u0A77\x03\x02\x02\x02\u0A77" +
    "\xB3\x03\x02\x02\x02\u0A78\u0A76\x03\x02\x02\x02\u0A79\u0A7A\x07P\x02" +
    "\x02\u0A7A\u0A7B\x05\u01F4\xFB\x02\u0A7B\u0A7F\x07\xF3\x02\x02\u0A7C\u0A7E" +
    "\x07\u010C\x02\x02\u0A7D\u0A7C\x03\x02\x02\x02\u0A7E\u0A81\x03\x02\x02" +
    "\x02\u0A7F\u0A7D\x03\x02\x02\x02\u0A7F\u0A80\x03\x02\x02\x02\u0A80\u0A8B" +
    "\x03\x02\x02\x02\u0A81\u0A7F\x03\x02\x02\x02\u0A82\u0A86\x05T+\x02\u0A83" +
    "\u0A85\x07\u010C\x02\x02\u0A84\u0A83\x03\x02\x02\x02\u0A85\u0A88\x03\x02" +
    "\x02\x02\u0A86\u0A84\x03\x02\x02\x02\u0A86\u0A87\x03\x02\x02\x02\u0A87" +
    "\u0A8A\x03\x02\x02\x02\u0A88\u0A86\x03\x02\x02\x02\u0A89\u0A82\x03\x02" +
    "\x02\x02\u0A8A\u0A8D\x03\x02\x02\x02\u0A8B\u0A89\x03\x02\x02\x02\u0A8B" +
    "\u0A8C\x03\x02\x02\x02\u0A8C\xB5\x03\x02\x02\x02\u0A8D\u0A8B\x03\x02\x02" +
    "\x02\u0A8E\u0A8F\x07Q\x02\x02\u0A8F\u0A90\x05\u01F4\xFB\x02\u0A90\u0A94" +
    "\x07\xF3\x02\x02\u0A91\u0A93\x07\u010C\x02\x02\u0A92\u0A91\x03\x02\x02" +
    "\x02\u0A93\u0A96\x03\x02\x02\x02\u0A94\u0A92\x03\x02\x02\x02\u0A94\u0A95" +
    "\x03\x02\x02\x02\u0A95\u0AA0\x03\x02\x02\x02\u0A96\u0A94\x03\x02\x02\x02" +
    "\u0A97\u0A9B\x05T+\x02\u0A98\u0A9A\x07\u010C\x02\x02\u0A99\u0A98\x03\x02" +
    "\x02\x02\u0A9A\u0A9D\x03\x02\x02\x02\u0A9B\u0A99\x03\x02\x02\x02\u0A9B" +
    "\u0A9C\x03\x02\x02\x02\u0A9C\u0A9F\x03\x02\x02\x02\u0A9D\u0A9B\x03\x02" +
    "\x02\x02\u0A9E\u0A97\x03\x02\x02\x02\u0A9F\u0AA2\x03\x02\x02\x02\u0AA0" +
    "\u0A9E\x03\x02\x02\x02\u0AA0\u0AA1\x03\x02\x02\x02\u0AA1\xB7\x03\x02\x02" +
    "\x02\u0AA2\u0AA0\x03\x02\x02\x02\u0AA3\u0AA4\x07R\x02\x02\u0AA4\u0AA5" +
    "\x05\u01F4\xFB\x02\u0AA5\u0AA9\x07\xF3\x02\x02\u0AA6\u0AA8\x07\u010C\x02" +
    "\x02\u0AA7\u0AA6\x03\x02\x02\x02\u0AA8\u0AAB\x03\x02\x02\x02\u0AA9\u0AA7" +
    "\x03\x02\x02\x02\u0AA9\u0AAA\x03\x02\x02\x02\u0AAA\u0AB5\x03\x02\x02\x02" +
    "\u0AAB\u0AA9\x03\x02\x02\x02\u0AAC\u0AB0\x05T+\x02\u0AAD\u0AAF\x07\u010C" +
    "\x02\x02\u0AAE\u0AAD\x03\x02\x02\x02\u0AAF\u0AB2\x03\x02\x02\x02\u0AB0" +
    "\u0AAE\x03\x02\x02\x02\u0AB0\u0AB1\x03\x02\x02\x02\u0AB1\u0AB4\x03\x02" +
    "\x02\x02\u0AB2\u0AB0\x03\x02\x02\x02\u0AB3\u0AAC\x03\x02\x02\x02\u0AB4" +
    "\u0AB7\x03\x02\x02\x02\u0AB5\u0AB3\x03\x02\x02\x02\u0AB5\u0AB6\x03\x02" +
    "\x02\x02\u0AB6\xB9\x03\x02\x02\x02\u0AB7\u0AB5\x03\x02\x02\x02\u0AB8\u0AB9" +
    "\x07S\x02\x02\u0AB9\u0ABA\x05\u01F4\xFB\x02\u0ABA\u0ABE\x07\xF3\x02\x02" +
    "\u0ABB\u0ABD\x07\u010C\x02\x02\u0ABC\u0ABB\x03\x02\x02\x02\u0ABD\u0AC0" +
    "\x03\x02\x02\x02\u0ABE\u0ABC\x03\x02\x02\x02\u0ABE\u0ABF\x03\x02\x02\x02" +
    "\u0ABF\u0ACA\x03\x02\x02\x02\u0AC0\u0ABE\x03\x02\x02\x02\u0AC1\u0AC5\x05" +
    "T+\x02\u0AC2\u0AC4\x07\u010C\x02\x02\u0AC3\u0AC2\x03\x02\x02\x02\u0AC4" +
    "\u0AC7\x03\x02\x02\x02\u0AC5\u0AC3\x03\x02\x02\x02\u0AC5\u0AC6\x03\x02" +
    "\x02\x02\u0AC6\u0AC9\x03\x02\x02\x02\u0AC7\u0AC5\x03\x02\x02\x02\u0AC8" +
    "\u0AC1\x03\x02\x02\x02\u0AC9\u0ACC\x03\x02\x02\x02\u0ACA\u0AC8\x03\x02" +
    "\x02\x02\u0ACA\u0ACB\x03\x02\x02\x02\u0ACB\xBB\x03\x02\x02\x02\u0ACC\u0ACA" +
    "\x03\x02\x02\x02\u0ACD\u0ACE\x07T\x02\x02\u0ACE\u0ACF\x05\u01F4\xFB\x02" +
    "\u0ACF\u0AD3\x07\xF3\x02\x02\u0AD0\u0AD2\x07\u010C\x02\x02\u0AD1\u0AD0" +
    "\x03\x02\x02\x02\u0AD2\u0AD5\x03\x02\x02\x02\u0AD3\u0AD1\x03\x02\x02\x02" +
    "\u0AD3\u0AD4\x03\x02\x02\x02\u0AD4\u0ADF\x03\x02\x02\x02\u0AD5\u0AD3\x03" +
    "\x02\x02\x02\u0AD6\u0ADA\x05T+\x02\u0AD7\u0AD9\x07\u010C\x02\x02\u0AD8" +
    "\u0AD7\x03\x02\x02\x02\u0AD9\u0ADC\x03\x02\x02\x02\u0ADA\u0AD8\x03\x02" +
    "\x02\x02\u0ADA\u0ADB\x03\x02\x02\x02\u0ADB\u0ADE\x03\x02\x02\x02\u0ADC" +
    "\u0ADA\x03\x02\x02\x02\u0ADD\u0AD6\x03\x02\x02\x02\u0ADE\u0AE1\x03\x02" +
    "\x02\x02\u0ADF\u0ADD\x03\x02\x02\x02\u0ADF\u0AE0\x03\x02\x02\x02\u0AE0" +
    "\xBD\x03\x02\x02\x02\u0AE1\u0ADF\x03\x02\x02\x02\u0AE2\u0AE3\x07U\x02" +
    "\x02\u0AE3\u0AE4\x05\u01F4\xFB\x02\u0AE4\u0AE8\x07\xF3\x02\x02\u0AE5\u0AE7" +
    "\x07\u010C\x02\x02\u0AE6\u0AE5\x03\x02\x02\x02\u0AE7\u0AEA\x03\x02\x02" +
    "\x02\u0AE8\u0AE6\x03\x02\x02\x02\u0AE8\u0AE9\x03\x02\x02\x02\u0AE9\u0AF4" +
    "\x03\x02\x02\x02\u0AEA\u0AE8\x03\x02\x02\x02\u0AEB\u0AEF\x05T+\x02\u0AEC" +
    "\u0AEE\x07\u010C\x02\x02\u0AED\u0AEC\x03\x02\x02\x02\u0AEE\u0AF1\x03\x02" +
    "\x02\x02\u0AEF\u0AED\x03\x02\x02\x02\u0AEF\u0AF0\x03\x02\x02\x02\u0AF0" +
    "\u0AF3\x03\x02\x02\x02\u0AF1\u0AEF\x03\x02\x02\x02\u0AF2\u0AEB\x03\x02" +
    "\x02\x02\u0AF3\u0AF6\x03\x02\x02\x02\u0AF4\u0AF2\x03\x02\x02\x02\u0AF4" +
    "\u0AF5\x03\x02\x02\x02\u0AF5\xBF\x03\x02\x02\x02\u0AF6\u0AF4\x03\x02\x02" +
    "\x02\u0AF7\u0AF8\x07V\x02\x02\u0AF8\u0AF9\x05\u01F4\xFB\x02\u0AF9\u0AFD" +
    "\x07\xF3\x02\x02\u0AFA\u0AFC\x07\u010C\x02\x02\u0AFB\u0AFA\x03\x02\x02" +
    "\x02\u0AFC\u0AFF\x03\x02\x02\x02\u0AFD\u0AFB\x03\x02\x02\x02\u0AFD\u0AFE" +
    "\x03\x02\x02\x02\u0AFE\u0B09\x03\x02\x02\x02\u0AFF\u0AFD\x03\x02\x02\x02" +
    "\u0B00\u0B04\x05T+\x02\u0B01\u0B03\x07\u010C\x02\x02\u0B02\u0B01\x03\x02" +
    "\x02\x02\u0B03\u0B06\x03\x02\x02\x02\u0B04\u0B02\x03\x02\x02\x02\u0B04" +
    "\u0B05\x03\x02\x02\x02\u0B05\u0B08\x03\x02\x02\x02\u0B06\u0B04\x03\x02" +
    "\x02\x02\u0B07\u0B00\x03\x02\x02\x02\u0B08\u0B0B\x03\x02\x02\x02\u0B09" +
    "\u0B07\x03\x02\x02\x02\u0B09\u0B0A\x03\x02\x02\x02\u0B0A\xC1\x03\x02\x02" +
    "\x02\u0B0B\u0B09\x03\x02\x02\x02\u0B0C\u0B0D\x07W\x02\x02\u0B0D\u0B0E" +
    "\x05\u01F4\xFB\x02\u0B0E\u0B12\x07\xF3\x02\x02\u0B0F\u0B11\x07\u010C\x02" +
    "\x02\u0B10\u0B0F\x03\x02\x02\x02\u0B11\u0B14\x03\x02\x02\x02\u0B12\u0B10" +
    "\x03\x02\x02\x02\u0B12\u0B13\x03\x02\x02\x02\u0B13\u0B1E\x03\x02\x02\x02" +
    "\u0B14\u0B12\x03\x02\x02\x02\u0B15\u0B19\x05T+\x02\u0B16\u0B18\x07\u010C" +
    "\x02\x02\u0B17\u0B16\x03\x02\x02\x02\u0B18\u0B1B\x03\x02\x02\x02\u0B19" +
    "\u0B17\x03\x02\x02\x02\u0B19\u0B1A\x03\x02\x02\x02\u0B1A\u0B1D\x03\x02" +
    "\x02\x02\u0B1B\u0B19\x03\x02\x02\x02\u0B1C\u0B15\x03\x02\x02\x02\u0B1D" +
    "\u0B20\x03\x02\x02\x02\u0B1E\u0B1C\x03\x02\x02\x02\u0B1E\u0B1F\x03\x02" +
    "\x02\x02\u0B1F\xC3\x03\x02\x02\x02\u0B20\u0B1E\x03\x02\x02\x02\u0B21\u0B22" +
    "\x07X\x02\x02\u0B22\u0B23\x05\u01F4\xFB\x02\u0B23\u0B27\x07\xF3\x02\x02" +
    "\u0B24\u0B26\x07\u010C\x02\x02\u0B25\u0B24\x03\x02\x02\x02\u0B26\u0B29" +
    "\x03\x02\x02\x02\u0B27\u0B25\x03\x02\x02\x02\u0B27\u0B28\x03\x02\x02\x02" +
    "\u0B28\u0B33\x03\x02\x02\x02\u0B29\u0B27\x03\x02\x02\x02\u0B2A\u0B2E\x05" +
    "T+\x02\u0B2B\u0B2D\x07\u010C\x02\x02\u0B2C\u0B2B\x03\x02\x02\x02\u0B2D" +
    "\u0B30\x03\x02\x02\x02\u0B2E\u0B2C\x03\x02\x02\x02\u0B2E\u0B2F\x03\x02" +
    "\x02\x02\u0B2F\u0B32";
bitmarkParser._serializedATNSegment7 = "\x03\x02\x02\x02\u0B30\u0B2E\x03\x02\x02\x02\u0B31\u0B2A\x03\x02\x02\x02" +
    "\u0B32\u0B35\x03\x02\x02\x02\u0B33\u0B31\x03\x02\x02\x02\u0B33\u0B34\x03" +
    "\x02\x02\x02\u0B34\xC5\x03\x02\x02\x02\u0B35\u0B33\x03\x02\x02\x02\u0B36" +
    "\u0B37\x07Y\x02\x02\u0B37\u0B38\x05\u01F4\xFB\x02\u0B38\u0B3C\x07\xF3" +
    "\x02\x02\u0B39\u0B3B\x07\u010C\x02\x02\u0B3A\u0B39\x03\x02\x02\x02\u0B3B" +
    "\u0B3E\x03\x02\x02\x02\u0B3C\u0B3A\x03\x02\x02\x02\u0B3C\u0B3D\x03\x02" +
    "\x02\x02\u0B3D\u0B48\x03\x02\x02\x02\u0B3E\u0B3C\x03\x02\x02\x02\u0B3F" +
    "\u0B43\x05T+\x02\u0B40\u0B42\x07\u010C\x02\x02\u0B41\u0B40\x03\x02\x02" +
    "\x02\u0B42\u0B45\x03\x02\x02\x02\u0B43\u0B41\x03\x02\x02\x02\u0B43\u0B44" +
    "\x03\x02\x02\x02\u0B44\u0B47\x03\x02\x02\x02\u0B45\u0B43\x03\x02\x02\x02" +
    "\u0B46\u0B3F\x03\x02\x02\x02\u0B47\u0B4A\x03\x02\x02\x02\u0B48\u0B46\x03" +
    "\x02\x02\x02\u0B48\u0B49\x03\x02\x02\x02\u0B49\xC7\x03\x02\x02\x02\u0B4A" +
    "\u0B48\x03\x02\x02\x02\u0B4B\u0B4C\x07Z\x02\x02\u0B4C\u0B4D\x05\u01F4" +
    "\xFB\x02\u0B4D\u0B51\x07\xF3\x02\x02\u0B4E\u0B50\x07\u010C\x02\x02\u0B4F" +
    "\u0B4E\x03\x02\x02\x02\u0B50\u0B53\x03\x02\x02\x02\u0B51\u0B4F\x03\x02" +
    "\x02\x02\u0B51\u0B52\x03\x02\x02\x02\u0B52\u0B5D\x03\x02\x02\x02\u0B53" +
    "\u0B51\x03\x02\x02\x02\u0B54\u0B58\x05T+\x02\u0B55\u0B57\x07\u010C\x02" +
    "\x02\u0B56\u0B55\x03\x02\x02\x02\u0B57\u0B5A\x03\x02\x02\x02\u0B58\u0B56" +
    "\x03\x02\x02\x02\u0B58\u0B59\x03\x02\x02\x02\u0B59\u0B5C\x03\x02\x02\x02" +
    "\u0B5A\u0B58\x03\x02\x02\x02\u0B5B\u0B54\x03\x02\x02\x02\u0B5C\u0B5F\x03" +
    "\x02\x02\x02\u0B5D\u0B5B\x03\x02\x02\x02\u0B5D\u0B5E\x03\x02\x02\x02\u0B5E" +
    "\xC9\x03\x02\x02\x02\u0B5F\u0B5D\x03\x02\x02\x02\u0B60\u0B61\x07[\x02" +
    "\x02\u0B61\u0B62\x05\u01F4\xFB\x02\u0B62\u0B66\x07\xF3\x02\x02\u0B63\u0B65" +
    "\x07\u010C\x02\x02\u0B64\u0B63\x03\x02\x02\x02\u0B65\u0B68\x03\x02\x02" +
    "\x02\u0B66\u0B64\x03\x02\x02\x02\u0B66\u0B67\x03\x02\x02\x02\u0B67\u0B72" +
    "\x03\x02\x02\x02\u0B68\u0B66\x03\x02\x02\x02\u0B69\u0B6D\x05T+\x02\u0B6A" +
    "\u0B6C\x07\u010C\x02\x02\u0B6B\u0B6A\x03\x02\x02\x02\u0B6C\u0B6F\x03\x02" +
    "\x02\x02\u0B6D\u0B6B\x03\x02\x02\x02\u0B6D\u0B6E\x03\x02\x02\x02\u0B6E" +
    "\u0B71\x03\x02\x02\x02\u0B6F\u0B6D\x03\x02\x02\x02\u0B70\u0B69\x03\x02" +
    "\x02\x02\u0B71\u0B74\x03\x02\x02\x02\u0B72\u0B70\x03\x02\x02\x02\u0B72" +
    "\u0B73\x03\x02\x02\x02\u0B73\xCB\x03\x02\x02\x02\u0B74\u0B72\x03\x02\x02" +
    "\x02\u0B75\u0B76\x07\\\x02\x02\u0B76\u0B77\x05\u01F4\xFB\x02\u0B77\u0B7B" +
    "\x07\xF3\x02\x02\u0B78\u0B7A\x07\u010C\x02\x02\u0B79\u0B78\x03\x02\x02" +
    "\x02\u0B7A\u0B7D\x03\x02\x02\x02\u0B7B\u0B79\x03\x02\x02\x02\u0B7B\u0B7C" +
    "\x03\x02\x02\x02\u0B7C\u0B87\x03\x02\x02\x02\u0B7D\u0B7B\x03\x02\x02\x02" +
    "\u0B7E\u0B82\x05T+\x02\u0B7F\u0B81\x07\u010C\x02\x02\u0B80\u0B7F\x03\x02" +
    "\x02\x02\u0B81\u0B84\x03\x02\x02\x02\u0B82\u0B80\x03\x02\x02\x02\u0B82" +
    "\u0B83\x03\x02\x02\x02\u0B83\u0B86\x03\x02\x02\x02\u0B84\u0B82\x03\x02" +
    "\x02\x02\u0B85\u0B7E\x03\x02\x02\x02\u0B86\u0B89\x03\x02\x02\x02\u0B87" +
    "\u0B85\x03\x02\x02\x02\u0B87\u0B88\x03\x02\x02\x02\u0B88\xCD\x03\x02\x02" +
    "\x02\u0B89\u0B87\x03\x02\x02\x02\u0B8A\u0B8B\x07]\x02\x02\u0B8B\u0B8C" +
    "\x05\u01F4\xFB\x02\u0B8C\u0B90\x07\xF3\x02\x02\u0B8D\u0B8F\x07\u010C\x02" +
    "\x02\u0B8E\u0B8D\x03\x02\x02\x02\u0B8F\u0B92\x03\x02\x02\x02\u0B90\u0B8E" +
    "\x03\x02\x02\x02\u0B90\u0B91\x03\x02\x02\x02\u0B91\u0B9C\x03\x02\x02\x02" +
    "\u0B92\u0B90\x03\x02\x02\x02\u0B93\u0B97\x05T+\x02\u0B94\u0B96\x07\u010C" +
    "\x02\x02\u0B95\u0B94\x03\x02\x02\x02\u0B96\u0B99\x03\x02\x02\x02\u0B97" +
    "\u0B95\x03\x02\x02\x02\u0B97\u0B98\x03\x02\x02\x02\u0B98\u0B9B\x03\x02" +
    "\x02\x02\u0B99\u0B97\x03\x02\x02\x02\u0B9A\u0B93\x03\x02\x02\x02\u0B9B" +
    "\u0B9E\x03\x02\x02\x02\u0B9C\u0B9A\x03\x02\x02\x02\u0B9C\u0B9D\x03\x02" +
    "\x02\x02\u0B9D\xCF\x03\x02\x02\x02\u0B9E\u0B9C\x03\x02\x02\x02\u0B9F\u0BA0" +
    "\x07^\x02\x02\u0BA0\u0BA1\x05\u01F4\xFB\x02\u0BA1\u0BA5\x07\xF3\x02\x02" +
    "\u0BA2\u0BA4\x07\u010C\x02\x02\u0BA3\u0BA2\x03\x02\x02\x02\u0BA4\u0BA7" +
    "\x03\x02\x02\x02\u0BA5\u0BA3\x03\x02\x02\x02\u0BA5\u0BA6\x03\x02\x02\x02" +
    "\u0BA6\u0BB1\x03\x02\x02\x02\u0BA7\u0BA5\x03\x02\x02\x02\u0BA8\u0BAC\x05" +
    "T+\x02\u0BA9\u0BAB\x07\u010C\x02\x02\u0BAA\u0BA9\x03\x02\x02\x02\u0BAB" +
    "\u0BAE\x03\x02\x02\x02\u0BAC\u0BAA\x03\x02\x02\x02\u0BAC\u0BAD\x03\x02" +
    "\x02\x02\u0BAD\u0BB0\x03\x02\x02\x02\u0BAE\u0BAC\x03\x02\x02\x02\u0BAF" +
    "\u0BA8\x03\x02\x02\x02\u0BB0\u0BB3\x03\x02\x02\x02\u0BB1\u0BAF\x03\x02" +
    "\x02\x02\u0BB1\u0BB2\x03\x02\x02\x02\u0BB2\xD1\x03\x02\x02\x02\u0BB3\u0BB1" +
    "\x03\x02\x02\x02\u0BB4\u0BB5\x07_\x02\x02\u0BB5\u0BB6\x05\u01F4\xFB\x02" +
    "\u0BB6\u0BBA\x07\xF3\x02\x02\u0BB7\u0BB9\x07\u010C\x02\x02\u0BB8\u0BB7" +
    "\x03\x02\x02\x02\u0BB9\u0BBC\x03\x02\x02\x02\u0BBA\u0BB8\x03\x02\x02\x02" +
    "\u0BBA\u0BBB\x03\x02\x02\x02\u0BBB\u0BC6\x03\x02\x02\x02\u0BBC\u0BBA\x03" +
    "\x02\x02\x02\u0BBD\u0BC1\x05T+\x02\u0BBE\u0BC0\x07\u010C\x02\x02\u0BBF" +
    "\u0BBE\x03\x02\x02\x02\u0BC0\u0BC3\x03\x02\x02\x02\u0BC1\u0BBF\x03\x02" +
    "\x02\x02\u0BC1\u0BC2\x03\x02\x02\x02\u0BC2\u0BC5\x03\x02\x02\x02\u0BC3" +
    "\u0BC1\x03\x02\x02\x02\u0BC4\u0BBD\x03\x02\x02\x02\u0BC5\u0BC8\x03\x02" +
    "\x02\x02\u0BC6\u0BC4\x03\x02\x02\x02\u0BC6\u0BC7\x03\x02\x02\x02\u0BC7" +
    "\xD3\x03\x02\x02\x02\u0BC8\u0BC6\x03\x02\x02\x02\u0BC9\u0BCA\x07`\x02" +
    "\x02\u0BCA\u0BCB\x05\u01F4\xFB\x02\u0BCB\u0BCF\x07\xF3\x02\x02\u0BCC\u0BCE" +
    "\x07\u010C\x02\x02\u0BCD\u0BCC\x03\x02\x02\x02\u0BCE\u0BD1\x03\x02\x02" +
    "\x02\u0BCF\u0BCD\x03\x02\x02\x02\u0BCF\u0BD0\x03\x02\x02\x02\u0BD0\u0BDB" +
    "\x03\x02\x02\x02\u0BD1\u0BCF\x03\x02\x02\x02\u0BD2\u0BD6\x05T+\x02\u0BD3" +
    "\u0BD5\x07\u010C\x02\x02\u0BD4\u0BD3\x03\x02\x02\x02\u0BD5\u0BD8\x03\x02" +
    "\x02\x02\u0BD6\u0BD4\x03\x02\x02\x02\u0BD6\u0BD7\x03\x02\x02\x02\u0BD7" +
    "\u0BDA\x03\x02\x02\x02\u0BD8\u0BD6\x03\x02\x02\x02\u0BD9\u0BD2\x03\x02" +
    "\x02\x02\u0BDA\u0BDD\x03\x02\x02\x02\u0BDB\u0BD9\x03\x02\x02\x02\u0BDB" +
    "\u0BDC\x03\x02\x02\x02\u0BDC\xD5\x03\x02\x02\x02\u0BDD\u0BDB\x03\x02\x02" +
    "\x02\u0BDE\u0BDF\x07a\x02\x02\u0BDF\u0BE0\x05\u01F4\xFB\x02\u0BE0\u0BE4" +
    "\x07\xF3\x02\x02\u0BE1\u0BE3\x07\u010C\x02\x02\u0BE2\u0BE1\x03\x02\x02" +
    "\x02\u0BE3\u0BE6\x03\x02\x02\x02\u0BE4\u0BE2\x03\x02\x02\x02\u0BE4\u0BE5" +
    "\x03\x02\x02\x02\u0BE5\u0BF0\x03\x02\x02\x02\u0BE6\u0BE4\x03\x02\x02\x02" +
    "\u0BE7\u0BEB\x05T+\x02\u0BE8\u0BEA\x07\u010C\x02\x02\u0BE9\u0BE8\x03\x02" +
    "\x02\x02\u0BEA\u0BED\x03\x02\x02\x02\u0BEB\u0BE9\x03\x02\x02\x02\u0BEB" +
    "\u0BEC\x03\x02\x02\x02\u0BEC\u0BEF\x03\x02\x02\x02\u0BED\u0BEB\x03\x02" +
    "\x02\x02\u0BEE\u0BE7\x03\x02\x02\x02\u0BEF\u0BF2\x03\x02\x02\x02\u0BF0" +
    "\u0BEE\x03\x02\x02\x02\u0BF0\u0BF1\x03\x02\x02\x02\u0BF1\xD7\x03\x02\x02" +
    "\x02\u0BF2\u0BF0\x03\x02\x02\x02\u0BF3\u0BF4\x07b\x02\x02\u0BF4\u0BF5" +
    "\x05\u01F4\xFB\x02\u0BF5\u0BF9\x07\xF3\x02\x02\u0BF6\u0BF8\x07\u010C\x02" +
    "\x02\u0BF7\u0BF6\x03\x02\x02\x02\u0BF8\u0BFB\x03\x02\x02\x02\u0BF9\u0BF7" +
    "\x03\x02\x02\x02\u0BF9\u0BFA\x03\x02\x02\x02\u0BFA\u0C05\x03\x02\x02\x02" +
    "\u0BFB\u0BF9\x03\x02\x02\x02\u0BFC\u0C00\x05T+\x02\u0BFD\u0BFF\x07\u010C" +
    "\x02\x02\u0BFE\u0BFD\x03\x02\x02\x02\u0BFF\u0C02\x03\x02\x02\x02\u0C00" +
    "\u0BFE\x03\x02\x02\x02\u0C00\u0C01\x03\x02\x02\x02\u0C01\u0C04\x03\x02" +
    "\x02\x02\u0C02\u0C00\x03\x02\x02\x02\u0C03\u0BFC\x03\x02\x02\x02\u0C04" +
    "\u0C07\x03\x02\x02\x02\u0C05\u0C03\x03\x02\x02\x02\u0C05\u0C06\x03\x02" +
    "\x02\x02\u0C06\xD9\x03\x02\x02\x02\u0C07\u0C05\x03\x02\x02\x02\u0C08\u0C09" +
    "\x07c\x02\x02\u0C09\u0C0A\x05\u01EE\xF8\x02\u0C0A\u0C0E\x07\xF3\x02\x02" +
    "\u0C0B\u0C0D\x07\u010C\x02\x02\u0C0C\u0C0B\x03\x02\x02\x02\u0C0D\u0C10" +
    "\x03\x02\x02\x02\u0C0E\u0C0C\x03\x02\x02\x02\u0C0E\u0C0F\x03\x02\x02\x02" +
    "\u0C0F\u0C1A\x03\x02\x02\x02\u0C10\u0C0E\x03\x02\x02\x02\u0C11\u0C15\x05" +
    "T+\x02\u0C12\u0C14\x07\u010C\x02\x02\u0C13\u0C12\x03\x02\x02\x02\u0C14" +
    "\u0C17\x03\x02\x02\x02\u0C15\u0C13\x03\x02\x02\x02\u0C15\u0C16\x03\x02" +
    "\x02\x02\u0C16\u0C19\x03\x02\x02\x02\u0C17\u0C15\x03\x02\x02\x02\u0C18" +
    "\u0C11\x03\x02\x02\x02\u0C19\u0C1C\x03\x02\x02\x02\u0C1A\u0C18\x03\x02" +
    "\x02\x02\u0C1A\u0C1B\x03\x02\x02\x02\u0C1B\xDB\x03\x02\x02\x02\u0C1C\u0C1A" +
    "\x03\x02\x02\x02\u0C1D\u0C1E\x07d\x02\x02\u0C1E\u0C1F\x05\u01EE\xF8\x02" +
    "\u0C1F\u0C23\x07\xF3\x02\x02\u0C20\u0C22\x07\u010C\x02\x02\u0C21\u0C20" +
    "\x03\x02\x02\x02\u0C22\u0C25\x03\x02\x02\x02\u0C23\u0C21\x03\x02\x02\x02" +
    "\u0C23\u0C24\x03\x02\x02\x02\u0C24\u0C2F\x03\x02\x02\x02\u0C25\u0C23\x03" +
    "\x02\x02\x02\u0C26\u0C2A\x05T+\x02\u0C27\u0C29\x07\u010C\x02\x02\u0C28" +
    "\u0C27\x03\x02\x02\x02\u0C29\u0C2C\x03\x02\x02\x02\u0C2A\u0C28\x03\x02" +
    "\x02\x02\u0C2A\u0C2B\x03\x02\x02\x02\u0C2B\u0C2E\x03\x02\x02\x02\u0C2C" +
    "\u0C2A\x03\x02\x02\x02\u0C2D\u0C26\x03\x02\x02\x02\u0C2E\u0C31\x03\x02" +
    "\x02\x02\u0C2F\u0C2D\x03\x02\x02\x02\u0C2F\u0C30\x03\x02\x02\x02\u0C30" +
    "\xDD\x03\x02\x02\x02\u0C31\u0C2F\x03\x02\x02\x02\u0C32\u0C33\x07e\x02" +
    "\x02\u0C33\u0C34\x05\u01EE\xF8\x02\u0C34\u0C38\x07\xF3\x02\x02\u0C35\u0C37" +
    "\x07\u010C\x02\x02\u0C36\u0C35\x03\x02\x02\x02\u0C37\u0C3A\x03\x02\x02" +
    "\x02\u0C38\u0C36\x03\x02\x02\x02\u0C38\u0C39\x03\x02\x02\x02\u0C39\u0C44" +
    "\x03\x02\x02\x02\u0C3A\u0C38\x03\x02\x02\x02\u0C3B\u0C3F\x05T+\x02\u0C3C" +
    "\u0C3E\x07\u010C\x02\x02\u0C3D\u0C3C\x03\x02\x02\x02\u0C3E\u0C41\x03\x02" +
    "\x02\x02\u0C3F\u0C3D\x03\x02\x02\x02\u0C3F\u0C40\x03\x02\x02\x02\u0C40" +
    "\u0C43\x03\x02\x02\x02\u0C41\u0C3F\x03\x02\x02\x02\u0C42\u0C3B\x03\x02" +
    "\x02\x02\u0C43\u0C46\x03\x02\x02\x02\u0C44\u0C42\x03\x02\x02\x02\u0C44" +
    "\u0C45\x03\x02\x02\x02\u0C45\xDF\x03\x02\x02\x02\u0C46\u0C44\x03\x02\x02" +
    "\x02\u0C47\u0C48\x07f\x02\x02\u0C48\u0C49\x05\u01EE\xF8\x02\u0C49\u0C4D" +
    "\x07\xF3\x02\x02\u0C4A\u0C4C\x07\u010C\x02\x02\u0C4B\u0C4A\x03\x02\x02" +
    "\x02\u0C4C\u0C4F\x03\x02\x02\x02\u0C4D\u0C4B\x03\x02\x02\x02\u0C4D\u0C4E" +
    "\x03\x02\x02\x02\u0C4E\u0C59\x03\x02\x02\x02\u0C4F\u0C4D\x03\x02\x02\x02" +
    "\u0C50\u0C54\x05T+\x02\u0C51\u0C53\x07\u010C\x02\x02\u0C52\u0C51\x03\x02" +
    "\x02\x02\u0C53\u0C56\x03\x02\x02\x02\u0C54\u0C52\x03\x02\x02\x02\u0C54" +
    "\u0C55\x03\x02\x02\x02\u0C55\u0C58\x03\x02\x02\x02\u0C56\u0C54\x03\x02" +
    "\x02\x02\u0C57\u0C50\x03\x02\x02\x02\u0C58\u0C5B\x03\x02\x02\x02\u0C59" +
    "\u0C57\x03\x02\x02\x02\u0C59\u0C5A\x03\x02\x02\x02\u0C5A\xE1\x03\x02\x02" +
    "\x02\u0C5B\u0C59\x03\x02\x02\x02\u0C5C\u0C5D\x07g\x02\x02\u0C5D\u0C5E" +
    "\x05\u01EE\xF8\x02\u0C5E\u0C62\x07\xF3\x02\x02\u0C5F\u0C61\x07\u010C\x02" +
    "\x02\u0C60\u0C5F\x03\x02\x02\x02\u0C61\u0C64\x03\x02\x02\x02\u0C62\u0C60" +
    "\x03\x02\x02\x02\u0C62\u0C63\x03\x02\x02\x02\u0C63\u0C6E\x03\x02\x02\x02" +
    "\u0C64\u0C62\x03\x02\x02\x02\u0C65\u0C69\x05T+\x02\u0C66\u0C68\x07\u010C" +
    "\x02\x02\u0C67\u0C66\x03\x02\x02\x02\u0C68\u0C6B\x03\x02\x02\x02\u0C69" +
    "\u0C67\x03\x02\x02\x02\u0C69\u0C6A\x03\x02\x02\x02\u0C6A\u0C6D\x03\x02" +
    "\x02\x02\u0C6B\u0C69\x03\x02\x02\x02\u0C6C\u0C65\x03\x02\x02\x02\u0C6D" +
    "\u0C70\x03\x02\x02\x02\u0C6E\u0C6C\x03\x02\x02\x02\u0C6E\u0C6F\x03\x02" +
    "\x02\x02\u0C6F\xE3\x03\x02\x02\x02\u0C70\u0C6E\x03\x02\x02\x02\u0C71\u0C72" +
    "\x07h\x02\x02\u0C72\u0C73\x05\u01EE\xF8\x02\u0C73\u0C77\x07\xF3\x02\x02" +
    "\u0C74\u0C76\x07\u010C\x02\x02\u0C75\u0C74\x03\x02\x02\x02\u0C76\u0C79" +
    "\x03\x02\x02\x02\u0C77\u0C75\x03\x02\x02\x02\u0C77\u0C78\x03\x02\x02\x02" +
    "\u0C78\u0C83\x03\x02\x02\x02\u0C79\u0C77\x03\x02\x02\x02\u0C7A\u0C7E\x05" +
    "T+\x02\u0C7B\u0C7D\x07\u010C\x02\x02\u0C7C\u0C7B\x03\x02\x02\x02\u0C7D" +
    "\u0C80\x03\x02\x02\x02\u0C7E\u0C7C\x03\x02\x02\x02\u0C7E\u0C7F\x03\x02" +
    "\x02\x02\u0C7F\u0C82\x03\x02\x02\x02\u0C80\u0C7E\x03\x02\x02\x02\u0C81" +
    "\u0C7A\x03\x02\x02\x02\u0C82\u0C85\x03\x02\x02\x02\u0C83\u0C81\x03\x02" +
    "\x02\x02\u0C83\u0C84\x03\x02\x02\x02\u0C84\xE5\x03\x02\x02\x02\u0C85\u0C83" +
    "\x03\x02\x02\x02\u0C86\u0C87\x07i\x02\x02\u0C87\u0C88\x05\u01EE\xF8\x02" +
    "\u0C88\u0C8C\x07\xF3\x02\x02\u0C89\u0C8B\x07\u010C\x02\x02\u0C8A\u0C89" +
    "\x03\x02\x02\x02\u0C8B\u0C8E\x03\x02\x02\x02\u0C8C\u0C8A\x03\x02\x02\x02" +
    "\u0C8C\u0C8D\x03\x02\x02\x02\u0C8D\u0C98\x03\x02\x02\x02\u0C8E\u0C8C\x03" +
    "\x02\x02\x02\u0C8F\u0C93\x05T+\x02\u0C90\u0C92\x07\u010C\x02\x02\u0C91" +
    "\u0C90\x03\x02\x02\x02\u0C92\u0C95\x03\x02\x02\x02\u0C93\u0C91\x03\x02" +
    "\x02\x02\u0C93\u0C94\x03\x02\x02\x02\u0C94\u0C97\x03\x02\x02\x02\u0C95" +
    "\u0C93\x03\x02\x02\x02\u0C96\u0C8F\x03\x02\x02\x02\u0C97\u0C9A\x03\x02" +
    "\x02\x02\u0C98\u0C96\x03\x02\x02\x02\u0C98\u0C99\x03\x02\x02\x02\u0C99" +
    "\xE7\x03\x02\x02\x02\u0C9A\u0C98\x03\x02\x02\x02\u0C9B\u0C9C\x07j\x02" +
    "\x02\u0C9C\u0C9D\x05\u01EE\xF8\x02\u0C9D\u0CA1\x07\xF3\x02\x02\u0C9E\u0CA0" +
    "\x07\u010C\x02\x02\u0C9F\u0C9E\x03\x02\x02\x02\u0CA0\u0CA3\x03\x02\x02" +
    "\x02\u0CA1\u0C9F\x03\x02\x02\x02\u0CA1\u0CA2\x03\x02\x02\x02\u0CA2\u0CAD" +
    "\x03\x02\x02\x02\u0CA3\u0CA1\x03\x02\x02\x02\u0CA4\u0CA8\x05T+\x02\u0CA5" +
    "\u0CA7\x07\u010C\x02\x02\u0CA6\u0CA5\x03\x02\x02\x02\u0CA7\u0CAA\x03\x02" +
    "\x02\x02\u0CA8\u0CA6\x03\x02\x02\x02\u0CA8\u0CA9\x03\x02\x02\x02\u0CA9" +
    "\u0CAC\x03\x02\x02\x02\u0CAA\u0CA8\x03\x02\x02\x02\u0CAB\u0CA4\x03\x02" +
    "\x02\x02\u0CAC\u0CAF\x03\x02\x02\x02\u0CAD\u0CAB\x03\x02\x02\x02\u0CAD" +
    "\u0CAE\x03\x02\x02\x02\u0CAE\xE9\x03\x02\x02\x02\u0CAF\u0CAD\x03\x02\x02" +
    "\x02\u0CB0\u0CB1\x07k\x02\x02\u0CB1\u0CB2\x05\u01EE\xF8\x02\u0CB2\u0CB6" +
    "\x07\xF3\x02\x02\u0CB3\u0CB5\x07\u010C\x02\x02\u0CB4\u0CB3\x03\x02\x02" +
    "\x02\u0CB5\u0CB8\x03\x02\x02\x02\u0CB6\u0CB4\x03\x02\x02\x02\u0CB6\u0CB7" +
    "\x03\x02\x02\x02\u0CB7\u0CC2\x03\x02\x02\x02\u0CB8\u0CB6\x03\x02\x02\x02" +
    "\u0CB9\u0CBD\x05T+\x02\u0CBA\u0CBC\x07\u010C\x02\x02\u0CBB\u0CBA\x03\x02" +
    "\x02\x02\u0CBC\u0CBF\x03\x02\x02\x02\u0CBD\u0CBB\x03\x02\x02\x02\u0CBD" +
    "\u0CBE\x03\x02\x02\x02\u0CBE\u0CC1\x03\x02\x02\x02\u0CBF\u0CBD\x03\x02" +
    "\x02\x02\u0CC0\u0CB9\x03\x02\x02\x02\u0CC1\u0CC4\x03\x02\x02\x02\u0CC2" +
    "\u0CC0\x03\x02\x02\x02\u0CC2\u0CC3\x03\x02\x02\x02\u0CC3\xEB\x03\x02\x02" +
    "\x02\u0CC4\u0CC2\x03\x02\x02\x02\u0CC5\u0CC6\x07l\x02\x02\u0CC6\u0CC7" +
    "\x05\u01EE\xF8\x02\u0CC7\u0CCB\x07\xF3\x02\x02\u0CC8\u0CCA\x07\u010C\x02" +
    "\x02\u0CC9\u0CC8\x03\x02\x02\x02\u0CCA\u0CCD\x03\x02\x02\x02\u0CCB\u0CC9" +
    "\x03\x02\x02\x02\u0CCB\u0CCC\x03\x02\x02\x02\u0CCC\u0CD7\x03\x02\x02\x02" +
    "\u0CCD\u0CCB\x03\x02\x02\x02\u0CCE\u0CD2\x05T+\x02\u0CCF\u0CD1\x07\u010C" +
    "\x02\x02\u0CD0\u0CCF\x03\x02\x02\x02\u0CD1\u0CD4\x03\x02\x02\x02\u0CD2" +
    "\u0CD0\x03\x02\x02\x02\u0CD2\u0CD3\x03\x02\x02\x02\u0CD3\u0CD6\x03\x02" +
    "\x02\x02\u0CD4\u0CD2\x03\x02\x02\x02\u0CD5\u0CCE\x03\x02\x02\x02\u0CD6" +
    "\u0CD9\x03\x02\x02\x02\u0CD7\u0CD5\x03\x02\x02\x02\u0CD7\u0CD8\x03\x02" +
    "\x02\x02\u0CD8\xED\x03\x02\x02\x02\u0CD9\u0CD7\x03\x02\x02\x02\u0CDA\u0CDB" +
    "\x07m\x02\x02\u0CDB\u0CDC\x05\u01EE\xF8\x02\u0CDC\u0CE0\x07\xF3\x02\x02" +
    "\u0CDD\u0CDF\x07\u010C\x02\x02\u0CDE\u0CDD\x03\x02\x02\x02\u0CDF\u0CE2" +
    "\x03\x02\x02\x02\u0CE0\u0CDE\x03\x02\x02\x02\u0CE0\u0CE1\x03\x02\x02\x02" +
    "\u0CE1\u0CEC\x03\x02\x02\x02\u0CE2\u0CE0\x03\x02\x02\x02\u0CE3\u0CE7\x05" +
    "T+\x02\u0CE4\u0CE6\x07\u010C\x02\x02\u0CE5\u0CE4\x03\x02\x02\x02\u0CE6" +
    "\u0CE9\x03\x02\x02\x02\u0CE7\u0CE5\x03\x02\x02\x02\u0CE7\u0CE8\x03\x02" +
    "\x02\x02\u0CE8\u0CEB\x03\x02\x02\x02\u0CE9\u0CE7\x03\x02\x02\x02\u0CEA" +
    "\u0CE3\x03\x02\x02\x02\u0CEB\u0CEE\x03\x02\x02\x02\u0CEC\u0CEA\x03\x02" +
    "\x02\x02\u0CEC\u0CED\x03\x02\x02\x02\u0CED\xEF\x03\x02\x02\x02\u0CEE\u0CEC" +
    "\x03\x02\x02\x02\u0CEF\u0CF0\x07n\x02\x02\u0CF0\u0CF1\x05\u01EE\xF8\x02" +
    "\u0CF1\u0CF5\x07\xF3\x02\x02\u0CF2\u0CF4\x07\u010C\x02\x02\u0CF3\u0CF2" +
    "\x03\x02\x02\x02\u0CF4\u0CF7\x03\x02\x02\x02\u0CF5\u0CF3\x03\x02\x02\x02" +
    "\u0CF5\u0CF6\x03\x02\x02\x02\u0CF6\u0D01\x03\x02\x02\x02\u0CF7\u0CF5\x03" +
    "\x02\x02\x02\u0CF8\u0CFC\x05T+\x02\u0CF9\u0CFB\x07\u010C\x02\x02\u0CFA" +
    "\u0CF9\x03\x02\x02\x02\u0CFB\u0CFE\x03\x02\x02\x02\u0CFC\u0CFA\x03\x02" +
    "\x02\x02\u0CFC\u0CFD\x03\x02\x02\x02\u0CFD\u0D00\x03\x02\x02\x02\u0CFE" +
    "\u0CFC\x03\x02\x02\x02\u0CFF\u0CF8\x03\x02\x02\x02\u0D00\u0D03\x03\x02" +
    "\x02\x02\u0D01\u0CFF\x03\x02\x02\x02\u0D01\u0D02\x03\x02\x02\x02\u0D02" +
    "\xF1\x03\x02\x02\x02\u0D03\u0D01\x03\x02\x02\x02\u0D04\u0D05\x07o\x02" +
    "\x02\u0D05\u0D06\x05\u01EE\xF8\x02\u0D06\u0D0A\x07\xF3\x02\x02\u0D07\u0D09" +
    "\x07\u010C\x02\x02\u0D08\u0D07\x03\x02\x02\x02\u0D09\u0D0C\x03\x02\x02" +
    "\x02\u0D0A\u0D08\x03\x02\x02\x02\u0D0A\u0D0B\x03\x02\x02\x02\u0D0B\u0D16" +
    "\x03\x02\x02\x02\u0D0C\u0D0A\x03\x02\x02\x02\u0D0D\u0D11\x05T+\x02\u0D0E" +
    "\u0D10\x07\u010C\x02\x02\u0D0F\u0D0E\x03\x02\x02\x02\u0D10\u0D13\x03\x02" +
    "\x02\x02\u0D11\u0D0F\x03\x02\x02\x02\u0D11\u0D12\x03\x02\x02\x02\u0D12" +
    "\u0D15\x03\x02\x02\x02\u0D13\u0D11\x03\x02\x02\x02\u0D14\u0D0D\x03\x02" +
    "\x02\x02\u0D15\u0D18\x03\x02\x02\x02\u0D16\u0D14\x03\x02\x02\x02\u0D16" +
    "\u0D17\x03\x02\x02\x02\u0D17\xF3\x03\x02\x02\x02\u0D18\u0D16\x03\x02\x02" +
    "\x02\u0D19\u0D1A\x07p\x02\x02\u0D1A\u0D1B\x05\u01EE\xF8\x02\u0D1B\u0D1F" +
    "\x07\xF3\x02\x02\u0D1C\u0D1E\x07\u010C\x02\x02\u0D1D\u0D1C\x03\x02\x02" +
    "\x02\u0D1E\u0D21\x03\x02\x02\x02\u0D1F\u0D1D\x03\x02\x02\x02\u0D1F\u0D20" +
    "\x03\x02\x02\x02\u0D20\u0D2B\x03\x02\x02\x02\u0D21\u0D1F\x03\x02\x02\x02" +
    "\u0D22\u0D26\x05T+\x02\u0D23\u0D25\x07\u010C\x02\x02\u0D24\u0D23\x03\x02" +
    "\x02\x02\u0D25\u0D28\x03\x02\x02\x02\u0D26\u0D24\x03\x02\x02\x02\u0D26" +
    "\u0D27\x03\x02\x02\x02\u0D27\u0D2A\x03\x02\x02\x02\u0D28\u0D26\x03\x02" +
    "\x02\x02\u0D29\u0D22\x03\x02\x02\x02\u0D2A\u0D2D\x03\x02\x02\x02\u0D2B" +
    "\u0D29\x03\x02\x02\x02\u0D2B\u0D2C\x03\x02\x02\x02\u0D2C\xF5\x03\x02\x02" +
    "\x02\u0D2D\u0D2B\x03\x02\x02\x02\u0D2E\u0D2F\x07q\x02\x02\u0D2F\u0D30" +
    "\x05\u01EE\xF8\x02\u0D30\u0D34\x07\xF3\x02\x02\u0D31\u0D33\x07\u010C\x02" +
    "\x02\u0D32\u0D31\x03\x02\x02\x02\u0D33\u0D36\x03\x02\x02\x02\u0D34\u0D32" +
    "\x03\x02\x02\x02\u0D34\u0D35\x03\x02\x02\x02\u0D35\u0D40\x03\x02\x02\x02" +
    "\u0D36\u0D34\x03\x02\x02\x02\u0D37\u0D3B\x05T+\x02\u0D38\u0D3A\x07\u010C" +
    "\x02\x02\u0D39\u0D38\x03\x02\x02\x02\u0D3A\u0D3D\x03\x02\x02\x02\u0D3B" +
    "\u0D39\x03\x02\x02\x02\u0D3B\u0D3C\x03\x02\x02\x02\u0D3C\u0D3F\x03\x02" +
    "\x02\x02\u0D3D\u0D3B\x03\x02\x02\x02\u0D3E\u0D37\x03\x02\x02\x02\u0D3F" +
    "\u0D42\x03\x02\x02\x02\u0D40\u0D3E\x03\x02\x02\x02\u0D40\u0D41\x03\x02" +
    "\x02\x02\u0D41\xF7\x03\x02\x02\x02\u0D42\u0D40\x03\x02\x02\x02\u0D43\u0D44" +
    "\x07r\x02\x02\u0D44\u0D45\x05\u01EE\xF8\x02\u0D45\u0D49\x07\xF3\x02\x02" +
    "\u0D46\u0D48\x07\u010C\x02\x02\u0D47\u0D46\x03\x02\x02\x02\u0D48\u0D4B" +
    "\x03\x02\x02\x02\u0D49\u0D47\x03\x02\x02\x02\u0D49\u0D4A\x03\x02\x02\x02" +
    "\u0D4A\u0D55\x03\x02\x02\x02\u0D4B\u0D49\x03\x02\x02\x02\u0D4C\u0D50\x05" +
    "T+\x02\u0D4D\u0D4F\x07\u010C\x02\x02\u0D4E\u0D4D\x03\x02\x02\x02\u0D4F" +
    "\u0D52\x03\x02\x02\x02\u0D50\u0D4E\x03\x02\x02\x02\u0D50\u0D51\x03\x02" +
    "\x02\x02\u0D51\u0D54\x03\x02\x02\x02\u0D52\u0D50\x03\x02\x02\x02\u0D53" +
    "\u0D4C\x03\x02\x02\x02\u0D54\u0D57\x03\x02\x02\x02\u0D55\u0D53\x03\x02" +
    "\x02\x02\u0D55\u0D56\x03\x02\x02\x02\u0D56\xF9\x03\x02\x02\x02\u0D57\u0D55" +
    "\x03\x02\x02\x02\u0D58\u0D59\x07s\x02\x02\u0D59\u0D5A\x05\u01EE\xF8\x02" +
    "\u0D5A\u0D5E\x07\xF3\x02\x02\u0D5B\u0D5D\x07\u010C\x02\x02\u0D5C\u0D5B" +
    "\x03\x02\x02\x02\u0D5D\u0D60\x03\x02\x02\x02\u0D5E\u0D5C\x03\x02\x02\x02" +
    "\u0D5E\u0D5F\x03\x02\x02\x02\u0D5F\u0D6A\x03\x02\x02\x02\u0D60\u0D5E\x03" +
    "\x02\x02\x02\u0D61\u0D65\x05T+\x02\u0D62\u0D64\x07\u010C\x02\x02\u0D63" +
    "\u0D62\x03\x02\x02\x02\u0D64\u0D67\x03\x02\x02\x02\u0D65\u0D63\x03\x02" +
    "\x02\x02\u0D65\u0D66\x03\x02\x02\x02\u0D66\u0D69\x03\x02\x02\x02\u0D67" +
    "\u0D65\x03\x02\x02\x02\u0D68\u0D61\x03\x02\x02\x02\u0D69\u0D6C\x03\x02" +
    "\x02\x02\u0D6A\u0D68\x03\x02\x02\x02\u0D6A\u0D6B\x03\x02\x02\x02\u0D6B" +
    "\xFB\x03\x02\x02\x02\u0D6C\u0D6A\x03\x02\x02\x02\u0D6D\u0D6E\x07t\x02" +
    "\x02\u0D6E\u0D6F\x05\u01EE\xF8\x02\u0D6F\u0D73\x07\xF3\x02\x02\u0D70\u0D72" +
    "\x07\u010C\x02\x02\u0D71\u0D70\x03\x02\x02\x02\u0D72\u0D75\x03\x02\x02" +
    "\x02\u0D73\u0D71\x03\x02\x02\x02\u0D73\u0D74\x03\x02\x02\x02\u0D74\u0D7F" +
    "\x03\x02\x02\x02\u0D75\u0D73\x03\x02\x02\x02\u0D76\u0D7A\x05T+\x02\u0D77" +
    "\u0D79\x07\u010C\x02\x02\u0D78\u0D77\x03\x02\x02\x02\u0D79\u0D7C\x03\x02" +
    "\x02\x02\u0D7A\u0D78\x03\x02\x02\x02\u0D7A\u0D7B\x03\x02\x02\x02\u0D7B" +
    "\u0D7E\x03\x02\x02\x02\u0D7C\u0D7A\x03\x02\x02\x02\u0D7D\u0D76\x03\x02" +
    "\x02\x02\u0D7E\u0D81\x03\x02\x02\x02\u0D7F\u0D7D\x03\x02\x02\x02\u0D7F" +
    "\u0D80\x03\x02\x02\x02\u0D80\xFD\x03\x02\x02\x02\u0D81\u0D7F\x03\x02\x02" +
    "\x02\u0D82\u0D83\x07u\x02\x02\u0D83\u0D84\x05\u01EE\xF8\x02\u0D84\u0D88" +
    "\x07\xF3\x02\x02\u0D85\u0D87\x07\u010C\x02\x02\u0D86\u0D85\x03\x02\x02" +
    "\x02\u0D87\u0D8A\x03\x02\x02\x02\u0D88\u0D86\x03\x02\x02\x02\u0D88\u0D89" +
    "\x03\x02\x02\x02\u0D89\u0D94\x03\x02\x02\x02\u0D8A\u0D88\x03\x02\x02\x02" +
    "\u0D8B\u0D8F\x05T+\x02\u0D8C\u0D8E\x07\u010C\x02\x02\u0D8D\u0D8C\x03\x02" +
    "\x02\x02\u0D8E\u0D91\x03\x02\x02\x02\u0D8F\u0D8D\x03\x02\x02\x02\u0D8F" +
    "\u0D90\x03\x02\x02\x02\u0D90\u0D93\x03\x02\x02\x02\u0D91\u0D8F\x03\x02" +
    "\x02\x02\u0D92\u0D8B\x03\x02\x02\x02\u0D93\u0D96\x03\x02\x02\x02\u0D94" +
    "\u0D92\x03\x02\x02\x02\u0D94\u0D95\x03\x02\x02\x02\u0D95\xFF\x03\x02\x02" +
    "\x02\u0D96\u0D94\x03\x02\x02\x02\u0D97\u0D98\x07v\x02\x02\u0D98\u0D99" +
    "\x05\u01EE\xF8\x02\u0D99\u0D9D\x07\xF3\x02\x02\u0D9A\u0D9C\x07\u010C\x02" +
    "\x02\u0D9B\u0D9A\x03\x02\x02\x02\u0D9C\u0D9F\x03\x02\x02\x02\u0D9D\u0D9B" +
    "\x03\x02\x02\x02\u0D9D\u0D9E\x03\x02\x02\x02\u0D9E\u0DA9\x03\x02\x02\x02" +
    "\u0D9F\u0D9D\x03\x02\x02\x02\u0DA0\u0DA4\x05T+\x02\u0DA1\u0DA3\x07\u010C" +
    "\x02\x02\u0DA2\u0DA1\x03\x02\x02\x02\u0DA3\u0DA6\x03\x02\x02\x02\u0DA4" +
    "\u0DA2\x03\x02\x02\x02\u0DA4\u0DA5\x03\x02\x02\x02\u0DA5\u0DA8\x03\x02" +
    "\x02\x02\u0DA6\u0DA4\x03\x02\x02\x02\u0DA7\u0DA0\x03\x02\x02\x02\u0DA8" +
    "\u0DAB\x03\x02\x02\x02\u0DA9\u0DA7\x03\x02\x02\x02\u0DA9\u0DAA\x03\x02" +
    "\x02\x02\u0DAA\u0101\x03\x02\x02\x02\u0DAB\u0DA9\x03\x02\x02\x02\u0DAC" +
    "\u0DAD\x07w\x02\x02\u0DAD\u0DAE\x05\u01EE\xF8\x02\u0DAE\u0DB2\x07\xF3" +
    "\x02\x02\u0DAF\u0DB1\x07\u010C\x02\x02\u0DB0\u0DAF\x03\x02\x02\x02\u0DB1" +
    "\u0DB4\x03\x02\x02\x02\u0DB2\u0DB0\x03\x02\x02\x02\u0DB2\u0DB3\x03\x02" +
    "\x02\x02\u0DB3\u0DBE\x03\x02\x02\x02\u0DB4\u0DB2\x03\x02\x02\x02\u0DB5" +
    "\u0DB9\x05T+\x02\u0DB6\u0DB8\x07\u010C\x02\x02\u0DB7\u0DB6\x03\x02\x02" +
    "\x02\u0DB8\u0DBB\x03\x02\x02\x02\u0DB9\u0DB7\x03\x02\x02\x02\u0DB9\u0DBA" +
    "\x03\x02\x02\x02\u0DBA\u0DBD\x03\x02\x02\x02\u0DBB\u0DB9\x03\x02\x02\x02" +
    "\u0DBC\u0DB5\x03\x02\x02\x02\u0DBD\u0DC0\x03\x02\x02\x02\u0DBE\u0DBC\x03" +
    "\x02\x02\x02\u0DBE\u0DBF\x03\x02\x02\x02\u0DBF\u0103\x03\x02\x02\x02\u0DC0" +
    "\u0DBE\x03\x02\x02\x02\u0DC1\u0DC2\x07x\x02\x02\u0DC2\u0DC3\x05\u01EE" +
    "\xF8\x02\u0DC3\u0DC7\x07\xF3\x02\x02\u0DC4\u0DC6\x07\u010C\x02\x02\u0DC5" +
    "\u0DC4\x03\x02\x02\x02\u0DC6\u0DC9\x03\x02\x02\x02\u0DC7\u0DC5\x03\x02" +
    "\x02\x02\u0DC7\u0DC8\x03\x02\x02\x02\u0DC8\u0DD3\x03\x02\x02\x02\u0DC9" +
    "\u0DC7\x03\x02\x02\x02\u0DCA\u0DCE\x05T+\x02\u0DCB\u0DCD\x07\u010C\x02" +
    "\x02\u0DCC\u0DCB\x03\x02\x02\x02\u0DCD\u0DD0\x03\x02\x02\x02\u0DCE\u0DCC" +
    "\x03\x02\x02\x02\u0DCE\u0DCF\x03\x02\x02\x02\u0DCF\u0DD2\x03\x02\x02\x02" +
    "\u0DD0\u0DCE\x03\x02\x02\x02\u0DD1\u0DCA\x03\x02\x02\x02\u0DD2\u0DD5\x03" +
    "\x02\x02\x02\u0DD3\u0DD1\x03\x02\x02\x02\u0DD3\u0DD4\x03\x02\x02\x02\u0DD4" +
    "\u0105\x03\x02\x02\x02\u0DD5\u0DD3\x03\x02\x02\x02\u0DD6\u0DD7\x07y\x02" +
    "\x02\u0DD7\u0DD8\x05\u01EE\xF8\x02\u0DD8\u0DDC\x07\xF3\x02\x02\u0DD9\u0DDB" +
    "\x07\u010C\x02\x02\u0DDA\u0DD9\x03\x02\x02\x02\u0DDB\u0DDE\x03\x02\x02" +
    "\x02\u0DDC\u0DDA\x03\x02\x02\x02\u0DDC\u0DDD\x03\x02\x02\x02\u0DDD\u0DE8" +
    "\x03\x02\x02\x02\u0DDE\u0DDC\x03\x02\x02\x02\u0DDF\u0DE3\x05T+\x02\u0DE0" +
    "\u0DE2\x07\u010C\x02\x02\u0DE1\u0DE0\x03\x02\x02\x02\u0DE2\u0DE5\x03\x02" +
    "\x02\x02\u0DE3\u0DE1\x03\x02\x02\x02\u0DE3\u0DE4\x03\x02\x02\x02\u0DE4" +
    "\u0DE7\x03\x02\x02\x02\u0DE5\u0DE3\x03\x02\x02\x02\u0DE6\u0DDF\x03\x02" +
    "\x02\x02\u0DE7\u0DEA\x03\x02\x02\x02\u0DE8\u0DE6\x03\x02\x02\x02\u0DE8" +
    "\u0DE9\x03\x02\x02\x02\u0DE9\u0107\x03\x02\x02\x02\u0DEA\u0DE8\x03\x02" +
    "\x02\x02\u0DEB\u0DEC\x07z\x02\x02\u0DEC\u0DED\x05\u01EE\xF8\x02\u0DED" +
    "\u0DF1\x07\xF3\x02\x02\u0DEE\u0DF0\x07\u010C\x02\x02\u0DEF\u0DEE\x03\x02" +
    "\x02\x02\u0DF0\u0DF3\x03\x02\x02\x02\u0DF1\u0DEF\x03\x02\x02\x02\u0DF1" +
    "\u0DF2\x03\x02\x02\x02\u0DF2\u0DFD\x03\x02\x02\x02\u0DF3\u0DF1\x03\x02" +
    "\x02\x02\u0DF4\u0DF8\x05T+\x02\u0DF5\u0DF7\x07\u010C\x02\x02\u0DF6\u0DF5" +
    "\x03\x02\x02\x02\u0DF7\u0DFA\x03\x02\x02\x02\u0DF8\u0DF6\x03\x02\x02\x02" +
    "\u0DF8\u0DF9\x03\x02\x02\x02\u0DF9\u0DFC\x03\x02\x02\x02\u0DFA\u0DF8\x03" +
    "\x02\x02\x02\u0DFB\u0DF4\x03\x02\x02\x02\u0DFC\u0DFF\x03\x02\x02\x02\u0DFD" +
    "\u0DFB\x03\x02\x02\x02\u0DFD\u0DFE\x03\x02\x02\x02\u0DFE\u0109\x03\x02" +
    "\x02\x02\u0DFF\u0DFD\x03\x02\x02\x02\u0E00\u0E01\x07{\x02\x02\u0E01\u0E02" +
    "\x05\u01EE\xF8\x02\u0E02\u0E06\x07\xF3\x02\x02\u0E03\u0E05\x07\u010C\x02" +
    "\x02\u0E04\u0E03\x03\x02\x02\x02\u0E05\u0E08\x03\x02\x02\x02\u0E06\u0E04" +
    "\x03\x02\x02\x02\u0E06\u0E07\x03\x02\x02\x02\u0E07\u0E12\x03\x02\x02\x02" +
    "\u0E08\u0E06\x03\x02";
bitmarkParser._serializedATNSegment8 = "\x02\x02\u0E09\u0E0D\x05T+\x02\u0E0A\u0E0C\x07\u010C\x02\x02\u0E0B\u0E0A" +
    "\x03\x02\x02\x02\u0E0C\u0E0F\x03\x02\x02\x02\u0E0D\u0E0B\x03\x02\x02\x02" +
    "\u0E0D\u0E0E\x03\x02\x02\x02\u0E0E\u0E11\x03\x02\x02\x02\u0E0F\u0E0D\x03" +
    "\x02\x02\x02\u0E10\u0E09\x03\x02\x02\x02\u0E11\u0E14\x03\x02\x02\x02\u0E12" +
    "\u0E10\x03\x02\x02\x02\u0E12\u0E13\x03\x02\x02\x02\u0E13\u010B\x03\x02" +
    "\x02\x02\u0E14\u0E12\x03\x02\x02\x02\u0E15\u0E16\x07|\x02\x02\u0E16\u0E17" +
    "\x05\u01EE\xF8\x02\u0E17\u0E1B\x07\xF3\x02\x02\u0E18\u0E1A\x07\u010C\x02" +
    "\x02\u0E19\u0E18\x03\x02\x02\x02\u0E1A\u0E1D\x03\x02\x02\x02\u0E1B\u0E19" +
    "\x03\x02\x02\x02\u0E1B\u0E1C\x03\x02\x02\x02\u0E1C\u0E27\x03\x02\x02\x02" +
    "\u0E1D\u0E1B\x03\x02\x02\x02\u0E1E\u0E22\x05T+\x02\u0E1F\u0E21\x07\u010C" +
    "\x02\x02\u0E20\u0E1F\x03\x02\x02\x02\u0E21\u0E24\x03\x02\x02\x02\u0E22" +
    "\u0E20\x03\x02\x02\x02\u0E22\u0E23\x03\x02\x02\x02\u0E23\u0E26\x03\x02" +
    "\x02\x02\u0E24\u0E22\x03\x02\x02\x02\u0E25\u0E1E\x03\x02\x02\x02\u0E26" +
    "\u0E29\x03\x02\x02\x02\u0E27\u0E25\x03\x02\x02\x02\u0E27\u0E28\x03\x02" +
    "\x02\x02\u0E28\u010D\x03\x02\x02\x02\u0E29\u0E27\x03\x02\x02\x02\u0E2A" +
    "\u0E2B\x07}\x02\x02\u0E2B\u0E2C\x05\u01EE\xF8\x02\u0E2C\u0E30\x07\xF3" +
    "\x02\x02\u0E2D\u0E2F\x07\u010C\x02\x02\u0E2E\u0E2D\x03\x02\x02\x02\u0E2F" +
    "\u0E32\x03\x02\x02\x02\u0E30\u0E2E\x03\x02\x02\x02\u0E30\u0E31\x03\x02" +
    "\x02\x02\u0E31\u0E3C\x03\x02\x02\x02\u0E32\u0E30\x03\x02\x02\x02\u0E33" +
    "\u0E37\x05T+\x02\u0E34\u0E36\x07\u010C\x02\x02\u0E35\u0E34\x03\x02\x02" +
    "\x02\u0E36\u0E39\x03\x02\x02\x02\u0E37\u0E35\x03\x02\x02\x02\u0E37\u0E38" +
    "\x03\x02\x02\x02\u0E38\u0E3B\x03\x02\x02\x02\u0E39\u0E37\x03\x02\x02\x02" +
    "\u0E3A\u0E33\x03\x02\x02\x02\u0E3B\u0E3E\x03\x02\x02\x02\u0E3C\u0E3A\x03" +
    "\x02\x02\x02\u0E3C\u0E3D\x03\x02\x02\x02\u0E3D\u010F\x03\x02\x02\x02\u0E3E" +
    "\u0E3C\x03\x02\x02\x02\u0E3F\u0E40\x07~\x02\x02\u0E40\u0E41\x05\u01EE" +
    "\xF8\x02\u0E41\u0E45\x07\xF3\x02\x02\u0E42\u0E44\x07\u010C\x02\x02\u0E43" +
    "\u0E42\x03\x02\x02\x02\u0E44\u0E47\x03\x02\x02\x02\u0E45\u0E43\x03\x02" +
    "\x02\x02\u0E45\u0E46\x03\x02\x02\x02\u0E46\u0E51\x03\x02\x02\x02\u0E47" +
    "\u0E45\x03\x02\x02\x02\u0E48\u0E4C\x05T+\x02\u0E49\u0E4B\x07\u010C\x02" +
    "\x02\u0E4A\u0E49\x03\x02\x02\x02\u0E4B\u0E4E\x03\x02\x02\x02\u0E4C\u0E4A" +
    "\x03\x02\x02\x02\u0E4C\u0E4D\x03\x02\x02\x02\u0E4D\u0E50\x03\x02\x02\x02" +
    "\u0E4E\u0E4C\x03\x02\x02\x02\u0E4F\u0E48\x03\x02\x02\x02\u0E50\u0E53\x03" +
    "\x02\x02\x02\u0E51\u0E4F\x03\x02\x02\x02\u0E51\u0E52\x03\x02\x02\x02\u0E52" +
    "\u0111\x03\x02\x02\x02\u0E53\u0E51\x03\x02\x02\x02\u0E54\u0E55\x07\x7F" +
    "\x02\x02\u0E55\u0E56\x05\u01EE\xF8\x02\u0E56\u0E5A\x07\xF3\x02\x02\u0E57" +
    "\u0E59\x07\u010C\x02\x02\u0E58\u0E57\x03\x02\x02\x02\u0E59\u0E5C\x03\x02" +
    "\x02\x02\u0E5A\u0E58\x03\x02\x02\x02\u0E5A\u0E5B\x03\x02\x02\x02\u0E5B" +
    "\u0E66\x03\x02\x02\x02\u0E5C\u0E5A\x03\x02\x02\x02\u0E5D\u0E61\x05T+\x02" +
    "\u0E5E\u0E60\x07\u010C\x02\x02\u0E5F\u0E5E\x03\x02\x02\x02\u0E60\u0E63" +
    "\x03\x02\x02\x02\u0E61\u0E5F\x03\x02\x02\x02\u0E61\u0E62\x03\x02\x02\x02" +
    "\u0E62\u0E65\x03\x02\x02\x02\u0E63\u0E61\x03\x02\x02\x02\u0E64\u0E5D\x03" +
    "\x02\x02\x02\u0E65\u0E68\x03\x02\x02\x02\u0E66\u0E64\x03\x02\x02\x02\u0E66" +
    "\u0E67\x03\x02\x02\x02\u0E67\u0113\x03\x02\x02\x02\u0E68\u0E66\x03\x02" +
    "\x02\x02\u0E69\u0E6A\x07\x80\x02\x02\u0E6A\u0E6B\x05\u01EE\xF8\x02\u0E6B" +
    "\u0E6F\x07\xF3\x02\x02\u0E6C\u0E6E\x07\u010C\x02\x02\u0E6D\u0E6C\x03\x02" +
    "\x02\x02\u0E6E\u0E71\x03\x02\x02\x02\u0E6F\u0E6D\x03\x02\x02\x02\u0E6F" +
    "\u0E70\x03\x02\x02\x02\u0E70\u0E7B\x03\x02\x02\x02\u0E71\u0E6F\x03\x02" +
    "\x02\x02\u0E72\u0E76\x05T+\x02\u0E73\u0E75\x07\u010C\x02\x02\u0E74\u0E73" +
    "\x03\x02\x02\x02\u0E75\u0E78\x03\x02\x02\x02\u0E76\u0E74\x03\x02\x02\x02" +
    "\u0E76\u0E77\x03\x02\x02\x02\u0E77\u0E7A\x03\x02\x02\x02\u0E78\u0E76\x03" +
    "\x02\x02\x02\u0E79\u0E72\x03\x02\x02\x02\u0E7A\u0E7D\x03\x02\x02\x02\u0E7B" +
    "\u0E79\x03\x02\x02\x02\u0E7B\u0E7C\x03\x02\x02\x02\u0E7C\u0115\x03\x02" +
    "\x02\x02\u0E7D\u0E7B\x03\x02\x02\x02\u0E7E\u0E7F\x07\x81\x02\x02\u0E7F" +
    "\u0E80\x05\u01EE\xF8\x02\u0E80\u0E84\x07\xF3\x02\x02\u0E81\u0E83\x07\u010C" +
    "\x02\x02\u0E82\u0E81\x03\x02\x02\x02\u0E83\u0E86\x03\x02\x02\x02\u0E84" +
    "\u0E82\x03\x02\x02\x02\u0E84\u0E85\x03\x02\x02\x02\u0E85\u0E90\x03\x02" +
    "\x02\x02\u0E86\u0E84\x03\x02\x02\x02\u0E87\u0E8B\x05T+\x02\u0E88\u0E8A" +
    "\x07\u010C\x02\x02\u0E89\u0E88\x03\x02\x02\x02\u0E8A\u0E8D\x03\x02\x02" +
    "\x02\u0E8B\u0E89\x03\x02\x02\x02\u0E8B\u0E8C\x03\x02\x02\x02\u0E8C\u0E8F" +
    "\x03\x02\x02\x02\u0E8D\u0E8B\x03\x02\x02\x02\u0E8E\u0E87\x03\x02\x02\x02" +
    "\u0E8F\u0E92\x03\x02\x02\x02\u0E90\u0E8E\x03\x02\x02\x02\u0E90\u0E91\x03" +
    "\x02\x02\x02\u0E91\u0117\x03\x02\x02\x02\u0E92\u0E90\x03\x02\x02\x02\u0E93" +
    "\u0E94\x07\x82\x02\x02\u0E94\u0E95\x05\u01EE\xF8\x02\u0E95\u0E99\x07\xF3" +
    "\x02\x02\u0E96\u0E98\x07\u010C\x02\x02\u0E97\u0E96\x03\x02\x02\x02\u0E98" +
    "\u0E9B\x03\x02\x02\x02\u0E99\u0E97\x03\x02\x02\x02\u0E99\u0E9A\x03\x02" +
    "\x02\x02\u0E9A\u0EA5\x03\x02\x02\x02\u0E9B\u0E99\x03\x02\x02\x02\u0E9C" +
    "\u0EA0\x05T+\x02\u0E9D\u0E9F\x07\u010C\x02\x02\u0E9E\u0E9D\x03\x02\x02" +
    "\x02\u0E9F\u0EA2\x03\x02\x02\x02\u0EA0\u0E9E\x03\x02\x02\x02\u0EA0\u0EA1" +
    "\x03\x02\x02\x02\u0EA1\u0EA4\x03\x02\x02\x02\u0EA2\u0EA0\x03\x02\x02\x02" +
    "\u0EA3\u0E9C\x03\x02\x02\x02\u0EA4\u0EA7\x03\x02\x02\x02\u0EA5\u0EA3\x03" +
    "\x02\x02\x02\u0EA5\u0EA6\x03\x02\x02\x02\u0EA6\u0119\x03\x02\x02\x02\u0EA7" +
    "\u0EA5\x03\x02\x02\x02\u0EA8\u0EA9\x07\x83\x02\x02\u0EA9\u0EAA\x05\u01F4" +
    "\xFB\x02\u0EAA\u0EAE\x07\xF3\x02\x02\u0EAB\u0EAD\x07\u010C\x02\x02\u0EAC" +
    "\u0EAB\x03\x02\x02\x02\u0EAD\u0EB0\x03\x02\x02\x02\u0EAE\u0EAC\x03\x02" +
    "\x02\x02\u0EAE\u0EAF\x03\x02\x02\x02\u0EAF\u0EBA\x03\x02\x02\x02\u0EB0" +
    "\u0EAE\x03\x02\x02\x02\u0EB1\u0EB5\x05T+\x02\u0EB2\u0EB4\x07\u010C\x02" +
    "\x02\u0EB3\u0EB2\x03\x02\x02\x02\u0EB4\u0EB7\x03\x02\x02\x02\u0EB5\u0EB3" +
    "\x03\x02\x02\x02\u0EB5\u0EB6\x03\x02\x02\x02\u0EB6\u0EB9\x03\x02\x02\x02" +
    "\u0EB7\u0EB5\x03\x02\x02\x02\u0EB8\u0EB1\x03\x02\x02\x02\u0EB9\u0EBC\x03" +
    "\x02\x02\x02\u0EBA\u0EB8\x03\x02\x02\x02\u0EBA\u0EBB\x03\x02\x02\x02\u0EBB" +
    "\u011B\x03\x02\x02\x02\u0EBC\u0EBA\x03\x02\x02\x02\u0EBD\u0EBE\x07\x84" +
    "\x02\x02\u0EBE\u0EBF\x05\u01F4\xFB\x02\u0EBF\u0EC3\x07\xF3\x02\x02\u0EC0" +
    "\u0EC2\x07\u010C\x02\x02\u0EC1\u0EC0\x03\x02\x02\x02\u0EC2\u0EC5\x03\x02" +
    "\x02\x02\u0EC3\u0EC1\x03\x02\x02\x02\u0EC3\u0EC4\x03\x02\x02\x02\u0EC4" +
    "\u0ECF\x03\x02\x02\x02\u0EC5\u0EC3\x03\x02\x02\x02\u0EC6\u0ECA\x05T+\x02" +
    "\u0EC7\u0EC9\x07\u010C\x02\x02\u0EC8\u0EC7\x03\x02\x02\x02\u0EC9\u0ECC" +
    "\x03\x02\x02\x02\u0ECA\u0EC8\x03\x02\x02\x02\u0ECA\u0ECB\x03\x02\x02\x02" +
    "\u0ECB\u0ECE\x03\x02\x02\x02\u0ECC\u0ECA\x03\x02\x02\x02\u0ECD\u0EC6\x03" +
    "\x02\x02\x02\u0ECE\u0ED1\x03\x02\x02\x02\u0ECF\u0ECD\x03\x02\x02\x02\u0ECF" +
    "\u0ED0\x03\x02\x02\x02\u0ED0\u011D\x03\x02\x02\x02\u0ED1\u0ECF\x03\x02" +
    "\x02\x02\u0ED2\u0ED3\x07\x85\x02\x02\u0ED3\u0ED4\x05\u01F4\xFB\x02\u0ED4" +
    "\u0ED8\x07\xF3\x02\x02\u0ED5\u0ED7\x07\u010C\x02\x02\u0ED6\u0ED5\x03\x02" +
    "\x02\x02\u0ED7\u0EDA\x03\x02\x02\x02\u0ED8\u0ED6\x03\x02\x02\x02\u0ED8" +
    "\u0ED9\x03\x02\x02\x02\u0ED9\u0EE4\x03\x02\x02\x02\u0EDA\u0ED8\x03\x02" +
    "\x02\x02\u0EDB\u0EDF\x05T+\x02\u0EDC\u0EDE\x07\u010C\x02\x02\u0EDD\u0EDC" +
    "\x03\x02\x02\x02\u0EDE\u0EE1\x03\x02\x02\x02\u0EDF\u0EDD\x03\x02\x02\x02" +
    "\u0EDF\u0EE0\x03\x02\x02\x02\u0EE0\u0EE3\x03\x02\x02\x02\u0EE1\u0EDF\x03" +
    "\x02\x02\x02\u0EE2\u0EDB\x03\x02\x02\x02\u0EE3\u0EE6\x03\x02\x02\x02\u0EE4" +
    "\u0EE2\x03\x02\x02\x02\u0EE4\u0EE5\x03\x02\x02\x02\u0EE5\u011F\x03\x02" +
    "\x02\x02\u0EE6\u0EE4\x03\x02\x02\x02\u0EE7\u0EE8\x07\x86\x02\x02\u0EE8" +
    "\u0EE9\x05\u01F4\xFB\x02\u0EE9\u0EED\x07\xF3\x02\x02\u0EEA\u0EEC\x07\u010C" +
    "\x02\x02\u0EEB\u0EEA\x03\x02\x02\x02\u0EEC\u0EEF\x03\x02\x02\x02\u0EED" +
    "\u0EEB\x03\x02\x02\x02\u0EED\u0EEE\x03\x02\x02\x02\u0EEE\u0EF9\x03\x02" +
    "\x02\x02\u0EEF\u0EED\x03\x02\x02\x02\u0EF0\u0EF4\x05T+\x02\u0EF1\u0EF3" +
    "\x07\u010C\x02\x02\u0EF2\u0EF1\x03\x02\x02\x02\u0EF3\u0EF6\x03\x02\x02" +
    "\x02\u0EF4\u0EF2\x03\x02\x02\x02\u0EF4\u0EF5\x03\x02\x02\x02\u0EF5\u0EF8" +
    "\x03\x02\x02\x02\u0EF6\u0EF4\x03\x02\x02\x02\u0EF7\u0EF0\x03\x02\x02\x02" +
    "\u0EF8\u0EFB\x03\x02\x02\x02\u0EF9\u0EF7\x03\x02\x02\x02\u0EF9\u0EFA\x03" +
    "\x02\x02\x02\u0EFA\u0121\x03\x02\x02\x02\u0EFB\u0EF9\x03\x02\x02\x02\u0EFC" +
    "\u0EFD\x07\x8B\x02\x02\u0EFD\u0EFE\x05\u01EE\xF8\x02\u0EFE\u0F02\x07\xF3" +
    "\x02\x02\u0EFF\u0F01\x07\u010C\x02\x02\u0F00\u0EFF\x03\x02\x02\x02\u0F01" +
    "\u0F04\x03\x02\x02\x02\u0F02\u0F00\x03\x02\x02\x02\u0F02\u0F03\x03\x02" +
    "\x02\x02\u0F03\u0F0E\x03\x02\x02\x02\u0F04\u0F02\x03\x02\x02\x02\u0F05" +
    "\u0F09\x05T+\x02\u0F06\u0F08\x07\u010C\x02\x02\u0F07\u0F06\x03\x02\x02" +
    "\x02\u0F08\u0F0B\x03\x02\x02\x02\u0F09\u0F07\x03\x02\x02\x02\u0F09\u0F0A" +
    "\x03\x02\x02\x02\u0F0A\u0F0D\x03\x02\x02\x02\u0F0B\u0F09\x03\x02\x02\x02" +
    "\u0F0C\u0F05\x03\x02\x02\x02\u0F0D\u0F10\x03\x02\x02\x02\u0F0E\u0F0C\x03" +
    "\x02\x02\x02\u0F0E\u0F0F\x03\x02\x02\x02\u0F0F\u0123\x03\x02\x02\x02\u0F10" +
    "\u0F0E\x03\x02\x02\x02\u0F11\u0F12\x07\x8C\x02\x02\u0F12\u0F13\x05\u01EE" +
    "\xF8\x02\u0F13\u0F17\x07\xF3\x02\x02\u0F14\u0F16\x07\u010C\x02\x02\u0F15" +
    "\u0F14\x03\x02\x02\x02\u0F16\u0F19\x03\x02\x02\x02\u0F17\u0F15\x03\x02" +
    "\x02\x02\u0F17\u0F18\x03\x02\x02\x02\u0F18\u0F23\x03\x02\x02\x02\u0F19" +
    "\u0F17\x03\x02\x02\x02\u0F1A\u0F1E\x05T+\x02\u0F1B\u0F1D\x07\u010C\x02" +
    "\x02\u0F1C\u0F1B\x03\x02\x02\x02\u0F1D\u0F20\x03\x02\x02\x02\u0F1E\u0F1C" +
    "\x03\x02\x02\x02\u0F1E\u0F1F\x03\x02\x02\x02\u0F1F\u0F22\x03\x02\x02\x02" +
    "\u0F20\u0F1E\x03\x02\x02\x02\u0F21\u0F1A\x03\x02\x02\x02\u0F22\u0F25\x03" +
    "\x02\x02\x02\u0F23\u0F21\x03\x02\x02\x02\u0F23\u0F24\x03\x02\x02\x02\u0F24" +
    "\u0125\x03\x02\x02\x02\u0F25\u0F23\x03\x02\x02\x02\u0F26\u0F27\x07\x8D" +
    "\x02\x02\u0F27\u0F28\x05\u01EE\xF8\x02\u0F28\u0F2C\x07\xF3\x02\x02\u0F29" +
    "\u0F2B\x07\u010C\x02\x02\u0F2A\u0F29\x03\x02\x02\x02\u0F2B\u0F2E\x03\x02" +
    "\x02\x02\u0F2C\u0F2A\x03\x02\x02\x02\u0F2C\u0F2D\x03\x02\x02\x02\u0F2D" +
    "\u0F38\x03\x02\x02\x02\u0F2E\u0F2C\x03\x02\x02\x02\u0F2F\u0F33\x05T+\x02" +
    "\u0F30\u0F32\x07\u010C\x02\x02\u0F31\u0F30\x03\x02\x02\x02\u0F32\u0F35" +
    "\x03\x02\x02\x02\u0F33\u0F31\x03\x02\x02\x02\u0F33\u0F34\x03\x02\x02\x02" +
    "\u0F34\u0F37\x03\x02\x02\x02\u0F35\u0F33\x03\x02\x02\x02\u0F36\u0F2F\x03" +
    "\x02\x02\x02\u0F37\u0F3A\x03\x02\x02\x02\u0F38\u0F36\x03\x02\x02\x02\u0F38" +
    "\u0F39\x03\x02\x02\x02\u0F39\u0127\x03\x02\x02\x02\u0F3A\u0F38\x03\x02" +
    "\x02\x02\u0F3B\u0F3C\x07\x8F\x02\x02\u0F3C\u0F3D\x05\u01EE\xF8\x02\u0F3D" +
    "\u0F41\x07\xF3\x02\x02\u0F3E\u0F40\x07\u010C\x02\x02\u0F3F\u0F3E\x03\x02" +
    "\x02\x02\u0F40\u0F43\x03\x02\x02\x02\u0F41\u0F3F\x03\x02\x02\x02\u0F41" +
    "\u0F42\x03\x02\x02\x02\u0F42\u0F4D\x03\x02\x02\x02\u0F43\u0F41\x03\x02" +
    "\x02\x02\u0F44\u0F48\x05T+\x02\u0F45\u0F47\x07\u010C\x02\x02\u0F46\u0F45" +
    "\x03\x02\x02\x02\u0F47\u0F4A\x03\x02\x02\x02\u0F48\u0F46\x03\x02\x02\x02" +
    "\u0F48\u0F49\x03\x02\x02\x02\u0F49\u0F4C\x03\x02\x02\x02\u0F4A\u0F48\x03" +
    "\x02\x02\x02\u0F4B\u0F44\x03\x02\x02\x02\u0F4C\u0F4F\x03\x02\x02\x02\u0F4D" +
    "\u0F4B\x03\x02\x02\x02\u0F4D\u0F4E\x03\x02\x02\x02\u0F4E\u0129\x03\x02" +
    "\x02\x02\u0F4F\u0F4D\x03\x02\x02\x02\u0F50\u0F51\x07\x8E\x02\x02\u0F51" +
    "\u0F52\x05\u01F4\xFB\x02\u0F52\u0F56\x07\xF3\x02\x02\u0F53\u0F55\x07\u010C" +
    "\x02\x02\u0F54\u0F53\x03\x02\x02\x02\u0F55\u0F58\x03\x02\x02\x02\u0F56" +
    "\u0F54\x03\x02\x02\x02\u0F56\u0F57\x03\x02\x02\x02\u0F57\u0F62\x03\x02" +
    "\x02\x02\u0F58\u0F56\x03\x02\x02\x02\u0F59\u0F5D\x05T+\x02\u0F5A\u0F5C" +
    "\x07\u010C\x02\x02\u0F5B\u0F5A\x03\x02\x02\x02\u0F5C\u0F5F\x03\x02\x02" +
    "\x02\u0F5D\u0F5B\x03\x02\x02\x02\u0F5D\u0F5E\x03\x02\x02\x02\u0F5E\u0F61" +
    "\x03\x02\x02\x02\u0F5F\u0F5D\x03\x02\x02\x02\u0F60\u0F59\x03\x02\x02\x02" +
    "\u0F61\u0F64\x03\x02\x02\x02\u0F62\u0F60\x03\x02\x02\x02\u0F62\u0F63\x03" +
    "\x02\x02\x02\u0F63\u012B\x03\x02\x02\x02\u0F64\u0F62\x03\x02\x02\x02\u0F65" +
    "\u0F66\x07\x90\x02\x02\u0F66\u0F67\x05\u01EE\xF8\x02\u0F67\u0F6B\x07\xF3" +
    "\x02\x02\u0F68\u0F6A\x07\u010C\x02\x02\u0F69\u0F68\x03\x02\x02\x02\u0F6A" +
    "\u0F6D\x03\x02\x02\x02\u0F6B\u0F69\x03\x02\x02\x02\u0F6B\u0F6C\x03\x02" +
    "\x02\x02\u0F6C\u0F77\x03\x02\x02\x02\u0F6D\u0F6B\x03\x02\x02\x02\u0F6E" +
    "\u0F72\x05T+\x02\u0F6F\u0F71\x07\u010C\x02\x02\u0F70\u0F6F\x03\x02\x02" +
    "\x02\u0F71\u0F74\x03\x02\x02\x02\u0F72\u0F70\x03\x02\x02\x02\u0F72\u0F73" +
    "\x03\x02\x02\x02\u0F73\u0F76\x03\x02\x02\x02\u0F74\u0F72\x03\x02\x02\x02" +
    "\u0F75\u0F6E\x03\x02\x02\x02\u0F76\u0F79\x03\x02\x02\x02\u0F77\u0F75\x03" +
    "\x02\x02\x02\u0F77\u0F78\x03\x02\x02\x02\u0F78\u012D\x03\x02\x02\x02\u0F79" +
    "\u0F77\x03\x02\x02\x02\u0F7A\u0F7B\x07\x91\x02\x02\u0F7B\u0F7C\x05\u01EE" +
    "\xF8\x02\u0F7C\u0F80\x07\xF3\x02\x02\u0F7D\u0F7F\x07\u010C\x02\x02\u0F7E" +
    "\u0F7D\x03\x02\x02\x02\u0F7F\u0F82\x03\x02\x02\x02\u0F80\u0F7E\x03\x02" +
    "\x02\x02\u0F80\u0F81\x03\x02\x02\x02\u0F81\u0F8C\x03\x02\x02\x02\u0F82" +
    "\u0F80\x03\x02\x02\x02\u0F83\u0F87\x05T+\x02\u0F84\u0F86\x07\u010C\x02" +
    "\x02\u0F85\u0F84\x03\x02\x02\x02\u0F86\u0F89\x03\x02\x02\x02\u0F87\u0F85" +
    "\x03\x02\x02\x02\u0F87\u0F88\x03\x02\x02\x02\u0F88\u0F8B\x03\x02\x02\x02" +
    "\u0F89\u0F87\x03\x02\x02\x02\u0F8A\u0F83\x03\x02\x02\x02\u0F8B\u0F8E\x03" +
    "\x02\x02\x02\u0F8C\u0F8A\x03\x02\x02\x02\u0F8C\u0F8D\x03\x02\x02\x02\u0F8D" +
    "\u012F\x03\x02\x02\x02\u0F8E\u0F8C\x03\x02\x02\x02\u0F8F\u0F90\x07\x92" +
    "\x02\x02\u0F90\u0F91\x05\u01EE\xF8\x02\u0F91\u0F95\x07\xF3\x02\x02\u0F92" +
    "\u0F94\x07\u010C\x02\x02\u0F93\u0F92\x03\x02\x02\x02\u0F94\u0F97\x03\x02" +
    "\x02\x02\u0F95\u0F93\x03\x02\x02\x02\u0F95\u0F96\x03\x02\x02\x02\u0F96" +
    "\u0FA1\x03\x02\x02\x02\u0F97\u0F95\x03\x02\x02\x02\u0F98\u0F9C\x05T+\x02" +
    "\u0F99\u0F9B\x07\u010C\x02\x02\u0F9A\u0F99\x03\x02\x02\x02\u0F9B\u0F9E" +
    "\x03\x02\x02\x02\u0F9C\u0F9A\x03\x02\x02\x02\u0F9C\u0F9D\x03\x02\x02\x02" +
    "\u0F9D\u0FA0\x03\x02\x02\x02\u0F9E\u0F9C\x03\x02\x02\x02\u0F9F\u0F98\x03" +
    "\x02\x02\x02\u0FA0\u0FA3\x03\x02\x02\x02\u0FA1\u0F9F\x03\x02\x02\x02\u0FA1" +
    "\u0FA2\x03\x02\x02\x02\u0FA2\u0131\x03\x02\x02\x02\u0FA3\u0FA1\x03\x02" +
    "\x02\x02\u0FA4\u0FA5\x07\x93\x02\x02\u0FA5\u0FA6\x05\u01EE\xF8\x02\u0FA6" +
    "\u0FAA\x07\xF3\x02\x02\u0FA7\u0FA9\x07\u010C\x02\x02\u0FA8\u0FA7\x03\x02" +
    "\x02\x02\u0FA9\u0FAC\x03\x02\x02\x02\u0FAA\u0FA8\x03\x02\x02\x02\u0FAA" +
    "\u0FAB\x03\x02\x02\x02\u0FAB\u0FB6\x03\x02\x02\x02\u0FAC\u0FAA\x03\x02" +
    "\x02\x02\u0FAD\u0FB1\x05T+\x02\u0FAE\u0FB0\x07\u010C\x02\x02\u0FAF\u0FAE" +
    "\x03\x02\x02\x02\u0FB0\u0FB3\x03\x02\x02\x02\u0FB1\u0FAF\x03\x02\x02\x02" +
    "\u0FB1\u0FB2\x03\x02\x02\x02\u0FB2\u0FB5\x03\x02\x02\x02\u0FB3\u0FB1\x03" +
    "\x02\x02\x02\u0FB4\u0FAD\x03\x02\x02\x02\u0FB5\u0FB8\x03\x02\x02\x02\u0FB6" +
    "\u0FB4\x03\x02\x02\x02\u0FB6\u0FB7\x03\x02\x02\x02\u0FB7\u0133\x03\x02" +
    "\x02\x02\u0FB8\u0FB6\x03\x02\x02\x02\u0FB9\u0FBA\x07\x94\x02\x02\u0FBA" +
    "\u0FBB\x05\u01EE\xF8\x02\u0FBB\u0FBF\x07\xF3\x02\x02\u0FBC\u0FBE\x07\u010C" +
    "\x02\x02\u0FBD\u0FBC\x03\x02\x02\x02\u0FBE\u0FC1\x03\x02\x02\x02\u0FBF" +
    "\u0FBD\x03\x02\x02\x02\u0FBF\u0FC0\x03\x02\x02\x02\u0FC0\u0FCB\x03\x02" +
    "\x02\x02\u0FC1\u0FBF\x03\x02\x02\x02\u0FC2\u0FC6\x05T+\x02\u0FC3\u0FC5" +
    "\x07\u010C\x02\x02\u0FC4\u0FC3\x03\x02\x02\x02\u0FC5\u0FC8\x03\x02\x02" +
    "\x02\u0FC6\u0FC4\x03\x02\x02\x02\u0FC6\u0FC7\x03\x02\x02\x02\u0FC7\u0FCA" +
    "\x03\x02\x02\x02\u0FC8\u0FC6\x03\x02\x02\x02\u0FC9\u0FC2\x03\x02\x02\x02" +
    "\u0FCA\u0FCD\x03\x02\x02\x02\u0FCB\u0FC9\x03\x02\x02\x02\u0FCB\u0FCC\x03" +
    "\x02\x02\x02\u0FCC\u0135\x03\x02\x02\x02\u0FCD\u0FCB\x03\x02\x02\x02\u0FCE" +
    "\u0FCF\x07\x95\x02\x02\u0FCF\u0FD0\x05\u01EE\xF8\x02\u0FD0\u0FD4\x07\xF3" +
    "\x02\x02\u0FD1\u0FD3\x07\u010C\x02\x02\u0FD2\u0FD1\x03\x02\x02\x02\u0FD3" +
    "\u0FD6\x03\x02\x02\x02\u0FD4\u0FD2\x03\x02\x02\x02\u0FD4\u0FD5\x03\x02" +
    "\x02\x02\u0FD5\u0FE0\x03\x02\x02\x02\u0FD6\u0FD4\x03\x02\x02\x02\u0FD7" +
    "\u0FDB\x05T+\x02\u0FD8\u0FDA\x07\u010C\x02\x02\u0FD9\u0FD8\x03\x02\x02" +
    "\x02\u0FDA\u0FDD\x03\x02\x02\x02\u0FDB\u0FD9\x03\x02\x02\x02\u0FDB\u0FDC" +
    "\x03\x02\x02\x02\u0FDC\u0FDF\x03\x02\x02\x02\u0FDD\u0FDB\x03\x02\x02\x02" +
    "\u0FDE\u0FD7\x03\x02\x02\x02\u0FDF\u0FE2\x03\x02\x02\x02\u0FE0\u0FDE\x03" +
    "\x02\x02\x02\u0FE0\u0FE1\x03\x02\x02\x02\u0FE1\u0137\x03\x02\x02\x02\u0FE2" +
    "\u0FE0\x03\x02\x02\x02\u0FE3\u0FE4\x07\x18\x02\x02\u0FE4\u0FE5\x05\u01EE" +
    "\xF8\x02\u0FE5\u0FE9\x07\xF3\x02\x02\u0FE6\u0FE8\x07\u010C\x02\x02\u0FE7" +
    "\u0FE6\x03\x02\x02\x02\u0FE8\u0FEB\x03\x02\x02\x02\u0FE9\u0FE7\x03\x02" +
    "\x02\x02\u0FE9\u0FEA\x03\x02\x02\x02\u0FEA\u0FF5\x03\x02\x02\x02\u0FEB" +
    "\u0FE9\x03\x02\x02\x02\u0FEC\u0FF0\x05T+\x02\u0FED\u0FEF\x07\u010C\x02" +
    "\x02\u0FEE\u0FED\x03\x02\x02\x02\u0FEF\u0FF2\x03\x02\x02\x02\u0FF0\u0FEE" +
    "\x03\x02\x02\x02\u0FF0\u0FF1\x03\x02\x02\x02\u0FF1\u0FF4\x03\x02\x02\x02" +
    "\u0FF2\u0FF0\x03\x02\x02\x02\u0FF3\u0FEC\x03\x02\x02\x02\u0FF4\u0FF7\x03" +
    "\x02\x02\x02\u0FF5\u0FF3\x03\x02\x02\x02\u0FF5\u0FF6\x03\x02\x02\x02\u0FF6" +
    "\u0139\x03\x02\x02\x02\u0FF7\u0FF5\x03\x02\x02\x02\u0FF8\u0FF9\x07\x96" +
    "\x02\x02\u0FF9\u0FFA\x05\u01EE\xF8\x02\u0FFA\u0FFE\x07\xF3\x02\x02\u0FFB" +
    "\u0FFD\x07\u010C\x02\x02\u0FFC\u0FFB\x03\x02\x02\x02\u0FFD\u1000\x03\x02" +
    "\x02\x02\u0FFE\u0FFC\x03\x02\x02\x02\u0FFE\u0FFF\x03\x02\x02\x02\u0FFF" +
    "\u100A\x03\x02\x02\x02\u1000\u0FFE\x03\x02\x02\x02\u1001\u1005\x05T+\x02" +
    "\u1002\u1004\x07\u010C\x02\x02\u1003\u1002\x03\x02\x02\x02\u1004\u1007" +
    "\x03\x02\x02\x02\u1005\u1003\x03\x02\x02\x02\u1005\u1006\x03\x02\x02\x02" +
    "\u1006\u1009\x03\x02\x02\x02\u1007\u1005\x03\x02\x02\x02\u1008\u1001\x03" +
    "\x02\x02\x02\u1009\u100C\x03\x02\x02\x02\u100A\u1008\x03\x02\x02\x02\u100A" +
    "\u100B\x03\x02\x02\x02\u100B\u013B\x03\x02\x02\x02\u100C\u100A\x03\x02" +
    "\x02\x02\u100D\u100E\x07\x97\x02\x02\u100E\u100F\x05\u01EE\xF8\x02\u100F" +
    "\u1013\x07\xF3\x02\x02\u1010\u1012\x07\u010C\x02\x02\u1011\u1010\x03\x02" +
    "\x02\x02\u1012\u1015\x03\x02\x02\x02\u1013\u1011\x03\x02\x02\x02\u1013" +
    "\u1014\x03\x02\x02\x02\u1014\u101F\x03\x02\x02\x02\u1015\u1013\x03\x02" +
    "\x02\x02\u1016\u101A\x05T+\x02\u1017\u1019\x07\u010C\x02\x02\u1018\u1017" +
    "\x03\x02\x02\x02\u1019\u101C\x03\x02\x02\x02\u101A\u1018\x03\x02\x02\x02" +
    "\u101A\u101B\x03\x02\x02\x02\u101B\u101E\x03\x02\x02\x02\u101C\u101A\x03" +
    "\x02\x02\x02\u101D\u1016\x03\x02\x02\x02\u101E\u1021\x03\x02\x02\x02\u101F" +
    "\u101D\x03\x02\x02\x02\u101F\u1020\x03\x02\x02\x02\u1020\u013D\x03\x02" +
    "\x02\x02\u1021\u101F\x03\x02\x02\x02\u1022\u1023\x07\x98\x02\x02\u1023" +
    "\u1024\x05\u01EE\xF8\x02\u1024\u1028\x07\xF3\x02\x02\u1025\u1027\x07\u010C" +
    "\x02\x02\u1026\u1025\x03\x02\x02\x02\u1027\u102A\x03\x02\x02\x02\u1028" +
    "\u1026\x03\x02\x02\x02\u1028\u1029\x03\x02\x02\x02\u1029\u1034\x03\x02" +
    "\x02\x02\u102A\u1028\x03\x02\x02\x02\u102B\u102F\x05T+\x02\u102C\u102E" +
    "\x07\u010C\x02\x02\u102D\u102C\x03\x02\x02\x02\u102E\u1031\x03\x02\x02" +
    "\x02\u102F\u102D\x03\x02\x02\x02\u102F\u1030\x03\x02\x02\x02\u1030\u1033" +
    "\x03\x02\x02\x02\u1031\u102F\x03\x02\x02\x02\u1032\u102B\x03\x02\x02\x02" +
    "\u1033\u1036\x03\x02\x02\x02\u1034\u1032\x03\x02\x02\x02\u1034\u1035\x03" +
    "\x02\x02\x02\u1035\u013F\x03\x02\x02\x02\u1036\u1034\x03\x02\x02\x02\u1037" +
    "\u1038\x07\x99\x02\x02\u1038\u1039\x05\u01EE\xF8\x02\u1039\u103D\x07\xF3" +
    "\x02\x02\u103A\u103C\x07\u010C\x02\x02\u103B\u103A\x03\x02\x02\x02\u103C" +
    "\u103F\x03\x02\x02\x02\u103D\u103B\x03\x02\x02\x02\u103D\u103E\x03\x02" +
    "\x02\x02\u103E\u1049\x03\x02\x02\x02\u103F\u103D\x03\x02\x02\x02\u1040" +
    "\u1044\x05T+\x02\u1041\u1043\x07\u010C\x02\x02\u1042\u1041\x03\x02\x02" +
    "\x02\u1043\u1046\x03\x02\x02\x02\u1044\u1042\x03\x02\x02\x02\u1044\u1045" +
    "\x03\x02\x02\x02\u1045\u1048\x03\x02\x02\x02\u1046\u1044\x03\x02\x02\x02" +
    "\u1047\u1040\x03\x02\x02\x02\u1048\u104B\x03\x02\x02\x02\u1049\u1047\x03" +
    "\x02\x02\x02\u1049\u104A\x03\x02\x02\x02\u104A\u0141\x03\x02\x02\x02\u104B" +
    "\u1049\x03\x02\x02\x02\u104C\u104D\x07\x9A\x02\x02\u104D\u104E\x05\u01EE" +
    "\xF8\x02\u104E\u1052\x07\xF3\x02\x02\u104F\u1051\x07\u010C\x02\x02\u1050" +
    "\u104F\x03\x02\x02\x02\u1051\u1054\x03\x02\x02\x02\u1052\u1050\x03\x02" +
    "\x02\x02\u1052\u1053\x03\x02\x02\x02\u1053\u105E\x03\x02\x02\x02\u1054" +
    "\u1052\x03\x02\x02\x02\u1055\u1059\x05T+\x02\u1056\u1058\x07\u010C\x02" +
    "\x02\u1057\u1056\x03\x02\x02\x02\u1058\u105B\x03\x02\x02\x02\u1059\u1057" +
    "\x03\x02\x02\x02\u1059\u105A\x03\x02\x02\x02\u105A\u105D\x03\x02\x02\x02" +
    "\u105B\u1059\x03\x02\x02\x02\u105C\u1055\x03\x02\x02\x02\u105D\u1060\x03" +
    "\x02\x02\x02\u105E\u105C\x03\x02\x02\x02\u105E\u105F\x03\x02\x02\x02\u105F" +
    "\u0143\x03\x02\x02\x02\u1060\u105E\x03\x02\x02\x02\u1061\u1062\x07\x9B" +
    "\x02\x02\u1062\u1063\x05\u01EE\xF8\x02\u1063\u1067\x07\xF3\x02\x02\u1064" +
    "\u1066\x07\u010C\x02\x02\u1065\u1064\x03\x02\x02\x02\u1066\u1069\x03\x02" +
    "\x02\x02\u1067\u1065\x03\x02\x02\x02\u1067\u1068\x03\x02\x02\x02\u1068" +
    "\u1073\x03\x02\x02\x02\u1069\u1067\x03\x02\x02\x02\u106A\u106E\x05T+\x02" +
    "\u106B\u106D\x07\u010C\x02\x02\u106C\u106B\x03\x02\x02\x02\u106D\u1070" +
    "\x03\x02\x02\x02\u106E\u106C\x03\x02\x02\x02\u106E\u106F\x03\x02\x02\x02" +
    "\u106F\u1072\x03\x02\x02\x02\u1070\u106E\x03\x02\x02\x02\u1071\u106A\x03" +
    "\x02\x02\x02\u1072\u1075\x03\x02\x02\x02\u1073\u1071\x03\x02\x02\x02\u1073" +
    "\u1074\x03\x02\x02\x02\u1074\u0145\x03\x02\x02\x02\u1075\u1073\x03\x02" +
    "\x02\x02\u1076\u1077\x07\x9C\x02\x02\u1077\u1078\x05\u01EE\xF8\x02\u1078" +
    "\u107C\x07\xF3\x02\x02\u1079\u107B\x07\u010C\x02\x02\u107A\u1079\x03\x02" +
    "\x02\x02\u107B\u107E\x03\x02\x02\x02\u107C\u107A\x03\x02\x02\x02\u107C" +
    "\u107D\x03\x02\x02\x02\u107D\u1088\x03\x02\x02\x02\u107E\u107C\x03\x02" +
    "\x02\x02\u107F\u1083\x05T+\x02\u1080\u1082\x07\u010C\x02\x02\u1081\u1080" +
    "\x03\x02\x02\x02\u1082\u1085\x03\x02\x02\x02\u1083\u1081\x03\x02\x02\x02" +
    "\u1083\u1084\x03\x02\x02\x02\u1084\u1087\x03\x02\x02\x02\u1085\u1083\x03" +
    "\x02\x02\x02\u1086\u107F\x03\x02\x02\x02\u1087\u108A\x03\x02\x02\x02\u1088" +
    "\u1086\x03\x02\x02\x02\u1088\u1089\x03\x02\x02\x02\u1089\u0147\x03\x02" +
    "\x02\x02\u108A\u1088\x03\x02\x02\x02\u108B\u108C\x07\x9D\x02\x02\u108C" +
    "\u108D\x05\u01EE\xF8\x02\u108D\u1091\x07\xF3\x02\x02\u108E\u1090\x07\u010C" +
    "\x02\x02\u108F\u108E\x03\x02\x02\x02\u1090\u1093\x03\x02\x02\x02\u1091" +
    "\u108F\x03\x02\x02\x02\u1091\u1092\x03\x02\x02\x02\u1092\u109D\x03\x02" +
    "\x02\x02\u1093\u1091\x03\x02\x02\x02\u1094\u1098\x05T+\x02\u1095\u1097" +
    "\x07\u010C\x02\x02\u1096\u1095\x03\x02\x02\x02\u1097\u109A\x03\x02\x02" +
    "\x02\u1098\u1096\x03\x02\x02\x02\u1098\u1099\x03\x02\x02\x02\u1099\u109C" +
    "\x03\x02\x02\x02\u109A\u1098\x03\x02\x02\x02\u109B\u1094\x03\x02\x02\x02" +
    "\u109C\u109F\x03\x02\x02\x02\u109D\u109B\x03\x02\x02\x02\u109D\u109E\x03" +
    "\x02\x02\x02\u109E\u0149\x03\x02\x02\x02\u109F\u109D\x03\x02\x02\x02\u10A0" +
    "\u10A1\x07\x9E\x02\x02\u10A1\u10A2\x05\u01EE\xF8\x02\u10A2\u10A6\x07\xF3" +
    "\x02\x02\u10A3\u10A5\x07\u010C\x02\x02\u10A4\u10A3\x03\x02\x02\x02\u10A5" +
    "\u10A8\x03\x02\x02\x02\u10A6\u10A4\x03\x02\x02\x02\u10A6\u10A7\x03\x02" +
    "\x02\x02\u10A7\u10B2\x03\x02\x02\x02\u10A8\u10A6\x03\x02\x02\x02\u10A9" +
    "\u10AD\x05T+\x02\u10AA\u10AC\x07\u010C\x02\x02\u10AB\u10AA\x03\x02\x02" +
    "\x02\u10AC\u10AF\x03\x02\x02\x02\u10AD\u10AB\x03\x02\x02\x02\u10AD\u10AE" +
    "\x03\x02\x02\x02\u10AE\u10B1\x03\x02\x02\x02\u10AF\u10AD\x03\x02\x02\x02" +
    "\u10B0\u10A9\x03\x02\x02\x02\u10B1\u10B4\x03\x02\x02\x02\u10B2\u10B0\x03" +
    "\x02\x02\x02\u10B2\u10B3\x03\x02\x02\x02\u10B3\u014B\x03\x02\x02\x02\u10B4" +
    "\u10B2\x03\x02\x02\x02\u10B5\u10B6\x07\x9F\x02\x02\u10B6\u10B7\x05\u01EE" +
    "\xF8\x02\u10B7\u10BB\x07\xF3\x02\x02\u10B8\u10BA\x07\u010C\x02\x02\u10B9" +
    "\u10B8\x03\x02\x02\x02\u10BA\u10BD\x03\x02\x02\x02\u10BB\u10B9\x03\x02" +
    "\x02\x02\u10BB\u10BC\x03\x02\x02\x02\u10BC\u10C7\x03\x02\x02\x02\u10BD" +
    "\u10BB\x03\x02\x02\x02\u10BE\u10C2\x05T+\x02\u10BF\u10C1\x07\u010C\x02" +
    "\x02\u10C0\u10BF\x03\x02\x02\x02\u10C1\u10C4\x03\x02\x02\x02\u10C2\u10C0" +
    "\x03\x02\x02\x02\u10C2\u10C3\x03\x02\x02\x02\u10C3\u10C6\x03\x02\x02\x02" +
    "\u10C4\u10C2\x03\x02\x02\x02\u10C5\u10BE\x03\x02\x02\x02\u10C6\u10C9\x03" +
    "\x02\x02\x02\u10C7\u10C5\x03\x02\x02\x02\u10C7\u10C8\x03\x02\x02\x02\u10C8" +
    "\u014D\x03\x02\x02\x02\u10C9\u10C7\x03\x02\x02\x02\u10CA\u10CB\x07\xA0" +
    "\x02\x02\u10CB\u10CC\x05\u01EE\xF8\x02\u10CC\u10D0\x07\xF3\x02\x02\u10CD" +
    "\u10CF\x07\u010C\x02\x02\u10CE\u10CD\x03\x02\x02\x02\u10CF\u10D2\x03\x02" +
    "\x02\x02\u10D0\u10CE\x03\x02\x02\x02\u10D0\u10D1\x03\x02\x02\x02\u10D1" +
    "\u10DC\x03\x02\x02\x02\u10D2\u10D0\x03\x02\x02\x02\u10D3\u10D7\x05T+\x02" +
    "\u10D4\u10D6\x07\u010C\x02\x02\u10D5\u10D4\x03\x02\x02\x02\u10D6\u10D9" +
    "\x03\x02\x02\x02\u10D7\u10D5\x03\x02\x02\x02\u10D7\u10D8\x03\x02\x02\x02" +
    "\u10D8\u10DB\x03\x02\x02\x02\u10D9\u10D7\x03\x02\x02\x02\u10DA\u10D3\x03" +
    "\x02\x02\x02\u10DB\u10DE\x03\x02\x02\x02\u10DC\u10DA\x03\x02\x02\x02\u10DC" +
    "\u10DD\x03\x02\x02\x02\u10DD\u014F\x03\x02\x02\x02\u10DE\u10DC\x03\x02" +
    "\x02\x02\u10DF\u10E0\x07\xA1\x02\x02\u10E0\u10E1\x05\u01EE\xF8\x02\u10E1" +
    "\u10E5\x07\xF3\x02\x02";
bitmarkParser._serializedATNSegment9 = "\u10E2\u10E4\x07\u010C\x02\x02\u10E3\u10E2\x03\x02\x02\x02\u10E4\u10E7" +
    "\x03\x02\x02\x02\u10E5\u10E3\x03\x02\x02\x02\u10E5\u10E6\x03\x02\x02\x02" +
    "\u10E6\u10F1\x03\x02\x02\x02\u10E7\u10E5\x03\x02\x02\x02\u10E8\u10EC\x05" +
    "T+\x02\u10E9\u10EB\x07\u010C\x02\x02\u10EA\u10E9\x03\x02\x02\x02\u10EB" +
    "\u10EE\x03\x02\x02\x02\u10EC\u10EA\x03\x02\x02\x02\u10EC\u10ED\x03\x02" +
    "\x02\x02\u10ED\u10F0\x03\x02\x02\x02\u10EE\u10EC\x03\x02\x02\x02\u10EF" +
    "\u10E8\x03\x02\x02\x02\u10F0\u10F3\x03\x02\x02\x02\u10F1\u10EF\x03\x02" +
    "\x02\x02\u10F1\u10F2\x03\x02\x02\x02\u10F2\u0151\x03\x02\x02\x02\u10F3" +
    "\u10F1\x03\x02\x02\x02\u10F4\u10F5\x07\xA2\x02\x02\u10F5\u10F6\x05\u01EE" +
    "\xF8\x02\u10F6\u10FA\x07\xF3\x02\x02\u10F7\u10F9\x07\u010C\x02\x02\u10F8" +
    "\u10F7\x03\x02\x02\x02\u10F9\u10FC\x03\x02\x02\x02\u10FA\u10F8\x03\x02" +
    "\x02\x02\u10FA\u10FB\x03\x02\x02\x02\u10FB\u1106\x03\x02\x02\x02\u10FC" +
    "\u10FA\x03\x02\x02\x02\u10FD\u1101\x05T+\x02\u10FE\u1100\x07\u010C\x02" +
    "\x02\u10FF\u10FE\x03\x02\x02\x02\u1100\u1103\x03\x02\x02\x02\u1101\u10FF" +
    "\x03\x02\x02\x02\u1101\u1102\x03\x02\x02\x02\u1102\u1105\x03\x02\x02\x02" +
    "\u1103\u1101\x03\x02\x02\x02\u1104\u10FD\x03\x02\x02\x02\u1105\u1108\x03" +
    "\x02\x02\x02\u1106\u1104\x03\x02\x02\x02\u1106\u1107\x03\x02\x02\x02\u1107" +
    "\u0153\x03\x02\x02\x02\u1108\u1106\x03\x02\x02\x02\u1109\u110A\x07\xA3" +
    "\x02\x02\u110A\u110B\x05\u01EE\xF8\x02\u110B\u110F\x07\xF3\x02\x02\u110C" +
    "\u110E\x07\u010C\x02\x02\u110D\u110C\x03\x02\x02\x02\u110E\u1111\x03\x02" +
    "\x02\x02\u110F\u110D\x03\x02\x02\x02\u110F\u1110\x03\x02\x02\x02\u1110" +
    "\u111B\x03\x02\x02\x02\u1111\u110F\x03\x02\x02\x02\u1112\u1116\x05T+\x02" +
    "\u1113\u1115\x07\u010C\x02\x02\u1114\u1113\x03\x02\x02\x02\u1115\u1118" +
    "\x03\x02\x02\x02\u1116\u1114\x03\x02\x02\x02\u1116\u1117\x03\x02\x02\x02" +
    "\u1117\u111A\x03\x02\x02\x02\u1118\u1116\x03\x02\x02\x02\u1119\u1112\x03" +
    "\x02\x02\x02\u111A\u111D\x03\x02\x02\x02\u111B\u1119\x03\x02\x02\x02\u111B" +
    "\u111C\x03\x02\x02\x02\u111C\u0155\x03\x02\x02\x02\u111D\u111B\x03\x02" +
    "\x02\x02\u111E\u111F\x07\xA4\x02\x02\u111F\u1120\x05\u01EE\xF8\x02\u1120" +
    "\u1124\x07\xF3\x02\x02\u1121\u1123\x07\u010C\x02\x02\u1122\u1121\x03\x02" +
    "\x02\x02\u1123\u1126\x03\x02\x02\x02\u1124\u1122\x03\x02\x02\x02\u1124" +
    "\u1125\x03\x02\x02\x02\u1125\u1130\x03\x02\x02\x02\u1126\u1124\x03\x02" +
    "\x02\x02\u1127\u112B\x05T+\x02\u1128\u112A\x07\u010C\x02\x02\u1129\u1128" +
    "\x03\x02\x02\x02\u112A\u112D\x03\x02\x02\x02\u112B\u1129\x03\x02\x02\x02" +
    "\u112B\u112C\x03\x02\x02\x02\u112C\u112F\x03\x02\x02\x02\u112D\u112B\x03" +
    "\x02\x02\x02\u112E\u1127\x03\x02\x02\x02\u112F\u1132\x03\x02\x02\x02\u1130" +
    "\u112E\x03\x02\x02\x02\u1130\u1131\x03\x02\x02\x02\u1131\u0157\x03\x02" +
    "\x02\x02\u1132\u1130\x03\x02\x02\x02\u1133\u1134\x07\xA5\x02\x02\u1134" +
    "\u1135\x05\u01EE\xF8\x02\u1135\u1139\x07\xF3\x02\x02\u1136\u1138\x07\u010C" +
    "\x02\x02\u1137\u1136\x03\x02\x02\x02\u1138\u113B\x03\x02\x02\x02\u1139" +
    "\u1137\x03\x02\x02\x02\u1139\u113A\x03\x02\x02\x02\u113A\u1145\x03\x02" +
    "\x02\x02\u113B\u1139\x03\x02\x02\x02\u113C\u1140\x05T+\x02\u113D\u113F" +
    "\x07\u010C\x02\x02\u113E\u113D\x03\x02\x02\x02\u113F\u1142\x03\x02\x02" +
    "\x02\u1140\u113E\x03\x02\x02\x02\u1140\u1141\x03\x02\x02\x02\u1141\u1144" +
    "\x03\x02\x02\x02\u1142\u1140\x03\x02\x02\x02\u1143\u113C\x03\x02\x02\x02" +
    "\u1144\u1147\x03\x02\x02\x02\u1145\u1143\x03\x02\x02\x02\u1145\u1146\x03" +
    "\x02\x02\x02\u1146\u0159\x03\x02\x02\x02\u1147\u1145\x03\x02\x02\x02\u1148" +
    "\u1149\x07\xA6\x02\x02\u1149\u114A\x05\u01EE\xF8\x02\u114A\u114E\x07\xF3" +
    "\x02\x02\u114B\u114D\x07\u010C\x02\x02\u114C\u114B\x03\x02\x02\x02\u114D" +
    "\u1150\x03\x02\x02\x02\u114E\u114C\x03\x02\x02\x02\u114E\u114F\x03\x02" +
    "\x02\x02\u114F\u115A\x03\x02\x02\x02\u1150\u114E\x03\x02\x02\x02\u1151" +
    "\u1155\x05T+\x02\u1152\u1154\x07\u010C\x02\x02\u1153\u1152\x03\x02\x02" +
    "\x02\u1154\u1157\x03\x02\x02\x02\u1155\u1153\x03\x02\x02\x02\u1155\u1156" +
    "\x03\x02\x02\x02\u1156\u1159\x03\x02\x02\x02\u1157\u1155\x03\x02\x02\x02" +
    "\u1158\u1151\x03\x02\x02\x02\u1159\u115C\x03\x02\x02\x02\u115A\u1158\x03" +
    "\x02\x02\x02\u115A\u115B\x03\x02\x02\x02\u115B\u015B\x03\x02\x02\x02\u115C" +
    "\u115A\x03\x02\x02\x02\u115D\u115E\x07\xA7\x02\x02\u115E\u115F\x05\u01EE" +
    "\xF8\x02\u115F\u1163\x07\xF3\x02\x02\u1160\u1162\x07\u010C\x02\x02\u1161" +
    "\u1160\x03\x02\x02\x02\u1162\u1165\x03\x02\x02\x02\u1163\u1161\x03\x02" +
    "\x02\x02\u1163\u1164\x03\x02\x02\x02\u1164\u116F\x03\x02\x02\x02\u1165" +
    "\u1163\x03\x02\x02\x02\u1166\u116A\x05T+\x02\u1167\u1169\x07\u010C\x02" +
    "\x02\u1168\u1167\x03\x02\x02\x02\u1169\u116C\x03\x02\x02\x02\u116A\u1168" +
    "\x03\x02\x02\x02\u116A\u116B\x03\x02\x02\x02\u116B\u116E\x03\x02\x02\x02" +
    "\u116C\u116A\x03\x02\x02\x02\u116D\u1166\x03\x02\x02\x02\u116E\u1171\x03" +
    "\x02\x02\x02\u116F\u116D\x03\x02\x02\x02\u116F\u1170\x03\x02\x02\x02\u1170" +
    "\u015D\x03\x02\x02\x02\u1171\u116F\x03\x02\x02\x02\u1172\u1173\x07\xA8" +
    "\x02\x02\u1173\u1174\x05\u01EE\xF8\x02\u1174\u1178\x07\xF3\x02\x02\u1175" +
    "\u1177\x07\u010C\x02\x02\u1176\u1175\x03\x02\x02\x02\u1177\u117A\x03\x02" +
    "\x02\x02\u1178\u1176\x03\x02\x02\x02\u1178\u1179\x03\x02\x02\x02\u1179" +
    "\u1184\x03\x02\x02\x02\u117A\u1178\x03\x02\x02\x02\u117B\u117F\x05T+\x02" +
    "\u117C\u117E\x07\u010C\x02\x02\u117D\u117C\x03\x02\x02\x02\u117E\u1181" +
    "\x03\x02\x02\x02\u117F\u117D\x03\x02\x02\x02\u117F\u1180\x03\x02\x02\x02" +
    "\u1180\u1183\x03\x02\x02\x02\u1181\u117F\x03\x02\x02\x02\u1182\u117B\x03" +
    "\x02\x02\x02\u1183\u1186\x03\x02\x02\x02\u1184\u1182\x03\x02\x02\x02\u1184" +
    "\u1185\x03\x02\x02\x02\u1185\u015F\x03\x02\x02\x02\u1186\u1184\x03\x02" +
    "\x02\x02\u1187\u1188\x07\xA9\x02\x02\u1188\u1189\x05\u01EE\xF8\x02\u1189" +
    "\u118D\x07\xF3\x02\x02\u118A\u118C\x07\u010C\x02\x02\u118B\u118A\x03\x02" +
    "\x02\x02\u118C\u118F\x03\x02\x02\x02\u118D\u118B\x03\x02\x02\x02\u118D" +
    "\u118E\x03\x02\x02\x02\u118E\u1199\x03\x02\x02\x02\u118F\u118D\x03\x02" +
    "\x02\x02\u1190\u1194\x05T+\x02\u1191\u1193\x07\u010C\x02\x02\u1192\u1191" +
    "\x03\x02\x02\x02\u1193\u1196\x03\x02\x02\x02\u1194\u1192\x03\x02\x02\x02" +
    "\u1194\u1195\x03\x02\x02\x02\u1195\u1198\x03\x02\x02\x02\u1196\u1194\x03" +
    "\x02\x02\x02\u1197\u1190\x03\x02\x02\x02\u1198\u119B\x03\x02\x02\x02\u1199" +
    "\u1197\x03\x02\x02\x02\u1199\u119A\x03\x02\x02\x02\u119A\u0161\x03\x02" +
    "\x02\x02\u119B\u1199\x03\x02\x02\x02\u119C\u119D\x07\xAA\x02\x02\u119D" +
    "\u119E\x05\u01EE\xF8\x02\u119E\u11A2\x07\xF3\x02\x02\u119F\u11A1\x07\u010C" +
    "\x02\x02\u11A0\u119F\x03\x02\x02\x02\u11A1\u11A4\x03\x02\x02\x02\u11A2" +
    "\u11A0\x03\x02\x02\x02\u11A2\u11A3\x03\x02\x02\x02\u11A3\u11AE\x03\x02" +
    "\x02\x02\u11A4\u11A2\x03\x02\x02\x02\u11A5\u11A9\x05T+\x02\u11A6\u11A8" +
    "\x07\u010C\x02\x02\u11A7\u11A6\x03\x02\x02\x02\u11A8\u11AB\x03\x02\x02" +
    "\x02\u11A9\u11A7\x03\x02\x02\x02\u11A9\u11AA\x03\x02\x02\x02\u11AA\u11AD" +
    "\x03\x02\x02\x02\u11AB\u11A9\x03\x02\x02\x02\u11AC\u11A5\x03\x02\x02\x02" +
    "\u11AD\u11B0\x03\x02\x02\x02\u11AE\u11AC\x03\x02\x02\x02\u11AE\u11AF\x03" +
    "\x02\x02\x02\u11AF\u0163\x03\x02\x02\x02\u11B0\u11AE\x03\x02\x02\x02\u11B1" +
    "\u11B2\x07\xAB\x02\x02\u11B2\u11B3\x05\u01EE\xF8\x02\u11B3\u11B7\x07\xF3" +
    "\x02\x02\u11B4\u11B6\x07\u010C\x02\x02\u11B5\u11B4\x03\x02\x02\x02\u11B6" +
    "\u11B9\x03\x02\x02\x02\u11B7\u11B5\x03\x02\x02\x02\u11B7\u11B8\x03\x02" +
    "\x02\x02\u11B8\u11C3\x03\x02\x02\x02\u11B9\u11B7\x03\x02\x02\x02\u11BA" +
    "\u11BE\x05T+\x02\u11BB\u11BD\x07\u010C\x02\x02\u11BC\u11BB\x03\x02\x02" +
    "\x02\u11BD\u11C0\x03\x02\x02\x02\u11BE\u11BC\x03\x02\x02\x02\u11BE\u11BF" +
    "\x03\x02\x02\x02\u11BF\u11C2\x03\x02\x02\x02\u11C0\u11BE\x03\x02\x02\x02" +
    "\u11C1\u11BA\x03\x02\x02\x02\u11C2\u11C5\x03\x02\x02\x02\u11C3\u11C1\x03" +
    "\x02\x02\x02\u11C3\u11C4\x03\x02\x02\x02\u11C4\u0165\x03\x02\x02\x02\u11C5" +
    "\u11C3\x03\x02\x02\x02\u11C6\u11C7\x07\xAC\x02\x02\u11C7\u11C8\x05\u01EE" +
    "\xF8\x02\u11C8\u11CC\x07\xF3\x02\x02\u11C9\u11CB\x07\u010C\x02\x02\u11CA" +
    "\u11C9\x03\x02\x02\x02\u11CB\u11CE\x03\x02\x02\x02\u11CC\u11CA\x03\x02" +
    "\x02\x02\u11CC\u11CD\x03\x02\x02\x02\u11CD\u11D8\x03\x02\x02\x02\u11CE" +
    "\u11CC\x03\x02\x02\x02\u11CF\u11D3\x05T+\x02\u11D0\u11D2\x07\u010C\x02" +
    "\x02\u11D1\u11D0\x03\x02\x02\x02\u11D2\u11D5\x03\x02\x02\x02\u11D3\u11D1" +
    "\x03\x02\x02\x02\u11D3\u11D4\x03\x02\x02\x02\u11D4\u11D7\x03\x02\x02\x02" +
    "\u11D5\u11D3\x03\x02\x02\x02\u11D6\u11CF\x03\x02\x02\x02\u11D7\u11DA\x03" +
    "\x02\x02\x02\u11D8\u11D6\x03\x02\x02\x02\u11D8\u11D9\x03\x02\x02\x02\u11D9" +
    "\u0167\x03\x02\x02\x02\u11DA\u11D8\x03\x02\x02\x02\u11DB\u11DC\x07\xAD" +
    "\x02\x02\u11DC\u11DD\x05\u01EE\xF8\x02\u11DD\u11E1\x07\xF3\x02\x02\u11DE" +
    "\u11E0\x07\u010C\x02\x02\u11DF\u11DE\x03\x02\x02\x02\u11E0\u11E3\x03\x02" +
    "\x02\x02\u11E1\u11DF\x03\x02\x02\x02\u11E1\u11E2\x03\x02\x02\x02\u11E2" +
    "\u11ED\x03\x02\x02\x02\u11E3\u11E1\x03\x02\x02\x02\u11E4\u11E8\x05T+\x02" +
    "\u11E5\u11E7\x07\u010C\x02\x02\u11E6\u11E5\x03\x02\x02\x02\u11E7\u11EA" +
    "\x03\x02\x02\x02\u11E8\u11E6\x03\x02\x02\x02\u11E8\u11E9\x03\x02\x02\x02" +
    "\u11E9\u11EC\x03\x02\x02\x02\u11EA\u11E8\x03\x02\x02\x02\u11EB\u11E4\x03" +
    "\x02\x02\x02\u11EC\u11EF\x03\x02\x02\x02\u11ED\u11EB\x03\x02\x02\x02\u11ED" +
    "\u11EE\x03\x02\x02\x02\u11EE\u0169\x03\x02\x02\x02\u11EF\u11ED\x03\x02" +
    "\x02\x02\u11F0\u11F1\x07\xAE\x02\x02\u11F1\u11F2\x05\u01EE\xF8\x02\u11F2" +
    "\u11F6\x07\xF3\x02\x02\u11F3\u11F5\x07\u010C\x02\x02\u11F4\u11F3\x03\x02" +
    "\x02\x02\u11F5\u11F8\x03\x02\x02\x02\u11F6\u11F4\x03\x02\x02\x02\u11F6" +
    "\u11F7\x03\x02\x02\x02\u11F7\u1202\x03\x02\x02\x02\u11F8\u11F6\x03\x02" +
    "\x02\x02\u11F9\u11FD\x05T+\x02\u11FA\u11FC\x07\u010C\x02\x02\u11FB\u11FA" +
    "\x03\x02\x02\x02\u11FC\u11FF\x03\x02\x02\x02\u11FD\u11FB\x03\x02\x02\x02" +
    "\u11FD\u11FE\x03\x02\x02\x02\u11FE\u1201\x03\x02\x02\x02\u11FF\u11FD\x03" +
    "\x02\x02\x02\u1200\u11F9\x03\x02\x02\x02\u1201\u1204\x03\x02\x02\x02\u1202" +
    "\u1200\x03\x02\x02\x02\u1202\u1203\x03\x02\x02\x02\u1203\u016B\x03\x02" +
    "\x02\x02\u1204\u1202\x03\x02\x02\x02\u1205\u1206\x07\xAF\x02\x02\u1206" +
    "\u1207\x05\u01EE\xF8\x02\u1207\u120B\x07\xF3\x02\x02\u1208\u120A\x07\u010C" +
    "\x02\x02\u1209\u1208\x03\x02\x02\x02\u120A\u120D\x03\x02\x02\x02\u120B" +
    "\u1209\x03\x02\x02\x02\u120B\u120C\x03\x02\x02\x02\u120C\u1217\x03\x02" +
    "\x02\x02\u120D\u120B\x03\x02\x02\x02\u120E\u1212\x05T+\x02\u120F\u1211" +
    "\x07\u010C\x02\x02\u1210\u120F\x03\x02\x02\x02\u1211\u1214\x03\x02\x02" +
    "\x02\u1212\u1210\x03\x02\x02\x02\u1212\u1213\x03\x02\x02\x02\u1213\u1216" +
    "\x03\x02\x02\x02\u1214\u1212\x03\x02\x02\x02\u1215\u120E\x03\x02\x02\x02" +
    "\u1216\u1219\x03\x02\x02\x02\u1217\u1215\x03\x02\x02\x02\u1217\u1218\x03" +
    "\x02\x02\x02\u1218\u016D\x03\x02\x02\x02\u1219\u1217\x03\x02\x02\x02\u121A" +
    "\u121B\x07\xB0\x02\x02\u121B\u121C\x05\u01EE\xF8\x02\u121C\u1220\x07\xF3" +
    "\x02\x02\u121D\u121F\x07\u010C\x02\x02\u121E\u121D\x03\x02\x02\x02\u121F" +
    "\u1222\x03\x02\x02\x02\u1220\u121E\x03\x02\x02\x02\u1220\u1221\x03\x02" +
    "\x02\x02\u1221\u122C\x03\x02\x02\x02\u1222\u1220\x03\x02\x02\x02\u1223" +
    "\u1227\x05T+\x02\u1224\u1226\x07\u010C\x02\x02\u1225\u1224\x03\x02\x02" +
    "\x02\u1226\u1229\x03\x02\x02\x02\u1227\u1225\x03\x02\x02\x02\u1227\u1228" +
    "\x03\x02\x02\x02\u1228\u122B\x03\x02\x02\x02\u1229\u1227\x03\x02\x02\x02" +
    "\u122A\u1223\x03\x02\x02\x02\u122B\u122E\x03\x02\x02\x02\u122C\u122A\x03" +
    "\x02\x02\x02\u122C\u122D\x03\x02\x02\x02\u122D\u016F\x03\x02\x02\x02\u122E" +
    "\u122C\x03\x02\x02\x02\u122F\u1230\x07\xB1\x02\x02\u1230\u1231\x05\u01EE" +
    "\xF8\x02\u1231\u1235\x07\xF3\x02\x02\u1232\u1234\x07\u010C\x02\x02\u1233" +
    "\u1232\x03\x02\x02\x02\u1234\u1237\x03\x02\x02\x02\u1235\u1233\x03\x02" +
    "\x02\x02\u1235\u1236\x03\x02\x02\x02\u1236\u1241\x03\x02\x02\x02\u1237" +
    "\u1235\x03\x02\x02\x02\u1238\u123C\x05T+\x02\u1239\u123B\x07\u010C\x02" +
    "\x02\u123A\u1239\x03\x02\x02\x02\u123B\u123E\x03\x02\x02\x02\u123C\u123A" +
    "\x03\x02\x02\x02\u123C\u123D\x03\x02\x02\x02\u123D\u1240\x03\x02\x02\x02" +
    "\u123E\u123C\x03\x02\x02\x02\u123F\u1238\x03\x02\x02\x02\u1240\u1243\x03" +
    "\x02\x02\x02\u1241\u123F\x03\x02\x02\x02\u1241\u1242\x03\x02\x02\x02\u1242" +
    "\u0171\x03\x02\x02\x02\u1243\u1241\x03\x02\x02\x02\u1244\u1245\x07\xB2" +
    "\x02\x02\u1245\u1246\x05\u01EE\xF8\x02\u1246\u124A\x07\xF3\x02\x02\u1247" +
    "\u1249\x07\u010C\x02\x02\u1248\u1247\x03\x02\x02\x02\u1249\u124C\x03\x02" +
    "\x02\x02\u124A\u1248\x03\x02\x02\x02\u124A\u124B\x03\x02\x02\x02\u124B" +
    "\u1256\x03\x02\x02\x02\u124C\u124A\x03\x02\x02\x02\u124D\u1251\x05T+\x02" +
    "\u124E\u1250\x07\u010C\x02\x02\u124F\u124E\x03\x02\x02\x02\u1250\u1253" +
    "\x03\x02\x02\x02\u1251\u124F\x03\x02\x02\x02\u1251\u1252\x03\x02\x02\x02" +
    "\u1252\u1255\x03\x02\x02\x02\u1253\u1251\x03\x02\x02\x02\u1254\u124D\x03" +
    "\x02\x02\x02\u1255\u1258\x03\x02\x02\x02\u1256\u1254\x03\x02\x02\x02\u1256" +
    "\u1257\x03\x02\x02\x02\u1257\u0173\x03\x02\x02\x02\u1258\u1256\x03\x02" +
    "\x02\x02\u1259\u125A\x07\xB3\x02\x02\u125A\u125B\x05\u01EE\xF8\x02\u125B" +
    "\u125D\x07\xF3\x02\x02\u125C\u125E\x07\u010C\x02\x02\u125D\u125C\x03\x02" +
    "\x02\x02\u125E\u125F\x03\x02\x02\x02\u125F\u125D\x03\x02\x02\x02\u125F" +
    "\u1260\x03\x02\x02\x02\u1260\u126A\x03\x02\x02\x02\u1261\u1265\x05T+\x02" +
    "\u1262\u1264\x07\u010C\x02\x02\u1263\u1262\x03\x02\x02\x02\u1264\u1267" +
    "\x03\x02\x02\x02\u1265\u1263\x03\x02\x02\x02\u1265\u1266\x03\x02\x02\x02" +
    "\u1266\u1269\x03\x02\x02\x02\u1267\u1265\x03\x02\x02\x02\u1268\u1261\x03" +
    "\x02\x02\x02\u1269\u126C\x03\x02\x02\x02\u126A\u1268\x03\x02\x02\x02\u126A" +
    "\u126B\x03\x02\x02\x02\u126B\u126E\x03\x02\x02\x02\u126C\u126A\x03\x02" +
    "\x02\x02\u126D\u126F\x05\u0260\u0131\x02\u126E\u126D\x03\x02\x02\x02\u126E" +
    "\u126F\x03\x02\x02\x02\u126F\u1273\x03\x02\x02\x02\u1270\u1272\x07\u010C" +
    "\x02\x02\u1271\u1270\x03\x02\x02\x02\u1272\u1275\x03\x02\x02\x02\u1273" +
    "\u1271\x03\x02\x02\x02\u1273\u1274\x03\x02\x02\x02\u1274\u1283\x03\x02" +
    "\x02\x02\u1275\u1273\x03\x02\x02\x02\u1276\u1280\x05h5\x02\u1277\u1279" +
    "\x07\u010C\x02\x02\u1278\u1277\x03\x02\x02\x02\u1279\u127C\x03\x02\x02" +
    "\x02\u127A\u1278\x03\x02\x02\x02\u127A\u127B\x03\x02\x02\x02\u127B\u127D" +
    "\x03\x02\x02\x02\u127C\u127A\x03\x02\x02\x02\u127D\u127F\x05h5\x02\u127E" +
    "\u127A\x03\x02\x02\x02\u127F\u1282\x03\x02\x02\x02\u1280\u127E\x03\x02" +
    "\x02\x02\u1280\u1281\x03\x02\x02\x02\u1281\u1284\x03\x02\x02\x02\u1282" +
    "\u1280\x03\x02\x02\x02\u1283\u1276\x03\x02\x02\x02\u1283\u1284\x03\x02" +
    "\x02\x02\u1284\u0175\x03\x02\x02\x02\u1285\u1286\x07\xB4\x02\x02\u1286" +
    "\u1287\x05\u01EE\xF8\x02\u1287\u128B\x07\xF3\x02\x02\u1288\u128A\x07\u010C" +
    "\x02\x02\u1289\u1288\x03\x02\x02\x02\u128A\u128D\x03\x02\x02\x02\u128B" +
    "\u1289\x03\x02\x02\x02\u128B\u128C\x03\x02\x02\x02\u128C\u1297\x03\x02" +
    "\x02\x02\u128D\u128B\x03\x02\x02\x02\u128E\u1292\x05T+\x02\u128F\u1291" +
    "\x07\u010C\x02\x02\u1290\u128F\x03\x02\x02\x02\u1291\u1294\x03\x02\x02" +
    "\x02\u1292\u1290\x03\x02\x02\x02\u1292\u1293\x03\x02\x02\x02\u1293\u1296" +
    "\x03\x02\x02\x02\u1294\u1292\x03\x02\x02\x02\u1295\u128E\x03\x02\x02\x02" +
    "\u1296\u1299\x03\x02\x02\x02\u1297\u1295\x03\x02\x02\x02\u1297\u1298\x03" +
    "\x02\x02\x02\u1298\u0177\x03\x02\x02\x02\u1299\u1297\x03\x02\x02\x02\u129A" +
    "\u129B\x07\xB5\x02\x02\u129B\u129C\x05\u01EE\xF8\x02\u129C\u12A0\x07\xF3" +
    "\x02\x02\u129D\u129F\x07\u010C\x02\x02\u129E\u129D\x03\x02\x02\x02\u129F" +
    "\u12A2\x03\x02\x02\x02\u12A0\u129E\x03\x02\x02\x02\u12A0\u12A1\x03\x02" +
    "\x02\x02\u12A1\u12AC\x03\x02\x02\x02\u12A2\u12A0\x03\x02\x02\x02\u12A3" +
    "\u12A7\x05T+\x02\u12A4\u12A6\x07\u010C\x02\x02\u12A5\u12A4\x03\x02\x02" +
    "\x02\u12A6\u12A9\x03\x02\x02\x02\u12A7\u12A5\x03\x02\x02\x02\u12A7\u12A8" +
    "\x03\x02\x02\x02\u12A8\u12AB\x03\x02\x02\x02\u12A9\u12A7\x03\x02\x02\x02" +
    "\u12AA\u12A3\x03\x02\x02\x02\u12AB\u12AE\x03\x02\x02\x02\u12AC\u12AA\x03" +
    "\x02\x02\x02\u12AC\u12AD\x03\x02\x02\x02\u12AD\u0179\x03\x02\x02\x02\u12AE" +
    "\u12AC\x03\x02\x02\x02\u12AF\u12B0\x07\xB6\x02\x02\u12B0\u12B1\x05\u01EE" +
    "\xF8\x02\u12B1\u12B5\x07\xF3\x02\x02\u12B2\u12B4\x07\u010C\x02\x02\u12B3" +
    "\u12B2\x03\x02\x02\x02\u12B4\u12B7\x03\x02\x02\x02\u12B5\u12B3\x03\x02" +
    "\x02\x02\u12B5\u12B6\x03\x02\x02\x02\u12B6\u12C1\x03\x02\x02\x02\u12B7" +
    "\u12B5\x03\x02\x02\x02\u12B8\u12BC\x05T+\x02\u12B9\u12BB\x07\u010C\x02" +
    "\x02\u12BA\u12B9\x03\x02\x02\x02\u12BB\u12BE\x03\x02\x02\x02\u12BC\u12BA" +
    "\x03\x02\x02\x02\u12BC\u12BD\x03\x02\x02\x02\u12BD\u12C0\x03\x02\x02\x02" +
    "\u12BE\u12BC\x03\x02\x02\x02\u12BF\u12B8\x03\x02\x02\x02\u12C0\u12C3\x03" +
    "\x02\x02\x02\u12C1\u12BF\x03\x02\x02\x02\u12C1\u12C2\x03\x02\x02\x02\u12C2" +
    "\u017B\x03\x02\x02\x02\u12C3\u12C1\x03\x02\x02\x02\u12C4\u12C5\x07\xB7" +
    "\x02\x02\u12C5\u12C6\x05\u01EE\xF8\x02\u12C6\u12CA\x07\xF3\x02\x02\u12C7" +
    "\u12C9\x07\u010C\x02\x02\u12C8\u12C7\x03\x02\x02\x02\u12C9\u12CC\x03\x02" +
    "\x02\x02\u12CA\u12C8\x03\x02\x02\x02\u12CA\u12CB\x03\x02\x02\x02\u12CB" +
    "\u12D6\x03\x02\x02\x02\u12CC\u12CA\x03\x02\x02\x02\u12CD\u12D1\x05T+\x02" +
    "\u12CE\u12D0\x07\u010C\x02\x02\u12CF\u12CE\x03\x02\x02\x02\u12D0\u12D3" +
    "\x03\x02\x02\x02\u12D1\u12CF\x03\x02\x02\x02\u12D1\u12D2\x03\x02\x02\x02" +
    "\u12D2\u12D5\x03\x02\x02\x02\u12D3\u12D1\x03\x02\x02\x02\u12D4\u12CD\x03" +
    "\x02\x02\x02\u12D5\u12D8\x03\x02\x02\x02\u12D6\u12D4\x03\x02\x02\x02\u12D6" +
    "\u12D7\x03\x02\x02\x02\u12D7\u017D\x03\x02\x02\x02\u12D8\u12D6\x03\x02" +
    "\x02\x02\u12D9\u12DA\x07\xB8\x02\x02\u12DA\u12DB\x05\u01EE\xF8\x02\u12DB" +
    "\u12DF\x07\xF3\x02\x02\u12DC\u12DE\x07\u010C\x02\x02\u12DD\u12DC\x03\x02" +
    "\x02\x02\u12DE\u12E1\x03\x02\x02\x02\u12DF\u12DD\x03\x02\x02\x02\u12DF" +
    "\u12E0\x03\x02\x02\x02\u12E0\u12EB\x03\x02\x02\x02\u12E1\u12DF\x03\x02" +
    "\x02\x02\u12E2\u12E6\x05T+\x02\u12E3\u12E5\x07\u010C\x02\x02\u12E4\u12E3" +
    "\x03\x02\x02\x02\u12E5\u12E8\x03\x02\x02\x02\u12E6\u12E4\x03\x02\x02\x02" +
    "\u12E6\u12E7\x03\x02\x02\x02\u12E7\u12EA\x03\x02\x02\x02\u12E8\u12E6\x03" +
    "\x02\x02\x02\u12E9\u12E2\x03\x02\x02\x02\u12EA\u12ED\x03\x02\x02\x02\u12EB" +
    "\u12E9\x03\x02\x02\x02\u12EB\u12EC\x03\x02\x02\x02\u12EC\u017F\x03\x02" +
    "\x02\x02\u12ED\u12EB\x03\x02\x02\x02\u12EE\u12EF\x07\xB9\x02\x02\u12EF" +
    "\u12F0\x05\u01EE\xF8\x02\u12F0\u12F4\x07\xF3\x02\x02\u12F1\u12F3\x07\u010C" +
    "\x02\x02\u12F2\u12F1\x03\x02\x02\x02\u12F3\u12F6\x03\x02\x02\x02\u12F4" +
    "\u12F2\x03\x02\x02\x02\u12F4\u12F5\x03\x02\x02\x02\u12F5\u1300\x03\x02" +
    "\x02\x02\u12F6\u12F4\x03\x02\x02\x02\u12F7\u12FB\x05T+\x02\u12F8\u12FA" +
    "\x07\u010C\x02\x02\u12F9\u12F8\x03\x02\x02\x02\u12FA\u12FD\x03\x02\x02" +
    "\x02\u12FB\u12F9\x03\x02\x02\x02\u12FB\u12FC\x03\x02\x02\x02\u12FC\u12FF" +
    "\x03\x02\x02\x02\u12FD\u12FB\x03\x02\x02\x02\u12FE\u12F7\x03\x02\x02\x02" +
    "\u12FF\u1302\x03\x02\x02\x02\u1300\u12FE\x03\x02\x02\x02\u1300\u1301\x03" +
    "\x02\x02\x02\u1301\u0181\x03\x02\x02\x02\u1302\u1300\x03\x02\x02\x02\u1303" +
    "\u1304\x07\xBA\x02\x02\u1304\u1305\x05\u01EE\xF8\x02\u1305\u1309\x07\xF3" +
    "\x02\x02\u1306\u1308\x07\u010C\x02\x02\u1307\u1306\x03\x02\x02\x02\u1308" +
    "\u130B\x03\x02\x02\x02\u1309\u1307\x03\x02\x02\x02\u1309\u130A\x03\x02" +
    "\x02\x02\u130A\u1315\x03\x02\x02\x02\u130B\u1309\x03\x02\x02\x02\u130C" +
    "\u1310\x05T+\x02\u130D\u130F\x07\u010C\x02\x02\u130E\u130D\x03\x02\x02" +
    "\x02\u130F\u1312\x03\x02\x02\x02\u1310\u130E\x03\x02\x02\x02\u1310\u1311" +
    "\x03\x02\x02\x02\u1311\u1314\x03\x02\x02\x02\u1312\u1310\x03\x02\x02\x02" +
    "\u1313\u130C\x03\x02\x02\x02\u1314\u1317\x03\x02\x02\x02\u1315\u1313\x03" +
    "\x02\x02\x02\u1315\u1316\x03\x02\x02\x02\u1316\u0183\x03\x02\x02\x02\u1317" +
    "\u1315\x03\x02\x02\x02\u1318\u1319\x07\xBB\x02\x02\u1319\u131A\x05\u01EE" +
    "\xF8\x02\u131A\u131E\x07\xF3\x02\x02\u131B\u131D\x07\u010C\x02\x02\u131C" +
    "\u131B\x03\x02\x02\x02\u131D\u1320\x03\x02\x02\x02\u131E\u131C\x03\x02" +
    "\x02\x02\u131E\u131F\x03\x02\x02\x02\u131F\u132A\x03\x02\x02\x02\u1320" +
    "\u131E\x03\x02\x02\x02\u1321\u1325\x05T+\x02\u1322\u1324\x07\u010C\x02" +
    "\x02\u1323\u1322\x03\x02\x02\x02\u1324\u1327\x03\x02\x02\x02\u1325\u1323" +
    "\x03\x02\x02\x02\u1325\u1326\x03\x02\x02\x02\u1326\u1329\x03\x02\x02\x02" +
    "\u1327\u1325\x03\x02\x02\x02\u1328\u1321\x03\x02\x02\x02\u1329\u132C\x03" +
    "\x02\x02\x02\u132A\u1328\x03\x02\x02\x02\u132A\u132B\x03\x02\x02\x02\u132B" +
    "\u0185\x03\x02\x02\x02\u132C\u132A\x03\x02\x02\x02\u132D\u132E\x07\xBC" +
    "\x02\x02\u132E\u132F\x05\u01F4\xFB\x02\u132F\u1333\x07\xF3\x02\x02\u1330" +
    "\u1332\x07\u010C\x02\x02\u1331\u1330\x03\x02\x02\x02\u1332\u1335\x03\x02" +
    "\x02\x02\u1333\u1331\x03\x02\x02\x02\u1333\u1334\x03\x02\x02\x02\u1334" +
    "\u133F\x03\x02\x02\x02\u1335\u1333\x03\x02\x02\x02\u1336\u133A\x05T+\x02" +
    "\u1337\u1339\x07\u010C\x02\x02\u1338\u1337\x03\x02\x02\x02\u1339\u133C" +
    "\x03\x02\x02\x02\u133A\u1338\x03\x02\x02\x02\u133A\u133B\x03\x02\x02\x02" +
    "\u133B\u133E\x03\x02\x02\x02\u133C\u133A\x03\x02\x02\x02\u133D\u1336\x03" +
    "\x02\x02\x02\u133E\u1341\x03\x02\x02\x02\u133F\u133D\x03\x02\x02\x02\u133F" +
    "\u1340\x03\x02\x02\x02\u1340\u0187\x03\x02\x02\x02\u1341\u133F\x03\x02" +
    "\x02\x02\u1342\u1343\x07\xBD\x02\x02\u1343\u1344\x05\u01F4\xFB\x02\u1344" +
    "\u1348\x07\xF3\x02\x02\u1345\u1347\x07\u010C\x02\x02\u1346\u1345\x03\x02" +
    "\x02\x02\u1347\u134A\x03\x02\x02\x02\u1348\u1346\x03\x02\x02\x02\u1348" +
    "\u1349\x03\x02\x02\x02\u1349\u1354\x03\x02\x02\x02\u134A\u1348\x03\x02" +
    "\x02\x02\u134B\u134F\x05T+\x02\u134C\u134E\x07\u010C\x02\x02\u134D\u134C" +
    "\x03\x02\x02\x02\u134E\u1351\x03\x02\x02\x02\u134F\u134D\x03\x02\x02\x02" +
    "\u134F\u1350\x03\x02\x02\x02\u1350\u1353\x03\x02\x02\x02\u1351\u134F\x03" +
    "\x02\x02\x02\u1352\u134B\x03\x02\x02\x02\u1353\u1356\x03\x02\x02\x02\u1354" +
    "\u1352\x03\x02\x02\x02\u1354\u1355\x03\x02\x02\x02\u1355\u0189\x03\x02" +
    "\x02\x02\u1356\u1354\x03\x02\x02\x02\u1357\u1358\x07\xBE\x02\x02\u1358" +
    "\u1359\x05\u01F4\xFB\x02\u1359\u135D\x07\xF3\x02\x02\u135A\u135C\x07\u010C" +
    "\x02\x02\u135B\u135A\x03\x02\x02\x02\u135C\u135F\x03\x02\x02\x02\u135D" +
    "\u135B\x03\x02\x02\x02\u135D\u135E\x03\x02\x02\x02\u135E\u1369\x03\x02" +
    "\x02\x02\u135F\u135D\x03\x02\x02\x02\u1360\u1364\x05T+\x02\u1361\u1363" +
    "\x07\u010C\x02\x02\u1362\u1361\x03\x02\x02\x02\u1363\u1366\x03\x02\x02" +
    "\x02\u1364\u1362\x03\x02\x02\x02\u1364\u1365\x03\x02\x02\x02\u1365\u1368" +
    "\x03\x02\x02\x02\u1366\u1364\x03\x02\x02\x02\u1367\u1360\x03\x02\x02\x02" +
    "\u1368\u136B\x03\x02\x02\x02\u1369\u1367\x03\x02\x02\x02\u1369\u136A\x03" +
    "\x02\x02\x02\u136A\u018B\x03\x02\x02\x02\u136B\u1369\x03\x02\x02\x02\u136C" +
    "\u136D\x07\xBF\x02\x02\u136D\u136E\x05\u01EE\xF8\x02\u136E\u1372\x07\xF3" +
    "\x02\x02\u136F\u1371\x07\u010C\x02\x02\u1370\u136F\x03\x02\x02\x02\u1371" +
    "\u1374\x03\x02\x02\x02\u1372\u1370\x03\x02\x02\x02\u1372\u1373\x03\x02" +
    "\x02\x02\u1373\u137E\x03\x02\x02\x02\u1374\u1372\x03\x02\x02\x02\u1375" +
    "\u1379\x05T+\x02\u1376\u1378\x07\u010C\x02\x02\u1377\u1376\x03\x02\x02" +
    "\x02\u1378\u137B\x03\x02\x02\x02\u1379\u1377\x03\x02\x02\x02\u1379\u137A" +
    "\x03\x02\x02\x02\u137A\u137D\x03\x02\x02\x02\u137B\u1379\x03\x02\x02\x02" +
    "\u137C\u1375\x03\x02\x02\x02\u137D\u1380\x03\x02\x02\x02\u137E\u137C\x03" +
    "\x02\x02\x02\u137E\u137F\x03\x02\x02\x02\u137F\u018D\x03\x02\x02\x02\u1380" +
    "\u137E\x03\x02\x02\x02\u1381\u1382\x07\xC0\x02\x02\u1382\u1383\x05\u01EE" +
    "\xF8\x02\u1383\u1387\x07\xF3\x02\x02\u1384\u1386\x07\u010C\x02\x02\u1385" +
    "\u1384\x03\x02\x02\x02\u1386\u1389\x03\x02\x02\x02\u1387\u1385\x03\x02" +
    "\x02\x02\u1387\u1388\x03\x02\x02\x02\u1388\u1393\x03\x02\x02\x02\u1389" +
    "\u1387\x03\x02\x02\x02\u138A\u138E\x05T+\x02\u138B\u138D\x07\u010C\x02" +
    "\x02\u138C\u138B\x03\x02\x02\x02\u138D\u1390\x03\x02\x02\x02\u138E\u138C" +
    "\x03\x02\x02\x02\u138E\u138F\x03\x02\x02\x02\u138F\u1392\x03\x02\x02\x02" +
    "\u1390\u138E\x03\x02\x02\x02\u1391\u138A\x03\x02\x02\x02\u1392\u1395\x03" +
    "\x02\x02\x02\u1393\u1391\x03\x02\x02\x02\u1393\u1394\x03\x02\x02\x02\u1394" +
    "\u018F\x03\x02\x02\x02\u1395\u1393\x03\x02\x02\x02\u1396\u1397\x07\xC1" +
    "\x02\x02\u1397\u1398\x05\u01EE\xF8\x02\u1398\u139C\x07\xF3\x02\x02\u1399" +
    "\u139B\x07\u010C\x02\x02\u139A\u1399\x03\x02\x02\x02\u139B\u139E\x03\x02" +
    "\x02\x02\u139C\u139A\x03\x02\x02\x02\u139C\u139D\x03\x02\x02\x02\u139D" +
    "\u13A6\x03\x02\x02\x02\u139E\u139C\x03\x02\x02\x02\u139F\u13A3\x05T+\x02" +
    "\u13A0\u13A2\x07\u010C\x02\x02\u13A1\u13A0\x03\x02\x02\x02\u13A2\u13A5" +
    "\x03\x02\x02\x02\u13A3\u13A1\x03\x02\x02\x02\u13A3\u13A4\x03\x02\x02\x02" +
    "\u13A4\u13A7\x03\x02\x02\x02\u13A5\u13A3\x03\x02\x02\x02\u13A6\u139F\x03" +
    "\x02\x02\x02\u13A7\u13A8\x03\x02\x02\x02\u13A8\u13A6\x03\x02\x02\x02\u13A8" +
    "\u13A9\x03\x02\x02\x02\u13A9\u0191\x03\x02\x02\x02\u13AA\u13AB\x07\xC2" +
    "\x02\x02\u13AB\u13AC\x05\u01EE\xF8\x02\u13AC\u13B0\x07\xF3\x02\x02\u13AD" +
    "\u13AF\x07\u010C\x02\x02\u13AE\u13AD\x03\x02\x02\x02\u13AF\u13B2\x03\x02" +
    "\x02\x02\u13B0\u13AE\x03\x02\x02\x02\u13B0\u13B1\x03\x02\x02\x02\u13B1" +
    "\u13BA\x03\x02\x02\x02\u13B2\u13B0\x03\x02\x02\x02\u13B3\u13B7\x05T+\x02" +
    "\u13B4\u13B6\x07\u010C\x02\x02\u13B5\u13B4\x03\x02\x02\x02\u13B6\u13B9" +
    "\x03\x02\x02\x02\u13B7\u13B5\x03\x02\x02\x02\u13B7\u13B8\x03\x02\x02\x02" +
    "\u13B8\u13BB\x03\x02\x02\x02\u13B9\u13B7";
bitmarkParser._serializedATNSegment10 = "\x03\x02\x02\x02\u13BA\u13B3\x03\x02\x02\x02\u13BB\u13BC\x03\x02\x02\x02" +
    "\u13BC\u13BA\x03\x02\x02\x02\u13BC\u13BD\x03\x02\x02\x02\u13BD\u0193\x03" +
    "\x02\x02\x02\u13BE\u13BF\x07\xC3\x02\x02\u13BF\u13C0\x05\u01EE\xF8\x02" +
    "\u13C0\u13C4\x07\xF3\x02\x02\u13C1\u13C3\x07\u010C\x02\x02\u13C2\u13C1" +
    "\x03\x02\x02\x02\u13C3\u13C6\x03\x02\x02\x02\u13C4\u13C2\x03\x02\x02\x02" +
    "\u13C4\u13C5\x03\x02\x02\x02\u13C5\u13CE\x03\x02\x02\x02\u13C6\u13C4\x03" +
    "\x02\x02\x02\u13C7\u13CB\x05T+\x02\u13C8\u13CA\x07\u010C\x02\x02\u13C9" +
    "\u13C8\x03\x02\x02\x02\u13CA\u13CD\x03\x02\x02\x02\u13CB\u13C9\x03\x02" +
    "\x02\x02\u13CB\u13CC\x03\x02\x02\x02\u13CC\u13CF\x03\x02\x02\x02\u13CD" +
    "\u13CB\x03\x02\x02\x02\u13CE\u13C7\x03\x02\x02\x02\u13CF\u13D0\x03\x02" +
    "\x02\x02\u13D0\u13CE\x03\x02\x02\x02\u13D0\u13D1\x03\x02\x02\x02\u13D1" +
    "\u0195\x03\x02\x02\x02\u13D2\u13D3\x07\xC4\x02\x02\u13D3\u13D4\x05\u01EE" +
    "\xF8\x02\u13D4\u13D8\x07\xF3\x02\x02\u13D5\u13D7\x07\u010C\x02\x02\u13D6" +
    "\u13D5\x03\x02\x02\x02\u13D7\u13DA\x03\x02\x02\x02\u13D8\u13D6\x03\x02" +
    "\x02\x02\u13D8\u13D9\x03\x02\x02\x02\u13D9\u13E4\x03\x02\x02\x02\u13DA" +
    "\u13D8\x03\x02\x02\x02\u13DB\u13DF\x05T+\x02\u13DC\u13DE\x07\u010C\x02" +
    "\x02\u13DD\u13DC\x03\x02\x02\x02\u13DE\u13E1\x03\x02\x02\x02\u13DF\u13DD" +
    "\x03\x02\x02\x02\u13DF\u13E0\x03\x02\x02\x02\u13E0\u13E3\x03\x02\x02\x02" +
    "\u13E1\u13DF\x03\x02\x02\x02\u13E2\u13DB\x03\x02\x02\x02\u13E3\u13E6\x03" +
    "\x02\x02\x02\u13E4\u13E2\x03\x02\x02\x02\u13E4\u13E5\x03\x02\x02\x02\u13E5" +
    "\u0197\x03\x02\x02\x02\u13E6\u13E4\x03\x02\x02\x02\u13E7\u13E8\x07\xC5" +
    "\x02\x02\u13E8\u13E9\x05\u01EE\xF8\x02\u13E9\u13ED\x07\xF3\x02\x02\u13EA" +
    "\u13EC\x07\u010C\x02\x02\u13EB\u13EA\x03\x02\x02\x02\u13EC\u13EF\x03\x02" +
    "\x02\x02\u13ED\u13EB\x03\x02\x02\x02\u13ED\u13EE\x03\x02\x02\x02\u13EE" +
    "\u13F9\x03\x02\x02\x02\u13EF\u13ED\x03\x02\x02\x02\u13F0\u13F4\x05T+\x02" +
    "\u13F1\u13F3\x07\u010C\x02\x02\u13F2\u13F1\x03\x02\x02\x02\u13F3\u13F6" +
    "\x03\x02\x02\x02\u13F4\u13F2\x03\x02\x02\x02\u13F4\u13F5\x03\x02\x02\x02" +
    "\u13F5\u13F8\x03\x02\x02\x02\u13F6\u13F4\x03\x02\x02\x02\u13F7\u13F0\x03" +
    "\x02\x02\x02\u13F8\u13FB\x03\x02\x02\x02\u13F9\u13F7\x03\x02\x02\x02\u13F9" +
    "\u13FA\x03\x02\x02\x02\u13FA\u0199\x03\x02\x02\x02\u13FB\u13F9\x03\x02" +
    "\x02\x02\u13FC\u13FD\x07\xC6\x02\x02\u13FD\u13FE\x05\u01EE\xF8\x02\u13FE" +
    "\u1402\x07\xF3\x02\x02\u13FF\u1401\x07\u010C\x02\x02\u1400\u13FF\x03\x02" +
    "\x02\x02\u1401\u1404\x03\x02\x02\x02\u1402\u1400\x03\x02\x02\x02\u1402" +
    "\u1403\x03\x02\x02\x02\u1403\u140E\x03\x02\x02\x02\u1404\u1402\x03\x02" +
    "\x02\x02\u1405\u1409\x05T+\x02\u1406\u1408\x07\u010C\x02\x02\u1407\u1406" +
    "\x03\x02\x02\x02\u1408\u140B\x03\x02\x02\x02\u1409\u1407\x03\x02\x02\x02" +
    "\u1409\u140A\x03\x02\x02\x02\u140A\u140D\x03\x02\x02\x02\u140B\u1409\x03" +
    "\x02\x02\x02\u140C\u1405\x03\x02\x02\x02\u140D\u1410\x03\x02\x02\x02\u140E" +
    "\u140C\x03\x02\x02\x02\u140E\u140F\x03\x02\x02\x02\u140F\u019B\x03\x02" +
    "\x02\x02\u1410\u140E\x03\x02\x02\x02\u1411\u1412\x07\xC7\x02\x02\u1412" +
    "\u1413\x05\u01EE\xF8\x02\u1413\u1417\x07\xF3\x02\x02\u1414\u1416\x07\u010C" +
    "\x02\x02\u1415\u1414\x03\x02\x02\x02\u1416\u1419\x03\x02\x02\x02\u1417" +
    "\u1415\x03\x02\x02\x02\u1417\u1418\x03\x02\x02\x02\u1418\u1423\x03\x02" +
    "\x02\x02\u1419\u1417\x03\x02\x02\x02\u141A\u141E\x05T+\x02\u141B\u141D" +
    "\x07\u010C\x02\x02\u141C\u141B\x03\x02\x02\x02\u141D\u1420\x03\x02\x02" +
    "\x02\u141E\u141C\x03\x02\x02\x02\u141E\u141F\x03\x02\x02\x02\u141F\u1422" +
    "\x03\x02\x02\x02\u1420\u141E\x03\x02\x02\x02\u1421\u141A\x03\x02\x02\x02" +
    "\u1422\u1425\x03\x02\x02\x02\u1423\u1421\x03\x02\x02\x02\u1423\u1424\x03" +
    "\x02\x02\x02\u1424\u019D\x03\x02\x02\x02\u1425\u1423\x03\x02\x02\x02\u1426" +
    "\u1427\x07\xC8\x02\x02\u1427\u1428\x05\u01EE\xF8\x02\u1428\u142C\x07\xF3" +
    "\x02\x02\u1429\u142B\x07\u010C\x02\x02\u142A\u1429\x03\x02\x02\x02\u142B" +
    "\u142E\x03\x02\x02\x02\u142C\u142A\x03\x02\x02\x02\u142C\u142D\x03\x02" +
    "\x02\x02\u142D\u1438\x03\x02\x02\x02\u142E\u142C\x03\x02\x02\x02\u142F" +
    "\u1433\x05T+\x02\u1430\u1432\x07\u010C\x02\x02\u1431\u1430\x03\x02\x02" +
    "\x02\u1432\u1435\x03\x02\x02\x02\u1433\u1431\x03\x02\x02\x02\u1433\u1434" +
    "\x03\x02\x02\x02\u1434\u1437\x03\x02\x02\x02\u1435\u1433\x03\x02\x02\x02" +
    "\u1436\u142F\x03\x02\x02\x02\u1437\u143A\x03\x02\x02\x02\u1438\u1436\x03" +
    "\x02\x02\x02\u1438\u1439\x03\x02\x02\x02\u1439\u019F\x03\x02\x02\x02\u143A" +
    "\u1438\x03\x02\x02\x02\u143B\u143C\x07\xC9\x02\x02\u143C\u143D\x05\u01EE" +
    "\xF8\x02\u143D\u1441\x07\xF3\x02\x02\u143E\u1440\x07\u010C\x02\x02\u143F" +
    "\u143E\x03\x02\x02\x02\u1440\u1443\x03\x02\x02\x02\u1441\u143F\x03\x02" +
    "\x02\x02\u1441\u1442\x03\x02\x02\x02\u1442\u144D\x03\x02\x02\x02\u1443" +
    "\u1441\x03\x02\x02\x02\u1444\u1448\x05T+\x02\u1445\u1447\x07\u010C\x02" +
    "\x02\u1446\u1445\x03\x02\x02\x02\u1447\u144A\x03\x02\x02\x02\u1448\u1446" +
    "\x03\x02\x02\x02\u1448\u1449\x03\x02\x02\x02\u1449\u144C\x03\x02\x02\x02" +
    "\u144A\u1448\x03\x02\x02\x02\u144B\u1444\x03\x02\x02\x02\u144C\u144F\x03" +
    "\x02\x02\x02\u144D\u144B\x03\x02\x02\x02\u144D\u144E\x03\x02\x02\x02\u144E" +
    "\u01A1\x03\x02\x02\x02\u144F\u144D\x03\x02\x02\x02\u1450\u1451\x07\xCA" +
    "\x02\x02\u1451\u1452\x05\u01EE\xF8\x02\u1452\u1456\x07\xF3\x02\x02\u1453" +
    "\u1455\x07\u010C\x02\x02\u1454\u1453\x03\x02\x02\x02\u1455\u1458\x03\x02" +
    "\x02\x02\u1456\u1454\x03\x02\x02\x02\u1456\u1457\x03\x02\x02\x02\u1457" +
    "\u1462\x03\x02\x02\x02\u1458\u1456\x03\x02\x02\x02\u1459\u145D\x05T+\x02" +
    "\u145A\u145C\x07\u010C\x02\x02\u145B\u145A\x03\x02\x02\x02\u145C\u145F" +
    "\x03\x02\x02\x02\u145D\u145B\x03\x02\x02\x02\u145D\u145E\x03\x02\x02\x02" +
    "\u145E\u1461\x03\x02\x02\x02\u145F\u145D\x03\x02\x02\x02\u1460\u1459\x03" +
    "\x02\x02\x02\u1461\u1464\x03\x02\x02\x02\u1462\u1460\x03\x02\x02\x02\u1462" +
    "\u1463\x03\x02\x02\x02\u1463\u01A3\x03\x02\x02\x02\u1464\u1462\x03\x02" +
    "\x02\x02\u1465\u1466\x07\xCB\x02\x02\u1466\u1467\x05\u01EE\xF8\x02\u1467" +
    "\u146B\x07\xF3\x02\x02\u1468\u146A\x07\u010C\x02\x02\u1469\u1468\x03\x02" +
    "\x02\x02\u146A\u146D\x03\x02\x02\x02\u146B\u1469\x03\x02\x02\x02\u146B" +
    "\u146C\x03\x02\x02\x02\u146C\u1477\x03\x02\x02\x02\u146D\u146B\x03\x02" +
    "\x02\x02\u146E\u1472\x05T+\x02\u146F\u1471\x07\u010C\x02\x02\u1470\u146F" +
    "\x03\x02\x02\x02\u1471\u1474\x03\x02\x02\x02\u1472\u1470\x03\x02\x02\x02" +
    "\u1472\u1473\x03\x02\x02\x02\u1473\u1476\x03\x02\x02\x02\u1474\u1472\x03" +
    "\x02\x02\x02\u1475\u146E\x03\x02\x02\x02\u1476\u1479\x03\x02\x02\x02\u1477" +
    "\u1475\x03\x02\x02\x02\u1477\u1478\x03\x02\x02\x02\u1478\u01A5\x03\x02" +
    "\x02\x02\u1479\u1477\x03\x02\x02\x02\u147A\u147B\x07\xCC\x02\x02\u147B" +
    "\u147C\x05\u01EE\xF8\x02\u147C\u1480\x07\xF3\x02\x02\u147D\u147F\x07\u010C" +
    "\x02\x02\u147E\u147D\x03\x02\x02\x02\u147F\u1482\x03\x02\x02\x02\u1480" +
    "\u147E\x03\x02\x02\x02\u1480\u1481\x03\x02\x02\x02\u1481\u148C\x03\x02" +
    "\x02\x02\u1482\u1480\x03\x02\x02\x02\u1483\u1487\x05T+\x02\u1484\u1486" +
    "\x07\u010C\x02\x02\u1485\u1484\x03\x02\x02\x02\u1486\u1489\x03\x02\x02" +
    "\x02\u1487\u1485\x03\x02\x02\x02\u1487\u1488\x03\x02\x02\x02\u1488\u148B" +
    "\x03\x02\x02\x02\u1489\u1487\x03\x02\x02\x02\u148A\u1483\x03\x02\x02\x02" +
    "\u148B\u148E\x03\x02\x02\x02\u148C\u148A\x03\x02\x02\x02\u148C\u148D\x03" +
    "\x02\x02\x02\u148D\u01A7\x03\x02\x02\x02\u148E\u148C\x03\x02\x02\x02\u148F" +
    "\u1490\x07\xCD\x02\x02\u1490\u1491\x05\u01EE\xF8\x02\u1491\u1495\x07\xF3" +
    "\x02\x02\u1492\u1494\x07\u010C\x02\x02\u1493\u1492\x03\x02\x02\x02\u1494" +
    "\u1497\x03\x02\x02\x02\u1495\u1493\x03\x02\x02\x02\u1495\u1496\x03\x02" +
    "\x02\x02\u1496\u14A1\x03\x02\x02\x02\u1497\u1495\x03\x02\x02\x02\u1498" +
    "\u149C\x05T+\x02\u1499\u149B\x07\u010C\x02\x02\u149A\u1499\x03\x02\x02" +
    "\x02\u149B\u149E\x03\x02\x02\x02\u149C\u149A\x03\x02\x02\x02\u149C\u149D" +
    "\x03\x02\x02\x02\u149D\u14A0\x03\x02\x02\x02\u149E\u149C\x03\x02\x02\x02" +
    "\u149F\u1498\x03\x02\x02\x02\u14A0\u14A3\x03\x02\x02\x02\u14A1\u149F\x03" +
    "\x02\x02\x02\u14A1\u14A2\x03\x02\x02\x02\u14A2\u01A9\x03\x02\x02\x02\u14A3" +
    "\u14A1\x03\x02\x02\x02\u14A4\u14A5\x07\xCE\x02\x02\u14A5\u14A6\x05\u01EE" +
    "\xF8\x02\u14A6\u14AA\x07\xF3\x02\x02\u14A7\u14A9\x07\u010C\x02\x02\u14A8" +
    "\u14A7\x03\x02\x02\x02\u14A9\u14AC\x03\x02\x02\x02\u14AA\u14A8\x03\x02" +
    "\x02\x02\u14AA\u14AB\x03\x02\x02\x02\u14AB\u14B6\x03\x02\x02\x02\u14AC" +
    "\u14AA\x03\x02\x02\x02\u14AD\u14B1\x05T+\x02\u14AE\u14B0\x07\u010C\x02" +
    "\x02\u14AF\u14AE\x03\x02\x02\x02\u14B0\u14B3\x03\x02\x02\x02\u14B1\u14AF" +
    "\x03\x02\x02\x02\u14B1\u14B2\x03\x02\x02\x02\u14B2\u14B5\x03\x02\x02\x02" +
    "\u14B3\u14B1\x03\x02\x02\x02\u14B4\u14AD\x03\x02\x02\x02\u14B5\u14B8\x03" +
    "\x02\x02\x02\u14B6\u14B4\x03\x02\x02\x02\u14B6\u14B7\x03\x02\x02\x02\u14B7" +
    "\u01AB\x03\x02\x02\x02\u14B8\u14B6\x03\x02\x02\x02\u14B9\u14BA\x07\xCF" +
    "\x02\x02\u14BA\u14BB\x05\u01EE\xF8\x02\u14BB\u14BF\x07\xF3\x02\x02\u14BC" +
    "\u14BE\x07\u010C\x02\x02\u14BD\u14BC\x03\x02\x02\x02\u14BE\u14C1\x03\x02" +
    "\x02\x02\u14BF\u14BD\x03\x02\x02\x02\u14BF\u14C0\x03\x02\x02\x02\u14C0" +
    "\u14CB\x03\x02\x02\x02\u14C1\u14BF\x03\x02\x02\x02\u14C2\u14C6\x05T+\x02" +
    "\u14C3\u14C5\x07\u010C\x02\x02\u14C4\u14C3\x03\x02\x02\x02\u14C5\u14C8" +
    "\x03\x02\x02\x02\u14C6\u14C4\x03\x02\x02\x02\u14C6\u14C7\x03\x02\x02\x02" +
    "\u14C7\u14CA\x03\x02\x02\x02\u14C8\u14C6\x03\x02\x02\x02\u14C9\u14C2\x03" +
    "\x02\x02\x02\u14CA\u14CD\x03\x02\x02\x02\u14CB\u14C9\x03\x02\x02\x02\u14CB" +
    "\u14CC\x03\x02\x02\x02\u14CC\u01AD\x03\x02\x02\x02\u14CD\u14CB\x03\x02" +
    "\x02\x02\u14CE\u14CF\x07\xD1\x02\x02\u14CF\u14D0\x05\u01EE\xF8\x02\u14D0" +
    "\u14D4\x07\xF3\x02\x02\u14D1\u14D3\x07\u010C\x02\x02\u14D2\u14D1\x03\x02" +
    "\x02\x02\u14D3\u14D6\x03\x02\x02\x02\u14D4\u14D2\x03\x02\x02\x02\u14D4" +
    "\u14D5\x03\x02\x02\x02\u14D5\u14E0\x03\x02\x02\x02\u14D6\u14D4\x03\x02" +
    "\x02\x02\u14D7\u14DB\x05T+\x02\u14D8\u14DA\x07\u010C\x02\x02\u14D9\u14D8" +
    "\x03\x02\x02\x02\u14DA\u14DD\x03\x02\x02\x02\u14DB\u14D9\x03\x02\x02\x02" +
    "\u14DB\u14DC\x03\x02\x02\x02\u14DC\u14DF\x03\x02\x02\x02\u14DD\u14DB\x03" +
    "\x02\x02\x02\u14DE\u14D7\x03\x02\x02\x02\u14DF\u14E2\x03\x02\x02\x02\u14E0" +
    "\u14DE\x03\x02\x02\x02\u14E0\u14E1\x03\x02\x02\x02\u14E1\u01AF\x03\x02" +
    "\x02\x02\u14E2\u14E0\x03\x02\x02\x02\u14E3\u14E4\x07\xD2\x02\x02\u14E4" +
    "\u14E5\x05\u01EE\xF8\x02\u14E5\u14E9\x07\xF3\x02\x02\u14E6\u14E8\x07\u010C" +
    "\x02\x02\u14E7\u14E6\x03\x02\x02\x02\u14E8\u14EB\x03\x02\x02\x02\u14E9" +
    "\u14E7\x03\x02\x02\x02\u14E9\u14EA\x03\x02\x02\x02\u14EA\u14F5\x03\x02" +
    "\x02\x02\u14EB\u14E9\x03\x02\x02\x02\u14EC\u14F0\x05T+\x02\u14ED\u14EF" +
    "\x07\u010C\x02\x02\u14EE\u14ED\x03\x02\x02\x02\u14EF\u14F2\x03\x02\x02" +
    "\x02\u14F0\u14EE\x03\x02\x02\x02\u14F0\u14F1\x03\x02\x02\x02\u14F1\u14F4" +
    "\x03\x02\x02\x02\u14F2\u14F0\x03\x02\x02\x02\u14F3\u14EC\x03\x02\x02\x02" +
    "\u14F4\u14F7\x03\x02\x02\x02\u14F5\u14F3\x03\x02\x02\x02\u14F5\u14F6\x03" +
    "\x02\x02\x02\u14F6\u01B1\x03\x02\x02\x02\u14F7\u14F5\x03\x02\x02\x02\u14F8" +
    "\u14F9\x07\xD5\x02\x02\u14F9\u14FA\x05\u01EE\xF8\x02\u14FA\u14FE\x07\xF3" +
    "\x02\x02\u14FB\u14FD\x07\u010C\x02\x02\u14FC\u14FB\x03\x02\x02\x02\u14FD" +
    "\u1500\x03\x02\x02\x02\u14FE\u14FC\x03\x02\x02\x02\u14FE\u14FF\x03\x02" +
    "\x02\x02\u14FF\u150A\x03\x02\x02\x02\u1500\u14FE\x03\x02\x02\x02\u1501" +
    "\u1505\x05T+\x02\u1502\u1504\x07\u010C\x02\x02\u1503\u1502\x03\x02\x02" +
    "\x02\u1504\u1507\x03\x02\x02\x02\u1505\u1503\x03\x02\x02\x02\u1505\u1506" +
    "\x03\x02\x02\x02\u1506\u1509\x03\x02\x02\x02\u1507\u1505\x03\x02\x02\x02" +
    "\u1508\u1501\x03\x02\x02\x02\u1509\u150C\x03\x02\x02\x02\u150A\u1508\x03" +
    "\x02\x02\x02\u150A\u150B\x03\x02\x02\x02\u150B\u01B3\x03\x02\x02\x02\u150C" +
    "\u150A\x03\x02\x02\x02\u150D\u150E\x07\xD3\x02\x02\u150E\u150F\x05\u01EE" +
    "\xF8\x02\u150F\u1513\x07\xF3\x02\x02\u1510\u1512\x07\u010C\x02\x02\u1511" +
    "\u1510\x03\x02\x02\x02\u1512\u1515\x03\x02\x02\x02\u1513\u1511\x03\x02" +
    "\x02\x02\u1513\u1514\x03\x02\x02\x02\u1514\u151F\x03\x02\x02\x02\u1515" +
    "\u1513\x03\x02\x02\x02\u1516\u151A\x05T+\x02\u1517\u1519\x07\u010C\x02" +
    "\x02\u1518\u1517\x03\x02\x02\x02\u1519\u151C\x03\x02\x02\x02\u151A\u1518" +
    "\x03\x02\x02\x02\u151A\u151B\x03\x02\x02\x02\u151B\u151E\x03\x02\x02\x02" +
    "\u151C\u151A\x03\x02\x02\x02\u151D\u1516\x03\x02\x02\x02\u151E\u1521\x03" +
    "\x02\x02\x02\u151F\u151D\x03\x02\x02\x02\u151F\u1520\x03\x02\x02\x02\u1520" +
    "\u01B5\x03\x02\x02\x02\u1521\u151F\x03\x02\x02\x02\u1522\u1523\x07\xD4" +
    "\x02\x02\u1523\u1524\x05\u01EE\xF8\x02\u1524\u1528\x07\xF3\x02\x02\u1525" +
    "\u1527\x07\u010C\x02\x02\u1526\u1525\x03\x02\x02\x02\u1527\u152A\x03\x02" +
    "\x02\x02\u1528\u1526\x03\x02\x02\x02\u1528\u1529\x03\x02\x02\x02\u1529" +
    "\u1534\x03\x02\x02\x02\u152A\u1528\x03\x02\x02\x02\u152B\u152F\x05T+\x02" +
    "\u152C\u152E\x07\u010C\x02\x02\u152D\u152C\x03\x02\x02\x02\u152E\u1531" +
    "\x03\x02\x02\x02\u152F\u152D\x03\x02\x02\x02\u152F\u1530\x03\x02\x02\x02" +
    "\u1530\u1533\x03\x02\x02\x02\u1531\u152F\x03\x02\x02\x02\u1532\u152B\x03" +
    "\x02\x02\x02\u1533\u1536\x03\x02\x02\x02\u1534\u1532\x03\x02\x02\x02\u1534" +
    "\u1535\x03\x02\x02\x02\u1535\u01B7\x03\x02\x02\x02\u1536\u1534\x03\x02" +
    "\x02\x02\u1537\u1538\x07\xD6\x02\x02\u1538\u1539\x05\u01F4\xFB\x02\u1539" +
    "\u153D\x07\xF3\x02\x02\u153A\u153C\x07\u010C\x02\x02\u153B\u153A\x03\x02" +
    "\x02\x02\u153C\u153F\x03\x02\x02\x02\u153D\u153B\x03\x02\x02\x02\u153D" +
    "\u153E\x03\x02\x02\x02\u153E\u1549\x03\x02\x02\x02\u153F\u153D\x03\x02" +
    "\x02\x02\u1540\u1544\x05T+\x02\u1541\u1543\x07\u010C\x02\x02\u1542\u1541" +
    "\x03\x02\x02\x02\u1543\u1546\x03\x02\x02\x02\u1544\u1542\x03\x02\x02\x02" +
    "\u1544\u1545\x03\x02\x02\x02\u1545\u1548\x03\x02\x02\x02\u1546\u1544\x03" +
    "\x02\x02\x02\u1547\u1540\x03\x02\x02\x02\u1548\u154B\x03\x02\x02\x02\u1549" +
    "\u1547\x03\x02\x02\x02\u1549\u154A\x03\x02\x02\x02\u154A\u01B9\x03\x02" +
    "\x02\x02\u154B\u1549\x03\x02\x02\x02\u154C\u154D\x07\xD7\x02\x02\u154D" +
    "\u154E\x05\u01F4\xFB\x02\u154E\u1552\x07\xF3\x02\x02\u154F\u1551\x07\u010C" +
    "\x02\x02\u1550\u154F\x03\x02\x02\x02\u1551\u1554\x03\x02\x02\x02\u1552" +
    "\u1550\x03\x02\x02\x02\u1552\u1553\x03\x02\x02\x02\u1553\u155E\x03\x02" +
    "\x02\x02\u1554\u1552\x03\x02\x02\x02\u1555\u1559\x05T+\x02\u1556\u1558" +
    "\x07\u010C\x02\x02\u1557\u1556\x03\x02\x02\x02\u1558\u155B\x03\x02\x02" +
    "\x02\u1559\u1557\x03\x02\x02\x02\u1559\u155A\x03\x02\x02\x02\u155A\u155D" +
    "\x03\x02\x02\x02\u155B\u1559\x03\x02\x02\x02\u155C\u1555\x03\x02\x02\x02" +
    "\u155D\u1560\x03\x02\x02\x02\u155E\u155C\x03\x02\x02\x02\u155E\u155F\x03" +
    "\x02\x02\x02\u155F\u01BB\x03\x02\x02\x02\u1560\u155E\x03\x02\x02\x02\u1561" +
    "\u1562\x07\xD8\x02\x02\u1562\u1563\x05\u01F4\xFB\x02\u1563\u1567\x07\xF3" +
    "\x02\x02\u1564\u1566\x07\u010C\x02\x02\u1565\u1564\x03\x02\x02\x02\u1566" +
    "\u1569\x03\x02\x02\x02\u1567\u1565\x03\x02\x02\x02\u1567\u1568\x03\x02" +
    "\x02\x02\u1568\u1573\x03\x02\x02\x02\u1569\u1567\x03\x02\x02\x02\u156A" +
    "\u156E\x05T+\x02\u156B\u156D\x07\u010C\x02\x02\u156C\u156B\x03\x02\x02" +
    "\x02\u156D\u1570\x03\x02\x02\x02\u156E\u156C\x03\x02\x02\x02\u156E\u156F" +
    "\x03\x02\x02\x02\u156F\u1572\x03\x02\x02\x02\u1570\u156E\x03\x02\x02\x02" +
    "\u1571\u156A\x03\x02\x02\x02\u1572\u1575\x03\x02\x02\x02\u1573\u1571\x03" +
    "\x02\x02\x02\u1573\u1574\x03\x02\x02\x02\u1574\u01BD\x03\x02\x02\x02\u1575" +
    "\u1573\x03\x02\x02\x02\u1576\u1577\x07\xD9\x02\x02\u1577\u1578\x05\u01F4" +
    "\xFB\x02\u1578\u157C\x07\xF3\x02\x02\u1579\u157B\x07\u010C\x02\x02\u157A" +
    "\u1579\x03\x02\x02\x02\u157B\u157E\x03\x02\x02\x02\u157C\u157A\x03\x02" +
    "\x02\x02\u157C\u157D\x03\x02\x02\x02\u157D\u1588\x03\x02\x02\x02\u157E" +
    "\u157C\x03\x02\x02\x02\u157F\u1583\x05T+\x02\u1580\u1582\x07\u010C\x02" +
    "\x02\u1581\u1580\x03\x02\x02\x02\u1582\u1585\x03\x02\x02\x02\u1583\u1581" +
    "\x03\x02\x02\x02\u1583\u1584\x03\x02\x02\x02\u1584\u1587\x03\x02\x02\x02" +
    "\u1585\u1583\x03\x02\x02\x02\u1586\u157F\x03\x02\x02\x02\u1587\u158A\x03" +
    "\x02\x02\x02\u1588\u1586\x03\x02\x02\x02\u1588\u1589\x03\x02\x02\x02\u1589" +
    "\u01BF\x03\x02\x02\x02\u158A\u1588\x03\x02\x02\x02\u158B\u158C\x07\xDA" +
    "\x02\x02\u158C\u158D\x05\u01F4\xFB\x02\u158D\u1591\x07\xF3\x02\x02\u158E" +
    "\u1590\x07\u010C\x02\x02\u158F\u158E\x03\x02\x02\x02\u1590\u1593\x03\x02" +
    "\x02\x02\u1591\u158F\x03\x02\x02\x02\u1591\u1592\x03\x02\x02\x02\u1592" +
    "\u159D\x03\x02\x02\x02\u1593\u1591\x03\x02\x02\x02\u1594\u1598\x05T+\x02" +
    "\u1595\u1597\x07\u010C\x02\x02\u1596\u1595\x03\x02\x02\x02\u1597\u159A" +
    "\x03\x02\x02\x02\u1598\u1596\x03\x02\x02\x02\u1598\u1599\x03\x02\x02\x02" +
    "\u1599\u159C\x03\x02\x02\x02\u159A\u1598\x03\x02\x02\x02\u159B\u1594\x03" +
    "\x02\x02\x02\u159C\u159F\x03\x02\x02\x02\u159D\u159B\x03\x02\x02\x02\u159D" +
    "\u159E\x03\x02\x02\x02\u159E\u01C1\x03\x02\x02\x02\u159F\u159D\x03\x02" +
    "\x02\x02\u15A0\u15A1\x07\xDB\x02\x02\u15A1\u15A2\x05\u01F4\xFB\x02\u15A2" +
    "\u15A6\x07\xF3\x02\x02\u15A3\u15A5\x07\u010C\x02\x02\u15A4\u15A3\x03\x02" +
    "\x02\x02\u15A5\u15A8\x03\x02\x02\x02\u15A6\u15A4\x03\x02\x02\x02\u15A6" +
    "\u15A7\x03\x02\x02\x02\u15A7\u15B2\x03\x02\x02\x02\u15A8\u15A6\x03\x02" +
    "\x02\x02\u15A9\u15AD\x05T+\x02\u15AA\u15AC\x07\u010C\x02\x02\u15AB\u15AA" +
    "\x03\x02\x02\x02\u15AC\u15AF\x03\x02\x02\x02\u15AD\u15AB\x03\x02\x02\x02" +
    "\u15AD\u15AE\x03\x02\x02\x02\u15AE\u15B1\x03\x02\x02\x02\u15AF\u15AD\x03" +
    "\x02\x02\x02\u15B0\u15A9\x03\x02\x02\x02\u15B1\u15B4\x03\x02\x02\x02\u15B2" +
    "\u15B0\x03\x02\x02\x02\u15B2\u15B3\x03\x02\x02\x02\u15B3\u01C3\x03\x02" +
    "\x02\x02\u15B4\u15B2\x03\x02\x02\x02\u15B5\u15B6\x07\xDC\x02\x02\u15B6" +
    "\u15B7\x05\u01F4\xFB\x02\u15B7\u15BB\x07\xF3\x02\x02\u15B8\u15BA\x07\u010C" +
    "\x02\x02\u15B9\u15B8\x03\x02\x02\x02\u15BA\u15BD\x03\x02\x02\x02\u15BB" +
    "\u15B9\x03\x02\x02\x02\u15BB\u15BC\x03\x02\x02\x02\u15BC\u15C7\x03\x02" +
    "\x02\x02\u15BD\u15BB\x03\x02\x02\x02\u15BE\u15C2\x05T+\x02\u15BF\u15C1" +
    "\x07\u010C\x02\x02\u15C0\u15BF\x03\x02\x02\x02\u15C1\u15C4\x03\x02\x02" +
    "\x02\u15C2\u15C0\x03\x02\x02\x02\u15C2\u15C3\x03\x02\x02\x02\u15C3\u15C6" +
    "\x03\x02\x02\x02\u15C4\u15C2\x03\x02\x02\x02\u15C5\u15BE\x03\x02\x02\x02" +
    "\u15C6\u15C9\x03\x02\x02\x02\u15C7\u15C5\x03\x02\x02\x02\u15C7\u15C8\x03" +
    "\x02\x02\x02\u15C8\u01C5\x03\x02\x02\x02\u15C9\u15C7\x03\x02\x02\x02\u15CA" +
    "\u15CB\x07\xDD\x02\x02\u15CB\u15CC\x05\u01F4\xFB\x02\u15CC\u15D0\x07\xF3" +
    "\x02\x02\u15CD\u15CF\x07\u010C\x02\x02\u15CE\u15CD\x03\x02\x02\x02\u15CF" +
    "\u15D2\x03\x02\x02\x02\u15D0\u15CE\x03\x02\x02\x02\u15D0\u15D1\x03\x02" +
    "\x02\x02\u15D1\u15DC\x03\x02\x02\x02\u15D2\u15D0\x03\x02\x02\x02\u15D3" +
    "\u15D7\x05T+\x02\u15D4\u15D6\x07\u010C\x02\x02\u15D5\u15D4\x03\x02\x02" +
    "\x02\u15D6\u15D9\x03\x02\x02\x02\u15D7\u15D5\x03\x02\x02\x02\u15D7\u15D8" +
    "\x03\x02\x02\x02\u15D8\u15DB\x03\x02\x02\x02\u15D9\u15D7\x03\x02\x02\x02" +
    "\u15DA\u15D3\x03\x02\x02\x02\u15DB\u15DE\x03\x02\x02\x02\u15DC\u15DA\x03" +
    "\x02\x02\x02\u15DC\u15DD\x03\x02\x02\x02\u15DD\u01C7\x03\x02\x02\x02\u15DE" +
    "\u15DC\x03\x02\x02\x02\u15DF\u15E0\x07\xDE\x02\x02\u15E0\u15E1\x05\u01F4" +
    "\xFB\x02\u15E1\u15E5\x07\xF3\x02\x02\u15E2\u15E4\x07\u010C\x02\x02\u15E3" +
    "\u15E2\x03\x02\x02\x02\u15E4\u15E7\x03\x02\x02\x02\u15E5\u15E3\x03\x02" +
    "\x02\x02\u15E5\u15E6\x03\x02\x02\x02\u15E6\u15F1\x03\x02\x02\x02\u15E7" +
    "\u15E5\x03\x02\x02\x02\u15E8\u15EC\x05T+\x02\u15E9\u15EB\x07\u010C\x02" +
    "\x02\u15EA\u15E9\x03\x02\x02\x02\u15EB\u15EE\x03\x02\x02\x02\u15EC\u15EA" +
    "\x03\x02\x02\x02\u15EC\u15ED\x03\x02\x02\x02\u15ED\u15F0\x03\x02\x02\x02" +
    "\u15EE\u15EC\x03\x02\x02\x02\u15EF\u15E8\x03\x02\x02\x02\u15F0\u15F3\x03" +
    "\x02\x02\x02\u15F1\u15EF\x03\x02\x02\x02\u15F1\u15F2\x03\x02\x02\x02\u15F2" +
    "\u01C9\x03\x02\x02\x02\u15F3\u15F1\x03\x02\x02\x02\u15F4\u15F5\x07\xDF" +
    "\x02\x02\u15F5\u15F6\x05\u01F4\xFB\x02\u15F6\u15FA\x07\xF3\x02\x02\u15F7" +
    "\u15F9\x07\u010C\x02\x02\u15F8\u15F7\x03\x02\x02\x02\u15F9\u15FC\x03\x02" +
    "\x02\x02\u15FA\u15F8\x03\x02\x02\x02\u15FA\u15FB\x03\x02\x02\x02\u15FB" +
    "\u1606\x03\x02\x02\x02\u15FC\u15FA\x03\x02\x02\x02\u15FD\u1601\x05T+\x02" +
    "\u15FE\u1600\x07\u010C\x02\x02\u15FF\u15FE\x03\x02\x02\x02\u1600\u1603" +
    "\x03\x02\x02\x02\u1601\u15FF\x03\x02\x02\x02\u1601\u1602\x03\x02\x02\x02" +
    "\u1602\u1605\x03\x02\x02\x02\u1603\u1601\x03\x02\x02\x02\u1604\u15FD\x03" +
    "\x02\x02\x02\u1605\u1608\x03\x02\x02\x02\u1606\u1604\x03\x02\x02\x02\u1606" +
    "\u1607\x03\x02\x02\x02\u1607\u01CB\x03\x02\x02\x02\u1608\u1606\x03\x02" +
    "\x02\x02\u1609\u160A\x07\xE0\x02\x02\u160A\u160B\x05\u01F4\xFB\x02\u160B" +
    "\u160F\x07\xF3\x02\x02\u160C\u160E\x07\u010C\x02\x02\u160D\u160C\x03\x02" +
    "\x02\x02\u160E\u1611\x03\x02\x02\x02\u160F\u160D\x03\x02\x02\x02\u160F" +
    "\u1610\x03\x02\x02\x02\u1610\u161B\x03\x02\x02\x02\u1611\u160F\x03\x02" +
    "\x02\x02\u1612\u1616\x05T+\x02\u1613\u1615\x07\u010C\x02\x02\u1614\u1613" +
    "\x03\x02\x02\x02\u1615\u1618\x03\x02\x02\x02\u1616\u1614\x03\x02\x02\x02" +
    "\u1616\u1617\x03\x02\x02\x02\u1617\u161A\x03\x02\x02\x02\u1618\u1616\x03" +
    "\x02\x02\x02\u1619\u1612\x03\x02\x02\x02\u161A\u161D\x03\x02\x02\x02\u161B" +
    "\u1619\x03\x02\x02\x02\u161B\u161C\x03\x02\x02\x02\u161C\u01CD\x03\x02" +
    "\x02\x02\u161D\u161B\x03\x02\x02\x02\u161E\u161F\x07\xE1\x02\x02\u161F" +
    "\u1620\x05\u01F4\xFB\x02\u1620\u1624\x07\xF3\x02\x02\u1621\u1623\x07\u010C" +
    "\x02\x02\u1622\u1621\x03\x02\x02\x02\u1623\u1626\x03\x02\x02\x02\u1624" +
    "\u1622\x03\x02\x02\x02\u1624\u1625\x03\x02\x02\x02\u1625\u1630\x03\x02" +
    "\x02\x02\u1626\u1624\x03\x02\x02\x02\u1627\u162B\x05T+\x02\u1628\u162A" +
    "\x07\u010C\x02\x02\u1629\u1628\x03\x02\x02\x02\u162A\u162D\x03\x02\x02" +
    "\x02\u162B\u1629\x03\x02\x02\x02\u162B\u162C\x03\x02\x02\x02\u162C\u162F" +
    "\x03\x02\x02\x02\u162D\u162B\x03\x02\x02\x02\u162E\u1627\x03\x02\x02\x02" +
    "\u162F\u1632\x03\x02\x02\x02\u1630\u162E\x03\x02\x02\x02\u1630\u1631\x03" +
    "\x02\x02\x02\u1631\u01CF\x03\x02\x02\x02\u1632\u1630\x03\x02\x02\x02\u1633" +
    "\u1634\x07\xE2\x02\x02\u1634\u1635\x05\u01F4\xFB\x02\u1635\u1639\x07\xF3" +
    "\x02\x02\u1636\u1638\x07\u010C\x02\x02\u1637\u1636\x03\x02\x02\x02\u1638" +
    "\u163B\x03\x02\x02\x02\u1639\u1637\x03\x02\x02\x02\u1639\u163A\x03\x02" +
    "\x02\x02\u163A\u1645\x03\x02\x02\x02\u163B\u1639\x03\x02\x02\x02\u163C" +
    "\u1640\x05T+\x02\u163D\u163F\x07\u010C\x02\x02\u163E\u163D\x03\x02\x02" +
    "\x02\u163F\u1642\x03\x02\x02\x02\u1640\u163E\x03\x02\x02\x02\u1640\u1641" +
    "\x03\x02\x02\x02\u1641\u1644\x03\x02\x02\x02\u1642\u1640\x03\x02\x02\x02" +
    "\u1643\u163C\x03\x02\x02\x02\u1644\u1647\x03\x02\x02\x02\u1645\u1643\x03" +
    "\x02\x02\x02\u1645\u1646\x03\x02\x02\x02\u1646\u01D1\x03\x02\x02\x02\u1647" +
    "\u1645\x03\x02\x02\x02\u1648\u1649\x07\xE3\x02\x02\u1649\u164A\x05\u01F4" +
    "\xFB\x02\u164A\u164E\x07\xF3\x02\x02\u164B\u164D\x07\u010C\x02\x02\u164C" +
    "\u164B\x03\x02\x02\x02\u164D\u1650\x03\x02\x02\x02\u164E\u164C\x03\x02" +
    "\x02\x02\u164E\u164F\x03\x02\x02\x02\u164F\u165A\x03\x02\x02\x02\u1650" +
    "\u164E\x03\x02\x02\x02\u1651\u1655\x05T+\x02\u1652\u1654\x07\u010C\x02" +
    "\x02\u1653\u1652\x03\x02\x02\x02\u1654\u1657\x03\x02\x02\x02\u1655\u1653" +
    "\x03\x02\x02\x02\u1655\u1656\x03\x02\x02\x02\u1656\u1659\x03\x02\x02\x02" +
    "\u1657\u1655\x03\x02\x02\x02\u1658\u1651\x03\x02\x02\x02\u1659\u165C\x03" +
    "\x02\x02\x02\u165A\u1658\x03\x02\x02\x02\u165A\u165B\x03\x02\x02\x02\u165B" +
    "\u01D3\x03\x02\x02\x02\u165C\u165A\x03\x02\x02\x02\u165D\u165E\x07\xD0" +
    "\x02\x02\u165E\u165F\x05\u01EE\xF8\x02\u165F\u1663\x07\xF3\x02\x02\u1660" +
    "\u1662\x07\u010C\x02\x02\u1661\u1660\x03\x02\x02\x02\u1662\u1665\x03\x02" +
    "\x02\x02\u1663\u1661\x03\x02\x02\x02\u1663\u1664\x03\x02\x02\x02\u1664" +
    "\u166F\x03\x02\x02\x02\u1665\u1663\x03\x02\x02\x02\u1666\u166A\x05V,\x02" +
    "\u1667\u1669\x07\u010C\x02\x02\u1668\u1667\x03\x02\x02\x02\u1669\u166C" +
    "\x03\x02\x02\x02\u166A\u1668\x03\x02\x02\x02\u166A\u166B\x03\x02\x02\x02" +
    "\u166B\u166E\x03\x02\x02\x02\u166C\u166A\x03\x02\x02\x02\u166D\u1666\x03" +
    "\x02\x02\x02\u166E\u1671\x03\x02\x02\x02\u166F\u166D\x03\x02\x02\x02\u166F" +
    "\u1670\x03\x02\x02\x02\u1670\u1673\x03\x02\x02\x02\u1671\u166F\x03\x02" +
    "\x02\x02\u1672\u1674\x05\u01D6\xEC\x02\u1673\u1672\x03\x02\x02\x02\u1674" +
    "\u1675\x03\x02\x02\x02\u1675\u1673\x03\x02\x02\x02\u1675\u1676\x03\x02" +
    "\x02\x02\u1676\u01D5\x03\x02\x02\x02\u1677\u167B\x05\u0222\u0112\x02\u1678" +
    "\u167A\x05\u01D8\xED\x02\u1679\u1678\x03\x02\x02\x02\u167A\u167D\x03\x02" +
    "\x02\x02\u167B\u1679\x03\x02\x02\x02\u167B\u167C\x03\x02\x02\x02\u167C" +
    "\u167E\x03\x02\x02\x02\u167D\u167B\x03\x02\x02\x02\u167E\u167F\x07\u010C" +
    "\x02\x02\u167F\u01D7\x03\x02\x02\x02\u1680\u1681\t\x06\x02\x02\u1681\u1682" +
    "\x07\xF4\x02\x02\u1682\u1683\x07\u010A\x02\x02\u1683\u168D\x07\xF3\x02" +
    "\x02\u1684\u1688\t\x07\x02\x02\u1685\u1687\v\x02\x02\x02\u1686\u1685\x03" +
    "\x02\x02\x02\u1687\u168A\x03\x02\x02\x02\u1688\u1689\x03\x02\x02\x02\u1688" +
    "\u1686\x03\x02\x02\x02\u1689\u168B\x03\x02\x02\x02\u168A\u1688\x03\x02" +
    "\x02\x02\u168B\u168D\x07\xF3\x02\x02\u168C\u1680\x03\x02\x02\x02\u168C" +
    "\u1684\x03\x02\x02\x02\u168D\u01D9\x03\x02\x02\x02\u168E\u1696\x05\u026A" +
    "\u0136\x02\u168F\u1696\x05\u024A\u0126\x02\u1690\u1696\x05\u022A\u0116" +
    "\x02\u1691\u1696\x05X-\x02\u1692\u1696\x05\\";
bitmarkParser._serializedATNSegment11 = "/\x02\u1693\u1696\x05^0\x02\u1694\u1696\x05`1\x02\u1695\u168E\x03\x02" +
    "\x02\x02\u1695\u168F\x03\x02\x02\x02\u1695\u1690\x03\x02\x02\x02\u1695" +
    "\u1691\x03\x02\x02\x02\u1695\u1692\x03\x02\x02\x02\u1695\u1693\x03\x02" +
    "\x02\x02\u1695\u1694\x03\x02\x02\x02\u1696\u1697\x03\x02\x02\x02\u1697" +
    "\u1695\x03\x02\x02\x02\u1697\u1698\x03\x02\x02\x02\u1698\u01DB\x03\x02" +
    "\x02\x02\u1699\u169A\x07!\x02\x02\u169A\u169B\x05\u01EE\xF8\x02\u169B" +
    "\u169F\x07\xF3\x02\x02\u169C\u169E\x07\u010C\x02\x02\u169D\u169C\x03\x02" +
    "\x02\x02\u169E\u16A1\x03\x02\x02\x02\u169F\u169D\x03\x02\x02\x02\u169F" +
    "\u16A0\x03\x02\x02\x02\u16A0\u16AB\x03\x02\x02\x02\u16A1\u169F\x03\x02" +
    "\x02\x02\u16A2\u16A6\x05T+\x02\u16A3\u16A5\x07\u010C\x02\x02\u16A4\u16A3" +
    "\x03\x02\x02\x02\u16A5\u16A8\x03\x02\x02\x02\u16A6\u16A4\x03\x02\x02\x02" +
    "\u16A6\u16A7\x03\x02\x02\x02\u16A7\u16AA\x03\x02\x02\x02\u16A8\u16A6\x03" +
    "\x02\x02\x02\u16A9\u16A2\x03\x02\x02\x02\u16AA\u16AD\x03\x02\x02\x02\u16AB" +
    "\u16A9\x03\x02\x02\x02\u16AB\u16AC\x03\x02\x02\x02\u16AC\u16E6\x03\x02" +
    "\x02\x02\u16AD\u16AB\x03\x02\x02\x02\u16AE\u16AF\x07!\x02\x02\u16AF\u16B0" +
    "\x05\u01EE\xF8\x02\u16B0\u16B4\x07\xF3\x02\x02\u16B1\u16B3\x07\u010C\x02" +
    "\x02\u16B2\u16B1\x03\x02\x02\x02\u16B3\u16B6\x03\x02\x02\x02\u16B4\u16B2" +
    "\x03\x02\x02\x02\u16B4\u16B5\x03\x02\x02\x02\u16B5\u16C0\x03\x02\x02\x02" +
    "\u16B6\u16B4\x03\x02\x02\x02\u16B7\u16BB\x05T+\x02\u16B8\u16BA\x07\u010C" +
    "\x02\x02\u16B9\u16B8\x03\x02\x02\x02\u16BA\u16BD\x03\x02\x02\x02\u16BB" +
    "\u16B9\x03\x02\x02\x02\u16BB\u16BC\x03\x02\x02\x02\u16BC\u16BF\x03\x02" +
    "\x02\x02\u16BD\u16BB\x03\x02\x02\x02\u16BE\u16B7\x03\x02\x02\x02\u16BF" +
    "\u16C2\x03\x02\x02\x02\u16C0\u16BE\x03\x02\x02\x02\u16C0\u16C1\x03\x02" +
    "\x02\x02\u16C1\u16CB\x03\x02\x02\x02\u16C2\u16C0\x03\x02\x02\x02\u16C3" +
    "\u16C4\t\b\x02\x02\u16C4\u16C7\x05\u0262\u0132\x02\u16C5\u16C6\x07\u010C" +
    "\x02\x02\u16C6\u16C8\x05\u01DE\xF0\x02\u16C7\u16C5\x03\x02\x02\x02\u16C8" +
    "\u16C9\x03\x02\x02\x02\u16C9\u16C7\x03\x02\x02\x02\u16C9\u16CA\x03\x02" +
    "\x02\x02\u16CA\u16CC\x03\x02\x02\x02\u16CB\u16C3\x03\x02\x02\x02\u16CC" +
    "\u16CD\x03\x02\x02\x02\u16CD\u16CB\x03\x02\x02\x02\u16CD\u16CE\x03\x02" +
    "\x02\x02\u16CE\u16CF\x03\x02\x02\x02\u16CF\u16D3\t\b\x02\x02\u16D0\u16D2" +
    "\x07\u010C\x02\x02\u16D1\u16D0\x03\x02\x02\x02\u16D2\u16D5\x03\x02\x02" +
    "\x02\u16D3\u16D1\x03\x02\x02\x02\u16D3\u16D4\x03\x02\x02\x02\u16D4\u16E3" +
    "\x03\x02\x02\x02\u16D5\u16D3\x03\x02\x02\x02\u16D6\u16E0\x05h5\x02\u16D7" +
    "\u16D9\x07\u010C\x02\x02\u16D8\u16D7\x03\x02\x02\x02\u16D9\u16DC\x03\x02" +
    "\x02\x02\u16DA\u16D8\x03\x02\x02\x02\u16DA\u16DB\x03\x02\x02\x02\u16DB" +
    "\u16DD\x03\x02\x02\x02\u16DC\u16DA\x03\x02\x02\x02\u16DD\u16DF\x05h5\x02" +
    "\u16DE\u16DA\x03\x02\x02\x02\u16DF\u16E2\x03\x02\x02\x02\u16E0\u16DE\x03" +
    "\x02\x02\x02\u16E0\u16E1\x03\x02\x02\x02\u16E1\u16E4\x03\x02\x02\x02\u16E2" +
    "\u16E0\x03\x02\x02\x02\u16E3\u16D6\x03\x02\x02\x02\u16E3\u16E4\x03\x02" +
    "\x02\x02\u16E4\u16E6\x03\x02\x02\x02\u16E5\u1699\x03\x02\x02\x02\u16E5" +
    "\u16AE\x03\x02\x02\x02\u16E6\u01DD\x03\x02\x02\x02\u16E7\u16E8\x07\xE5" +
    "\x02\x02\u16E8\u16E9\x05\u0262\u0132\x02\u16E9\u16EB\x07\xF3\x02\x02\u16EA" +
    "\u16EC\x05\u01EC\xF7\x02\u16EB\u16EA\x03\x02\x02\x02\u16EB\u16EC\x03\x02" +
    "\x02\x02\u16EC\u01DF\x03\x02\x02\x02\u16ED\u16EE\x07\"\x02\x02\u16EE\u16EF" +
    "\x05\u01EE\xF8\x02\u16EF\u16F3\x07\xF3\x02\x02\u16F0\u16F2\x07\u010C\x02" +
    "\x02\u16F1\u16F0\x03\x02\x02\x02\u16F2\u16F5\x03\x02\x02\x02\u16F3\u16F1" +
    "\x03\x02\x02\x02\u16F3\u16F4\x03\x02\x02\x02\u16F4\u16FF\x03\x02\x02\x02" +
    "\u16F5\u16F3\x03\x02\x02\x02\u16F6\u16FA\x05T+\x02\u16F7\u16F9\x07\u010C" +
    "\x02\x02\u16F8\u16F7\x03\x02\x02\x02\u16F9\u16FC\x03\x02\x02\x02\u16FA" +
    "\u16F8\x03\x02\x02\x02\u16FA\u16FB\x03\x02\x02\x02\u16FB\u16FE\x03\x02" +
    "\x02\x02\u16FC\u16FA\x03\x02\x02\x02\u16FD\u16F6\x03\x02\x02\x02\u16FE" +
    "\u1701\x03\x02\x02\x02\u16FF\u16FD\x03\x02\x02\x02\u16FF\u1700\x03\x02" +
    "\x02\x02\u1700\u1717\x03\x02\x02\x02\u1701\u16FF\x03\x02\x02\x02\u1702" +
    "\u1704\t\b\x02\x02\u1703\u1705\x05\u0262\u0132\x02\u1704\u1703\x03\x02" +
    "\x02\x02\u1704\u1705\x03\x02\x02\x02\u1705\u170D\x03\x02\x02\x02\u1706" +
    "\u1708\x07\u010C\x02\x02\u1707\u1706\x03\x02\x02\x02\u1708\u170B\x03\x02" +
    "\x02\x02\u1709\u1707\x03\x02\x02\x02\u1709\u170A\x03\x02\x02\x02\u170A" +
    "\u170C\x03\x02\x02\x02\u170B\u1709\x03\x02\x02\x02\u170C\u170E\x05\u01DE" +
    "\xF0\x02\u170D\u1709\x03\x02\x02\x02\u170E\u170F\x03\x02\x02\x02\u170F" +
    "\u170D\x03\x02\x02\x02\u170F\u1710\x03\x02\x02\x02\u1710\u1712\x03\x02" +
    "\x02\x02\u1711\u1702\x03\x02\x02\x02\u1712\u1713\x03\x02\x02\x02\u1713" +
    "\u1711\x03\x02\x02\x02\u1713\u1714\x03\x02\x02\x02\u1714\u1715\x03\x02" +
    "\x02\x02\u1715\u1716\t\b\x02\x02\u1716\u1718\x03\x02\x02\x02\u1717\u1711" +
    "\x03\x02\x02\x02\u1717\u1718\x03\x02\x02\x02\u1718\u01E1\x03\x02\x02\x02" +
    "\u1719\u171A\x07#\x02\x02\u171A\u171B\x05\u01EE\xF8\x02\u171B\u171F\x07" +
    "\xF3\x02\x02\u171C\u171E\x07\u010C\x02\x02\u171D\u171C\x03\x02\x02\x02" +
    "\u171E\u1721\x03\x02\x02\x02\u171F\u171D\x03\x02\x02\x02\u171F\u1720\x03" +
    "\x02\x02\x02\u1720\u172B\x03\x02\x02\x02\u1721\u171F\x03\x02\x02\x02\u1722" +
    "\u1726\x05T+\x02\u1723\u1725\x07\u010C\x02\x02\u1724\u1723\x03\x02\x02" +
    "\x02\u1725\u1728\x03\x02\x02\x02\u1726\u1724\x03\x02\x02\x02\u1726\u1727" +
    "\x03\x02\x02\x02\u1727\u172A\x03\x02\x02\x02\u1728\u1726\x03\x02\x02\x02" +
    "\u1729\u1722\x03\x02\x02\x02\u172A\u172D\x03\x02\x02\x02\u172B\u1729\x03" +
    "\x02\x02\x02\u172B\u172C\x03\x02\x02\x02\u172C\u173C\x03\x02\x02\x02\u172D" +
    "\u172B\x03\x02\x02\x02\u172E\u172F\t\b\x02\x02\u172F\u1732\x05\u0262\u0132" +
    "\x02\u1730\u1731\x07\u010C\x02\x02\u1731\u1733\x05\u01DE\xF0\x02\u1732" +
    "\u1730\x03\x02\x02\x02\u1733\u1734\x03\x02\x02\x02\u1734\u1732\x03\x02" +
    "\x02\x02\u1734\u1735\x03\x02\x02\x02\u1735\u1737\x03\x02\x02\x02\u1736" +
    "\u172E\x03\x02\x02\x02\u1737\u1738\x03\x02\x02\x02\u1738\u1736\x03\x02" +
    "\x02\x02\u1738\u1739\x03\x02\x02\x02\u1739\u173A\x03\x02\x02\x02\u173A" +
    "\u173B\t\b\x02\x02\u173B\u173D\x03\x02\x02\x02\u173C\u1736\x03\x02\x02" +
    "\x02\u173C\u173D\x03\x02\x02\x02\u173D\u01E3\x03\x02\x02\x02\u173E\u173F" +
    "\x07$\x02\x02\u173F\u1740\x05\u01EE\xF8\x02\u1740\u1744\x07\xF3\x02\x02" +
    "\u1741\u1743\x07\u010C\x02\x02\u1742\u1741\x03\x02\x02\x02\u1743\u1746" +
    "\x03\x02\x02\x02\u1744\u1742\x03\x02\x02\x02\u1744\u1745\x03\x02\x02\x02" +
    "\u1745\u1750\x03\x02\x02\x02\u1746\u1744\x03\x02\x02\x02\u1747\u174B\x05" +
    "T+\x02\u1748\u174A\x07\u010C\x02\x02\u1749\u1748\x03\x02\x02\x02\u174A" +
    "\u174D\x03\x02\x02\x02\u174B\u1749\x03\x02\x02\x02\u174B\u174C\x03\x02" +
    "\x02\x02\u174C\u174F\x03\x02\x02\x02\u174D\u174B\x03\x02\x02\x02\u174E" +
    "\u1747\x03\x02\x02\x02\u174F\u1752\x03\x02\x02\x02\u1750\u174E\x03\x02" +
    "\x02\x02\u1750\u1751\x03\x02\x02\x02\u1751\u1761\x03\x02\x02\x02\u1752" +
    "\u1750\x03\x02\x02\x02\u1753\u1754\t\b\x02\x02\u1754\u1757\x05\u0262\u0132" +
    "\x02\u1755\u1756\x07\u010C\x02\x02\u1756\u1758\x05\u01DE\xF0\x02\u1757" +
    "\u1755\x03\x02\x02\x02\u1758\u1759\x03\x02\x02\x02\u1759\u1757\x03\x02" +
    "\x02\x02\u1759\u175A\x03\x02\x02\x02\u175A\u175C\x03\x02\x02\x02\u175B" +
    "\u1753\x03\x02\x02\x02\u175C\u175D\x03\x02\x02\x02\u175D\u175B\x03\x02" +
    "\x02\x02\u175D\u175E\x03\x02\x02\x02\u175E\u175F\x03\x02\x02\x02\u175F" +
    "\u1760\t\b\x02\x02\u1760\u1762\x03\x02\x02\x02\u1761\u175B\x03\x02\x02" +
    "\x02\u1761\u1762\x03\x02\x02\x02\u1762\u01E5\x03\x02\x02\x02\u1763\u1764" +
    "\x07%\x02\x02\u1764\u1765\x05\u01EE\xF8\x02\u1765\u1769\x07\xF3\x02\x02" +
    "\u1766\u1768\x07\u010C\x02\x02\u1767\u1766\x03\x02\x02\x02\u1768\u176B" +
    "\x03\x02\x02\x02\u1769\u1767\x03\x02\x02\x02\u1769\u176A\x03\x02\x02\x02" +
    "\u176A\u1775\x03\x02\x02\x02\u176B\u1769\x03\x02\x02\x02\u176C\u1770\x05" +
    "T+\x02\u176D\u176F\x07\u010C\x02\x02\u176E\u176D\x03\x02\x02\x02\u176F" +
    "\u1772\x03\x02\x02\x02\u1770\u176E\x03\x02\x02\x02\u1770\u1771\x03\x02" +
    "\x02\x02\u1771\u1774\x03\x02\x02\x02\u1772\u1770\x03\x02\x02\x02\u1773" +
    "\u176C\x03\x02\x02\x02\u1774\u1777\x03\x02\x02\x02\u1775\u1773\x03\x02" +
    "\x02\x02\u1775\u1776\x03\x02\x02\x02\u1776\u1786\x03\x02\x02\x02\u1777" +
    "\u1775\x03\x02\x02\x02\u1778\u1779\t\b\x02\x02\u1779\u177C\x05\u0262\u0132" +
    "\x02\u177A\u177B\x07\u010C\x02\x02\u177B\u177D\x05\u01DE\xF0\x02\u177C" +
    "\u177A\x03\x02\x02\x02\u177D\u177E\x03\x02\x02\x02\u177E\u177C\x03\x02" +
    "\x02\x02\u177E\u177F\x03\x02\x02\x02\u177F\u1781\x03\x02\x02\x02\u1780" +
    "\u1778\x03\x02\x02\x02\u1781\u1782\x03\x02\x02\x02\u1782\u1780\x03\x02" +
    "\x02\x02\u1782\u1783\x03\x02\x02\x02\u1783\u1784\x03\x02\x02\x02\u1784" +
    "\u1785\t\b\x02\x02\u1785\u1787\x03\x02\x02\x02\u1786\u1780\x03\x02\x02" +
    "\x02\u1786\u1787\x03\x02\x02\x02\u1787\u01E7\x03\x02\x02\x02\u1788\u1789" +
    "\x07 \x02\x02\u1789\u178A\x05\u01EE\xF8\x02\u178A\u178E\x07\xF3\x02\x02" +
    "\u178B\u178D\x07\u010C\x02\x02\u178C\u178B\x03\x02\x02\x02\u178D\u1790" +
    "\x03\x02\x02\x02\u178E\u178C\x03\x02\x02\x02\u178E\u178F\x03\x02\x02\x02" +
    "\u178F\u179A\x03\x02\x02\x02\u1790\u178E\x03\x02\x02\x02\u1791\u1795\x05" +
    "T+\x02\u1792\u1794\x07\u010C\x02\x02\u1793\u1792\x03\x02\x02\x02\u1794" +
    "\u1797\x03\x02\x02\x02\u1795\u1793\x03\x02\x02\x02\u1795\u1796\x03\x02" +
    "\x02\x02\u1796\u1799\x03\x02\x02\x02\u1797\u1795\x03\x02\x02\x02\u1798" +
    "\u1791\x03\x02\x02\x02\u1799\u179C\x03\x02\x02\x02\u179A\u1798\x03\x02" +
    "\x02\x02\u179A\u179B\x03\x02\x02\x02\u179B\u17DA\x03\x02\x02\x02\u179C" +
    "\u179A\x03\x02\x02\x02\u179D\u179E\x07 \x02\x02\u179E\u179F\x05\u01EE" +
    "\xF8\x02\u179F\u17A3\x07\xF3\x02\x02\u17A0\u17A2\x07\u010C\x02\x02\u17A1" +
    "\u17A0\x03\x02\x02\x02\u17A2\u17A5\x03\x02\x02\x02\u17A3\u17A1\x03\x02" +
    "\x02\x02\u17A3\u17A4\x03\x02\x02\x02\u17A4\u17AF\x03\x02\x02\x02\u17A5" +
    "\u17A3\x03\x02\x02\x02\u17A6\u17AA\x05T+\x02\u17A7\u17A9\x07\u010C\x02" +
    "\x02\u17A8\u17A7\x03\x02\x02\x02\u17A9\u17AC\x03\x02\x02\x02\u17AA\u17A8" +
    "\x03\x02\x02\x02\u17AA\u17AB\x03\x02\x02\x02\u17AB\u17AE\x03\x02\x02\x02" +
    "\u17AC\u17AA\x03\x02\x02\x02\u17AD\u17A6\x03\x02\x02\x02\u17AE\u17B1\x03" +
    "\x02\x02\x02\u17AF\u17AD\x03\x02\x02\x02\u17AF\u17B0\x03\x02\x02\x02\u17B0" +
    "\u17BF\x03\x02\x02\x02\u17B1\u17AF\x03\x02\x02\x02\u17B2\u17B3\t\b\x02" +
    "\x02\u17B3\u17BB\x05\u01EA\xF6\x02\u17B4\u17B6\x07\u010C\x02\x02\u17B5" +
    "\u17B4\x03\x02\x02\x02\u17B6\u17B9\x03\x02\x02\x02\u17B7\u17B5\x03\x02" +
    "\x02\x02\u17B7\u17B8\x03\x02\x02\x02\u17B8\u17BA\x03\x02\x02\x02\u17B9" +
    "\u17B7\x03\x02\x02\x02\u17BA\u17BC\x05\u01DE\xF0\x02\u17BB\u17B7\x03\x02" +
    "\x02\x02\u17BC\u17BD\x03\x02\x02\x02\u17BD\u17BB\x03\x02\x02\x02\u17BD" +
    "\u17BE\x03\x02\x02\x02\u17BE\u17C0\x03\x02\x02\x02\u17BF\u17B2\x03\x02" +
    "\x02\x02\u17C0\u17C1\x03\x02\x02\x02\u17C1\u17BF\x03\x02\x02\x02\u17C1" +
    "\u17C2\x03\x02\x02\x02\u17C2\u17C3\x03\x02\x02\x02\u17C3\u17C7\t\b\x02" +
    "\x02\u17C4\u17C6\x07\u010C\x02\x02\u17C5\u17C4\x03\x02\x02\x02\u17C6\u17C9" +
    "\x03\x02\x02\x02\u17C7\u17C5\x03\x02\x02\x02\u17C7\u17C8\x03\x02\x02\x02" +
    "\u17C8\u17D7\x03\x02\x02\x02\u17C9\u17C7\x03\x02\x02\x02\u17CA\u17D4\x05" +
    "h5\x02\u17CB\u17CD\x07\u010C\x02\x02\u17CC\u17CB\x03\x02\x02\x02\u17CD" +
    "\u17D0\x03\x02\x02\x02\u17CE\u17CC\x03\x02\x02\x02\u17CE\u17CF\x03\x02" +
    "\x02\x02\u17CF\u17D1\x03\x02\x02\x02\u17D0\u17CE\x03\x02\x02\x02\u17D1" +
    "\u17D3\x05h5\x02\u17D2\u17CE\x03\x02\x02\x02\u17D3\u17D6\x03\x02\x02\x02" +
    "\u17D4\u17D2\x03\x02\x02\x02\u17D4\u17D5\x03\x02\x02\x02\u17D5\u17D8\x03" +
    "\x02\x02\x02\u17D6\u17D4\x03\x02\x02\x02\u17D7\u17CA\x03\x02\x02\x02\u17D7" +
    "\u17D8\x03\x02\x02\x02\u17D8\u17DA\x03\x02\x02\x02\u17D9\u1788\x03\x02" +
    "\x02\x02\u17D9\u179D\x03\x02\x02\x02\u17DA\u01E9\x03\x02\x02\x02\u17DB" +
    "\u17DD\n\t\x02\x02\u17DC\u17DB\x03\x02\x02\x02\u17DD\u17DE\x03\x02\x02" +
    "\x02\u17DE\u17DC\x03\x02\x02\x02\u17DE\u17DF\x03\x02\x02\x02\u17DF\u01EB" +
    "\x03\x02\x02\x02\u17E0\u17E1\x07\u0121\x02\x02\u17E1\u17E2\x07\u010A\x02" +
    "\x02\u17E2\u17E3\x07\xF3\x02\x02\u17E3\u01ED\x03\x02\x02\x02\u17E4\u17E6" +
    "\x05\u01F0\xF9\x02\u17E5\u17E4\x03\x02\x02\x02\u17E6\u17E9\x03\x02\x02" +
    "\x02\u17E7\u17E5\x03\x02\x02\x02\u17E7\u17E8\x03\x02\x02\x02\u17E8\u17EF" +
    "\x03\x02\x02\x02\u17E9\u17E7\x03\x02\x02\x02\u17EA\u17EE\x07\u0163\x02" +
    "\x02\u17EB\u17EE\x07\u0164\x02\x02\u17EC\u17EE\x05\u01F2\xFA\x02\u17ED" +
    "\u17EA\x03\x02\x02\x02\u17ED\u17EB\x03\x02\x02\x02\u17ED\u17EC\x03\x02" +
    "\x02\x02\u17EE\u17F1\x03\x02\x02\x02\u17EF\u17ED\x03\x02\x02\x02\u17EF" +
    "\u17F0\x03\x02\x02\x02\u17F0\u01EF\x03\x02\x02\x02\u17F1\u17EF\x03\x02" +
    "\x02\x02\u17F2\u17F3\t\n\x02\x02\u17F3\u01F1\x03\x02\x02\x02\u17F4\u17FE" +
    "\x05\u01F6\xFC\x02\u17F5\u17FE\x05\u022E\u0118\x02\u17F6\u17FE\x05\u01F8" +
    "\xFD\x02\u17F7\u17FE\x05\u01FA\xFE\x02\u17F8\u17FE\x05\u01FC\xFF\x02\u17F9" +
    "\u17FE\x05\u01FE\u0100\x02\u17FA\u17FE\x05\u0200\u0101\x02\u17FB\u17FE" +
    "\x05\u0202\u0102\x02\u17FC\u17FE\x07\u0139\x02\x02\u17FD\u17F4\x03\x02" +
    "\x02\x02\u17FD\u17F5\x03\x02\x02\x02\u17FD\u17F6\x03\x02\x02\x02\u17FD" +
    "\u17F7\x03\x02\x02\x02\u17FD\u17F8\x03\x02\x02\x02\u17FD\u17F9\x03\x02" +
    "\x02\x02\u17FD\u17FA\x03\x02\x02\x02\u17FD\u17FB\x03\x02\x02\x02\u17FD" +
    "\u17FC\x03\x02\x02\x02\u17FE\u01F3\x03\x02\x02\x02\u17FF\u1806\x07\u0161" +
    "\x02\x02\u1800\u1806\x07\u0162\x02\x02\u1801\u1806\x07\u0163\x02\x02\u1802" +
    "\u1806\x07\u0166\x02\x02\u1803\u1806\x07\u0164\x02\x02\u1804\u1806\x03" +
    "\x02\x02\x02\u1805\u17FF\x03\x02\x02\x02\u1805\u1800\x03\x02\x02\x02\u1805" +
    "\u1801\x03\x02\x02\x02\u1805\u1802\x03\x02\x02\x02\u1805\u1803\x03\x02" +
    "\x02\x02\u1805\u1804\x03\x02\x02\x02\u1806\u01F5\x03\x02\x02\x02\u1807" +
    "\u180A\x07\u0131\x02\x02\u1808\u180B\x07\u0105\x02\x02\u1809\u180B\x07" +
    "\u0174\x02\x02\u180A\u1808\x03\x02\x02\x02\u180A\u1809\x03\x02\x02\x02" +
    "\u180A\u180B\x03\x02\x02\x02\u180B\u1815\x03\x02\x02\x02\u180C\u180E\x07" +
    "\u0146\x02\x02\u180D\u180F\x07\u0105\x02\x02\u180E\u180D\x03\x02\x02\x02" +
    "\u180E\u180F\x03\x02\x02\x02\u180F\u1815\x03\x02\x02\x02\u1810\u1812\x07" +
    "\u0132\x02\x02\u1811\u1813\x07\u0105\x02\x02\u1812\u1811\x03\x02\x02\x02" +
    "\u1812\u1813\x03\x02\x02\x02\u1813\u1815\x03\x02\x02\x02\u1814\u1807\x03" +
    "\x02\x02\x02\u1814\u180C\x03\x02\x02\x02\u1814\u1810\x03\x02\x02\x02\u1815" +
    "\u01F7\x03\x02\x02\x02\u1816\u1819\t\v\x02\x02\u1817\u1818\x07\xF4\x02" +
    "\x02\u1818\u181A\x07\u0107\x02\x02\u1819\u1817\x03\x02\x02\x02\u1819\u181A" +
    "\x03\x02\x02\x02\u181A\u01F9\x03\x02\x02\x02\u181B\u181C\t\f\x02\x02\u181C" +
    "\u01FB\x03\x02\x02\x02\u181D\u181E\t\r\x02\x02\u181E\u01FD\x03\x02\x02" +
    "\x02\u181F\u1820\t\x0E\x02\x02\u1820\u01FF\x03\x02\x02\x02\u1821\u1822" +
    "\t\x0F\x02\x02\u1822\u0201\x03\x02\x02\x02\u1823\u1824\t\x10\x02\x02\u1824" +
    "\u0203\x03\x02\x02\x02\u1825\u1826\t\x11\x02\x02\u1826\u0205\x03\x02\x02" +
    "\x02\u1827\u1828\t\x12\x02\x02\u1828\u0207\x03\x02\x02\x02\u1829\u182A" +
    "\t\x13\x02\x02\u182A\u0209\x03\x02\x02\x02\u182B\u182C\t\x14\x02\x02\u182C" +
    "\u020B\x03\x02\x02\x02\u182D\u1830\x07\u013D\x02\x02\u182E\u182F\x07\xF4" +
    "\x02\x02\u182F\u1831\x07\u0107\x02\x02\u1830\u182E\x03\x02\x02\x02\u1830" +
    "\u1831\x03\x02\x02\x02\u1831\u183D\x03\x02\x02\x02\u1832\u1835\x07\u0150" +
    "\x02\x02\u1833\u1834\x07\xF4\x02\x02\u1834\u1836\x07\u0107\x02\x02\u1835" +
    "\u1833\x03\x02\x02\x02\u1835\u1836\x03\x02\x02\x02\u1836\u183D\x03\x02" +
    "\x02\x02\u1837\u183A\x07\u015D\x02\x02\u1838\u1839\x07\xF4\x02\x02\u1839" +
    "\u183B\x07\u0107\x02\x02\u183A\u1838\x03\x02\x02\x02\u183A\u183B\x03\x02" +
    "\x02\x02\u183B\u183D\x03\x02\x02\x02\u183C\u182D\x03\x02\x02\x02\u183C" +
    "\u1832\x03\x02\x02\x02\u183C\u1837\x03\x02\x02\x02\u183D\u020D\x03\x02" +
    "\x02\x02\u183E\u183F\t\x15\x02\x02\u183F\u020F\x03\x02\x02\x02\u1840\u1841" +
    "\x05\u0204\u0103\x02\u1841\u1842\x07\xF4\x02\x02\u1842\u1843\x05\u0236" +
    "\u011C\x02\u1843\u1844\x07\xF3\x02\x02\u1844\u1847\x03\x02\x02\x02\u1845" +
    "\u1847\x07\u0108\x02\x02\u1846\u1840\x03\x02\x02\x02\u1846\u1845\x03\x02" +
    "\x02\x02\u1847\u0211\x03\x02\x02\x02\u1848\u1849\x05\u0206\u0104\x02\u1849" +
    "\u184A\x07\xF4\x02\x02\u184A\u184B\x05\u0236\u011C\x02\u184B\u1850\x07" +
    "\xF3\x02\x02\u184C\u184D\x07\u0124\x02\x02\u184D\u184E\x05\u026A\u0136" +
    "\x02\u184E\u184F\x07\xF3\x02\x02\u184F\u1851\x03\x02\x02\x02\u1850\u184C" +
    "\x03\x02\x02\x02\u1850\u1851\x03\x02\x02\x02\u1851\u0213\x03\x02\x02\x02" +
    "\u1852\u1853\x05\u020A\u0106\x02\u1853\u1854\x07\xF4\x02\x02\u1854\u1855" +
    "\x05\u0236\u011C\x02\u1855\u185A\x07\xF3\x02\x02\u1856\u1857\x07\u0124" +
    "\x02\x02\u1857\u1858\x05\u026A\u0136\x02\u1858\u1859\x07\xF3\x02\x02\u1859" +
    "\u185B\x03\x02\x02\x02\u185A\u1856\x03\x02\x02\x02\u185A\u185B\x03\x02" +
    "\x02\x02\u185B\u0215\x03\x02\x02\x02\u185C\u185D\x05\u0208\u0105\x02\u185D" +
    "\u1860\x07\xF4\x02\x02\u185E\u1861\x05\u0236\u011C\x02\u185F\u1861\x05" +
    "\u0234\u011B\x02\u1860\u185E\x03\x02\x02\x02\u1860\u185F\x03\x02\x02\x02" +
    "\u1861\u1862\x03\x02\x02\x02\u1862\u1867\x07\xF3\x02\x02\u1863\u1864\x07" +
    "\u0124\x02\x02\u1864\u1865\x05\u026A\u0136\x02\u1865\u1866\x07\xF3\x02" +
    "\x02\u1866\u1868\x03\x02\x02\x02\u1867\u1863\x03\x02\x02\x02\u1867\u1868" +
    "\x03\x02\x02\x02\u1868\u0217\x03\x02\x02\x02\u1869\u186D\x05\u021A\u010E" +
    "\x02\u186A\u186C\x05\u0232\u011A\x02\u186B\u186A\x03\x02\x02\x02\u186C" +
    "\u186F\x03\x02\x02\x02\u186D\u186B\x03\x02\x02\x02\u186D\u186E\x03\x02" +
    "\x02\x02\u186E\u0219\x03\x02\x02\x02\u186F\u186D\x03\x02\x02\x02\u1870" +
    "\u1871\x05\u020E\u0108\x02\u1871\u1875\x07\xF4\x02\x02\u1872\u1874\x07" +
    "\x04\x02\x02\u1873\u1872\x03\x02\x02\x02\u1874\u1877\x03\x02\x02\x02\u1875" +
    "\u1873\x03\x02\x02\x02\u1875\u1876\x03\x02\x02\x02\u1876\u1878\x03\x02" +
    "\x02\x02\u1877\u1875\x03\x02\x02\x02\u1878\u1879\x05\u0236\u011C\x02\u1879" +
    "\u187A\x07\xF3\x02\x02\u187A\u021B\x03\x02\x02\x02\u187B\u187F\x05\u021E" +
    "\u0110\x02\u187C\u187E\x05\u0232\u011A\x02\u187D\u187C\x03\x02\x02\x02" +
    "\u187E\u1881\x03\x02\x02\x02\u187F\u187D\x03\x02\x02\x02\u187F\u1880\x03" +
    "\x02\x02\x02\u1880\u021D\x03\x02\x02\x02\u1881\u187F\x03\x02\x02\x02\u1882" +
    "\u1883\x05\u020C\u0107\x02\u1883\u1884\x07\xF4\x02\x02\u1884\u1885\x05" +
    "\u0236\u011C\x02\u1885\u188A\x07\xF3\x02\x02\u1886\u1887\x07\u0124\x02" +
    "\x02\u1887\u1888\x05\u026A\u0136\x02\u1888\u1889\x07\xF3\x02\x02\u1889" +
    "\u188B\x03\x02\x02\x02\u188A\u1886\x03\x02\x02\x02\u188A\u188B\x03\x02" +
    "\x02\x02\u188B\u021F\x03\x02\x02\x02\u188C\u1890\x05\u0222\u0112\x02\u188D" +
    "\u188F\x05\u0226\u0114\x02\u188E\u188D\x03\x02\x02\x02\u188F\u1892\x03" +
    "\x02\x02\x02\u1890\u188E\x03\x02\x02\x02\u1890\u1891\x03\x02\x02\x02\u1891" +
    "\u1895\x03\x02\x02\x02\u1892\u1890\x03\x02\x02\x02\u1893\u1894\x07\u010C" +
    "\x02\x02\u1894\u1896\x07\u0126\x02\x02\u1895\u1893\x03\x02\x02\x02\u1895" +
    "\u1896\x03\x02\x02\x02\u1896\u0221\x03\x02\x02\x02\u1897\u1898\x05\u0224" +
    "\u0113\x02\u1898\u189C\x07\xF4\x02\x02\u1899\u189B\x07\x04\x02\x02\u189A" +
    "\u1899\x03\x02\x02\x02\u189B\u189E\x03\x02\x02\x02\u189C\u189A\x03\x02" +
    "\x02\x02\u189C\u189D\x03\x02\x02\x02\u189D\u189F\x03\x02\x02\x02\u189E" +
    "\u189C\x03\x02\x02\x02\u189F\u18A0\x05\u0236\u011C\x02\u18A0\u18A1\x07" +
    "\xF3\x02\x02\u18A1\u0223\x03\x02\x02\x02\u18A2\u18A5\x07\u013B\x02\x02" +
    "\u18A3\u18A6\x07\u0105\x02\x02\u18A4\u18A6\x07\u0174\x02\x02\u18A5\u18A3" +
    "\x03\x02\x02\x02\u18A5\u18A4\x03\x02\x02\x02\u18A5\u18A6\x03\x02\x02\x02" +
    "\u18A6\u18B0\x03\x02\x02\x02\u18A7\u18A9\x07\u014F\x02\x02\u18A8\u18AA" +
    "\x07\u0105\x02\x02\u18A9\u18A8\x03\x02\x02\x02\u18A9\u18AA\x03\x02\x02" +
    "\x02\u18AA\u18B0\x03\x02\x02\x02\u18AB\u18AD\x07\u013C\x02\x02\u18AC\u18AE" +
    "\x07\u0105\x02\x02\u18AD\u18AC\x03\x02\x02\x02\u18AD\u18AE\x03\x02\x02" +
    "\x02\u18AE\u18B0\x03\x02\x02\x02\u18AF\u18A2\x03\x02\x02\x02\u18AF\u18A7" +
    "\x03\x02\x02\x02\u18AF\u18AB\x03\x02\x02\x02\u18B0\u0225\x03\x02\x02\x02" +
    "\u18B1\u18B2\x07\u0122\x02\x02\u18B2\u18B3\x07\xF4\x02\x02\u18B3\u18B4" +
    "\x05\u0236\u011C\x02\u18B4\u18B5\x07\xF3\x02\x02\u18B5\u18C3\x03\x02\x02" +
    "\x02\u18B6\u18B7\t\x06\x02\x02\u18B7\u18B8\x07\xF4\x02\x02\u18B8\u18B9" +
    "\x07\u010A\x02\x02\u18B9\u18C3\x07\xF3\x02\x02\u18BA\u18BE\t\x07\x02\x02" +
    "\u18BB\u18BD\v\x02\x02\x02\u18BC\u18BB\x03\x02\x02\x02\u18BD\u18C0\x03" +
    "\x02\x02\x02\u18BE\u18BF\x03\x02\x02\x02\u18BE\u18BC\x03\x02\x02\x02\u18BF" +
    "\u18C1\x03\x02\x02\x02\u18C0\u18BE\x03\x02\x02\x02\u18C1\u18C3\x07\xF3" +
    "\x02\x02\u18C2\u18B1\x03\x02\x02\x02\u18C2\u18B6\x03\x02\x02\x02\u18C2" +
    "\u18BA\x03\x02\x02\x02\u18C3\u0227\x03\x02\x02\x02\u18C4\u18C5\x07\u0122" +
    "\x02\x02\u18C5\u18C6\x07\xF4\x02\x02\u18C6\u18C7\x05\u0236\u011C\x02\u18C7" +
    "\u18C8\x07\xF3\x02\x02\u18C8\u18D6\x03\x02\x02\x02\u18C9\u18CA\t\x06\x02" +
    "\x02\u18CA\u18CB\x07\xF4\x02\x02\u18CB\u18CC\x07\u010A\x02\x02\u18CC\u18D6" +
    "\x07\xF3\x02\x02\u18CD\u18D1\t\x07\x02\x02\u18CE\u18D0\v\x02\x02\x02\u18CF" +
    "\u18CE\x03\x02\x02\x02\u18D0\u18D3\x03\x02\x02\x02\u18D1\u18D2\x03\x02" +
    "\x02\x02\u18D1\u18CF\x03\x02\x02\x02\u18D2\u18D4\x03\x02\x02\x02\u18D3" +
    "\u18D1\x03\x02\x02\x02\u18D4\u18D6\x07\xF3\x02\x02\u18D5\u18C4\x03\x02" +
    "\x02\x02\u18D5\u18C9\x03\x02\x02\x02\u18D5\u18CD\x03\x02\x02\x02\u18D6" +
    "\u0229\x03\x02\x02\x02\u18D7\u18DB\x05\u022C\u0117\x02\u18D8\u18DA\x05" +
    "\u0232\u011A\x02\u18D9\u18D8\x03\x02\x02\x02\u18DA\u18DD\x03\x02\x02\x02" +
    "\u18DB\u18D9\x03\x02\x02\x02\u18DB\u18DC\x03\x02\x02\x02\u18DC\u022B\x03" +
    "\x02\x02\x02\u18DD\u18DB\x03\x02\x02\x02\u18DE\u18DF\x05\u0230\u0119\x02" +
    "\u18DF\u18E0\x07\xF4\x02\x02\u18E0\u18E1\x05\u0236\u011C\x02\u18E1\u18E6" +
    "\x07\xF3\x02\x02\u18E2\u18E3\x07\u0124\x02\x02\u18E3\u18E4\x05\u026A\u0136" +
    "\x02\u18E4\u18E5\x07\xF3\x02\x02\u18E5\u18E7\x03\x02\x02\x02\u18E6\u18E2" +
    "\x03\x02\x02\x02\u18E6\u18E7\x03\x02\x02\x02\u18E7\u022D\x03\x02\x02\x02" +
    "\u18E8\u18EB\x07\u0130\x02\x02\u18E9\u18EA\x07\xF4\x02\x02\u18EA\u18EC" +
    "\x07\u0106\x02\x02\u18EB\u18E9\x03\x02\x02\x02\u18EB\u18EC\x03\x02\x02" +
    "\x02\u18EC\u18F3\x03\x02\x02\x02\u18ED\u18F0\x07\u0145\x02\x02\u18EE\u18EF" +
    "\x07\xF4\x02\x02\u18EF\u18F1\x07\u0106\x02\x02\u18F0\u18EE\x03\x02\x02" +
    "\x02\u18F0\u18F1\x03\x02\x02\x02\u18F1\u18F3\x03\x02\x02\x02\u18F2\u18E8" +
    "\x03\x02\x02\x02\u18F2\u18ED\x03\x02\x02\x02\u18F3\u022F\x03\x02\x02\x02" +
    "\u18F4\u18F7\x07\u013A\x02\x02\u18F5\u18F6\x07\xF4\x02\x02\u18F6\u18F8" +
    "\x07\u0106\x02\x02\u18F7\u18F5\x03\x02\x02\x02\u18F7\u18F8\x03\x02\x02" +
    "\x02\u18F8\u1904\x03\x02\x02\x02\u18F9\u18FC\x07\u014E\x02\x02\u18FA\u18FB" +
    "\x07\xF4\x02\x02\u18FB\u18FD\x07\u0106\x02\x02\u18FC\u18FA\x03\x02\x02" +
    "\x02\u18FC\u18FD\x03\x02\x02\x02\u18FD\u1904\x03\x02\x02\x02\u18FE\u1901" +
    "\x07\u015E\x02\x02\u18FF\u1900\x07\xF4\x02\x02\u1900\u1902\x07\u0106\x02" +
    "\x02\u1901\u18FF\x03\x02\x02\x02\u1901\u1902\x03\x02\x02\x02\u1902\u1904" +
    "\x03\x02\x02\x02\u1903\u18F4\x03\x02\x02\x02\u1903\u18F9\x03\x02\x02\x02" +
    "\u1903\u18FE\x03\x02\x02\x02\u1904\u0231\x03\x02\x02\x02\u1905\u1906\x07" +
    "\xEC\x02\x02\u1906\u1909\x05\u0262\u0132\x02\u1907\u1909\x07\u0122\x02" +
    "\x02\u1908\u1905\x03\x02\x02\x02\u1908\u1907\x03\x02\x02\x02\u1909\u190A" +
    "\x03\x02\x02\x02\u190A\u190E\x07\xF4\x02\x02\u190B\u190D\x07\x04\x02\x02" +
    "\u190C\u190B\x03\x02\x02\x02\u190D\u1910\x03\x02\x02\x02\u190E\u190C\x03" +
    "\x02\x02\x02\u190E\u190F\x03\x02\x02\x02\u190F\u1913\x03\x02\x02\x02\u1910" +
    "\u190E\x03\x02\x02\x02\u1911\u1914\x05\u0262\u0132\x02\u1912\u1914\x07" +
    "\u010C\x02\x02\u1913\u1911\x03\x02\x02\x02\u1913\u1912\x03\x02\x02\x02" +
    "\u1914\u1915\x03\x02\x02\x02\u1915\u1913\x03\x02\x02\x02\u1915\u1916\x03" +
    "\x02\x02\x02\u1916\u1917\x03\x02\x02\x02\u1917\u1925\x07\xF3\x02\x02\u1918" +
    "\u1919\t\x06\x02\x02\u1919\u191A\x07\xF4\x02\x02\u191A\u191B\x07\u010A" +
    "\x02\x02\u191B\u1925\x07\xF3\x02\x02\u191C\u1920\t\x07\x02\x02\u191D\u191F" +
    "\v\x02\x02\x02\u191E\u191D\x03\x02\x02\x02\u191F\u1922\x03\x02\x02\x02" +
    "\u1920\u1921\x03\x02\x02\x02\u1920\u191E\x03\x02\x02\x02\u1921\u1923\x03" +
    "\x02\x02\x02\u1922\u1920\x03\x02\x02\x02\u1923\u1925\x07\xF3\x02\x02\u1924" +
    "\u1908\x03\x02\x02\x02\u1924\u1918\x03\x02\x02\x02\u1924\u191C\x03\x02" +
    "\x02\x02\u1925\u0233\x03\x02\x02\x02\u1926\u1927\x07\u0173\x02\x02\u1927" +
    "\u1928\x07\xF7\x02\x02\u1928\u1929\x07\u010A\x02\x02\u1929\u0235\x03\x02" +
    "\x02\x02\u192A\u192B\x07\u0176\x02\x02\u192B\u0237\x03\x02\x02\x02\u192C" +
    "\u192D\x07\xF2\x02\x02\u192D\u1935\x07\xF3\x02\x02\u192E\u1930\x07\x04" +
    "\x02\x02\u192F\u192E\x03\x02\x02\x02\u1930\u1933\x03\x02\x02\x02\u1931" +
    "\u192F\x03\x02\x02\x02\u1931\u1932\x03\x02\x02\x02\u1932\u1934\x03\x02" +
    "\x02\x02\u1933\u1931\x03\x02\x02\x02\u1934\u1936\x05\u023A\u011E\x02\u1935" +
    "\u1931\x03\x02\x02\x02\u1935\u1936\x03\x02\x02\x02\u1936\u194B\x03\x02" +
    "\x02\x02\u1937\u1938\x07\xF2\x02\x02\u1938\u193D\x05\u0262\u0132\x02\u1939" +
    "\u193C\x07\xF4\x02\x02\u193A\u193C\x05\u0262\u0132\x02\u193B\u1939\x03" +
    "\x02\x02\x02\u193B\u193A\x03\x02\x02\x02\u193C\u193F\x03\x02\x02\x02\u193D" +
    "\u193B\x03\x02\x02\x02\u193D\u193E\x03\x02\x02\x02\u193E\u1940\x03\x02" +
    "\x02\x02\u193F\u193D\x03\x02\x02\x02\u1940\u1948\x07\xF3\x02\x02\u1941" +
    "\u1943\x07\x04\x02\x02\u1942\u1941\x03\x02\x02\x02\u1943\u1946\x03\x02" +
    "\x02\x02\u1944\u1942\x03\x02\x02\x02\u1944\u1945\x03\x02\x02\x02\u1945" +
    "\u1947\x03\x02\x02\x02\u1946\u1944\x03\x02\x02\x02\u1947\u1949\x05\u023A" +
    "\u011E\x02\u1948\u1944\x03\x02\x02\x02\u1948\u1949\x03\x02\x02\x02\u1949" +
    "\u194B\x03\x02\x02\x02";
bitmarkParser._serializedATNSegment12 = "\u194A\u192C\x03\x02\x02\x02\u194A\u1937\x03\x02\x02\x02\u194B\u0239\x03" +
    "\x02\x02\x02\u194C\u194D\x07\xF2\x02\x02\u194D\u1952\x05\u0262\u0132\x02" +
    "\u194E\u1951\x07\xF4\x02\x02\u194F\u1951\x05\u0262\u0132\x02\u1950\u194E" +
    "\x03\x02\x02\x02\u1950\u194F\x03\x02\x02\x02\u1951\u1954\x03\x02\x02\x02" +
    "\u1952\u1950\x03\x02\x02\x02\u1952\u1953\x03\x02\x02\x02\u1953\u1955\x03" +
    "\x02\x02\x02\u1954\u1952\x03\x02\x02\x02\u1955\u1956\x07\xF3\x02\x02\u1956" +
    "\u023B\x03\x02\x02\x02\u1957\u1959\x07\xE6\x02\x02\u1958\u195A\x05\u0262" +
    "\u0132\x02\u1959\u1958\x03\x02\x02\x02\u1959\u195A\x03\x02\x02\x02\u195A" +
    "\u195B\x03\x02\x02\x02\u195B\u1962\x07\xF3\x02\x02\u195C\u195E\x07\xE7" +
    "\x02\x02\u195D\u195F\x05\u0262\u0132\x02\u195E\u195D\x03\x02\x02\x02\u195E" +
    "\u195F\x03\x02\x02\x02\u195F\u1960\x03\x02\x02\x02\u1960\u1962\x07\xF3" +
    "\x02\x02\u1961\u1957\x03\x02\x02\x02\u1961\u195C\x03\x02\x02\x02\u1962" +
    "\u023D\x03\x02\x02\x02\u1963\u196B\x07\u011B\x02\x02\u1964\u196B\x07\u0119" +
    "\x02\x02\u1965\u1967\x07\u011A\x02\x02\u1966\u1968\x07\u010F\x02\x02\u1967" +
    "\u1966\x03\x02\x02\x02\u1967\u1968\x03\x02\x02\x02\u1968\u1969\x03\x02" +
    "\x02\x02\u1969\u196B\x07\x02\x02\x03\u196A\u1963\x03\x02\x02\x02\u196A" +
    "\u1964\x03\x02\x02\x02\u196A\u1965\x03\x02\x02\x02\u196B\u023F\x03\x02" +
    "\x02\x02\u196C\u196E\x07\u0144\x02\x02\u196D\u196F\x05\u0262\u0132\x02" +
    "\u196E\u196D\x03\x02\x02\x02\u196E\u196F\x03\x02\x02\x02\u196F\u1985\x03" +
    "\x02\x02\x02\u1970\u197A\x05\u0262\u0132\x02\u1971\u1975\x07\u010C\x02" +
    "\x02\u1972\u1974\x07\x04\x02\x02\u1973\u1972\x03\x02\x02\x02\u1974\u1977" +
    "\x03\x02\x02\x02\u1975\u1973\x03\x02\x02\x02\u1975\u1976\x03\x02\x02\x02" +
    "\u1976\u1979\x03\x02\x02\x02\u1977\u1975\x03\x02\x02\x02\u1978\u1971\x03" +
    "\x02\x02\x02\u1979\u197C\x03\x02\x02\x02\u197A\u1978\x03\x02\x02\x02\u197A" +
    "\u197B\x03\x02\x02\x02\u197B\u1980\x03\x02\x02\x02\u197C\u197A\x03\x02" +
    "\x02\x02\u197D\u197F\x07\u010C\x02\x02\u197E\u197D\x03\x02\x02\x02\u197F" +
    "\u1982\x03\x02\x02\x02\u1980\u197E\x03\x02\x02\x02\u1980\u1981\x03\x02" +
    "\x02\x02\u1981\u1984\x03\x02\x02\x02\u1982\u1980\x03\x02\x02\x02\u1983" +
    "\u1970\x03\x02\x02\x02\u1984\u1987\x03\x02\x02\x02\u1985\u1983\x03\x02" +
    "\x02\x02\u1985\u1986\x03\x02\x02\x02\u1986\u1988\x03\x02\x02\x02\u1987" +
    "\u1985\x03\x02\x02\x02\u1988\u1994\x07\xF3\x02\x02\u1989\u198F\x07\u0144" +
    "\x02\x02\u198A\u198E\x05\u0262\u0132\x02\u198B\u198E\x07\u010C\x02\x02" +
    "\u198C\u198E\x07\x04\x02\x02\u198D\u198A\x03\x02\x02\x02\u198D\u198B\x03" +
    "\x02\x02\x02\u198D\u198C\x03\x02\x02\x02\u198E\u1991\x03\x02\x02\x02\u198F" +
    "\u198D\x03\x02\x02\x02\u198F\u1990\x03\x02\x02\x02\u1990\u1992\x03\x02" +
    "\x02\x02\u1991\u198F\x03\x02\x02\x02\u1992\u1994\x07\x02\x02\x03\u1993" +
    "\u196C\x03\x02\x02\x02\u1993\u1989\x03\x02\x02\x02\u1994\u0241\x03\x02" +
    "\x02\x02\u1995\u199A\x07\u0113\x02\x02\u1996\u199B\x05\u0262\u0132\x02" +
    "\u1997\u199B\x07\xF4\x02\x02\u1998\u199B\x07\u0176\x02\x02\u1999\u199B" +
    "\x07\u010C\x02\x02\u199A\u1996\x03\x02\x02\x02\u199A\u1997\x03\x02\x02" +
    "\x02\u199A\u1998\x03\x02\x02\x02\u199A\u1999\x03\x02\x02\x02\u199B\u199C" +
    "\x03\x02\x02\x02\u199C\u199A\x03\x02\x02\x02\u199C\u199D\x03\x02\x02\x02" +
    "\u199D\u199E\x03\x02\x02\x02\u199E\u19AC\x07\xF3\x02\x02\u199F\u19A7\x07" +
    "\u0113\x02\x02\u19A0\u19A6\x05\u0262\u0132\x02\u19A1\u19A6\x07\xF4\x02" +
    "\x02\u19A2\u19A6\x07\u0176\x02\x02\u19A3\u19A6\x07\u010C\x02\x02\u19A4" +
    "\u19A6\x07\x04\x02\x02\u19A5\u19A0\x03\x02\x02\x02\u19A5\u19A1\x03\x02" +
    "\x02\x02\u19A5\u19A2\x03\x02\x02\x02\u19A5\u19A3\x03\x02\x02\x02\u19A5" +
    "\u19A4\x03\x02\x02\x02\u19A6\u19A9\x03\x02\x02\x02\u19A7\u19A5\x03\x02" +
    "\x02\x02\u19A7\u19A8\x03\x02\x02\x02\u19A8\u19AA\x03\x02\x02\x02\u19A9" +
    "\u19A7\x03\x02\x02\x02\u19AA\u19AC\x07\x02\x02\x03\u19AB\u1995\x03\x02" +
    "\x02\x02\u19AB\u199F\x03\x02\x02\x02\u19AC\u0243\x03\x02\x02\x02\u19AD" +
    "\u19AE\x07\u0112\x02\x02\u19AE\u19AF\x05\u0262\u0132\x02\u19AF\u19B0\x07" +
    "\xF3\x02\x02\u19B0\u0245\x03\x02\x02\x02\u19B1\u19B5\x07\u012D\x02\x02" +
    "\u19B2\u19B6\x05\u0262\u0132\x02\u19B3\u19B6\x07\xF4\x02\x02\u19B4\u19B6" +
    "\x07\u010C\x02\x02\u19B5\u19B2\x03\x02\x02\x02\u19B5\u19B3\x03\x02\x02" +
    "\x02\u19B5\u19B4\x03\x02\x02\x02\u19B6\u19B7\x03\x02\x02\x02\u19B7\u19B5" +
    "\x03\x02\x02\x02\u19B7\u19B8\x03\x02\x02\x02\u19B8\u19B9\x03\x02\x02\x02" +
    "\u19B9\u19BB\x07\xF3\x02\x02\u19BA\u19BC\x05\u0248\u0125\x02\u19BB\u19BA" +
    "\x03\x02\x02\x02\u19BB\u19BC\x03\x02\x02\x02\u19BC\u0247\x03\x02\x02\x02" +
    "\u19BD\u19C1\x07\u012D\x02\x02\u19BE\u19C2\x05\u0262\u0132\x02\u19BF\u19C2" +
    "\x07\xF4\x02\x02\u19C0\u19C2\x07\u010C\x02\x02\u19C1\u19BE\x03\x02\x02" +
    "\x02\u19C1\u19BF\x03\x02\x02\x02\u19C1\u19C0\x03\x02\x02\x02\u19C2\u19C3" +
    "\x03\x02\x02\x02\u19C3\u19C1\x03\x02\x02\x02\u19C3\u19C4\x03\x02\x02\x02" +
    "\u19C4\u19C5\x03\x02\x02\x02\u19C5\u19C6\x07\xF3\x02\x02\u19C6\u0249\x03" +
    "\x02\x02\x02\u19C7\u19CB\x07\xEA\x02\x02\u19C8\u19CA\x07\u010C\x02\x02" +
    "\u19C9\u19C8\x03\x02\x02\x02\u19CA\u19CD\x03\x02\x02\x02\u19CB\u19C9\x03" +
    "\x02\x02\x02\u19CB\u19CC\x03\x02\x02\x02\u19CC\u19CF\x03\x02\x02\x02\u19CD" +
    "\u19CB\x03\x02\x02\x02\u19CE\u19D0\x05\u0262\u0132\x02\u19CF\u19CE\x03" +
    "\x02\x02\x02\u19CF\u19D0\x03\x02\x02\x02\u19D0\u19E0\x03\x02\x02\x02\u19D1" +
    "\u19D5\x07\u010C\x02\x02\u19D2\u19D4\x07\x04\x02\x02\u19D3\u19D2\x03\x02" +
    "\x02\x02\u19D4\u19D7\x03\x02\x02\x02\u19D5\u19D3\x03\x02\x02\x02\u19D5" +
    "\u19D6\x03\x02\x02\x02\u19D6\u19D9\x03\x02\x02\x02\u19D7\u19D5\x03\x02" +
    "\x02\x02\u19D8\u19D1\x03\x02\x02\x02\u19D9\u19DC\x03\x02\x02\x02\u19DA" +
    "\u19D8\x03\x02\x02\x02\u19DA\u19DB\x03\x02\x02\x02\u19DB\u19DD\x03\x02" +
    "\x02\x02\u19DC\u19DA\x03\x02\x02\x02\u19DD\u19DF\x05\u0262\u0132\x02\u19DE" +
    "\u19DA\x03\x02\x02\x02\u19DF\u19E2\x03\x02\x02\x02\u19E0\u19DE\x03\x02" +
    "\x02\x02\u19E0\u19E1\x03\x02\x02\x02\u19E1\u19E6\x03\x02\x02\x02\u19E2" +
    "\u19E0\x03\x02\x02\x02\u19E3\u19E5\x07\u010C\x02\x02\u19E4\u19E3\x03\x02" +
    "\x02\x02\u19E5\u19E8\x03\x02\x02\x02\u19E6\u19E4\x03\x02\x02\x02\u19E6" +
    "\u19E7\x03\x02\x02\x02\u19E7\u19E9\x03\x02\x02\x02\u19E8\u19E6\x03\x02" +
    "\x02\x02\u19E9\u19F6\x07\xF3\x02\x02\u19EA\u19EE\x07\xEA\x02\x02\u19EB" +
    "\u19ED\x07\u010C\x02\x02\u19EC\u19EB\x03\x02\x02\x02\u19ED\u19F0\x03\x02" +
    "\x02\x02\u19EE\u19EC\x03\x02\x02\x02\u19EE\u19EF\x03\x02\x02\x02\u19EF" +
    "\u19F2\x03\x02\x02\x02\u19F0\u19EE\x03\x02\x02\x02\u19F1\u19F3\x05\u0262" +
    "\u0132\x02\u19F2\u19F1\x03\x02\x02\x02\u19F2\u19F3\x03\x02\x02\x02\u19F3" +
    "\u19F4\x03\x02\x02\x02\u19F4\u19F6\x07\x02\x02\x03\u19F5\u19C7\x03\x02" +
    "\x02\x02\u19F5\u19EA\x03\x02\x02\x02\u19F6\u024B\x03\x02\x02\x02\u19F7" +
    "\u19F9\x07\xEB\x02\x02\u19F8\u19FA\n\x16\x02\x02\u19F9\u19F8\x03\x02\x02" +
    "\x02\u19FA\u19FB\x03\x02\x02\x02\u19FB\u19F9\x03\x02\x02\x02\u19FB\u19FC" +
    "\x03\x02\x02\x02\u19FC\u19FD\x03\x02\x02\x02\u19FD\u19FE\x07\xF3\x02\x02" +
    "\u19FE\u024D\x03\x02\x02\x02\u19FF\u1A02\x07\xF1\x02\x02\u1A00\u1A03\x05" +
    "\u0262\u0132\x02\u1A01\u1A03\x07\u010C\x02\x02\u1A02\u1A00\x03\x02\x02" +
    "\x02\u1A02\u1A01\x03\x02\x02\x02\u1A03\u1A04\x03\x02\x02\x02\u1A04\u1A02" +
    "\x03\x02\x02\x02\u1A04\u1A05\x03\x02\x02\x02\u1A05\u1A06\x03\x02\x02\x02" +
    "\u1A06\u1A0C\x07\xF3\x02\x02\u1A07\u1A08\x07\xF1\x02\x02\u1A08\u1A09\x05" +
    "\u0262\u0132\x02\u1A09\u1A0A\x07\x02\x02\x03\u1A0A\u1A0C\x03\x02\x02\x02" +
    "\u1A0B\u19FF\x03\x02\x02\x02\u1A0B\u1A07\x03\x02\x02\x02\u1A0C\u024F\x03" +
    "\x02\x02\x02\u1A0D\u1A0E\x07\u011F\x02\x02\u1A0E\u1A0F\x05\u0262\u0132" +
    "\x02\u1A0F\u1A10\x07\xF3\x02\x02\u1A10\u1A16\x03\x02\x02\x02\u1A11\u1A12" +
    "\x07\u0120\x02\x02\u1A12\u1A13\x05\u0262\u0132\x02\u1A13\u1A14\x07\xF3" +
    "\x02\x02\u1A14\u1A16\x03\x02\x02\x02\u1A15\u1A0D\x03\x02\x02\x02\u1A15" +
    "\u1A11\x03\x02\x02\x02\u1A16\u0251\x03\x02\x02\x02\u1A17\u1A18\x07\u0116" +
    "\x02\x02\u1A18\u1A19\x07\xF4\x02\x02\u1A19\u1A1A\x07\u010A\x02\x02\u1A1A" +
    "\u1A21\x07\xF3\x02\x02\u1A1B\u1A1C\x07\u0116\x02\x02\u1A1C\u1A1D\x07\xF4" +
    "\x02\x02\u1A1D\u1A1E\x05\u0262\u0132\x02\u1A1E\u1A1F\x07\xF3\x02\x02\u1A1F" +
    "\u1A21\x03\x02\x02\x02\u1A20\u1A17\x03\x02\x02\x02\u1A20\u1A1B\x03\x02" +
    "\x02\x02\u1A21\u0253\x03\x02\x02\x02\u1A22\u1A23\x07\u012B\x02\x02\u1A23" +
    "\u1A24\x05\u0262\u0132\x02\u1A24\u1A25\x07\xF3\x02\x02\u1A25\u0255\x03" +
    "\x02\x02\x02\u1A26\u1A27\x07\u012C\x02\x02\u1A27\u1A28\x05\u0262\u0132" +
    "\x02\u1A28\u1A29\x07\xF3\x02\x02\u1A29\u0257\x03\x02\x02\x02\u1A2A\u1A34" +
    "\x05\u025A\u012E\x02\u1A2B\u1A2D\x07\u010C\x02\x02\u1A2C\u1A2B\x03\x02" +
    "\x02\x02\u1A2D\u1A30\x03\x02\x02\x02\u1A2E\u1A2C\x03\x02\x02\x02\u1A2E" +
    "\u1A2F\x03\x02\x02\x02\u1A2F\u1A31\x03\x02\x02\x02\u1A30\u1A2E\x03\x02" +
    "\x02\x02\u1A31\u1A33\x05\u025A\u012E\x02\u1A32\u1A2E\x03\x02\x02\x02\u1A33" +
    "\u1A36\x03\x02\x02\x02\u1A34\u1A32\x03\x02\x02\x02\u1A34\u1A35\x03\x02" +
    "\x02\x02\u1A35\u0259\x03\x02\x02\x02\u1A36\u1A34\x03\x02\x02\x02\u1A37" +
    "\u1A38\x07\xEC\x02\x02\u1A38\u1A39\x05\u0262\u0132\x02\u1A39\u1A3A\t\x17" +
    "\x02\x02\u1A3A\u1A40\x05\u0262\u0132\x02\u1A3B\u1A3F\x07\u010C\x02\x02" +
    "\u1A3C\u1A3F\x07\xF4\x02\x02\u1A3D\u1A3F\x05\u0262\u0132\x02\u1A3E\u1A3B" +
    "\x03\x02\x02\x02\u1A3E\u1A3C\x03\x02\x02\x02\u1A3E\u1A3D\x03\x02\x02\x02" +
    "\u1A3F\u1A42\x03\x02\x02\x02\u1A40\u1A3E\x03\x02\x02\x02\u1A40\u1A41\x03" +
    "\x02\x02\x02\u1A41\u1A43\x03\x02\x02\x02\u1A42\u1A40\x03\x02\x02\x02\u1A43" +
    "\u1A44\x07\xF3\x02\x02\u1A44\u1A4F\x03\x02\x02\x02\u1A45\u1A49\x07\u0129" +
    "\x02\x02\u1A46\u1A48\v\x02\x02\x02\u1A47\u1A46\x03\x02\x02\x02\u1A48\u1A4B" +
    "\x03\x02\x02\x02\u1A49\u1A4A\x03\x02\x02\x02\u1A49\u1A47\x03\x02\x02\x02" +
    "\u1A4A\u1A4C\x03\x02\x02\x02\u1A4B\u1A49\x03\x02\x02\x02\u1A4C\u1A4F\x07" +
    "\xF3\x02\x02\u1A4D\u1A4F\x07\u011C\x02\x02\u1A4E\u1A37\x03\x02\x02\x02" +
    "\u1A4E\u1A45\x03\x02\x02\x02\u1A4E\u1A4D\x03\x02\x02\x02\u1A4F\u025B\x03" +
    "\x02\x02\x02\u1A50\u1A54\x07\xE4\x02\x02\u1A51\u1A55\x05\u0262\u0132\x02" +
    "\u1A52\u1A55\x07\xF4\x02\x02\u1A53\u1A55\x07\u010C\x02\x02\u1A54\u1A51" +
    "\x03\x02\x02\x02\u1A54\u1A52\x03\x02\x02\x02\u1A54\u1A53\x03\x02\x02\x02" +
    "\u1A55\u1A56\x03\x02\x02\x02\u1A56\u1A54\x03\x02\x02\x02\u1A56\u1A57\x03" +
    "\x02\x02\x02\u1A57\u1A58\x03\x02\x02\x02\u1A58\u1A64\x07\xF3\x02\x02\u1A59" +
    "\u1A5F\x07\xE4\x02\x02\u1A5A\u1A5E\x05\u0262\u0132\x02\u1A5B\u1A5E\x07" +
    "\xF4\x02\x02\u1A5C\u1A5E\x07\u010C\x02\x02\u1A5D\u1A5A\x03\x02\x02\x02" +
    "\u1A5D\u1A5B\x03\x02\x02\x02\u1A5D\u1A5C\x03\x02\x02\x02\u1A5E\u1A61\x03" +
    "\x02\x02\x02\u1A5F\u1A5D\x03\x02\x02\x02\u1A5F\u1A60\x03\x02\x02\x02\u1A60" +
    "\u1A62\x03\x02\x02\x02\u1A61\u1A5F\x03\x02\x02\x02\u1A62\u1A64\x07\x02" +
    "\x02\x03\u1A63\u1A50\x03\x02\x02\x02\u1A63\u1A59\x03\x02\x02\x02\u1A64" +
    "\u025D\x03\x02\x02\x02\u1A65\u1A67\x07\xE8\x02\x02\u1A66\u1A68\x05\u0262" +
    "\u0132\x02\u1A67\u1A66\x03\x02\x02\x02\u1A67\u1A68\x03\x02\x02\x02\u1A68" +
    "\u1A69\x03\x02\x02\x02\u1A69\u1A6A\x07\xF3\x02\x02\u1A6A\u025F\x03\x02" +
    "\x02\x02\u1A6B\u1A6D\x05\u0262\u0132\x02\u1A6C\u1A6E\x07\u010C\x02\x02" +
    "\u1A6D\u1A6C\x03\x02\x02\x02\u1A6D\u1A6E\x03\x02\x02\x02\u1A6E\u1A70\x03" +
    "\x02\x02\x02\u1A6F\u1A6B\x03\x02\x02\x02\u1A70\u1A71\x03\x02\x02\x02\u1A71" +
    "\u1A6F\x03\x02\x02\x02\u1A71\u1A72\x03\x02\x02\x02\u1A72\u0261\x03\x02" +
    "\x02\x02\u1A73\u1A7A\x07\u010B\x02\x02\u1A74\u1A76\x07\x04\x02\x02\u1A75" +
    "\u1A74\x03\x02\x02\x02\u1A76\u1A77\x03\x02\x02\x02\u1A77\u1A75\x03\x02" +
    "\x02\x02\u1A77\u1A78\x03\x02\x02\x02\u1A78\u1A79\x03\x02\x02\x02\u1A79" +
    "\u1A7B\x07\u010A\x02\x02\u1A7A\u1A75\x03\x02\x02\x02\u1A7A\u1A7B\x03\x02" +
    "\x02\x02\u1A7B\u1AA1\x03\x02\x02\x02\u1A7C\u1A83\x05\u026A\u0136\x02\u1A7D" +
    "\u1A7F\x07\x04\x02\x02\u1A7E\u1A7D\x03\x02\x02\x02\u1A7F\u1A80\x03\x02" +
    "\x02\x02\u1A80\u1A7E\x03\x02\x02\x02\u1A80\u1A81\x03\x02\x02\x02\u1A81" +
    "\u1A82\x03\x02\x02\x02\u1A82\u1A84\x07\u010A\x02\x02\u1A83\u1A7E\x03\x02" +
    "\x02\x02\u1A83\u1A84\x03\x02\x02\x02\u1A84\u1AA1\x03\x02\x02\x02\u1A85" +
    "\u1AA1\x07\u010A\x02\x02\u1A86\u1A87\x07\xEF\x02\x02\u1A87\u1A88\x05\u0262" +
    "\u0132\x02\u1A88\u1A89\x07\xF3\x02\x02\u1A89\u1AA1\x03\x02\x02\x02\u1A8A" +
    "\u1A8C\x07\x04\x02\x02\u1A8B\u1A8A\x03\x02\x02\x02\u1A8C\u1A8F\x03\x02" +
    "\x02\x02\u1A8D\u1A8B\x03\x02\x02\x02\u1A8D\u1A8E\x03\x02\x02\x02\u1A8E" +
    "\u1A90\x03\x02\x02\x02\u1A8F\u1A8D\x03\x02\x02\x02\u1A90\u1A94\x07\xF4" +
    "\x02\x02\u1A91\u1A93\x07\x04\x02\x02\u1A92\u1A91\x03\x02\x02\x02\u1A93" +
    "\u1A96\x03\x02\x02\x02\u1A94\u1A92\x03\x02\x02\x02\u1A94\u1A95\x03\x02" +
    "\x02\x02\u1A95\u1AA1\x03\x02\x02\x02\u1A96\u1A94\x03\x02\x02\x02\u1A97" +
    "\u1A9B\x07\xF5\x02\x02\u1A98\u1A9A\x07\x04\x02\x02\u1A99\u1A98\x03\x02" +
    "\x02\x02\u1A9A\u1A9D\x03\x02\x02\x02\u1A9B\u1A99\x03\x02\x02\x02\u1A9B" +
    "\u1A9C\x03\x02\x02\x02\u1A9C\u1AA1\x03\x02\x02\x02\u1A9D\u1A9B\x03\x02" +
    "\x02\x02\u1A9E\u1AA1\x07\xFD\x02\x02\u1A9F\u1AA1\x07\u0176\x02\x02\u1AA0" +
    "\u1A73\x03\x02\x02\x02\u1AA0\u1A7C\x03\x02\x02\x02\u1AA0\u1A85\x03\x02" +
    "\x02\x02\u1AA0\u1A86\x03\x02\x02\x02\u1AA0\u1A8D\x03\x02\x02\x02\u1AA0" +
    "\u1A97\x03\x02\x02\x02\u1AA0\u1A9E\x03\x02\x02\x02\u1AA0\u1A9F\x03\x02" +
    "\x02\x02\u1AA1\u0263\x03\x02\x02\x02\u1AA2\u1AA3\x07\u0104\x02\x02\u1AA3" +
    "\u0265\x03\x02\x02\x02\u1AA4\u1AA5\x07\xF3\x02\x02\u1AA5\u0267\x03\x02" +
    "\x02\x02\u1AA6\u1AA7\t\x18\x02\x02\u1AA7\u0269\x03\x02\x02\x02\u1AA8\u1AC7" +
    "\x05\u026E\u0138\x02\u1AA9\u1AC7\x07\u010D\x02\x02\u1AAA\u1AC7\x07\u0110" +
    "\x02\x02\u1AAB\u1AC7\x07\u010E\x02\x02\u1AAC\u1AC7\x07\xF5\x02\x02\u1AAD" +
    "\u1AAE\x07\xF9\x02\x02\u1AAE\u1AC7\n\x19\x02\x02\u1AAF\u1AB0\x07\xFA\x02" +
    "\x02\u1AB0\u1AC7\n\x1A\x02\x02\u1AB1\u1AC7\x07\xFC\x02\x02\u1AB2\u1AC7" +
    "\x07\xFB\x02\x02\u1AB3\u1AC7\x07\u0134\x02\x02\u1AB4\u1AC7\x07\u0148\x02" +
    "\x02\u1AB5\u1AC7\x07\u0135\x02\x02\u1AB6\u1AC7\x07\u0149\x02\x02\u1AB7" +
    "\u1AC7\x07\u0137\x02\x02\u1AB8\u1AC7\x07\u014C\x02\x02\u1AB9\u1AC7\x07" +
    "\u0131\x02\x02\u1ABA\u1AC7\x07\u0146\x02\x02\u1ABB\u1AC7\x07\u0130\x02" +
    "\x02\u1ABC\u1AC7\x07\u0145\x02\x02\u1ABD\u1AC7\x07\u0133\x02\x02\u1ABE" +
    "\u1AC7\x07\u0147\x02\x02\u1ABF\u1AC7\x07\u0136\x02\x02\u1AC0\u1AC7\x07" +
    "\u014B\x02\x02\u1AC1\u1AC7\x07\u0138\x02\x02\u1AC2\u1AC7\x07\u014D\x02" +
    "\x02\u1AC3\u1AC7\x07\u0161\x02\x02\u1AC4\u1AC7\x07\u0162\x02\x02\u1AC5" +
    "\u1AC7\x07\u0102\x02\x02\u1AC6\u1AA8\x03\x02\x02\x02\u1AC6\u1AA9\x03\x02" +
    "\x02\x02\u1AC6\u1AAA\x03\x02\x02\x02\u1AC6\u1AAB\x03\x02\x02\x02\u1AC6" +
    "\u1AAC\x03\x02\x02\x02\u1AC6\u1AAD\x03\x02\x02\x02\u1AC6\u1AAF\x03\x02" +
    "\x02\x02\u1AC6\u1AB1\x03\x02\x02\x02\u1AC6\u1AB2\x03\x02\x02\x02\u1AC6" +
    "\u1AB3\x03\x02\x02\x02\u1AC6\u1AB4\x03\x02\x02\x02\u1AC6\u1AB5\x03\x02" +
    "\x02\x02\u1AC6\u1AB6\x03\x02\x02\x02\u1AC6\u1AB7\x03\x02\x02\x02\u1AC6" +
    "\u1AB8\x03\x02\x02\x02\u1AC6\u1AB9\x03\x02\x02\x02\u1AC6\u1ABA\x03\x02" +
    "\x02\x02\u1AC6\u1ABB\x03\x02\x02\x02\u1AC6\u1ABC\x03\x02\x02\x02\u1AC6" +
    "\u1ABD\x03\x02\x02\x02\u1AC6\u1ABE\x03\x02\x02\x02\u1AC6\u1ABF\x03\x02" +
    "\x02\x02\u1AC6\u1AC0\x03\x02\x02\x02\u1AC6\u1AC1\x03\x02\x02\x02\u1AC6" +
    "\u1AC2\x03\x02\x02\x02\u1AC6\u1AC3\x03\x02\x02\x02\u1AC6\u1AC4\x03\x02" +
    "\x02\x02\u1AC6\u1AC5\x03\x02\x02\x02\u1AC7\u1AC8\x03\x02\x02\x02\u1AC8" +
    "\u1AC6\x03\x02\x02\x02\u1AC8\u1AC9\x03\x02\x02\x02\u1AC9\u026B\x03\x02" +
    "\x02\x02\u1ACA\u1ACB\x07\x04\x02\x02\u1ACB\u026D\x03\x02\x02\x02\u1ACC" +
    "\u1ACD\x07\u010F\x02\x02\u1ACD\u026F\x03\x02\x02\x02\u0385\u0274\u027A" +
    "\u027F\u0284\u028B\u036A\u0372\u0379\u037E\u0387\u038D\u0393\u0399\u03A2" +
    "\u03A9\u03AE\u03B6\u03BD\u03C2\u03CA\u03D1\u03D6\u03DE\u03E5\u03EA\u03EE" +
    "\u03F5\u03FC\u0403\u0409\u040F\u0417\u0420\u0424\u042D\u042F\u0434\u043A" +
    "\u0443\u0445\u044A\u0450\u0459\u0460\u0465\u046D\u0474\u0479\u0481\u0488" +
    "\u048D\u0495\u049C\u04A1\u04A9\u04B0\u04B5\u04BD\u04C4\u04C9\u04D1\u04D8" +
    "\u04DD\u04E5\u04EC\u04F1\u04F9\u0500\u0505\u050D\u0514\u0519\u0521\u0528" +
    "\u052D\u0535\u053C\u0541\u0549\u0550\u0555\u055D\u0564\u0569\u0571\u0578" +
    "\u057D\u0585\u058C\u0591\u0599\u05A0\u05A5\u05AB\u05AF\u05B4\u05BD\u05C4" +
    "\u05C9\u05CF\u05D3\u05D8\u05E1\u05E8\u05ED\u05F3\u05F7\u05FC\u0605\u060C" +
    "\u0611\u061A\u0621\u0626\u062F\u0633\u0638\u063E\u0660\u0678\u0680\u0682" +
    "\u0689\u068E\u0694\u069A\u069F\u06A5\u06AA\u06B0\u06BC\u06C1\u06C7\u06CD" +
    "\u06D3\u06DA\u06E0\u06E3\u06E7\u06EB\u06ED\u06FD\u0702\u0708\u070E\u0715" +
    "\u071B\u071E\u0724\u072D\u0732\u073A\u073F\u0744\u074A\u0751\u0757\u075A" +
    "\u0760\u0765\u0767\u076E\u0775\u0782\u0787\u078D\u0794\u079A\u079D\u07A7" +
    "\u07AC\u07B2\u07B9\u07BF\u07C2\u07CC\u07D1\u07D7\u07DE\u07E4\u07E7\u07EF" +
    "\u07F6\u07FB\u07FF\u0804\u080B\u0811\u0814\u081C\u0822\u0827\u082B\u0830" +
    "\u0837\u083D\u0840\u0848\u084F\u0854\u085D\u0864\u0869\u0872\u0879\u087E" +
    "\u0887\u088E\u0893\u089C\u08A3\u08A8\u08B1\u08B8\u08BD\u08C6\u08CD\u08D2" +
    "\u08DB\u08E2\u08E7\u08F0\u08F7\u08FC\u0905\u090C\u0911\u091A\u0921\u0926" +
    "\u092F\u0936\u093B\u0944\u094B\u0950\u0959\u0960\u0965\u096E\u0975\u097A" +
    "\u0983\u098A\u098F\u0998\u099F\u09A4\u09AD\u09B4\u09B9\u09C2\u09C9\u09CE" +
    "\u09D7\u09DE\u09E3\u09EC\u09F3\u09F8\u0A01\u0A08\u0A0D\u0A16\u0A1D\u0A22" +
    "\u0A2B\u0A32\u0A37\u0A40\u0A47\u0A4C\u0A55\u0A5C\u0A61\u0A6A\u0A71\u0A76" +
    "\u0A7F\u0A86\u0A8B\u0A94\u0A9B\u0AA0\u0AA9\u0AB0\u0AB5\u0ABE\u0AC5\u0ACA" +
    "\u0AD3\u0ADA\u0ADF\u0AE8\u0AEF\u0AF4\u0AFD\u0B04\u0B09\u0B12\u0B19\u0B1E" +
    "\u0B27\u0B2E\u0B33\u0B3C\u0B43\u0B48\u0B51\u0B58\u0B5D\u0B66\u0B6D\u0B72" +
    "\u0B7B\u0B82\u0B87\u0B90\u0B97\u0B9C\u0BA5\u0BAC\u0BB1\u0BBA\u0BC1\u0BC6" +
    "\u0BCF\u0BD6\u0BDB\u0BE4\u0BEB\u0BF0\u0BF9\u0C00\u0C05\u0C0E\u0C15\u0C1A" +
    "\u0C23\u0C2A\u0C2F\u0C38\u0C3F\u0C44\u0C4D\u0C54\u0C59\u0C62\u0C69\u0C6E" +
    "\u0C77\u0C7E\u0C83\u0C8C\u0C93\u0C98\u0CA1\u0CA8\u0CAD\u0CB6\u0CBD\u0CC2" +
    "\u0CCB\u0CD2\u0CD7\u0CE0\u0CE7\u0CEC\u0CF5\u0CFC\u0D01\u0D0A\u0D11\u0D16" +
    "\u0D1F\u0D26\u0D2B\u0D34\u0D3B\u0D40\u0D49\u0D50\u0D55\u0D5E\u0D65\u0D6A" +
    "\u0D73\u0D7A\u0D7F\u0D88\u0D8F\u0D94\u0D9D\u0DA4\u0DA9\u0DB2\u0DB9\u0DBE" +
    "\u0DC7\u0DCE\u0DD3\u0DDC\u0DE3\u0DE8\u0DF1\u0DF8\u0DFD\u0E06\u0E0D\u0E12" +
    "\u0E1B\u0E22\u0E27\u0E30\u0E37\u0E3C\u0E45\u0E4C\u0E51\u0E5A\u0E61\u0E66" +
    "\u0E6F\u0E76\u0E7B\u0E84\u0E8B\u0E90\u0E99\u0EA0\u0EA5\u0EAE\u0EB5\u0EBA" +
    "\u0EC3\u0ECA\u0ECF\u0ED8\u0EDF\u0EE4\u0EED\u0EF4\u0EF9\u0F02\u0F09\u0F0E" +
    "\u0F17\u0F1E\u0F23\u0F2C\u0F33\u0F38\u0F41\u0F48\u0F4D\u0F56\u0F5D\u0F62" +
    "\u0F6B\u0F72\u0F77\u0F80\u0F87\u0F8C\u0F95\u0F9C\u0FA1\u0FAA\u0FB1\u0FB6" +
    "\u0FBF\u0FC6\u0FCB\u0FD4\u0FDB\u0FE0\u0FE9\u0FF0\u0FF5\u0FFE\u1005\u100A" +
    "\u1013\u101A\u101F\u1028\u102F\u1034\u103D\u1044\u1049\u1052\u1059\u105E" +
    "\u1067\u106E\u1073\u107C\u1083\u1088\u1091\u1098\u109D\u10A6\u10AD\u10B2" +
    "\u10BB\u10C2\u10C7\u10D0\u10D7\u10DC\u10E5\u10EC\u10F1\u10FA\u1101\u1106" +
    "\u110F\u1116\u111B\u1124\u112B\u1130\u1139\u1140\u1145\u114E\u1155\u115A" +
    "\u1163\u116A\u116F\u1178\u117F\u1184\u118D\u1194\u1199\u11A2\u11A9\u11AE" +
    "\u11B7\u11BE\u11C3\u11CC\u11D3\u11D8\u11E1\u11E8\u11ED\u11F6\u11FD\u1202" +
    "\u120B\u1212\u1217\u1220\u1227\u122C\u1235\u123C\u1241\u124A\u1251\u1256" +
    "\u125F\u1265\u126A\u126E\u1273\u127A\u1280\u1283\u128B\u1292\u1297\u12A0" +
    "\u12A7\u12AC\u12B5\u12BC\u12C1\u12CA\u12D1\u12D6\u12DF\u12E6\u12EB\u12F4" +
    "\u12FB\u1300\u1309\u1310\u1315\u131E\u1325\u132A\u1333\u133A\u133F\u1348" +
    "\u134F\u1354\u135D\u1364\u1369\u1372\u1379\u137E\u1387\u138E\u1393\u139C" +
    "\u13A3\u13A8\u13B0\u13B7\u13BC\u13C4\u13CB\u13D0\u13D8\u13DF\u13E4\u13ED" +
    "\u13F4\u13F9\u1402\u1409\u140E\u1417\u141E\u1423\u142C\u1433\u1438\u1441" +
    "\u1448\u144D\u1456\u145D\u1462\u146B\u1472\u1477\u1480\u1487\u148C\u1495" +
    "\u149C\u14A1\u14AA\u14B1\u14B6\u14BF\u14C6\u14CB\u14D4\u14DB\u14E0\u14E9" +
    "\u14F0\u14F5\u14FE\u1505\u150A\u1513\u151A\u151F\u1528\u152F\u1534\u153D" +
    "\u1544\u1549\u1552\u1559\u155E\u1567\u156E\u1573\u157C\u1583\u1588\u1591" +
    "\u1598\u159D\u15A6\u15AD\u15B2\u15BB\u15C2\u15C7\u15D0\u15D7\u15DC\u15E5" +
    "\u15EC\u15F1\u15FA\u1601\u1606\u160F\u1616\u161B\u1624\u162B\u1630\u1639" +
    "\u1640\u1645\u164E\u1655\u165A\u1663\u166A\u166F\u1675\u167B\u1688\u168C" +
    "\u1695\u1697\u169F\u16A6\u16AB\u16B4\u16BB\u16C0\u16C9\u16CD\u16D3\u16DA" +
    "\u16E0\u16E3\u16E5\u16EB\u16F3\u16FA\u16FF\u1704\u1709\u170F\u1713\u1717" +
    "\u171F\u1726\u172B\u1734\u1738\u173C\u1744\u174B\u1750\u1759\u175D\u1761" +
    "\u1769\u1770\u1775\u177E\u1782\u1786\u178E\u1795\u179A\u17A3\u17AA\u17AF" +
    "\u17B7\u17BD\u17C1\u17C7\u17CE\u17D4\u17D7\u17D9\u17DE\u17E7\u17ED\u17EF" +
    "\u17FD\u1805\u180A\u180E\u1812\u1814\u1819\u1830\u1835\u183A\u183C\u1846" +
    "\u1850\u185A\u1860\u1867\u186D\u1875\u187F\u188A\u1890\u1895\u189C\u18A5" +
    "\u18A9\u18AD\u18AF\u18BE\u18C2\u18D1\u18D5\u18DB\u18E6\u18EB\u18F0\u18F2" +
    "\u18F7\u18FC\u1901\u1903\u1908\u190E\u1913\u1915\u1920\u1924\u1931\u1935" +
    "\u193B\u193D\u1944\u1948\u194A\u1950\u1952\u1959\u195E\u1961\u1967\u196A" +
    "\u196E\u1975\u197A\u1980\u1985\u198D\u198F\u1993\u199A\u199C\u19A5\u19A7" +
    "\u19AB\u19B5\u19B7\u19BB\u19C1\u19C3\u19CB\u19CF\u19D5\u19DA\u19E0\u19E6" +
    "\u19EE\u19F2\u19F5\u19FB\u1A02\u1A04\u1A0B\u1A15\u1A20\u1A2E\u1A34\u1A3E" +
    "\u1A40\u1A49\u1A4E\u1A54\u1A56\u1A5D\u1A5F\u1A63\u1A67\u1A6D\u1A71\u1A77" +
    "\u1A7A\u1A80\u1A83\u1A8D\u1A94\u1A9B\u1AA0\u1AC6\u1AC8";
bitmarkParser._serializedATN = Utils.join([
    bitmarkParser._serializedATNSegment0,
    bitmarkParser._serializedATNSegment1,
    bitmarkParser._serializedATNSegment2,
    bitmarkParser._serializedATNSegment3,
    bitmarkParser._serializedATNSegment4,
    bitmarkParser._serializedATNSegment5,
    bitmarkParser._serializedATNSegment6,
    bitmarkParser._serializedATNSegment7,
    bitmarkParser._serializedATNSegment8,
    bitmarkParser._serializedATNSegment9,
    bitmarkParser._serializedATNSegment10,
    bitmarkParser._serializedATNSegment11,
    bitmarkParser._serializedATNSegment12,
], "");
class BitmarkContext extends ParserRuleContext_1.ParserRuleContext {
    EOF() { return this.getToken(bitmarkParser.EOF, 0); }
    bitmark_(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bitmark_Context);
        }
        else {
            return this.getRuleContext(i, Bitmark_Context);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitmark; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitmark) {
            listener.enterBitmark(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitmark) {
            listener.exitBitmark(this);
        }
    }
}
exports.BitmarkContext = BitmarkContext;
class Bitmark_Context extends ParserRuleContext_1.ParserRuleContext {
    bit() {
        return this.tryGetRuleContext(0, BitContext);
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitmark_; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitmark_) {
            listener.enterBitmark_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitmark_) {
            listener.exitBitmark_(this);
        }
    }
}
exports.Bitmark_Context = Bitmark_Context;
class BitContext extends ParserRuleContext_1.ParserRuleContext {
    book() {
        return this.tryGetRuleContext(0, BookContext);
    }
    chapter() {
        return this.tryGetRuleContext(0, ChapterContext);
    }
    ai_prompt() {
        return this.tryGetRuleContext(0, Ai_promptContext);
    }
    note_ai() {
        return this.tryGetRuleContext(0, Note_aiContext);
    }
    summary_ai() {
        return this.tryGetRuleContext(0, Summary_aiContext);
    }
    article_ai() {
        return this.tryGetRuleContext(0, Article_aiContext);
    }
    summary() {
        return this.tryGetRuleContext(0, SummaryContext);
    }
    toc() {
        return this.tryGetRuleContext(0, TocContext);
    }
    bit_alias() {
        return this.tryGetRuleContext(0, Bit_aliasContext);
    }
    internal_link() {
        return this.tryGetRuleContext(0, Internal_linkContext);
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    group_born() {
        return this.tryGetRuleContext(0, Group_bornContext);
    }
    group_died() {
        return this.tryGetRuleContext(0, Group_diedContext);
    }
    essay() {
        return this.tryGetRuleContext(0, EssayContext);
    }
    correction() {
        return this.tryGetRuleContext(0, CorrectionContext);
    }
    mark_() {
        return this.tryGetRuleContext(0, Mark_Context);
    }
    take_picture() {
        return this.tryGetRuleContext(0, Take_pictureContext);
    }
    take_audio() {
        return this.tryGetRuleContext(0, Take_audioContext);
    }
    record_audio() {
        return this.tryGetRuleContext(0, Record_audioContext);
    }
    preparation_note() {
        return this.tryGetRuleContext(0, Preparation_noteContext);
    }
    assignment() {
        return this.tryGetRuleContext(0, AssignmentContext);
    }
    article() {
        return this.tryGetRuleContext(0, ArticleContext);
    }
    statement() {
        return this.tryGetRuleContext(0, StatementContext);
    }
    details() {
        return this.tryGetRuleContext(0, DetailsContext);
    }
    sample_solution() {
        return this.tryGetRuleContext(0, Sample_solutionContext);
    }
    buttoncopytext() {
        return this.tryGetRuleContext(0, ButtoncopytextContext);
    }
    wbtcontinue() {
        return this.tryGetRuleContext(0, WbtcontinueContext);
    }
    learningpathdetails() {
        return this.tryGetRuleContext(0, LearningpathdetailsContext);
    }
    note() {
        return this.tryGetRuleContext(0, NoteContext);
    }
    info() {
        return this.tryGetRuleContext(0, InfoContext);
    }
    warning() {
        return this.tryGetRuleContext(0, WarningContext);
    }
    remark() {
        return this.tryGetRuleContext(0, RemarkContext);
    }
    hintbit() {
        return this.tryGetRuleContext(0, HintbitContext);
    }
    help() {
        return this.tryGetRuleContext(0, HelpContext);
    }
    danger() {
        return this.tryGetRuleContext(0, DangerContext);
    }
    bug() {
        return this.tryGetRuleContext(0, BugContext);
    }
    sidenote() {
        return this.tryGetRuleContext(0, SidenoteContext);
    }
    stickynote() {
        return this.tryGetRuleContext(0, StickynoteContext);
    }
    quote() {
        return this.tryGetRuleContext(0, QuoteContext);
    }
    footnote() {
        return this.tryGetRuleContext(0, FootnoteContext);
    }
    examplebit() {
        return this.tryGetRuleContext(0, ExamplebitContext);
    }
    page() {
        return this.tryGetRuleContext(0, PageContext);
    }
    message() {
        return this.tryGetRuleContext(0, MessageContext);
    }
    self_assessment() {
        return this.tryGetRuleContext(0, Self_assessmentContext);
    }
    rating() {
        return this.tryGetRuleContext(0, RatingContext);
    }
    survey() {
        return this.tryGetRuleContext(0, SurveyContext);
    }
    survey_1() {
        return this.tryGetRuleContext(0, Survey_1Context);
    }
    survey_anonymous() {
        return this.tryGetRuleContext(0, Survey_anonymousContext);
    }
    survey_anonymous_1() {
        return this.tryGetRuleContext(0, Survey_anonymous_1Context);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    vendor_padlet_embed() {
        return this.tryGetRuleContext(0, Vendor_padlet_embedContext);
    }
    scorm() {
        return this.tryGetRuleContext(0, ScormContext);
    }
    learning_path_lti() {
        return this.tryGetRuleContext(0, Learning_path_ltiContext);
    }
    learning_path_step() {
        return this.tryGetRuleContext(0, Learning_path_stepContext);
    }
    learning_path_book() {
        return this.tryGetRuleContext(0, Learning_path_bookContext);
    }
    learning_path_sign() {
        return this.tryGetRuleContext(0, Learning_path_signContext);
    }
    learning_path_video_call() {
        return this.tryGetRuleContext(0, Learning_path_video_callContext);
    }
    learning_path_learning_goal() {
        return this.tryGetRuleContext(0, Learning_path_learning_goalContext);
    }
    learning_path_closing() {
        return this.tryGetRuleContext(0, Learning_path_closingContext);
    }
    learning_path_feedback() {
        return this.tryGetRuleContext(0, Learning_path_feedbackContext);
    }
    learning_path_bot_training() {
        return this.tryGetRuleContext(0, Learning_path_bot_trainingContext);
    }
    learning_path_external_link() {
        return this.tryGetRuleContext(0, Learning_path_external_linkContext);
    }
    learning_path_classroom_training() {
        return this.tryGetRuleContext(0, Learning_path_classroom_trainingContext);
    }
    learning_path_classroom_event() {
        return this.tryGetRuleContext(0, Learning_path_classroom_eventContext);
    }
    bot_action_send() {
        return this.tryGetRuleContext(0, Bot_action_sendContext);
    }
    bot_action_announce() {
        return this.tryGetRuleContext(0, Bot_action_announceContext);
    }
    bot_action_save() {
        return this.tryGetRuleContext(0, Bot_action_saveContext);
    }
    bot_action_remind() {
        return this.tryGetRuleContext(0, Bot_action_remindContext);
    }
    bot_action_response() {
        return this.tryGetRuleContext(0, Bot_action_responseContext);
    }
    bot_action_true_false() {
        return this.tryGetRuleContext(0, Bot_action_true_falseContext);
    }
    bot_action_rating_number() {
        return this.tryGetRuleContext(0, Bot_action_rating_numberContext);
    }
    bot_action_rating_stars() {
        return this.tryGetRuleContext(0, Bot_action_rating_starsContext);
    }
    bit_image() {
        return this.tryGetRuleContext(0, Bit_imageContext);
    }
    bit_imageLink() {
        return this.tryGetRuleContext(0, Bit_imageLinkContext);
    }
    bit_imageZoom() {
        return this.tryGetRuleContext(0, Bit_imageZoomContext);
    }
    bit_imagePrototype() {
        return this.tryGetRuleContext(0, Bit_imagePrototypeContext);
    }
    bit_imageSuperWide() {
        return this.tryGetRuleContext(0, Bit_imageSuperWideContext);
    }
    bit_audio() {
        return this.tryGetRuleContext(0, Bit_audioContext);
    }
    bit_audioLink() {
        return this.tryGetRuleContext(0, Bit_audioLinkContext);
    }
    bit_audioEmbed() {
        return this.tryGetRuleContext(0, Bit_audioEmbedContext);
    }
    bit_video() {
        return this.tryGetRuleContext(0, Bit_videoContext);
    }
    bit_videoLink() {
        return this.tryGetRuleContext(0, Bit_videoLinkContext);
    }
    bit_videoEmbed() {
        return this.tryGetRuleContext(0, Bit_videoEmbedContext);
    }
    bit_videoPortrait() {
        return this.tryGetRuleContext(0, Bit_videoPortraitContext);
    }
    bit_videoLandscape() {
        return this.tryGetRuleContext(0, Bit_videoLandscapeContext);
    }
    bit_stillImageFilm() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmContext);
    }
    bit_stillImageFilmLink() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmLinkContext);
    }
    bit_stillImageFilmEmbed() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmEmbedContext);
    }
    bit_document() {
        return this.tryGetRuleContext(0, Bit_documentContext);
    }
    bit_documentLink() {
        return this.tryGetRuleContext(0, Bit_documentLinkContext);
    }
    bit_documentEmbed() {
        return this.tryGetRuleContext(0, Bit_documentEmbedContext);
    }
    bit_documentDownload() {
        return this.tryGetRuleContext(0, Bit_documentDownloadContext);
    }
    bit_websiteLink() {
        return this.tryGetRuleContext(0, Bit_websiteLinkContext);
    }
    bit_appLink() {
        return this.tryGetRuleContext(0, Bit_appLinkContext);
    }
    bit_editorial() {
        return this.tryGetRuleContext(0, Bit_editorialContext);
    }
    book_frontispiece() {
        return this.tryGetRuleContext(0, Book_frontispieceContext);
    }
    book_title() {
        return this.tryGetRuleContext(0, Book_titleContext);
    }
    book_copyright() {
        return this.tryGetRuleContext(0, Book_copyrightContext);
    }
    book_dedication() {
        return this.tryGetRuleContext(0, Book_dedicationContext);
    }
    book_forword() {
        return this.tryGetRuleContext(0, Book_forwordContext);
    }
    book_preface() {
        return this.tryGetRuleContext(0, Book_prefaceContext);
    }
    book_prologue() {
        return this.tryGetRuleContext(0, Book_prologueContext);
    }
    book_epilogue() {
        return this.tryGetRuleContext(0, Book_epilogueContext);
    }
    book_introduction() {
        return this.tryGetRuleContext(0, Book_introductionContext);
    }
    book_inciting_incident() {
        return this.tryGetRuleContext(0, Book_inciting_incidentContext);
    }
    book_conclusion() {
        return this.tryGetRuleContext(0, Book_conclusionContext);
    }
    book_afterword() {
        return this.tryGetRuleContext(0, Book_afterwordContext);
    }
    book_postscript() {
        return this.tryGetRuleContext(0, Book_postscriptContext);
    }
    book_appendix() {
        return this.tryGetRuleContext(0, Book_appendixContext);
    }
    book_addendum() {
        return this.tryGetRuleContext(0, Book_addendumContext);
    }
    book_acknowledgments() {
        return this.tryGetRuleContext(0, Book_acknowledgmentsContext);
    }
    book_list_of_contributors() {
        return this.tryGetRuleContext(0, Book_list_of_contributorsContext);
    }
    book_bibliography() {
        return this.tryGetRuleContext(0, Book_bibliographyContext);
    }
    book_reference_list() {
        return this.tryGetRuleContext(0, Book_reference_listContext);
    }
    book_endnotes() {
        return this.tryGetRuleContext(0, Book_endnotesContext);
    }
    book_notes() {
        return this.tryGetRuleContext(0, Book_notesContext);
    }
    book_copyright_permissions() {
        return this.tryGetRuleContext(0, Book_copyright_permissionsContext);
    }
    book_teaser() {
        return this.tryGetRuleContext(0, Book_teaserContext);
    }
    book_auther_bio() {
        return this.tryGetRuleContext(0, Book_auther_bioContext);
    }
    book_request_for_a_book_review() {
        return this.tryGetRuleContext(0, Book_request_for_a_book_reviewContext);
    }
    book_coming_soon() {
        return this.tryGetRuleContext(0, Book_coming_soonContext);
    }
    book_read_more() {
        return this.tryGetRuleContext(0, Book_read_moreContext);
    }
    book_summary() {
        return this.tryGetRuleContext(0, Book_summaryContext);
    }
    book_epigraph() {
        return this.tryGetRuleContext(0, Book_epigraphContext);
    }
    cook_preparation() {
        return this.tryGetRuleContext(0, Cook_preparationContext);
    }
    cook_step() {
        return this.tryGetRuleContext(0, Cook_stepContext);
    }
    cook_ingredients() {
        return this.tryGetRuleContext(0, Cook_ingredientsContext);
    }
    cook_remark() {
        return this.tryGetRuleContext(0, Cook_remarkContext);
    }
    cook_variation() {
        return this.tryGetRuleContext(0, Cook_variationContext);
    }
    cook_insert() {
        return this.tryGetRuleContext(0, Cook_insertContext);
    }
    cook_arrangement() {
        return this.tryGetRuleContext(0, Cook_arrangementContext);
    }
    cook_practice_advise() {
        return this.tryGetRuleContext(0, Cook_practice_adviseContext);
    }
    cook_plate() {
        return this.tryGetRuleContext(0, Cook_plateContext);
    }
    cook_recommendation() {
        return this.tryGetRuleContext(0, Cook_recommendationContext);
    }
    cook_personal_recommendation() {
        return this.tryGetRuleContext(0, Cook_personal_recommendationContext);
    }
    cook_side_drink() {
        return this.tryGetRuleContext(0, Cook_side_drinkContext);
    }
    cook_side_dish() {
        return this.tryGetRuleContext(0, Cook_side_dishContext);
    }
    cook_timer() {
        return this.tryGetRuleContext(0, Cook_timerContext);
    }
    lang_learning_outcomes() {
        return this.tryGetRuleContext(0, Lang_learning_outcomesContext);
    }
    lang_enabling_language_skills() {
        return this.tryGetRuleContext(0, Lang_enabling_language_skillsContext);
    }
    lang_life_skills() {
        return this.tryGetRuleContext(0, Lang_life_skillsContext);
    }
    lang_english_around_world() {
        return this.tryGetRuleContext(0, Lang_english_around_worldContext);
    }
    lang_good_to_know() {
        return this.tryGetRuleContext(0, Lang_good_to_knowContext);
    }
    lang_learning_strategy() {
        return this.tryGetRuleContext(0, Lang_learning_strategyContext);
    }
    lang_like_a_local() {
        return this.tryGetRuleContext(0, Lang_like_a_localContext);
    }
    lang_useful_phrases() {
        return this.tryGetRuleContext(0, Lang_useful_phrasesContext);
    }
    lang_level_down() {
        return this.tryGetRuleContext(0, Lang_level_downContext);
    }
    lang_level_up() {
        return this.tryGetRuleContext(0, Lang_level_upContext);
    }
    lang_extra_activity() {
        return this.tryGetRuleContext(0, Lang_extra_activityContext);
    }
    lang_video_script() {
        return this.tryGetRuleContext(0, Lang_video_scriptContext);
    }
    lang_audio_script() {
        return this.tryGetRuleContext(0, Lang_audio_scriptContext);
    }
    lang_vocabulary() {
        return this.tryGetRuleContext(0, Lang_vocabularyContext);
    }
    lang_homework() {
        return this.tryGetRuleContext(0, Lang_homeworkContext);
    }
    lang_teacher_note() {
        return this.tryGetRuleContext(0, Lang_teacher_noteContext);
    }
    code() {
        return this.tryGetRuleContext(0, CodeContext);
    }
    card1() {
        return this.tryGetRuleContext(0, Card1Context);
    }
    question1() {
        return this.tryGetRuleContext(0, Question1Context);
    }
    screenshot() {
        return this.tryGetRuleContext(0, ScreenshotContext);
    }
    focus_image() {
        return this.tryGetRuleContext(0, Focus_imageContext);
    }
    photo() {
        return this.tryGetRuleContext(0, PhotoContext);
    }
    browser_image() {
        return this.tryGetRuleContext(0, Browser_imageContext);
    }
    chapter_subject_matter() {
        return this.tryGetRuleContext(0, Chapter_subject_matterContext);
    }
    release_note() {
        return this.tryGetRuleContext(0, Release_noteContext);
    }
    conclusion() {
        return this.tryGetRuleContext(0, ConclusionContext);
    }
    featured() {
        return this.tryGetRuleContext(0, FeaturedContext);
    }
    vendor_amcharts_5_chart() {
        return this.tryGetRuleContext(0, Vendor_amcharts_5_chartContext);
    }
    newspaper_article() {
        return this.tryGetRuleContext(0, Newspaper_articleContext);
    }
    blog_article() {
        return this.tryGetRuleContext(0, Blog_articleContext);
    }
    book_article() {
        return this.tryGetRuleContext(0, Book_articleContext);
    }
    notebook_article() {
        return this.tryGetRuleContext(0, Notebook_articleContext);
    }
    workbook_article() {
        return this.tryGetRuleContext(0, Workbook_articleContext);
    }
    release_notes_summary() {
        return this.tryGetRuleContext(0, Release_notes_summaryContext);
    }
    review_note() {
        return this.tryGetRuleContext(0, Review_noteContext);
    }
    review_author_note() {
        return this.tryGetRuleContext(0, Review_author_noteContext);
    }
    review_reviewer_note() {
        return this.tryGetRuleContext(0, Review_reviewer_noteContext);
    }
    review_request_for_review_note() {
        return this.tryGetRuleContext(0, Review_request_for_review_noteContext);
    }
    review_approved_note() {
        return this.tryGetRuleContext(0, Review_approved_noteContext);
    }
    checklist() {
        return this.tryGetRuleContext(0, ChecklistContext);
    }
    video_transcript() {
        return this.tryGetRuleContext(0, Video_transcriptContext);
    }
    audio_transcript() {
        return this.tryGetRuleContext(0, Audio_transcriptContext);
    }
    image_portrait() {
        return this.tryGetRuleContext(0, Image_portraitContext);
    }
    image_landscape() {
        return this.tryGetRuleContext(0, Image_landscapeContext);
    }
    image_on_device() {
        return this.tryGetRuleContext(0, Image_on_deviceContext);
    }
    bitmark_example() {
        return this.tryGetRuleContext(0, Bitmark_exampleContext);
    }
    app_ai_prompt() {
        return this.tryGetRuleContext(0, App_ai_promptContext);
    }
    book_link() {
        return this.tryGetRuleContext(0, Book_linkContext);
    }
    book_link_next() {
        return this.tryGetRuleContext(0, Book_link_nextContext);
    }
    book_link_prev() {
        return this.tryGetRuleContext(0, Book_link_prevContext);
    }
    figure() {
        return this.tryGetRuleContext(0, FigureContext);
    }
    video_link_landscape() {
        return this.tryGetRuleContext(0, Video_link_landscapeContext);
    }
    video_link_portrait() {
        return this.tryGetRuleContext(0, Video_link_portraitContext);
    }
    image_mood() {
        return this.tryGetRuleContext(0, Image_moodContext);
    }
    image_figure() {
        return this.tryGetRuleContext(0, Image_figureContext);
    }
    image_banner() {
        return this.tryGetRuleContext(0, Image_bannerContext);
    }
    image_styled() {
        return this.tryGetRuleContext(0, Image_styledContext);
    }
    image_screenshot() {
        return this.tryGetRuleContext(0, Image_screenshotContext);
    }
    app_get_screenshot() {
        return this.tryGetRuleContext(0, App_get_screenshotContext);
    }
    app_create_bits_from_image() {
        return this.tryGetRuleContext(0, App_create_bits_from_imageContext);
    }
    life_skill_sticker() {
        return this.tryGetRuleContext(0, Life_skill_stickerContext);
    }
    details_image() {
        return this.tryGetRuleContext(0, Details_imageContext);
    }
    images_logo_grave() {
        return this.tryGetRuleContext(0, Images_logo_graveContext);
    }
    page_banner() {
        return this.tryGetRuleContext(0, Page_bannerContext);
    }
    page_buy_button() {
        return this.tryGetRuleContext(0, Page_buy_buttonContext);
    }
    vendor_jsfiddle() {
        return this.tryGetRuleContext(0, Vendor_jsfiddleContext);
    }
    vendor_jsfiddle_embed() {
        return this.tryGetRuleContext(0, Vendor_jsfiddle_embedContext);
    }
    image_render_svg() {
        return this.tryGetRuleContext(0, Image_render_svgContext);
    }
    app_code_editor() {
        return this.tryGetRuleContext(0, App_code_editorContext);
    }
    app_code_ide() {
        return this.tryGetRuleContext(0, App_code_ideContext);
    }
    code_runtime() {
        return this.tryGetRuleContext(0, Code_runtimeContext);
    }
    output() {
        return this.tryGetRuleContext(0, OutputContext);
    }
    console_log() {
        return this.tryGetRuleContext(0, Console_logContext);
    }
    vendor_jupyter_cell_code() {
        return this.tryGetRuleContext(0, Vendor_jupyter_cell_codeContext);
    }
    vendor_jupyter_cell_raw() {
        return this.tryGetRuleContext(0, Vendor_jupyter_cell_rawContext);
    }
    vendor_jupyter_output() {
        return this.tryGetRuleContext(0, Vendor_jupyter_outputContext);
    }
    vendor_jupyter_cell_markdown() {
        return this.tryGetRuleContext(0, Vendor_jupyter_cell_markdownContext);
    }
    vendor_jupyter_ipynb() {
        return this.tryGetRuleContext(0, Vendor_jupyter_ipynbContext);
    }
    app_code_cell() {
        return this.tryGetRuleContext(0, App_code_cellContext);
    }
    stdout() {
        return this.tryGetRuleContext(0, StdoutContext);
    }
    app_bitmark_from_javascript() {
        return this.tryGetRuleContext(0, App_bitmark_from_javascriptContext);
    }
    app_bitmark_from_editor() {
        return this.tryGetRuleContext(0, App_bitmark_from_editorContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit) {
            listener.enterBit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit) {
            listener.exitBit(this);
        }
    }
}
exports.BitContext = BitContext;
class BookContext extends ParserRuleContext_1.ParserRuleContext {
    BitBook() { return this.getToken(bitmarkParser.BitBook, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook) {
            listener.enterBook(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook) {
            listener.exitBook(this);
        }
    }
}
exports.BookContext = BookContext;
class ChapterContext extends ParserRuleContext_1.ParserRuleContext {
    BitChapter() { return this.getToken(bitmarkParser.BitChapter, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_chapter; }
    // @Override
    enterRule(listener) {
        if (listener.enterChapter) {
            listener.enterChapter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChapter) {
            listener.exitChapter(this);
        }
    }
}
exports.ChapterContext = ChapterContext;
class Ai_promptContext extends ParserRuleContext_1.ParserRuleContext {
    BitAiPrompt() { return this.getToken(bitmarkParser.BitAiPrompt, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_ai_prompt; }
    // @Override
    enterRule(listener) {
        if (listener.enterAi_prompt) {
            listener.enterAi_prompt(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAi_prompt) {
            listener.exitAi_prompt(this);
        }
    }
}
exports.Ai_promptContext = Ai_promptContext;
class Note_aiContext extends ParserRuleContext_1.ParserRuleContext {
    BitNoteAi() { return this.getToken(bitmarkParser.BitNoteAi, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_note_ai; }
    // @Override
    enterRule(listener) {
        if (listener.enterNote_ai) {
            listener.enterNote_ai(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNote_ai) {
            listener.exitNote_ai(this);
        }
    }
}
exports.Note_aiContext = Note_aiContext;
class Summary_aiContext extends ParserRuleContext_1.ParserRuleContext {
    BitSummayAi() { return this.getToken(bitmarkParser.BitSummayAi, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_summary_ai; }
    // @Override
    enterRule(listener) {
        if (listener.enterSummary_ai) {
            listener.enterSummary_ai(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSummary_ai) {
            listener.exitSummary_ai(this);
        }
    }
}
exports.Summary_aiContext = Summary_aiContext;
class Article_aiContext extends ParserRuleContext_1.ParserRuleContext {
    BitArticleAi() { return this.getToken(bitmarkParser.BitArticleAi, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_article_ai; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticle_ai) {
            listener.enterArticle_ai(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticle_ai) {
            listener.exitArticle_ai(this);
        }
    }
}
exports.Article_aiContext = Article_aiContext;
class TocContext extends ParserRuleContext_1.ParserRuleContext {
    BitToc() { return this.getToken(bitmarkParser.BitToc, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_toc; }
    // @Override
    enterRule(listener) {
        if (listener.enterToc) {
            listener.enterToc(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitToc) {
            listener.exitToc(this);
        }
    }
}
exports.TocContext = TocContext;
class SummaryContext extends ParserRuleContext_1.ParserRuleContext {
    BitSummary() { return this.getToken(bitmarkParser.BitSummary, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    title_etc() {
        return this.getRuleContext(0, Title_etcContext);
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_summary; }
    // @Override
    enterRule(listener) {
        if (listener.enterSummary) {
            listener.enterSummary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSummary) {
            listener.exitSummary(this);
        }
    }
}
exports.SummaryContext = SummaryContext;
class Internal_linkContext extends ParserRuleContext_1.ParserRuleContext {
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    BitIntlink() { return this.tryGetToken(bitmarkParser.BitIntlink, 0); }
    BitIntRef() { return this.tryGetToken(bitmarkParser.BitIntRef, 0); }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_internal_link; }
    // @Override
    enterRule(listener) {
        if (listener.enterInternal_link) {
            listener.enterInternal_link(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInternal_link) {
            listener.exitInternal_link(this);
        }
    }
}
exports.Internal_linkContext = Internal_linkContext;
class Bit_aliasContext extends ParserRuleContext_1.ParserRuleContext {
    BitAlias() { return this.getToken(bitmarkParser.BitAlias, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    angleref() {
        return this.getRuleContext(0, AnglerefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_alias; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_alias) {
            listener.enterBit_alias(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_alias) {
            listener.exitBit_alias(this);
        }
    }
}
exports.Bit_aliasContext = Bit_aliasContext;
class Title_etcContext extends ParserRuleContext_1.ParserRuleContext {
    title(i) {
        if (i === undefined) {
            return this.getRuleContexts(TitleContext);
        }
        else {
            return this.getRuleContext(i, TitleContext);
        }
    }
    atdef(i) {
        if (i === undefined) {
            return this.getRuleContexts(AtdefContext);
        }
        else {
            return this.getRuleContext(i, AtdefContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    angleref(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnglerefContext);
        }
        else {
            return this.getRuleContext(i, AnglerefContext);
        }
    }
    anchor(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnchorContext);
        }
        else {
            return this.getRuleContext(i, AnchorContext);
        }
    }
    progress(i) {
        if (i === undefined) {
            return this.getRuleContexts(ProgressContext);
        }
        else {
            return this.getRuleContext(i, ProgressContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_title_etc; }
    // @Override
    enterRule(listener) {
        if (listener.enterTitle_etc) {
            listener.enterTitle_etc(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTitle_etc) {
            listener.exitTitle_etc(this);
        }
    }
}
exports.Title_etcContext = Title_etcContext;
class Group_bornContext extends ParserRuleContext_1.ParserRuleContext {
    BitGroups() { return this.getToken(bitmarkParser.BitGroups, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    lines(i) {
        if (i === undefined) {
            return this.getRuleContexts(LinesContext);
        }
        else {
            return this.getRuleContext(i, LinesContext);
        }
    }
    OPR(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPR);
        }
        else {
            return this.getToken(bitmarkParser.OPR, i);
        }
    }
    OPHASH(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPHASH);
        }
        else {
            return this.getToken(bitmarkParser.OPHASH, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_group_born; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroup_born) {
            listener.enterGroup_born(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroup_born) {
            listener.exitGroup_born(this);
        }
    }
}
exports.Group_bornContext = Group_bornContext;
class Group_diedContext extends ParserRuleContext_1.ParserRuleContext {
    BitGroupt() { return this.getToken(bitmarkParser.BitGroupt, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    lines(i) {
        if (i === undefined) {
            return this.getRuleContexts(LinesContext);
        }
        else {
            return this.getRuleContext(i, LinesContext);
        }
    }
    OPR(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPR);
        }
        else {
            return this.getToken(bitmarkParser.OPR, i);
        }
    }
    OPHASH(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPHASH);
        }
        else {
            return this.getToken(bitmarkParser.OPHASH, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_group_died; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroup_died) {
            listener.enterGroup_died(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroup_died) {
            listener.exitGroup_died(this);
        }
    }
}
exports.Group_diedContext = Group_diedContext;
class Learning_path_ltiContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathLti() { return this.getToken(bitmarkParser.BitLearningPathLti, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_lti; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_lti) {
            listener.enterLearning_path_lti(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_lti) {
            listener.exitLearning_path_lti(this);
        }
    }
}
exports.Learning_path_ltiContext = Learning_path_ltiContext;
class Learning_path_stepContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathStep() { return this.getToken(bitmarkParser.BitLearningPathStep, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_step; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_step) {
            listener.enterLearning_path_step(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_step) {
            listener.exitLearning_path_step(this);
        }
    }
}
exports.Learning_path_stepContext = Learning_path_stepContext;
class Learning_path_bookContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathBook() { return this.getToken(bitmarkParser.BitLearningPathBook, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_book; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_book) {
            listener.enterLearning_path_book(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_book) {
            listener.exitLearning_path_book(this);
        }
    }
}
exports.Learning_path_bookContext = Learning_path_bookContext;
class Learning_path_signContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathSign() { return this.getToken(bitmarkParser.BitLearningPathSign, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_sign; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_sign) {
            listener.enterLearning_path_sign(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_sign) {
            listener.exitLearning_path_sign(this);
        }
    }
}
exports.Learning_path_signContext = Learning_path_signContext;
class Learning_path_video_callContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathVideoCall() { return this.getToken(bitmarkParser.BitLearningPathVideoCall, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_video_call; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_video_call) {
            listener.enterLearning_path_video_call(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_video_call) {
            listener.exitLearning_path_video_call(this);
        }
    }
}
exports.Learning_path_video_callContext = Learning_path_video_callContext;
class Learning_path_learning_goalContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathLearningGoal() { return this.getToken(bitmarkParser.BitLearningPathLearningGoal, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_learning_goal; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_learning_goal) {
            listener.enterLearning_path_learning_goal(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_learning_goal) {
            listener.exitLearning_path_learning_goal(this);
        }
    }
}
exports.Learning_path_learning_goalContext = Learning_path_learning_goalContext;
class Learning_path_closingContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathClosing() { return this.getToken(bitmarkParser.BitLearningPathClosing, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_closing; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_closing) {
            listener.enterLearning_path_closing(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_closing) {
            listener.exitLearning_path_closing(this);
        }
    }
}
exports.Learning_path_closingContext = Learning_path_closingContext;
class Learning_path_feedbackContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathFeedback() { return this.getToken(bitmarkParser.BitLearningPathFeedback, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_feedback; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_feedback) {
            listener.enterLearning_path_feedback(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_feedback) {
            listener.exitLearning_path_feedback(this);
        }
    }
}
exports.Learning_path_feedbackContext = Learning_path_feedbackContext;
class Learning_path_bot_trainingContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathBotTraining() { return this.getToken(bitmarkParser.BitLearningPathBotTraining, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_bot_training; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_bot_training) {
            listener.enterLearning_path_bot_training(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_bot_training) {
            listener.exitLearning_path_bot_training(this);
        }
    }
}
exports.Learning_path_bot_trainingContext = Learning_path_bot_trainingContext;
class Learning_path_external_linkContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathExternalLink() { return this.getToken(bitmarkParser.BitLearningPathExternalLink, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_external_link; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_external_link) {
            listener.enterLearning_path_external_link(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_external_link) {
            listener.exitLearning_path_external_link(this);
        }
    }
}
exports.Learning_path_external_linkContext = Learning_path_external_linkContext;
class Learning_path_classroom_trainingContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathClassroomTraining() { return this.getToken(bitmarkParser.BitLearningPathClassroomTraining, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_classroom_training; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_classroom_training) {
            listener.enterLearning_path_classroom_training(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_classroom_training) {
            listener.exitLearning_path_classroom_training(this);
        }
    }
}
exports.Learning_path_classroom_trainingContext = Learning_path_classroom_trainingContext;
class Learning_path_classroom_eventContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathClassroomEvent() { return this.getToken(bitmarkParser.BitLearningPathClassroomEvent, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_classroom_event; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_classroom_event) {
            listener.enterLearning_path_classroom_event(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_classroom_event) {
            listener.exitLearning_path_classroom_event(this);
        }
    }
}
exports.Learning_path_classroom_eventContext = Learning_path_classroom_eventContext;
class Bot_action_sendContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionSend() { return this.getToken(bitmarkParser.BitBotActionSend, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_send; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_send) {
            listener.enterBot_action_send(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_send) {
            listener.exitBot_action_send(this);
        }
    }
}
exports.Bot_action_sendContext = Bot_action_sendContext;
class Bot_action_announceContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionAnnounce() { return this.getToken(bitmarkParser.BitBotActionAnnounce, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_announce; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_announce) {
            listener.enterBot_action_announce(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_announce) {
            listener.exitBot_action_announce(this);
        }
    }
}
exports.Bot_action_announceContext = Bot_action_announceContext;
class Bot_action_saveContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionSave() { return this.getToken(bitmarkParser.BitBotActionSave, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_save; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_save) {
            listener.enterBot_action_save(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_save) {
            listener.exitBot_action_save(this);
        }
    }
}
exports.Bot_action_saveContext = Bot_action_saveContext;
class Bot_action_remindContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionRemind() { return this.getToken(bitmarkParser.BitBotActionRemind, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_remind; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_remind) {
            listener.enterBot_action_remind(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_remind) {
            listener.exitBot_action_remind(this);
        }
    }
}
exports.Bot_action_remindContext = Bot_action_remindContext;
class Bot_action_responseContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionResponse() { return this.getToken(bitmarkParser.BitBotActionResponse, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    bot_action(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_actionContext);
        }
        else {
            return this.getRuleContext(i, Bot_actionContext);
        }
    }
    footer() {
        return this.tryGetRuleContext(0, FooterContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_response; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_response) {
            listener.enterBot_action_response(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_response) {
            listener.exitBot_action_response(this);
        }
    }
}
exports.Bot_action_responseContext = Bot_action_responseContext;
class Bot_action_true_falseContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionTrueFalse() { return this.getToken(bitmarkParser.BitBotActionTrueFalse, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    bot_action(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_actionContext);
        }
        else {
            return this.getRuleContext(i, Bot_actionContext);
        }
    }
    footer() {
        return this.tryGetRuleContext(0, FooterContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_true_false; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_true_false) {
            listener.enterBot_action_true_false(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_true_false) {
            listener.exitBot_action_true_false(this);
        }
    }
}
exports.Bot_action_true_falseContext = Bot_action_true_falseContext;
class Bot_action_rating_numberContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionRatingNumber() { return this.getToken(bitmarkParser.BitBotActionRatingNumber, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    bot_action(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_actionContext);
        }
        else {
            return this.getRuleContext(i, Bot_actionContext);
        }
    }
    footer() {
        return this.tryGetRuleContext(0, FooterContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_rating_number; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_rating_number) {
            listener.enterBot_action_rating_number(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_rating_number) {
            listener.exitBot_action_rating_number(this);
        }
    }
}
exports.Bot_action_rating_numberContext = Bot_action_rating_numberContext;
class Bot_action_rating_starsContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionRatingStars() { return this.getToken(bitmarkParser.BitBotActionRatingStars, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_rating_stars; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_rating_stars) {
            listener.enterBot_action_rating_stars(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_rating_stars) {
            listener.exitBot_action_rating_stars(this);
        }
    }
}
exports.Bot_action_rating_starsContext = Bot_action_rating_starsContext;
class Bot_actionContext extends ParserRuleContext_1.ParserRuleContext {
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    bo_actions() {
        return this.getRuleContext(0, Bo_actionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action) {
            listener.enterBot_action(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action) {
            listener.exitBot_action(this);
        }
    }
}
exports.Bot_actionContext = Bot_actionContext;
class Bo_actionsContext extends ParserRuleContext_1.ParserRuleContext {
    boacts(i) {
        if (i === undefined) {
            return this.getRuleContexts(BoactsContext);
        }
        else {
            return this.getRuleContext(i, BoactsContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bo_actions; }
    // @Override
    enterRule(listener) {
        if (listener.enterBo_actions) {
            listener.enterBo_actions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBo_actions) {
            listener.exitBo_actions(this);
        }
    }
}
exports.Bo_actionsContext = Bo_actionsContext;
class BoactsContext extends ParserRuleContext_1.ParserRuleContext {
    instruction() {
        return this.tryGetRuleContext(0, InstructionContext);
    }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    choice_minus() {
        return this.tryGetRuleContext(0, Choice_minusContext);
    }
    choice_plus() {
        return this.tryGetRuleContext(0, Choice_plusContext);
    }
    feedback() {
        return this.tryGetRuleContext(0, FeedbackContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_boacts; }
    // @Override
    enterRule(listener) {
        if (listener.enterBoacts) {
            listener.enterBoacts(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBoacts) {
            listener.exitBoacts(this);
        }
    }
}
exports.BoactsContext = BoactsContext;
class FeedbackContext extends ParserRuleContext_1.ParserRuleContext {
    ENCLBARS() { return this.tryGetToken(bitmarkParser.ENCLBARS, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_feedback; }
    // @Override
    enterRule(listener) {
        if (listener.enterFeedback) {
            listener.enterFeedback(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFeedback) {
            listener.exitFeedback(this);
        }
    }
}
exports.FeedbackContext = FeedbackContext;
class FooterContext extends ParserRuleContext_1.ParserRuleContext {
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_footer; }
    // @Override
    enterRule(listener) {
        if (listener.enterFooter) {
            listener.enterFooter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFooter) {
            listener.exitFooter(this);
        }
    }
}
exports.FooterContext = FooterContext;
class BitElemContext extends ParserRuleContext_1.ParserRuleContext {
    LIST_LINE() { return this.tryGetToken(bitmarkParser.LIST_LINE, 0); }
    NOTBITMARK() { return this.tryGetToken(bitmarkParser.NOTBITMARK, 0); }
    dclines() {
        return this.tryGetRuleContext(0, DclinesContext);
    }
    gap() {
        return this.tryGetRuleContext(0, GapContext);
    }
    reference() {
        return this.tryGetRuleContext(0, ReferenceContext);
    }
    dateprop() {
        return this.tryGetRuleContext(0, DatepropContext);
    }
    progress() {
        return this.tryGetRuleContext(0, ProgressContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    dollarans() {
        return this.tryGetRuleContext(0, DollaransContext);
    }
    partans() {
        return this.tryGetRuleContext(0, PartansContext);
    }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    title() {
        return this.tryGetRuleContext(0, TitleContext);
    }
    instruction() {
        return this.tryGetRuleContext(0, InstructionContext);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    example() {
        return this.tryGetRuleContext(0, ExampleContext);
    }
    bool_label() {
        return this.tryGetRuleContext(0, Bool_labelContext);
    }
    progress_points() {
        return this.tryGetRuleContext(0, Progress_pointsContext);
    }
    istracked() {
        return this.tryGetRuleContext(0, IstrackedContext);
    }
    isinfoonly() {
        return this.tryGetRuleContext(0, IsinfoonlyContext);
    }
    imagebit() {
        return this.tryGetRuleContext(0, ImagebitContext);
    }
    audiobit() {
        return this.tryGetRuleContext(0, AudiobitContext);
    }
    videobit() {
        return this.tryGetRuleContext(0, VideobitContext);
    }
    articlebit() {
        return this.tryGetRuleContext(0, ArticlebitContext);
    }
    documentbit() {
        return this.tryGetRuleContext(0, DocumentbitContext);
    }
    appbit() {
        return this.tryGetRuleContext(0, AppbitContext);
    }
    websitebit() {
        return this.tryGetRuleContext(0, WebsitebitContext);
    }
    stillimagefilmbit() {
        return this.tryGetRuleContext(0, StillimagefilmbitContext);
    }
    angleref() {
        return this.tryGetRuleContext(0, AnglerefContext);
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    bracketed_text() {
        return this.tryGetRuleContext(0, Bracketed_textContext);
    }
    sp() {
        return this.tryGetRuleContext(0, SpContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitElem; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitElem) {
            listener.enterBitElem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitElem) {
            listener.exitBitElem(this);
        }
    }
}
exports.BitElemContext = BitElemContext;
class BitElem_noResourceContext extends ParserRuleContext_1.ParserRuleContext {
    LIST_LINE() { return this.tryGetToken(bitmarkParser.LIST_LINE, 0); }
    NOTBITMARK() { return this.tryGetToken(bitmarkParser.NOTBITMARK, 0); }
    dclines() {
        return this.tryGetRuleContext(0, DclinesContext);
    }
    gap() {
        return this.tryGetRuleContext(0, GapContext);
    }
    reference() {
        return this.tryGetRuleContext(0, ReferenceContext);
    }
    dateprop() {
        return this.tryGetRuleContext(0, DatepropContext);
    }
    progress() {
        return this.tryGetRuleContext(0, ProgressContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    dollarans() {
        return this.tryGetRuleContext(0, DollaransContext);
    }
    partans() {
        return this.tryGetRuleContext(0, PartansContext);
    }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    title() {
        return this.tryGetRuleContext(0, TitleContext);
    }
    instruction() {
        return this.tryGetRuleContext(0, InstructionContext);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    example() {
        return this.tryGetRuleContext(0, ExampleContext);
    }
    bool_label() {
        return this.tryGetRuleContext(0, Bool_labelContext);
    }
    progress_points() {
        return this.tryGetRuleContext(0, Progress_pointsContext);
    }
    angleref() {
        return this.tryGetRuleContext(0, AnglerefContext);
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    bracketed_text() {
        return this.tryGetRuleContext(0, Bracketed_textContext);
    }
    sp() {
        return this.tryGetRuleContext(0, SpContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitElem_noResource; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitElem_noResource) {
            listener.enterBitElem_noResource(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitElem_noResource) {
            listener.exitBitElem_noResource(this);
        }
    }
}
exports.BitElem_noResourceContext = BitElem_noResourceContext;
class GapContext extends ParserRuleContext_1.ParserRuleContext {
    single_gap(i) {
        if (i === undefined) {
            return this.getRuleContexts(Single_gapContext);
        }
        else {
            return this.getRuleContext(i, Single_gapContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    hint(i) {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }
        else {
            return this.getRuleContext(i, HintContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    example(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExampleContext);
        }
        else {
            return this.getRuleContext(i, ExampleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_gap; }
    // @Override
    enterRule(listener) {
        if (listener.enterGap) {
            listener.enterGap(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGap) {
            listener.exitGap(this);
        }
    }
}
exports.GapContext = GapContext;
class Single_gapContext extends ParserRuleContext_1.ParserRuleContext {
    OPU() { return this.getToken(bitmarkParser.OPU, 0); }
    clnsp() {
        return this.getRuleContext(0, ClnspContext);
    }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    STRING() { return this.tryGetToken(bitmarkParser.STRING, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_single_gap; }
    // @Override
    enterRule(listener) {
        if (listener.enterSingle_gap) {
            listener.enterSingle_gap(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSingle_gap) {
            listener.exitSingle_gap(this);
        }
    }
}
exports.Single_gapContext = Single_gapContext;
class Choice_plusContext extends ParserRuleContext_1.ParserRuleContext {
    OPP() { return this.getToken(bitmarkParser.OPP, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_plus; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_plus) {
            listener.enterChoice_plus(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_plus) {
            listener.exitChoice_plus(this);
        }
    }
}
exports.Choice_plusContext = Choice_plusContext;
class Choice_minusContext extends ParserRuleContext_1.ParserRuleContext {
    OPM() { return this.getToken(bitmarkParser.OPM, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_minus; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_minus) {
            listener.enterChoice_minus(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_minus) {
            listener.exitChoice_minus(this);
        }
    }
}
exports.Choice_minusContext = Choice_minusContext;
class Choice_starContext extends ParserRuleContext_1.ParserRuleContext {
    OPR() { return this.getToken(bitmarkParser.OPR, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_star; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_star) {
            listener.enterChoice_star(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_star) {
            listener.exitChoice_star(this);
        }
    }
}
exports.Choice_starContext = Choice_starContext;
class EssayContext extends ParserRuleContext_1.ParserRuleContext {
    BitEssay() { return this.getToken(bitmarkParser.BitEssay, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    ml_example(i) {
        if (i === undefined) {
            return this.getRuleContexts(Ml_exampleContext);
        }
        else {
            return this.getRuleContext(i, Ml_exampleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_essay; }
    // @Override
    enterRule(listener) {
        if (listener.enterEssay) {
            listener.enterEssay(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEssay) {
            listener.exitEssay(this);
        }
    }
}
exports.EssayContext = EssayContext;
class Ml_exampleContext extends ParserRuleContext_1.ParserRuleContext {
    AtExamplecol() { return this.getToken(bitmarkParser.AtExamplecol, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_ml_example; }
    // @Override
    enterRule(listener) {
        if (listener.enterMl_example) {
            listener.enterMl_example(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMl_example) {
            listener.exitMl_example(this);
        }
    }
}
exports.Ml_exampleContext = Ml_exampleContext;
class PartansContext extends ParserRuleContext_1.ParserRuleContext {
    AtPartialAnswerS() { return this.tryGetToken(bitmarkParser.AtPartialAnswerS, 0); }
    AtPartialAnswer() { return this.tryGetToken(bitmarkParser.AtPartialAnswer, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_partans; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartans) {
            listener.enterPartans(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartans) {
            listener.exitPartans(this);
        }
    }
}
exports.PartansContext = PartansContext;
class ResourceContext extends ParserRuleContext_1.ParserRuleContext {
    bitElem() {
        return this.getRuleContext(0, BitElemContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource) {
            listener.enterResource(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource) {
            listener.exitResource(this);
        }
    }
}
exports.ResourceContext = ResourceContext;
class CorrectionContext extends ParserRuleContext_1.ParserRuleContext {
    BitCorrection() { return this.getToken(bitmarkParser.BitCorrection, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    corrs(i) {
        if (i === undefined) {
            return this.getRuleContexts(CorrsContext);
        }
        else {
            return this.getRuleContext(i, CorrsContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_correction; }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrection) {
            listener.enterCorrection(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrection) {
            listener.exitCorrection(this);
        }
    }
}
exports.CorrectionContext = CorrectionContext;
class CorrsContext extends ParserRuleContext_1.ParserRuleContext {
    OPM() { return this.tryGetToken(bitmarkParser.OPM, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL() { return this.getToken(bitmarkParser.NL, 0); }
    OPP() { return this.tryGetToken(bitmarkParser.OPP, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_corrs; }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrs) {
            listener.enterCorrs(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrs) {
            listener.exitCorrs(this);
        }
    }
}
exports.CorrsContext = CorrsContext;
class Mark_Context extends ParserRuleContext_1.ParserRuleContext {
    BitMark() { return this.getToken(bitmarkParser.BitMark, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    mark_text(i) {
        if (i === undefined) {
            return this.getRuleContexts(Mark_textContext);
        }
        else {
            return this.getRuleContext(i, Mark_textContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_) {
            listener.enterMark_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_) {
            listener.exitMark_(this);
        }
    }
}
exports.Mark_Context = Mark_Context;
class Mark_textContext extends ParserRuleContext_1.ParserRuleContext {
    OPS() { return this.getToken(bitmarkParser.OPS, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    mark_color() {
        return this.tryGetRuleContext(0, Mark_colorContext);
    }
    hint(i) {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }
        else {
            return this.getRuleContext(i, HintContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_text; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_text) {
            listener.enterMark_text(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_text) {
            listener.exitMark_text(this);
        }
    }
}
exports.Mark_textContext = Mark_textContext;
class Mark_colorContext extends ParserRuleContext_1.ParserRuleContext {
    OPAMARK() { return this.getToken(bitmarkParser.OPAMARK, 0); }
    STRING() { return this.getToken(bitmarkParser.STRING, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_color; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_color) {
            listener.enterMark_color(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_color) {
            listener.exitMark_color(this);
        }
    }
}
exports.Mark_colorContext = Mark_colorContext;
class Take_audioContext extends ParserRuleContext_1.ParserRuleContext {
    BitTakeAudio() { return this.getToken(bitmarkParser.BitTakeAudio, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_take_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterTake_audio) {
            listener.enterTake_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTake_audio) {
            listener.exitTake_audio(this);
        }
    }
}
exports.Take_audioContext = Take_audioContext;
class Take_pictureContext extends ParserRuleContext_1.ParserRuleContext {
    BitTakepic() { return this.getToken(bitmarkParser.BitTakepic, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_take_picture; }
    // @Override
    enterRule(listener) {
        if (listener.enterTake_picture) {
            listener.enterTake_picture(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTake_picture) {
            listener.exitTake_picture(this);
        }
    }
}
exports.Take_pictureContext = Take_pictureContext;
class Record_audioContext extends ParserRuleContext_1.ParserRuleContext {
    BitRecaud() { return this.getToken(bitmarkParser.BitRecaud, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_record_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterRecord_audio) {
            listener.enterRecord_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRecord_audio) {
            listener.exitRecord_audio(this);
        }
    }
}
exports.Record_audioContext = Record_audioContext;
class Preparation_noteContext extends ParserRuleContext_1.ParserRuleContext {
    BitPrepnote() { return this.getToken(bitmarkParser.BitPrepnote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_preparation_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterPreparation_note) {
            listener.enterPreparation_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPreparation_note) {
            listener.exitPreparation_note(this);
        }
    }
}
exports.Preparation_noteContext = Preparation_noteContext;
class AssignmentContext extends ParserRuleContext_1.ParserRuleContext {
    BitAssign() { return this.getToken(bitmarkParser.BitAssign, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_assignment; }
    // @Override
    enterRule(listener) {
        if (listener.enterAssignment) {
            listener.enterAssignment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAssignment) {
            listener.exitAssignment(this);
        }
    }
}
exports.AssignmentContext = AssignmentContext;
class ArticleContext extends ParserRuleContext_1.ParserRuleContext {
    BitArticle() { return this.getToken(bitmarkParser.BitArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticle) {
            listener.enterArticle(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticle) {
            listener.exitArticle(this);
        }
    }
}
exports.ArticleContext = ArticleContext;
class StatementContext extends ParserRuleContext_1.ParserRuleContext {
    BitStatement() { return this.getToken(bitmarkParser.BitStatement, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_statement; }
    // @Override
    enterRule(listener) {
        if (listener.enterStatement) {
            listener.enterStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStatement) {
            listener.exitStatement(this);
        }
    }
}
exports.StatementContext = StatementContext;
class DetailsContext extends ParserRuleContext_1.ParserRuleContext {
    BitDetails() { return this.getToken(bitmarkParser.BitDetails, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_details; }
    // @Override
    enterRule(listener) {
        if (listener.enterDetails) {
            listener.enterDetails(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDetails) {
            listener.exitDetails(this);
        }
    }
}
exports.DetailsContext = DetailsContext;
class Sample_solutionContext extends ParserRuleContext_1.ParserRuleContext {
    BitSampleSolution() { return this.getToken(bitmarkParser.BitSampleSolution, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sample_solution; }
    // @Override
    enterRule(listener) {
        if (listener.enterSample_solution) {
            listener.enterSample_solution(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSample_solution) {
            listener.exitSample_solution(this);
        }
    }
}
exports.Sample_solutionContext = Sample_solutionContext;
class ButtoncopytextContext extends ParserRuleContext_1.ParserRuleContext {
    BitButtonCopytext() { return this.getToken(bitmarkParser.BitButtonCopytext, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_buttoncopytext; }
    // @Override
    enterRule(listener) {
        if (listener.enterButtoncopytext) {
            listener.enterButtoncopytext(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitButtoncopytext) {
            listener.exitButtoncopytext(this);
        }
    }
}
exports.ButtoncopytextContext = ButtoncopytextContext;
class WbtcontinueContext extends ParserRuleContext_1.ParserRuleContext {
    BitWbtContinue() { return this.getToken(bitmarkParser.BitWbtContinue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_wbtcontinue; }
    // @Override
    enterRule(listener) {
        if (listener.enterWbtcontinue) {
            listener.enterWbtcontinue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWbtcontinue) {
            listener.exitWbtcontinue(this);
        }
    }
}
exports.WbtcontinueContext = WbtcontinueContext;
class LearningpathdetailsContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathDetails() { return this.getToken(bitmarkParser.BitLearningPathDetails, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learningpathdetails; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearningpathdetails) {
            listener.enterLearningpathdetails(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearningpathdetails) {
            listener.exitLearningpathdetails(this);
        }
    }
}
exports.LearningpathdetailsContext = LearningpathdetailsContext;
class PageContext extends ParserRuleContext_1.ParserRuleContext {
    BitPage() { return this.getToken(bitmarkParser.BitPage, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_page; }
    // @Override
    enterRule(listener) {
        if (listener.enterPage) {
            listener.enterPage(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPage) {
            listener.exitPage(this);
        }
    }
}
exports.PageContext = PageContext;
class NoteContext extends ParserRuleContext_1.ParserRuleContext {
    BitNote() { return this.getToken(bitmarkParser.BitNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterNote) {
            listener.enterNote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNote) {
            listener.exitNote(this);
        }
    }
}
exports.NoteContext = NoteContext;
class InfoContext extends ParserRuleContext_1.ParserRuleContext {
    BitInfo() { return this.getToken(bitmarkParser.BitInfo, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_info; }
    // @Override
    enterRule(listener) {
        if (listener.enterInfo) {
            listener.enterInfo(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInfo) {
            listener.exitInfo(this);
        }
    }
}
exports.InfoContext = InfoContext;
class WarningContext extends ParserRuleContext_1.ParserRuleContext {
    BitWarning() { return this.getToken(bitmarkParser.BitWarning, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_warning; }
    // @Override
    enterRule(listener) {
        if (listener.enterWarning) {
            listener.enterWarning(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWarning) {
            listener.exitWarning(this);
        }
    }
}
exports.WarningContext = WarningContext;
class RemarkContext extends ParserRuleContext_1.ParserRuleContext {
    BitRemark() { return this.getToken(bitmarkParser.BitRemark, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_remark; }
    // @Override
    enterRule(listener) {
        if (listener.enterRemark) {
            listener.enterRemark(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRemark) {
            listener.exitRemark(this);
        }
    }
}
exports.RemarkContext = RemarkContext;
class HelpContext extends ParserRuleContext_1.ParserRuleContext {
    BitHelp() { return this.getToken(bitmarkParser.BitHelp, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_help; }
    // @Override
    enterRule(listener) {
        if (listener.enterHelp) {
            listener.enterHelp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHelp) {
            listener.exitHelp(this);
        }
    }
}
exports.HelpContext = HelpContext;
class DangerContext extends ParserRuleContext_1.ParserRuleContext {
    BitDanger() { return this.getToken(bitmarkParser.BitDanger, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_danger; }
    // @Override
    enterRule(listener) {
        if (listener.enterDanger) {
            listener.enterDanger(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDanger) {
            listener.exitDanger(this);
        }
    }
}
exports.DangerContext = DangerContext;
class BugContext extends ParserRuleContext_1.ParserRuleContext {
    BitBug() { return this.getToken(bitmarkParser.BitBug, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bug; }
    // @Override
    enterRule(listener) {
        if (listener.enterBug) {
            listener.enterBug(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBug) {
            listener.exitBug(this);
        }
    }
}
exports.BugContext = BugContext;
class SidenoteContext extends ParserRuleContext_1.ParserRuleContext {
    BitSidenote() { return this.getToken(bitmarkParser.BitSidenote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sidenote; }
    // @Override
    enterRule(listener) {
        if (listener.enterSidenote) {
            listener.enterSidenote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSidenote) {
            listener.exitSidenote(this);
        }
    }
}
exports.SidenoteContext = SidenoteContext;
class StickynoteContext extends ParserRuleContext_1.ParserRuleContext {
    BitStickynote() { return this.getToken(bitmarkParser.BitStickynote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stickynote; }
    // @Override
    enterRule(listener) {
        if (listener.enterStickynote) {
            listener.enterStickynote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStickynote) {
            listener.exitStickynote(this);
        }
    }
}
exports.StickynoteContext = StickynoteContext;
class QuoteContext extends ParserRuleContext_1.ParserRuleContext {
    BitQuote() { return this.getToken(bitmarkParser.BitQuote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_quote; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuote) {
            listener.enterQuote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuote) {
            listener.exitQuote(this);
        }
    }
}
exports.QuoteContext = QuoteContext;
class FootnoteContext extends ParserRuleContext_1.ParserRuleContext {
    BitFootnote() { return this.getToken(bitmarkParser.BitFootnote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_footnote; }
    // @Override
    enterRule(listener) {
        if (listener.enterFootnote) {
            listener.enterFootnote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFootnote) {
            listener.exitFootnote(this);
        }
    }
}
exports.FootnoteContext = FootnoteContext;
class HintbitContext extends ParserRuleContext_1.ParserRuleContext {
    BitHint() { return this.getToken(bitmarkParser.BitHint, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_hintbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterHintbit) {
            listener.enterHintbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHintbit) {
            listener.exitHintbit(this);
        }
    }
}
exports.HintbitContext = HintbitContext;
class ExamplebitContext extends ParserRuleContext_1.ParserRuleContext {
    BitExample() { return this.getToken(bitmarkParser.BitExample, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_examplebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterExamplebit) {
            listener.enterExamplebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExamplebit) {
            listener.exitExamplebit(this);
        }
    }
}
exports.ExamplebitContext = ExamplebitContext;
class Vendor_padlet_embedContext extends ParserRuleContext_1.ParserRuleContext {
    BitVendorPadletEmbed() { return this.getToken(bitmarkParser.BitVendorPadletEmbed, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_padlet_embed; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_padlet_embed) {
            listener.enterVendor_padlet_embed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_padlet_embed) {
            listener.exitVendor_padlet_embed(this);
        }
    }
}
exports.Vendor_padlet_embedContext = Vendor_padlet_embedContext;
class ScormContext extends ParserRuleContext_1.ParserRuleContext {
    BitScorm() { return this.getToken(bitmarkParser.BitScorm, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_scorm; }
    // @Override
    enterRule(listener) {
        if (listener.enterScorm) {
            listener.enterScorm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitScorm) {
            listener.exitScorm(this);
        }
    }
}
exports.ScormContext = ScormContext;
class Bit_imageContext extends ParserRuleContext_1.ParserRuleContext {
    BitImage() { return this.getToken(bitmarkParser.BitImage, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_image) {
            listener.enterBit_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_image) {
            listener.exitBit_image(this);
        }
    }
}
exports.Bit_imageContext = Bit_imageContext;
class Bit_imageLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageLink() { return this.getToken(bitmarkParser.BitImageLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageLink) {
            listener.enterBit_imageLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageLink) {
            listener.exitBit_imageLink(this);
        }
    }
}
exports.Bit_imageLinkContext = Bit_imageLinkContext;
class Bit_imageZoomContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageZoom() { return this.getToken(bitmarkParser.BitImageZoom, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageZoom; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageZoom) {
            listener.enterBit_imageZoom(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageZoom) {
            listener.exitBit_imageZoom(this);
        }
    }
}
exports.Bit_imageZoomContext = Bit_imageZoomContext;
class Bit_imagePrototypeContext extends ParserRuleContext_1.ParserRuleContext {
    BitImagePrototype() { return this.getToken(bitmarkParser.BitImagePrototype, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imagePrototype; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imagePrototype) {
            listener.enterBit_imagePrototype(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imagePrototype) {
            listener.exitBit_imagePrototype(this);
        }
    }
}
exports.Bit_imagePrototypeContext = Bit_imagePrototypeContext;
class Bit_imageSuperWideContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageSuperWide() { return this.getToken(bitmarkParser.BitImageSuperWide, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageSuperWide; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageSuperWide) {
            listener.enterBit_imageSuperWide(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageSuperWide) {
            listener.exitBit_imageSuperWide(this);
        }
    }
}
exports.Bit_imageSuperWideContext = Bit_imageSuperWideContext;
class Bit_audioContext extends ParserRuleContext_1.ParserRuleContext {
    BitAudio() { return this.getToken(bitmarkParser.BitAudio, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audio) {
            listener.enterBit_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audio) {
            listener.exitBit_audio(this);
        }
    }
}
exports.Bit_audioContext = Bit_audioContext;
class Bit_audioLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitAudioLink() { return this.getToken(bitmarkParser.BitAudioLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audioLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audioLink) {
            listener.enterBit_audioLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audioLink) {
            listener.exitBit_audioLink(this);
        }
    }
}
exports.Bit_audioLinkContext = Bit_audioLinkContext;
class Bit_audioEmbedContext extends ParserRuleContext_1.ParserRuleContext {
    BitAudioEmbed() { return this.getToken(bitmarkParser.BitAudioEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audioEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audioEmbed) {
            listener.enterBit_audioEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audioEmbed) {
            listener.exitBit_audioEmbed(this);
        }
    }
}
exports.Bit_audioEmbedContext = Bit_audioEmbedContext;
class Bit_videoContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideo() { return this.getToken(bitmarkParser.BitVideo, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_video; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_video) {
            listener.enterBit_video(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_video) {
            listener.exitBit_video(this);
        }
    }
}
exports.Bit_videoContext = Bit_videoContext;
class Bit_videoLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoLink() { return this.getToken(bitmarkParser.BitVideoLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoLink) {
            listener.enterBit_videoLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoLink) {
            listener.exitBit_videoLink(this);
        }
    }
}
exports.Bit_videoLinkContext = Bit_videoLinkContext;
class Bit_videoEmbedContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoEmbed() { return this.getToken(bitmarkParser.BitVideoEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoEmbed) {
            listener.enterBit_videoEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoEmbed) {
            listener.exitBit_videoEmbed(this);
        }
    }
}
exports.Bit_videoEmbedContext = Bit_videoEmbedContext;
class Bit_videoPortraitContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoPortrait() { return this.getToken(bitmarkParser.BitVideoPortrait, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoPortrait; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoPortrait) {
            listener.enterBit_videoPortrait(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoPortrait) {
            listener.exitBit_videoPortrait(this);
        }
    }
}
exports.Bit_videoPortraitContext = Bit_videoPortraitContext;
class Bit_videoLandscapeContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoLandscape() { return this.getToken(bitmarkParser.BitVideoLandscape, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoLandscape; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoLandscape) {
            listener.enterBit_videoLandscape(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoLandscape) {
            listener.exitBit_videoLandscape(this);
        }
    }
}
exports.Bit_videoLandscapeContext = Bit_videoLandscapeContext;
class Bit_stillImageFilmContext extends ParserRuleContext_1.ParserRuleContext {
    BitStillImageFilm() { return this.getToken(bitmarkParser.BitStillImageFilm, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilm; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilm) {
            listener.enterBit_stillImageFilm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilm) {
            listener.exitBit_stillImageFilm(this);
        }
    }
}
exports.Bit_stillImageFilmContext = Bit_stillImageFilmContext;
class Bit_stillImageFilmLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitStillImageFilmLink() { return this.getToken(bitmarkParser.BitStillImageFilmLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilmLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilmLink) {
            listener.enterBit_stillImageFilmLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilmLink) {
            listener.exitBit_stillImageFilmLink(this);
        }
    }
}
exports.Bit_stillImageFilmLinkContext = Bit_stillImageFilmLinkContext;
class Bit_stillImageFilmEmbedContext extends ParserRuleContext_1.ParserRuleContext {
    BitStillImageFilmEmbed() { return this.getToken(bitmarkParser.BitStillImageFilmEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilmEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilmEmbed) {
            listener.enterBit_stillImageFilmEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilmEmbed) {
            listener.exitBit_stillImageFilmEmbed(this);
        }
    }
}
exports.Bit_stillImageFilmEmbedContext = Bit_stillImageFilmEmbedContext;
class Bit_websiteLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitWebsiteLink() { return this.getToken(bitmarkParser.BitWebsiteLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_websiteLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_websiteLink) {
            listener.enterBit_websiteLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_websiteLink) {
            listener.exitBit_websiteLink(this);
        }
    }
}
exports.Bit_websiteLinkContext = Bit_websiteLinkContext;
class Bit_documentContext extends ParserRuleContext_1.ParserRuleContext {
    BitDocument() { return this.getToken(bitmarkParser.BitDocument, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_document; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_document) {
            listener.enterBit_document(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_document) {
            listener.exitBit_document(this);
        }
    }
}
exports.Bit_documentContext = Bit_documentContext;
class Bit_documentLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitDocumentLink() { return this.getToken(bitmarkParser.BitDocumentLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentLink) {
            listener.enterBit_documentLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentLink) {
            listener.exitBit_documentLink(this);
        }
    }
}
exports.Bit_documentLinkContext = Bit_documentLinkContext;
class Bit_documentEmbedContext extends ParserRuleContext_1.ParserRuleContext {
    BitDocumentEmbed() { return this.getToken(bitmarkParser.BitDocumentEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentEmbed) {
            listener.enterBit_documentEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentEmbed) {
            listener.exitBit_documentEmbed(this);
        }
    }
}
exports.Bit_documentEmbedContext = Bit_documentEmbedContext;
class Bit_documentDownloadContext extends ParserRuleContext_1.ParserRuleContext {
    BitDocumentDownload() { return this.getToken(bitmarkParser.BitDocumentDownload, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentDownload; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentDownload) {
            listener.enterBit_documentDownload(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentDownload) {
            listener.exitBit_documentDownload(this);
        }
    }
}
exports.Bit_documentDownloadContext = Bit_documentDownloadContext;
class Bit_appLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitAppLink() { return this.getToken(bitmarkParser.BitAppLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_appLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_appLink) {
            listener.enterBit_appLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_appLink) {
            listener.exitBit_appLink(this);
        }
    }
}
exports.Bit_appLinkContext = Bit_appLinkContext;
class Bit_editorialContext extends ParserRuleContext_1.ParserRuleContext {
    BitEditorial() { return this.getToken(bitmarkParser.BitEditorial, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_editorial; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_editorial) {
            listener.enterBit_editorial(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_editorial) {
            listener.exitBit_editorial(this);
        }
    }
}
exports.Bit_editorialContext = Bit_editorialContext;
class Book_frontispieceContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookFrontispiece() { return this.getToken(bitmarkParser.BitBookFrontispiece, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_frontispiece; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_frontispiece) {
            listener.enterBook_frontispiece(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_frontispiece) {
            listener.exitBook_frontispiece(this);
        }
    }
}
exports.Book_frontispieceContext = Book_frontispieceContext;
class Book_titleContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookTitle() { return this.getToken(bitmarkParser.BitBookTitle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_title; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_title) {
            listener.enterBook_title(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_title) {
            listener.exitBook_title(this);
        }
    }
}
exports.Book_titleContext = Book_titleContext;
class Book_copyrightContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookCopyright() { return this.getToken(bitmarkParser.BitBookCopyright, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_copyright; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_copyright) {
            listener.enterBook_copyright(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_copyright) {
            listener.exitBook_copyright(this);
        }
    }
}
exports.Book_copyrightContext = Book_copyrightContext;
class Book_dedicationContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookDedication() { return this.getToken(bitmarkParser.BitBookDedication, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_dedication; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_dedication) {
            listener.enterBook_dedication(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_dedication) {
            listener.exitBook_dedication(this);
        }
    }
}
exports.Book_dedicationContext = Book_dedicationContext;
class Book_forwordContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookForword() { return this.getToken(bitmarkParser.BitBookForword, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_forword; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_forword) {
            listener.enterBook_forword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_forword) {
            listener.exitBook_forword(this);
        }
    }
}
exports.Book_forwordContext = Book_forwordContext;
class Book_prefaceContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookPreface() { return this.getToken(bitmarkParser.BitBookPreface, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_preface; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_preface) {
            listener.enterBook_preface(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_preface) {
            listener.exitBook_preface(this);
        }
    }
}
exports.Book_prefaceContext = Book_prefaceContext;
class Book_prologueContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookPrologue() { return this.getToken(bitmarkParser.BitBookPrologue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_prologue; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_prologue) {
            listener.enterBook_prologue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_prologue) {
            listener.exitBook_prologue(this);
        }
    }
}
exports.Book_prologueContext = Book_prologueContext;
class Book_epilogueContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookEpilogue() { return this.getToken(bitmarkParser.BitBookEpilogue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_epilogue; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_epilogue) {
            listener.enterBook_epilogue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_epilogue) {
            listener.exitBook_epilogue(this);
        }
    }
}
exports.Book_epilogueContext = Book_epilogueContext;
class Book_introductionContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookIntroduction() { return this.getToken(bitmarkParser.BitBookIntroduction, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_introduction; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_introduction) {
            listener.enterBook_introduction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_introduction) {
            listener.exitBook_introduction(this);
        }
    }
}
exports.Book_introductionContext = Book_introductionContext;
class Book_inciting_incidentContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookIncitingIncident() { return this.getToken(bitmarkParser.BitBookIncitingIncident, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_inciting_incident; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_inciting_incident) {
            listener.enterBook_inciting_incident(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_inciting_incident) {
            listener.exitBook_inciting_incident(this);
        }
    }
}
exports.Book_inciting_incidentContext = Book_inciting_incidentContext;
class Book_conclusionContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookConclusion() { return this.getToken(bitmarkParser.BitBookConclusion, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_conclusion; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_conclusion) {
            listener.enterBook_conclusion(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_conclusion) {
            listener.exitBook_conclusion(this);
        }
    }
}
exports.Book_conclusionContext = Book_conclusionContext;
class Book_afterwordContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookAfterword() { return this.getToken(bitmarkParser.BitBookAfterword, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_afterword; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_afterword) {
            listener.enterBook_afterword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_afterword) {
            listener.exitBook_afterword(this);
        }
    }
}
exports.Book_afterwordContext = Book_afterwordContext;
class Book_postscriptContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookPostscript() { return this.getToken(bitmarkParser.BitBookPostscript, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_postscript; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_postscript) {
            listener.enterBook_postscript(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_postscript) {
            listener.exitBook_postscript(this);
        }
    }
}
exports.Book_postscriptContext = Book_postscriptContext;
class Book_appendixContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookappendix() { return this.getToken(bitmarkParser.BitBookappendix, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_appendix; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_appendix) {
            listener.enterBook_appendix(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_appendix) {
            listener.exitBook_appendix(this);
        }
    }
}
exports.Book_appendixContext = Book_appendixContext;
class Book_addendumContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookAddendum() { return this.getToken(bitmarkParser.BitBookAddendum, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_addendum; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_addendum) {
            listener.enterBook_addendum(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_addendum) {
            listener.exitBook_addendum(this);
        }
    }
}
exports.Book_addendumContext = Book_addendumContext;
class Book_acknowledgmentsContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookAcknowledgments() { return this.getToken(bitmarkParser.BitBookAcknowledgments, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_acknowledgments; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_acknowledgments) {
            listener.enterBook_acknowledgments(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_acknowledgments) {
            listener.exitBook_acknowledgments(this);
        }
    }
}
exports.Book_acknowledgmentsContext = Book_acknowledgmentsContext;
class Book_list_of_contributorsContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookListOfContributors() { return this.getToken(bitmarkParser.BitBookListOfContributors, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_list_of_contributors; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_list_of_contributors) {
            listener.enterBook_list_of_contributors(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_list_of_contributors) {
            listener.exitBook_list_of_contributors(this);
        }
    }
}
exports.Book_list_of_contributorsContext = Book_list_of_contributorsContext;
class Book_bibliographyContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookBibliography() { return this.getToken(bitmarkParser.BitBookBibliography, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_bibliography; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_bibliography) {
            listener.enterBook_bibliography(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_bibliography) {
            listener.exitBook_bibliography(this);
        }
    }
}
exports.Book_bibliographyContext = Book_bibliographyContext;
class Book_reference_listContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookReferenceList() { return this.getToken(bitmarkParser.BitBookReferenceList, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_reference_list; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_reference_list) {
            listener.enterBook_reference_list(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_reference_list) {
            listener.exitBook_reference_list(this);
        }
    }
}
exports.Book_reference_listContext = Book_reference_listContext;
class Book_endnotesContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookEndnotes() { return this.getToken(bitmarkParser.BitBookEndnotes, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_endnotes; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_endnotes) {
            listener.enterBook_endnotes(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_endnotes) {
            listener.exitBook_endnotes(this);
        }
    }
}
exports.Book_endnotesContext = Book_endnotesContext;
class Book_notesContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookNotes() { return this.getToken(bitmarkParser.BitBookNotes, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_notes; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_notes) {
            listener.enterBook_notes(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_notes) {
            listener.exitBook_notes(this);
        }
    }
}
exports.Book_notesContext = Book_notesContext;
class Book_copyright_permissionsContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookCopyrightPermissions() { return this.getToken(bitmarkParser.BitBookCopyrightPermissions, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_copyright_permissions; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_copyright_permissions) {
            listener.enterBook_copyright_permissions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_copyright_permissions) {
            listener.exitBook_copyright_permissions(this);
        }
    }
}
exports.Book_copyright_permissionsContext = Book_copyright_permissionsContext;
class Book_teaserContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookTeaser() { return this.getToken(bitmarkParser.BitBookTeaser, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_teaser; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_teaser) {
            listener.enterBook_teaser(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_teaser) {
            listener.exitBook_teaser(this);
        }
    }
}
exports.Book_teaserContext = Book_teaserContext;
class Book_auther_bioContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookAutherBio() { return this.getToken(bitmarkParser.BitBookAutherBio, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_auther_bio; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_auther_bio) {
            listener.enterBook_auther_bio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_auther_bio) {
            listener.exitBook_auther_bio(this);
        }
    }
}
exports.Book_auther_bioContext = Book_auther_bioContext;
class Book_request_for_a_book_reviewContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookRequestForABookReview() { return this.getToken(bitmarkParser.BitBookRequestForABookReview, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_request_for_a_book_review; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_request_for_a_book_review) {
            listener.enterBook_request_for_a_book_review(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_request_for_a_book_review) {
            listener.exitBook_request_for_a_book_review(this);
        }
    }
}
exports.Book_request_for_a_book_reviewContext = Book_request_for_a_book_reviewContext;
class Book_coming_soonContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookComingSoon() { return this.getToken(bitmarkParser.BitBookComingSoon, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_coming_soon; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_coming_soon) {
            listener.enterBook_coming_soon(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_coming_soon) {
            listener.exitBook_coming_soon(this);
        }
    }
}
exports.Book_coming_soonContext = Book_coming_soonContext;
class Book_read_moreContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookReadMore() { return this.getToken(bitmarkParser.BitBookReadMore, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_read_more; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_read_more) {
            listener.enterBook_read_more(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_read_more) {
            listener.exitBook_read_more(this);
        }
    }
}
exports.Book_read_moreContext = Book_read_moreContext;
class Book_summaryContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookSummary() { return this.getToken(bitmarkParser.BitBookSummary, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_summary; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_summary) {
            listener.enterBook_summary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_summary) {
            listener.exitBook_summary(this);
        }
    }
}
exports.Book_summaryContext = Book_summaryContext;
class Book_epigraphContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookEpigraph() { return this.getToken(bitmarkParser.BitBookEpigraph, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_epigraph; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_epigraph) {
            listener.enterBook_epigraph(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_epigraph) {
            listener.exitBook_epigraph(this);
        }
    }
}
exports.Book_epigraphContext = Book_epigraphContext;
class CodeContext extends ParserRuleContext_1.ParserRuleContext {
    BitCode() { return this.getToken(bitmarkParser.BitCode, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_code; }
    // @Override
    enterRule(listener) {
        if (listener.enterCode) {
            listener.enterCode(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCode) {
            listener.exitCode(this);
        }
    }
}
exports.CodeContext = CodeContext;
class Card1Context extends ParserRuleContext_1.ParserRuleContext {
    BitCard1() { return this.getToken(bitmarkParser.BitCard1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_card1; }
    // @Override
    enterRule(listener) {
        if (listener.enterCard1) {
            listener.enterCard1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCard1) {
            listener.exitCard1(this);
        }
    }
}
exports.Card1Context = Card1Context;
class Question1Context extends ParserRuleContext_1.ParserRuleContext {
    BitQuestion1() { return this.getToken(bitmarkParser.BitQuestion1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_question1; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuestion1) {
            listener.enterQuestion1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuestion1) {
            listener.exitQuestion1(this);
        }
    }
}
exports.Question1Context = Question1Context;
class ScreenshotContext extends ParserRuleContext_1.ParserRuleContext {
    BitScreenshot() { return this.getToken(bitmarkParser.BitScreenshot, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_screenshot; }
    // @Override
    enterRule(listener) {
        if (listener.enterScreenshot) {
            listener.enterScreenshot(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitScreenshot) {
            listener.exitScreenshot(this);
        }
    }
}
exports.ScreenshotContext = ScreenshotContext;
class Focus_imageContext extends ParserRuleContext_1.ParserRuleContext {
    BitFocusImage() { return this.getToken(bitmarkParser.BitFocusImage, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_focus_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterFocus_image) {
            listener.enterFocus_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFocus_image) {
            listener.exitFocus_image(this);
        }
    }
}
exports.Focus_imageContext = Focus_imageContext;
class PhotoContext extends ParserRuleContext_1.ParserRuleContext {
    BitPhoto() { return this.getToken(bitmarkParser.BitPhoto, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_photo; }
    // @Override
    enterRule(listener) {
        if (listener.enterPhoto) {
            listener.enterPhoto(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPhoto) {
            listener.exitPhoto(this);
        }
    }
}
exports.PhotoContext = PhotoContext;
class Browser_imageContext extends ParserRuleContext_1.ParserRuleContext {
    BitBrowserImage() { return this.getToken(bitmarkParser.BitBrowserImage, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_browser_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterBrowser_image) {
            listener.enterBrowser_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBrowser_image) {
            listener.exitBrowser_image(this);
        }
    }
}
exports.Browser_imageContext = Browser_imageContext;
class Chapter_subject_matterContext extends ParserRuleContext_1.ParserRuleContext {
    BitChapterSubjectMatter() { return this.getToken(bitmarkParser.BitChapterSubjectMatter, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_chapter_subject_matter; }
    // @Override
    enterRule(listener) {
        if (listener.enterChapter_subject_matter) {
            listener.enterChapter_subject_matter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChapter_subject_matter) {
            listener.exitChapter_subject_matter(this);
        }
    }
}
exports.Chapter_subject_matterContext = Chapter_subject_matterContext;
class Release_noteContext extends ParserRuleContext_1.ParserRuleContext {
    BitReleaseNote() { return this.getToken(bitmarkParser.BitReleaseNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_release_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterRelease_note) {
            listener.enterRelease_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRelease_note) {
            listener.exitRelease_note(this);
        }
    }
}
exports.Release_noteContext = Release_noteContext;
class ConclusionContext extends ParserRuleContext_1.ParserRuleContext {
    BitConclusion() { return this.getToken(bitmarkParser.BitConclusion, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_conclusion; }
    // @Override
    enterRule(listener) {
        if (listener.enterConclusion) {
            listener.enterConclusion(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConclusion) {
            listener.exitConclusion(this);
        }
    }
}
exports.ConclusionContext = ConclusionContext;
class FeaturedContext extends ParserRuleContext_1.ParserRuleContext {
    BitFeatured() { return this.getToken(bitmarkParser.BitFeatured, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_featured; }
    // @Override
    enterRule(listener) {
        if (listener.enterFeatured) {
            listener.enterFeatured(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFeatured) {
            listener.exitFeatured(this);
        }
    }
}
exports.FeaturedContext = FeaturedContext;
class Vendor_amcharts_5_chartContext extends ParserRuleContext_1.ParserRuleContext {
    BitVendorAmcharts5Chart() { return this.getToken(bitmarkParser.BitVendorAmcharts5Chart, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_amcharts_5_chart; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_amcharts_5_chart) {
            listener.enterVendor_amcharts_5_chart(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_amcharts_5_chart) {
            listener.exitVendor_amcharts_5_chart(this);
        }
    }
}
exports.Vendor_amcharts_5_chartContext = Vendor_amcharts_5_chartContext;
class Newspaper_articleContext extends ParserRuleContext_1.ParserRuleContext {
    BitNewspaperArticle() { return this.getToken(bitmarkParser.BitNewspaperArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_newspaper_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterNewspaper_article) {
            listener.enterNewspaper_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNewspaper_article) {
            listener.exitNewspaper_article(this);
        }
    }
}
exports.Newspaper_articleContext = Newspaper_articleContext;
class Blog_articleContext extends ParserRuleContext_1.ParserRuleContext {
    BitBlogArticle() { return this.getToken(bitmarkParser.BitBlogArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_blog_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterBlog_article) {
            listener.enterBlog_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBlog_article) {
            listener.exitBlog_article(this);
        }
    }
}
exports.Blog_articleContext = Blog_articleContext;
class Book_articleContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookArticle() { return this.getToken(bitmarkParser.BitBookArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_article) {
            listener.enterBook_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_article) {
            listener.exitBook_article(this);
        }
    }
}
exports.Book_articleContext = Book_articleContext;
class Notebook_articleContext extends ParserRuleContext_1.ParserRuleContext {
    BitNotebookArticle() { return this.getToken(bitmarkParser.BitNotebookArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_notebook_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterNotebook_article) {
            listener.enterNotebook_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNotebook_article) {
            listener.exitNotebook_article(this);
        }
    }
}
exports.Notebook_articleContext = Notebook_articleContext;
class Workbook_articleContext extends ParserRuleContext_1.ParserRuleContext {
    BitWorkbookArticle() { return this.getToken(bitmarkParser.BitWorkbookArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_workbook_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterWorkbook_article) {
            listener.enterWorkbook_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWorkbook_article) {
            listener.exitWorkbook_article(this);
        }
    }
}
exports.Workbook_articleContext = Workbook_articleContext;
class Release_notes_summaryContext extends ParserRuleContext_1.ParserRuleContext {
    BitReleaseNotesSummary() { return this.getToken(bitmarkParser.BitReleaseNotesSummary, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_release_notes_summary; }
    // @Override
    enterRule(listener) {
        if (listener.enterRelease_notes_summary) {
            listener.enterRelease_notes_summary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRelease_notes_summary) {
            listener.exitRelease_notes_summary(this);
        }
    }
}
exports.Release_notes_summaryContext = Release_notes_summaryContext;
class MessageContext extends ParserRuleContext_1.ParserRuleContext {
    BitMessage() { return this.getToken(bitmarkParser.BitMessage, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_message; }
    // @Override
    enterRule(listener) {
        if (listener.enterMessage) {
            listener.enterMessage(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMessage) {
            listener.exitMessage(this);
        }
    }
}
exports.MessageContext = MessageContext;
class Cook_preparationContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookPreparation() { return this.getToken(bitmarkParser.BitCookPreparation, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_preparation; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_preparation) {
            listener.enterCook_preparation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_preparation) {
            listener.exitCook_preparation(this);
        }
    }
}
exports.Cook_preparationContext = Cook_preparationContext;
class Cook_stepContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookStep() { return this.getToken(bitmarkParser.BitCookStep, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_step; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_step) {
            listener.enterCook_step(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_step) {
            listener.exitCook_step(this);
        }
    }
}
exports.Cook_stepContext = Cook_stepContext;
class Cook_ingredientsContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookIngredients() { return this.getToken(bitmarkParser.BitCookIngredients, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_ingredients; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_ingredients) {
            listener.enterCook_ingredients(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_ingredients) {
            listener.exitCook_ingredients(this);
        }
    }
}
exports.Cook_ingredientsContext = Cook_ingredientsContext;
class Cook_remarkContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookRremark() { return this.getToken(bitmarkParser.BitCookRremark, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_remark; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_remark) {
            listener.enterCook_remark(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_remark) {
            listener.exitCook_remark(this);
        }
    }
}
exports.Cook_remarkContext = Cook_remarkContext;
class Cook_variationContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookVariation() { return this.getToken(bitmarkParser.BitCookVariation, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_variation; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_variation) {
            listener.enterCook_variation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_variation) {
            listener.exitCook_variation(this);
        }
    }
}
exports.Cook_variationContext = Cook_variationContext;
class Cook_insertContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookInsert() { return this.getToken(bitmarkParser.BitCookInsert, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_insert; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_insert) {
            listener.enterCook_insert(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_insert) {
            listener.exitCook_insert(this);
        }
    }
}
exports.Cook_insertContext = Cook_insertContext;
class Cook_arrangementContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookArrangement() { return this.getToken(bitmarkParser.BitCookArrangement, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_arrangement; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_arrangement) {
            listener.enterCook_arrangement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_arrangement) {
            listener.exitCook_arrangement(this);
        }
    }
}
exports.Cook_arrangementContext = Cook_arrangementContext;
class Cook_practice_adviseContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookPracticeAdvise() { return this.getToken(bitmarkParser.BitCookPracticeAdvise, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_practice_advise; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_practice_advise) {
            listener.enterCook_practice_advise(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_practice_advise) {
            listener.exitCook_practice_advise(this);
        }
    }
}
exports.Cook_practice_adviseContext = Cook_practice_adviseContext;
class Cook_plateContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookPlate() { return this.getToken(bitmarkParser.BitCookPlate, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_plate; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_plate) {
            listener.enterCook_plate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_plate) {
            listener.exitCook_plate(this);
        }
    }
}
exports.Cook_plateContext = Cook_plateContext;
class Cook_recommendationContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookRecommendation() { return this.getToken(bitmarkParser.BitCookRecommendation, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_recommendation; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_recommendation) {
            listener.enterCook_recommendation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_recommendation) {
            listener.exitCook_recommendation(this);
        }
    }
}
exports.Cook_recommendationContext = Cook_recommendationContext;
class Cook_personal_recommendationContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookPersonalRecommendation() { return this.getToken(bitmarkParser.BitCookPersonalRecommendation, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_personal_recommendation; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_personal_recommendation) {
            listener.enterCook_personal_recommendation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_personal_recommendation) {
            listener.exitCook_personal_recommendation(this);
        }
    }
}
exports.Cook_personal_recommendationContext = Cook_personal_recommendationContext;
class Cook_side_drinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookSideDrink() { return this.getToken(bitmarkParser.BitCookSideDrink, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_side_drink; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_side_drink) {
            listener.enterCook_side_drink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_side_drink) {
            listener.exitCook_side_drink(this);
        }
    }
}
exports.Cook_side_drinkContext = Cook_side_drinkContext;
class Cook_side_dishContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookSideDish() { return this.getToken(bitmarkParser.BitCookSideDish, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_side_dish; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_side_dish) {
            listener.enterCook_side_dish(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_side_dish) {
            listener.exitCook_side_dish(this);
        }
    }
}
exports.Cook_side_dishContext = Cook_side_dishContext;
class Cook_timerContext extends ParserRuleContext_1.ParserRuleContext {
    BitCookTimer() { return this.getToken(bitmarkParser.BitCookTimer, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_cook_timer; }
    // @Override
    enterRule(listener) {
        if (listener.enterCook_timer) {
            listener.enterCook_timer(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCook_timer) {
            listener.exitCook_timer(this);
        }
    }
}
exports.Cook_timerContext = Cook_timerContext;
class Lang_learning_outcomesContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangLearningOutcomes() { return this.getToken(bitmarkParser.BitLangLearningOutcomes, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_learning_outcomes; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_learning_outcomes) {
            listener.enterLang_learning_outcomes(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_learning_outcomes) {
            listener.exitLang_learning_outcomes(this);
        }
    }
}
exports.Lang_learning_outcomesContext = Lang_learning_outcomesContext;
class Lang_enabling_language_skillsContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangEnablingLanguageSkills() { return this.getToken(bitmarkParser.BitLangEnablingLanguageSkills, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_enabling_language_skills; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_enabling_language_skills) {
            listener.enterLang_enabling_language_skills(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_enabling_language_skills) {
            listener.exitLang_enabling_language_skills(this);
        }
    }
}
exports.Lang_enabling_language_skillsContext = Lang_enabling_language_skillsContext;
class Lang_life_skillsContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangLifeSkills() { return this.getToken(bitmarkParser.BitLangLifeSkills, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_life_skills; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_life_skills) {
            listener.enterLang_life_skills(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_life_skills) {
            listener.exitLang_life_skills(this);
        }
    }
}
exports.Lang_life_skillsContext = Lang_life_skillsContext;
class Lang_english_around_worldContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangEnglishAroundWorld() { return this.getToken(bitmarkParser.BitLangEnglishAroundWorld, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_english_around_world; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_english_around_world) {
            listener.enterLang_english_around_world(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_english_around_world) {
            listener.exitLang_english_around_world(this);
        }
    }
}
exports.Lang_english_around_worldContext = Lang_english_around_worldContext;
class Lang_good_to_knowContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangGoodtoknow() { return this.getToken(bitmarkParser.BitLangGoodtoknow, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_good_to_know; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_good_to_know) {
            listener.enterLang_good_to_know(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_good_to_know) {
            listener.exitLang_good_to_know(this);
        }
    }
}
exports.Lang_good_to_knowContext = Lang_good_to_knowContext;
class Lang_learning_strategyContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangLearningStrategy() { return this.getToken(bitmarkParser.BitLangLearningStrategy, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_learning_strategy; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_learning_strategy) {
            listener.enterLang_learning_strategy(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_learning_strategy) {
            listener.exitLang_learning_strategy(this);
        }
    }
}
exports.Lang_learning_strategyContext = Lang_learning_strategyContext;
class Lang_like_a_localContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangLikeAlocal() { return this.getToken(bitmarkParser.BitLangLikeAlocal, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_like_a_local; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_like_a_local) {
            listener.enterLang_like_a_local(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_like_a_local) {
            listener.exitLang_like_a_local(this);
        }
    }
}
exports.Lang_like_a_localContext = Lang_like_a_localContext;
class Lang_useful_phrasesContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangUsefulPhrases() { return this.getToken(bitmarkParser.BitLangUsefulPhrases, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_useful_phrases; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_useful_phrases) {
            listener.enterLang_useful_phrases(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_useful_phrases) {
            listener.exitLang_useful_phrases(this);
        }
    }
}
exports.Lang_useful_phrasesContext = Lang_useful_phrasesContext;
class Lang_level_downContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangLevelDown() { return this.getToken(bitmarkParser.BitLangLevelDown, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_level_down; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_level_down) {
            listener.enterLang_level_down(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_level_down) {
            listener.exitLang_level_down(this);
        }
    }
}
exports.Lang_level_downContext = Lang_level_downContext;
class Lang_level_upContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangLevelUp() { return this.getToken(bitmarkParser.BitLangLevelUp, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_level_up; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_level_up) {
            listener.enterLang_level_up(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_level_up) {
            listener.exitLang_level_up(this);
        }
    }
}
exports.Lang_level_upContext = Lang_level_upContext;
class Lang_extra_activityContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangExtraActivity() { return this.getToken(bitmarkParser.BitLangExtraActivity, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_extra_activity; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_extra_activity) {
            listener.enterLang_extra_activity(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_extra_activity) {
            listener.exitLang_extra_activity(this);
        }
    }
}
exports.Lang_extra_activityContext = Lang_extra_activityContext;
class Lang_video_scriptContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangVideoScript() { return this.getToken(bitmarkParser.BitLangVideoScript, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_video_script; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_video_script) {
            listener.enterLang_video_script(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_video_script) {
            listener.exitLang_video_script(this);
        }
    }
}
exports.Lang_video_scriptContext = Lang_video_scriptContext;
class Lang_audio_scriptContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangAudioScript() { return this.getToken(bitmarkParser.BitLangAudioScript, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_audio_script; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_audio_script) {
            listener.enterLang_audio_script(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_audio_script) {
            listener.exitLang_audio_script(this);
        }
    }
}
exports.Lang_audio_scriptContext = Lang_audio_scriptContext;
class Lang_vocabularyContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangVocabulary() { return this.getToken(bitmarkParser.BitLangVocabulary, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_vocabulary; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_vocabulary) {
            listener.enterLang_vocabulary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_vocabulary) {
            listener.exitLang_vocabulary(this);
        }
    }
}
exports.Lang_vocabularyContext = Lang_vocabularyContext;
class Lang_homeworkContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangHomework() { return this.getToken(bitmarkParser.BitLangHomework, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_homework; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_homework) {
            listener.enterLang_homework(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_homework) {
            listener.exitLang_homework(this);
        }
    }
}
exports.Lang_homeworkContext = Lang_homeworkContext;
class Lang_teacher_noteContext extends ParserRuleContext_1.ParserRuleContext {
    BitLangTeacherNote() { return this.getToken(bitmarkParser.BitLangTeacherNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lang_teacher_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterLang_teacher_note) {
            listener.enterLang_teacher_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLang_teacher_note) {
            listener.exitLang_teacher_note(this);
        }
    }
}
exports.Lang_teacher_noteContext = Lang_teacher_noteContext;
class Review_noteContext extends ParserRuleContext_1.ParserRuleContext {
    BitReviewNote() { return this.getToken(bitmarkParser.BitReviewNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_review_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterReview_note) {
            listener.enterReview_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReview_note) {
            listener.exitReview_note(this);
        }
    }
}
exports.Review_noteContext = Review_noteContext;
class Review_author_noteContext extends ParserRuleContext_1.ParserRuleContext {
    BitReviewAuthorNote() { return this.getToken(bitmarkParser.BitReviewAuthorNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_review_author_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterReview_author_note) {
            listener.enterReview_author_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReview_author_note) {
            listener.exitReview_author_note(this);
        }
    }
}
exports.Review_author_noteContext = Review_author_noteContext;
class Review_reviewer_noteContext extends ParserRuleContext_1.ParserRuleContext {
    BitReviewReviewerNote() { return this.getToken(bitmarkParser.BitReviewReviewerNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_review_reviewer_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterReview_reviewer_note) {
            listener.enterReview_reviewer_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReview_reviewer_note) {
            listener.exitReview_reviewer_note(this);
        }
    }
}
exports.Review_reviewer_noteContext = Review_reviewer_noteContext;
class Review_request_for_review_noteContext extends ParserRuleContext_1.ParserRuleContext {
    BitReviewRequestForReviewNote() { return this.getToken(bitmarkParser.BitReviewRequestForReviewNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_review_request_for_review_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterReview_request_for_review_note) {
            listener.enterReview_request_for_review_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReview_request_for_review_note) {
            listener.exitReview_request_for_review_note(this);
        }
    }
}
exports.Review_request_for_review_noteContext = Review_request_for_review_noteContext;
class Review_approved_noteContext extends ParserRuleContext_1.ParserRuleContext {
    BitReviewApprovedNote() { return this.getToken(bitmarkParser.BitReviewApprovedNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_review_approved_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterReview_approved_note) {
            listener.enterReview_approved_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReview_approved_note) {
            listener.exitReview_approved_note(this);
        }
    }
}
exports.Review_approved_noteContext = Review_approved_noteContext;
class ChecklistContext extends ParserRuleContext_1.ParserRuleContext {
    BitChecklist() { return this.getToken(bitmarkParser.BitChecklist, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_checklist; }
    // @Override
    enterRule(listener) {
        if (listener.enterChecklist) {
            listener.enterChecklist(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChecklist) {
            listener.exitChecklist(this);
        }
    }
}
exports.ChecklistContext = ChecklistContext;
class Video_transcriptContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoTranscript() { return this.getToken(bitmarkParser.BitVideoTranscript, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_transcript; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_transcript) {
            listener.enterVideo_transcript(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_transcript) {
            listener.exitVideo_transcript(this);
        }
    }
}
exports.Video_transcriptContext = Video_transcriptContext;
class Audio_transcriptContext extends ParserRuleContext_1.ParserRuleContext {
    BitAudioTranscript() { return this.getToken(bitmarkParser.BitAudioTranscript, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audio_transcript; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudio_transcript) {
            listener.enterAudio_transcript(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudio_transcript) {
            listener.exitAudio_transcript(this);
        }
    }
}
exports.Audio_transcriptContext = Audio_transcriptContext;
class Image_portraitContext extends ParserRuleContext_1.ParserRuleContext {
    BitImagePortrait() { return this.getToken(bitmarkParser.BitImagePortrait, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_portrait; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_portrait) {
            listener.enterImage_portrait(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_portrait) {
            listener.exitImage_portrait(this);
        }
    }
}
exports.Image_portraitContext = Image_portraitContext;
class Image_landscapeContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageLandscape() { return this.getToken(bitmarkParser.BitImageLandscape, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_landscape; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_landscape) {
            listener.enterImage_landscape(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_landscape) {
            listener.exitImage_landscape(this);
        }
    }
}
exports.Image_landscapeContext = Image_landscapeContext;
class Image_on_deviceContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageOnDevice() { return this.getToken(bitmarkParser.BitImageOnDevice, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_on_device; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_on_device) {
            listener.enterImage_on_device(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_on_device) {
            listener.exitImage_on_device(this);
        }
    }
}
exports.Image_on_deviceContext = Image_on_deviceContext;
class Bitmark_exampleContext extends ParserRuleContext_1.ParserRuleContext {
    BitBitmarkExample() { return this.getToken(bitmarkParser.BitBitmarkExample, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitmark_example; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitmark_example) {
            listener.enterBitmark_example(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitmark_example) {
            listener.exitBitmark_example(this);
        }
    }
}
exports.Bitmark_exampleContext = Bitmark_exampleContext;
class App_ai_promptContext extends ParserRuleContext_1.ParserRuleContext {
    BitAppAiPrompt() { return this.getToken(bitmarkParser.BitAppAiPrompt, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_ai_prompt; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_ai_prompt) {
            listener.enterApp_ai_prompt(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_ai_prompt) {
            listener.exitApp_ai_prompt(this);
        }
    }
}
exports.App_ai_promptContext = App_ai_promptContext;
class Book_linkContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookLink() { return this.getToken(bitmarkParser.BitBookLink, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_link; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_link) {
            listener.enterBook_link(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_link) {
            listener.exitBook_link(this);
        }
    }
}
exports.Book_linkContext = Book_linkContext;
class Book_link_nextContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookLinkNext() { return this.getToken(bitmarkParser.BitBookLinkNext, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_link_next; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_link_next) {
            listener.enterBook_link_next(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_link_next) {
            listener.exitBook_link_next(this);
        }
    }
}
exports.Book_link_nextContext = Book_link_nextContext;
class Book_link_prevContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookLinkPrev() { return this.getToken(bitmarkParser.BitBookLinkPrev, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_link_prev; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_link_prev) {
            listener.enterBook_link_prev(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_link_prev) {
            listener.exitBook_link_prev(this);
        }
    }
}
exports.Book_link_prevContext = Book_link_prevContext;
class FigureContext extends ParserRuleContext_1.ParserRuleContext {
    BitFigure() { return this.getToken(bitmarkParser.BitFigure, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_figure; }
    // @Override
    enterRule(listener) {
        if (listener.enterFigure) {
            listener.enterFigure(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFigure) {
            listener.exitFigure(this);
        }
    }
}
exports.FigureContext = FigureContext;
class Video_link_landscapeContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoLinkLandscape() { return this.getToken(bitmarkParser.BitVideoLinkLandscape, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_link_landscape; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_link_landscape) {
            listener.enterVideo_link_landscape(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_link_landscape) {
            listener.exitVideo_link_landscape(this);
        }
    }
}
exports.Video_link_landscapeContext = Video_link_landscapeContext;
class Video_link_portraitContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoLinkPortrait() { return this.getToken(bitmarkParser.BitVideoLinkPortrait, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_link_portrait; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_link_portrait) {
            listener.enterVideo_link_portrait(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_link_portrait) {
            listener.exitVideo_link_portrait(this);
        }
    }
}
exports.Video_link_portraitContext = Video_link_portraitContext;
class Image_moodContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageMood() { return this.getToken(bitmarkParser.BitImageMood, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_mood; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_mood) {
            listener.enterImage_mood(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_mood) {
            listener.exitImage_mood(this);
        }
    }
}
exports.Image_moodContext = Image_moodContext;
class Image_figureContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageFigure() { return this.getToken(bitmarkParser.BitImageFigure, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_figure; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_figure) {
            listener.enterImage_figure(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_figure) {
            listener.exitImage_figure(this);
        }
    }
}
exports.Image_figureContext = Image_figureContext;
class Image_bannerContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageBanner() { return this.getToken(bitmarkParser.BitImageBanner, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_banner; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_banner) {
            listener.enterImage_banner(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_banner) {
            listener.exitImage_banner(this);
        }
    }
}
exports.Image_bannerContext = Image_bannerContext;
class Image_styledContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageStyled() { return this.getToken(bitmarkParser.BitImageStyled, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_styled; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_styled) {
            listener.enterImage_styled(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_styled) {
            listener.exitImage_styled(this);
        }
    }
}
exports.Image_styledContext = Image_styledContext;
class Image_screenshotContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageScreenshot() { return this.getToken(bitmarkParser.BitImageScreenshot, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_screenshot; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_screenshot) {
            listener.enterImage_screenshot(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_screenshot) {
            listener.exitImage_screenshot(this);
        }
    }
}
exports.Image_screenshotContext = Image_screenshotContext;
class App_get_screenshotContext extends ParserRuleContext_1.ParserRuleContext {
    BitAppGetScreenshot() { return this.getToken(bitmarkParser.BitAppGetScreenshot, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_get_screenshot; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_get_screenshot) {
            listener.enterApp_get_screenshot(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_get_screenshot) {
            listener.exitApp_get_screenshot(this);
        }
    }
}
exports.App_get_screenshotContext = App_get_screenshotContext;
class App_create_bits_from_imageContext extends ParserRuleContext_1.ParserRuleContext {
    BitAppCreateBitsFromImage() { return this.getToken(bitmarkParser.BitAppCreateBitsFromImage, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_create_bits_from_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_create_bits_from_image) {
            listener.enterApp_create_bits_from_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_create_bits_from_image) {
            listener.exitApp_create_bits_from_image(this);
        }
    }
}
exports.App_create_bits_from_imageContext = App_create_bits_from_imageContext;
class Life_skill_stickerContext extends ParserRuleContext_1.ParserRuleContext {
    BitLifeSkillSticker() { return this.getToken(bitmarkParser.BitLifeSkillSticker, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_life_skill_sticker; }
    // @Override
    enterRule(listener) {
        if (listener.enterLife_skill_sticker) {
            listener.enterLife_skill_sticker(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLife_skill_sticker) {
            listener.exitLife_skill_sticker(this);
        }
    }
}
exports.Life_skill_stickerContext = Life_skill_stickerContext;
class Details_imageContext extends ParserRuleContext_1.ParserRuleContext {
    BitDetailsImage() { return this.getToken(bitmarkParser.BitDetailsImage, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_details_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterDetails_image) {
            listener.enterDetails_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDetails_image) {
            listener.exitDetails_image(this);
        }
    }
}
exports.Details_imageContext = Details_imageContext;
class Page_bannerContext extends ParserRuleContext_1.ParserRuleContext {
    BitPageBanner() { return this.getToken(bitmarkParser.BitPageBanner, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_page_banner; }
    // @Override
    enterRule(listener) {
        if (listener.enterPage_banner) {
            listener.enterPage_banner(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPage_banner) {
            listener.exitPage_banner(this);
        }
    }
}
exports.Page_bannerContext = Page_bannerContext;
class Page_buy_buttonContext extends ParserRuleContext_1.ParserRuleContext {
    BitPageBuyButton() { return this.getToken(bitmarkParser.BitPageBuyButton, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_page_buy_button; }
    // @Override
    enterRule(listener) {
        if (listener.enterPage_buy_button) {
            listener.enterPage_buy_button(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPage_buy_button) {
            listener.exitPage_buy_button(this);
        }
    }
}
exports.Page_buy_buttonContext = Page_buy_buttonContext;
class Image_render_svgContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageRenderSvg() { return this.getToken(bitmarkParser.BitImageRenderSvg, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_render_svg; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_render_svg) {
            listener.enterImage_render_svg(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_render_svg) {
            listener.exitImage_render_svg(this);
        }
    }
}
exports.Image_render_svgContext = Image_render_svgContext;
class Vendor_jsfiddleContext extends ParserRuleContext_1.ParserRuleContext {
    BitVendorJsfiddle() { return this.getToken(bitmarkParser.BitVendorJsfiddle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_jsfiddle; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_jsfiddle) {
            listener.enterVendor_jsfiddle(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_jsfiddle) {
            listener.exitVendor_jsfiddle(this);
        }
    }
}
exports.Vendor_jsfiddleContext = Vendor_jsfiddleContext;
class Vendor_jsfiddle_embedContext extends ParserRuleContext_1.ParserRuleContext {
    BitVendorJsfiddleEmbed() { return this.getToken(bitmarkParser.BitVendorJsfiddleEmbed, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_jsfiddle_embed; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_jsfiddle_embed) {
            listener.enterVendor_jsfiddle_embed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_jsfiddle_embed) {
            listener.exitVendor_jsfiddle_embed(this);
        }
    }
}
exports.Vendor_jsfiddle_embedContext = Vendor_jsfiddle_embedContext;
class App_code_editorContext extends ParserRuleContext_1.ParserRuleContext {
    BitAppCodeEditor() { return this.getToken(bitmarkParser.BitAppCodeEditor, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_code_editor; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_code_editor) {
            listener.enterApp_code_editor(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_code_editor) {
            listener.exitApp_code_editor(this);
        }
    }
}
exports.App_code_editorContext = App_code_editorContext;
class App_code_ideContext extends ParserRuleContext_1.ParserRuleContext {
    BitAppCodeIde() { return this.getToken(bitmarkParser.BitAppCodeIde, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_code_ide; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_code_ide) {
            listener.enterApp_code_ide(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_code_ide) {
            listener.exitApp_code_ide(this);
        }
    }
}
exports.App_code_ideContext = App_code_ideContext;
class Code_runtimeContext extends ParserRuleContext_1.ParserRuleContext {
    BitCodeRuntime() { return this.getToken(bitmarkParser.BitCodeRuntime, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_code_runtime; }
    // @Override
    enterRule(listener) {
        if (listener.enterCode_runtime) {
            listener.enterCode_runtime(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCode_runtime) {
            listener.exitCode_runtime(this);
        }
    }
}
exports.Code_runtimeContext = Code_runtimeContext;
class OutputContext extends ParserRuleContext_1.ParserRuleContext {
    BitOutput() { return this.getToken(bitmarkParser.BitOutput, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_output; }
    // @Override
    enterRule(listener) {
        if (listener.enterOutput) {
            listener.enterOutput(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOutput) {
            listener.exitOutput(this);
        }
    }
}
exports.OutputContext = OutputContext;
class Console_logContext extends ParserRuleContext_1.ParserRuleContext {
    BitConsoleLog() { return this.getToken(bitmarkParser.BitConsoleLog, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_console_log; }
    // @Override
    enterRule(listener) {
        if (listener.enterConsole_log) {
            listener.enterConsole_log(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConsole_log) {
            listener.exitConsole_log(this);
        }
    }
}
exports.Console_logContext = Console_logContext;
class Vendor_jupyter_cell_codeContext extends ParserRuleContext_1.ParserRuleContext {
    BitVenderJupyterCellCode() { return this.getToken(bitmarkParser.BitVenderJupyterCellCode, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_jupyter_cell_code; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_jupyter_cell_code) {
            listener.enterVendor_jupyter_cell_code(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_jupyter_cell_code) {
            listener.exitVendor_jupyter_cell_code(this);
        }
    }
}
exports.Vendor_jupyter_cell_codeContext = Vendor_jupyter_cell_codeContext;
class Vendor_jupyter_cell_rawContext extends ParserRuleContext_1.ParserRuleContext {
    BitVenderJupyterCellRaw() { return this.getToken(bitmarkParser.BitVenderJupyterCellRaw, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_jupyter_cell_raw; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_jupyter_cell_raw) {
            listener.enterVendor_jupyter_cell_raw(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_jupyter_cell_raw) {
            listener.exitVendor_jupyter_cell_raw(this);
        }
    }
}
exports.Vendor_jupyter_cell_rawContext = Vendor_jupyter_cell_rawContext;
class Vendor_jupyter_outputContext extends ParserRuleContext_1.ParserRuleContext {
    BitVenderJupyterOutput() { return this.getToken(bitmarkParser.BitVenderJupyterOutput, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_jupyter_output; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_jupyter_output) {
            listener.enterVendor_jupyter_output(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_jupyter_output) {
            listener.exitVendor_jupyter_output(this);
        }
    }
}
exports.Vendor_jupyter_outputContext = Vendor_jupyter_outputContext;
class Vendor_jupyter_cell_markdownContext extends ParserRuleContext_1.ParserRuleContext {
    BitVenderJupyterCellMarkdown() { return this.getToken(bitmarkParser.BitVenderJupyterCellMarkdown, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_jupyter_cell_markdown; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_jupyter_cell_markdown) {
            listener.enterVendor_jupyter_cell_markdown(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_jupyter_cell_markdown) {
            listener.exitVendor_jupyter_cell_markdown(this);
        }
    }
}
exports.Vendor_jupyter_cell_markdownContext = Vendor_jupyter_cell_markdownContext;
class Vendor_jupyter_ipynbContext extends ParserRuleContext_1.ParserRuleContext {
    BitVenderJupyterIpynb() { return this.getToken(bitmarkParser.BitVenderJupyterIpynb, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_jupyter_ipynb; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_jupyter_ipynb) {
            listener.enterVendor_jupyter_ipynb(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_jupyter_ipynb) {
            listener.exitVendor_jupyter_ipynb(this);
        }
    }
}
exports.Vendor_jupyter_ipynbContext = Vendor_jupyter_ipynbContext;
class App_code_cellContext extends ParserRuleContext_1.ParserRuleContext {
    BitAppCodeCell() { return this.getToken(bitmarkParser.BitAppCodeCell, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_code_cell; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_code_cell) {
            listener.enterApp_code_cell(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_code_cell) {
            listener.exitApp_code_cell(this);
        }
    }
}
exports.App_code_cellContext = App_code_cellContext;
class StdoutContext extends ParserRuleContext_1.ParserRuleContext {
    BitStdout() { return this.getToken(bitmarkParser.BitStdout, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stdout; }
    // @Override
    enterRule(listener) {
        if (listener.enterStdout) {
            listener.enterStdout(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStdout) {
            listener.exitStdout(this);
        }
    }
}
exports.StdoutContext = StdoutContext;
class App_bitmark_from_javascriptContext extends ParserRuleContext_1.ParserRuleContext {
    BitAppBitmarkFromJavascript() { return this.getToken(bitmarkParser.BitAppBitmarkFromJavascript, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_bitmark_from_javascript; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_bitmark_from_javascript) {
            listener.enterApp_bitmark_from_javascript(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_bitmark_from_javascript) {
            listener.exitApp_bitmark_from_javascript(this);
        }
    }
}
exports.App_bitmark_from_javascriptContext = App_bitmark_from_javascriptContext;
class App_bitmark_from_editorContext extends ParserRuleContext_1.ParserRuleContext {
    BitAppBitmarkFromEditor() { return this.getToken(bitmarkParser.BitAppBitmarkFromEditor, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_bitmark_from_editor; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_bitmark_from_editor) {
            listener.enterApp_bitmark_from_editor(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_bitmark_from_editor) {
            listener.exitApp_bitmark_from_editor(this);
        }
    }
}
exports.App_bitmark_from_editorContext = App_bitmark_from_editorContext;
class Images_logo_graveContext extends ParserRuleContext_1.ParserRuleContext {
    BitImagesLogoGrave() { return this.getToken(bitmarkParser.BitImagesLogoGrave, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem_noResource(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElem_noResourceContext);
        }
        else {
            return this.getRuleContext(i, BitElem_noResourceContext);
        }
    }
    logo(i) {
        if (i === undefined) {
            return this.getRuleContexts(LogoContext);
        }
        else {
            return this.getRuleContext(i, LogoContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_images_logo_grave; }
    // @Override
    enterRule(listener) {
        if (listener.enterImages_logo_grave) {
            listener.enterImages_logo_grave(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImages_logo_grave) {
            listener.exitImages_logo_grave(this);
        }
    }
}
exports.Images_logo_graveContext = Images_logo_graveContext;
class LogoContext extends ParserRuleContext_1.ParserRuleContext {
    image_one() {
        return this.getRuleContext(0, Image_oneContext);
    }
    NL() { return this.getToken(bitmarkParser.NL, 0); }
    logo_attribs(i) {
        if (i === undefined) {
            return this.getRuleContexts(Logo_attribsContext);
        }
        else {
            return this.getRuleContext(i, Logo_attribsContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_logo; }
    // @Override
    enterRule(listener) {
        if (listener.enterLogo) {
            listener.enterLogo(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogo) {
            listener.exitLogo(this);
        }
    }
}
exports.LogoContext = LogoContext;
class Logo_attribsContext extends ParserRuleContext_1.ParserRuleContext {
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_logo_attribs; }
    // @Override
    enterRule(listener) {
        if (listener.enterLogo_attribs) {
            listener.enterLogo_attribs(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogo_attribs) {
            listener.exitLogo_attribs(this);
        }
    }
}
exports.Logo_attribsContext = Logo_attribsContext;
class Bot_choiceContext extends ParserRuleContext_1.ParserRuleContext {
    words(i) {
        if (i === undefined) {
            return this.getRuleContexts(WordsContext);
        }
        else {
            return this.getRuleContext(i, WordsContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    audiobit(i) {
        if (i === undefined) {
            return this.getRuleContexts(AudiobitContext);
        }
        else {
            return this.getRuleContext(i, AudiobitContext);
        }
    }
    gap(i) {
        if (i === undefined) {
            return this.getRuleContexts(GapContext);
        }
        else {
            return this.getRuleContext(i, GapContext);
        }
    }
    choice_plus(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_plusContext);
        }
        else {
            return this.getRuleContext(i, Choice_plusContext);
        }
    }
    choice_minus(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_minusContext);
        }
        else {
            return this.getRuleContext(i, Choice_minusContext);
        }
    }
    choice_star(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_starContext);
        }
        else {
            return this.getRuleContext(i, Choice_starContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_choice; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_choice) {
            listener.enterBot_choice(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_choice) {
            listener.exitBot_choice(this);
        }
    }
}
exports.Bot_choiceContext = Bot_choiceContext;
class RatingContext extends ParserRuleContext_1.ParserRuleContext {
    BitRating() { return this.getToken(bitmarkParser.BitRating, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_rating; }
    // @Override
    enterRule(listener) {
        if (listener.enterRating) {
            listener.enterRating(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRating) {
            listener.exitRating(this);
        }
    }
}
exports.RatingContext = RatingContext;
class Bullet_itemContext extends ParserRuleContext_1.ParserRuleContext {
    OPBUL() { return this.getToken(bitmarkParser.OPBUL, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    atpoint() {
        return this.tryGetRuleContext(0, AtpointContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bullet_item; }
    // @Override
    enterRule(listener) {
        if (listener.enterBullet_item) {
            listener.enterBullet_item(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBullet_item) {
            listener.exitBullet_item(this);
        }
    }
}
exports.Bullet_itemContext = Bullet_itemContext;
class SurveyContext extends ParserRuleContext_1.ParserRuleContext {
    BitSurvey() { return this.getToken(bitmarkParser.BitSurvey, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey) {
            listener.enterSurvey(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey) {
            listener.exitSurvey(this);
        }
    }
}
exports.SurveyContext = SurveyContext;
class Survey_1Context extends ParserRuleContext_1.ParserRuleContext {
    BitSurvey1() { return this.getToken(bitmarkParser.BitSurvey1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_1; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_1) {
            listener.enterSurvey_1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_1) {
            listener.exitSurvey_1(this);
        }
    }
}
exports.Survey_1Context = Survey_1Context;
class Survey_anonymousContext extends ParserRuleContext_1.ParserRuleContext {
    BitSurveyanon() { return this.getToken(bitmarkParser.BitSurveyanon, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_anonymous; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_anonymous) {
            listener.enterSurvey_anonymous(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_anonymous) {
            listener.exitSurvey_anonymous(this);
        }
    }
}
exports.Survey_anonymousContext = Survey_anonymousContext;
class Survey_anonymous_1Context extends ParserRuleContext_1.ParserRuleContext {
    BitSurveyanon1() { return this.getToken(bitmarkParser.BitSurveyanon1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_anonymous_1; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_anonymous_1) {
            listener.enterSurvey_anonymous_1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_anonymous_1) {
            listener.exitSurvey_anonymous_1(this);
        }
    }
}
exports.Survey_anonymous_1Context = Survey_anonymous_1Context;
class Self_assessmentContext extends ParserRuleContext_1.ParserRuleContext {
    BitSelfassess() { return this.getToken(bitmarkParser.BitSelfassess, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    self_assess_s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(Self_assess_s_and_wContext);
        }
        else {
            return this.getRuleContext(i, Self_assess_s_and_wContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_self_assessment; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelf_assessment) {
            listener.enterSelf_assessment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelf_assessment) {
            listener.exitSelf_assessment(this);
        }
    }
}
exports.Self_assessmentContext = Self_assessmentContext;
class Self_assess_s_and_wContext extends ParserRuleContext_1.ParserRuleContext {
    OPBUL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPBUL);
        }
        else {
            return this.getToken(bitmarkParser.OPBUL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_self_assess_s_and_w; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelf_assess_s_and_w) {
            listener.enterSelf_assess_s_and_w(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelf_assess_s_and_w) {
            listener.exitSelf_assess_s_and_w(this);
        }
    }
}
exports.Self_assess_s_and_wContext = Self_assess_s_and_wContext;
class AtpointContext extends ParserRuleContext_1.ParserRuleContext {
    AtPoints() { return this.getToken(bitmarkParser.AtPoints, 0); }
    NUMERIC() { return this.getToken(bitmarkParser.NUMERIC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atpoint; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtpoint) {
            listener.enterAtpoint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtpoint) {
            listener.exitAtpoint(this);
        }
    }
}
exports.AtpointContext = AtpointContext;
class FormatContext extends ParserRuleContext_1.ParserRuleContext {
    resource_format(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_formatContext);
        }
        else {
            return this.getRuleContext(i, Resource_formatContext);
        }
    }
    ColonText(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.ColonText);
        }
        else {
            return this.getToken(bitmarkParser.ColonText, i);
        }
    }
    ColonJson(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.ColonJson);
        }
        else {
            return this.getToken(bitmarkParser.ColonJson, i);
        }
    }
    resource_format_extra(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_format_extraContext);
        }
        else {
            return this.getRuleContext(i, Resource_format_extraContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormat) {
            listener.enterFormat(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormat) {
            listener.exitFormat(this);
        }
    }
}
exports.FormatContext = FormatContext;
class Resource_formatContext extends ParserRuleContext_1.ParserRuleContext {
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    Prosemirror() { return this.tryGetToken(bitmarkParser.Prosemirror, 0); }
    Placeholder() { return this.tryGetToken(bitmarkParser.Placeholder, 0); }
    ColonJson() { return this.tryGetToken(bitmarkParser.ColonJson, 0); }
    AmpArticle() { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
    AmpDocument() { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
    AmpWebsite() { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
    AmpStillImageFilm() { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
    AmpAudioLink() { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
    AmpImageLink() { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
    AmpVideoLink() { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
    AmpArticleLink() { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
    AmpDocumentLink() { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
    AmpAppLink() { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
    AmpWebsiteLink() { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
    AmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
    AmpVideoEmbed() { return this.tryGetToken(bitmarkParser.AmpVideoEmbed, 0); }
    AmpAudioEmbed() { return this.tryGetToken(bitmarkParser.AmpAudioEmbed, 0); }
    AmpDocumentEmbed() { return this.tryGetToken(bitmarkParser.AmpDocumentEmbed, 0); }
    AmpStillImageFilmEmbed() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmEmbed, 0); }
    AmpDocumentDownload() { return this.tryGetToken(bitmarkParser.AmpDocumentDownload, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_format) {
            listener.enterResource_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_format) {
            listener.exitResource_format(this);
        }
    }
}
exports.Resource_formatContext = Resource_formatContext;
class Resource_format_extraContext extends ParserRuleContext_1.ParserRuleContext {
    image_format() {
        return this.tryGetRuleContext(0, Image_formatContext);
    }
    audio_format() {
        return this.tryGetRuleContext(0, Audio_formatContext);
    }
    video_format() {
        return this.tryGetRuleContext(0, Video_formatContext);
    }
    article_format() {
        return this.tryGetRuleContext(0, Article_formatContext);
    }
    document_format() {
        return this.tryGetRuleContext(0, Document_formatContext);
    }
    app_format() {
        return this.tryGetRuleContext(0, App_formatContext);
    }
    website_format() {
        return this.tryGetRuleContext(0, Website_formatContext);
    }
    stillimagefilm_format() {
        return this.tryGetRuleContext(0, Stillimagefilm_formatContext);
    }
    AmpPdf() { return this.tryGetToken(bitmarkParser.AmpPdf, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_format_extra; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_format_extra) {
            listener.enterResource_format_extra(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_format_extra) {
            listener.exitResource_format_extra(this);
        }
    }
}
exports.Resource_format_extraContext = Resource_format_extraContext;
class Format2Context extends ParserRuleContext_1.ParserRuleContext {
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    ColonText() { return this.tryGetToken(bitmarkParser.ColonText, 0); }
    Placeholder() { return this.tryGetToken(bitmarkParser.Placeholder, 0); }
    ColonJson() { return this.tryGetToken(bitmarkParser.ColonJson, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_format2; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormat2) {
            listener.enterFormat2(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormat2) {
            listener.exitFormat2(this);
        }
    }
}
exports.Format2Context = Format2Context;
class Image_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpImage() { return this.tryGetToken(bitmarkParser.AmpImage, 0); }
    Image_type() { return this.tryGetToken(bitmarkParser.Image_type, 0); }
    DotArticleAtt() { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
    AmpImageLink() { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
    AmpImageZoom() { return this.tryGetToken(bitmarkParser.AmpImageZoom, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_format) {
            listener.enterImage_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_format) {
            listener.exitImage_format(this);
        }
    }
}
exports.Image_formatContext = Image_formatContext;
class Video_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpVideo() { return this.tryGetToken(bitmarkParser.AmpVideo, 0); }
    AmpVideoLink() { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
    AmpVideoEmbed() { return this.tryGetToken(bitmarkParser.AmpVideoEmbed, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Video_type() { return this.tryGetToken(bitmarkParser.Video_type, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_format) {
            listener.enterVideo_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_format) {
            listener.exitVideo_format(this);
        }
    }
}
exports.Video_formatContext = Video_formatContext;
class Article_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpArticle() { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
    AmpArticleLink() { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_article_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticle_format) {
            listener.enterArticle_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticle_format) {
            listener.exitArticle_format(this);
        }
    }
}
exports.Article_formatContext = Article_formatContext;
class Document_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpDocument() { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
    AmpDocumentLink() { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
    AmpDocumentDownload() { return this.tryGetToken(bitmarkParser.AmpDocumentDownload, 0); }
    AmpDocumentEmbed() { return this.tryGetToken(bitmarkParser.AmpDocumentEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_document_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterDocument_format) {
            listener.enterDocument_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDocument_format) {
            listener.exitDocument_format(this);
        }
    }
}
exports.Document_formatContext = Document_formatContext;
class App_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpApp() { return this.tryGetToken(bitmarkParser.AmpApp, 0); }
    AmpAppLink() { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_format) {
            listener.enterApp_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_format) {
            listener.exitApp_format(this);
        }
    }
}
exports.App_formatContext = App_formatContext;
class Website_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpWebsite() { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
    AmpWebsiteLink() { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_website_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterWebsite_format) {
            listener.enterWebsite_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWebsite_format) {
            listener.exitWebsite_format(this);
        }
    }
}
exports.Website_formatContext = Website_formatContext;
class Stillimagefilm_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpStillImageFilm() { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
    AmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
    AmpStillImageFilmEmbed() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimagefilm_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimagefilm_format) {
            listener.enterStillimagefilm_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimagefilm_format) {
            listener.exitStillimagefilm_format(this);
        }
    }
}
exports.Stillimagefilm_formatContext = Stillimagefilm_formatContext;
class Op_article_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpArticleLink() { return this.tryGetToken(bitmarkParser.OpAmpArticleLink, 0); }
    OpAmpArticle() { return this.tryGetToken(bitmarkParser.OpAmpArticle, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_article_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_article_format) {
            listener.enterOp_article_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_article_format) {
            listener.exitOp_article_format(this);
        }
    }
}
exports.Op_article_formatContext = Op_article_formatContext;
class Op_document_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpDocumentLink() { return this.tryGetToken(bitmarkParser.OpAmpDocumentLink, 0); }
    OpAmpDocument() { return this.tryGetToken(bitmarkParser.OpAmpDocument, 0); }
    OpAmpDocumentDownload() { return this.tryGetToken(bitmarkParser.OpAmpDocumentDownload, 0); }
    OpAmpDocumentEmbed() { return this.tryGetToken(bitmarkParser.OpAmpDocumentEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_document_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_document_format) {
            listener.enterOp_document_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_document_format) {
            listener.exitOp_document_format(this);
        }
    }
}
exports.Op_document_formatContext = Op_document_formatContext;
class Op_app_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpApp() { return this.tryGetToken(bitmarkParser.OpAmpApp, 0); }
    OpAmpAppLink() { return this.tryGetToken(bitmarkParser.OpAmpAppLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_app_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_app_format) {
            listener.enterOp_app_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_app_format) {
            listener.exitOp_app_format(this);
        }
    }
}
exports.Op_app_formatContext = Op_app_formatContext;
class Op_website_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpWebsite() { return this.tryGetToken(bitmarkParser.OpAmpWebsite, 0); }
    OpAmpWebsiteLink() { return this.tryGetToken(bitmarkParser.OpAmpWebsiteLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_website_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_website_format) {
            listener.enterOp_website_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_website_format) {
            listener.exitOp_website_format(this);
        }
    }
}
exports.Op_website_formatContext = Op_website_formatContext;
class Op_video_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpVideo() { return this.tryGetToken(bitmarkParser.OpAmpVideo, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Video_type() { return this.tryGetToken(bitmarkParser.Video_type, 0); }
    OpAmpVideoLink() { return this.tryGetToken(bitmarkParser.OpAmpVideoLink, 0); }
    OpAmpVideoEmbed() { return this.tryGetToken(bitmarkParser.OpAmpVideoEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_video_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_video_format) {
            listener.enterOp_video_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_video_format) {
            listener.exitOp_video_format(this);
        }
    }
}
exports.Op_video_formatContext = Op_video_formatContext;
class Op_stillimagefilm_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpStillImageFilm() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilm, 0); }
    OpAmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmLink, 0); }
    OpAmpStillImageFilmEmbed() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_stillimagefilm_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_stillimagefilm_format) {
            listener.enterOp_stillimagefilm_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_stillimagefilm_format) {
            listener.exitOp_stillimagefilm_format(this);
        }
    }
}
exports.Op_stillimagefilm_formatContext = Op_stillimagefilm_formatContext;
class ArticlebitContext extends ParserRuleContext_1.ParserRuleContext {
    op_article_format() {
        return this.tryGetRuleContext(0, Op_article_formatContext);
    }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    ArticleText() { return this.tryGetToken(bitmarkParser.ArticleText, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_articlebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticlebit) {
            listener.enterArticlebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticlebit) {
            listener.exitArticlebit(this);
        }
    }
}
exports.ArticlebitContext = ArticlebitContext;
class DocumentbitContext extends ParserRuleContext_1.ParserRuleContext {
    op_document_format() {
        return this.getRuleContext(0, Op_document_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_documentbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterDocumentbit) {
            listener.enterDocumentbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDocumentbit) {
            listener.exitDocumentbit(this);
        }
    }
}
exports.DocumentbitContext = DocumentbitContext;
class WebsitebitContext extends ParserRuleContext_1.ParserRuleContext {
    op_website_format() {
        return this.getRuleContext(0, Op_website_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_websitebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterWebsitebit) {
            listener.enterWebsitebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWebsitebit) {
            listener.exitWebsitebit(this);
        }
    }
}
exports.WebsitebitContext = WebsitebitContext;
class AppbitContext extends ParserRuleContext_1.ParserRuleContext {
    op_app_format() {
        return this.getRuleContext(0, Op_app_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    telephone() {
        return this.tryGetRuleContext(0, TelephoneContext);
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_appbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterAppbit) {
            listener.enterAppbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAppbit) {
            listener.exitAppbit(this);
        }
    }
}
exports.AppbitContext = AppbitContext;
class StillimagefilmbitContext extends ParserRuleContext_1.ParserRuleContext {
    stillimg_one() {
        return this.getRuleContext(0, Stillimg_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimagefilmbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimagefilmbit) {
            listener.enterStillimagefilmbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimagefilmbit) {
            listener.exitStillimagefilmbit(this);
        }
    }
}
exports.StillimagefilmbitContext = StillimagefilmbitContext;
class Stillimg_oneContext extends ParserRuleContext_1.ParserRuleContext {
    op_stillimagefilm_format() {
        return this.getRuleContext(0, Op_stillimagefilm_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimg_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimg_one) {
            listener.enterStillimg_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimg_one) {
            listener.exitStillimg_one(this);
        }
    }
}
exports.Stillimg_oneContext = Stillimg_oneContext;
class VideobitContext extends ParserRuleContext_1.ParserRuleContext {
    video_one() {
        return this.getRuleContext(0, Video_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_videobit; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideobit) {
            listener.enterVideobit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideobit) {
            listener.exitVideobit(this);
        }
    }
}
exports.VideobitContext = VideobitContext;
class Video_oneContext extends ParserRuleContext_1.ParserRuleContext {
    op_video_format() {
        return this.getRuleContext(0, Op_video_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_one) {
            listener.enterVideo_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_one) {
            listener.exitVideo_one(this);
        }
    }
}
exports.Video_oneContext = Video_oneContext;
class ImagebitContext extends ParserRuleContext_1.ParserRuleContext {
    image_one() {
        return this.getRuleContext(0, Image_oneContext);
    }
    image_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Image_chainedContext);
        }
        else {
            return this.getRuleContext(i, Image_chainedContext);
        }
    }
    NL() { return this.tryGetToken(bitmarkParser.NL, 0); }
    ShowInIndex() { return this.tryGetToken(bitmarkParser.ShowInIndex, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_imagebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterImagebit) {
            listener.enterImagebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImagebit) {
            listener.exitImagebit(this);
        }
    }
}
exports.ImagebitContext = ImagebitContext;
class Image_oneContext extends ParserRuleContext_1.ParserRuleContext {
    op_image_format() {
        return this.getRuleContext(0, Op_image_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_one) {
            listener.enterImage_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_one) {
            listener.exitImage_one(this);
        }
    }
}
exports.Image_oneContext = Image_oneContext;
class Op_image_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpImage() { return this.tryGetToken(bitmarkParser.OpAmpImage, 0); }
    Image_type() { return this.tryGetToken(bitmarkParser.Image_type, 0); }
    DotArticleAtt() { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
    OpAmpImageLink() { return this.tryGetToken(bitmarkParser.OpAmpImageLink, 0); }
    OpAmpImageZoom() { return this.tryGetToken(bitmarkParser.OpAmpImageZoom, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_image_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_image_format) {
            listener.enterOp_image_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_image_format) {
            listener.exitOp_image_format(this);
        }
    }
}
exports.Op_image_formatContext = Op_image_formatContext;
class Image_chainedContext extends ParserRuleContext_1.ParserRuleContext {
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_chained) {
            listener.enterImage_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_chained) {
            listener.exitImage_chained(this);
        }
    }
}
exports.Image_chainedContext = Image_chainedContext;
class Image_chained4matchContext extends ParserRuleContext_1.ParserRuleContext {
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_chained4match; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_chained4match) {
            listener.enterImage_chained4match(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_chained4match) {
            listener.exitImage_chained4match(this);
        }
    }
}
exports.Image_chained4matchContext = Image_chained4matchContext;
class AudiobitContext extends ParserRuleContext_1.ParserRuleContext {
    audio_one() {
        return this.getRuleContext(0, Audio_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audiobit; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudiobit) {
            listener.enterAudiobit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudiobit) {
            listener.exitAudiobit(this);
        }
    }
}
exports.AudiobitContext = AudiobitContext;
class Audio_oneContext extends ParserRuleContext_1.ParserRuleContext {
    op_audio_format() {
        return this.getRuleContext(0, Op_audio_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audio_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudio_one) {
            listener.enterAudio_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudio_one) {
            listener.exitAudio_one(this);
        }
    }
}
exports.Audio_oneContext = Audio_oneContext;
class Audio_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpAudio() { return this.tryGetToken(bitmarkParser.AmpAudio, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Audio_type() { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
    AmpAudioLink() { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audio_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudio_format) {
            listener.enterAudio_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudio_format) {
            listener.exitAudio_format(this);
        }
    }
}
exports.Audio_formatContext = Audio_formatContext;
class Op_audio_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpAudio() { return this.tryGetToken(bitmarkParser.OpAmpAudio, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Audio_type() { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
    OpAmpAudioLink() { return this.tryGetToken(bitmarkParser.OpAmpAudioLink, 0); }
    OpAmpAudioEmbed() { return this.tryGetToken(bitmarkParser.OpAmpAudioEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_audio_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_audio_format) {
            listener.enterOp_audio_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_audio_format) {
            listener.exitOp_audio_format(this);
        }
    }
}
exports.Op_audio_formatContext = Op_audio_formatContext;
class Resource_chainedContext extends ParserRuleContext_1.ParserRuleContext {
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    OPA() { return this.tryGetToken(bitmarkParser.OPA, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_chained) {
            listener.enterResource_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_chained) {
            listener.exitResource_chained(this);
        }
    }
}
exports.Resource_chainedContext = Resource_chainedContext;
class TelephoneContext extends ParserRuleContext_1.ParserRuleContext {
    TEL() { return this.getToken(bitmarkParser.TEL, 0); }
    PLUS() { return this.getToken(bitmarkParser.PLUS, 0); }
    NUMERIC() { return this.getToken(bitmarkParser.NUMERIC, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_telephone; }
    // @Override
    enterRule(listener) {
        if (listener.enterTelephone) {
            listener.enterTelephone(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTelephone) {
            listener.exitTelephone(this);
        }
    }
}
exports.TelephoneContext = TelephoneContext;
class UrlContext extends ParserRuleContext_1.ParserRuleContext {
    URL() { return this.getToken(bitmarkParser.URL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_url; }
    // @Override
    enterRule(listener) {
        if (listener.enterUrl) {
            listener.enterUrl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUrl) {
            listener.exitUrl(this);
        }
    }
}
exports.UrlContext = UrlContext;
class ItemContext extends ParserRuleContext_1.ParserRuleContext {
    OPC() { return this.getToken(bitmarkParser.OPC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    lead() {
        return this.tryGetRuleContext(0, LeadContext);
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_item; }
    // @Override
    enterRule(listener) {
        if (listener.enterItem) {
            listener.enterItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitItem) {
            listener.exitItem(this);
        }
    }
}
exports.ItemContext = ItemContext;
class LeadContext extends ParserRuleContext_1.ParserRuleContext {
    OPC() { return this.getToken(bitmarkParser.OPC, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lead; }
    // @Override
    enterRule(listener) {
        if (listener.enterLead) {
            listener.enterLead(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLead) {
            listener.exitLead(this);
        }
    }
}
exports.LeadContext = LeadContext;
class AnglerefContext extends ParserRuleContext_1.ParserRuleContext {
    OPRANGLES() { return this.tryGetToken(bitmarkParser.OPRANGLES, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    OPRANGLEL() { return this.tryGetToken(bitmarkParser.OPRANGLEL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_angleref; }
    // @Override
    enterRule(listener) {
        if (listener.enterAngleref) {
            listener.enterAngleref(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAngleref) {
            listener.exitAngleref(this);
        }
    }
}
exports.AnglerefContext = AnglerefContext;
class ExampleContext extends ParserRuleContext_1.ParserRuleContext {
    AtExamplecl() { return this.tryGetToken(bitmarkParser.AtExamplecl, 0); }
    AtExampleWithStr() { return this.tryGetToken(bitmarkParser.AtExampleWithStr, 0); }
    AtExamplecol() { return this.tryGetToken(bitmarkParser.AtExamplecol, 0); }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    SENTENCE() { return this.tryGetToken(bitmarkParser.SENTENCE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_example; }
    // @Override
    enterRule(listener) {
        if (listener.enterExample) {
            listener.enterExample(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExample) {
            listener.exitExample(this);
        }
    }
}
exports.ExampleContext = ExampleContext;
class Bracketed_textContext extends ParserRuleContext_1.ParserRuleContext {
    BracEnclose() { return this.getToken(bitmarkParser.BracEnclose, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bracketed_text; }
    // @Override
    enterRule(listener) {
        if (listener.enterBracketed_text) {
            listener.enterBracketed_text(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBracketed_text) {
            listener.exitBracketed_text(this);
        }
    }
}
exports.Bracketed_textContext = Bracketed_textContext;
class ReferenceContext extends ParserRuleContext_1.ParserRuleContext {
    AtReference() { return this.getToken(bitmarkParser.AtReference, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    URL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.URL);
        }
        else {
            return this.getToken(bitmarkParser.URL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_reference; }
    // @Override
    enterRule(listener) {
        if (listener.enterReference) {
            listener.enterReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReference) {
            listener.exitReference(this);
        }
    }
}
exports.ReferenceContext = ReferenceContext;
class ProgressContext extends ParserRuleContext_1.ParserRuleContext {
    AtProgress() { return this.getToken(bitmarkParser.AtProgress, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_progress; }
    // @Override
    enterRule(listener) {
        if (listener.enterProgress) {
            listener.enterProgress(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProgress) {
            listener.exitProgress(this);
        }
    }
}
exports.ProgressContext = ProgressContext;
class DatepropContext extends ParserRuleContext_1.ParserRuleContext {
    AtDate() { return this.getToken(bitmarkParser.AtDate, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    dateprop_chained() {
        return this.tryGetRuleContext(0, Dateprop_chainedContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dateprop; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateprop) {
            listener.enterDateprop(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateprop) {
            listener.exitDateprop(this);
        }
    }
}
exports.DatepropContext = DatepropContext;
class Dateprop_chainedContext extends ParserRuleContext_1.ParserRuleContext {
    AtDate() { return this.getToken(bitmarkParser.AtDate, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dateprop_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateprop_chained) {
            listener.enterDateprop_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateprop_chained) {
            listener.exitDateprop_chained(this);
        }
    }
}
exports.Dateprop_chainedContext = Dateprop_chainedContext;
class InstructionContext extends ParserRuleContext_1.ParserRuleContext {
    OPB() { return this.getToken(bitmarkParser.OPB, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_instruction; }
    // @Override
    enterRule(listener) {
        if (listener.enterInstruction) {
            listener.enterInstruction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInstruction) {
            listener.exitInstruction(this);
        }
    }
}
exports.InstructionContext = InstructionContext;
class HintContext extends ParserRuleContext_1.ParserRuleContext {
    OPQ() { return this.getToken(bitmarkParser.OPQ, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_hint; }
    // @Override
    enterRule(listener) {
        if (listener.enterHint) {
            listener.enterHint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHint) {
            listener.exitHint(this);
        }
    }
}
exports.HintContext = HintContext;
class TitleContext extends ParserRuleContext_1.ParserRuleContext {
    OPHASH() { return this.getToken(bitmarkParser.OPHASH, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_title; }
    // @Override
    enterRule(listener) {
        if (listener.enterTitle) {
            listener.enterTitle(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTitle) {
            listener.exitTitle(this);
        }
    }
}
exports.TitleContext = TitleContext;
class Bool_labelContext extends ParserRuleContext_1.ParserRuleContext {
    AtLabeltrue() { return this.tryGetToken(bitmarkParser.AtLabeltrue, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    AtLabelfalse() { return this.tryGetToken(bitmarkParser.AtLabelfalse, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bool_label; }
    // @Override
    enterRule(listener) {
        if (listener.enterBool_label) {
            listener.enterBool_label(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBool_label) {
            listener.exitBool_label(this);
        }
    }
}
exports.Bool_labelContext = Bool_labelContext;
class Progress_pointsContext extends ParserRuleContext_1.ParserRuleContext {
    AtProgressPoints() { return this.getToken(bitmarkParser.AtProgressPoints, 0); }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_progress_points; }
    // @Override
    enterRule(listener) {
        if (listener.enterProgress_points) {
            listener.enterProgress_points(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProgress_points) {
            listener.exitProgress_points(this);
        }
    }
}
exports.Progress_pointsContext = Progress_pointsContext;
class IstrackedContext extends ParserRuleContext_1.ParserRuleContext {
    OpAtIsTracked() { return this.getToken(bitmarkParser.OpAtIsTracked, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_istracked; }
    // @Override
    enterRule(listener) {
        if (listener.enterIstracked) {
            listener.enterIstracked(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIstracked) {
            listener.exitIstracked(this);
        }
    }
}
exports.IstrackedContext = IstrackedContext;
class IsinfoonlyContext extends ParserRuleContext_1.ParserRuleContext {
    OpAtIsInfoOnly() { return this.getToken(bitmarkParser.OpAtIsInfoOnly, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_isinfoonly; }
    // @Override
    enterRule(listener) {
        if (listener.enterIsinfoonly) {
            listener.enterIsinfoonly(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIsinfoonly) {
            listener.exitIsinfoonly(this);
        }
    }
}
exports.IsinfoonlyContext = IsinfoonlyContext;
class AtdefContext extends ParserRuleContext_1.ParserRuleContext {
    atdef_(i) {
        if (i === undefined) {
            return this.getRuleContexts(Atdef_Context);
        }
        else {
            return this.getRuleContext(i, Atdef_Context);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atdef; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtdef) {
            listener.enterAtdef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtdef) {
            listener.exitAtdef(this);
        }
    }
}
exports.AtdefContext = AtdefContext;
class Atdef_Context extends ParserRuleContext_1.ParserRuleContext {
    OPA() { return this.tryGetToken(bitmarkParser.OPA, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    DBLCOLON() { return this.tryGetToken(bitmarkParser.DBLCOLON, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    AtSampleSolution() { return this.tryGetToken(bitmarkParser.AtSampleSolution, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atdef_; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtdef_) {
            listener.enterAtdef_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtdef_) {
            listener.exitAtdef_(this);
        }
    }
}
exports.Atdef_Context = Atdef_Context;
class DollaransContext extends ParserRuleContext_1.ParserRuleContext {
    OPDOLL() { return this.getToken(bitmarkParser.OPDOLL, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dollarans; }
    // @Override
    enterRule(listener) {
        if (listener.enterDollarans) {
            listener.enterDollarans(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDollarans) {
            listener.exitDollarans(this);
        }
    }
}
exports.DollaransContext = DollaransContext;
class AnchorContext extends ParserRuleContext_1.ParserRuleContext {
    OPDANGLE() { return this.getToken(bitmarkParser.OPDANGLE, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_anchor; }
    // @Override
    enterRule(listener) {
        if (listener.enterAnchor) {
            listener.enterAnchor(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAnchor) {
            listener.exitAnchor(this);
        }
    }
}
exports.AnchorContext = AnchorContext;
class LinesContext extends ParserRuleContext_1.ParserRuleContext {
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lines; }
    // @Override
    enterRule(listener) {
        if (listener.enterLines) {
            listener.enterLines(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLines) {
            listener.exitLines(this);
        }
    }
}
exports.LinesContext = LinesContext;
class S_and_wContext extends ParserRuleContext_1.ParserRuleContext {
    STRING() { return this.tryGetToken(bitmarkParser.STRING, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    OPS() { return this.tryGetToken(bitmarkParser.OPS, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    AMP() { return this.tryGetToken(bitmarkParser.AMP, 0); }
    DBLEQ() { return this.tryGetToken(bitmarkParser.DBLEQ, 0); }
    URL() { return this.tryGetToken(bitmarkParser.URL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_s_and_w; }
    // @Override
    enterRule(listener) {
        if (listener.enterS_and_w) {
            listener.enterS_and_w(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitS_and_w) {
            listener.exitS_and_w(this);
        }
    }
}
exports.S_and_wContext = S_and_wContext;
class DclinesContext extends ParserRuleContext_1.ParserRuleContext {
    DCANY() { return this.getToken(bitmarkParser.DCANY, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dclines; }
    // @Override
    enterRule(listener) {
        if (listener.enterDclines) {
            listener.enterDclines(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDclines) {
            listener.exitDclines(this);
        }
    }
}
exports.DclinesContext = DclinesContext;
class ClnspContext extends ParserRuleContext_1.ParserRuleContext {
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_clnsp; }
    // @Override
    enterRule(listener) {
        if (listener.enterClnsp) {
            listener.enterClnsp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitClnsp) {
            listener.exitClnsp(this);
        }
    }
}
exports.ClnspContext = ClnspContext;
class SsplContext extends ParserRuleContext_1.ParserRuleContext {
    SSPL() { return this.tryGetToken(bitmarkParser.SSPL, 0); }
    SSPL2() { return this.tryGetToken(bitmarkParser.SSPL2, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sspl; }
    // @Override
    enterRule(listener) {
        if (listener.enterSspl) {
            listener.enterSspl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSspl) {
            listener.exitSspl(this);
        }
    }
}
exports.SsplContext = SsplContext;
class WordsContext extends ParserRuleContext_1.ParserRuleContext {
    sentence(i) {
        if (i === undefined) {
            return this.getRuleContexts(SentenceContext);
        }
        else {
            return this.getRuleContext(i, SentenceContext);
        }
    }
    NOTBITMARK(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NOTBITMARK);
        }
        else {
            return this.getToken(bitmarkParser.NOTBITMARK, i);
        }
    }
    BARSTRING(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BARSTRING);
        }
        else {
            return this.getToken(bitmarkParser.BARSTRING, i);
        }
    }
    ELIPSIS(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.ELIPSIS);
        }
        else {
            return this.getToken(bitmarkParser.ELIPSIS, i);
        }
    }
    AMP(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AMP);
        }
        else {
            return this.getToken(bitmarkParser.AMP, i);
        }
    }
    Greater(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.Greater);
        }
        else {
            return this.getToken(bitmarkParser.Greater, i);
        }
    }
    Less(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.Less);
        }
        else {
            return this.getToken(bitmarkParser.Less, i);
        }
    }
    RightArrow(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.RightArrow);
        }
        else {
            return this.getToken(bitmarkParser.RightArrow, i);
        }
    }
    RightAngle(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.RightAngle);
        }
        else {
            return this.getToken(bitmarkParser.RightAngle, i);
        }
    }
    AmpArticle(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpArticle);
        }
        else {
            return this.getToken(bitmarkParser.AmpArticle, i);
        }
    }
    AmpArticleLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpArticleLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpArticleLink, i);
        }
    }
    AmpDocument(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpDocument);
        }
        else {
            return this.getToken(bitmarkParser.AmpDocument, i);
        }
    }
    AmpDocumentLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpDocumentLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpDocumentLink, i);
        }
    }
    AmpWebsite(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpWebsite);
        }
        else {
            return this.getToken(bitmarkParser.AmpWebsite, i);
        }
    }
    AmpWebsiteLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpWebsiteLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpWebsiteLink, i);
        }
    }
    AmpImage(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpImage);
        }
        else {
            return this.getToken(bitmarkParser.AmpImage, i);
        }
    }
    AmpImageLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpImageLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpImageLink, i);
        }
    }
    AmpAudio(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAudio);
        }
        else {
            return this.getToken(bitmarkParser.AmpAudio, i);
        }
    }
    AmpAudioLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAudioLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpAudioLink, i);
        }
    }
    AmpVideo(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpVideo);
        }
        else {
            return this.getToken(bitmarkParser.AmpVideo, i);
        }
    }
    AmpVideoLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpVideoLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpVideoLink, i);
        }
    }
    AmpApp(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpApp);
        }
        else {
            return this.getToken(bitmarkParser.AmpApp, i);
        }
    }
    AmpAppLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAppLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpAppLink, i);
        }
    }
    AmpStillImageFilm(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpStillImageFilm);
        }
        else {
            return this.getToken(bitmarkParser.AmpStillImageFilm, i);
        }
    }
    AmpStillImageFilmLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpStillImageFilmLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpStillImageFilmLink, i);
        }
    }
    BitmarkMinus(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BitmarkMinus);
        }
        else {
            return this.getToken(bitmarkParser.BitmarkMinus, i);
        }
    }
    BitmarkPlus(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BitmarkPlus);
        }
        else {
            return this.getToken(bitmarkParser.BitmarkPlus, i);
        }
    }
    QUOTE_INDEX(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.QUOTE_INDEX);
        }
        else {
            return this.getToken(bitmarkParser.QUOTE_INDEX, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_words; }
    // @Override
    enterRule(listener) {
        if (listener.enterWords) {
            listener.enterWords(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWords) {
            listener.exitWords(this);
        }
    }
}
exports.WordsContext = WordsContext;
class SpContext extends ParserRuleContext_1.ParserRuleContext {
    S() { return this.getToken(bitmarkParser.S, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sp; }
    // @Override
    enterRule(listener) {
        if (listener.enterSp) {
            listener.enterSp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSp) {
            listener.exitSp(this);
        }
    }
}
exports.SpContext = SpContext;
class SentenceContext extends ParserRuleContext_1.ParserRuleContext {
    SENTENCE() { return this.getToken(bitmarkParser.SENTENCE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sentence; }
    // @Override
    enterRule(listener) {
        if (listener.enterSentence) {
            listener.enterSentence(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSentence) {
            listener.exitSentence(this);
        }
    }
}
exports.SentenceContext = SentenceContext;
