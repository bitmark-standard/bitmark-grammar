// Generated from antlr/bitmark.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');
var bitmarkListener = require('./bitmarkListener').bitmarkListener;
var bitmarkVisitor = require('./bitmarkVisitor').bitmarkVisitor;

var grammarFileName = "bitmark.g4";

var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\3\u008e\u099a\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t",
    "\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20",
    "\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4",
    "\27\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35",
    "\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'",
    "\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61",
    "\t\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4",
    "8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C",
    "\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\t",
    "N\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY",
    "\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t",
    "d\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to",
    "\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4",
    "{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4",
    "\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085\t\u0085\4\u0086",
    "\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a",
    "\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f",
    "\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093\t\u0093",
    "\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098",
    "\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c",
    "\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1",
    "\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4\4\u00a5\t\u00a5",
    "\4\u00a6\t\u00a6\4\u00a7\t\u00a7\3\2\3\2\5\2\u0151\n\2\3\2\7\2\u0154",
    "\n\2\f\2\16\2\u0157\13\2\6\2\u0159\n\2\r\2\16\2\u015a\3\2\3\2\3\3\3",
    "\3\3\3\5\3\u0162\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4",
    "\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4",
    "\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4",
    "\3\4\3\4\3\4\5\4\u0195\n\4\3\5\3\5\3\5\5\5\u019a\n\5\3\5\5\5\u019d\n",
    "\5\3\5\3\5\7\5\u01a1\n\5\f\5\16\5\u01a4\13\5\3\5\3\5\3\6\3\6\3\6\3\6",
    "\5\6\u01ac\n\6\3\6\5\6\u01af\n\6\3\6\3\6\3\6\3\7\3\7\6\7\u01b6\n\7\r",
    "\7\16\7\u01b7\3\7\3\7\3\b\3\b\6\b\u01be\n\b\r\b\16\b\u01bf\3\b\3\b\3",
    "\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\5\13\u01d1\n\13",
    "\3\13\3\13\7\13\u01d5\n\13\f\13\16\13\u01d8\13\13\3\13\3\13\3\f\3\f",
    "\3\f\3\f\7\f\u01e0\n\f\f\f\16\f\u01e3\13\f\3\f\7\f\u01e6\n\f\f\f\16",
    "\f\u01e9\13\f\3\r\3\r\3\r\3\r\3\r\3\16\5\16\u01f1\n\16\3\16\3\16\3\16",
    "\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u01fc\n\16\3\16\3\16\7\16\u0200",
    "\n\16\f\16\16\16\u0203\13\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17",
    "\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3",
    "\21\3\21\7\21\u021c\n\21\f\21\16\21\u021f\13\21\3\21\3\21\7\21\u0223",
    "\n\21\f\21\16\21\u0226\13\21\6\21\u0228\n\21\r\21\16\21\u0229\3\22\3",
    "\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22",
    "\3\22\3\22\3\22\3\22\7\22\u023f\n\22\f\22\16\22\u0242\13\22\3\22\3\22",
    "\7\22\u0246\n\22\f\22\16\22\u0249\13\22\3\22\3\22\7\22\u024d\n\22\f",
    "\22\16\22\u0250\13\22\3\22\3\22\3\22\3\22\3\22\5\22\u0257\n\22\3\23",
    "\3\23\3\23\3\23\3\23\5\23\u025e\n\23\3\23\3\23\3\23\5\23\u0263\n\23",
    "\3\23\5\23\u0266\n\23\3\23\7\23\u0269\n\23\f\23\16\23\u026c\13\23\3",
    "\23\3\23\7\23\u0270\n\23\f\23\16\23\u0273\13\23\7\23\u0275\n\23\f\23",
    "\16\23\u0278\13\23\3\24\3\24\3\24\3\24\3\24\5\24\u027f\n\24\3\24\3\24",
    "\3\24\5\24\u0284\n\24\3\24\5\24\u0287\n\24\3\24\7\24\u028a\n\24\f\24",
    "\16\24\u028d\13\24\3\24\3\24\7\24\u0291\n\24\f\24\16\24\u0294\13\24",
    "\7\24\u0296\n\24\f\24\16\24\u0299\13\24\3\25\3\25\3\25\3\25\3\25\7\25",
    "\u02a0\n\25\f\25\16\25\u02a3\13\25\3\26\3\26\5\26\u02a7\n\26\3\26\3",
    "\26\3\26\3\26\5\26\u02ad\n\26\3\26\7\26\u02b0\n\26\f\26\16\26\u02b3",
    "\13\26\3\26\3\26\3\27\3\27\5\27\u02b9\n\27\3\27\3\27\3\27\3\27\7\27",
    "\u02bf\n\27\f\27\16\27\u02c2\13\27\3\27\7\27\u02c5\n\27\f\27\16\27\u02c8",
    "\13\27\7\27\u02ca\n\27\f\27\16\27\u02cd\13\27\3\27\3\27\3\30\3\30\5",
    "\30\u02d3\n\30\3\30\7\30\u02d6\n\30\f\30\16\30\u02d9\13\30\3\30\3\30",
    "\3\30\5\30\u02de\n\30\3\30\6\30\u02e1\n\30\r\30\16\30\u02e2\3\30\3\30",
    "\5\30\u02e7\n\30\3\30\7\30\u02ea\n\30\f\30\16\30\u02ed\13\30\3\31\3",
    "\31\3\31\5\31\u02f2\n\31\3\31\5\31\u02f5\n\31\3\31\3\31\3\31\3\31\5",
    "\31\u02fb\n\31\7\31\u02fd\n\31\f\31\16\31\u0300\13\31\3\32\3\32\6\32",
    "\u0304\n\32\r\32\16\32\u0305\3\32\3\32\3\33\3\33\6\33\u030c\n\33\r\33",
    "\16\33\u030d\3\33\3\33\3\34\3\34\6\34\u0314\n\34\r\34\16\34\u0315\3",
    "\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u0321\n\35\f\35\16",
    "\35\u0324\13\35\7\35\u0326\n\35\f\35\16\35\u0329\13\35\3\35\3\35\3\36",
    "\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0334\n\36\6\36\u0336\n\36\r\36",
    "\16\36\u0337\3\36\3\36\5\36\u033c\n\36\3\36\3\36\3\36\5\36\u0341\n\36",
    "\3\36\6\36\u0344\n\36\r\36\16\36\u0345\3\36\3\36\5\36\u034a\n\36\3\36",
    "\3\36\3\36\5\36\u034f\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0358",
    "\n\37\6\37\u035a\n\37\r\37\16\37\u035b\3\37\3\37\3 \3 \3 \3 \3 \3 \3",
    " \7 \u0367\n \f \16 \u036a\13 \6 \u036c\n \r \16 \u036d\3 \3 \5 \u0372",
    "\n \3 \3 \3 \5 \u0377\n \3 \3 \7 \u037b\n \f \16 \u037e\13 \6 \u0380",
    "\n \r \16 \u0381\3 \3 \5 \u0386\n \3 \3 \3 \5 \u038b\n \3!\3!\3!\3!",
    "\3!\3!\3!\7!\u0394\n!\f!\16!\u0397\13!\6!\u0399\n!\r!\16!\u039a\3!\5",
    "!\u039e\n!\3!\3!\3!\6!\u03a3\n!\r!\16!\u03a4\7!\u03a7\n!\f!\16!\u03aa",
    "\13!\3\"\5\"\u03ad\n\"\3\"\3\"\3#\5#\u03b2\n#\3#\3#\3$\3$\3$\3$\3%\3",
    "%\3%\5%\u03bd\n%\3%\3%\3%\7%\u03c2\n%\f%\16%\u03c5\13%\3&\3&\3&\3&\3",
    "&\7&\u03cc\n&\f&\16&\u03cf\13&\3&\3&\7&\u03d3\n&\f&\16&\u03d6\13&\3",
    "&\3&\7&\u03da\n&\f&\16&\u03dd\13&\6&\u03df\n&\r&\16&\u03e0\3\'\3\'\3",
    "\'\3\'\3\'\3\'\3\'\7\'\u03ea\n\'\f\'\16\'\u03ed\13\'\7\'\u03ef\n\'\f",
    "\'\16\'\u03f2\13\'\3\'\7\'\u03f5\n\'\f\'\16\'\u03f8\13\'\3\'\3\'\5\'",
    "\u03fc\n\'\7\'\u03fe\n\'\f\'\16\'\u0401\13\'\3\'\7\'\u0404\n\'\f\'\16",
    "\'\u0407\13\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\7\'\u0411\n\'\f\'\16\'",
    "\u0414\13\'\7\'\u0416\n\'\f\'\16\'\u0419\13\'\3\'\5\'\u041c\n\'\5\'",
    "\u041e\n\'\3(\3(\3(\3(\3(\3(\3(\5(\u0427\n(\3(\7(\u042a\n(\f(\16(\u042d",
    "\13(\7(\u042f\n(\f(\16(\u0432\13(\3(\6(\u0435\n(\r(\16(\u0436\3(\3(",
    "\7(\u043b\n(\f(\16(\u043e\13(\3)\3)\3)\5)\u0443\n)\3)\3)\5)\u0447\n",
    ")\3)\3)\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0454\n*\3+\3+\3+\3+\3+\7+\u045b",
    "\n+\f+\16+\u045e\13+\3+\3+\7+\u0462\n+\f+\16+\u0465\13+\7+\u0467\n+",
    "\f+\16+\u046a\13+\3+\3+\7+\u046e\n+\f+\16+\u0471\13+\3+\3+\7+\u0475",
    "\n+\f+\16+\u0478\13+\7+\u047a\n+\f+\16+\u047d\13+\7+\u047f\n+\f+\16",
    "+\u0482\13+\3+\3+\3,\3,\6,\u0488\n,\r,\16,\u0489\3,\3,\5,\u048e\n,\3",
    ",\3,\5,\u0492\n,\3-\3-\3-\3-\3.\3.\3.\3.\3/\3/\3/\3/\3/\6/\u04a1\n/",
    "\r/\16/\u04a2\3/\3/\7/\u04a7\n/\f/\16/\u04aa\13/\3/\3/\3/\6/\u04af\n",
    "/\r/\16/\u04b0\3/\3/\3\60\6\60\u04b6\n\60\r\60\16\60\u04b7\3\60\3\60",
    "\3\60\3\60\5\60\u04be\n\60\3\60\5\60\u04c1\n\60\3\61\6\61\u04c4\n\61",
    "\r\61\16\61\u04c5\3\61\3\61\6\61\u04ca\n\61\r\61\16\61\u04cb\5\61\u04ce",
    "\n\61\3\61\5\61\u04d1\n\61\3\61\5\61\u04d4\n\61\3\61\5\61\u04d7\n\61",
    "\3\62\3\62\3\62\3\62\3\63\3\63\6\63\u04df\n\63\r\63\16\63\u04e0\3\63",
    "\3\63\3\64\3\64\6\64\u04e7\n\64\r\64\16\64\u04e8\3\64\3\64\3\65\3\65",
    "\3\65\3\65\3\65\3\66\6\66\u04f3\n\66\r\66\16\66\u04f4\3\67\3\67\3\67",
    "\3\67\3\67\38\68\u04fd\n8\r8\168\u04fe\39\39\39\39\39\69\u0506\n9\r",
    "9\169\u0507\3:\6:\u050b\n:\r:\16:\u050c\3;\5;\u0510\n;\3;\6;\u0513\n",
    ";\r;\16;\u0514\3;\5;\u0518\n;\3;\5;\u051b\n;\3<\6<\u051e\n<\r<\16<\u051f",
    "\3<\3<\6<\u0524\n<\r<\16<\u0525\5<\u0528\n<\3<\5<\u052b\n<\3<\5<\u052e",
    "\n<\3<\5<\u0531\n<\3=\3=\3=\5=\u0536\n=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3",
    ">\3?\3?\3?\3?\3?\3?\3?\5?\u0549\n?\7?\u054b\n?\f?\16?\u054e\13?\3?\3",
    "?\3?\5?\u0553\n?\3?\3?\3?\7?\u0558\n?\f?\16?\u055b\13?\3?\6?\u055e\n",
    "?\r?\16?\u055f\3@\3@\3@\3@\3@\3@\3@\5@\u0569\n@\7@\u056b\n@\f@\16@\u056e",
    "\13@\3@\3@\3@\5@\u0573\n@\3@\3@\3@\7@\u0578\n@\f@\16@\u057b\13@\3@\6",
    "@\u057e\n@\r@\16@\u057f\3A\3A\3A\3A\3A\3A\3A\5A\u0589\nA\7A\u058b\n",
    "A\fA\16A\u058e\13A\3A\3A\3A\5A\u0593\nA\3A\3A\3A\3B\3B\3B\3B\3B\3B\3",
    "B\5B\u059f\nB\7B\u05a1\nB\fB\16B\u05a4\13B\3B\3B\3B\5B\u05a9\nB\3B\3",
    "B\3B\3C\3C\3C\3C\3C\3C\3C\5C\u05b5\nC\7C\u05b7\nC\fC\16C\u05ba\13C\3",
    "C\3C\3C\5C\u05bf\nC\3C\3C\3C\3D\3D\3D\3D\3D\6D\u05c9\nD\rD\16D\u05ca",
    "\3D\3D\3D\5D\u05d0\nD\7D\u05d2\nD\fD\16D\u05d5\13D\3D\3D\3E\3E\3E\3",
    "E\3E\7E\u05de\nE\fE\16E\u05e1\13E\3E\5E\u05e4\nE\3E\3E\3E\7E\u05e9\n",
    "E\fE\16E\u05ec\13E\7E\u05ee\nE\fE\16E\u05f1\13E\3E\5E\u05f4\nE\3E\6",
    "E\u05f7\nE\rE\16E\u05f8\3E\5E\u05fc\nE\3F\3F\3F\3F\3F\3G\3G\3G\3G\3",
    "G\7G\u0608\nG\fG\16G\u060b\13G\3G\3G\7G\u060f\nG\fG\16G\u0612\13G\7",
    "G\u0614\nG\fG\16G\u0617\13G\3G\3G\7G\u061b\nG\fG\16G\u061e\13G\3G\3",
    "G\5G\u0622\nG\7G\u0624\nG\fG\16G\u0627\13G\6G\u0629\nG\rG\16G\u062a",
    "\3G\3G\3H\3H\3H\3H\3H\3H\3H\7H\u0636\nH\fH\16H\u0639\13H\3H\3H\6H\u063d",
    "\nH\rH\16H\u063e\3I\3I\3I\3I\3I\3I\3I\5I\u0648\nI\3I\7I\u064b\nI\fI",
    "\16I\u064e\13I\7I\u0650\nI\fI\16I\u0653\13I\3J\3J\3J\3J\5J\u0659\nJ",
    "\3K\3K\3K\3K\3K\3K\3L\3L\3L\3L\3L\3L\5L\u0667\nL\5L\u0669\nL\3L\3L\3",
    "L\3L\7L\u066f\nL\fL\16L\u0672\13L\7L\u0674\nL\fL\16L\u0677\13L\3M\3",
    "M\3M\3M\3M\3M\3M\7M\u0680\nM\fM\16M\u0683\13M\7M\u0685\nM\fM\16M\u0688",
    "\13M\3N\3N\3N\3N\3N\3N\3N\7N\u0691\nN\fN\16N\u0694\13N\7N\u0696\nN\f",
    "N\16N\u0699\13N\3O\3O\3O\3O\3O\7O\u06a0\nO\fO\16O\u06a3\13O\3O\3O\3",
    "O\5O\u06a8\nO\3O\5O\u06ab\nO\3P\3P\3P\3P\3P\3P\3P\7P\u06b4\nP\fP\16",
    "P\u06b7\13P\7P\u06b9\nP\fP\16P\u06bc\13P\3P\5P\u06bf\nP\3Q\3Q\3Q\3Q",
    "\3Q\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3R\7R\u06cf\nR\fR\16R\u06d2\13R\3R\3R\3",
    "R\3R\3R\3R\3R\3R\3R\7R\u06dd\nR\fR\16R\u06e0\13R\3R\3R\3S\3S\3S\3S\6",
    "S\u06e8\nS\rS\16S\u06e9\3T\3T\3T\3T\7T\u06f0\nT\fT\16T\u06f3\13T\3U",
    "\3U\7U\u06f7\nU\fU\16U\u06fa\13U\3V\3V\3V\3V\3V\3V\3V\7V\u0703\nV\f",
    "V\16V\u0706\13V\3V\3V\3W\3W\3W\3W\3W\7W\u070f\nW\fW\16W\u0712\13W\3",
    "W\3W\7W\u0716\nW\fW\16W\u0719\13W\6W\u071b\nW\rW\16W\u071c\3X\3X\3X",
    "\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\7X\u072c\nX\fX\16X\u072f\13X\6X\u0731",
    "\nX\rX\16X\u0732\3X\3X\3Y\3Y\3Y\3Y\5Y\u073b\nY\3Z\3Z\3Z\3Z\5Z\u0741",
    "\nZ\3[\3[\3[\3[\3\\\3\\\3]\3]\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3",
    "^\7^\u0758\n^\f^\16^\u075b\13^\6^\u075d\n^\r^\16^\u075e\3^\3^\3_\3_",
    "\3_\3_\3_\3_\3_\3_\3_\7_\u076c\n_\f_\16_\u076f\13_\6_\u0771\n_\r_\16",
    "_\u0772\3_\3_\3`\3`\3`\3`\3`\3`\3`\6`\u077e\n`\r`\16`\u077f\3a\3a\3",
    "a\3a\3a\7a\u0787\na\fa\16a\u078a\13a\3a\3a\7a\u078e\na\fa\16a\u0791",
    "\13a\7a\u0793\na\fa\16a\u0796\13a\3a\3a\3a\3a\3a\6a\u079d\na\ra\16a",
    "\u079e\6a\u07a1\na\ra\16a\u07a2\3a\3a\3b\3b\3b\3b\3b\7b\u07ac\nb\fb",
    "\16b\u07af\13b\3b\3b\7b\u07b3\nb\fb\16b\u07b6\13b\7b\u07b8\nb\fb\16",
    "b\u07bb\13b\3b\3b\3b\3b\3b\6b\u07c2\nb\rb\16b\u07c3\6b\u07c6\nb\rb\16",
    "b\u07c7\3b\3b\3c\3c\3c\3c\5c\u07d0\nc\3d\3d\3d\3d\3d\7d\u07d7\nd\fd",
    "\16d\u07da\13d\3d\3d\7d\u07de\nd\fd\16d\u07e1\13d\7d\u07e3\nd\fd\16",
    "d\u07e6\13d\3d\3d\3d\3d\3d\6d\u07ed\nd\rd\16d\u07ee\6d\u07f1\nd\rd\16",
    "d\u07f2\3d\3d\3e\3e\3e\3e\3e\7e\u07fc\ne\fe\16e\u07ff\13e\3e\3e\7e\u0803",
    "\ne\fe\16e\u0806\13e\7e\u0808\ne\fe\16e\u080b\13e\3e\3e\3e\3e\3e\6e",
    "\u0812\ne\re\16e\u0813\6e\u0816\ne\re\16e\u0817\3e\3e\3f\3f\3f\3f\3",
    "f\7f\u0821\nf\ff\16f\u0824\13f\3f\3f\7f\u0828\nf\ff\16f\u082b\13f\7",
    "f\u082d\nf\ff\16f\u0830\13f\3f\3f\3f\3f\3f\6f\u0837\nf\rf\16f\u0838",
    "\6f\u083b\nf\rf\16f\u083c\3f\3f\3g\3g\3g\3g\3g\7g\u0846\ng\fg\16g\u0849",
    "\13g\3g\3g\7g\u084d\ng\fg\16g\u0850\13g\7g\u0852\ng\fg\16g\u0855\13",
    "g\3g\3g\3g\3g\3g\6g\u085c\ng\rg\16g\u085d\6g\u0860\ng\rg\16g\u0861\3",
    "g\3g\3h\3h\3h\3h\3h\3i\7i\u086c\ni\fi\16i\u086f\13i\3i\3i\3i\3i\3i\7",
    "i\u0876\ni\fi\16i\u0879\13i\3j\3j\3j\5j\u087e\nj\3j\3j\3j\5j\u0883\n",
    "j\3j\3j\3j\5j\u0888\nj\5j\u088a\nj\3k\3k\3l\3l\3l\5l\u0891\nl\3l\3l",
    "\3l\5l\u0896\nl\5l\u0898\nl\3m\3m\3n\3n\3n\5n\u089f\nn\3n\3n\3n\5n\u08a4",
    "\nn\5n\u08a6\nn\3o\3o\3p\3p\3q\3q\3r\3r\3s\3s\3s\5s\u08b3\ns\3s\3s\3",
    "s\3s\3s\3s\3s\3s\5s\u08bd\ns\3s\3s\3s\3s\3s\5s\u08c4\ns\3t\3t\3t\3t",
    "\3t\3t\3t\3t\3t\3t\5t\u08d0\nt\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\5u\u08dc",
    "\nu\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\5v\u08e8\nv\3w\3w\3w\3w\3w\3w\3w\3",
    "w\3w\3w\5w\u08f4\nw\3x\3x\3x\3x\3x\5x\u08fb\nx\3x\3x\3x\3x\3x\3x\5x",
    "\u0903\nx\3y\3y\3y\3y\3z\3z\6z\u090b\nz\rz\16z\u090c\3z\3z\3{\3{\3{",
    "\3{\5{\u0915\n{\3|\3|\5|\u0919\n|\6|\u091b\n|\r|\16|\u091c\3}\3}\3}",
    "\3}\5}\u0923\n}\3}\3}\3}\3}\5}\u0929\n}\3}\3}\3}\3}\5}\u092f\n}\3}\3",
    "}\5}\u0933\n}\5}\u0935\n}\3~\3~\5~\u0939\n~\3~\3~\3\177\3\177\5\177",
    "\u093f\n\177\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081",
    "\3\u0081\3\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085",
    "\3\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088\3\u0088\3\u0089\3\u0089",
    "\3\u008a\3\u008a\3\u008b\3\u008b\3\u008c\3\u008c\3\u008d\3\u008d\3\u008e",
    "\3\u008e\3\u008f\3\u008f\3\u0090\3\u0090\3\u0091\3\u0091\3\u0092\3\u0092",
    "\3\u0093\3\u0093\3\u0094\3\u0094\3\u0095\3\u0095\3\u0096\3\u0096\3\u0097",
    "\3\u0097\3\u0098\3\u0098\3\u0099\3\u0099\3\u009a\3\u009a\3\u009b\3\u009b",
    "\3\u009c\3\u009c\3\u009d\3\u009d\3\u009e\3\u009e\3\u009f\3\u009f\3\u00a0",
    "\3\u00a0\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a4\3\u00a4",
    "\3\u00a5\6\u00a5\u0992\n\u00a5\r\u00a5\16\u00a5\u0993\3\u00a6\3\u00a6",
    "\3\u00a7\3\u00a7\3\u00a7\4\u055f\u057f\2\u00a8\2\4\6\b\n\f\16\20\22",
    "\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjl",
    "nprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa",
    "\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2",
    "\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da",
    "\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2",
    "\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a",
    "\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122",
    "\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a",
    "\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\2\16\3\2\4\5",
    "\3\2*+\3\2AC\3\2HL\4\2HHOP\5\2KKPPSW\4\2CCXX\3\2YZ\3\2uv\3\2xy\3\2z",
    "{\3\2}\177\u0a8b\2\u0158\3\2\2\2\4\u0161\3\2\2\2\6\u0194\3\2\2\2\b\u0196",
    "\3\2\2\2\n\u01a7\3\2\2\2\f\u01b3\3\2\2\2\16\u01bb\3\2\2\2\20\u01c3\3",
    "\2\2\2\22\u01c8\3\2\2\2\24\u01cd\3\2\2\2\26\u01db\3\2\2\2\30\u01ea\3",
    "\2\2\2\32\u0201\3\2\2\2\34\u0204\3\2\2\2\36\u020d\3\2\2\2 \u0216\3\2",
    "\2\2\"\u0256\3\2\2\2$\u0258\3\2\2\2&\u0279\3\2\2\2(\u029a\3\2\2\2*\u02a4",
    "\3\2\2\2,\u02b6\3\2\2\2.\u02d0\3\2\2\2\60\u02f1\3\2\2\2\62\u0301\3\2",
    "\2\2\64\u0309\3\2\2\2\66\u0311\3\2\2\28\u0319\3\2\2\2:\u032c\3\2\2\2",
    "<\u0350\3\2\2\2>\u035f\3\2\2\2@\u038c\3\2\2\2B\u03ac\3\2\2\2D\u03b1",
    "\3\2\2\2F\u03b5\3\2\2\2H\u03bc\3\2\2\2J\u03c6\3\2\2\2L\u041d\3\2\2\2",
    "N\u041f\3\2\2\2P\u043f\3\2\2\2R\u0453\3\2\2\2T\u0455\3\2\2\2V\u0491",
    "\3\2\2\2X\u0493\3\2\2\2Z\u0497\3\2\2\2\\\u049b\3\2\2\2^\u04c0\3\2\2",
    "\2`\u04d6\3\2\2\2b\u04d8\3\2\2\2d\u04dc\3\2\2\2f\u04e4\3\2\2\2h\u04ec",
    "\3\2\2\2j\u04f2\3\2\2\2l\u04f6\3\2\2\2n\u04fc\3\2\2\2p\u0505\3\2\2\2",
    "r\u050a\3\2\2\2t\u051a\3\2\2\2v\u0530\3\2\2\2x\u0532\3\2\2\2z\u053b",
    "\3\2\2\2|\u0541\3\2\2\2~\u0561\3\2\2\2\u0080\u0581\3\2\2\2\u0082\u0597",
    "\3\2\2\2\u0084\u05ad\3\2\2\2\u0086\u05c3\3\2\2\2\u0088\u05d8\3\2\2\2",
    "\u008a\u05fd\3\2\2\2\u008c\u0602\3\2\2\2\u008e\u062e\3\2\2\2\u0090\u0640",
    "\3\2\2\2\u0092\u0654\3\2\2\2\u0094\u065a\3\2\2\2\u0096\u0660\3\2\2\2",
    "\u0098\u0678\3\2\2\2\u009a\u0689\3\2\2\2\u009c\u069a\3\2\2\2\u009e\u06ac",
    "\3\2\2\2\u00a0\u06c0\3\2\2\2\u00a2\u06c9\3\2\2\2\u00a4\u06e7\3\2\2\2",
    "\u00a6\u06eb\3\2\2\2\u00a8\u06f4\3\2\2\2\u00aa\u06fb\3\2\2\2\u00ac\u0709",
    "\3\2\2\2\u00ae\u071e\3\2\2\2\u00b0\u0736\3\2\2\2\u00b2\u073c\3\2\2\2",
    "\u00b4\u0742\3\2\2\2\u00b6\u0746\3\2\2\2\u00b8\u0748\3\2\2\2\u00ba\u074a",
    "\3\2\2\2\u00bc\u0762\3\2\2\2\u00be\u077d\3\2\2\2\u00c0\u0781\3\2\2\2",
    "\u00c2\u07a6\3\2\2\2\u00c4\u07cb\3\2\2\2\u00c6\u07d1\3\2\2\2\u00c8\u07f6",
    "\3\2\2\2\u00ca\u081b\3\2\2\2\u00cc\u0840\3\2\2\2\u00ce\u0865\3\2\2\2",
    "\u00d0\u086d\3\2\2\2\u00d2\u0889\3\2\2\2\u00d4\u088b\3\2\2\2\u00d6\u0897",
    "\3\2\2\2\u00d8\u0899\3\2\2\2\u00da\u08a5\3\2\2\2\u00dc\u08a7\3\2\2\2",
    "\u00de\u08a9\3\2\2\2\u00e0\u08ab\3\2\2\2\u00e2\u08ad\3\2\2\2\u00e4\u08af",
    "\3\2\2\2\u00e6\u08c5\3\2\2\2\u00e8\u08d1\3\2\2\2\u00ea\u08dd\3\2\2\2",
    "\u00ec\u08e9\3\2\2\2\u00ee\u08f5\3\2\2\2\u00f0\u0904\3\2\2\2\u00f2\u0908",
    "\3\2\2\2\u00f4\u0914\3\2\2\2\u00f6\u091a\3\2\2\2\u00f8\u0934\3\2\2\2",
    "\u00fa\u0936\3\2\2\2\u00fc\u093c\3\2\2\2\u00fe\u0942\3\2\2\2\u0100\u0946",
    "\3\2\2\2\u0102\u094a\3\2\2\2\u0104\u094c\3\2\2\2\u0106\u094e\3\2\2\2",
    "\u0108\u0950\3\2\2\2\u010a\u0952\3\2\2\2\u010c\u0954\3\2\2\2\u010e\u0956",
    "\3\2\2\2\u0110\u0958\3\2\2\2\u0112\u095a\3\2\2\2\u0114\u095c\3\2\2\2",
    "\u0116\u095e\3\2\2\2\u0118\u0960\3\2\2\2\u011a\u0962\3\2\2\2\u011c\u0964",
    "\3\2\2\2\u011e\u0966\3\2\2\2\u0120\u0968\3\2\2\2\u0122\u096a\3\2\2\2",
    "\u0124\u096c\3\2\2\2\u0126\u096e\3\2\2\2\u0128\u0970\3\2\2\2\u012a\u0972",
    "\3\2\2\2\u012c\u0974\3\2\2\2\u012e\u0976\3\2\2\2\u0130\u0978\3\2\2\2",
    "\u0132\u097a\3\2\2\2\u0134\u097c\3\2\2\2\u0136\u097e\3\2\2\2\u0138\u0980",
    "\3\2\2\2\u013a\u0982\3\2\2\2\u013c\u0984\3\2\2\2\u013e\u0986\3\2\2\2",
    "\u0140\u0988\3\2\2\2\u0142\u098a\3\2\2\2\u0144\u098c\3\2\2\2\u0146\u098e",
    "\3\2\2\2\u0148\u0991\3\2\2\2\u014a\u0995\3\2\2\2\u014c\u0997\3\2\2\2",
    "\u014e\u0155\5\4\3\2\u014f\u0151\5\u014c\u00a7\2\u0150\u014f\3\2\2\2",
    "\u0150\u0151\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0154\5\u0124\u0093\2",
    "\u0153\u0150\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0155\u0156",
    "\3\2\2\2\u0156\u0159\3\2\2\2\u0157\u0155\3\2\2\2\u0158\u014e\3\2\2\2",
    "\u0159\u015a\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015c",
    "\3\2\2\2\u015c\u015d\7\2\2\3\u015d\3\3\2\2\2\u015e\u0162\5\6\4\2\u015f",
    "\u0162\5\u0148\u00a5\2\u0160\u0162\5\u00f6|\2\u0161\u015e\3\2\2\2\u0161",
    "\u015f\3\2\2\2\u0161\u0160\3\2\2\2\u0162\5\3\2\2\2\u0163\u0195\5\b\5",
    "\2\u0164\u0195\5\n\6\2\u0165\u0195\5\24\13\2\u0166\u0195\5\30\r\2\u0167",
    "\u0195\5\26\f\2\u0168\u0195\5\u00fa~\2\u0169\u0195\5\34\17\2\u016a\u0195",
    "\5\36\20\2\u016b\u0195\5 \21\2\u016c\u0195\5$\23\2\u016d\u0195\5&\24",
    "\2\u016e\u0195\5J&\2\u016f\u0195\5:\36\2\u0170\u0195\58\35\2\u0171\u0195",
    "\5@!\2\u0172\u0195\5> \2\u0173\u0195\5<\37\2\u0174\u0195\5L\'\2\u0175",
    "\u0195\5T+\2\u0176\u0195\5\\/\2\u0177\u0195\5|?\2\u0178\u0195\5~@\2",
    "\u0179\u0195\5\u0080A\2\u017a\u0195\5\u0082B\2\u017b\u0195\5\u0084C",
    "\2\u017c\u0195\5\u0086D\2\u017d\u0195\5\u0088E\2\u017e\u0195\5\u008c",
    "G\2\u017f\u0195\5\u008eH\2\u0180\u0195\5\u0090I\2\u0181\u0195\5\u0096",
    "L\2\u0182\u0195\5\u0098M\2\u0183\u0195\5\u009aN\2\u0184\u0195\5\u009c",
    "O\2\u0185\u0195\5\u009eP\2\u0186\u0195\5\u00acW\2\u0187\u0195\5N(\2",
    "\u0188\u0195\5\u00a2R\2\u0189\u0195\5\u00a0Q\2\u018a\u0195\5\u00aeX",
    "\2\u018b\u0195\5\u00ba^\2\u018c\u0195\5\u00bc_\2\u018d\u0195\5\u00c0",
    "a\2\u018e\u0195\5\u00c2b\2\u018f\u0195\5\u00c6d\2\u0190\u0195\5\u00c8",
    "e\2\u0191\u0195\5\u00caf\2\u0192\u0195\5\u00ccg\2\u0193\u0195\5.\30",
    "\2\u0194\u0163\3\2\2\2\u0194\u0164\3\2\2\2\u0194\u0165\3\2\2\2\u0194",
    "\u0166\3\2\2\2\u0194\u0167\3\2\2\2\u0194\u0168\3\2\2\2\u0194\u0169\3",
    "\2\2\2\u0194\u016a\3\2\2\2\u0194\u016b\3\2\2\2\u0194\u016c\3\2\2\2\u0194",
    "\u016d\3\2\2\2\u0194\u016e\3\2\2\2\u0194\u016f\3\2\2\2\u0194\u0170\3",
    "\2\2\2\u0194\u0171\3\2\2\2\u0194\u0172\3\2\2\2\u0194\u0173\3\2\2\2\u0194",
    "\u0174\3\2\2\2\u0194\u0175\3\2\2\2\u0194\u0176\3\2\2\2\u0194\u0177\3",
    "\2\2\2\u0194\u0178\3\2\2\2\u0194\u0179\3\2\2\2\u0194\u017a\3\2\2\2\u0194",
    "\u017b\3\2\2\2\u0194\u017c\3\2\2\2\u0194\u017d\3\2\2\2\u0194\u017e\3",
    "\2\2\2\u0194\u017f\3\2\2\2\u0194\u0180\3\2\2\2\u0194\u0181\3\2\2\2\u0194",
    "\u0182\3\2\2\2\u0194\u0183\3\2\2\2\u0194\u0184\3\2\2\2\u0194\u0185\3",
    "\2\2\2\u0194\u0186\3\2\2\2\u0194\u0187\3\2\2\2\u0194\u0188\3\2\2\2\u0194",
    "\u0189\3\2\2\2\u0194\u018a\3\2\2\2\u0194\u018b\3\2\2\2\u0194\u018c\3",
    "\2\2\2\u0194\u018d\3\2\2\2\u0194\u018e\3\2\2\2\u0194\u018f\3\2\2\2\u0194",
    "\u0190\3\2\2\2\u0194\u0191\3\2\2\2\u0194\u0192\3\2\2\2\u0194\u0193\3",
    "\2\2\2\u0195\7\3\2\2\2\u0196\u0197\5\u010a\u0086\2\u0197\u0199\7\3\2",
    "\2\u0198\u019a\t\2\2\2\u0199\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a",
    "\u019c\3\2\2\2\u019b\u019d\5\u014c\u00a7\2\u019c\u019b\3\2\2\2\u019c",
    "\u019d\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a2\5\u0120\u0091\2\u019f",
    "\u01a1\5\u0124\u0093\2\u01a0\u019f\3\2\2\2\u01a1\u01a4\3\2\2\2\u01a2",
    "\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a5\3\2\2\2\u01a4\u01a2\3",
    "\2\2\2\u01a5\u01a6\5\32\16\2\u01a6\t\3\2\2\2\u01a7\u01a8\5\u010a\u0086",
    "\2\u01a8\u01ab\7\6\2\2\u01a9\u01aa\7\7\2\2\u01aa\u01ac\5\u0146\u00a4",
    "\2\u01ab\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ae\3\2\2\2\u01ad",
    "\u01af\5\u014c\u00a7\2\u01ae\u01ad\3\2\2\2\u01ae\u01af\3\2\2\2\u01af",
    "\u01b0\3\2\2\2\u01b0\u01b1\5\u0120\u0091\2\u01b1\u01b2\5\32\16\2\u01b2",
    "\13\3\2\2\2\u01b3\u01b5\7\b\2\2\u01b4\u01b6\5\u00f8}\2\u01b5\u01b4\3",
    "\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8",
    "\u01b9\3\2\2\2\u01b9\u01ba\5\u0120\u0091\2\u01ba\r\3\2\2\2\u01bb\u01bd",
    "\7\t\2\2\u01bc\u01be\5\u00f8}\2\u01bd\u01bc\3\2\2\2\u01be\u01bf\3\2",
    "\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1",
    "\u01c2\5\u0120\u0091\2\u01c2\17\3\2\2\2\u01c3\u01c4\5\u0112\u008a\2",
    "\u01c4\u01c5\7\n\2\2\u01c5\u01c6\5\u00f8}\2\u01c6\u01c7\5\u0120\u0091",
    "\2\u01c7\21\3\2\2\2\u01c8\u01c9\5\u0112\u008a\2\u01c9\u01ca\7\13\2\2",
    "\u01ca\u01cb\5\u00f8}\2\u01cb\u01cc\5\u0120\u0091\2\u01cc\23\3\2\2\2",
    "\u01cd\u01ce\5\u010a\u0086\2\u01ce\u01d0\7\f\2\2\u01cf\u01d1\5\u014c",
    "\u00a7\2\u01d0\u01cf\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d2\3\2\2\2",
    "\u01d2\u01d6\5\u0120\u0091\2\u01d3\u01d5\5\u0124\u0093\2\u01d4\u01d3",
    "\3\2\2\2\u01d5\u01d8\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d6\u01d7\3\2\2\2",
    "\u01d7\u01d9\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d9\u01da\5\32\16\2\u01da",
    "\25\3\2\2\2\u01db\u01dc\5\u010a\u0086\2\u01dc\u01dd\7\r\2\2\u01dd\u01e7",
    "\5\u0120\u0091\2\u01de\u01e0\5\u0124\u0093\2\u01df\u01de\3\2\2\2\u01e0",
    "\u01e3\3\2\2\2\u01e1\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e4\3",
    "\2\2\2\u01e3\u01e1\3\2\2\2\u01e4\u01e6\5\"\22\2\u01e5\u01e1\3\2\2\2",
    "\u01e6\u01e9\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\27",
    "\3\2\2\2\u01e9\u01e7\3\2\2\2\u01ea\u01eb\5\u010a\u0086\2\u01eb\u01ec",
    "\7\16\2\2\u01ec\u01ed\5\u0120\u0091\2\u01ed\u01ee\5\u00fc\177\2\u01ee",
    "\31\3\2\2\2\u01ef\u01f1\5\u0124\u0093\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1",
    "\3\2\2\2\u01f1\u01fb\3\2\2\2\u01f2\u01fc\5\f\7\2\u01f3\u01fc\5\16\b",
    "\2\u01f4\u01fc\5\u00a8U\2\u01f5\u01fc\5\u00fe\u0080\2\u01f6\u01fc\5",
    ",\27\2\u01f7\u01fc\5\u00fc\177\2\u01f8\u01fc\5\u00fa~\2\u01f9\u01fc",
    "\5\20\t\2\u01fa\u01fc\5\22\n\2\u01fb\u01f2\3\2\2\2\u01fb\u01f3\3\2\2",
    "\2\u01fb\u01f4\3\2\2\2\u01fb\u01f5\3\2\2\2\u01fb\u01f6\3\2\2\2\u01fb",
    "\u01f7\3\2\2\2\u01fb\u01f8\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fb\u01fa\3",
    "\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01fe\5\u0124\u0093\2\u01fe\u0200\3",
    "\2\2\2\u01ff\u01f0\3\2\2\2\u0200\u0203\3\2\2\2\u0201\u01ff\3\2\2\2\u0201",
    "\u0202\3\2\2\2\u0202\33\3\2\2\2\u0203\u0201\3\2\2\2\u0204\u0205\5\u010a",
    "\u0086\2\u0205\u0206\7\17\2\2\u0206\u0207\5\u0120\u0091\2\u0207\u0208",
    "\5\u011a\u008e\2\u0208\u0209\5\u00f8}\2\u0209\u020a\5\u0120\u0091\2",
    "\u020a\u020b\3\2\2\2\u020b\u020c\5\u0124\u0093\2\u020c\35\3\2\2\2\u020d",
    "\u020e\5\u010a\u0086\2\u020e\u020f\7\20\2\2\u020f\u0210\5\u0120\u0091",
    "\2\u0210\u0211\5\u011a\u008e\2\u0211\u0212\5\u00f8}\2\u0212\u0213\5",
    "\u0120\u0091\2\u0213\u0214\3\2\2\2\u0214\u0215\5\u0124\u0093\2\u0215",
    "\37\3\2\2\2\u0216\u0217\5\u010a\u0086\2\u0217\u0218\5\u012e\u0098\2",
    "\u0218\u0219\5\u00d0i\2\u0219\u021d\5\u0120\u0091\2\u021a\u021c\5\u0124",
    "\u0093\2\u021b\u021a\3\2\2\2\u021c\u021f\3\2\2\2\u021d\u021b\3\2\2\2",
    "\u021d\u021e\3\2\2\2\u021e\u0227\3\2\2\2\u021f\u021d\3\2\2\2\u0220\u0224",
    "\5\"\22\2\u0221\u0223\5\u0124\u0093\2\u0222\u0221\3\2\2\2\u0223\u0226",
    "\3\2\2\2\u0224\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0228\3\2\2\2",
    "\u0226\u0224\3\2\2\2\u0227\u0220\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u0227",
    "\3\2\2\2\u0229\u022a\3\2\2\2\u022a!\3\2\2\2\u022b\u0257\5\u0130\u0099",
    "\2\u022c\u0257\5\u0136\u009c\2\u022d\u0257\5\u0138\u009d\2\u022e\u0257",
    "\5\u013a\u009e\2\u022f\u0257\5\u013c\u009f\2\u0230\u0257\5\u013e\u00a0",
    "\2\u0231\u0257\5\u0140\u00a1\2\u0232\u0257\5\u0132\u009a\2\u0233\u0257",
    "\5\u0134\u009b\2\u0234\u0257\5\u0142\u00a2\2\u0235\u0257\5(\25\2\u0236",
    "\u0257\5\u00a8U\2\u0237\u0257\5\u00fe\u0080\2\u0238\u0257\5,\27\2\u0239",
    "\u0257\5.\30\2\u023a\u0257\5\u00f8}\2\u023b\u0257\5R*\2\u023c\u0240",
    "\5\u00e4s\2\u023d\u023f\5\u0124\u0093\2\u023e\u023d\3\2\2\2\u023f\u0242",
    "\3\2\2\2\u0240\u023e\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0257\3\2\2\2",
    "\u0242\u0240\3\2\2\2\u0243\u0247\5\u00e6t\2\u0244\u0246\5\u0124\u0093",
    "\2\u0245\u0244\3\2\2\2\u0246\u0249\3\2\2\2\u0247\u0245\3\2\2\2\u0247",
    "\u0248\3\2\2\2\u0248\u0257\3\2\2\2\u0249\u0247\3\2\2\2\u024a\u024e\5",
    "\u00e8u\2\u024b\u024d\5\u0124\u0093\2\u024c\u024b\3\2\2\2\u024d\u0250",
    "\3\2\2\2\u024e\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0257\3\2\2\2",
    "\u0250\u024e\3\2\2\2\u0251\u0257\5\u00eav\2\u0252\u0257\5\u00ecw\2\u0253",
    "\u0257\5\u00eex\2\u0254\u0257\5\u00fc\177\2\u0255\u0257\5\u014c\u00a7",
    "\2\u0256\u022b\3\2\2\2\u0256\u022c\3\2\2\2\u0256\u022d\3\2\2\2\u0256",
    "\u022e\3\2\2\2\u0256\u022f\3\2\2\2\u0256\u0230\3\2\2\2\u0256\u0231\3",
    "\2\2\2\u0256\u0232\3\2\2\2\u0256\u0233\3\2\2\2\u0256\u0234\3\2\2\2\u0256",
    "\u0235\3\2\2\2\u0256\u0236\3\2\2\2\u0256\u0237\3\2\2\2\u0256\u0238\3",
    "\2\2\2\u0256\u0239\3\2\2\2\u0256\u023a\3\2\2\2\u0256\u023b\3\2\2\2\u0256",
    "\u023c\3\2\2\2\u0256\u0243\3\2\2\2\u0256\u024a\3\2\2\2\u0256\u0251\3",
    "\2\2\2\u0256\u0252\3\2\2\2\u0256\u0253\3\2\2\2\u0256\u0254\3\2\2\2\u0256",
    "\u0255\3\2\2\2\u0257#\3\2\2\2\u0258\u0259\5\u010a\u0086\2\u0259\u025a",
    "\7\21\2\2\u025a\u025b\5\u00d0i\2\u025b\u025d\5\u0120\u0091\2\u025c\u025e",
    "\5\u0124\u0093\2\u025d\u025c\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u0262",
    "\3\2\2\2\u025f\u0260\5\u00fe\u0080\2\u0260\u0261\5\u0124\u0093\2\u0261",
    "\u0263\3\2\2\2\u0262\u025f\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0265\3",
    "\2\2\2\u0264\u0266\5,\27\2\u0265\u0264\3\2\2\2\u0265\u0266\3\2\2\2\u0266",
    "\u026a\3\2\2\2\u0267\u0269\5\u0124\u0093\2\u0268\u0267\3\2\2\2\u0269",
    "\u026c\3\2\2\2\u026a\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u0276\3",
    "\2\2\2\u026c\u026a\3\2\2\2\u026d\u0271\5\"\22\2\u026e\u0270\5\u0124",
    "\u0093\2\u026f\u026e\3\2\2\2\u0270\u0273\3\2\2\2\u0271\u026f\3\2\2\2",
    "\u0271\u0272\3\2\2\2\u0272\u0275\3\2\2\2\u0273\u0271\3\2\2\2\u0274\u026d",
    "\3\2\2\2\u0275\u0278\3\2\2\2\u0276\u0274\3\2\2\2\u0276\u0277\3\2\2\2",
    "\u0277%\3\2\2\2\u0278\u0276\3\2\2\2\u0279\u027a\5\u010a\u0086\2\u027a",
    "\u027b\7\22\2\2\u027b\u027c\5\u00d0i\2\u027c\u027e\5\u0120\u0091\2\u027d",
    "\u027f\5\u0124\u0093\2\u027e\u027d\3\2\2\2\u027e\u027f\3\2\2\2\u027f",
    "\u0283\3\2\2\2\u0280\u0281\5\u00fe\u0080\2\u0281\u0282\5\u0124\u0093",
    "\2\u0282\u0284\3\2\2\2\u0283\u0280\3\2\2\2\u0283\u0284\3\2\2\2\u0284",
    "\u0286\3\2\2\2\u0285\u0287\5,\27\2\u0286\u0285\3\2\2\2\u0286\u0287\3",
    "\2\2\2\u0287\u028b\3\2\2\2\u0288\u028a\5\u0124\u0093\2\u0289\u0288\3",
    "\2\2\2\u028a\u028d\3\2\2\2\u028b\u0289\3\2\2\2\u028b\u028c\3\2\2\2\u028c",
    "\u0297\3\2\2\2\u028d\u028b\3\2\2\2\u028e\u0292\5\"\22\2\u028f\u0291",
    "\5\u0124\u0093\2\u0290\u028f\3\2\2\2\u0291\u0294\3\2\2\2\u0292\u0290",
    "\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0296\3\2\2\2\u0294\u0292\3\2\2\2",
    "\u0295\u028e\3\2\2\2\u0296\u0299\3\2\2\2\u0297\u0295\3\2\2\2\u0297\u0298",
    "\3\2\2\2\u0298\'\3\2\2\2\u0299\u0297\3\2\2\2\u029a\u02a1\5*\26\2\u029b",
    "\u02a0\5*\26\2\u029c\u02a0\5,\27\2\u029d\u02a0\5.\30\2\u029e\u02a0\5",
    "R*\2\u029f\u029b\3\2\2\2\u029f\u029c\3\2\2\2\u029f\u029d\3\2\2\2\u029f",
    "\u029e\3\2\2\2\u02a0\u02a3\3\2\2\2\u02a1\u029f\3\2\2\2\u02a1\u02a2\3",
    "\2\2\2\u02a2)\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a4\u02a6\5\u010c\u0087",
    "\2\u02a5\u02a7\5\u014c\u00a7\2\u02a6\u02a5\3\2\2\2\u02a6\u02a7\3\2\2",
    "\2\u02a7\u02ac\3\2\2\2\u02a8\u02ad\5\u0144\u00a3\2\u02a9\u02ad\5\u0146",
    "\u00a4\2\u02aa\u02ad\5\u012e\u0098\2\u02ab\u02ad\3\2\2\2\u02ac\u02a8",
    "\3\2\2\2\u02ac\u02a9\3\2\2\2\u02ac\u02aa\3\2\2\2\u02ac\u02ab\3\2\2\2",
    "\u02ad\u02b1\3\2\2\2\u02ae\u02b0\5\u00f8}\2\u02af\u02ae\3\2\2\2\u02b0",
    "\u02b3\3\2\2\2\u02b1\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b4\3",
    "\2\2\2\u02b3\u02b1\3\2\2\2\u02b4\u02b5\5\u0122\u0092\2\u02b5+\3\2\2",
    "\2\u02b6\u02b8\5\u010e\u0088\2\u02b7\u02b9\5\u00f8}\2\u02b8\u02b7\3",
    "\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02cb\3\2\2\2\u02ba\u02c0\5\u00f8}",
    "\2\u02bb\u02bc\5\u0124\u0093\2\u02bc\u02bd\5\u014c\u00a7\2\u02bd\u02bf",
    "\3\2\2\2\u02be\u02bb\3\2\2\2\u02bf\u02c2\3\2\2\2\u02c0\u02be\3\2\2\2",
    "\u02c0\u02c1\3\2\2\2\u02c1\u02c6\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c3\u02c5",
    "\5\u0124\u0093\2\u02c4\u02c3\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6\u02c4",
    "\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02ca\3\2\2\2\u02c8\u02c6\3\2\2\2",
    "\u02c9\u02ba\3\2\2\2\u02ca\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb\u02cc",
    "\3\2\2\2\u02cc\u02ce\3\2\2\2\u02cd\u02cb\3\2\2\2\u02ce\u02cf\5\u0120",
    "\u0091\2\u02cf-\3\2\2\2\u02d0\u02d7\5\u0110\u0089\2\u02d1\u02d3\5\u014c",
    "\u00a7\2\u02d2\u02d1\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d4\3\2\2\2",
    "\u02d4\u02d6\5\u0124\u0093\2\u02d5\u02d2\3\2\2\2\u02d6\u02d9\3\2\2\2",
    "\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02e0\3\2\2\2\u02d9\u02d7",
    "\3\2\2\2\u02da\u02e1\5\u00f8}\2\u02db\u02e1\7\7\2\2\u02dc\u02de\5\u014c",
    "\u00a7\2\u02dd\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02df\3\2\2\2",
    "\u02df\u02e1\5\u0124\u0093\2\u02e0\u02da\3\2\2\2\u02e0\u02db\3\2\2\2",
    "\u02e0\u02dd\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3",
    "\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02eb\5\u0120\u0091\2\u02e5\u02e7",
    "\5\u014c\u00a7\2\u02e6\u02e5\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e8",
    "\3\2\2\2\u02e8\u02ea\5\u0124\u0093\2\u02e9\u02e6\3\2\2\2\u02ea\u02ed",
    "\3\2\2\2\u02eb\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec/\3\2\2\2\u02ed",
    "\u02eb\3\2\2\2\u02ee\u02f2\5\62\32\2\u02ef\u02f2\5\64\33\2\u02f0\u02f2",
    "\5\66\34\2\u02f1\u02ee\3\2\2\2\u02f1\u02ef\3\2\2\2\u02f1\u02f0\3\2\2",
    "\2\u02f2\u02fe\3\2\2\2\u02f3\u02f5\5\u0124\u0093\2\u02f4\u02f3\3\2\2",
    "\2\u02f4\u02f5\3\2\2\2\u02f5\u02fa\3\2\2\2\u02f6\u02fb\5\62\32\2\u02f7",
    "\u02fb\5\64\33\2\u02f8\u02fb\5\66\34\2\u02f9\u02fb\5R*\2\u02fa\u02f6",
    "\3\2\2\2\u02fa\u02f7\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fa\u02f9\3\2\2\2",
    "\u02fb\u02fd\3\2\2\2\u02fc\u02f4\3\2\2\2\u02fd\u0300\3\2\2\2\u02fe\u02fc",
    "\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\61\3\2\2\2\u0300\u02fe\3\2\2\2\u0301",
    "\u0303\5\u0114\u008b\2\u0302\u0304\5\u00f8}\2\u0303\u0302\3\2\2\2\u0304",
    "\u0305\3\2\2\2\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0307\3",
    "\2\2\2\u0307\u0308\5\u0120\u0091\2\u0308\63\3\2\2\2\u0309\u030b\5\u0116",
    "\u008c\2\u030a\u030c\5\u00f8}\2\u030b\u030a\3\2\2\2\u030c\u030d\3\2",
    "\2\2\u030d\u030b\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u030f\3\2\2\2\u030f",
    "\u0310\5\u0120\u0091\2\u0310\65\3\2\2\2\u0311\u0313\5\u011a\u008e\2",
    "\u0312\u0314\5\u00f8}\2\u0313\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315",
    "\u0313\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0318\5",
    "\u0120\u0091\2\u0318\67\3\2\2\2\u0319\u031a\5\u010a\u0086\2\u031a\u031b",
    "\7\23\2\2\u031b\u031c\5\u00d0i\2\u031c\u031d\5\u0120\u0091\2\u031d\u0327",
    "\5\u0124\u0093\2\u031e\u0322\5\"\22\2\u031f\u0321\5\u0124\u0093\2\u0320",
    "\u031f\3\2\2\2\u0321\u0324\3\2\2\2\u0322\u0320\3\2\2\2\u0322\u0323\3",
    "\2\2\2\u0323\u0326\3\2\2\2\u0324\u0322\3\2\2\2\u0325\u031e\3\2\2\2\u0326",
    "\u0329\3\2\2\2\u0327\u0325\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u032a\3",
    "\2\2\2\u0329\u0327\3\2\2\2\u032a\u032b\5\60\31\2\u032b9\3\2\2\2\u032c",
    "\u032d\5\u010a\u0086\2\u032d\u032e\7\24\2\2\u032e\u032f\5\u00d0i\2\u032f",
    "\u0330\5\u0120\u0091\2\u0330\u0335\5\u0124\u0093\2\u0331\u0333\5\"\22",
    "\2\u0332\u0334\5\u0124\u0093\2\u0333\u0332\3\2\2\2\u0333\u0334\3\2\2",
    "\2\u0334\u0336\3\2\2\2\u0335\u0331\3\2\2\2\u0336\u0337\3\2\2\2\u0337",
    "\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0343\3\2\2\2\u0339\u033c\5",
    "\u012a\u0096\2\u033a\u033c\5\u0124\u0093\2\u033b\u0339\3\2\2\2\u033b",
    "\u033a\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u0340\3\2\2\2\u033d\u033e\5",
    ",\27\2\u033e\u033f\5\u0124\u0093\2\u033f\u0341\3\2\2\2\u0340\u033d\3",
    "\2\2\2\u0340\u0341\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0344\5\60\31\2",
    "\u0343\u033b\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0343\3\2\2\2\u0345\u0346",
    "\3\2\2\2\u0346\u0349\3\2\2\2\u0347\u034a\5\u012a\u0096\2\u0348\u034a",
    "\5\u0124\u0093\2\u0349\u0347\3\2\2\2\u0349\u0348\3\2\2\2\u034a\u034e",
    "\3\2\2\2\u034b\u034c\5\"\22\2\u034c\u034d\5\u0124\u0093\2\u034d\u034f",
    "\3\2\2\2\u034e\u034b\3\2\2\2\u034e\u034f\3\2\2\2\u034f;\3\2\2\2\u0350",
    "\u0351\5\u010a\u0086\2\u0351\u0352\7\25\2\2\u0352\u0353\5\u00d0i\2\u0353",
    "\u0354\5\u0120\u0091\2\u0354\u0359\5\u0124\u0093\2\u0355\u0357\5\"\22",
    "\2\u0356\u0358\5\u0124\u0093\2\u0357\u0356\3\2\2\2\u0357\u0358\3\2\2",
    "\2\u0358\u035a\3\2\2\2\u0359\u0355\3\2\2\2\u035a\u035b\3\2\2\2\u035b",
    "\u0359\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035e\5",
    "\60\31\2\u035e=\3\2\2\2\u035f\u0360\5\u010a\u0086\2\u0360\u0361\7\26",
    "\2\2\u0361\u0362\5\u00d0i\2\u0362\u0363\5\u0120\u0091\2\u0363\u036b",
    "\5\u0124\u0093\2\u0364\u0368\5\"\22\2\u0365\u0367\5\u0124\u0093\2\u0366",
    "\u0365\3\2\2\2\u0367\u036a\3\2\2\2\u0368\u0366\3\2\2\2\u0368\u0369\3",
    "\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368\3\2\2\2\u036b\u0364\3\2\2\2\u036c",
    "\u036d\3\2\2\2\u036d\u036b\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u037f\3",
    "\2\2\2\u036f\u0372\5\u012a\u0096\2\u0370\u0372\5\u0124\u0093\2\u0371",
    "\u036f\3\2\2\2\u0371\u0370\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0376\3",
    "\2\2\2\u0373\u0374\5,\27\2\u0374\u0375\5\u0124\u0093\2\u0375\u0377\3",
    "\2\2\2\u0376\u0373\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0378\3\2\2\2\u0378",
    "\u037c\5\60\31\2\u0379\u037b\5\u0124\u0093\2\u037a\u0379\3\2\2\2\u037b",
    "\u037e\3\2\2\2\u037c\u037a\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u0380\3",
    "\2\2\2\u037e\u037c\3\2\2\2\u037f\u0371\3\2\2\2\u0380\u0381\3\2\2\2\u0381",
    "\u037f\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0385\3\2\2\2\u0383\u0386\5",
    "\u012a\u0096\2\u0384\u0386\5\u0124\u0093\2\u0385\u0383\3\2\2\2\u0385",
    "\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u038a\3\2\2\2\u0387\u0388\5",
    "\"\22\2\u0388\u0389\5\u0124\u0093\2\u0389\u038b\3\2\2\2\u038a\u0387",
    "\3\2\2\2\u038a\u038b\3\2\2\2\u038b?\3\2\2\2\u038c\u038d\5\u010a\u0086",
    "\2\u038d\u038e\7\27\2\2\u038e\u038f\5\u00d0i\2\u038f\u0390\5\u0120\u0091",
    "\2\u0390\u0398\5\u0124\u0093\2\u0391\u0395\5\"\22\2\u0392\u0394\5\u0124",
    "\u0093\2\u0393\u0392\3\2\2\2\u0394\u0397\3\2\2\2\u0395\u0393\3\2\2\2",
    "\u0395\u0396\3\2\2\2\u0396\u0399\3\2\2\2\u0397\u0395\3\2\2\2\u0398\u0391",
    "\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u0398\3\2\2\2\u039a\u039b\3\2\2\2",
    "\u039b\u03a8\3\2\2\2\u039c\u039e\5\u014c\u00a7\2\u039d\u039c\3\2\2\2",
    "\u039d\u039e\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a3\5\u0124\u0093\2",
    "\u03a0\u03a3\5\u00f8}\2\u03a1\u03a3\5B\"\2\u03a2\u039d\3\2\2\2\u03a2",
    "\u03a0\3\2\2\2\u03a2\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a2\3",
    "\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a7\3\2\2\2\u03a6\u03a2\3\2\2\2\u03a7",
    "\u03aa\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9A\3\2\2",
    "\2\u03aa\u03a8\3\2\2\2\u03ab\u03ad\5F$\2\u03ac\u03ab\3\2\2\2\u03ac\u03ad",
    "\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\5H%\2\u03afC\3\2\2\2\u03b0",
    "\u03b2\5F$\2\u03b1\u03b0\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3\2",
    "\2\2\u03b3\u03b4\5\60\31\2\u03b4E\3\2\2\2\u03b5\u03b6\5\u0118\u008d",
    "\2\u03b6\u03b7\5\u00f8}\2\u03b7\u03b8\5\u0120\u0091\2\u03b8G\3\2\2\2",
    "\u03b9\u03bd\5\62\32\2\u03ba\u03bd\5\64\33\2\u03bb\u03bd\5\66\34\2\u03bc",
    "\u03b9\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc\u03bb\3\2\2\2\u03bd\u03c3\3",
    "\2\2\2\u03be\u03c2\5\62\32\2\u03bf\u03c2\5\64\33\2\u03c0\u03c2\5\66",
    "\34\2\u03c1\u03be\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1\u03c0\3\2\2\2\u03c2",
    "\u03c5\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4I\3\2\2",
    "\2\u03c5\u03c3\3\2\2\2\u03c6\u03c7\5\u010a\u0086\2\u03c7\u03c8\7\30",
    "\2\2\u03c8\u03c9\5\u00d0i\2\u03c9\u03cd\5\u0120\u0091\2\u03ca\u03cc",
    "\5\u0124\u0093\2\u03cb\u03ca\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd\u03cb",
    "\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03de\3\2\2\2\u03cf\u03cd\3\2\2\2",
    "\u03d0\u03d4\5\"\22\2\u03d1\u03d3\5\u0124\u0093\2\u03d2\u03d1\3\2\2",
    "\2\u03d3\u03d6\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5",
    "\u03df\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d7\u03db\5H%\2\u03d8\u03da\5\u0124",
    "\u0093\2\u03d9\u03d8\3\2\2\2\u03da\u03dd\3\2\2\2\u03db\u03d9\3\2\2\2",
    "\u03db\u03dc\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2\u03de\u03d0",
    "\3\2\2\2\u03de\u03d7\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03de\3\2\2\2",
    "\u03e0\u03e1\3\2\2\2\u03e1K\3\2\2\2\u03e2\u03e3\5\u010a\u0086\2\u03e3",
    "\u03e4\7\31\2\2\u03e4\u03e5\5\u00d0i\2\u03e5\u03e6\5\u0120\u0091\2\u03e6",
    "\u03f0\5\u0124\u0093\2\u03e7\u03eb\5\"\22\2\u03e8\u03ea\5\u0124\u0093",
    "\2\u03e9\u03e8\3\2\2\2\u03ea\u03ed\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb",
    "\u03ec\3\2\2\2\u03ec\u03ef\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee\u03e7\3",
    "\2\2\2\u03ef\u03f2\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1",
    "\u03ff\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f3\u03f5\5\u0124\u0093\2\u03f4",
    "\u03f3\3\2\2\2\u03f5\u03f8\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7\3",
    "\2\2\2\u03f7\u03fb\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f9\u03fc\5P)\2\u03fa",
    "\u03fc\5\"\22\2\u03fb\u03f9\3\2\2\2\u03fb\u03fa\3\2\2\2\u03fc\u03fe",
    "\3\2\2\2\u03fd\u03f6\3\2\2\2\u03fe\u0401\3\2\2\2\u03ff\u03fd\3\2\2\2",
    "\u03ff\u0400\3\2\2\2\u0400\u0405\3\2\2\2\u0401\u03ff\3\2\2\2\u0402\u0404",
    "\5\u0124\u0093\2\u0403\u0402\3\2\2\2\u0404\u0407\3\2\2\2\u0405\u0403",
    "\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u041e\3\2\2\2\u0407\u0405\3\2\2\2",
    "\u0408\u0409\5\u010a\u0086\2\u0409\u040a\7\31\2\2\u040a\u040b\7\32\2",
    "\2\u040b\u040c\5\u00d0i\2\u040c\u040d\5\u0120\u0091\2\u040d\u0417\5",
    "\u0124\u0093\2\u040e\u0412\5\"\22\2\u040f\u0411\5\u0124\u0093\2\u0410",
    "\u040f\3\2\2\2\u0411\u0414\3\2\2\2\u0412\u0410\3\2\2\2\u0412\u0413\3",
    "\2\2\2\u0413\u0416\3\2\2\2\u0414\u0412\3\2\2\2\u0415\u040e\3\2\2\2\u0416",
    "\u0419\3\2\2\2\u0417\u0415\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u041b\3",
    "\2\2\2\u0419\u0417\3\2\2\2\u041a\u041c\5N(\2\u041b\u041a\3\2\2\2\u041b",
    "\u041c\3\2\2\2\u041c\u041e\3\2\2\2\u041d\u03e2\3\2\2\2\u041d\u0408\3",
    "\2\2\2\u041eM\3\2\2\2\u041f\u0420\5\u010a\u0086\2\u0420\u0421\7\33\2",
    "\2\u0421\u0422\5\u00d0i\2\u0422\u0423\5\u0120\u0091\2\u0423\u0430\5",
    "\u0124\u0093\2\u0424\u0427\5\"\22\2\u0425\u0427\5D#\2\u0426\u0424\3",
    "\2\2\2\u0426\u0425\3\2\2\2\u0427\u042b\3\2\2\2\u0428\u042a\5\u0124\u0093",
    "\2\u0429\u0428\3\2\2\2\u042a\u042d\3\2\2\2\u042b\u0429\3\2\2\2\u042b",
    "\u042c\3\2\2\2\u042c\u042f\3\2\2\2\u042d\u042b\3\2\2\2\u042e\u0426\3",
    "\2\2\2\u042f\u0432\3\2\2\2\u0430\u042e\3\2\2\2\u0430\u0431\3\2\2\2\u0431",
    "\u0434\3\2\2\2\u0432\u0430\3\2\2\2\u0433\u0435\5\u0124\u0093\2\u0434",
    "\u0433\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0434\3\2\2\2\u0436\u0437\3",
    "\2\2\2\u0437\u043c\3\2\2\2\u0438\u043b\5\u014a\u00a6\2\u0439\u043b\5",
    "D#\2\u043a\u0438\3\2\2\2\u043a\u0439\3\2\2\2\u043b\u043e\3\2\2\2\u043c",
    "\u043a\3\2\2\2\u043c\u043d\3\2\2\2\u043dO\3\2\2\2\u043e\u043c\3\2\2",
    "\2\u043f\u0440\5\u0112\u008a\2\u0440\u0442\7\34\2\2\u0441\u0443\5\u0124",
    "\u0093\2\u0442\u0441\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0444\3\2\2\2",
    "\u0444\u0446\5\u00f6|\2\u0445\u0447\5\u0124\u0093\2\u0446\u0445\3\2",
    "\2\2\u0446\u0447\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449\5\u0120\u0091",
    "\2\u0449Q\3\2\2\2\u044a\u044b\5\u0112\u008a\2\u044b\u044c\7\35\2\2\u044c",
    "\u044d\5\u0120\u0091\2\u044d\u0454\3\2\2\2\u044e\u044f\5\u0112\u008a",
    "\2\u044f\u0450\7\34\2\2\u0450\u0451\5\u014a\u00a6\2\u0451\u0452\5\u0120",
    "\u0091\2\u0452\u0454\3\2\2\2\u0453\u044a\3\2\2\2\u0453\u044e\3\2\2\2",
    "\u0454S\3\2\2\2\u0455\u0456\5\u010a\u0086\2\u0456\u0457\7\36\2\2\u0457",
    "\u0458\5\u00d0i\2\u0458\u045c\5\u0120\u0091\2\u0459\u045b\5\u0124\u0093",
    "\2\u045a\u0459\3\2\2\2\u045b\u045e\3\2\2\2\u045c\u045a\3\2\2\2\u045c",
    "\u045d\3\2\2\2\u045d\u0468\3\2\2\2\u045e\u045c\3\2\2\2\u045f\u0463\5",
    "\"\22\2\u0460\u0462\5\u0124\u0093\2\u0461\u0460\3\2\2\2\u0462\u0465",
    "\3\2\2\2\u0463\u0461\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0467\3\2\2\2",
    "\u0465\u0463\3\2\2\2\u0466\u045f\3\2\2\2\u0467\u046a\3\2\2\2\u0468\u0466",
    "\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u0480\3\2\2\2\u046a\u0468\3\2\2\2",
    "\u046b\u047b\5\u012a\u0096\2\u046c\u046e\5\u0124\u0093\2\u046d\u046c",
    "\3\2\2\2\u046e\u0471\3\2\2\2\u046f\u046d\3\2\2\2\u046f\u0470\3\2\2\2",
    "\u0470\u0472\3\2\2\2\u0471\u046f\3\2\2\2\u0472\u0476\5V,\2\u0473\u0475",
    "\5\u0124\u0093\2\u0474\u0473\3\2\2\2\u0475\u0478\3\2\2\2\u0476\u0474",
    "\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u047a\3\2\2\2\u0478\u0476\3\2\2\2",
    "\u0479\u046f\3\2\2\2\u047a\u047d\3\2\2\2\u047b\u0479\3\2\2\2\u047b\u047c",
    "\3\2\2\2\u047c\u047f\3\2\2\2\u047d\u047b\3\2\2\2\u047e\u046b\3\2\2\2",
    "\u047f\u0482\3\2\2\2\u0480\u047e\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0483",
    "\3\2\2\2\u0482\u0480\3\2\2\2\u0483\u0484\5\u012a\u0096\2\u0484U\3\2",
    "\2\2\u0485\u0488\5\"\22\2\u0486\u0488\5P)\2\u0487\u0485\3\2\2\2\u0487",
    "\u0486\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u0487\3\2\2\2\u0489\u048a\3",
    "\2\2\2\u048a\u048d\3\2\2\2\u048b\u048e\5Z.\2\u048c\u048e\5X-\2\u048d",
    "\u048b\3\2\2\2\u048d\u048c\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u0492\3",
    "\2\2\2\u048f\u0492\5Z.\2\u0490\u0492\5X-\2\u0491\u0487\3\2\2\2\u0491",
    "\u048f\3\2\2\2\u0491\u0490\3\2\2\2\u0492W\3\2\2\2\u0493\u0494\5\u0112",
    "\u008a\2\u0494\u0495\7\37\2\2\u0495\u0496\5\u0120\u0091\2\u0496Y\3\2",
    "\2\2\u0497\u0498\5\u0112\u008a\2\u0498\u0499\7 \2\2\u0499\u049a\5\u0120",
    "\u0091\2\u049a[\3\2\2\2\u049b\u049c\5\u010a\u0086\2\u049c\u049d\7!\2",
    "\2\u049d\u049e\5\u00d0i\2\u049e\u04a0\5\u0120\u0091\2\u049f\u04a1\5",
    "\u0124\u0093\2\u04a0\u049f\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a0\3",
    "\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a8\5,\27\2\u04a5",
    "\u04a7\5\u0124\u0093\2\u04a6\u04a5\3\2\2\2\u04a7\u04aa\3\2\2\2\u04a8",
    "\u04a6\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04ae\3\2\2\2\u04aa\u04a8\3",
    "\2\2\2\u04ab\u04ac\5\u012a\u0096\2\u04ac\u04ad\5V,\2\u04ad\u04af\3\2",
    "\2\2\u04ae\u04ab\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b0",
    "\u04b1\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b3\5\u012a\u0096\2\u04b3",
    "]\3\2\2\2\u04b4\u04b6\5\u00f8}\2\u04b5\u04b4\3\2\2\2\u04b6\u04b7\3\2",
    "\2\2\u04b7\u04b5\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04bd\3\2\2\2\u04b9",
    "\u04ba\5\u0112\u008a\2\u04ba\u04bb\7\35\2\2\u04bb\u04bc\5\u0120\u0091",
    "\2\u04bc\u04be\3\2\2\2\u04bd\u04b9\3\2\2\2\u04bd\u04be\3\2\2\2\u04be",
    "\u04c1\3\2\2\2\u04bf\u04c1\5\u0142\u00a2\2\u04c0\u04b5\3\2\2\2\u04c0",
    "\u04bf\3\2\2\2\u04c1_\3\2\2\2\u04c2\u04c4\5\u00f8}\2\u04c3\u04c2\3\2",
    "\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6",
    "\u04cd\3\2\2\2\u04c7\u04c9\5\u0126\u0094\2\u04c8\u04ca\5\u00f8}\2\u04c9",
    "\u04c8\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cb\u04cc\3",
    "\2\2\2\u04cc\u04ce\3\2\2\2\u04cd\u04c7\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce",
    "\u04d3\3\2\2\2\u04cf\u04d1\5\u014c\u00a7\2\u04d0\u04cf\3\2\2\2\u04d0",
    "\u04d1\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d4\5R*\2\u04d3\u04d0\3\2",
    "\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d7\3\2\2\2\u04d5\u04d7\5\u0142\u00a2",
    "\2\u04d6\u04c3\3\2\2\2\u04d6\u04d5\3\2\2\2\u04d7a\3\2\2\2\u04d8\u04d9",
    "\5d\63\2\u04d9\u04da\5\u0128\u0095\2\u04da\u04db\5f\64\2\u04dbc\3\2",
    "\2\2\u04dc\u04de\7\b\2\2\u04dd\u04df\5\u00f8}\2\u04de\u04dd\3\2\2\2",
    "\u04df\u04e0\3\2\2\2\u04e0\u04de\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2",
    "\3\2\2\2\u04e2\u04e3\5\u0120\u0091\2\u04e3e\3\2\2\2\u04e4\u04e6\7\b",
    "\2\2\u04e5\u04e7\5\u00f8}\2\u04e6\u04e5\3\2\2\2\u04e7\u04e8\3\2\2\2",
    "\u04e8\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04eb",
    "\5\u0120\u0091\2\u04ebg\3\2\2\2\u04ec\u04ed\5\u012a\u0096\2\u04ed\u04ee",
    "\5t;\2\u04ee\u04ef\5\u0128\u0095\2\u04ef\u04f0\5v<\2\u04f0i\3\2\2\2",
    "\u04f1\u04f3\5h\65\2\u04f2\u04f1\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f2",
    "\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5k\3\2\2\2\u04f6\u04f7\5\u012a\u0096",
    "\2\u04f7\u04f8\5x=\2\u04f8\u04f9\5\u0128\u0095\2\u04f9\u04fa\5v<\2\u04fa",
    "m\3\2\2\2\u04fb\u04fd\5l\67\2\u04fc\u04fb\3\2\2\2\u04fd\u04fe\3\2\2",
    "\2\u04fe\u04fc\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ffo\3\2\2\2\u0500\u0501",
    "\5\u012a\u0096\2\u0501\u0502\5z>\2\u0502\u0503\5\u0128\u0095\2\u0503",
    "\u0504\5v<\2\u0504\u0506\3\2\2\2\u0505\u0500\3\2\2\2\u0506\u0507\3\2",
    "\2\2\u0507\u0505\3\2\2\2\u0507\u0508\3\2\2\2\u0508q\3\2\2\2\u0509\u050b",
    "\5p9\2\u050a\u0509\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u050a\3\2\2\2\u050c",
    "\u050d\3\2\2\2\u050ds\3\2\2\2\u050e\u0510\5\u00fe\u0080\2\u050f\u050e",
    "\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u0512\3\2\2\2\u0511\u0513\5\u00f8",
    "}\2\u0512\u0511\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0512\3\2\2\2\u0514",
    "\u0515\3\2\2\2\u0515\u0517\3\2\2\2\u0516\u0518\5R*\2\u0517\u0516\3\2",
    "\2\2\u0517\u0518\3\2\2\2\u0518\u051b\3\2\2\2\u0519\u051b\5\u0142\u00a2",
    "\2\u051a\u050f\3\2\2\2\u051a\u0519\3\2\2\2\u051bu\3\2\2\2\u051c\u051e",
    "\5\u00f8}\2\u051d\u051c\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u051d\3\2",
    "\2\2\u051f\u0520\3\2\2\2\u0520\u0527\3\2\2\2\u0521\u0523\5\u0126\u0094",
    "\2\u0522\u0524\5\u00f8}\2\u0523\u0522\3\2\2\2\u0524\u0525\3\2\2\2\u0525",
    "\u0523\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0528\3\2\2\2\u0527\u0521\3",
    "\2\2\2\u0527\u0528\3\2\2\2\u0528\u052d\3\2\2\2\u0529\u052b\5\u014c\u00a7",
    "\2\u052a\u0529\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u052c\3\2\2\2\u052c",
    "\u052e\5R*\2\u052d\u052a\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u0531\3\2",
    "\2\2\u052f\u0531\5\u0142\u00a2\2\u0530\u051d\3\2\2\2\u0530\u052f\3\2",
    "\2\2\u0531w\3\2\2\2\u0532\u0533\5\u011e\u0090\2\u0533\u0535\5\u00d2",
    "j\2\u0534\u0536\5\u00f2z\2\u0535\u0534\3\2\2\2\u0535\u0536\3\2\2\2\u0536",
    "\u0537\3\2\2\2\u0537\u0538\7\"\2\2\u0538\u0539\5\u00f4{\2\u0539\u053a",
    "\5\u0120\u0091\2\u053ay\3\2\2\2\u053b\u053c\5\u011e\u0090\2\u053c\u053d",
    "\5\u00d6l\2\u053d\u053e\7\"\2\2\u053e\u053f\5\u00f4{\2\u053f\u0540\5",
    "\u0120\u0091\2\u0540{\3\2\2\2\u0541\u0542\5\u010a\u0086\2\u0542\u0543",
    "\7#\2\2\u0543\u0544\5\u00d0i\2\u0544\u0545\5\u0120\u0091\2\u0545\u054c",
    "\5\u0124\u0093\2\u0546\u0548\5\"\22\2\u0547\u0549\5\u0124\u0093\2\u0548",
    "\u0547\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u054b\3\2\2\2\u054a\u0546\3",
    "\2\2\2\u054b\u054e\3\2\2\2\u054c\u054a\3\2\2\2\u054c\u054d\3\2\2\2\u054d",
    "\u0552\3\2\2\2\u054e\u054c\3\2\2\2\u054f\u0550\5\u012a\u0096\2\u0550",
    "\u0551\5b\62\2\u0551\u0553\3\2\2\2\u0552\u054f\3\2\2\2\u0552\u0553\3",
    "\2\2\2\u0553\u0554\3\2\2\2\u0554\u0555\5j\66\2\u0555\u0559\5\u012a\u0096",
    "\2\u0556\u0558\5\u0124\u0093\2\u0557\u0556\3\2\2\2\u0558\u055b\3\2\2",
    "\2\u0559\u0557\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u055d\3\2\2\2\u055b",
    "\u0559\3\2\2\2\u055c\u055e\5\"\22\2\u055d\u055c\3\2\2\2\u055e\u055f",
    "\3\2\2\2\u055f\u0560\3\2\2\2\u055f\u055d\3\2\2\2\u0560}\3\2\2\2\u0561",
    "\u0562\5\u010a\u0086\2\u0562\u0563\7$\2\2\u0563\u0564\5\u00d0i\2\u0564",
    "\u0565\5\u0120\u0091\2\u0565\u056c\5\u0124\u0093\2\u0566\u0568\5\"\22",
    "\2\u0567\u0569\5\u0124\u0093\2\u0568\u0567\3\2\2\2\u0568\u0569\3\2\2",
    "\2\u0569\u056b\3\2\2\2\u056a\u0566\3\2\2\2\u056b\u056e\3\2\2\2\u056c",
    "\u056a\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u0572\3\2\2\2\u056e\u056c\3",
    "\2\2\2\u056f\u0570\5\u012a\u0096\2\u0570\u0571\5b\62\2\u0571\u0573\3",
    "\2\2\2\u0572\u056f\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0574\3\2\2\2\u0574",
    "\u0575\5j\66\2\u0575\u0579\5\u012a\u0096\2\u0576\u0578\5\u0124\u0093",
    "\2\u0577\u0576\3\2\2\2\u0578\u057b\3\2\2\2\u0579\u0577\3\2\2\2\u0579",
    "\u057a\3\2\2\2\u057a\u057d\3\2\2\2\u057b\u0579\3\2\2\2\u057c\u057e\5",
    "\"\22\2\u057d\u057c\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0580\3\2\2\2",
    "\u057f\u057d\3\2\2\2\u0580\177\3\2\2\2\u0581\u0582\5\u010a\u0086\2\u0582",
    "\u0583\7%\2\2\u0583\u0584\5\u00d0i\2\u0584\u0585\5\u0120\u0091\2\u0585",
    "\u058c\5\u0124\u0093\2\u0586\u0588\5\"\22\2\u0587\u0589\5\u0124\u0093",
    "\2\u0588\u0587\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058b\3\2\2\2\u058a",
    "\u0586\3\2\2\2\u058b\u058e\3\2\2\2\u058c\u058a\3\2\2\2\u058c\u058d\3",
    "\2\2\2\u058d\u0592\3\2\2\2\u058e\u058c\3\2\2\2\u058f\u0590\5\u012a\u0096",
    "\2\u0590\u0591\5b\62\2\u0591\u0593\3\2\2\2\u0592\u058f\3\2\2\2\u0592",
    "\u0593\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0595\5n8\2\u0595\u0596\5\u012a",
    "\u0096\2\u0596\u0081\3\2\2\2\u0597\u0598\5\u010a\u0086\2\u0598\u0599",
    "\7&\2\2\u0599\u059a\5\u00d0i\2\u059a\u059b\5\u0120\u0091\2\u059b\u05a2",
    "\5\u0124\u0093\2\u059c\u059e\5\"\22\2\u059d\u059f\5\u0124\u0093\2\u059e",
    "\u059d\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a1\3\2\2\2\u05a0\u059c\3",
    "\2\2\2\u05a1\u05a4\3\2\2\2\u05a2\u05a0\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3",
    "\u05a8\3\2\2\2\u05a4\u05a2\3\2\2\2\u05a5\u05a6\5\u012a\u0096\2\u05a6",
    "\u05a7\5b\62\2\u05a7\u05a9\3\2\2\2\u05a8\u05a5\3\2\2\2\u05a8\u05a9\3",
    "\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u05ab\5p9\2\u05ab\u05ac\5\u012a\u0096",
    "\2\u05ac\u0083\3\2\2\2\u05ad\u05ae\5\u010a\u0086\2\u05ae\u05af\7\'\2",
    "\2\u05af\u05b0\5\u00d0i\2\u05b0\u05b1\5\u0120\u0091\2\u05b1\u05b8\5",
    "\u0124\u0093\2\u05b2\u05b4\5\"\22\2\u05b3\u05b5\5\u0124\u0093\2\u05b4",
    "\u05b3\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6\u05b2\3",
    "\2\2\2\u05b7\u05ba\3\2\2\2\u05b8\u05b6\3\2\2\2\u05b8\u05b9\3\2\2\2\u05b9",
    "\u05be\3\2\2\2\u05ba\u05b8\3\2\2\2\u05bb\u05bc\5\u012a\u0096\2\u05bc",
    "\u05bd\5b\62\2\u05bd\u05bf\3\2\2\2\u05be\u05bb\3\2\2\2\u05be\u05bf\3",
    "\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c1\5j\66\2\u05c1\u05c2\5\u012a\u0096",
    "\2\u05c2\u0085\3\2\2\2\u05c3\u05c4\5\u010a\u0086\2\u05c4\u05c5\7(\2",
    "\2\u05c5\u05c6\5\u00d0i\2\u05c6\u05c8\5\u0120\u0091\2\u05c7\u05c9\5",
    "\u0124\u0093\2\u05c8\u05c7\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05c8\3",
    "\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05d3\3\2\2\2\u05cc\u05d2\5\u008aF",
    "\2\u05cd\u05cf\5\"\22\2\u05ce\u05d0\5\u0124\u0093\2\u05cf\u05ce\3\2",
    "\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05d2\3\2\2\2\u05d1\u05cc\3\2\2\2\u05d1",
    "\u05cd\3\2\2\2\u05d2\u05d5\3\2\2\2\u05d3\u05d1\3\2\2\2\u05d3\u05d4\3",
    "\2\2\2\u05d4\u05d6\3\2\2\2\u05d5\u05d3\3\2\2\2\u05d6\u05d7\5\60\31\2",
    "\u05d7\u0087\3\2\2\2\u05d8\u05d9\5\u010a\u0086\2\u05d9\u05da\7)\2\2",
    "\u05da\u05db\5\u00d0i\2\u05db\u05df\5\u0120\u0091\2\u05dc\u05de\5\u0124",
    "\u0093\2\u05dd\u05dc\3\2\2\2\u05de\u05e1\3\2\2\2\u05df\u05dd\3\2\2\2",
    "\u05df\u05e0\3\2\2\2\u05e0\u05e3\3\2\2\2\u05e1\u05df\3\2\2\2\u05e2\u05e4",
    "\5\u012a\u0096\2\u05e3\u05e2\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4\u05ef",
    "\3\2\2\2\u05e5\u05ee\5\u008aF\2\u05e6\u05ea\5\"\22\2\u05e7\u05e9\5\u0124",
    "\u0093\2\u05e8\u05e7\3\2\2\2\u05e9\u05ec\3\2\2\2\u05ea\u05e8\3\2\2\2",
    "\u05ea\u05eb\3\2\2\2\u05eb\u05ee\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ed\u05e5",
    "\3\2\2\2\u05ed\u05e6\3\2\2\2\u05ee\u05f1\3\2\2\2\u05ef\u05ed\3\2\2\2",
    "\u05ef\u05f0\3\2\2\2\u05f0\u05f6\3\2\2\2\u05f1\u05ef\3\2\2\2\u05f2\u05f4",
    "\5\u012a\u0096\2\u05f3\u05f2\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f5",
    "\3\2\2\2\u05f5\u05f7\5\60\31\2\u05f6\u05f3\3\2\2\2\u05f7\u05f8\3\2\2",
    "\2\u05f8\u05f6\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fb\3\2\2\2\u05fa",
    "\u05fc\5\u012a\u0096\2\u05fb\u05fa\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc",
    "\u0089\3\2\2\2\u05fd\u05fe\5\u0112\u008a\2\u05fe\u05ff\t\3\2\2\u05ff",
    "\u0600\5\u014a\u00a6\2\u0600\u0601\5\u0120\u0091\2\u0601\u008b\3\2\2",
    "\2\u0602\u0603\5\u010a\u0086\2\u0603\u0604\7,\2\2\u0604\u0605\5\u00d0",
    "i\2\u0605\u0609\5\u0120\u0091\2\u0606\u0608\5\u0124\u0093\2\u0607\u0606",
    "\3\2\2\2\u0608\u060b\3\2\2\2\u0609\u0607\3\2\2\2\u0609\u060a\3\2\2\2",
    "\u060a\u0615\3\2\2\2\u060b\u0609\3\2\2\2\u060c\u0610\5\"\22\2\u060d",
    "\u060f\5\u0124\u0093\2\u060e\u060d\3\2\2\2\u060f\u0612\3\2\2\2\u0610",
    "\u060e\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0614\3\2\2\2\u0612\u0610\3",
    "\2\2\2\u0613\u060c\3\2\2\2\u0614\u0617\3\2\2\2\u0615\u0613\3\2\2\2\u0615",
    "\u0616\3\2\2\2\u0616\u0628\3\2\2\2\u0617\u0615\3\2\2\2\u0618\u0625\5",
    "\u012c\u0097\2\u0619\u061b\5\u0124\u0093\2\u061a\u0619\3\2\2\2\u061b",
    "\u061e\3\2\2\2\u061c\u061a\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u0621\3",
    "\2\2\2\u061e\u061c\3\2\2\2\u061f\u0622\5\u00f8}\2\u0620\u0622\5\"\22",
    "\2\u0621\u061f\3\2\2\2\u0621\u0620\3\2\2\2\u0622\u0624\3\2\2\2\u0623",
    "\u061c\3\2\2\2\u0624\u0627\3\2\2\2\u0625\u0623\3\2\2\2\u0625\u0626\3",
    "\2\2\2\u0626\u0629\3\2\2\2\u0627\u0625\3\2\2\2\u0628\u0618\3\2\2\2\u0629",
    "\u062a\3\2\2\2\u062a\u0628\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062c\3",
    "\2\2\2\u062c\u062d\5\u012c\u0097\2\u062d\u008d\3\2\2\2\u062e\u062f\5",
    "\u010a\u0086\2\u062f\u0630\7-\2\2\u0630\u0631\5\u00d0i\2\u0631\u0632",
    "\5\u0120\u0091\2\u0632\u0633\5\u0124\u0093\2\u0633\u0637\5,\27\2\u0634",
    "\u0636\5\u0124\u0093\2\u0635\u0634\3\2\2\2\u0636\u0639\3\2\2\2\u0637",
    "\u0635\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u063a\3\2\2\2\u0639\u0637\3",
    "\2\2\2\u063a\u063c\5\60\31\2\u063b\u063d\5\u0124\u0093\2\u063c\u063b",
    "\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063c\3\2\2\2\u063e\u063f\3\2\2\2",
    "\u063f\u008f\3\2\2\2\u0640\u0641\5\u010a\u0086\2\u0641\u0642\7.\2\2",
    "\u0642\u0643\5\u00d0i\2\u0643\u0644\5\u0120\u0091\2\u0644\u0651\5\u0124",
    "\u0093\2\u0645\u0648\5\"\22\2\u0646\u0648\5\u0092J\2\u0647\u0645\3\2",
    "\2\2\u0647\u0646\3\2\2\2\u0648\u064c\3\2\2\2\u0649\u064b\5\u0124\u0093",
    "\2\u064a\u0649\3\2\2\2\u064b\u064e\3\2\2\2\u064c\u064a\3\2\2\2\u064c",
    "\u064d\3\2\2\2\u064d\u0650\3\2\2\2\u064e\u064c\3\2\2\2\u064f\u0647\3",
    "\2\2\2\u0650\u0653\3\2\2\2\u0651\u064f\3\2\2\2\u0651\u0652\3\2\2\2\u0652",
    "\u0091\3\2\2\2\u0653\u0651\3\2\2\2\u0654\u0655\5\u0118\u008d\2\u0655",
    "\u0656\5\u00f8}\2\u0656\u0658\5\u0120\u0091\2\u0657\u0659\5\u0094K\2",
    "\u0658\u0657\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u0093\3\2\2\2\u065a\u065b",
    "\5\u0112\u008a\2\u065b\u065c\7.\2\2\u065c\u065d\7\7\2\2\u065d\u065e",
    "\5\u0146\u00a4\2\u065e\u065f\5\u0120\u0091\2\u065f\u0095\3\2\2\2\u0660",
    "\u0661\5\u010a\u0086\2\u0661\u0668\7/\2\2\u0662\u0666\7\7\2\2\u0663",
    "\u0667\5\u00d8m\2\u0664\u0667\5\u00d4k\2\u0665\u0667\5\u00dco\2\u0666",
    "\u0663\3\2\2\2\u0666\u0664\3\2\2\2\u0666\u0665\3\2\2\2\u0667\u0669\3",
    "\2\2\2\u0668\u0662\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u066a\3\2\2\2\u066a",
    "\u066b\5\u0120\u0091\2\u066b\u0675\5\u0124\u0093\2\u066c\u0670\5\"\22",
    "\2\u066d\u066f\5\u0124\u0093\2\u066e\u066d\3\2\2\2\u066f\u0672\3\2\2",
    "\2\u0670\u066e\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0674\3\2\2\2\u0672",
    "\u0670\3\2\2\2\u0673\u066c\3\2\2\2\u0674\u0677\3\2\2\2\u0675\u0673\3",
    "\2\2\2\u0675\u0676\3\2\2\2\u0676\u0097\3\2\2\2\u0677\u0675\3\2\2\2\u0678",
    "\u0679\5\u010a\u0086\2\u0679\u067a\7\60\2\2\u067a\u067b\5\u00d0i\2\u067b",
    "\u067c\5\u0120\u0091\2\u067c\u0686\5\u0124\u0093\2\u067d\u0681\5\"\22",
    "\2\u067e\u0680\5\u0124\u0093\2\u067f\u067e\3\2\2\2\u0680\u0683\3\2\2",
    "\2\u0681\u067f\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0685\3\2\2\2\u0683",
    "\u0681\3\2\2\2\u0684\u067d\3\2\2\2\u0685\u0688\3\2\2\2\u0686\u0684\3",
    "\2\2\2\u0686\u0687\3\2\2\2\u0687\u0099\3\2\2\2\u0688\u0686\3\2\2\2\u0689",
    "\u068a\5\u010a\u0086\2\u068a\u068b\7\61\2\2\u068b\u068c\5\u00d0i\2\u068c",
    "\u068d\5\u0120\u0091\2\u068d\u0697\5\u0124\u0093\2\u068e\u0692\5\"\22",
    "\2\u068f\u0691\5\u0124\u0093\2\u0690\u068f\3\2\2\2\u0691\u0694\3\2\2",
    "\2\u0692\u0690\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0696\3\2\2\2\u0694",
    "\u0692\3\2\2\2\u0695\u068e\3\2\2\2\u0696\u0699\3\2\2\2\u0697\u0695\3",
    "\2\2\2\u0697\u0698\3\2\2\2\u0698\u009b\3\2\2\2\u0699\u0697\3\2\2\2\u069a",
    "\u069b\5\u010a\u0086\2\u069b\u069c\7\62\2\2\u069c\u069d\5\u00d0i\2\u069d",
    "\u06a1\5\u0120\u0091\2\u069e\u06a0\5\u0124\u0093\2\u069f\u069e\3\2\2",
    "\2\u06a0\u06a3\3\2\2\2\u06a1\u069f\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2",
    "\u06a7\3\2\2\2\u06a3\u06a1\3\2\2\2\u06a4\u06a5\5,\27\2\u06a5\u06a6\5",
    "\u0124\u0093\2\u06a6\u06a8\3\2\2\2\u06a7\u06a4\3\2\2\2\u06a7\u06a8\3",
    "\2\2\2\u06a8\u06aa\3\2\2\2\u06a9\u06ab\5\u00f6|\2\u06aa\u06a9\3\2\2",
    "\2\u06aa\u06ab\3\2\2\2\u06ab\u009d\3\2\2\2\u06ac\u06ad\5\u010a\u0086",
    "\2\u06ad\u06ae\7\63\2\2\u06ae\u06af\5\u00d0i\2\u06af\u06b0\5\u0120\u0091",
    "\2\u06b0\u06ba\5\u0124\u0093\2\u06b1\u06b5\5\"\22\2\u06b2\u06b4\5\u0124",
    "\u0093\2\u06b3\u06b2\3\2\2\2\u06b4\u06b7\3\2\2\2\u06b5\u06b3\3\2\2\2",
    "\u06b5\u06b6\3\2\2\2\u06b6\u06b9\3\2\2\2\u06b7\u06b5\3\2\2\2\u06b8\u06b1",
    "\3\2\2\2\u06b9\u06bc\3\2\2\2\u06ba\u06b8\3\2\2\2\u06ba\u06bb\3\2\2\2",
    "\u06bb\u06be\3\2\2\2\u06bc\u06ba\3\2\2\2\u06bd\u06bf\5\u00f6|\2\u06be",
    "\u06bd\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u009f\3\2\2\2\u06c0\u06c1\5",
    "\u010a\u0086\2\u06c1\u06c2\7\64\2\2\u06c2\u06c3\5\u00d0i\2\u06c3\u06c4",
    "\5\u0120\u0091\2\u06c4\u06c5\5\u0124\u0093\2\u06c5\u06c6\5\u00a6T\2",
    "\u06c6\u06c7\5\u0128\u0095\2\u06c7\u06c8\5\u00a6T\2\u06c8\u00a1\3\2",
    "\2\2\u06c9\u06ca\5\u010a\u0086\2\u06ca\u06cb\7\65\2\2\u06cb\u06cc\5",
    "\u00d0i\2\u06cc\u06d0\5\u0120\u0091\2\u06cd\u06cf\5\u0124\u0093\2\u06ce",
    "\u06cd\3\2\2\2\u06cf\u06d2\3\2\2\2\u06d0\u06ce\3\2\2\2\u06d0\u06d1\3",
    "\2\2\2\u06d1\u06d3\3\2\2\2\u06d2\u06d0\3\2\2\2\u06d3\u06d4\5\u012a\u0096",
    "\2\u06d4\u06d5\5\u00a6T\2\u06d5\u06d6\5\u0128\u0095\2\u06d6\u06de\5",
    "\u00a6T\2\u06d7\u06d8\5\u012a\u0096\2\u06d8\u06d9\5\u00a6T\2\u06d9\u06da",
    "\5\u0128\u0095\2\u06da\u06db\5\u00a6T\2\u06db\u06dd\3\2\2\2\u06dc\u06d7",
    "\3\2\2\2\u06dd\u06e0\3\2\2\2\u06de\u06dc\3\2\2\2\u06de\u06df\3\2\2\2",
    "\u06df\u06e1\3\2\2\2\u06e0\u06de\3\2\2\2\u06e1\u06e2\5\u012a\u0096\2",
    "\u06e2\u00a3\3\2\2\2\u06e3\u06e8\5\u00a8U\2\u06e4\u06e8\5\u00f8}\2\u06e5",
    "\u06e8\5,\27\2\u06e6\u06e8\5\u00e6t\2\u06e7\u06e3\3\2\2\2\u06e7\u06e4",
    "\3\2\2\2\u06e7\u06e5\3\2\2\2\u06e7\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2",
    "\u06e9\u06e7\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u00a5\3\2\2\2\u06eb\u06f1",
    "\5\u00a4S\2\u06ec\u06ed\5\u0126\u0094\2\u06ed\u06ee\5\u00a4S\2\u06ee",
    "\u06f0\3\2\2\2\u06ef\u06ec\3\2\2\2\u06f0\u06f3\3\2\2\2\u06f1\u06ef\3",
    "\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u00a7\3\2\2\2\u06f3\u06f1\3\2\2\2\u06f4",
    "\u06f8\5\u00aaV\2\u06f5\u06f7\5\u00aaV\2\u06f6\u06f5\3\2\2\2\u06f7\u06fa",
    "\3\2\2\2\u06f8\u06f6\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u00a9\3\2\2\2",
    "\u06fa\u06f8\3\2\2\2\u06fb\u06fc\5\u0112\u008a\2\u06fc\u06fd\5\u00f8",
    "}\2\u06fd\u06fe\7\7\2\2\u06fe\u0704\5\u00f8}\2\u06ff\u0700\5\u0124\u0093",
    "\2\u0700\u0701\5\u00f8}\2\u0701\u0703\3\2\2\2\u0702\u06ff\3\2\2\2\u0703",
    "\u0706\3\2\2\2\u0704\u0702\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0707\3",
    "\2\2\2\u0706\u0704\3\2\2\2\u0707\u0708\5\u0120\u0091\2\u0708\u00ab\3",
    "\2\2\2\u0709\u070a\5\u010a\u0086\2\u070a\u070b\7\66\2\2\u070b\u070c",
    "\5\u00d0i\2\u070c\u0710\5\u0120\u0091\2\u070d\u070f\5\u0124\u0093\2",
    "\u070e\u070d\3\2\2\2\u070f\u0712\3\2\2\2\u0710\u070e\3\2\2\2\u0710\u0711",
    "\3\2\2\2\u0711\u071a\3\2\2\2\u0712\u0710\3\2\2\2\u0713\u0717\5\"\22",
    "\2\u0714\u0716\5\u0124\u0093\2\u0715\u0714\3\2\2\2\u0716\u0719\3\2\2",
    "\2\u0717\u0715\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u071b\3\2\2\2\u0719",
    "\u0717\3\2\2\2\u071a\u0713\3\2\2\2\u071b\u071c\3\2\2\2\u071c\u071a\3",
    "\2\2\2\u071c\u071d\3\2\2\2\u071d\u00ad\3\2\2\2\u071e\u071f\5\u010a\u0086",
    "\2\u071f\u0720\7\67\2\2\u0720\u0721\5\u00d0i\2\u0721\u0722\5\u0120\u0091",
    "\2\u0722\u0723\5\u012a\u0096\2\u0723\u0724\5\u00b0Y\2\u0724\u0725\5",
    "\u012a\u0096\2\u0725\u0730\5\u00b2Z\2\u0726\u0727\5\u012a\u0096\2\u0727",
    "\u072d\5\u00b6\\\2\u0728\u0729\5\u012c\u0097\2\u0729\u072a\5\u00b8]",
    "\2\u072a\u072c\3\2\2\2\u072b\u0728\3\2\2\2\u072c\u072f\3\2\2\2\u072d",
    "\u072b\3\2\2\2\u072d\u072e\3\2\2\2\u072e\u0731\3\2\2\2\u072f\u072d\3",
    "\2\2\2\u0730\u0726\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0730\3\2\2\2\u0732",
    "\u0733\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0735\5\u012a\u0096\2\u0735",
    "\u00af\3\2\2\2\u0736\u073a\5\u00b4[\2\u0737\u0738\5\u0124\u0093\2\u0738",
    "\u0739\5\u00e4s\2\u0739\u073b\3\2\2\2\u073a\u0737\3\2\2\2\u073a\u073b",
    "\3\2\2\2\u073b\u00b1\3\2\2\2\u073c\u0740\5\u00b4[\2\u073d\u073e\5\u0124",
    "\u0093\2\u073e\u073f\5\u00e4s\2\u073f\u0741\3\2\2\2\u0740\u073d\3\2",
    "\2\2\u0740\u0741\3\2\2\2\u0741\u00b3\3\2\2\2\u0742\u0743\7\b\2\2\u0743",
    "\u0744\5\u00f8}\2\u0744\u0745\5\u0120\u0091\2\u0745\u00b5\3\2\2\2\u0746",
    "\u0747\5\u00f8}\2\u0747\u00b7\3\2\2\2\u0748\u0749\5\u00f8}\2\u0749\u00b9",
    "\3\2\2\2\u074a\u074b\5\u010a\u0086\2\u074b\u074c\78\2\2\u074c\u074d",
    "\5\u00d0i\2\u074d\u074e\5\u0120\u0091\2\u074e\u074f\5\u012a\u0096\2",
    "\u074f\u0750\5\u00b0Y\2\u0750\u0751\5\u012a\u0096\2\u0751\u075c\5\u00b2",
    "Z\2\u0752\u0753\5\u012a\u0096\2\u0753\u0759\5\u00b6\\\2\u0754\u0755",
    "\5\u012c\u0097\2\u0755\u0756\5\u00b8]\2\u0756\u0758\3\2\2\2\u0757\u0754",
    "\3\2\2\2\u0758\u075b\3\2\2\2\u0759\u0757\3\2\2\2\u0759\u075a\3\2\2\2",
    "\u075a\u075d\3\2\2\2\u075b\u0759\3\2\2\2\u075c\u0752\3\2\2\2\u075d\u075e",
    "\3\2\2\2\u075e\u075c\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u0760\3\2\2\2",
    "\u0760\u0761\5\u012a\u0096\2\u0761\u00bb\3\2\2\2\u0762\u0763\5\u010a",
    "\u0086\2\u0763\u0764\79\2\2\u0764\u0765\5\u00d0i\2\u0765\u0770\5\u0120",
    "\u0091\2\u0766\u0767\5\u012a\u0096\2\u0767\u076d\5\u00be`\2\u0768\u0769",
    "\5\u012c\u0097\2\u0769\u076a\5\u00be`\2\u076a\u076c\3\2\2\2\u076b\u0768",
    "\3\2\2\2\u076c\u076f\3\2\2\2\u076d\u076b\3\2\2\2\u076d\u076e\3\2\2\2",
    "\u076e\u0771\3\2\2\2\u076f\u076d\3\2\2\2\u0770\u0766\3\2\2\2\u0771\u0772",
    "\3\2\2\2\u0772\u0770\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0774\3\2\2\2",
    "\u0774\u0775\5\u012a\u0096\2\u0775\u00bd\3\2\2\2\u0776\u077e\5\u014a",
    "\u00a6\2\u0777\u077e\5,\27\2\u0778\u077e\5\u00e6t\2\u0779\u077e\5(\25",
    "\2\u077a\u077e\5\62\32\2\u077b\u077e\5\64\33\2\u077c\u077e\5\66\34\2",
    "\u077d\u0776\3\2\2\2\u077d\u0777\3\2\2\2\u077d\u0778\3\2\2\2\u077d\u0779",
    "\3\2\2\2\u077d\u077a\3\2\2\2\u077d\u077b\3\2\2\2\u077d\u077c\3\2\2\2",
    "\u077e\u077f\3\2\2\2\u077f\u077d\3\2\2\2\u077f\u0780\3\2\2\2\u0780\u00bf",
    "\3\2\2\2\u0781\u0782\5\u010a\u0086\2\u0782\u0783\7:\2\2\u0783\u0784",
    "\5\u00d0i\2\u0784\u0788\5\u0120\u0091\2\u0785\u0787\5\u0124\u0093\2",
    "\u0786\u0785\3\2\2\2\u0787\u078a\3\2\2\2\u0788\u0786\3\2\2\2\u0788\u0789",
    "\3\2\2\2\u0789\u0794\3\2\2\2\u078a\u0788\3\2\2\2\u078b\u078f\5\"\22",
    "\2\u078c\u078e\5\u0124\u0093\2\u078d\u078c\3\2\2\2\u078e\u0791\3\2\2",
    "\2\u078f\u078d\3\2\2\2\u078f\u0790\3\2\2\2\u0790\u0793\3\2\2\2\u0791",
    "\u078f\3\2\2\2\u0792\u078b\3\2\2\2\u0793\u0796\3\2\2\2\u0794\u0792\3",
    "\2\2\2\u0794\u0795\3\2\2\2\u0795\u07a0\3\2\2\2\u0796\u0794\3\2\2\2\u0797",
    "\u0798\5\u012a\u0096\2\u0798\u079c\5\u00f8}\2\u0799\u079a\5\u0124\u0093",
    "\2\u079a\u079b\5\u00c4c\2\u079b\u079d\3\2\2\2\u079c\u0799\3\2\2\2\u079d",
    "\u079e\3\2\2\2\u079e\u079c\3\2\2\2\u079e\u079f\3\2\2\2\u079f\u07a1\3",
    "\2\2\2\u07a0\u0797\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a0\3\2\2\2\u07a2",
    "\u07a3\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a5\5\u012a\u0096\2\u07a5",
    "\u00c1\3\2\2\2\u07a6\u07a7\5\u010a\u0086\2\u07a7\u07a8\7;\2\2\u07a8",
    "\u07a9\5\u00d0i\2\u07a9\u07ad\5\u0120\u0091\2\u07aa\u07ac\5\u0124\u0093",
    "\2\u07ab\u07aa\3\2\2\2\u07ac\u07af\3\2\2\2\u07ad\u07ab\3\2\2\2\u07ad",
    "\u07ae\3\2\2\2\u07ae\u07b9\3\2\2\2\u07af\u07ad\3\2\2\2\u07b0\u07b4\5",
    "\"\22\2\u07b1\u07b3\5\u0124\u0093\2\u07b2\u07b1\3\2\2\2\u07b3\u07b6",
    "\3\2\2\2\u07b4\u07b2\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b8\3\2\2\2",
    "\u07b6\u07b4\3\2\2\2\u07b7\u07b0\3\2\2\2\u07b8\u07bb\3\2\2\2\u07b9\u07b7",
    "\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07c5\3\2\2\2\u07bb\u07b9\3\2\2\2",
    "\u07bc\u07bd\5\u012a\u0096\2\u07bd\u07c1\5\u00f8}\2\u07be\u07bf\5\u0124",
    "\u0093\2\u07bf\u07c0\5\u00c4c\2\u07c0\u07c2\3\2\2\2\u07c1\u07be\3\2",
    "\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c3\u07c4\3\2\2\2\u07c4",
    "\u07c6\3\2\2\2\u07c5\u07bc\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07c5\3",
    "\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07c9\3\2\2\2\u07c9\u07ca\5\u012a\u0096",
    "\2\u07ca\u00c3\3\2\2\2\u07cb\u07cc\5\u0102\u0082\2\u07cc\u07cd\5\u00f8",
    "}\2\u07cd\u07cf\5\u0120\u0091\2\u07ce\u07d0\5\u00ceh\2\u07cf\u07ce\3",
    "\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u00c5\3\2\2\2\u07d1\u07d2\5\u010a\u0086",
    "\2\u07d2\u07d3\7<\2\2\u07d3\u07d4\5\u00d0i\2\u07d4\u07d8\5\u0120\u0091",
    "\2\u07d5\u07d7\5\u0124\u0093\2\u07d6\u07d5\3\2\2\2\u07d7\u07da\3\2\2",
    "\2\u07d8\u07d6\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07e4\3\2\2\2\u07da",
    "\u07d8\3\2\2\2\u07db\u07df\5\"\22\2\u07dc\u07de\5\u0124\u0093\2\u07dd",
    "\u07dc\3\2\2\2\u07de\u07e1\3\2\2\2\u07df\u07dd\3\2\2\2\u07df\u07e0\3",
    "\2\2\2\u07e0\u07e3\3\2\2\2\u07e1\u07df\3\2\2\2\u07e2\u07db\3\2\2\2\u07e3",
    "\u07e6\3\2\2\2\u07e4\u07e2\3\2\2\2\u07e4\u07e5\3\2\2\2\u07e5\u07f0\3",
    "\2\2\2\u07e6\u07e4\3\2\2\2\u07e7\u07e8\5\u012a\u0096\2\u07e8\u07ec\5",
    "\u00f8}\2\u07e9\u07ea\5\u0124\u0093\2\u07ea\u07eb\5\u00c4c\2\u07eb\u07ed",
    "\3\2\2\2\u07ec\u07e9\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07ec\3\2\2\2",
    "\u07ee\u07ef\3\2\2\2\u07ef\u07f1\3\2\2\2\u07f0\u07e7\3\2\2\2\u07f1\u07f2",
    "\3\2\2\2\u07f2\u07f0\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\3\2\2\2",
    "\u07f4\u07f5\5\u012a\u0096\2\u07f5\u00c7\3\2\2\2\u07f6\u07f7\5\u010a",
    "\u0086\2\u07f7\u07f8\7=\2\2\u07f8\u07f9\5\u00d0i\2\u07f9\u07fd\5\u0120",
    "\u0091\2\u07fa\u07fc\5\u0124\u0093\2\u07fb\u07fa\3\2\2\2\u07fc\u07ff",
    "\3\2\2\2\u07fd\u07fb\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u0809\3\2\2\2",
    "\u07ff\u07fd\3\2\2\2\u0800\u0804\5\"\22\2\u0801\u0803\5\u0124\u0093",
    "\2\u0802\u0801\3\2\2\2\u0803\u0806\3\2\2\2\u0804\u0802\3\2\2\2\u0804",
    "\u0805\3\2\2\2\u0805\u0808\3\2\2\2\u0806\u0804\3\2\2\2\u0807\u0800\3",
    "\2\2\2\u0808\u080b\3\2\2\2\u0809\u0807\3\2\2\2\u0809\u080a\3\2\2\2\u080a",
    "\u0815\3\2\2\2\u080b\u0809\3\2\2\2\u080c\u080d\5\u012a\u0096\2\u080d",
    "\u0811\5\u00f8}\2\u080e\u080f\5\u0124\u0093\2\u080f\u0810\5\u00c4c\2",
    "\u0810\u0812\3\2\2\2\u0811\u080e\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u0811",
    "\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u0816\3\2\2\2\u0815\u080c\3\2\2\2",
    "\u0816\u0817\3\2\2\2\u0817\u0815\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u0819",
    "\3\2\2\2\u0819\u081a\5\u012a\u0096\2\u081a\u00c9\3\2\2\2\u081b\u081c",
    "\5\u010a\u0086\2\u081c\u081d\7>\2\2\u081d\u081e\5\u00d0i\2\u081e\u0822",
    "\5\u0120\u0091\2\u081f\u0821\5\u0124\u0093\2\u0820\u081f\3\2\2\2\u0821",
    "\u0824\3\2\2\2\u0822\u0820\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u082e\3",
    "\2\2\2\u0824\u0822\3\2\2\2\u0825\u0829\5\"\22\2\u0826\u0828\5\u0124",
    "\u0093\2\u0827\u0826\3\2\2\2\u0828\u082b\3\2\2\2\u0829\u0827\3\2\2\2",
    "\u0829\u082a\3\2\2\2\u082a\u082d\3\2\2\2\u082b\u0829\3\2\2\2\u082c\u0825",
    "\3\2\2\2\u082d\u0830\3\2\2\2\u082e\u082c\3\2\2\2\u082e\u082f\3\2\2\2",
    "\u082f\u083a\3\2\2\2\u0830\u082e\3\2\2\2\u0831\u0832\5\u012a\u0096\2",
    "\u0832\u0836\5\u00f8}\2\u0833\u0834\5\u0124\u0093\2\u0834\u0835\5\u00c4",
    "c\2\u0835\u0837\3\2\2\2\u0836\u0833\3\2\2\2\u0837\u0838\3\2\2\2\u0838",
    "\u0836\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u083b\3\2\2\2\u083a\u0831\3",
    "\2\2\2\u083b\u083c\3\2\2\2\u083c\u083a\3\2\2\2\u083c\u083d\3\2\2\2\u083d",
    "\u083e\3\2\2\2\u083e\u083f\5\u012a\u0096\2\u083f\u00cb\3\2\2\2\u0840",
    "\u0841\5\u010a\u0086\2\u0841\u0842\7?\2\2\u0842\u0843\5\u00d0i\2\u0843",
    "\u0847\5\u0120\u0091\2\u0844\u0846\5\u0124\u0093\2\u0845\u0844\3\2\2",
    "\2\u0846\u0849\3\2\2\2\u0847\u0845\3\2\2\2\u0847\u0848\3\2\2\2\u0848",
    "\u0853\3\2\2\2\u0849\u0847\3\2\2\2\u084a\u084e\5\"\22\2\u084b\u084d",
    "\5\u0124\u0093\2\u084c\u084b\3\2\2\2\u084d\u0850\3\2\2\2\u084e\u084c",
    "\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0852\3\2\2\2\u0850\u084e\3\2\2\2",
    "\u0851\u084a\3\2\2\2\u0852\u0855\3\2\2\2\u0853\u0851\3\2\2\2\u0853\u0854",
    "\3\2\2\2\u0854\u085f\3\2\2\2\u0855\u0853\3\2\2\2\u0856\u0857\5\u012a",
    "\u0096\2\u0857\u085b\5\u00f8}\2\u0858\u0859\5\u0124\u0093\2\u0859\u085a",
    "\5\u00c4c\2\u085a\u085c\3\2\2\2\u085b\u0858\3\2\2\2\u085c\u085d\3\2",
    "\2\2\u085d\u085b\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u0860\3\2\2\2\u085f",
    "\u0856\3\2\2\2\u0860\u0861\3\2\2\2\u0861\u085f\3\2\2\2\u0861\u0862\3",
    "\2\2\2\u0862\u0863\3\2\2\2\u0863\u0864\5\u012a\u0096\2\u0864\u00cd\3",
    "\2\2\2\u0865\u0866\5\u0112\u008a\2\u0866\u0867\7@\2\2\u0867\u0868\5",
    "\u0144\u00a3\2\u0868\u0869\5\u0120\u0091\2\u0869\u00cf\3\2\2\2\u086a",
    "\u086c\t\4\2\2\u086b\u086a\3\2\2\2\u086c\u086f\3\2\2\2\u086d\u086b\3",
    "\2\2\2\u086d\u086e\3\2\2\2\u086e\u0877\3\2\2\2\u086f\u086d\3\2\2\2\u0870",
    "\u0876\7D\2\2\u0871\u0876\5\u00d2j\2\u0872\u0876\5\u00d6l\2\u0873\u0876",
    "\5\u00dan\2\u0874\u0876\5\u00dep\2\u0875\u0870\3\2\2\2\u0875\u0871\3",
    "\2\2\2\u0875\u0872\3\2\2\2\u0875\u0873\3\2\2\2\u0875\u0874\3\2\2\2\u0876",
    "\u0879\3\2\2\2\u0877\u0875\3\2\2\2\u0877\u0878\3\2\2\2\u0878\u00d1\3",
    "\2\2\2\u0879\u0877\3\2\2\2\u087a\u087d\7E\2\2\u087b\u087c\7\7\2\2\u087c",
    "\u087e\5\u00d4k\2\u087d\u087b\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u088a",
    "\3\2\2\2\u087f\u0882\7F\2\2\u0880\u0881\7\7\2\2\u0881\u0883\5\u00d4",
    "k\2\u0882\u0880\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u088a\3\2\2\2\u0884",
    "\u0887\7G\2\2\u0885\u0886\7\7\2\2\u0886\u0888\5\u00d4k\2\u0887\u0885",
    "\3\2\2\2\u0887\u0888\3\2\2\2\u0888\u088a\3\2\2\2\u0889\u087a\3\2\2\2",
    "\u0889\u087f\3\2\2\2\u0889\u0884\3\2\2\2\u088a\u00d3\3\2\2\2\u088b\u088c",
    "\t\5\2\2\u088c\u00d5\3\2\2\2\u088d\u0890\7M\2\2\u088e\u088f\7\7\2\2",
    "\u088f\u0891\5\u00d8m\2\u0890\u088e\3\2\2\2\u0890\u0891\3\2\2\2\u0891",
    "\u0898\3\2\2\2\u0892\u0895\7N\2\2\u0893\u0894\7\7\2\2\u0894\u0896\5",
    "\u00d8m\2\u0895\u0893\3\2\2\2\u0895\u0896\3\2\2\2\u0896\u0898\3\2\2",
    "\2\u0897\u088d\3\2\2\2\u0897\u0892\3\2\2\2\u0898\u00d7\3\2\2\2\u0899",
    "\u089a\t\6\2\2\u089a\u00d9\3\2\2\2\u089b\u089e\7Q\2\2\u089c\u089d\7",
    "\7\2\2\u089d\u089f\5\u00dco\2\u089e\u089c\3\2\2\2\u089e\u089f\3\2\2",
    "\2\u089f\u08a6\3\2\2\2\u08a0\u08a3\7R\2\2\u08a1\u08a2\7\7\2\2\u08a2",
    "\u08a4\5\u00dco\2\u08a3\u08a1\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08a6",
    "\3\2\2\2\u08a5\u089b\3\2\2\2\u08a5\u08a0\3\2\2\2\u08a6\u00db\3\2\2\2",
    "\u08a7\u08a8\t\7\2\2\u08a8\u00dd\3\2\2\2\u08a9\u08aa\t\b\2\2\u08aa\u00df",
    "\3\2\2\2\u08ab\u08ac\t\t\2\2\u08ac\u00e1\3\2\2\2\u08ad\u08ae\7[\2\2",
    "\u08ae\u00e3\3\2\2\2\u08af\u08b0\5\u011e\u0090\2\u08b0\u08b2\5\u00d2",
    "j\2\u08b1\u08b3\5\u00f2z\2\u08b2\u08b1\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3",
    "\u08b4\3\2\2\2\u08b4\u08b5\7\"\2\2\u08b5\u08b6\5\u00f4{\2\u08b6\u08bc",
    "\5\u0120\u0091\2\u08b7\u08b8\7\u008b\2\2\u08b8\u08b9\5\u0112\u008a\2",
    "\u08b9\u08ba\7\\\2\2\u08ba\u08bb\5\u0120\u0091\2\u08bb\u08bd\3\2\2\2",
    "\u08bc\u08b7\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd\u08c3\3\2\2\2\u08be\u08bf",
    "\5\u0112\u008a\2\u08bf\u08c0\7]\2\2\u08c0\u08c1\5\u014a\u00a6\2\u08c1",
    "\u08c2\5\u0120\u0091\2\u08c2\u08c4\3\2\2\2\u08c3\u08be\3\2\2\2\u08c3",
    "\u08c4\3\2\2\2\u08c4\u00e5\3\2\2\2\u08c5\u08c6\5\u011e\u0090\2\u08c6",
    "\u08c7\5\u00d6l\2\u08c7\u08c8\7\"\2\2\u08c8\u08c9\5\u00f4{\2\u08c9\u08cf",
    "\5\u0120\u0091\2\u08ca\u08cb\5\u0112\u008a\2\u08cb\u08cc\7]\2\2\u08cc",
    "\u08cd\5\u014a\u00a6\2\u08cd\u08ce\5\u0120\u0091\2\u08ce\u08d0\3\2\2",
    "\2\u08cf\u08ca\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u00e7\3\2\2\2\u08d1",
    "\u08d2\5\u011e\u0090\2\u08d2\u08d3\5\u00dan\2\u08d3\u08d4\7\"\2\2\u08d4",
    "\u08d5\5\u00f4{\2\u08d5\u08db\5\u0120\u0091\2\u08d6\u08d7\5\u0112\u008a",
    "\2\u08d7\u08d8\7]\2\2\u08d8\u08d9\5\u014a\u00a6\2\u08d9\u08da\5\u0120",
    "\u0091\2\u08da\u08dc\3\2\2\2\u08db\u08d6\3\2\2\2\u08db\u08dc\3\2\2\2",
    "\u08dc\u00e9\3\2\2\2\u08dd\u08de\5\u011e\u0090\2\u08de\u08df\5\u00de",
    "p\2\u08df\u08e0\7\"\2\2\u08e0\u08e1\5\u00f4{\2\u08e1\u08e7\5\u0120\u0091",
    "\2\u08e2\u08e3\5\u0112\u008a\2\u08e3\u08e4\7]\2\2\u08e4\u08e5\5\u014a",
    "\u00a6\2\u08e5\u08e6\5\u0120\u0091\2\u08e6\u08e8\3\2\2\2\u08e7\u08e2",
    "\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u00eb\3\2\2\2\u08e9\u08ea\5\u011e",
    "\u0090\2\u08ea\u08eb\5\u00e0q\2\u08eb\u08ec\7\"\2\2\u08ec\u08ed\5\u00f4",
    "{\2\u08ed\u08f3\5\u0120\u0091\2\u08ee\u08ef\5\u0112\u008a\2\u08ef\u08f0",
    "\7]\2\2\u08f0\u08f1\5\u014a\u00a6\2\u08f1\u08f2\5\u0120\u0091\2\u08f2",
    "\u08f4\3\2\2\2\u08f3\u08ee\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u00ed\3",
    "\2\2\2\u08f5\u08f6\5\u011e\u0090\2\u08f6\u08f7\5\u00e2r\2\u08f7\u08fa",
    "\7\"\2\2\u08f8\u08fb\5\u00f4{\2\u08f9\u08fb\5\u00f0y\2\u08fa\u08f8\3",
    "\2\2\2\u08fa\u08f9\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u0902\5\u0120\u0091",
    "\2\u08fd\u08fe\5\u0112\u008a\2\u08fe\u08ff\7]\2\2\u08ff\u0900\5\u014a",
    "\u00a6\2\u0900\u0901\5\u0120\u0091\2\u0901\u0903\3\2\2\2\u0902\u08fd",
    "\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u00ef\3\2\2\2\u0904\u0905\7^\2\2",
    "\u0905\u0906\7_\2\2\u0906\u0907\5\u0144\u00a3\2\u0907\u00f1\3\2\2\2",
    "\u0908\u090a\7`\2\2\u0909\u090b\7\u0088\2\2\u090a\u0909\3\2\2\2\u090b",
    "\u090c\3\2\2\2\u090c\u090a\3\2\2\2\u090c\u090d\3\2\2\2\u090d\u090e\3",
    "\2\2\2\u090e\u090f\7\"\2\2\u090f\u00f3\3\2\2\2\u0910\u0911\7a\2\2\u0911",
    "\u0915\5\u014a\u00a6\2\u0912\u0913\7b\2\2\u0913\u0915\5\u014a\u00a6",
    "\2\u0914\u0910\3\2\2\2\u0914\u0912\3\2\2\2\u0915\u00f5\3\2\2\2\u0916",
    "\u0918\5\u00f8}\2\u0917\u0919\5\u0124\u0093\2\u0918\u0917\3\2\2\2\u0918",
    "\u0919\3\2\2\2\u0919\u091b\3\2\2\2\u091a\u0916\3\2\2\2\u091b\u091c\3",
    "\2\2\2\u091c\u091a\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u00f7\3\2\2\2\u091e",
    "\u0922\5\u0146\u00a4\2\u091f\u0920\5\u014c\u00a7\2\u0920\u0921\5\u0144",
    "\u00a3\2\u0921\u0923\3\2\2\2\u0922\u091f\3\2\2\2\u0922\u0923\3\2\2\2",
    "\u0923\u0935\3\2\2\2\u0924\u0928\5\u014a\u00a6\2\u0925\u0926\5\u014c",
    "\u00a7\2\u0926\u0927\5\u0144\u00a3\2\u0927\u0929\3\2\2\2\u0928\u0925",
    "\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u0935\3\2\2\2\u092a\u0935\5\u0144",
    "\u00a3\2\u092b\u0935\5\u0100\u0081\2\u092c\u092e\7\7\2\2\u092d\u092f",
    "\7\u008a\2\2\u092e\u092d\3\2\2\2\u092e\u092f\3\2\2\2\u092f\u0935\3\2",
    "\2\2\u0930\u0932\7c\2\2\u0931\u0933\7\u008a\2\2\u0932\u0931\3\2\2\2",
    "\u0932\u0933\3\2\2\2\u0933\u0935\3\2\2\2\u0934\u091e\3\2\2\2\u0934\u0924",
    "\3\2\2\2\u0934\u092a\3\2\2\2\u0934\u092b\3\2\2\2\u0934\u092c\3\2\2\2",
    "\u0934\u0930\3\2\2\2\u0935\u00f9\3\2\2\2\u0936\u0938\5\u0108\u0085\2",
    "\u0937\u0939\5\u00f8}\2\u0938\u0937\3\2\2\2\u0938\u0939\3\2\2\2\u0939",
    "\u093a\3\2\2\2\u093a\u093b\5\u0120\u0091\2\u093b\u00fb\3\2\2\2\u093c",
    "\u093e\5\u0106\u0084\2\u093d\u093f\5\u00f8}\2\u093e\u093d\3\2\2\2\u093e",
    "\u093f\3\2\2\2\u093f\u0940\3\2\2\2\u0940\u0941\5\u0120\u0091\2\u0941",
    "\u00fd\3\2\2\2\u0942\u0943\5\u011c\u008f\2\u0943\u0944\5\u00f8}\2\u0944",
    "\u0945\5\u0120\u0091\2\u0945\u00ff\3\2\2\2\u0946\u0947\5\u0104\u0083",
    "\2\u0947\u0948\5\u00f8}\2\u0948\u0949\5\u0120\u0091\2\u0949\u0101\3",
    "\2\2\2\u094a\u094b\7e\2\2\u094b\u0103\3\2\2\2\u094c\u094d\7f\2\2\u094d",
    "\u0105\3\2\2\2\u094e\u094f\7g\2\2\u094f\u0107\3\2\2\2\u0950\u0951\7",
    "h\2\2\u0951\u0109\3\2\2\2\u0952\u0953\7i\2\2\u0953\u010b\3\2\2\2\u0954",
    "\u0955\7j\2\2\u0955\u010d\3\2\2\2\u0956\u0957\7k\2\2\u0957\u010f\3\2",
    "\2\2\u0958\u0959\7l\2\2\u0959\u0111\3\2\2\2\u095a\u095b\7m\2\2\u095b",
    "\u0113\3\2\2\2\u095c\u095d\7n\2\2\u095d\u0115\3\2\2\2\u095e\u095f\7",
    "o\2\2\u095f\u0117\3\2\2\2\u0960\u0961\7p\2\2\u0961\u0119\3\2\2\2\u0962",
    "\u0963\7q\2\2\u0963\u011b\3\2\2\2\u0964\u0965\7r\2\2\u0965\u011d\3\2",
    "\2\2\u0966\u0967\7s\2\2\u0967\u011f\3\2\2\2\u0968\u0969\7t\2\2\u0969",
    "\u0121\3\2\2\2\u096a\u096b\7t\2\2\u096b\u0123\3\2\2\2\u096c\u096d\7",
    "\u008b\2\2\u096d\u0125\3\2\2\2\u096e\u096f\7w\2\2\u096f\u0127\3\2\2",
    "\2\u0970\u0971\t\n\2\2\u0971\u0129\3\2\2\2\u0972\u0973\t\13\2\2\u0973",
    "\u012b\3\2\2\2\u0974\u0975\t\f\2\2\u0975\u012d\3\2\2\2\u0976\u0977\7",
    "d\2\2\u0977\u012f\3\2\2\2\u0978\u0979\t\r\2\2\u0979\u0131\3\2\2\2\u097a",
    "\u097b\7\u0081\2\2\u097b\u0133\3\2\2\2\u097c\u097d\7\u0082\2\2\u097d",
    "\u0135\3\2\2\2\u097e\u097f\7\u0080\2\2\u097f\u0137\3\2\2\2\u0980\u0981",
    "\7\u0083\2\2\u0981\u0139\3\2\2\2\u0982\u0983\7\u0084\2\2\u0983\u013b",
    "\3\2\2\2\u0984\u0985\7\u0085\2\2\u0985\u013d\3\2\2\2\u0986\u0987\7\u0086",
    "\2\2\u0987\u013f\3\2\2\2\u0988\u0989\7\u0087\2\2\u0989\u0141\3\2\2\2",
    "\u098a\u098b\7|\2\2\u098b\u0143\3\2\2\2\u098c\u098d\7\u0088\2\2\u098d",
    "\u0145\3\2\2\2\u098e\u098f\7\u0089\2\2\u098f\u0147\3\2\2\2\u0990\u0992",
    "\7\u008e\2\2\u0991\u0990\3\2\2\2\u0992\u0993\3\2\2\2\u0993\u0991\3\2",
    "\2\2\u0993\u0994\3\2\2\2\u0994\u0149\3\2\2\2\u0995\u0996\7\u008c\2\2",
    "\u0996\u014b\3\2\2\2\u0997\u0998\7\u008a\2\2\u0998\u014d\3\2\2\2\u012c",
    "\u0150\u0155\u015a\u0161\u0194\u0199\u019c\u01a2\u01ab\u01ae\u01b7\u01bf",
    "\u01d0\u01d6\u01e1\u01e7\u01f0\u01fb\u0201\u021d\u0224\u0229\u0240\u0247",
    "\u024e\u0256\u025d\u0262\u0265\u026a\u0271\u0276\u027e\u0283\u0286\u028b",
    "\u0292\u0297\u029f\u02a1\u02a6\u02ac\u02b1\u02b8\u02c0\u02c6\u02cb\u02d2",
    "\u02d7\u02dd\u02e0\u02e2\u02e6\u02eb\u02f1\u02f4\u02fa\u02fe\u0305\u030d",
    "\u0315\u0322\u0327\u0333\u0337\u033b\u0340\u0345\u0349\u034e\u0357\u035b",
    "\u0368\u036d\u0371\u0376\u037c\u0381\u0385\u038a\u0395\u039a\u039d\u03a2",
    "\u03a4\u03a8\u03ac\u03b1\u03bc\u03c1\u03c3\u03cd\u03d4\u03db\u03de\u03e0",
    "\u03eb\u03f0\u03f6\u03fb\u03ff\u0405\u0412\u0417\u041b\u041d\u0426\u042b",
    "\u0430\u0436\u043a\u043c\u0442\u0446\u0453\u045c\u0463\u0468\u046f\u0476",
    "\u047b\u0480\u0487\u0489\u048d\u0491\u04a2\u04a8\u04b0\u04b7\u04bd\u04c0",
    "\u04c5\u04cb\u04cd\u04d0\u04d3\u04d6\u04e0\u04e8\u04f4\u04fe\u0507\u050c",
    "\u050f\u0514\u0517\u051a\u051f\u0525\u0527\u052a\u052d\u0530\u0535\u0548",
    "\u054c\u0552\u0559\u055f\u0568\u056c\u0572\u0579\u057f\u0588\u058c\u0592",
    "\u059e\u05a2\u05a8\u05b4\u05b8\u05be\u05ca\u05cf\u05d1\u05d3\u05df\u05e3",
    "\u05ea\u05ed\u05ef\u05f3\u05f8\u05fb\u0609\u0610\u0615\u061c\u0621\u0625",
    "\u062a\u0637\u063e\u0647\u064c\u0651\u0658\u0666\u0668\u0670\u0675\u0681",
    "\u0686\u0692\u0697\u06a1\u06a7\u06aa\u06b5\u06ba\u06be\u06d0\u06de\u06e7",
    "\u06e9\u06f1\u06f8\u0704\u0710\u0717\u071c\u072d\u0732\u073a\u0740\u0759",
    "\u075e\u076d\u0772\u077d\u077f\u0788\u078f\u0794\u079e\u07a2\u07ad\u07b4",
    "\u07b9\u07c3\u07c7\u07cf\u07d8\u07df\u07e4\u07ee\u07f2\u07fd\u0804\u0809",
    "\u0813\u0817\u0822\u0829\u082e\u0838\u083c\u0847\u084e\u0853\u085d\u0861",
    "\u086d\u0875\u0877\u087d\u0882\u0887\u0889\u0890\u0895\u0897\u089e\u08a3",
    "\u08a5\u08b2\u08bc\u08c3\u08cf\u08db\u08e7\u08f3\u08fa\u0902\u090c\u0914",
    "\u0918\u091c\u0922\u0928\u092e\u0932\u0934\u0938\u093e\u0993"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', "'book'", "':collection'", "':book'", "'chapter'", 
                     "':'", "'[#'", "'[##'", "'progress:'", "'toc:'", "'summary'", 
                     "'internal-link'", "'bit-alias'", "'group*'", "'group†'", 
                     "'cloze-instruction-grouped'", "'cloze-solution-grouped'", 
                     "'multiple-choice-1'", "'multiple-choice'", "'multiple-response-1'", 
                     "'multiple-response'", "'multiple-choice-text'", "'cloze-and-multiple-choice-text'", 
                     "'essay'", "'&article-attachment'", "'article-attachment'", 
                     "'example:'", "'example'", "'interview'", "'longAnswer'", 
                     "'shortAnswer'", "'interview-instruction-grouped'", 
                     "'::'", "'match'", "'match-reverse'", "'match-picture'", 
                     "'match-audio'", "'match-solution-grouped'", "'true-false-1'", 
                     "'true-false'", "'label-true:'", "'label-false:'", 
                     "'sequence'", "'correction'", "'mark'", "'document-upload'", 
                     "'take-picture'", "'record-audio'", "'preparation-note'", 
                     "'assignment'", "'flashcard-1'", "'flashcard'", "'article'", 
                     "'chat'", "'conversation'", "'bot-interview'", "'self-assessment'", 
                     "'rating'", "'survey'", "'survey-1'", "'survey-anonymous'", 
                     "'survey-anonymous-1'", "'points:'", "':bitmark--'", 
                     "':bitmark++'", "'&article'", "':text'", "'&image'", 
                     "'&image-online'", "'&image-zoom'", "'basic'", "'jpg'", 
                     "'png'", "'gif'", "'svg'", "'&audio'", "'&audio-online'", 
                     "'mp3'", "'mp4'", "'&video'", "'&video-online'", "'flv'", 
                     "'wmv'", "'mpeg'", "'mpg'", "'mp2'", "'&article-online'", 
                     "'&document'", "'&document-online'", "'&app'", "'showInIndex'", 
                     "'alt:'", "'tel:'", "'+'", "'.@'", "'http://'", "'https://'", 
                     "'&'", "'cloze'", "'[•'", "'[^'", 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', "'['", "']'", 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', "'\n'" ];

var symbolicNames = [ 'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                      "CLOZE", "OPBUL", "OPESC", "OPRANGLE", "OPDANGLE", 
                      "OPD", "OPU", "OPB", "OPQ", "OPA", "OPP", "OPM", "OPS", 
                      "OPR", "OPC", "OP", "CL", "EQ", "EQ2", "OR", "HSPL", 
                      "HSPL2", "SSPL", "SSPL2", "LIST_LINE", "EMP1", "EMP2", 
                      "EMP3", "NOTE", "INS", "DEL", "REM", "HELP", "HIGH", 
                      "ANNO", "ANNO_IM", "NUMERIC", "STRING", "SP", "NL", 
                      "SENTENCE", "COMMENT", "EMOJI" ];

var ruleNames =  [ "bitmark", "bitmark_", "bit", "book", "chapter", "title", 
                   "subtitle", "progress", "toc", "summary", "internal_link", 
                   "bit_alias", "title_etc", "group_born", "group_died", 
                   "cloze", "bitElem", "cloze_instruction_grouped", "cloze_solution_grouped", 
                   "gap", "single_gap", "instruction", "hint", "choices", 
                   "choice_plus", "choice_minus", "choice_star", "multiple_choice_1", 
                   "multiple_choice", "multiple_response_1", "multiple_response", 
                   "multiple_choice_text", "headed_inline_choices", "headed_choices", 
                   "choice_head", "inline_choices", "cloze_and_multiple_choice_text", 
                   "essay", "article_attachment", "ml_example", "example", 
                   "interview", "interview_answer", "longans", "shortans", 
                   "interview_instruction_grouped", "query", "answer", "heading", 
                   "key_title", "value_title", "pair", "pairs", "pair_image", 
                   "pair_images", "pair_audio", "pair_audios", "pquery", 
                   "panswer", "pimagebit", "paudiobit", "match_", "match_reverse", 
                   "match_picture", "match_audio", "match_solution_grouped", 
                   "true_false_1", "true_false", "bool_label", "sequence", 
                   "correction", "mark_", "mark_text", "mark_color", "document_upload", 
                   "take_picture", "record_audio", "preparation_note", "assignment", 
                   "flashcard_1", "flashcard", "sidex", "side", "atdef", 
                   "atdef_", "article", "chat", "initiator", "partner", 
                   "name_text", "chat_initiator", "chat_partner", "conversation", 
                   "bot_interview", "bot_choice", "self_assessment", "rating", 
                   "bullet_item", "survey", "survey_1", "survey_anonymous", 
                   "survey_anonymous_1", "atpoint", "format", "image_format", 
                   "image_type", "audio_format", "audio_type", "video_format", 
                   "video_type", "article_format", "document_format", "app_format", 
                   "imagebit", "audiobit", "videobit", "articlebit", "documentbit", 
                   "appbit", "telephone", "resolution", "url", "lines", 
                   "s_and_w", "anchor", "alias", "item", "bracket_escaped", 
                   "opbul", "opescape", "oprangle", "opdangle", "opd", "opu", 
                   "opb", "opq", "opa", "opp", "opm", "ops", "opr", "opc", 
                   "op", "cl", "clnsp", "nl", "or", "eq", "hspl", "sspl", 
                   "cloze_", "titlestar_", "ins_", "del_", "note_", "remark_", 
                   "help_", "highlight_", "annotate_", "annotate_image_", 
                   "listline_", "numeric", "string", "emoji", "words", "sp" ];

function bitmarkParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

bitmarkParser.prototype = Object.create(antlr4.Parser.prototype);
bitmarkParser.prototype.constructor = bitmarkParser;

Object.defineProperty(bitmarkParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

bitmarkParser.EOF = antlr4.Token.EOF;
bitmarkParser.T__0 = 1;
bitmarkParser.T__1 = 2;
bitmarkParser.T__2 = 3;
bitmarkParser.T__3 = 4;
bitmarkParser.T__4 = 5;
bitmarkParser.T__5 = 6;
bitmarkParser.T__6 = 7;
bitmarkParser.T__7 = 8;
bitmarkParser.T__8 = 9;
bitmarkParser.T__9 = 10;
bitmarkParser.T__10 = 11;
bitmarkParser.T__11 = 12;
bitmarkParser.T__12 = 13;
bitmarkParser.T__13 = 14;
bitmarkParser.T__14 = 15;
bitmarkParser.T__15 = 16;
bitmarkParser.T__16 = 17;
bitmarkParser.T__17 = 18;
bitmarkParser.T__18 = 19;
bitmarkParser.T__19 = 20;
bitmarkParser.T__20 = 21;
bitmarkParser.T__21 = 22;
bitmarkParser.T__22 = 23;
bitmarkParser.T__23 = 24;
bitmarkParser.T__24 = 25;
bitmarkParser.T__25 = 26;
bitmarkParser.T__26 = 27;
bitmarkParser.T__27 = 28;
bitmarkParser.T__28 = 29;
bitmarkParser.T__29 = 30;
bitmarkParser.T__30 = 31;
bitmarkParser.T__31 = 32;
bitmarkParser.T__32 = 33;
bitmarkParser.T__33 = 34;
bitmarkParser.T__34 = 35;
bitmarkParser.T__35 = 36;
bitmarkParser.T__36 = 37;
bitmarkParser.T__37 = 38;
bitmarkParser.T__38 = 39;
bitmarkParser.T__39 = 40;
bitmarkParser.T__40 = 41;
bitmarkParser.T__41 = 42;
bitmarkParser.T__42 = 43;
bitmarkParser.T__43 = 44;
bitmarkParser.T__44 = 45;
bitmarkParser.T__45 = 46;
bitmarkParser.T__46 = 47;
bitmarkParser.T__47 = 48;
bitmarkParser.T__48 = 49;
bitmarkParser.T__49 = 50;
bitmarkParser.T__50 = 51;
bitmarkParser.T__51 = 52;
bitmarkParser.T__52 = 53;
bitmarkParser.T__53 = 54;
bitmarkParser.T__54 = 55;
bitmarkParser.T__55 = 56;
bitmarkParser.T__56 = 57;
bitmarkParser.T__57 = 58;
bitmarkParser.T__58 = 59;
bitmarkParser.T__59 = 60;
bitmarkParser.T__60 = 61;
bitmarkParser.T__61 = 62;
bitmarkParser.T__62 = 63;
bitmarkParser.T__63 = 64;
bitmarkParser.T__64 = 65;
bitmarkParser.T__65 = 66;
bitmarkParser.T__66 = 67;
bitmarkParser.T__67 = 68;
bitmarkParser.T__68 = 69;
bitmarkParser.T__69 = 70;
bitmarkParser.T__70 = 71;
bitmarkParser.T__71 = 72;
bitmarkParser.T__72 = 73;
bitmarkParser.T__73 = 74;
bitmarkParser.T__74 = 75;
bitmarkParser.T__75 = 76;
bitmarkParser.T__76 = 77;
bitmarkParser.T__77 = 78;
bitmarkParser.T__78 = 79;
bitmarkParser.T__79 = 80;
bitmarkParser.T__80 = 81;
bitmarkParser.T__81 = 82;
bitmarkParser.T__82 = 83;
bitmarkParser.T__83 = 84;
bitmarkParser.T__84 = 85;
bitmarkParser.T__85 = 86;
bitmarkParser.T__86 = 87;
bitmarkParser.T__87 = 88;
bitmarkParser.T__88 = 89;
bitmarkParser.T__89 = 90;
bitmarkParser.T__90 = 91;
bitmarkParser.T__91 = 92;
bitmarkParser.T__92 = 93;
bitmarkParser.T__93 = 94;
bitmarkParser.T__94 = 95;
bitmarkParser.T__95 = 96;
bitmarkParser.T__96 = 97;
bitmarkParser.CLOZE = 98;
bitmarkParser.OPBUL = 99;
bitmarkParser.OPESC = 100;
bitmarkParser.OPRANGLE = 101;
bitmarkParser.OPDANGLE = 102;
bitmarkParser.OPD = 103;
bitmarkParser.OPU = 104;
bitmarkParser.OPB = 105;
bitmarkParser.OPQ = 106;
bitmarkParser.OPA = 107;
bitmarkParser.OPP = 108;
bitmarkParser.OPM = 109;
bitmarkParser.OPS = 110;
bitmarkParser.OPR = 111;
bitmarkParser.OPC = 112;
bitmarkParser.OP = 113;
bitmarkParser.CL = 114;
bitmarkParser.EQ = 115;
bitmarkParser.EQ2 = 116;
bitmarkParser.OR = 117;
bitmarkParser.HSPL = 118;
bitmarkParser.HSPL2 = 119;
bitmarkParser.SSPL = 120;
bitmarkParser.SSPL2 = 121;
bitmarkParser.LIST_LINE = 122;
bitmarkParser.EMP1 = 123;
bitmarkParser.EMP2 = 124;
bitmarkParser.EMP3 = 125;
bitmarkParser.NOTE = 126;
bitmarkParser.INS = 127;
bitmarkParser.DEL = 128;
bitmarkParser.REM = 129;
bitmarkParser.HELP = 130;
bitmarkParser.HIGH = 131;
bitmarkParser.ANNO = 132;
bitmarkParser.ANNO_IM = 133;
bitmarkParser.NUMERIC = 134;
bitmarkParser.STRING = 135;
bitmarkParser.SP = 136;
bitmarkParser.NL = 137;
bitmarkParser.SENTENCE = 138;
bitmarkParser.COMMENT = 139;
bitmarkParser.EMOJI = 140;

bitmarkParser.RULE_bitmark = 0;
bitmarkParser.RULE_bitmark_ = 1;
bitmarkParser.RULE_bit = 2;
bitmarkParser.RULE_book = 3;
bitmarkParser.RULE_chapter = 4;
bitmarkParser.RULE_title = 5;
bitmarkParser.RULE_subtitle = 6;
bitmarkParser.RULE_progress = 7;
bitmarkParser.RULE_toc = 8;
bitmarkParser.RULE_summary = 9;
bitmarkParser.RULE_internal_link = 10;
bitmarkParser.RULE_bit_alias = 11;
bitmarkParser.RULE_title_etc = 12;
bitmarkParser.RULE_group_born = 13;
bitmarkParser.RULE_group_died = 14;
bitmarkParser.RULE_cloze = 15;
bitmarkParser.RULE_bitElem = 16;
bitmarkParser.RULE_cloze_instruction_grouped = 17;
bitmarkParser.RULE_cloze_solution_grouped = 18;
bitmarkParser.RULE_gap = 19;
bitmarkParser.RULE_single_gap = 20;
bitmarkParser.RULE_instruction = 21;
bitmarkParser.RULE_hint = 22;
bitmarkParser.RULE_choices = 23;
bitmarkParser.RULE_choice_plus = 24;
bitmarkParser.RULE_choice_minus = 25;
bitmarkParser.RULE_choice_star = 26;
bitmarkParser.RULE_multiple_choice_1 = 27;
bitmarkParser.RULE_multiple_choice = 28;
bitmarkParser.RULE_multiple_response_1 = 29;
bitmarkParser.RULE_multiple_response = 30;
bitmarkParser.RULE_multiple_choice_text = 31;
bitmarkParser.RULE_headed_inline_choices = 32;
bitmarkParser.RULE_headed_choices = 33;
bitmarkParser.RULE_choice_head = 34;
bitmarkParser.RULE_inline_choices = 35;
bitmarkParser.RULE_cloze_and_multiple_choice_text = 36;
bitmarkParser.RULE_essay = 37;
bitmarkParser.RULE_article_attachment = 38;
bitmarkParser.RULE_ml_example = 39;
bitmarkParser.RULE_example = 40;
bitmarkParser.RULE_interview = 41;
bitmarkParser.RULE_interview_answer = 42;
bitmarkParser.RULE_longans = 43;
bitmarkParser.RULE_shortans = 44;
bitmarkParser.RULE_interview_instruction_grouped = 45;
bitmarkParser.RULE_query = 46;
bitmarkParser.RULE_answer = 47;
bitmarkParser.RULE_heading = 48;
bitmarkParser.RULE_key_title = 49;
bitmarkParser.RULE_value_title = 50;
bitmarkParser.RULE_pair = 51;
bitmarkParser.RULE_pairs = 52;
bitmarkParser.RULE_pair_image = 53;
bitmarkParser.RULE_pair_images = 54;
bitmarkParser.RULE_pair_audio = 55;
bitmarkParser.RULE_pair_audios = 56;
bitmarkParser.RULE_pquery = 57;
bitmarkParser.RULE_panswer = 58;
bitmarkParser.RULE_pimagebit = 59;
bitmarkParser.RULE_paudiobit = 60;
bitmarkParser.RULE_match_ = 61;
bitmarkParser.RULE_match_reverse = 62;
bitmarkParser.RULE_match_picture = 63;
bitmarkParser.RULE_match_audio = 64;
bitmarkParser.RULE_match_solution_grouped = 65;
bitmarkParser.RULE_true_false_1 = 66;
bitmarkParser.RULE_true_false = 67;
bitmarkParser.RULE_bool_label = 68;
bitmarkParser.RULE_sequence = 69;
bitmarkParser.RULE_correction = 70;
bitmarkParser.RULE_mark_ = 71;
bitmarkParser.RULE_mark_text = 72;
bitmarkParser.RULE_mark_color = 73;
bitmarkParser.RULE_document_upload = 74;
bitmarkParser.RULE_take_picture = 75;
bitmarkParser.RULE_record_audio = 76;
bitmarkParser.RULE_preparation_note = 77;
bitmarkParser.RULE_assignment = 78;
bitmarkParser.RULE_flashcard_1 = 79;
bitmarkParser.RULE_flashcard = 80;
bitmarkParser.RULE_sidex = 81;
bitmarkParser.RULE_side = 82;
bitmarkParser.RULE_atdef = 83;
bitmarkParser.RULE_atdef_ = 84;
bitmarkParser.RULE_article = 85;
bitmarkParser.RULE_chat = 86;
bitmarkParser.RULE_initiator = 87;
bitmarkParser.RULE_partner = 88;
bitmarkParser.RULE_name_text = 89;
bitmarkParser.RULE_chat_initiator = 90;
bitmarkParser.RULE_chat_partner = 91;
bitmarkParser.RULE_conversation = 92;
bitmarkParser.RULE_bot_interview = 93;
bitmarkParser.RULE_bot_choice = 94;
bitmarkParser.RULE_self_assessment = 95;
bitmarkParser.RULE_rating = 96;
bitmarkParser.RULE_bullet_item = 97;
bitmarkParser.RULE_survey = 98;
bitmarkParser.RULE_survey_1 = 99;
bitmarkParser.RULE_survey_anonymous = 100;
bitmarkParser.RULE_survey_anonymous_1 = 101;
bitmarkParser.RULE_atpoint = 102;
bitmarkParser.RULE_format = 103;
bitmarkParser.RULE_image_format = 104;
bitmarkParser.RULE_image_type = 105;
bitmarkParser.RULE_audio_format = 106;
bitmarkParser.RULE_audio_type = 107;
bitmarkParser.RULE_video_format = 108;
bitmarkParser.RULE_video_type = 109;
bitmarkParser.RULE_article_format = 110;
bitmarkParser.RULE_document_format = 111;
bitmarkParser.RULE_app_format = 112;
bitmarkParser.RULE_imagebit = 113;
bitmarkParser.RULE_audiobit = 114;
bitmarkParser.RULE_videobit = 115;
bitmarkParser.RULE_articlebit = 116;
bitmarkParser.RULE_documentbit = 117;
bitmarkParser.RULE_appbit = 118;
bitmarkParser.RULE_telephone = 119;
bitmarkParser.RULE_resolution = 120;
bitmarkParser.RULE_url = 121;
bitmarkParser.RULE_lines = 122;
bitmarkParser.RULE_s_and_w = 123;
bitmarkParser.RULE_anchor = 124;
bitmarkParser.RULE_alias = 125;
bitmarkParser.RULE_item = 126;
bitmarkParser.RULE_bracket_escaped = 127;
bitmarkParser.RULE_opbul = 128;
bitmarkParser.RULE_opescape = 129;
bitmarkParser.RULE_oprangle = 130;
bitmarkParser.RULE_opdangle = 131;
bitmarkParser.RULE_opd = 132;
bitmarkParser.RULE_opu = 133;
bitmarkParser.RULE_opb = 134;
bitmarkParser.RULE_opq = 135;
bitmarkParser.RULE_opa = 136;
bitmarkParser.RULE_opp = 137;
bitmarkParser.RULE_opm = 138;
bitmarkParser.RULE_ops = 139;
bitmarkParser.RULE_opr = 140;
bitmarkParser.RULE_opc = 141;
bitmarkParser.RULE_op = 142;
bitmarkParser.RULE_cl = 143;
bitmarkParser.RULE_clnsp = 144;
bitmarkParser.RULE_nl = 145;
bitmarkParser.RULE_or = 146;
bitmarkParser.RULE_eq = 147;
bitmarkParser.RULE_hspl = 148;
bitmarkParser.RULE_sspl = 149;
bitmarkParser.RULE_cloze_ = 150;
bitmarkParser.RULE_titlestar_ = 151;
bitmarkParser.RULE_ins_ = 152;
bitmarkParser.RULE_del_ = 153;
bitmarkParser.RULE_note_ = 154;
bitmarkParser.RULE_remark_ = 155;
bitmarkParser.RULE_help_ = 156;
bitmarkParser.RULE_highlight_ = 157;
bitmarkParser.RULE_annotate_ = 158;
bitmarkParser.RULE_annotate_image_ = 159;
bitmarkParser.RULE_listline_ = 160;
bitmarkParser.RULE_numeric = 161;
bitmarkParser.RULE_string = 162;
bitmarkParser.RULE_emoji = 163;
bitmarkParser.RULE_words = 164;
bitmarkParser.RULE_sp = 165;

function BitmarkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_bitmark;
    return this;
}

BitmarkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitmarkContext.prototype.constructor = BitmarkContext;

BitmarkContext.prototype.EOF = function() {
    return this.getToken(bitmarkParser.EOF, 0);
};

BitmarkContext.prototype.bitmark_ = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bitmark_Context);
    } else {
        return this.getTypedRuleContext(Bitmark_Context,i);
    }
};

BitmarkContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

BitmarkContext.prototype.sp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SpContext);
    } else {
        return this.getTypedRuleContext(SpContext,i);
    }
};

BitmarkContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBitmark(this);
	}
};

BitmarkContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBitmark(this);
	}
};

BitmarkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBitmark(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.BitmarkContext = BitmarkContext;

bitmarkParser.prototype.bitmark = function() {

    var localctx = new BitmarkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, bitmarkParser.RULE_bitmark);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 342; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 332;
            this.bitmark_();
            this.state = 339;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.SP || _la===bitmarkParser.NL) {
                this.state = 334;
                _la = this._input.LA(1);
                if(_la===bitmarkParser.SP) {
                    this.state = 333;
                    this.sp();
                }

                this.state = 336;
                this.nl();
                this.state = 341;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 344; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPDANGLE - 97)) | (1 << (bitmarkParser.OPD - 97)) | (1 << (bitmarkParser.OPQ - 97)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)) | (1 << (bitmarkParser.EMOJI - 134)))) !== 0));
        this.state = 346;
        this.match(bitmarkParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bitmark_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_bitmark_;
    return this;
}

Bitmark_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bitmark_Context.prototype.constructor = Bitmark_Context;

Bitmark_Context.prototype.bit = function() {
    return this.getTypedRuleContext(BitContext,0);
};

Bitmark_Context.prototype.emoji = function() {
    return this.getTypedRuleContext(EmojiContext,0);
};

Bitmark_Context.prototype.lines = function() {
    return this.getTypedRuleContext(LinesContext,0);
};

Bitmark_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBitmark_(this);
	}
};

Bitmark_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBitmark_(this);
	}
};

Bitmark_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBitmark_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Bitmark_Context = Bitmark_Context;

bitmarkParser.prototype.bitmark_ = function() {

    var localctx = new Bitmark_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 2, bitmarkParser.RULE_bitmark_);
    try {
        this.state = 351;
        switch(this._input.LA(1)) {
        case bitmarkParser.OPDANGLE:
        case bitmarkParser.OPD:
        case bitmarkParser.OPQ:
            this.enterOuterAlt(localctx, 1);
            this.state = 348;
            this.bit();
            break;
        case bitmarkParser.EMOJI:
            this.enterOuterAlt(localctx, 2);
            this.state = 349;
            this.emoji();
            break;
        case bitmarkParser.T__4:
        case bitmarkParser.T__96:
        case bitmarkParser.OPESC:
        case bitmarkParser.NUMERIC:
        case bitmarkParser.STRING:
        case bitmarkParser.SENTENCE:
            this.enterOuterAlt(localctx, 3);
            this.state = 350;
            this.lines();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_bit;
    return this;
}

BitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitContext.prototype.constructor = BitContext;

BitContext.prototype.book = function() {
    return this.getTypedRuleContext(BookContext,0);
};

BitContext.prototype.chapter = function() {
    return this.getTypedRuleContext(ChapterContext,0);
};

BitContext.prototype.summary = function() {
    return this.getTypedRuleContext(SummaryContext,0);
};

BitContext.prototype.bit_alias = function() {
    return this.getTypedRuleContext(Bit_aliasContext,0);
};

BitContext.prototype.internal_link = function() {
    return this.getTypedRuleContext(Internal_linkContext,0);
};

BitContext.prototype.anchor = function() {
    return this.getTypedRuleContext(AnchorContext,0);
};

BitContext.prototype.group_born = function() {
    return this.getTypedRuleContext(Group_bornContext,0);
};

BitContext.prototype.group_died = function() {
    return this.getTypedRuleContext(Group_diedContext,0);
};

BitContext.prototype.cloze = function() {
    return this.getTypedRuleContext(ClozeContext,0);
};

BitContext.prototype.cloze_instruction_grouped = function() {
    return this.getTypedRuleContext(Cloze_instruction_groupedContext,0);
};

BitContext.prototype.cloze_solution_grouped = function() {
    return this.getTypedRuleContext(Cloze_solution_groupedContext,0);
};

BitContext.prototype.cloze_and_multiple_choice_text = function() {
    return this.getTypedRuleContext(Cloze_and_multiple_choice_textContext,0);
};

BitContext.prototype.multiple_choice = function() {
    return this.getTypedRuleContext(Multiple_choiceContext,0);
};

BitContext.prototype.multiple_choice_1 = function() {
    return this.getTypedRuleContext(Multiple_choice_1Context,0);
};

BitContext.prototype.multiple_choice_text = function() {
    return this.getTypedRuleContext(Multiple_choice_textContext,0);
};

BitContext.prototype.multiple_response = function() {
    return this.getTypedRuleContext(Multiple_responseContext,0);
};

BitContext.prototype.multiple_response_1 = function() {
    return this.getTypedRuleContext(Multiple_response_1Context,0);
};

BitContext.prototype.essay = function() {
    return this.getTypedRuleContext(EssayContext,0);
};

BitContext.prototype.interview = function() {
    return this.getTypedRuleContext(InterviewContext,0);
};

BitContext.prototype.interview_instruction_grouped = function() {
    return this.getTypedRuleContext(Interview_instruction_groupedContext,0);
};

BitContext.prototype.match_ = function() {
    return this.getTypedRuleContext(Match_Context,0);
};

BitContext.prototype.match_reverse = function() {
    return this.getTypedRuleContext(Match_reverseContext,0);
};

BitContext.prototype.match_picture = function() {
    return this.getTypedRuleContext(Match_pictureContext,0);
};

BitContext.prototype.match_audio = function() {
    return this.getTypedRuleContext(Match_audioContext,0);
};

BitContext.prototype.match_solution_grouped = function() {
    return this.getTypedRuleContext(Match_solution_groupedContext,0);
};

BitContext.prototype.true_false_1 = function() {
    return this.getTypedRuleContext(True_false_1Context,0);
};

BitContext.prototype.true_false = function() {
    return this.getTypedRuleContext(True_falseContext,0);
};

BitContext.prototype.sequence = function() {
    return this.getTypedRuleContext(SequenceContext,0);
};

BitContext.prototype.correction = function() {
    return this.getTypedRuleContext(CorrectionContext,0);
};

BitContext.prototype.mark_ = function() {
    return this.getTypedRuleContext(Mark_Context,0);
};

BitContext.prototype.document_upload = function() {
    return this.getTypedRuleContext(Document_uploadContext,0);
};

BitContext.prototype.take_picture = function() {
    return this.getTypedRuleContext(Take_pictureContext,0);
};

BitContext.prototype.record_audio = function() {
    return this.getTypedRuleContext(Record_audioContext,0);
};

BitContext.prototype.preparation_note = function() {
    return this.getTypedRuleContext(Preparation_noteContext,0);
};

BitContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

BitContext.prototype.article = function() {
    return this.getTypedRuleContext(ArticleContext,0);
};

BitContext.prototype.article_attachment = function() {
    return this.getTypedRuleContext(Article_attachmentContext,0);
};

BitContext.prototype.flashcard = function() {
    return this.getTypedRuleContext(FlashcardContext,0);
};

BitContext.prototype.flashcard_1 = function() {
    return this.getTypedRuleContext(Flashcard_1Context,0);
};

BitContext.prototype.chat = function() {
    return this.getTypedRuleContext(ChatContext,0);
};

BitContext.prototype.conversation = function() {
    return this.getTypedRuleContext(ConversationContext,0);
};

BitContext.prototype.bot_interview = function() {
    return this.getTypedRuleContext(Bot_interviewContext,0);
};

BitContext.prototype.self_assessment = function() {
    return this.getTypedRuleContext(Self_assessmentContext,0);
};

BitContext.prototype.rating = function() {
    return this.getTypedRuleContext(RatingContext,0);
};

BitContext.prototype.survey = function() {
    return this.getTypedRuleContext(SurveyContext,0);
};

BitContext.prototype.survey_1 = function() {
    return this.getTypedRuleContext(Survey_1Context,0);
};

BitContext.prototype.survey_anonymous = function() {
    return this.getTypedRuleContext(Survey_anonymousContext,0);
};

BitContext.prototype.survey_anonymous_1 = function() {
    return this.getTypedRuleContext(Survey_anonymous_1Context,0);
};

BitContext.prototype.hint = function() {
    return this.getTypedRuleContext(HintContext,0);
};

BitContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBit(this);
	}
};

BitContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBit(this);
	}
};

BitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.BitContext = BitContext;

bitmarkParser.prototype.bit = function() {

    var localctx = new BitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, bitmarkParser.RULE_bit);
    try {
        this.state = 402;
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 353;
            this.book();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 354;
            this.chapter();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 355;
            this.summary();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 356;
            this.bit_alias();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 357;
            this.internal_link();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 358;
            this.anchor();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 359;
            this.group_born();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 360;
            this.group_died();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 361;
            this.cloze();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 362;
            this.cloze_instruction_grouped();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 363;
            this.cloze_solution_grouped();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 364;
            this.cloze_and_multiple_choice_text();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 365;
            this.multiple_choice();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 366;
            this.multiple_choice_1();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 367;
            this.multiple_choice_text();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 368;
            this.multiple_response();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 369;
            this.multiple_response_1();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 370;
            this.essay();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 371;
            this.interview();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 372;
            this.interview_instruction_grouped();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 373;
            this.match_();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 374;
            this.match_reverse();
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 375;
            this.match_picture();
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 376;
            this.match_audio();
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 377;
            this.match_solution_grouped();
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 378;
            this.true_false_1();
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 379;
            this.true_false();
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 380;
            this.sequence();
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 381;
            this.correction();
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 382;
            this.mark_();
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 383;
            this.document_upload();
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 384;
            this.take_picture();
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 385;
            this.record_audio();
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 386;
            this.preparation_note();
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 387;
            this.assignment();
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 388;
            this.article();
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 389;
            this.article_attachment();
            break;

        case 38:
            this.enterOuterAlt(localctx, 38);
            this.state = 390;
            this.flashcard();
            break;

        case 39:
            this.enterOuterAlt(localctx, 39);
            this.state = 391;
            this.flashcard_1();
            break;

        case 40:
            this.enterOuterAlt(localctx, 40);
            this.state = 392;
            this.chat();
            break;

        case 41:
            this.enterOuterAlt(localctx, 41);
            this.state = 393;
            this.conversation();
            break;

        case 42:
            this.enterOuterAlt(localctx, 42);
            this.state = 394;
            this.bot_interview();
            break;

        case 43:
            this.enterOuterAlt(localctx, 43);
            this.state = 395;
            this.self_assessment();
            break;

        case 44:
            this.enterOuterAlt(localctx, 44);
            this.state = 396;
            this.rating();
            break;

        case 45:
            this.enterOuterAlt(localctx, 45);
            this.state = 397;
            this.survey();
            break;

        case 46:
            this.enterOuterAlt(localctx, 46);
            this.state = 398;
            this.survey_1();
            break;

        case 47:
            this.enterOuterAlt(localctx, 47);
            this.state = 399;
            this.survey_anonymous();
            break;

        case 48:
            this.enterOuterAlt(localctx, 48);
            this.state = 400;
            this.survey_anonymous_1();
            break;

        case 49:
            this.enterOuterAlt(localctx, 49);
            this.state = 401;
            this.hint();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BookContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_book;
    return this;
}

BookContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BookContext.prototype.constructor = BookContext;

BookContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

BookContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

BookContext.prototype.title_etc = function() {
    return this.getTypedRuleContext(Title_etcContext,0);
};

BookContext.prototype.sp = function() {
    return this.getTypedRuleContext(SpContext,0);
};

BookContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

BookContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBook(this);
	}
};

BookContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBook(this);
	}
};

BookContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBook(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.BookContext = BookContext;

bitmarkParser.prototype.book = function() {

    var localctx = new BookContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, bitmarkParser.RULE_book);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 404;
        this.opd();
        this.state = 405;
        this.match(bitmarkParser.T__0);
        this.state = 407;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.T__1 || _la===bitmarkParser.T__2) {
            this.state = 406;
            _la = this._input.LA(1);
            if(!(_la===bitmarkParser.T__1 || _la===bitmarkParser.T__2)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 410;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.SP) {
            this.state = 409;
            this.sp();
        }

        this.state = 412;
        this.cl();
        this.state = 416;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 413;
                this.nl(); 
            }
            this.state = 418;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
        }

        this.state = 419;
        this.title_etc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChapterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_chapter;
    return this;
}

ChapterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChapterContext.prototype.constructor = ChapterContext;

ChapterContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

ChapterContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

ChapterContext.prototype.title_etc = function() {
    return this.getTypedRuleContext(Title_etcContext,0);
};

ChapterContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

ChapterContext.prototype.sp = function() {
    return this.getTypedRuleContext(SpContext,0);
};

ChapterContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterChapter(this);
	}
};

ChapterContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitChapter(this);
	}
};

ChapterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitChapter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ChapterContext = ChapterContext;

bitmarkParser.prototype.chapter = function() {

    var localctx = new ChapterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, bitmarkParser.RULE_chapter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 421;
        this.opd();
        this.state = 422;
        this.match(bitmarkParser.T__3);
        this.state = 425;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.T__4) {
            this.state = 423;
            this.match(bitmarkParser.T__4);
            this.state = 424;
            this.string();
        }

        this.state = 428;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.SP) {
            this.state = 427;
            this.sp();
        }

        this.state = 430;
        this.cl();
        this.state = 431;
        this.title_etc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TitleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_title;
    return this;
}

TitleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TitleContext.prototype.constructor = TitleContext;

TitleContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

TitleContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

TitleContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterTitle(this);
	}
};

TitleContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitTitle(this);
	}
};

TitleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitTitle(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.TitleContext = TitleContext;

bitmarkParser.prototype.title = function() {

    var localctx = new TitleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, bitmarkParser.RULE_title);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433;
        this.match(bitmarkParser.T__5);
        this.state = 435; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 434;
            this.s_and_w();
            this.state = 437; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
        this.state = 439;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubtitleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_subtitle;
    return this;
}

SubtitleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubtitleContext.prototype.constructor = SubtitleContext;

SubtitleContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

SubtitleContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

SubtitleContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSubtitle(this);
	}
};

SubtitleContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSubtitle(this);
	}
};

SubtitleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSubtitle(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.SubtitleContext = SubtitleContext;

bitmarkParser.prototype.subtitle = function() {

    var localctx = new SubtitleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, bitmarkParser.RULE_subtitle);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 441;
        this.match(bitmarkParser.T__6);
        this.state = 443; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 442;
            this.s_and_w();
            this.state = 445; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
        this.state = 447;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProgressContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_progress;
    return this;
}

ProgressContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgressContext.prototype.constructor = ProgressContext;

ProgressContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

ProgressContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

ProgressContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

ProgressContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterProgress(this);
	}
};

ProgressContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitProgress(this);
	}
};

ProgressContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitProgress(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ProgressContext = ProgressContext;

bitmarkParser.prototype.progress = function() {

    var localctx = new ProgressContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, bitmarkParser.RULE_progress);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 449;
        this.opa();
        this.state = 450;
        this.match(bitmarkParser.T__7);
        this.state = 451;
        this.s_and_w();
        this.state = 452;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TocContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_toc;
    return this;
}

TocContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TocContext.prototype.constructor = TocContext;

TocContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

TocContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

TocContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

TocContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterToc(this);
	}
};

TocContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitToc(this);
	}
};

TocContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitToc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.TocContext = TocContext;

bitmarkParser.prototype.toc = function() {

    var localctx = new TocContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, bitmarkParser.RULE_toc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 454;
        this.opa();
        this.state = 455;
        this.match(bitmarkParser.T__8);
        this.state = 456;
        this.s_and_w();
        this.state = 457;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SummaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_summary;
    return this;
}

SummaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SummaryContext.prototype.constructor = SummaryContext;

SummaryContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

SummaryContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

SummaryContext.prototype.title_etc = function() {
    return this.getTypedRuleContext(Title_etcContext,0);
};

SummaryContext.prototype.sp = function() {
    return this.getTypedRuleContext(SpContext,0);
};

SummaryContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

SummaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSummary(this);
	}
};

SummaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSummary(this);
	}
};

SummaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSummary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.SummaryContext = SummaryContext;

bitmarkParser.prototype.summary = function() {

    var localctx = new SummaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, bitmarkParser.RULE_summary);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        this.opd();
        this.state = 460;
        this.match(bitmarkParser.T__9);
        this.state = 462;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.SP) {
            this.state = 461;
            this.sp();
        }

        this.state = 464;
        this.cl();
        this.state = 468;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 465;
                this.nl(); 
            }
            this.state = 470;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
        }

        this.state = 471;
        this.title_etc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Internal_linkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_internal_link;
    return this;
}

Internal_linkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Internal_linkContext.prototype.constructor = Internal_linkContext;

Internal_linkContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Internal_linkContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Internal_linkContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Internal_linkContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Internal_linkContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterInternal_link(this);
	}
};

Internal_linkContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitInternal_link(this);
	}
};

Internal_linkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitInternal_link(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Internal_linkContext = Internal_linkContext;

bitmarkParser.prototype.internal_link = function() {

    var localctx = new Internal_linkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, bitmarkParser.RULE_internal_link);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        this.opd();
        this.state = 474;
        this.match(bitmarkParser.T__10);
        this.state = 475;
        this.cl();
        this.state = 485;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 479;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===bitmarkParser.NL) {
                    this.state = 476;
                    this.nl();
                    this.state = 481;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 482;
                this.bitElem(); 
            }
            this.state = 487;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bit_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_bit_alias;
    return this;
}

Bit_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bit_aliasContext.prototype.constructor = Bit_aliasContext;

Bit_aliasContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Bit_aliasContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Bit_aliasContext.prototype.alias = function() {
    return this.getTypedRuleContext(AliasContext,0);
};

Bit_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBit_alias(this);
	}
};

Bit_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBit_alias(this);
	}
};

Bit_aliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBit_alias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Bit_aliasContext = Bit_aliasContext;

bitmarkParser.prototype.bit_alias = function() {

    var localctx = new Bit_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, bitmarkParser.RULE_bit_alias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 488;
        this.opd();
        this.state = 489;
        this.match(bitmarkParser.T__11);
        this.state = 490;
        this.cl();
        this.state = 491;
        this.alias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Title_etcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_title_etc;
    return this;
}

Title_etcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Title_etcContext.prototype.constructor = Title_etcContext;

Title_etcContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Title_etcContext.prototype.title = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TitleContext);
    } else {
        return this.getTypedRuleContext(TitleContext,i);
    }
};

Title_etcContext.prototype.subtitle = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubtitleContext);
    } else {
        return this.getTypedRuleContext(SubtitleContext,i);
    }
};

Title_etcContext.prototype.atdef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AtdefContext);
    } else {
        return this.getTypedRuleContext(AtdefContext,i);
    }
};

Title_etcContext.prototype.item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ItemContext);
    } else {
        return this.getTypedRuleContext(ItemContext,i);
    }
};

Title_etcContext.prototype.instruction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InstructionContext);
    } else {
        return this.getTypedRuleContext(InstructionContext,i);
    }
};

Title_etcContext.prototype.alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AliasContext);
    } else {
        return this.getTypedRuleContext(AliasContext,i);
    }
};

Title_etcContext.prototype.anchor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnchorContext);
    } else {
        return this.getTypedRuleContext(AnchorContext,i);
    }
};

Title_etcContext.prototype.progress = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgressContext);
    } else {
        return this.getTypedRuleContext(ProgressContext,i);
    }
};

Title_etcContext.prototype.toc = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TocContext);
    } else {
        return this.getTypedRuleContext(TocContext,i);
    }
};

Title_etcContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterTitle_etc(this);
	}
};

Title_etcContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitTitle_etc(this);
	}
};

Title_etcContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitTitle_etc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Title_etcContext = Title_etcContext;

bitmarkParser.prototype.title_etc = function() {

    var localctx = new Title_etcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, bitmarkParser.RULE_title_etc);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 511;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 494;
                _la = this._input.LA(1);
                if(_la===bitmarkParser.NL) {
                    this.state = 493;
                    this.nl();
                }

                this.state = 505;
                var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 496;
                    this.title();
                    break;

                case 2:
                    this.state = 497;
                    this.subtitle();
                    break;

                case 3:
                    this.state = 498;
                    this.atdef();
                    break;

                case 4:
                    this.state = 499;
                    this.item();
                    break;

                case 5:
                    this.state = 500;
                    this.instruction();
                    break;

                case 6:
                    this.state = 501;
                    this.alias();
                    break;

                case 7:
                    this.state = 502;
                    this.anchor();
                    break;

                case 8:
                    this.state = 503;
                    this.progress();
                    break;

                case 9:
                    this.state = 504;
                    this.toc();
                    break;

                }
                this.state = 507;
                this.nl(); 
            }
            this.state = 513;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_bornContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_group_born;
    return this;
}

Group_bornContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_bornContext.prototype.constructor = Group_bornContext;

Group_bornContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Group_bornContext.prototype.cl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClContext);
    } else {
        return this.getTypedRuleContext(ClContext,i);
    }
};

Group_bornContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

Group_bornContext.prototype.opr = function() {
    return this.getTypedRuleContext(OprContext,0);
};

Group_bornContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

Group_bornContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterGroup_born(this);
	}
};

Group_bornContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitGroup_born(this);
	}
};

Group_bornContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitGroup_born(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Group_bornContext = Group_bornContext;

bitmarkParser.prototype.group_born = function() {

    var localctx = new Group_bornContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, bitmarkParser.RULE_group_born);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 514;
        this.opd();
        this.state = 515;
        this.match(bitmarkParser.T__12);
        this.state = 516;
        this.cl();

        this.state = 517;
        this.opr();
        this.state = 518;
        this.s_and_w();
        this.state = 519;
        this.cl();
        this.state = 521;
        this.nl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_diedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_group_died;
    return this;
}

Group_diedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_diedContext.prototype.constructor = Group_diedContext;

Group_diedContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Group_diedContext.prototype.cl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClContext);
    } else {
        return this.getTypedRuleContext(ClContext,i);
    }
};

Group_diedContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

Group_diedContext.prototype.opr = function() {
    return this.getTypedRuleContext(OprContext,0);
};

Group_diedContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

Group_diedContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterGroup_died(this);
	}
};

Group_diedContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitGroup_died(this);
	}
};

Group_diedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitGroup_died(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Group_diedContext = Group_diedContext;

bitmarkParser.prototype.group_died = function() {

    var localctx = new Group_diedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, bitmarkParser.RULE_group_died);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this.opd();
        this.state = 524;
        this.match(bitmarkParser.T__13);
        this.state = 525;
        this.cl();

        this.state = 526;
        this.opr();
        this.state = 527;
        this.s_and_w();
        this.state = 528;
        this.cl();
        this.state = 530;
        this.nl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClozeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_cloze;
    return this;
}

ClozeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClozeContext.prototype.constructor = ClozeContext;

ClozeContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

ClozeContext.prototype.cloze_ = function() {
    return this.getTypedRuleContext(Cloze_Context,0);
};

ClozeContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

ClozeContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

ClozeContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

ClozeContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

ClozeContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterCloze(this);
	}
};

ClozeContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitCloze(this);
	}
};

ClozeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitCloze(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ClozeContext = ClozeContext;

bitmarkParser.prototype.cloze = function() {

    var localctx = new ClozeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, bitmarkParser.RULE_cloze);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 532;
        this.opd();
        this.state = 533;
        this.cloze_();
        this.state = 534;
        this.format();
        this.state = 535;
        this.cl();
        this.state = 539;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 536;
            this.nl();
            this.state = 541;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 549; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 542;
        		this.bitElem();
        		this.state = 546;
        		this._errHandler.sync(this);
        		var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		    if(_alt===1) {
        		        this.state = 543;
        		        this.nl(); 
        		    }
        		    this.state = 548;
        		    this._errHandler.sync(this);
        		    _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 551; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,21, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BitElemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_bitElem;
    return this;
}

BitElemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitElemContext.prototype.constructor = BitElemContext;

BitElemContext.prototype.titlestar_ = function() {
    return this.getTypedRuleContext(Titlestar_Context,0);
};

BitElemContext.prototype.note_ = function() {
    return this.getTypedRuleContext(Note_Context,0);
};

BitElemContext.prototype.remark_ = function() {
    return this.getTypedRuleContext(Remark_Context,0);
};

BitElemContext.prototype.help_ = function() {
    return this.getTypedRuleContext(Help_Context,0);
};

BitElemContext.prototype.highlight_ = function() {
    return this.getTypedRuleContext(Highlight_Context,0);
};

BitElemContext.prototype.annotate_ = function() {
    return this.getTypedRuleContext(Annotate_Context,0);
};

BitElemContext.prototype.annotate_image_ = function() {
    return this.getTypedRuleContext(Annotate_image_Context,0);
};

BitElemContext.prototype.ins_ = function() {
    return this.getTypedRuleContext(Ins_Context,0);
};

BitElemContext.prototype.del_ = function() {
    return this.getTypedRuleContext(Del_Context,0);
};

BitElemContext.prototype.listline_ = function() {
    return this.getTypedRuleContext(Listline_Context,0);
};

BitElemContext.prototype.gap = function() {
    return this.getTypedRuleContext(GapContext,0);
};

BitElemContext.prototype.atdef = function() {
    return this.getTypedRuleContext(AtdefContext,0);
};

BitElemContext.prototype.item = function() {
    return this.getTypedRuleContext(ItemContext,0);
};

BitElemContext.prototype.instruction = function() {
    return this.getTypedRuleContext(InstructionContext,0);
};

BitElemContext.prototype.hint = function() {
    return this.getTypedRuleContext(HintContext,0);
};

BitElemContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

BitElemContext.prototype.example = function() {
    return this.getTypedRuleContext(ExampleContext,0);
};

BitElemContext.prototype.imagebit = function() {
    return this.getTypedRuleContext(ImagebitContext,0);
};

BitElemContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

BitElemContext.prototype.audiobit = function() {
    return this.getTypedRuleContext(AudiobitContext,0);
};

BitElemContext.prototype.videobit = function() {
    return this.getTypedRuleContext(VideobitContext,0);
};

BitElemContext.prototype.articlebit = function() {
    return this.getTypedRuleContext(ArticlebitContext,0);
};

BitElemContext.prototype.documentbit = function() {
    return this.getTypedRuleContext(DocumentbitContext,0);
};

BitElemContext.prototype.appbit = function() {
    return this.getTypedRuleContext(AppbitContext,0);
};

BitElemContext.prototype.alias = function() {
    return this.getTypedRuleContext(AliasContext,0);
};

BitElemContext.prototype.sp = function() {
    return this.getTypedRuleContext(SpContext,0);
};

BitElemContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBitElem(this);
	}
};

BitElemContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBitElem(this);
	}
};

BitElemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBitElem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.BitElemContext = BitElemContext;

bitmarkParser.prototype.bitElem = function() {

    var localctx = new BitElemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, bitmarkParser.RULE_bitElem);
    try {
        this.state = 596;
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 553;
            this.titlestar_();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 554;
            this.note_();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 555;
            this.remark_();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 556;
            this.help_();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 557;
            this.highlight_();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 558;
            this.annotate_();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 559;
            this.annotate_image_();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 560;
            this.ins_();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 561;
            this.del_();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 562;
            this.listline_();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 563;
            this.gap();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 564;
            this.atdef();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 565;
            this.item();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 566;
            this.instruction();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 567;
            this.hint();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 568;
            this.s_and_w();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 569;
            this.example();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 570;
            this.imagebit();
            this.state = 574;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 571;
                    this.nl(); 
                }
                this.state = 576;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
            }

            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 577;
            this.audiobit();
            this.state = 581;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 578;
                    this.nl(); 
                }
                this.state = 583;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
            }

            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 584;
            this.videobit();
            this.state = 588;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 585;
                    this.nl(); 
                }
                this.state = 590;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
            }

            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 591;
            this.articlebit();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 592;
            this.documentbit();
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 593;
            this.appbit();
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 594;
            this.alias();
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 595;
            this.sp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cloze_instruction_groupedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_cloze_instruction_grouped;
    return this;
}

Cloze_instruction_groupedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cloze_instruction_groupedContext.prototype.constructor = Cloze_instruction_groupedContext;

Cloze_instruction_groupedContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Cloze_instruction_groupedContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Cloze_instruction_groupedContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Cloze_instruction_groupedContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Cloze_instruction_groupedContext.prototype.item = function() {
    return this.getTypedRuleContext(ItemContext,0);
};

Cloze_instruction_groupedContext.prototype.instruction = function() {
    return this.getTypedRuleContext(InstructionContext,0);
};

Cloze_instruction_groupedContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Cloze_instruction_groupedContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterCloze_instruction_grouped(this);
	}
};

Cloze_instruction_groupedContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitCloze_instruction_grouped(this);
	}
};

Cloze_instruction_groupedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitCloze_instruction_grouped(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Cloze_instruction_groupedContext = Cloze_instruction_groupedContext;

bitmarkParser.prototype.cloze_instruction_grouped = function() {

    var localctx = new Cloze_instruction_groupedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, bitmarkParser.RULE_cloze_instruction_grouped);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this.opd();
        this.state = 599;
        this.match(bitmarkParser.T__14);
        this.state = 600;
        this.format();
        this.state = 601;
        this.cl();
        this.state = 603;
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        if(la_===1) {
            this.state = 602;
            this.nl();

        }
        this.state = 608;
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        if(la_===1) {
            this.state = 605;
            this.item();
            this.state = 606;
            this.nl();

        }
        this.state = 611;
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 610;
            this.instruction();

        }
        this.state = 616;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 613;
                this.nl(); 
            }
            this.state = 618;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
        }

        this.state = 628;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 619;
                this.bitElem();
                this.state = 623;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 620;
                        this.nl(); 
                    }
                    this.state = 625;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
                }
         
            }
            this.state = 630;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cloze_solution_groupedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_cloze_solution_grouped;
    return this;
}

Cloze_solution_groupedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cloze_solution_groupedContext.prototype.constructor = Cloze_solution_groupedContext;

Cloze_solution_groupedContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Cloze_solution_groupedContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Cloze_solution_groupedContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Cloze_solution_groupedContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Cloze_solution_groupedContext.prototype.item = function() {
    return this.getTypedRuleContext(ItemContext,0);
};

Cloze_solution_groupedContext.prototype.instruction = function() {
    return this.getTypedRuleContext(InstructionContext,0);
};

Cloze_solution_groupedContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Cloze_solution_groupedContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterCloze_solution_grouped(this);
	}
};

Cloze_solution_groupedContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitCloze_solution_grouped(this);
	}
};

Cloze_solution_groupedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitCloze_solution_grouped(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Cloze_solution_groupedContext = Cloze_solution_groupedContext;

bitmarkParser.prototype.cloze_solution_grouped = function() {

    var localctx = new Cloze_solution_groupedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, bitmarkParser.RULE_cloze_solution_grouped);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this.opd();
        this.state = 632;
        this.match(bitmarkParser.T__15);
        this.state = 633;
        this.format();
        this.state = 634;
        this.cl();
        this.state = 636;
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        if(la_===1) {
            this.state = 635;
            this.nl();

        }
        this.state = 641;
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 638;
            this.item();
            this.state = 639;
            this.nl();

        }
        this.state = 644;
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        if(la_===1) {
            this.state = 643;
            this.instruction();

        }
        this.state = 649;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 646;
                this.nl(); 
            }
            this.state = 651;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

        this.state = 661;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 652;
                this.bitElem();
                this.state = 656;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 653;
                        this.nl(); 
                    }
                    this.state = 658;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
                }
         
            }
            this.state = 663;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GapContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_gap;
    return this;
}

GapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GapContext.prototype.constructor = GapContext;

GapContext.prototype.single_gap = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Single_gapContext);
    } else {
        return this.getTypedRuleContext(Single_gapContext,i);
    }
};

GapContext.prototype.instruction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InstructionContext);
    } else {
        return this.getTypedRuleContext(InstructionContext,i);
    }
};

GapContext.prototype.hint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HintContext);
    } else {
        return this.getTypedRuleContext(HintContext,i);
    }
};

GapContext.prototype.example = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExampleContext);
    } else {
        return this.getTypedRuleContext(ExampleContext,i);
    }
};

GapContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterGap(this);
	}
};

GapContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitGap(this);
	}
};

GapContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitGap(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.GapContext = GapContext;

bitmarkParser.prototype.gap = function() {

    var localctx = new GapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, bitmarkParser.RULE_gap);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 664;
        this.single_gap();
        this.state = 671;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 669;
                switch(this._input.LA(1)) {
                case bitmarkParser.OPU:
                    this.state = 665;
                    this.single_gap();
                    break;
                case bitmarkParser.OPB:
                    this.state = 666;
                    this.instruction();
                    break;
                case bitmarkParser.OPQ:
                    this.state = 667;
                    this.hint();
                    break;
                case bitmarkParser.OPA:
                    this.state = 668;
                    this.example();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 673;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Single_gapContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_single_gap;
    return this;
}

Single_gapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_gapContext.prototype.constructor = Single_gapContext;

Single_gapContext.prototype.opu = function() {
    return this.getTypedRuleContext(OpuContext,0);
};

Single_gapContext.prototype.clnsp = function() {
    return this.getTypedRuleContext(ClnspContext,0);
};

Single_gapContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

Single_gapContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

Single_gapContext.prototype.cloze_ = function() {
    return this.getTypedRuleContext(Cloze_Context,0);
};

Single_gapContext.prototype.sp = function() {
    return this.getTypedRuleContext(SpContext,0);
};

Single_gapContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Single_gapContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSingle_gap(this);
	}
};

Single_gapContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSingle_gap(this);
	}
};

Single_gapContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSingle_gap(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Single_gapContext = Single_gapContext;

bitmarkParser.prototype.single_gap = function() {

    var localctx = new Single_gapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, bitmarkParser.RULE_single_gap);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 674;
        this.opu();
        this.state = 676;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.SP) {
            this.state = 675;
            this.sp();
        }

        this.state = 682;
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        switch(la_) {
        case 1:
            this.state = 678;
            this.numeric();
            break;

        case 2:
            this.state = 679;
            this.string();
            break;

        case 3:
            this.state = 680;
            this.cloze_();
            break;

        case 4:
            break;

        }
        this.state = 687;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0)) {
            this.state = 684;
            this.s_and_w();
            this.state = 689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 690;
        this.clnsp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InstructionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_instruction;
    return this;
}

InstructionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstructionContext.prototype.constructor = InstructionContext;

InstructionContext.prototype.opb = function() {
    return this.getTypedRuleContext(OpbContext,0);
};

InstructionContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

InstructionContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

InstructionContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

InstructionContext.prototype.sp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SpContext);
    } else {
        return this.getTypedRuleContext(SpContext,i);
    }
};

InstructionContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterInstruction(this);
	}
};

InstructionContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitInstruction(this);
	}
};

InstructionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitInstruction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.InstructionContext = InstructionContext;

bitmarkParser.prototype.instruction = function() {

    var localctx = new InstructionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, bitmarkParser.RULE_instruction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 692;
        this.opb();
        this.state = 694;
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 693;
            this.s_and_w();

        }
        this.state = 713;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0)) {
            this.state = 696;
            this.s_and_w();
            this.state = 702;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 697;
                    this.nl();
                    this.state = 698;
                    this.sp(); 
                }
                this.state = 704;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
            }

            this.state = 708;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.NL) {
                this.state = 705;
                this.nl();
                this.state = 710;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 715;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 716;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_hint;
    return this;
}

HintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintContext.prototype.constructor = HintContext;

HintContext.prototype.opq = function() {
    return this.getTypedRuleContext(OpqContext,0);
};

HintContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

HintContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

HintContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

HintContext.prototype.sp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SpContext);
    } else {
        return this.getTypedRuleContext(SpContext,i);
    }
};

HintContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterHint(this);
	}
};

HintContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitHint(this);
	}
};

HintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitHint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.HintContext = HintContext;

bitmarkParser.prototype.hint = function() {

    var localctx = new HintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, bitmarkParser.RULE_hint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 718;
        this.opq();
        this.state = 725;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 720;
                _la = this._input.LA(1);
                if(_la===bitmarkParser.SP) {
                    this.state = 719;
                    this.sp();
                }

                this.state = 722;
                this.nl(); 
            }
            this.state = 727;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

        this.state = 734; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 734;
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            switch(la_) {
            case 1:
                this.state = 728;
                this.s_and_w();
                break;

            case 2:
                this.state = 729;
                this.match(bitmarkParser.T__4);
                break;

            case 3:
                this.state = 731;
                _la = this._input.LA(1);
                if(_la===bitmarkParser.SP) {
                    this.state = 730;
                    this.sp();
                }

                this.state = 733;
                this.nl();
                break;

            }
            this.state = 736; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SP - 134)) | (1 << (bitmarkParser.NL - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
        this.state = 738;
        this.cl();
        this.state = 745;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 740;
                _la = this._input.LA(1);
                if(_la===bitmarkParser.SP) {
                    this.state = 739;
                    this.sp();
                }

                this.state = 742;
                this.nl(); 
            }
            this.state = 747;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChoicesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_choices;
    return this;
}

ChoicesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoicesContext.prototype.constructor = ChoicesContext;

ChoicesContext.prototype.choice_plus = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Choice_plusContext);
    } else {
        return this.getTypedRuleContext(Choice_plusContext,i);
    }
};

ChoicesContext.prototype.choice_minus = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Choice_minusContext);
    } else {
        return this.getTypedRuleContext(Choice_minusContext,i);
    }
};

ChoicesContext.prototype.choice_star = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Choice_starContext);
    } else {
        return this.getTypedRuleContext(Choice_starContext,i);
    }
};

ChoicesContext.prototype.example = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExampleContext);
    } else {
        return this.getTypedRuleContext(ExampleContext,i);
    }
};

ChoicesContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

ChoicesContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterChoices(this);
	}
};

ChoicesContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitChoices(this);
	}
};

ChoicesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitChoices(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ChoicesContext = ChoicesContext;

bitmarkParser.prototype.choices = function() {

    var localctx = new ChoicesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, bitmarkParser.RULE_choices);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 751;
        switch(this._input.LA(1)) {
        case bitmarkParser.OPP:
            this.state = 748;
            this.choice_plus();
            break;
        case bitmarkParser.OPM:
            this.state = 749;
            this.choice_minus();
            break;
        case bitmarkParser.OPR:
            this.state = 750;
            this.choice_star();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 764;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 754;
                _la = this._input.LA(1);
                if(_la===bitmarkParser.NL) {
                    this.state = 753;
                    this.nl();
                }

                this.state = 760;
                switch(this._input.LA(1)) {
                case bitmarkParser.OPP:
                    this.state = 756;
                    this.choice_plus();
                    break;
                case bitmarkParser.OPM:
                    this.state = 757;
                    this.choice_minus();
                    break;
                case bitmarkParser.OPR:
                    this.state = 758;
                    this.choice_star();
                    break;
                case bitmarkParser.OPA:
                    this.state = 759;
                    this.example();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 766;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Choice_plusContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_choice_plus;
    return this;
}

Choice_plusContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Choice_plusContext.prototype.constructor = Choice_plusContext;

Choice_plusContext.prototype.opp = function() {
    return this.getTypedRuleContext(OppContext,0);
};

Choice_plusContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Choice_plusContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Choice_plusContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterChoice_plus(this);
	}
};

Choice_plusContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitChoice_plus(this);
	}
};

Choice_plusContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitChoice_plus(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Choice_plusContext = Choice_plusContext;

bitmarkParser.prototype.choice_plus = function() {

    var localctx = new Choice_plusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, bitmarkParser.RULE_choice_plus);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 767;
        this.opp();
        this.state = 769; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 768;
            this.s_and_w();
            this.state = 771; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
        this.state = 773;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Choice_minusContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_choice_minus;
    return this;
}

Choice_minusContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Choice_minusContext.prototype.constructor = Choice_minusContext;

Choice_minusContext.prototype.opm = function() {
    return this.getTypedRuleContext(OpmContext,0);
};

Choice_minusContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Choice_minusContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Choice_minusContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterChoice_minus(this);
	}
};

Choice_minusContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitChoice_minus(this);
	}
};

Choice_minusContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitChoice_minus(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Choice_minusContext = Choice_minusContext;

bitmarkParser.prototype.choice_minus = function() {

    var localctx = new Choice_minusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, bitmarkParser.RULE_choice_minus);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 775;
        this.opm();
        this.state = 777; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 776;
            this.s_and_w();
            this.state = 779; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
        this.state = 781;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Choice_starContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_choice_star;
    return this;
}

Choice_starContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Choice_starContext.prototype.constructor = Choice_starContext;

Choice_starContext.prototype.opr = function() {
    return this.getTypedRuleContext(OprContext,0);
};

Choice_starContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Choice_starContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Choice_starContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterChoice_star(this);
	}
};

Choice_starContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitChoice_star(this);
	}
};

Choice_starContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitChoice_star(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Choice_starContext = Choice_starContext;

bitmarkParser.prototype.choice_star = function() {

    var localctx = new Choice_starContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, bitmarkParser.RULE_choice_star);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 783;
        this.opr();
        this.state = 785; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 784;
            this.s_and_w();
            this.state = 787; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
        this.state = 789;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiple_choice_1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_multiple_choice_1;
    return this;
}

Multiple_choice_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiple_choice_1Context.prototype.constructor = Multiple_choice_1Context;

Multiple_choice_1Context.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Multiple_choice_1Context.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Multiple_choice_1Context.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Multiple_choice_1Context.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Multiple_choice_1Context.prototype.choices = function() {
    return this.getTypedRuleContext(ChoicesContext,0);
};

Multiple_choice_1Context.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Multiple_choice_1Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMultiple_choice_1(this);
	}
};

Multiple_choice_1Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMultiple_choice_1(this);
	}
};

Multiple_choice_1Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMultiple_choice_1(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Multiple_choice_1Context = Multiple_choice_1Context;

bitmarkParser.prototype.multiple_choice_1 = function() {

    var localctx = new Multiple_choice_1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 54, bitmarkParser.RULE_multiple_choice_1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 791;
        this.opd();
        this.state = 792;
        this.match(bitmarkParser.T__16);
        this.state = 793;
        this.format();
        this.state = 794;
        this.cl();
        this.state = 795;
        this.nl();
        this.state = 805;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 796;
            this.bitElem();
            this.state = 800;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.NL) {
                this.state = 797;
                this.nl();
                this.state = 802;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 807;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 808;
        this.choices();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiple_choiceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_multiple_choice;
    return this;
}

Multiple_choiceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiple_choiceContext.prototype.constructor = Multiple_choiceContext;

Multiple_choiceContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Multiple_choiceContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Multiple_choiceContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Multiple_choiceContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Multiple_choiceContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Multiple_choiceContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Multiple_choiceContext.prototype.choices = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChoicesContext);
    } else {
        return this.getTypedRuleContext(ChoicesContext,i);
    }
};

Multiple_choiceContext.prototype.instruction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InstructionContext);
    } else {
        return this.getTypedRuleContext(InstructionContext,i);
    }
};

Multiple_choiceContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMultiple_choice(this);
	}
};

Multiple_choiceContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMultiple_choice(this);
	}
};

Multiple_choiceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMultiple_choice(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Multiple_choiceContext = Multiple_choiceContext;

bitmarkParser.prototype.multiple_choice = function() {

    var localctx = new Multiple_choiceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, bitmarkParser.RULE_multiple_choice);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 810;
        this.opd();
        this.state = 811;
        this.match(bitmarkParser.T__17);
        this.state = 812;
        this.format();
        this.state = 813;
        this.cl();
        this.state = 814;
        this.nl();
        this.state = 819; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 815;
        		this.bitElem();
        		this.state = 817;
        		var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        		if(la_===1) {
        		    this.state = 816;
        		    this.nl();

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 821; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,64, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 833; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 825;
        		switch (this._input.LA(1)) {
        		case bitmarkParser.HSPL:
        		case bitmarkParser.HSPL2:
        			this.state = 823;
        			this.hspl();
        			break;
        		case bitmarkParser.NL:
        			this.state = 824;
        			this.nl();
        			break;
        		case bitmarkParser.OPB:
        		case bitmarkParser.OPP:
        		case bitmarkParser.OPM:
        		case bitmarkParser.OPR:
        			break;
        		default:
        			throw new antlr4.error.NoViableAltException(this);
        		}
        		this.state = 830;
        		_la = this._input.LA(1);
        		if(_la===bitmarkParser.OPB) {
        		    this.state = 827;
        		    this.instruction();
        		    this.state = 828;
        		    this.nl();
        		}

        		this.state = 832;
        		this.choices();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 835; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,67, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 839;
        switch(this._input.LA(1)) {
        case bitmarkParser.HSPL:
        case bitmarkParser.HSPL2:
            this.state = 837;
            this.hspl();
            break;
        case bitmarkParser.NL:
            this.state = 838;
            this.nl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 844;
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 841;
            this.bitElem();
            this.state = 842;
            this.nl();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiple_response_1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_multiple_response_1;
    return this;
}

Multiple_response_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiple_response_1Context.prototype.constructor = Multiple_response_1Context;

Multiple_response_1Context.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Multiple_response_1Context.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Multiple_response_1Context.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Multiple_response_1Context.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Multiple_response_1Context.prototype.choices = function() {
    return this.getTypedRuleContext(ChoicesContext,0);
};

Multiple_response_1Context.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Multiple_response_1Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMultiple_response_1(this);
	}
};

Multiple_response_1Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMultiple_response_1(this);
	}
};

Multiple_response_1Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMultiple_response_1(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Multiple_response_1Context = Multiple_response_1Context;

bitmarkParser.prototype.multiple_response_1 = function() {

    var localctx = new Multiple_response_1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 58, bitmarkParser.RULE_multiple_response_1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 846;
        this.opd();
        this.state = 847;
        this.match(bitmarkParser.T__18);
        this.state = 848;
        this.format();
        this.state = 849;
        this.cl();
        this.state = 850;
        this.nl();
        this.state = 855; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 851;
            this.bitElem();
            this.state = 853;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.NL) {
                this.state = 852;
                this.nl();
            }

            this.state = 857; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0));
        this.state = 859;
        this.choices();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiple_responseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_multiple_response;
    return this;
}

Multiple_responseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiple_responseContext.prototype.constructor = Multiple_responseContext;

Multiple_responseContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Multiple_responseContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Multiple_responseContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Multiple_responseContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Multiple_responseContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Multiple_responseContext.prototype.choices = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChoicesContext);
    } else {
        return this.getTypedRuleContext(ChoicesContext,i);
    }
};

Multiple_responseContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Multiple_responseContext.prototype.instruction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InstructionContext);
    } else {
        return this.getTypedRuleContext(InstructionContext,i);
    }
};

Multiple_responseContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMultiple_response(this);
	}
};

Multiple_responseContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMultiple_response(this);
	}
};

Multiple_responseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMultiple_response(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Multiple_responseContext = Multiple_responseContext;

bitmarkParser.prototype.multiple_response = function() {

    var localctx = new Multiple_responseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, bitmarkParser.RULE_multiple_response);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 861;
        this.opd();
        this.state = 862;
        this.match(bitmarkParser.T__19);
        this.state = 863;
        this.format();
        this.state = 864;
        this.cl();
        this.state = 865;
        this.nl();
        this.state = 873; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 866;
        		this.bitElem();
        		this.state = 870;
        		this._errHandler.sync(this);
        		var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		    if(_alt===1) {
        		        this.state = 867;
        		        this.nl(); 
        		    }
        		    this.state = 872;
        		    this._errHandler.sync(this);
        		    _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 875; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,73, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 893; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 879;
        		switch (this._input.LA(1)) {
        		case bitmarkParser.HSPL:
        		case bitmarkParser.HSPL2:
        			this.state = 877;
        			this.hspl();
        			break;
        		case bitmarkParser.NL:
        			this.state = 878;
        			this.nl();
        			break;
        		case bitmarkParser.OPB:
        		case bitmarkParser.OPP:
        		case bitmarkParser.OPM:
        		case bitmarkParser.OPR:
        			break;
        		default:
        			throw new antlr4.error.NoViableAltException(this);
        		}
        		this.state = 884;
        		_la = this._input.LA(1);
        		if(_la===bitmarkParser.OPB) {
        		    this.state = 881;
        		    this.instruction();
        		    this.state = 882;
        		    this.nl();
        		}

        		this.state = 886;
        		this.choices();
        		this.state = 890;
        		this._errHandler.sync(this);
        		var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		    if(_alt===1) {
        		        this.state = 887;
        		        this.nl(); 
        		    }
        		    this.state = 892;
        		    this._errHandler.sync(this);
        		    _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 895; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,77, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 899;
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        if(la_===1) {
            this.state = 897;
            this.hspl();

        } else if(la_===2) {
            this.state = 898;
            this.nl();

        }
        this.state = 904;
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        if(la_===1) {
            this.state = 901;
            this.bitElem();
            this.state = 902;
            this.nl();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiple_choice_textContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_multiple_choice_text;
    return this;
}

Multiple_choice_textContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiple_choice_textContext.prototype.constructor = Multiple_choice_textContext;

Multiple_choice_textContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Multiple_choice_textContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Multiple_choice_textContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Multiple_choice_textContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Multiple_choice_textContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Multiple_choice_textContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Multiple_choice_textContext.prototype.headed_inline_choices = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Headed_inline_choicesContext);
    } else {
        return this.getTypedRuleContext(Headed_inline_choicesContext,i);
    }
};

Multiple_choice_textContext.prototype.sp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SpContext);
    } else {
        return this.getTypedRuleContext(SpContext,i);
    }
};

Multiple_choice_textContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMultiple_choice_text(this);
	}
};

Multiple_choice_textContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMultiple_choice_text(this);
	}
};

Multiple_choice_textContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMultiple_choice_text(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Multiple_choice_textContext = Multiple_choice_textContext;

bitmarkParser.prototype.multiple_choice_text = function() {

    var localctx = new Multiple_choice_textContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, bitmarkParser.RULE_multiple_choice_text);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 906;
        this.opd();
        this.state = 907;
        this.match(bitmarkParser.T__20);
        this.state = 908;
        this.format();
        this.state = 909;
        this.cl();
        this.state = 910;
        this.nl();
        this.state = 918; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 911;
        		this.bitElem();
        		this.state = 915;
        		this._errHandler.sync(this);
        		var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		    if(_alt===1) {
        		        this.state = 912;
        		        this.nl(); 
        		    }
        		    this.state = 917;
        		    this._errHandler.sync(this);
        		    _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 920; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,81, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 934;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 928; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 928;
                		switch(this._input.LA(1)) {
                		case bitmarkParser.SP:
                		case bitmarkParser.NL:
                		    this.state = 923;
                		    _la = this._input.LA(1);
                		    if(_la===bitmarkParser.SP) {
                		        this.state = 922;
                		        this.sp();
                		    }

                		    this.state = 925;
                		    this.nl();
                		    break;
                		case bitmarkParser.T__4:
                		case bitmarkParser.T__96:
                		case bitmarkParser.OPESC:
                		case bitmarkParser.NUMERIC:
                		case bitmarkParser.STRING:
                		case bitmarkParser.SENTENCE:
                		    this.state = 926;
                		    this.s_and_w();
                		    break;
                		case bitmarkParser.OPP:
                		case bitmarkParser.OPM:
                		case bitmarkParser.OPS:
                		case bitmarkParser.OPR:
                		    this.state = 927;
                		    this.headed_inline_choices();
                		    break;
                		default:
                		    throw new antlr4.error.NoViableAltException(this);
                		}
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 930; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,84, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER ); 
            }
            this.state = 936;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Headed_inline_choicesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_headed_inline_choices;
    return this;
}

Headed_inline_choicesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Headed_inline_choicesContext.prototype.constructor = Headed_inline_choicesContext;

Headed_inline_choicesContext.prototype.inline_choices = function() {
    return this.getTypedRuleContext(Inline_choicesContext,0);
};

Headed_inline_choicesContext.prototype.choice_head = function() {
    return this.getTypedRuleContext(Choice_headContext,0);
};

Headed_inline_choicesContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterHeaded_inline_choices(this);
	}
};

Headed_inline_choicesContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitHeaded_inline_choices(this);
	}
};

Headed_inline_choicesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitHeaded_inline_choices(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Headed_inline_choicesContext = Headed_inline_choicesContext;

bitmarkParser.prototype.headed_inline_choices = function() {

    var localctx = new Headed_inline_choicesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, bitmarkParser.RULE_headed_inline_choices);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 938;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.OPS) {
            this.state = 937;
            this.choice_head();
        }

        this.state = 940;
        this.inline_choices();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Headed_choicesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_headed_choices;
    return this;
}

Headed_choicesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Headed_choicesContext.prototype.constructor = Headed_choicesContext;

Headed_choicesContext.prototype.choices = function() {
    return this.getTypedRuleContext(ChoicesContext,0);
};

Headed_choicesContext.prototype.choice_head = function() {
    return this.getTypedRuleContext(Choice_headContext,0);
};

Headed_choicesContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterHeaded_choices(this);
	}
};

Headed_choicesContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitHeaded_choices(this);
	}
};

Headed_choicesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitHeaded_choices(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Headed_choicesContext = Headed_choicesContext;

bitmarkParser.prototype.headed_choices = function() {

    var localctx = new Headed_choicesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, bitmarkParser.RULE_headed_choices);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 943;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.OPS) {
            this.state = 942;
            this.choice_head();
        }

        this.state = 945;
        this.choices();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Choice_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_choice_head;
    return this;
}

Choice_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Choice_headContext.prototype.constructor = Choice_headContext;

Choice_headContext.prototype.ops = function() {
    return this.getTypedRuleContext(OpsContext,0);
};

Choice_headContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

Choice_headContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Choice_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterChoice_head(this);
	}
};

Choice_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitChoice_head(this);
	}
};

Choice_headContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitChoice_head(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Choice_headContext = Choice_headContext;

bitmarkParser.prototype.choice_head = function() {

    var localctx = new Choice_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, bitmarkParser.RULE_choice_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 947;
        this.ops();
        this.state = 948;
        this.s_and_w();
        this.state = 949;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Inline_choicesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_inline_choices;
    return this;
}

Inline_choicesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inline_choicesContext.prototype.constructor = Inline_choicesContext;

Inline_choicesContext.prototype.choice_plus = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Choice_plusContext);
    } else {
        return this.getTypedRuleContext(Choice_plusContext,i);
    }
};

Inline_choicesContext.prototype.choice_minus = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Choice_minusContext);
    } else {
        return this.getTypedRuleContext(Choice_minusContext,i);
    }
};

Inline_choicesContext.prototype.choice_star = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Choice_starContext);
    } else {
        return this.getTypedRuleContext(Choice_starContext,i);
    }
};

Inline_choicesContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterInline_choices(this);
	}
};

Inline_choicesContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitInline_choices(this);
	}
};

Inline_choicesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitInline_choices(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Inline_choicesContext = Inline_choicesContext;

bitmarkParser.prototype.inline_choices = function() {

    var localctx = new Inline_choicesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, bitmarkParser.RULE_inline_choices);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 954;
        switch(this._input.LA(1)) {
        case bitmarkParser.OPP:
            this.state = 951;
            this.choice_plus();
            break;
        case bitmarkParser.OPM:
            this.state = 952;
            this.choice_minus();
            break;
        case bitmarkParser.OPR:
            this.state = 953;
            this.choice_star();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 961;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 959;
                switch(this._input.LA(1)) {
                case bitmarkParser.OPP:
                    this.state = 956;
                    this.choice_plus();
                    break;
                case bitmarkParser.OPM:
                    this.state = 957;
                    this.choice_minus();
                    break;
                case bitmarkParser.OPR:
                    this.state = 958;
                    this.choice_star();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 963;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cloze_and_multiple_choice_textContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_cloze_and_multiple_choice_text;
    return this;
}

Cloze_and_multiple_choice_textContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cloze_and_multiple_choice_textContext.prototype.constructor = Cloze_and_multiple_choice_textContext;

Cloze_and_multiple_choice_textContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Cloze_and_multiple_choice_textContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Cloze_and_multiple_choice_textContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Cloze_and_multiple_choice_textContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Cloze_and_multiple_choice_textContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Cloze_and_multiple_choice_textContext.prototype.inline_choices = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Inline_choicesContext);
    } else {
        return this.getTypedRuleContext(Inline_choicesContext,i);
    }
};

Cloze_and_multiple_choice_textContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterCloze_and_multiple_choice_text(this);
	}
};

Cloze_and_multiple_choice_textContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitCloze_and_multiple_choice_text(this);
	}
};

Cloze_and_multiple_choice_textContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitCloze_and_multiple_choice_text(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Cloze_and_multiple_choice_textContext = Cloze_and_multiple_choice_textContext;

bitmarkParser.prototype.cloze_and_multiple_choice_text = function() {

    var localctx = new Cloze_and_multiple_choice_textContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, bitmarkParser.RULE_cloze_and_multiple_choice_text);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 964;
        this.opd();
        this.state = 965;
        this.match(bitmarkParser.T__21);
        this.state = 966;
        this.format();
        this.state = 967;
        this.cl();
        this.state = 971;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 968;
            this.nl();
            this.state = 973;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 988; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 988;
        		switch(this._input.LA(1)) {
        		case bitmarkParser.T__4:
        		case bitmarkParser.T__96:
        		case bitmarkParser.OPESC:
        		case bitmarkParser.OPRANGLE:
        		case bitmarkParser.OPU:
        		case bitmarkParser.OPB:
        		case bitmarkParser.OPQ:
        		case bitmarkParser.OPA:
        		case bitmarkParser.OPC:
        		case bitmarkParser.OP:
        		case bitmarkParser.LIST_LINE:
        		case bitmarkParser.EMP1:
        		case bitmarkParser.EMP2:
        		case bitmarkParser.EMP3:
        		case bitmarkParser.NOTE:
        		case bitmarkParser.INS:
        		case bitmarkParser.DEL:
        		case bitmarkParser.REM:
        		case bitmarkParser.HELP:
        		case bitmarkParser.HIGH:
        		case bitmarkParser.ANNO:
        		case bitmarkParser.ANNO_IM:
        		case bitmarkParser.NUMERIC:
        		case bitmarkParser.STRING:
        		case bitmarkParser.SP:
        		case bitmarkParser.SENTENCE:
        		    this.state = 974;
        		    this.bitElem();
        		    this.state = 978;
        		    this._errHandler.sync(this);
        		    var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
        		    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		        if(_alt===1) {
        		            this.state = 975;
        		            this.nl(); 
        		        }
        		        this.state = 980;
        		        this._errHandler.sync(this);
        		        _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
        		    }

        		    break;
        		case bitmarkParser.OPP:
        		case bitmarkParser.OPM:
        		case bitmarkParser.OPR:
        		    this.state = 981;
        		    this.inline_choices();
        		    this.state = 985;
        		    this._errHandler.sync(this);
        		    var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
        		    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		        if(_alt===1) {
        		            this.state = 982;
        		            this.nl(); 
        		        }
        		        this.state = 987;
        		        this._errHandler.sync(this);
        		        _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
        		    }

        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 990; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,95, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EssayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_essay;
    return this;
}

EssayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EssayContext.prototype.constructor = EssayContext;

EssayContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

EssayContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

EssayContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

EssayContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

EssayContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

EssayContext.prototype.ml_example = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ml_exampleContext);
    } else {
        return this.getTypedRuleContext(Ml_exampleContext,i);
    }
};

EssayContext.prototype.article_attachment = function() {
    return this.getTypedRuleContext(Article_attachmentContext,0);
};

EssayContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterEssay(this);
	}
};

EssayContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitEssay(this);
	}
};

EssayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitEssay(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.EssayContext = EssayContext;

bitmarkParser.prototype.essay = function() {

    var localctx = new EssayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, bitmarkParser.RULE_essay);
    var _la = 0; // Token type
    try {
        this.state = 1051;
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 992;
            this.opd();
            this.state = 993;
            this.match(bitmarkParser.T__22);
            this.state = 994;
            this.format();
            this.state = 995;
            this.cl();
            this.state = 996;
            this.nl();
            this.state = 1006;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 997;
                    this.bitElem();
                    this.state = 1001;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 998;
                            this.nl(); 
                        }
                        this.state = 1003;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
                    }
             
                }
                this.state = 1008;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
            }

            this.state = 1021;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1012;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===bitmarkParser.NL) {
                        this.state = 1009;
                        this.nl();
                        this.state = 1014;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1017;
                    var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1015;
                        this.ml_example();
                        break;

                    case 2:
                        this.state = 1016;
                        this.bitElem();
                        break;

                    } 
                }
                this.state = 1023;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
            }

            this.state = 1027;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1024;
                    this.nl(); 
                }
                this.state = 1029;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1030;
            this.opd();
            this.state = 1031;
            this.match(bitmarkParser.T__22);
            this.state = 1032;
            this.match(bitmarkParser.T__23);
            this.state = 1033;
            this.format();
            this.state = 1034;
            this.cl();
            this.state = 1035;
            this.nl();
            this.state = 1045;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1036;
                    this.bitElem();
                    this.state = 1040;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 1037;
                            this.nl(); 
                        }
                        this.state = 1042;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
                    }
             
                }
                this.state = 1047;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
            }

            this.state = 1049;
            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
            if(la_===1) {
                this.state = 1048;
                this.article_attachment();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Article_attachmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_article_attachment;
    return this;
}

Article_attachmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Article_attachmentContext.prototype.constructor = Article_attachmentContext;

Article_attachmentContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Article_attachmentContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Article_attachmentContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Article_attachmentContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Article_attachmentContext.prototype.words = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WordsContext);
    } else {
        return this.getTypedRuleContext(WordsContext,i);
    }
};

Article_attachmentContext.prototype.headed_choices = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Headed_choicesContext);
    } else {
        return this.getTypedRuleContext(Headed_choicesContext,i);
    }
};

Article_attachmentContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Article_attachmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterArticle_attachment(this);
	}
};

Article_attachmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitArticle_attachment(this);
	}
};

Article_attachmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitArticle_attachment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Article_attachmentContext = Article_attachmentContext;

bitmarkParser.prototype.article_attachment = function() {

    var localctx = new Article_attachmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, bitmarkParser.RULE_article_attachment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1053;
        this.opd();
        this.state = 1054;
        this.match(bitmarkParser.T__24);
        this.state = 1055;
        this.format();
        this.state = 1056;
        this.cl();
        this.state = 1057;
        this.nl();
        this.state = 1070;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPP - 97)) | (1 << (bitmarkParser.OPM - 97)) | (1 << (bitmarkParser.OPS - 97)) | (1 << (bitmarkParser.OPR - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1060;
            switch(this._input.LA(1)) {
            case bitmarkParser.T__4:
            case bitmarkParser.T__96:
            case bitmarkParser.OPESC:
            case bitmarkParser.OPRANGLE:
            case bitmarkParser.OPU:
            case bitmarkParser.OPB:
            case bitmarkParser.OPQ:
            case bitmarkParser.OPA:
            case bitmarkParser.OPC:
            case bitmarkParser.OP:
            case bitmarkParser.LIST_LINE:
            case bitmarkParser.EMP1:
            case bitmarkParser.EMP2:
            case bitmarkParser.EMP3:
            case bitmarkParser.NOTE:
            case bitmarkParser.INS:
            case bitmarkParser.DEL:
            case bitmarkParser.REM:
            case bitmarkParser.HELP:
            case bitmarkParser.HIGH:
            case bitmarkParser.ANNO:
            case bitmarkParser.ANNO_IM:
            case bitmarkParser.NUMERIC:
            case bitmarkParser.STRING:
            case bitmarkParser.SP:
            case bitmarkParser.SENTENCE:
                this.state = 1058;
                this.bitElem();
                break;
            case bitmarkParser.OPP:
            case bitmarkParser.OPM:
            case bitmarkParser.OPS:
            case bitmarkParser.OPR:
                this.state = 1059;
                this.headed_choices();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1065;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,107,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1062;
                    this.nl(); 
                }
                this.state = 1067;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,107,this._ctx);
            }

            this.state = 1072;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1074; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1073;
        		this.nl();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1076; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,109, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1082;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,111,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1080;
                switch(this._input.LA(1)) {
                case bitmarkParser.SENTENCE:
                    this.state = 1078;
                    this.words();
                    break;
                case bitmarkParser.OPP:
                case bitmarkParser.OPM:
                case bitmarkParser.OPS:
                case bitmarkParser.OPR:
                    this.state = 1079;
                    this.headed_choices();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 1084;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,111,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ml_exampleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_ml_example;
    return this;
}

Ml_exampleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ml_exampleContext.prototype.constructor = Ml_exampleContext;

Ml_exampleContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

Ml_exampleContext.prototype.lines = function() {
    return this.getTypedRuleContext(LinesContext,0);
};

Ml_exampleContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Ml_exampleContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Ml_exampleContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMl_example(this);
	}
};

Ml_exampleContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMl_example(this);
	}
};

Ml_exampleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMl_example(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Ml_exampleContext = Ml_exampleContext;

bitmarkParser.prototype.ml_example = function() {

    var localctx = new Ml_exampleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, bitmarkParser.RULE_ml_example);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1085;
        this.opa();
        this.state = 1086;
        this.match(bitmarkParser.T__25);
        this.state = 1088;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.NL) {
            this.state = 1087;
            this.nl();
        }

        this.state = 1090;
        this.lines();
        this.state = 1092;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.NL) {
            this.state = 1091;
            this.nl();
        }

        this.state = 1094;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExampleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_example;
    return this;
}

ExampleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExampleContext.prototype.constructor = ExampleContext;

ExampleContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

ExampleContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

ExampleContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ExampleContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterExample(this);
	}
};

ExampleContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitExample(this);
	}
};

ExampleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitExample(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ExampleContext = ExampleContext;

bitmarkParser.prototype.example = function() {

    var localctx = new ExampleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, bitmarkParser.RULE_example);
    try {
        this.state = 1105;
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1096;
            this.opa();
            this.state = 1097;
            this.match(bitmarkParser.T__26);
            this.state = 1098;
            this.cl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1100;
            this.opa();
            this.state = 1101;
            this.match(bitmarkParser.T__25);
            this.state = 1102;
            this.words();
            this.state = 1103;
            this.cl();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterviewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_interview;
    return this;
}

InterviewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterviewContext.prototype.constructor = InterviewContext;

InterviewContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

InterviewContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

InterviewContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

InterviewContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

InterviewContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

InterviewContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

InterviewContext.prototype.interview_answer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interview_answerContext);
    } else {
        return this.getTypedRuleContext(Interview_answerContext,i);
    }
};

InterviewContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterInterview(this);
	}
};

InterviewContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitInterview(this);
	}
};

InterviewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitInterview(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.InterviewContext = InterviewContext;

bitmarkParser.prototype.interview = function() {

    var localctx = new InterviewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, bitmarkParser.RULE_interview);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1107;
        this.opd();
        this.state = 1108;
        this.match(bitmarkParser.T__27);
        this.state = 1109;
        this.format();
        this.state = 1110;
        this.cl();
        this.state = 1114;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1111;
            this.nl();
            this.state = 1116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1126;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1117;
            this.bitElem();
            this.state = 1121;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.NL) {
                this.state = 1118;
                this.nl();
                this.state = 1123;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1128;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1150;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1129;
                this.hspl();
                this.state = 1145;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.NL - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
                    this.state = 1133;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===bitmarkParser.NL) {
                        this.state = 1130;
                        this.nl();
                        this.state = 1135;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1136;
                    this.interview_answer();
                    this.state = 1140;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 1137;
                            this.nl(); 
                        }
                        this.state = 1142;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
                    }

                    this.state = 1147;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } 
            }
            this.state = 1152;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
        }

        this.state = 1153;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interview_answerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_interview_answer;
    return this;
}

Interview_answerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interview_answerContext.prototype.constructor = Interview_answerContext;

Interview_answerContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Interview_answerContext.prototype.ml_example = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ml_exampleContext);
    } else {
        return this.getTypedRuleContext(Ml_exampleContext,i);
    }
};

Interview_answerContext.prototype.shortans = function() {
    return this.getTypedRuleContext(ShortansContext,0);
};

Interview_answerContext.prototype.longans = function() {
    return this.getTypedRuleContext(LongansContext,0);
};

Interview_answerContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterInterview_answer(this);
	}
};

Interview_answerContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitInterview_answer(this);
	}
};

Interview_answerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitInterview_answer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Interview_answerContext = Interview_answerContext;

bitmarkParser.prototype.interview_answer = function() {

    var localctx = new Interview_answerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, bitmarkParser.RULE_interview_answer);
    try {
        this.state = 1167;
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1157; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1157;
            		var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
            		switch(la_) {
            		case 1:
            		    this.state = 1155;
            		    this.bitElem();
            		    break;

            		case 2:
            		    this.state = 1156;
            		    this.ml_example();
            		    break;

            		}
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1159; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,123, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 1163;
            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
            if(la_===1) {
                this.state = 1161;
                this.shortans();

            } else if(la_===2) {
                this.state = 1162;
                this.longans();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1165;
            this.shortans();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1166;
            this.longans();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LongansContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_longans;
    return this;
}

LongansContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LongansContext.prototype.constructor = LongansContext;

LongansContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

LongansContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

LongansContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterLongans(this);
	}
};

LongansContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitLongans(this);
	}
};

LongansContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitLongans(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.LongansContext = LongansContext;

bitmarkParser.prototype.longans = function() {

    var localctx = new LongansContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, bitmarkParser.RULE_longans);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1169;
        this.opa();
        this.state = 1170;
        this.match(bitmarkParser.T__28);
        this.state = 1171;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShortansContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_shortans;
    return this;
}

ShortansContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortansContext.prototype.constructor = ShortansContext;

ShortansContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

ShortansContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

ShortansContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterShortans(this);
	}
};

ShortansContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitShortans(this);
	}
};

ShortansContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitShortans(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ShortansContext = ShortansContext;

bitmarkParser.prototype.shortans = function() {

    var localctx = new ShortansContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, bitmarkParser.RULE_shortans);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1173;
        this.opa();
        this.state = 1174;
        this.match(bitmarkParser.T__29);
        this.state = 1175;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interview_instruction_groupedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_interview_instruction_grouped;
    return this;
}

Interview_instruction_groupedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interview_instruction_groupedContext.prototype.constructor = Interview_instruction_groupedContext;

Interview_instruction_groupedContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Interview_instruction_groupedContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Interview_instruction_groupedContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Interview_instruction_groupedContext.prototype.instruction = function() {
    return this.getTypedRuleContext(InstructionContext,0);
};

Interview_instruction_groupedContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Interview_instruction_groupedContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Interview_instruction_groupedContext.prototype.interview_answer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interview_answerContext);
    } else {
        return this.getTypedRuleContext(Interview_answerContext,i);
    }
};

Interview_instruction_groupedContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterInterview_instruction_grouped(this);
	}
};

Interview_instruction_groupedContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitInterview_instruction_grouped(this);
	}
};

Interview_instruction_groupedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitInterview_instruction_grouped(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Interview_instruction_groupedContext = Interview_instruction_groupedContext;

bitmarkParser.prototype.interview_instruction_grouped = function() {

    var localctx = new Interview_instruction_groupedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, bitmarkParser.RULE_interview_instruction_grouped);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1177;
        this.opd();
        this.state = 1178;
        this.match(bitmarkParser.T__30);
        this.state = 1179;
        this.format();
        this.state = 1180;
        this.cl();
        this.state = 1182; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1181;
            this.nl();
            this.state = 1184; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.NL);
        this.state = 1186;
        this.instruction();
        this.state = 1190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1187;
            this.nl();
            this.state = 1192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1196; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1193;
        		this.hspl();
        		this.state = 1194;
        		this.interview_answer();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1198; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,128, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1200;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

QueryContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

QueryContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

QueryContext.prototype.listline_ = function() {
    return this.getTypedRuleContext(Listline_Context,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitQuery(this);
	}
};

QueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.QueryContext = QueryContext;

bitmarkParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, bitmarkParser.RULE_query);
    var _la = 0; // Token type
    try {
        this.state = 1214;
        switch(this._input.LA(1)) {
        case bitmarkParser.T__4:
        case bitmarkParser.T__96:
        case bitmarkParser.OPESC:
        case bitmarkParser.NUMERIC:
        case bitmarkParser.STRING:
        case bitmarkParser.SENTENCE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1203; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1202;
                this.s_and_w();
                this.state = 1205; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
            this.state = 1211;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.OPA) {
                this.state = 1207;
                this.opa();
                this.state = 1208;
                this.match(bitmarkParser.T__26);
                this.state = 1209;
                this.cl();
            }

            break;
        case bitmarkParser.LIST_LINE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1213;
            this.listline_();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnswerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_answer;
    return this;
}

AnswerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnswerContext.prototype.constructor = AnswerContext;

AnswerContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

AnswerContext.prototype.or = function() {
    return this.getTypedRuleContext(OrContext,0);
};

AnswerContext.prototype.example = function() {
    return this.getTypedRuleContext(ExampleContext,0);
};

AnswerContext.prototype.sp = function() {
    return this.getTypedRuleContext(SpContext,0);
};

AnswerContext.prototype.listline_ = function() {
    return this.getTypedRuleContext(Listline_Context,0);
};

AnswerContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAnswer(this);
	}
};

AnswerContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAnswer(this);
	}
};

AnswerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAnswer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.AnswerContext = AnswerContext;

bitmarkParser.prototype.answer = function() {

    var localctx = new AnswerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, bitmarkParser.RULE_answer);
    var _la = 0; // Token type
    try {
        this.state = 1236;
        switch(this._input.LA(1)) {
        case bitmarkParser.T__4:
        case bitmarkParser.T__96:
        case bitmarkParser.OPESC:
        case bitmarkParser.NUMERIC:
        case bitmarkParser.STRING:
        case bitmarkParser.SENTENCE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1217; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1216;
                this.s_and_w();
                this.state = 1219; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
            this.state = 1227;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.OR) {
                this.state = 1221;
                this.or();
                this.state = 1223; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 1222;
                    this.s_and_w();
                    this.state = 1225; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
            }

            this.state = 1233;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.OPA || _la===bitmarkParser.SP) {
                this.state = 1230;
                _la = this._input.LA(1);
                if(_la===bitmarkParser.SP) {
                    this.state = 1229;
                    this.sp();
                }

                this.state = 1232;
                this.example();
            }

            break;
        case bitmarkParser.LIST_LINE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1235;
            this.listline_();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HeadingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_heading;
    return this;
}

HeadingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HeadingContext.prototype.constructor = HeadingContext;

HeadingContext.prototype.key_title = function() {
    return this.getTypedRuleContext(Key_titleContext,0);
};

HeadingContext.prototype.eq = function() {
    return this.getTypedRuleContext(EqContext,0);
};

HeadingContext.prototype.value_title = function() {
    return this.getTypedRuleContext(Value_titleContext,0);
};

HeadingContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterHeading(this);
	}
};

HeadingContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitHeading(this);
	}
};

HeadingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitHeading(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.HeadingContext = HeadingContext;

bitmarkParser.prototype.heading = function() {

    var localctx = new HeadingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, bitmarkParser.RULE_heading);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1238;
        this.key_title();
        this.state = 1239;
        this.eq();
        this.state = 1240;
        this.value_title();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Key_titleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_key_title;
    return this;
}

Key_titleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_titleContext.prototype.constructor = Key_titleContext;

Key_titleContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Key_titleContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Key_titleContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterKey_title(this);
	}
};

Key_titleContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitKey_title(this);
	}
};

Key_titleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitKey_title(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Key_titleContext = Key_titleContext;

bitmarkParser.prototype.key_title = function() {

    var localctx = new Key_titleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, bitmarkParser.RULE_key_title);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1242;
        this.match(bitmarkParser.T__5);
        this.state = 1244; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1243;
            this.s_and_w();
            this.state = 1246; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
        this.state = 1248;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_titleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_value_title;
    return this;
}

Value_titleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_titleContext.prototype.constructor = Value_titleContext;

Value_titleContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Value_titleContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Value_titleContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterValue_title(this);
	}
};

Value_titleContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitValue_title(this);
	}
};

Value_titleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitValue_title(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Value_titleContext = Value_titleContext;

bitmarkParser.prototype.value_title = function() {

    var localctx = new Value_titleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, bitmarkParser.RULE_value_title);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1250;
        this.match(bitmarkParser.T__5);
        this.state = 1252; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1251;
            this.s_and_w();
            this.state = 1254; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
        this.state = 1256;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_pair;
    return this;
}

PairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PairContext.prototype.constructor = PairContext;

PairContext.prototype.hspl = function() {
    return this.getTypedRuleContext(HsplContext,0);
};

PairContext.prototype.pquery = function() {
    return this.getTypedRuleContext(PqueryContext,0);
};

PairContext.prototype.eq = function() {
    return this.getTypedRuleContext(EqContext,0);
};

PairContext.prototype.panswer = function() {
    return this.getTypedRuleContext(PanswerContext,0);
};

PairContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPair(this);
	}
};

PairContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPair(this);
	}
};

PairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.PairContext = PairContext;

bitmarkParser.prototype.pair = function() {

    var localctx = new PairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, bitmarkParser.RULE_pair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1258;
        this.hspl();
        this.state = 1259;
        this.pquery();
        this.state = 1260;
        this.eq();
        this.state = 1261;
        this.panswer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PairsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_pairs;
    return this;
}

PairsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PairsContext.prototype.constructor = PairsContext;

PairsContext.prototype.pair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PairContext);
    } else {
        return this.getTypedRuleContext(PairContext,i);
    }
};

PairsContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPairs(this);
	}
};

PairsContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPairs(this);
	}
};

PairsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPairs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.PairsContext = PairsContext;

bitmarkParser.prototype.pairs = function() {

    var localctx = new PairsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, bitmarkParser.RULE_pairs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1264; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1263;
        		this.pair();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1266; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,140, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pair_imageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_pair_image;
    return this;
}

Pair_imageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pair_imageContext.prototype.constructor = Pair_imageContext;

Pair_imageContext.prototype.hspl = function() {
    return this.getTypedRuleContext(HsplContext,0);
};

Pair_imageContext.prototype.pimagebit = function() {
    return this.getTypedRuleContext(PimagebitContext,0);
};

Pair_imageContext.prototype.eq = function() {
    return this.getTypedRuleContext(EqContext,0);
};

Pair_imageContext.prototype.panswer = function() {
    return this.getTypedRuleContext(PanswerContext,0);
};

Pair_imageContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPair_image(this);
	}
};

Pair_imageContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPair_image(this);
	}
};

Pair_imageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPair_image(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Pair_imageContext = Pair_imageContext;

bitmarkParser.prototype.pair_image = function() {

    var localctx = new Pair_imageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, bitmarkParser.RULE_pair_image);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1268;
        this.hspl();
        this.state = 1269;
        this.pimagebit();
        this.state = 1270;
        this.eq();
        this.state = 1271;
        this.panswer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pair_imagesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_pair_images;
    return this;
}

Pair_imagesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pair_imagesContext.prototype.constructor = Pair_imagesContext;

Pair_imagesContext.prototype.pair_image = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pair_imageContext);
    } else {
        return this.getTypedRuleContext(Pair_imageContext,i);
    }
};

Pair_imagesContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPair_images(this);
	}
};

Pair_imagesContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPair_images(this);
	}
};

Pair_imagesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPair_images(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Pair_imagesContext = Pair_imagesContext;

bitmarkParser.prototype.pair_images = function() {

    var localctx = new Pair_imagesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, bitmarkParser.RULE_pair_images);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1274; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1273;
        		this.pair_image();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1276; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,141, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pair_audioContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_pair_audio;
    return this;
}

Pair_audioContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pair_audioContext.prototype.constructor = Pair_audioContext;

Pair_audioContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Pair_audioContext.prototype.paudiobit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PaudiobitContext);
    } else {
        return this.getTypedRuleContext(PaudiobitContext,i);
    }
};

Pair_audioContext.prototype.eq = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EqContext);
    } else {
        return this.getTypedRuleContext(EqContext,i);
    }
};

Pair_audioContext.prototype.panswer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PanswerContext);
    } else {
        return this.getTypedRuleContext(PanswerContext,i);
    }
};

Pair_audioContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPair_audio(this);
	}
};

Pair_audioContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPair_audio(this);
	}
};

Pair_audioContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPair_audio(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Pair_audioContext = Pair_audioContext;

bitmarkParser.prototype.pair_audio = function() {

    var localctx = new Pair_audioContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, bitmarkParser.RULE_pair_audio);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1283; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1278;
        		this.hspl();
        		this.state = 1279;
        		this.paudiobit();
        		this.state = 1280;
        		this.eq();
        		this.state = 1281;
        		this.panswer();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1285; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,142, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pair_audiosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_pair_audios;
    return this;
}

Pair_audiosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pair_audiosContext.prototype.constructor = Pair_audiosContext;

Pair_audiosContext.prototype.pair_audio = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pair_audioContext);
    } else {
        return this.getTypedRuleContext(Pair_audioContext,i);
    }
};

Pair_audiosContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPair_audios(this);
	}
};

Pair_audiosContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPair_audios(this);
	}
};

Pair_audiosContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPair_audios(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Pair_audiosContext = Pair_audiosContext;

bitmarkParser.prototype.pair_audios = function() {

    var localctx = new Pair_audiosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, bitmarkParser.RULE_pair_audios);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1288; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1287;
            this.pair_audio();
            this.state = 1290; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.HSPL || _la===bitmarkParser.HSPL2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_pquery;
    return this;
}

PqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PqueryContext.prototype.constructor = PqueryContext;

PqueryContext.prototype.item = function() {
    return this.getTypedRuleContext(ItemContext,0);
};

PqueryContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

PqueryContext.prototype.example = function() {
    return this.getTypedRuleContext(ExampleContext,0);
};

PqueryContext.prototype.listline_ = function() {
    return this.getTypedRuleContext(Listline_Context,0);
};

PqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPquery(this);
	}
};

PqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPquery(this);
	}
};

PqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.PqueryContext = PqueryContext;

bitmarkParser.prototype.pquery = function() {

    var localctx = new PqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, bitmarkParser.RULE_pquery);
    var _la = 0; // Token type
    try {
        this.state = 1304;
        switch(this._input.LA(1)) {
        case bitmarkParser.T__4:
        case bitmarkParser.T__96:
        case bitmarkParser.OPESC:
        case bitmarkParser.OPC:
        case bitmarkParser.NUMERIC:
        case bitmarkParser.STRING:
        case bitmarkParser.SENTENCE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1293;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.OPC) {
                this.state = 1292;
                this.item();
            }

            this.state = 1296; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1295;
                this.s_and_w();
                this.state = 1298; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
            this.state = 1301;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.OPA) {
                this.state = 1300;
                this.example();
            }

            break;
        case bitmarkParser.LIST_LINE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1303;
            this.listline_();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PanswerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_panswer;
    return this;
}

PanswerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PanswerContext.prototype.constructor = PanswerContext;

PanswerContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

PanswerContext.prototype.or = function() {
    return this.getTypedRuleContext(OrContext,0);
};

PanswerContext.prototype.example = function() {
    return this.getTypedRuleContext(ExampleContext,0);
};

PanswerContext.prototype.sp = function() {
    return this.getTypedRuleContext(SpContext,0);
};

PanswerContext.prototype.listline_ = function() {
    return this.getTypedRuleContext(Listline_Context,0);
};

PanswerContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPanswer(this);
	}
};

PanswerContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPanswer(this);
	}
};

PanswerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPanswer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.PanswerContext = PanswerContext;

bitmarkParser.prototype.panswer = function() {

    var localctx = new PanswerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, bitmarkParser.RULE_panswer);
    var _la = 0; // Token type
    try {
        this.state = 1326;
        switch(this._input.LA(1)) {
        case bitmarkParser.T__4:
        case bitmarkParser.T__96:
        case bitmarkParser.OPESC:
        case bitmarkParser.NUMERIC:
        case bitmarkParser.STRING:
        case bitmarkParser.SENTENCE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1307; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1306;
                this.s_and_w();
                this.state = 1309; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
            this.state = 1317;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.OR) {
                this.state = 1311;
                this.or();
                this.state = 1313; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 1312;
                    this.s_and_w();
                    this.state = 1315; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0));
            }

            this.state = 1323;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.OPA || _la===bitmarkParser.SP) {
                this.state = 1320;
                _la = this._input.LA(1);
                if(_la===bitmarkParser.SP) {
                    this.state = 1319;
                    this.sp();
                }

                this.state = 1322;
                this.example();
            }

            break;
        case bitmarkParser.LIST_LINE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1325;
            this.listline_();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PimagebitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_pimagebit;
    return this;
}

PimagebitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PimagebitContext.prototype.constructor = PimagebitContext;

PimagebitContext.prototype.op = function() {
    return this.getTypedRuleContext(OpContext,0);
};

PimagebitContext.prototype.image_format = function() {
    return this.getTypedRuleContext(Image_formatContext,0);
};

PimagebitContext.prototype.url = function() {
    return this.getTypedRuleContext(UrlContext,0);
};

PimagebitContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

PimagebitContext.prototype.resolution = function() {
    return this.getTypedRuleContext(ResolutionContext,0);
};

PimagebitContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPimagebit(this);
	}
};

PimagebitContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPimagebit(this);
	}
};

PimagebitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPimagebit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.PimagebitContext = PimagebitContext;

bitmarkParser.prototype.pimagebit = function() {

    var localctx = new PimagebitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, bitmarkParser.RULE_pimagebit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1328;
        this.op();
        this.state = 1329;
        this.image_format();
        this.state = 1331;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.T__93) {
            this.state = 1330;
            this.resolution();
        }

        this.state = 1333;
        this.match(bitmarkParser.T__31);
        this.state = 1334;
        this.url();
        this.state = 1335;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PaudiobitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_paudiobit;
    return this;
}

PaudiobitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PaudiobitContext.prototype.constructor = PaudiobitContext;

PaudiobitContext.prototype.op = function() {
    return this.getTypedRuleContext(OpContext,0);
};

PaudiobitContext.prototype.audio_format = function() {
    return this.getTypedRuleContext(Audio_formatContext,0);
};

PaudiobitContext.prototype.url = function() {
    return this.getTypedRuleContext(UrlContext,0);
};

PaudiobitContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

PaudiobitContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPaudiobit(this);
	}
};

PaudiobitContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPaudiobit(this);
	}
};

PaudiobitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPaudiobit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.PaudiobitContext = PaudiobitContext;

bitmarkParser.prototype.paudiobit = function() {

    var localctx = new PaudiobitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, bitmarkParser.RULE_paudiobit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1337;
        this.op();
        this.state = 1338;
        this.audio_format();
        this.state = 1339;
        this.match(bitmarkParser.T__31);
        this.state = 1340;
        this.url();
        this.state = 1341;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Match_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_match_;
    return this;
}

Match_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Match_Context.prototype.constructor = Match_Context;

Match_Context.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Match_Context.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Match_Context.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Match_Context.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Match_Context.prototype.pairs = function() {
    return this.getTypedRuleContext(PairsContext,0);
};

Match_Context.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Match_Context.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Match_Context.prototype.heading = function() {
    return this.getTypedRuleContext(HeadingContext,0);
};

Match_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMatch_(this);
	}
};

Match_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMatch_(this);
	}
};

Match_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMatch_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Match_Context = Match_Context;

bitmarkParser.prototype.match_ = function() {

    var localctx = new Match_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 122, bitmarkParser.RULE_match_);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1343;
        this.opd();
        this.state = 1344;
        this.match(bitmarkParser.T__32);
        this.state = 1345;
        this.format();
        this.state = 1346;
        this.cl();
        this.state = 1347;
        this.nl();
        this.state = 1354;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1348;
            this.bitElem();
            this.state = 1350;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.NL) {
                this.state = 1349;
                this.nl();
            }

            this.state = 1356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1360;
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        if(la_===1) {
            this.state = 1357;
            this.hspl();
            this.state = 1358;
            this.heading();

        }
        this.state = 1362;
        this.pairs();
        this.state = 1363;
        this.hspl();
        this.state = 1367;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1364;
            this.nl();
            this.state = 1369;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1371; 
        this._errHandler.sync(this);
        var _alt = 1+1;
        do {
        	switch (_alt) {
        	case 1+1:
        		this.state = 1370;
        		this.bitElem();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1373; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,159, this._ctx);
        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Match_reverseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_match_reverse;
    return this;
}

Match_reverseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Match_reverseContext.prototype.constructor = Match_reverseContext;

Match_reverseContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Match_reverseContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Match_reverseContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Match_reverseContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Match_reverseContext.prototype.pairs = function() {
    return this.getTypedRuleContext(PairsContext,0);
};

Match_reverseContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Match_reverseContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Match_reverseContext.prototype.heading = function() {
    return this.getTypedRuleContext(HeadingContext,0);
};

Match_reverseContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMatch_reverse(this);
	}
};

Match_reverseContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMatch_reverse(this);
	}
};

Match_reverseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMatch_reverse(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Match_reverseContext = Match_reverseContext;

bitmarkParser.prototype.match_reverse = function() {

    var localctx = new Match_reverseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, bitmarkParser.RULE_match_reverse);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1375;
        this.opd();
        this.state = 1376;
        this.match(bitmarkParser.T__33);
        this.state = 1377;
        this.format();
        this.state = 1378;
        this.cl();
        this.state = 1379;
        this.nl();
        this.state = 1386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1380;
            this.bitElem();
            this.state = 1382;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.NL) {
                this.state = 1381;
                this.nl();
            }

            this.state = 1388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1392;
        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
        if(la_===1) {
            this.state = 1389;
            this.hspl();
            this.state = 1390;
            this.heading();

        }
        this.state = 1394;
        this.pairs();
        this.state = 1395;
        this.hspl();
        this.state = 1399;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1396;
            this.nl();
            this.state = 1401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1403; 
        this._errHandler.sync(this);
        var _alt = 1+1;
        do {
        	switch (_alt) {
        	case 1+1:
        		this.state = 1402;
        		this.bitElem();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1405; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,164, this._ctx);
        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Match_pictureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_match_picture;
    return this;
}

Match_pictureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Match_pictureContext.prototype.constructor = Match_pictureContext;

Match_pictureContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Match_pictureContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Match_pictureContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Match_pictureContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Match_pictureContext.prototype.pair_images = function() {
    return this.getTypedRuleContext(Pair_imagesContext,0);
};

Match_pictureContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Match_pictureContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Match_pictureContext.prototype.heading = function() {
    return this.getTypedRuleContext(HeadingContext,0);
};

Match_pictureContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMatch_picture(this);
	}
};

Match_pictureContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMatch_picture(this);
	}
};

Match_pictureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMatch_picture(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Match_pictureContext = Match_pictureContext;

bitmarkParser.prototype.match_picture = function() {

    var localctx = new Match_pictureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, bitmarkParser.RULE_match_picture);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1407;
        this.opd();
        this.state = 1408;
        this.match(bitmarkParser.T__34);
        this.state = 1409;
        this.format();
        this.state = 1410;
        this.cl();
        this.state = 1411;
        this.nl();
        this.state = 1418;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1412;
            this.bitElem();
            this.state = 1414;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.NL) {
                this.state = 1413;
                this.nl();
            }

            this.state = 1420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1424;
        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
        if(la_===1) {
            this.state = 1421;
            this.hspl();
            this.state = 1422;
            this.heading();

        }
        this.state = 1426;
        this.pair_images();
        this.state = 1427;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Match_audioContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_match_audio;
    return this;
}

Match_audioContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Match_audioContext.prototype.constructor = Match_audioContext;

Match_audioContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Match_audioContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Match_audioContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Match_audioContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Match_audioContext.prototype.pair_audio = function() {
    return this.getTypedRuleContext(Pair_audioContext,0);
};

Match_audioContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Match_audioContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Match_audioContext.prototype.heading = function() {
    return this.getTypedRuleContext(HeadingContext,0);
};

Match_audioContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMatch_audio(this);
	}
};

Match_audioContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMatch_audio(this);
	}
};

Match_audioContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMatch_audio(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Match_audioContext = Match_audioContext;

bitmarkParser.prototype.match_audio = function() {

    var localctx = new Match_audioContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, bitmarkParser.RULE_match_audio);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1429;
        this.opd();
        this.state = 1430;
        this.match(bitmarkParser.T__35);
        this.state = 1431;
        this.format();
        this.state = 1432;
        this.cl();
        this.state = 1433;
        this.nl();
        this.state = 1440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1434;
            this.bitElem();
            this.state = 1436;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.NL) {
                this.state = 1435;
                this.nl();
            }

            this.state = 1442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1446;
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        if(la_===1) {
            this.state = 1443;
            this.hspl();
            this.state = 1444;
            this.heading();

        }
        this.state = 1448;
        this.pair_audio();
        this.state = 1449;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Match_solution_groupedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_match_solution_grouped;
    return this;
}

Match_solution_groupedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Match_solution_groupedContext.prototype.constructor = Match_solution_groupedContext;

Match_solution_groupedContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Match_solution_groupedContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Match_solution_groupedContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Match_solution_groupedContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Match_solution_groupedContext.prototype.pairs = function() {
    return this.getTypedRuleContext(PairsContext,0);
};

Match_solution_groupedContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Match_solution_groupedContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Match_solution_groupedContext.prototype.heading = function() {
    return this.getTypedRuleContext(HeadingContext,0);
};

Match_solution_groupedContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMatch_solution_grouped(this);
	}
};

Match_solution_groupedContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMatch_solution_grouped(this);
	}
};

Match_solution_groupedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMatch_solution_grouped(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Match_solution_groupedContext = Match_solution_groupedContext;

bitmarkParser.prototype.match_solution_grouped = function() {

    var localctx = new Match_solution_groupedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, bitmarkParser.RULE_match_solution_grouped);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1451;
        this.opd();
        this.state = 1452;
        this.match(bitmarkParser.T__36);
        this.state = 1453;
        this.format();
        this.state = 1454;
        this.cl();
        this.state = 1455;
        this.nl();
        this.state = 1462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1456;
            this.bitElem();
            this.state = 1458;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.NL) {
                this.state = 1457;
                this.nl();
            }

            this.state = 1464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1468;
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        if(la_===1) {
            this.state = 1465;
            this.hspl();
            this.state = 1466;
            this.heading();

        }
        this.state = 1470;
        this.pairs();
        this.state = 1471;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function True_false_1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_true_false_1;
    return this;
}

True_false_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
True_false_1Context.prototype.constructor = True_false_1Context;

True_false_1Context.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

True_false_1Context.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

True_false_1Context.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

True_false_1Context.prototype.choices = function() {
    return this.getTypedRuleContext(ChoicesContext,0);
};

True_false_1Context.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

True_false_1Context.prototype.bool_label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bool_labelContext);
    } else {
        return this.getTypedRuleContext(Bool_labelContext,i);
    }
};

True_false_1Context.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

True_false_1Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterTrue_false_1(this);
	}
};

True_false_1Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitTrue_false_1(this);
	}
};

True_false_1Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitTrue_false_1(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.True_false_1Context = True_false_1Context;

bitmarkParser.prototype.true_false_1 = function() {

    var localctx = new True_false_1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 132, bitmarkParser.RULE_true_false_1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1473;
        this.opd();
        this.state = 1474;
        this.match(bitmarkParser.T__37);
        this.state = 1475;
        this.format();
        this.state = 1476;
        this.cl();
        this.state = 1478; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1477;
            this.nl();
            this.state = 1480; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.NL);
        this.state = 1489;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1487;
            var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1482;
                this.bool_label();
                break;

            case 2:
                this.state = 1483;
                this.bitElem();
                this.state = 1485;
                _la = this._input.LA(1);
                if(_la===bitmarkParser.NL) {
                    this.state = 1484;
                    this.nl();
                }

                break;

            }
            this.state = 1491;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1492;
        this.choices();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function True_falseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_true_false;
    return this;
}

True_falseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
True_falseContext.prototype.constructor = True_falseContext;

True_falseContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

True_falseContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

True_falseContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

True_falseContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

True_falseContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

True_falseContext.prototype.bool_label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bool_labelContext);
    } else {
        return this.getTypedRuleContext(Bool_labelContext,i);
    }
};

True_falseContext.prototype.choices = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChoicesContext);
    } else {
        return this.getTypedRuleContext(ChoicesContext,i);
    }
};

True_falseContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

True_falseContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterTrue_false(this);
	}
};

True_falseContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitTrue_false(this);
	}
};

True_falseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitTrue_false(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.True_falseContext = True_falseContext;

bitmarkParser.prototype.true_false = function() {

    var localctx = new True_falseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, bitmarkParser.RULE_true_false);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1494;
        this.opd();
        this.state = 1495;
        this.match(bitmarkParser.T__38);
        this.state = 1496;
        this.format();
        this.state = 1497;
        this.cl();
        this.state = 1501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1498;
            this.nl();
            this.state = 1503;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1505;
        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
        if(la_===1) {
            this.state = 1504;
            this.hspl();

        }
        this.state = 1517;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1515;
            var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1507;
                this.bool_label();
                break;

            case 2:
                this.state = 1508;
                this.bitElem();
                this.state = 1512;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===bitmarkParser.NL) {
                    this.state = 1509;
                    this.nl();
                    this.state = 1514;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            }
            this.state = 1519;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1524; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1521;
        		_la = this._input.LA(1);
        		if(_la===bitmarkParser.HSPL || _la===bitmarkParser.HSPL2) {
        		    this.state = 1520;
        		    this.hspl();
        		}

        		this.state = 1523;
        		this.choices();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1526; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,184, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1529;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.HSPL || _la===bitmarkParser.HSPL2) {
            this.state = 1528;
            this.hspl();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bool_labelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_bool_label;
    return this;
}

Bool_labelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bool_labelContext.prototype.constructor = Bool_labelContext;

Bool_labelContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

Bool_labelContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

Bool_labelContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Bool_labelContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBool_label(this);
	}
};

Bool_labelContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBool_label(this);
	}
};

Bool_labelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBool_label(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Bool_labelContext = Bool_labelContext;

bitmarkParser.prototype.bool_label = function() {

    var localctx = new Bool_labelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, bitmarkParser.RULE_bool_label);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1531;
        this.opa();
        this.state = 1532;
        _la = this._input.LA(1);
        if(!(_la===bitmarkParser.T__39 || _la===bitmarkParser.T__40)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1533;
        this.words();
        this.state = 1534;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_sequence;
    return this;
}

SequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SequenceContext.prototype.constructor = SequenceContext;

SequenceContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

SequenceContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

SequenceContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

SequenceContext.prototype.sspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SsplContext);
    } else {
        return this.getTypedRuleContext(SsplContext,i);
    }
};

SequenceContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

SequenceContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

SequenceContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

SequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSequence(this);
	}
};

SequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSequence(this);
	}
};

SequenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSequence(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.SequenceContext = SequenceContext;

bitmarkParser.prototype.sequence = function() {

    var localctx = new SequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, bitmarkParser.RULE_sequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1536;
        this.opd();
        this.state = 1537;
        this.match(bitmarkParser.T__41);
        this.state = 1538;
        this.format();
        this.state = 1539;
        this.cl();
        this.state = 1543;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1540;
            this.nl();
            this.state = 1545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1555;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1546;
            this.bitElem();
            this.state = 1550;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.NL) {
                this.state = 1547;
                this.nl();
                this.state = 1552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1557;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1574; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1558;
        		this.sspl();
        		this.state = 1571;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.NL - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
        		    this.state = 1562;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    while(_la===bitmarkParser.NL) {
        		        this.state = 1559;
        		        this.nl();
        		        this.state = 1564;
        		        this._errHandler.sync(this);
        		        _la = this._input.LA(1);
        		    }
        		    this.state = 1567;
        		    var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
        		    switch(la_) {
        		    case 1:
        		        this.state = 1565;
        		        this.s_and_w();
        		        break;

        		    case 2:
        		        this.state = 1566;
        		        this.bitElem();
        		        break;

        		    }
        		    this.state = 1573;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1576; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,192, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1578;
        this.sspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CorrectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_correction;
    return this;
}

CorrectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CorrectionContext.prototype.constructor = CorrectionContext;

CorrectionContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

CorrectionContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

CorrectionContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

CorrectionContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

CorrectionContext.prototype.instruction = function() {
    return this.getTypedRuleContext(InstructionContext,0);
};

CorrectionContext.prototype.choices = function() {
    return this.getTypedRuleContext(ChoicesContext,0);
};

CorrectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterCorrection(this);
	}
};

CorrectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitCorrection(this);
	}
};

CorrectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitCorrection(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.CorrectionContext = CorrectionContext;

bitmarkParser.prototype.correction = function() {

    var localctx = new CorrectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, bitmarkParser.RULE_correction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1580;
        this.opd();
        this.state = 1581;
        this.match(bitmarkParser.T__42);
        this.state = 1582;
        this.format();
        this.state = 1583;
        this.cl();
        this.state = 1584;
        this.nl();
        this.state = 1585;
        this.instruction();
        this.state = 1589;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1586;
            this.nl();
            this.state = 1591;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1592;
        this.choices();
        this.state = 1594; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1593;
        		this.nl();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1596; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,194, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mark_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_mark_;
    return this;
}

Mark_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mark_Context.prototype.constructor = Mark_Context;

Mark_Context.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Mark_Context.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Mark_Context.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Mark_Context.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Mark_Context.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Mark_Context.prototype.mark_text = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Mark_textContext);
    } else {
        return this.getTypedRuleContext(Mark_textContext,i);
    }
};

Mark_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMark_(this);
	}
};

Mark_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMark_(this);
	}
};

Mark_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMark_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Mark_Context = Mark_Context;

bitmarkParser.prototype.mark_ = function() {

    var localctx = new Mark_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 142, bitmarkParser.RULE_mark_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1598;
        this.opd();
        this.state = 1599;
        this.match(bitmarkParser.T__43);
        this.state = 1600;
        this.format();
        this.state = 1601;
        this.cl();
        this.state = 1602;
        this.nl();
        this.state = 1615;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,197,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1605;
                switch(this._input.LA(1)) {
                case bitmarkParser.T__4:
                case bitmarkParser.T__96:
                case bitmarkParser.OPESC:
                case bitmarkParser.OPRANGLE:
                case bitmarkParser.OPU:
                case bitmarkParser.OPB:
                case bitmarkParser.OPQ:
                case bitmarkParser.OPA:
                case bitmarkParser.OPC:
                case bitmarkParser.OP:
                case bitmarkParser.LIST_LINE:
                case bitmarkParser.EMP1:
                case bitmarkParser.EMP2:
                case bitmarkParser.EMP3:
                case bitmarkParser.NOTE:
                case bitmarkParser.INS:
                case bitmarkParser.DEL:
                case bitmarkParser.REM:
                case bitmarkParser.HELP:
                case bitmarkParser.HIGH:
                case bitmarkParser.ANNO:
                case bitmarkParser.ANNO_IM:
                case bitmarkParser.NUMERIC:
                case bitmarkParser.STRING:
                case bitmarkParser.SP:
                case bitmarkParser.SENTENCE:
                    this.state = 1603;
                    this.bitElem();
                    break;
                case bitmarkParser.OPS:
                    this.state = 1604;
                    this.mark_text();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1610;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,196,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1607;
                        this.nl(); 
                    }
                    this.state = 1612;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,196,this._ctx);
                }
         
            }
            this.state = 1617;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,197,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mark_textContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_mark_text;
    return this;
}

Mark_textContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mark_textContext.prototype.constructor = Mark_textContext;

Mark_textContext.prototype.ops = function() {
    return this.getTypedRuleContext(OpsContext,0);
};

Mark_textContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

Mark_textContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Mark_textContext.prototype.mark_color = function() {
    return this.getTypedRuleContext(Mark_colorContext,0);
};

Mark_textContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMark_text(this);
	}
};

Mark_textContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMark_text(this);
	}
};

Mark_textContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMark_text(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Mark_textContext = Mark_textContext;

bitmarkParser.prototype.mark_text = function() {

    var localctx = new Mark_textContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, bitmarkParser.RULE_mark_text);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1618;
        this.ops();
        this.state = 1619;
        this.s_and_w();
        this.state = 1620;
        this.cl();
        this.state = 1622;
        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
        if(la_===1) {
            this.state = 1621;
            this.mark_color();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mark_colorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_mark_color;
    return this;
}

Mark_colorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mark_colorContext.prototype.constructor = Mark_colorContext;

Mark_colorContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

Mark_colorContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

Mark_colorContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Mark_colorContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterMark_color(this);
	}
};

Mark_colorContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitMark_color(this);
	}
};

Mark_colorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitMark_color(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Mark_colorContext = Mark_colorContext;

bitmarkParser.prototype.mark_color = function() {

    var localctx = new Mark_colorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, bitmarkParser.RULE_mark_color);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1624;
        this.opa();
        this.state = 1625;
        this.match(bitmarkParser.T__43);
        this.state = 1626;
        this.match(bitmarkParser.T__4);
        this.state = 1627;
        this.string();
        this.state = 1628;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_uploadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_document_upload;
    return this;
}

Document_uploadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_uploadContext.prototype.constructor = Document_uploadContext;

Document_uploadContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Document_uploadContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Document_uploadContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Document_uploadContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Document_uploadContext.prototype.audio_type = function() {
    return this.getTypedRuleContext(Audio_typeContext,0);
};

Document_uploadContext.prototype.image_type = function() {
    return this.getTypedRuleContext(Image_typeContext,0);
};

Document_uploadContext.prototype.video_type = function() {
    return this.getTypedRuleContext(Video_typeContext,0);
};

Document_uploadContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterDocument_upload(this);
	}
};

Document_uploadContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitDocument_upload(this);
	}
};

Document_uploadContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitDocument_upload(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Document_uploadContext = Document_uploadContext;

bitmarkParser.prototype.document_upload = function() {

    var localctx = new Document_uploadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, bitmarkParser.RULE_document_upload);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1630;
        this.opd();
        this.state = 1631;
        this.match(bitmarkParser.T__44);
        this.state = 1638;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.T__4) {
            this.state = 1632;
            this.match(bitmarkParser.T__4);
            this.state = 1636;
            var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1633;
                this.audio_type();
                break;

            case 2:
                this.state = 1634;
                this.image_type();
                break;

            case 3:
                this.state = 1635;
                this.video_type();
                break;

            }
        }

        this.state = 1640;
        this.cl();
        this.state = 1641;
        this.nl();
        this.state = 1651;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,202,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1642;
                this.bitElem();
                this.state = 1646;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,201,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1643;
                        this.nl(); 
                    }
                    this.state = 1648;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,201,this._ctx);
                }
         
            }
            this.state = 1653;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,202,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Take_pictureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_take_picture;
    return this;
}

Take_pictureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Take_pictureContext.prototype.constructor = Take_pictureContext;

Take_pictureContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Take_pictureContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Take_pictureContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Take_pictureContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Take_pictureContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Take_pictureContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterTake_picture(this);
	}
};

Take_pictureContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitTake_picture(this);
	}
};

Take_pictureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitTake_picture(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Take_pictureContext = Take_pictureContext;

bitmarkParser.prototype.take_picture = function() {

    var localctx = new Take_pictureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, bitmarkParser.RULE_take_picture);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1654;
        this.opd();
        this.state = 1655;
        this.match(bitmarkParser.T__45);
        this.state = 1656;
        this.format();
        this.state = 1657;
        this.cl();
        this.state = 1658;
        this.nl();
        this.state = 1668;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,204,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1659;
                this.bitElem();
                this.state = 1663;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,203,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1660;
                        this.nl(); 
                    }
                    this.state = 1665;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,203,this._ctx);
                }
         
            }
            this.state = 1670;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,204,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_audioContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_record_audio;
    return this;
}

Record_audioContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_audioContext.prototype.constructor = Record_audioContext;

Record_audioContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Record_audioContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Record_audioContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Record_audioContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Record_audioContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Record_audioContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterRecord_audio(this);
	}
};

Record_audioContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitRecord_audio(this);
	}
};

Record_audioContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitRecord_audio(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Record_audioContext = Record_audioContext;

bitmarkParser.prototype.record_audio = function() {

    var localctx = new Record_audioContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, bitmarkParser.RULE_record_audio);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1671;
        this.opd();
        this.state = 1672;
        this.match(bitmarkParser.T__46);
        this.state = 1673;
        this.format();
        this.state = 1674;
        this.cl();
        this.state = 1675;
        this.nl();
        this.state = 1685;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,206,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1676;
                this.bitElem();
                this.state = 1680;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,205,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1677;
                        this.nl(); 
                    }
                    this.state = 1682;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,205,this._ctx);
                }
         
            }
            this.state = 1687;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,206,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Preparation_noteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_preparation_note;
    return this;
}

Preparation_noteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Preparation_noteContext.prototype.constructor = Preparation_noteContext;

Preparation_noteContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Preparation_noteContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Preparation_noteContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Preparation_noteContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Preparation_noteContext.prototype.instruction = function() {
    return this.getTypedRuleContext(InstructionContext,0);
};

Preparation_noteContext.prototype.lines = function() {
    return this.getTypedRuleContext(LinesContext,0);
};

Preparation_noteContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPreparation_note(this);
	}
};

Preparation_noteContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPreparation_note(this);
	}
};

Preparation_noteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPreparation_note(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Preparation_noteContext = Preparation_noteContext;

bitmarkParser.prototype.preparation_note = function() {

    var localctx = new Preparation_noteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, bitmarkParser.RULE_preparation_note);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1688;
        this.opd();
        this.state = 1689;
        this.match(bitmarkParser.T__47);
        this.state = 1690;
        this.format();
        this.state = 1691;
        this.cl();
        this.state = 1695;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1692;
                this.nl(); 
            }
            this.state = 1697;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
        }

        this.state = 1701;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.OPB) {
            this.state = 1698;
            this.instruction();
            this.state = 1699;
            this.nl();
        }

        this.state = 1704;
        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
        if(la_===1) {
            this.state = 1703;
            this.lines();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_assignment;
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

AssignmentContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

AssignmentContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

AssignmentContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

AssignmentContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

AssignmentContext.prototype.lines = function() {
    return this.getTypedRuleContext(LinesContext,0);
};

AssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAssignment(this);
	}
};

AssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAssignment(this);
	}
};

AssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.AssignmentContext = AssignmentContext;

bitmarkParser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, bitmarkParser.RULE_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1706;
        this.opd();
        this.state = 1707;
        this.match(bitmarkParser.T__48);
        this.state = 1708;
        this.format();
        this.state = 1709;
        this.cl();
        this.state = 1710;
        this.nl();
        this.state = 1720;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1711;
                this.bitElem();
                this.state = 1715;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,210,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1712;
                        this.nl(); 
                    }
                    this.state = 1717;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,210,this._ctx);
                }
         
            }
            this.state = 1722;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
        }

        this.state = 1724;
        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
        if(la_===1) {
            this.state = 1723;
            this.lines();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Flashcard_1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_flashcard_1;
    return this;
}

Flashcard_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flashcard_1Context.prototype.constructor = Flashcard_1Context;

Flashcard_1Context.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Flashcard_1Context.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Flashcard_1Context.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Flashcard_1Context.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

Flashcard_1Context.prototype.side = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SideContext);
    } else {
        return this.getTypedRuleContext(SideContext,i);
    }
};

Flashcard_1Context.prototype.eq = function() {
    return this.getTypedRuleContext(EqContext,0);
};

Flashcard_1Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterFlashcard_1(this);
	}
};

Flashcard_1Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitFlashcard_1(this);
	}
};

Flashcard_1Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitFlashcard_1(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Flashcard_1Context = Flashcard_1Context;

bitmarkParser.prototype.flashcard_1 = function() {

    var localctx = new Flashcard_1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 158, bitmarkParser.RULE_flashcard_1);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1726;
        this.opd();
        this.state = 1727;
        this.match(bitmarkParser.T__49);
        this.state = 1728;
        this.format();
        this.state = 1729;
        this.cl();
        this.state = 1730;
        this.nl();
        this.state = 1731;
        this.side();
        this.state = 1732;
        this.eq();
        this.state = 1733;
        this.side();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FlashcardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_flashcard;
    return this;
}

FlashcardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FlashcardContext.prototype.constructor = FlashcardContext;

FlashcardContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

FlashcardContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

FlashcardContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

FlashcardContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

FlashcardContext.prototype.side = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SideContext);
    } else {
        return this.getTypedRuleContext(SideContext,i);
    }
};

FlashcardContext.prototype.eq = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EqContext);
    } else {
        return this.getTypedRuleContext(EqContext,i);
    }
};

FlashcardContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

FlashcardContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterFlashcard(this);
	}
};

FlashcardContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitFlashcard(this);
	}
};

FlashcardContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitFlashcard(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.FlashcardContext = FlashcardContext;

bitmarkParser.prototype.flashcard = function() {

    var localctx = new FlashcardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, bitmarkParser.RULE_flashcard);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1735;
        this.opd();
        this.state = 1736;
        this.match(bitmarkParser.T__50);
        this.state = 1737;
        this.format();
        this.state = 1738;
        this.cl();
        this.state = 1742;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1739;
            this.nl();
            this.state = 1744;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1745;
        this.hspl();
        this.state = 1746;
        this.side();
        this.state = 1747;
        this.eq();
        this.state = 1748;
        this.side();
        this.state = 1756;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,214,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1749;
                this.hspl();
                this.state = 1750;
                this.side();
                this.state = 1751;
                this.eq();
                this.state = 1752;
                this.side(); 
            }
            this.state = 1758;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,214,this._ctx);
        }

        this.state = 1759;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SidexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_sidex;
    return this;
}

SidexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SidexContext.prototype.constructor = SidexContext;

SidexContext.prototype.atdef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AtdefContext);
    } else {
        return this.getTypedRuleContext(AtdefContext,i);
    }
};

SidexContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

SidexContext.prototype.instruction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InstructionContext);
    } else {
        return this.getTypedRuleContext(InstructionContext,i);
    }
};

SidexContext.prototype.audiobit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AudiobitContext);
    } else {
        return this.getTypedRuleContext(AudiobitContext,i);
    }
};

SidexContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSidex(this);
	}
};

SidexContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSidex(this);
	}
};

SidexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSidex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.SidexContext = SidexContext;

bitmarkParser.prototype.sidex = function() {

    var localctx = new SidexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, bitmarkParser.RULE_sidex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1765; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1765;
        		switch(this._input.LA(1)) {
        		case bitmarkParser.OPA:
        		    this.state = 1761;
        		    this.atdef();
        		    break;
        		case bitmarkParser.T__4:
        		case bitmarkParser.T__96:
        		case bitmarkParser.OPESC:
        		case bitmarkParser.NUMERIC:
        		case bitmarkParser.STRING:
        		case bitmarkParser.SENTENCE:
        		    this.state = 1762;
        		    this.s_and_w();
        		    break;
        		case bitmarkParser.OPB:
        		    this.state = 1763;
        		    this.instruction();
        		    break;
        		case bitmarkParser.OP:
        		    this.state = 1764;
        		    this.audiobit();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1767; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,216, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_side;
    return this;
}

SideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SideContext.prototype.constructor = SideContext;

SideContext.prototype.sidex = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SidexContext);
    } else {
        return this.getTypedRuleContext(SidexContext,i);
    }
};

SideContext.prototype.or = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrContext);
    } else {
        return this.getTypedRuleContext(OrContext,i);
    }
};

SideContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSide(this);
	}
};

SideContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSide(this);
	}
};

SideContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSide(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.SideContext = SideContext;

bitmarkParser.prototype.side = function() {

    var localctx = new SideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, bitmarkParser.RULE_side);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1769;
        this.sidex();
        this.state = 1775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.OR) {
            this.state = 1770;
            this.or();
            this.state = 1771;
            this.sidex();
            this.state = 1777;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_atdef;
    return this;
}

AtdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtdefContext.prototype.constructor = AtdefContext;

AtdefContext.prototype.atdef_ = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Atdef_Context);
    } else {
        return this.getTypedRuleContext(Atdef_Context,i);
    }
};

AtdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAtdef(this);
	}
};

AtdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAtdef(this);
	}
};

AtdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAtdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.AtdefContext = AtdefContext;

bitmarkParser.prototype.atdef = function() {

    var localctx = new AtdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, bitmarkParser.RULE_atdef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1778;
        this.atdef_();
        this.state = 1782;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,218,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1779;
                this.atdef_(); 
            }
            this.state = 1784;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,218,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Atdef_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_atdef_;
    return this;
}

Atdef_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atdef_Context.prototype.constructor = Atdef_Context;

Atdef_Context.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

Atdef_Context.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Atdef_Context.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Atdef_Context.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Atdef_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAtdef_(this);
	}
};

Atdef_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAtdef_(this);
	}
};

Atdef_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAtdef_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Atdef_Context = Atdef_Context;

bitmarkParser.prototype.atdef_ = function() {

    var localctx = new Atdef_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 168, bitmarkParser.RULE_atdef_);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1785;
        this.opa();
        this.state = 1786;
        this.s_and_w();
        this.state = 1787;
        this.match(bitmarkParser.T__4);
        this.state = 1788;
        this.s_and_w();
        this.state = 1794;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1789;
            this.nl();
            this.state = 1790;
            this.s_and_w();
            this.state = 1796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1797;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArticleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_article;
    return this;
}

ArticleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArticleContext.prototype.constructor = ArticleContext;

ArticleContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

ArticleContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

ArticleContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

ArticleContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

ArticleContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

ArticleContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterArticle(this);
	}
};

ArticleContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitArticle(this);
	}
};

ArticleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitArticle(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ArticleContext = ArticleContext;

bitmarkParser.prototype.article = function() {

    var localctx = new ArticleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, bitmarkParser.RULE_article);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1799;
        this.opd();
        this.state = 1800;
        this.match(bitmarkParser.T__51);
        this.state = 1801;
        this.format();
        this.state = 1802;
        this.cl();
        this.state = 1806;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1803;
            this.nl();
            this.state = 1808;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1816; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1809;
        		this.bitElem();
        		this.state = 1813;
        		this._errHandler.sync(this);
        		var _alt = this._interp.adaptivePredict(this._input,221,this._ctx)
        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		    if(_alt===1) {
        		        this.state = 1810;
        		        this.nl(); 
        		    }
        		    this.state = 1815;
        		    this._errHandler.sync(this);
        		    _alt = this._interp.adaptivePredict(this._input,221,this._ctx);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1818; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,222, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_chat;
    return this;
}

ChatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChatContext.prototype.constructor = ChatContext;

ChatContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

ChatContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

ChatContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

ChatContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

ChatContext.prototype.initiator = function() {
    return this.getTypedRuleContext(InitiatorContext,0);
};

ChatContext.prototype.partner = function() {
    return this.getTypedRuleContext(PartnerContext,0);
};

ChatContext.prototype.chat_initiator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Chat_initiatorContext);
    } else {
        return this.getTypedRuleContext(Chat_initiatorContext,i);
    }
};

ChatContext.prototype.sspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SsplContext);
    } else {
        return this.getTypedRuleContext(SsplContext,i);
    }
};

ChatContext.prototype.chat_partner = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Chat_partnerContext);
    } else {
        return this.getTypedRuleContext(Chat_partnerContext,i);
    }
};

ChatContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterChat(this);
	}
};

ChatContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitChat(this);
	}
};

ChatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitChat(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ChatContext = ChatContext;

bitmarkParser.prototype.chat = function() {

    var localctx = new ChatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, bitmarkParser.RULE_chat);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1820;
        this.opd();
        this.state = 1821;
        this.match(bitmarkParser.T__52);
        this.state = 1822;
        this.format();
        this.state = 1823;
        this.cl();
        this.state = 1824;
        this.hspl();
        this.state = 1825;
        this.initiator();
        this.state = 1826;
        this.hspl();
        this.state = 1827;
        this.partner();
        this.state = 1838; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1828;
        		this.hspl();
        		this.state = 1829;
        		this.chat_initiator();
        		this.state = 1835;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(_la===bitmarkParser.SSPL || _la===bitmarkParser.SSPL2) {
        		    this.state = 1830;
        		    this.sspl();
        		    this.state = 1831;
        		    this.chat_partner();
        		    this.state = 1837;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1840; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,224, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1842;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitiatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_initiator;
    return this;
}

InitiatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitiatorContext.prototype.constructor = InitiatorContext;

InitiatorContext.prototype.name_text = function() {
    return this.getTypedRuleContext(Name_textContext,0);
};

InitiatorContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

InitiatorContext.prototype.imagebit = function() {
    return this.getTypedRuleContext(ImagebitContext,0);
};

InitiatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterInitiator(this);
	}
};

InitiatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitInitiator(this);
	}
};

InitiatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitInitiator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.InitiatorContext = InitiatorContext;

bitmarkParser.prototype.initiator = function() {

    var localctx = new InitiatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, bitmarkParser.RULE_initiator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1844;
        this.name_text();
        this.state = 1848;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.NL) {
            this.state = 1845;
            this.nl();
            this.state = 1846;
            this.imagebit();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartnerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_partner;
    return this;
}

PartnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartnerContext.prototype.constructor = PartnerContext;

PartnerContext.prototype.name_text = function() {
    return this.getTypedRuleContext(Name_textContext,0);
};

PartnerContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

PartnerContext.prototype.imagebit = function() {
    return this.getTypedRuleContext(ImagebitContext,0);
};

PartnerContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterPartner(this);
	}
};

PartnerContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitPartner(this);
	}
};

PartnerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitPartner(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.PartnerContext = PartnerContext;

bitmarkParser.prototype.partner = function() {

    var localctx = new PartnerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, bitmarkParser.RULE_partner);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1850;
        this.name_text();
        this.state = 1854;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.NL) {
            this.state = 1851;
            this.nl();
            this.state = 1852;
            this.imagebit();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Name_textContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_name_text;
    return this;
}

Name_textContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Name_textContext.prototype.constructor = Name_textContext;

Name_textContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

Name_textContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Name_textContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterName_text(this);
	}
};

Name_textContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitName_text(this);
	}
};

Name_textContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitName_text(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Name_textContext = Name_textContext;

bitmarkParser.prototype.name_text = function() {

    var localctx = new Name_textContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, bitmarkParser.RULE_name_text);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1856;
        this.match(bitmarkParser.T__5);
        this.state = 1857;
        this.s_and_w();
        this.state = 1858;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Chat_initiatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_chat_initiator;
    return this;
}

Chat_initiatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Chat_initiatorContext.prototype.constructor = Chat_initiatorContext;

Chat_initiatorContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

Chat_initiatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterChat_initiator(this);
	}
};

Chat_initiatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitChat_initiator(this);
	}
};

Chat_initiatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitChat_initiator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Chat_initiatorContext = Chat_initiatorContext;

bitmarkParser.prototype.chat_initiator = function() {

    var localctx = new Chat_initiatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, bitmarkParser.RULE_chat_initiator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1860;
        this.s_and_w();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Chat_partnerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_chat_partner;
    return this;
}

Chat_partnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Chat_partnerContext.prototype.constructor = Chat_partnerContext;

Chat_partnerContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

Chat_partnerContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterChat_partner(this);
	}
};

Chat_partnerContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitChat_partner(this);
	}
};

Chat_partnerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitChat_partner(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Chat_partnerContext = Chat_partnerContext;

bitmarkParser.prototype.chat_partner = function() {

    var localctx = new Chat_partnerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, bitmarkParser.RULE_chat_partner);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1862;
        this.s_and_w();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConversationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_conversation;
    return this;
}

ConversationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversationContext.prototype.constructor = ConversationContext;

ConversationContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

ConversationContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

ConversationContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

ConversationContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

ConversationContext.prototype.initiator = function() {
    return this.getTypedRuleContext(InitiatorContext,0);
};

ConversationContext.prototype.partner = function() {
    return this.getTypedRuleContext(PartnerContext,0);
};

ConversationContext.prototype.chat_initiator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Chat_initiatorContext);
    } else {
        return this.getTypedRuleContext(Chat_initiatorContext,i);
    }
};

ConversationContext.prototype.sspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SsplContext);
    } else {
        return this.getTypedRuleContext(SsplContext,i);
    }
};

ConversationContext.prototype.chat_partner = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Chat_partnerContext);
    } else {
        return this.getTypedRuleContext(Chat_partnerContext,i);
    }
};

ConversationContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterConversation(this);
	}
};

ConversationContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitConversation(this);
	}
};

ConversationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitConversation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ConversationContext = ConversationContext;

bitmarkParser.prototype.conversation = function() {

    var localctx = new ConversationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, bitmarkParser.RULE_conversation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1864;
        this.opd();
        this.state = 1865;
        this.match(bitmarkParser.T__53);
        this.state = 1866;
        this.format();
        this.state = 1867;
        this.cl();
        this.state = 1868;
        this.hspl();
        this.state = 1869;
        this.initiator();
        this.state = 1870;
        this.hspl();
        this.state = 1871;
        this.partner();
        this.state = 1882; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1872;
        		this.hspl();
        		this.state = 1873;
        		this.chat_initiator();
        		this.state = 1879;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(_la===bitmarkParser.SSPL || _la===bitmarkParser.SSPL2) {
        		    this.state = 1874;
        		    this.sspl();
        		    this.state = 1875;
        		    this.chat_partner();
        		    this.state = 1881;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1884; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,228, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1886;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bot_interviewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_bot_interview;
    return this;
}

Bot_interviewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bot_interviewContext.prototype.constructor = Bot_interviewContext;

Bot_interviewContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Bot_interviewContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Bot_interviewContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Bot_interviewContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Bot_interviewContext.prototype.bot_choice = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bot_choiceContext);
    } else {
        return this.getTypedRuleContext(Bot_choiceContext,i);
    }
};

Bot_interviewContext.prototype.sspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SsplContext);
    } else {
        return this.getTypedRuleContext(SsplContext,i);
    }
};

Bot_interviewContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBot_interview(this);
	}
};

Bot_interviewContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBot_interview(this);
	}
};

Bot_interviewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBot_interview(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Bot_interviewContext = Bot_interviewContext;

bitmarkParser.prototype.bot_interview = function() {

    var localctx = new Bot_interviewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, bitmarkParser.RULE_bot_interview);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1888;
        this.opd();
        this.state = 1889;
        this.match(bitmarkParser.T__54);
        this.state = 1890;
        this.format();
        this.state = 1891;
        this.cl();
        this.state = 1902; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1892;
        		this.hspl();
        		this.state = 1893;
        		this.bot_choice();
        		this.state = 1899;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(_la===bitmarkParser.SSPL || _la===bitmarkParser.SSPL2) {
        		    this.state = 1894;
        		    this.sspl();
        		    this.state = 1895;
        		    this.bot_choice();
        		    this.state = 1901;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1904; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,230, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1906;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bot_choiceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_bot_choice;
    return this;
}

Bot_choiceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bot_choiceContext.prototype.constructor = Bot_choiceContext;

Bot_choiceContext.prototype.words = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WordsContext);
    } else {
        return this.getTypedRuleContext(WordsContext,i);
    }
};

Bot_choiceContext.prototype.instruction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InstructionContext);
    } else {
        return this.getTypedRuleContext(InstructionContext,i);
    }
};

Bot_choiceContext.prototype.audiobit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AudiobitContext);
    } else {
        return this.getTypedRuleContext(AudiobitContext,i);
    }
};

Bot_choiceContext.prototype.gap = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GapContext);
    } else {
        return this.getTypedRuleContext(GapContext,i);
    }
};

Bot_choiceContext.prototype.choice_plus = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Choice_plusContext);
    } else {
        return this.getTypedRuleContext(Choice_plusContext,i);
    }
};

Bot_choiceContext.prototype.choice_minus = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Choice_minusContext);
    } else {
        return this.getTypedRuleContext(Choice_minusContext,i);
    }
};

Bot_choiceContext.prototype.choice_star = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Choice_starContext);
    } else {
        return this.getTypedRuleContext(Choice_starContext,i);
    }
};

Bot_choiceContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBot_choice(this);
	}
};

Bot_choiceContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBot_choice(this);
	}
};

Bot_choiceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBot_choice(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Bot_choiceContext = Bot_choiceContext;

bitmarkParser.prototype.bot_choice = function() {

    var localctx = new Bot_choiceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, bitmarkParser.RULE_bot_choice);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1915; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1915;
            switch(this._input.LA(1)) {
            case bitmarkParser.SENTENCE:
                this.state = 1908;
                this.words();
                break;
            case bitmarkParser.OPB:
                this.state = 1909;
                this.instruction();
                break;
            case bitmarkParser.OP:
                this.state = 1910;
                this.audiobit();
                break;
            case bitmarkParser.OPU:
                this.state = 1911;
                this.gap();
                break;
            case bitmarkParser.OPP:
                this.state = 1912;
                this.choice_plus();
                break;
            case bitmarkParser.OPM:
                this.state = 1913;
                this.choice_minus();
                break;
            case bitmarkParser.OPR:
                this.state = 1914;
                this.choice_star();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1917; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (bitmarkParser.OPU - 104)) | (1 << (bitmarkParser.OPB - 104)) | (1 << (bitmarkParser.OPP - 104)) | (1 << (bitmarkParser.OPM - 104)) | (1 << (bitmarkParser.OPR - 104)) | (1 << (bitmarkParser.OP - 104)))) !== 0) || _la===bitmarkParser.SENTENCE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Self_assessmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_self_assessment;
    return this;
}

Self_assessmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Self_assessmentContext.prototype.constructor = Self_assessmentContext;

Self_assessmentContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Self_assessmentContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Self_assessmentContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Self_assessmentContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Self_assessmentContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Self_assessmentContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Self_assessmentContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Self_assessmentContext.prototype.bullet_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bullet_itemContext);
    } else {
        return this.getTypedRuleContext(Bullet_itemContext,i);
    }
};

Self_assessmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSelf_assessment(this);
	}
};

Self_assessmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSelf_assessment(this);
	}
};

Self_assessmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSelf_assessment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Self_assessmentContext = Self_assessmentContext;

bitmarkParser.prototype.self_assessment = function() {

    var localctx = new Self_assessmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, bitmarkParser.RULE_self_assessment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1919;
        this.opd();
        this.state = 1920;
        this.match(bitmarkParser.T__55);
        this.state = 1921;
        this.format();
        this.state = 1922;
        this.cl();
        this.state = 1926;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1923;
            this.nl();
            this.state = 1928;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1938;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1929;
            this.bitElem();
            this.state = 1933;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.NL) {
                this.state = 1930;
                this.nl();
                this.state = 1935;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1940;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1950; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1941;
        		this.hspl();
        		this.state = 1942;
        		this.s_and_w();
        		this.state = 1946; 
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		do {
        		    this.state = 1943;
        		    this.nl();
        		    this.state = 1944;
        		    this.bullet_item();
        		    this.state = 1948; 
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		} while(_la===bitmarkParser.NL);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1952; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,237, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1954;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RatingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_rating;
    return this;
}

RatingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RatingContext.prototype.constructor = RatingContext;

RatingContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

RatingContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

RatingContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

RatingContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

RatingContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

RatingContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

RatingContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

RatingContext.prototype.bullet_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bullet_itemContext);
    } else {
        return this.getTypedRuleContext(Bullet_itemContext,i);
    }
};

RatingContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterRating(this);
	}
};

RatingContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitRating(this);
	}
};

RatingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitRating(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.RatingContext = RatingContext;

bitmarkParser.prototype.rating = function() {

    var localctx = new RatingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, bitmarkParser.RULE_rating);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1956;
        this.opd();
        this.state = 1957;
        this.match(bitmarkParser.T__56);
        this.state = 1958;
        this.format();
        this.state = 1959;
        this.cl();
        this.state = 1963;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 1960;
            this.nl();
            this.state = 1965;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1975;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 1966;
            this.bitElem();
            this.state = 1970;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.NL) {
                this.state = 1967;
                this.nl();
                this.state = 1972;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1977;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1987; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1978;
        		this.hspl();
        		this.state = 1979;
        		this.s_and_w();
        		this.state = 1983; 
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		do {
        		    this.state = 1980;
        		    this.nl();
        		    this.state = 1981;
        		    this.bullet_item();
        		    this.state = 1985; 
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		} while(_la===bitmarkParser.NL);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1989; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,242, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1991;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bullet_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_bullet_item;
    return this;
}

Bullet_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bullet_itemContext.prototype.constructor = Bullet_itemContext;

Bullet_itemContext.prototype.opbul = function() {
    return this.getTypedRuleContext(OpbulContext,0);
};

Bullet_itemContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

Bullet_itemContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Bullet_itemContext.prototype.atpoint = function() {
    return this.getTypedRuleContext(AtpointContext,0);
};

Bullet_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBullet_item(this);
	}
};

Bullet_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBullet_item(this);
	}
};

Bullet_itemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBullet_item(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Bullet_itemContext = Bullet_itemContext;

bitmarkParser.prototype.bullet_item = function() {

    var localctx = new Bullet_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, bitmarkParser.RULE_bullet_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1993;
        this.opbul();
        this.state = 1994;
        this.s_and_w();
        this.state = 1995;
        this.cl();
        this.state = 1997;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.OPA) {
            this.state = 1996;
            this.atpoint();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SurveyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_survey;
    return this;
}

SurveyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SurveyContext.prototype.constructor = SurveyContext;

SurveyContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

SurveyContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

SurveyContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

SurveyContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

SurveyContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

SurveyContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

SurveyContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

SurveyContext.prototype.bullet_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bullet_itemContext);
    } else {
        return this.getTypedRuleContext(Bullet_itemContext,i);
    }
};

SurveyContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSurvey(this);
	}
};

SurveyContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSurvey(this);
	}
};

SurveyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSurvey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.SurveyContext = SurveyContext;

bitmarkParser.prototype.survey = function() {

    var localctx = new SurveyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, bitmarkParser.RULE_survey);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1999;
        this.opd();
        this.state = 2000;
        this.match(bitmarkParser.T__57);
        this.state = 2001;
        this.format();
        this.state = 2002;
        this.cl();
        this.state = 2006;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 2003;
            this.nl();
            this.state = 2008;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2018;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 2009;
            this.bitElem();
            this.state = 2013;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.NL) {
                this.state = 2010;
                this.nl();
                this.state = 2015;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2020;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2030; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2021;
        		this.hspl();
        		this.state = 2022;
        		this.s_and_w();
        		this.state = 2026; 
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		do {
        		    this.state = 2023;
        		    this.nl();
        		    this.state = 2024;
        		    this.bullet_item();
        		    this.state = 2028; 
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		} while(_la===bitmarkParser.NL);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2032; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,248, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 2034;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Survey_1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_survey_1;
    return this;
}

Survey_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Survey_1Context.prototype.constructor = Survey_1Context;

Survey_1Context.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Survey_1Context.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Survey_1Context.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Survey_1Context.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Survey_1Context.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Survey_1Context.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Survey_1Context.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Survey_1Context.prototype.bullet_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bullet_itemContext);
    } else {
        return this.getTypedRuleContext(Bullet_itemContext,i);
    }
};

Survey_1Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSurvey_1(this);
	}
};

Survey_1Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSurvey_1(this);
	}
};

Survey_1Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSurvey_1(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Survey_1Context = Survey_1Context;

bitmarkParser.prototype.survey_1 = function() {

    var localctx = new Survey_1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 198, bitmarkParser.RULE_survey_1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2036;
        this.opd();
        this.state = 2037;
        this.match(bitmarkParser.T__58);
        this.state = 2038;
        this.format();
        this.state = 2039;
        this.cl();
        this.state = 2043;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 2040;
            this.nl();
            this.state = 2045;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2055;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 2046;
            this.bitElem();
            this.state = 2050;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.NL) {
                this.state = 2047;
                this.nl();
                this.state = 2052;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2067; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2058;
        		this.hspl();
        		this.state = 2059;
        		this.s_and_w();
        		this.state = 2063; 
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		do {
        		    this.state = 2060;
        		    this.nl();
        		    this.state = 2061;
        		    this.bullet_item();
        		    this.state = 2065; 
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		} while(_la===bitmarkParser.NL);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2069; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,253, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 2071;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Survey_anonymousContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_survey_anonymous;
    return this;
}

Survey_anonymousContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Survey_anonymousContext.prototype.constructor = Survey_anonymousContext;

Survey_anonymousContext.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Survey_anonymousContext.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Survey_anonymousContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Survey_anonymousContext.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Survey_anonymousContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Survey_anonymousContext.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Survey_anonymousContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Survey_anonymousContext.prototype.bullet_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bullet_itemContext);
    } else {
        return this.getTypedRuleContext(Bullet_itemContext,i);
    }
};

Survey_anonymousContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSurvey_anonymous(this);
	}
};

Survey_anonymousContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSurvey_anonymous(this);
	}
};

Survey_anonymousContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSurvey_anonymous(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Survey_anonymousContext = Survey_anonymousContext;

bitmarkParser.prototype.survey_anonymous = function() {

    var localctx = new Survey_anonymousContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, bitmarkParser.RULE_survey_anonymous);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2073;
        this.opd();
        this.state = 2074;
        this.match(bitmarkParser.T__59);
        this.state = 2075;
        this.format();
        this.state = 2076;
        this.cl();
        this.state = 2080;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 2077;
            this.nl();
            this.state = 2082;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2092;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 2083;
            this.bitElem();
            this.state = 2087;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.NL) {
                this.state = 2084;
                this.nl();
                this.state = 2089;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2094;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2104; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2095;
        		this.hspl();
        		this.state = 2096;
        		this.s_and_w();
        		this.state = 2100; 
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		do {
        		    this.state = 2097;
        		    this.nl();
        		    this.state = 2098;
        		    this.bullet_item();
        		    this.state = 2102; 
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		} while(_la===bitmarkParser.NL);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2106; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,258, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 2108;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Survey_anonymous_1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_survey_anonymous_1;
    return this;
}

Survey_anonymous_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Survey_anonymous_1Context.prototype.constructor = Survey_anonymous_1Context;

Survey_anonymous_1Context.prototype.opd = function() {
    return this.getTypedRuleContext(OpdContext,0);
};

Survey_anonymous_1Context.prototype.format = function() {
    return this.getTypedRuleContext(FormatContext,0);
};

Survey_anonymous_1Context.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Survey_anonymous_1Context.prototype.hspl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HsplContext);
    } else {
        return this.getTypedRuleContext(HsplContext,i);
    }
};

Survey_anonymous_1Context.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

Survey_anonymous_1Context.prototype.bitElem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitElemContext);
    } else {
        return this.getTypedRuleContext(BitElemContext,i);
    }
};

Survey_anonymous_1Context.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

Survey_anonymous_1Context.prototype.bullet_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bullet_itemContext);
    } else {
        return this.getTypedRuleContext(Bullet_itemContext,i);
    }
};

Survey_anonymous_1Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSurvey_anonymous_1(this);
	}
};

Survey_anonymous_1Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSurvey_anonymous_1(this);
	}
};

Survey_anonymous_1Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSurvey_anonymous_1(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Survey_anonymous_1Context = Survey_anonymous_1Context;

bitmarkParser.prototype.survey_anonymous_1 = function() {

    var localctx = new Survey_anonymous_1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 202, bitmarkParser.RULE_survey_anonymous_1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2110;
        this.opd();
        this.state = 2111;
        this.match(bitmarkParser.T__60);
        this.state = 2112;
        this.format();
        this.state = 2113;
        this.cl();
        this.state = 2117;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.NL) {
            this.state = 2114;
            this.nl();
            this.state = 2119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2129;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===bitmarkParser.T__4 || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (bitmarkParser.T__96 - 97)) | (1 << (bitmarkParser.OPESC - 97)) | (1 << (bitmarkParser.OPRANGLE - 97)) | (1 << (bitmarkParser.OPU - 97)) | (1 << (bitmarkParser.OPB - 97)) | (1 << (bitmarkParser.OPQ - 97)) | (1 << (bitmarkParser.OPA - 97)) | (1 << (bitmarkParser.OPC - 97)) | (1 << (bitmarkParser.OP - 97)) | (1 << (bitmarkParser.LIST_LINE - 97)) | (1 << (bitmarkParser.EMP1 - 97)) | (1 << (bitmarkParser.EMP2 - 97)) | (1 << (bitmarkParser.EMP3 - 97)) | (1 << (bitmarkParser.NOTE - 97)) | (1 << (bitmarkParser.INS - 97)) | (1 << (bitmarkParser.DEL - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (bitmarkParser.REM - 129)) | (1 << (bitmarkParser.HELP - 129)) | (1 << (bitmarkParser.HIGH - 129)) | (1 << (bitmarkParser.ANNO - 129)) | (1 << (bitmarkParser.ANNO_IM - 129)) | (1 << (bitmarkParser.NUMERIC - 129)) | (1 << (bitmarkParser.STRING - 129)) | (1 << (bitmarkParser.SP - 129)) | (1 << (bitmarkParser.SENTENCE - 129)))) !== 0)) {
            this.state = 2120;
            this.bitElem();
            this.state = 2124;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===bitmarkParser.NL) {
                this.state = 2121;
                this.nl();
                this.state = 2126;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2141; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2132;
        		this.hspl();
        		this.state = 2133;
        		this.s_and_w();
        		this.state = 2137; 
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		do {
        		    this.state = 2134;
        		    this.nl();
        		    this.state = 2135;
        		    this.bullet_item();
        		    this.state = 2139; 
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		} while(_la===bitmarkParser.NL);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2143; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,263, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 2145;
        this.hspl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtpointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_atpoint;
    return this;
}

AtpointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtpointContext.prototype.constructor = AtpointContext;

AtpointContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

AtpointContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

AtpointContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

AtpointContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAtpoint(this);
	}
};

AtpointContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAtpoint(this);
	}
};

AtpointContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAtpoint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.AtpointContext = AtpointContext;

bitmarkParser.prototype.atpoint = function() {

    var localctx = new AtpointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, bitmarkParser.RULE_atpoint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2147;
        this.opa();
        this.state = 2148;
        this.match(bitmarkParser.T__61);
        this.state = 2149;
        this.numeric();
        this.state = 2150;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_format;
    return this;
}

FormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormatContext.prototype.constructor = FormatContext;

FormatContext.prototype.image_format = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Image_formatContext);
    } else {
        return this.getTypedRuleContext(Image_formatContext,i);
    }
};

FormatContext.prototype.audio_format = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Audio_formatContext);
    } else {
        return this.getTypedRuleContext(Audio_formatContext,i);
    }
};

FormatContext.prototype.video_format = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Video_formatContext);
    } else {
        return this.getTypedRuleContext(Video_formatContext,i);
    }
};

FormatContext.prototype.article_format = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Article_formatContext);
    } else {
        return this.getTypedRuleContext(Article_formatContext,i);
    }
};

FormatContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterFormat(this);
	}
};

FormatContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitFormat(this);
	}
};

FormatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitFormat(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.FormatContext = FormatContext;

bitmarkParser.prototype.format = function() {

    var localctx = new FormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, bitmarkParser.RULE_format);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2155;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,264,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2152;
                _la = this._input.LA(1);
                if(!(((((_la - 63)) & ~0x1f) == 0 && ((1 << (_la - 63)) & ((1 << (bitmarkParser.T__62 - 63)) | (1 << (bitmarkParser.T__63 - 63)) | (1 << (bitmarkParser.T__64 - 63)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                } 
            }
            this.state = 2157;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,264,this._ctx);
        }

        this.state = 2165;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (bitmarkParser.T__64 - 65)) | (1 << (bitmarkParser.T__65 - 65)) | (1 << (bitmarkParser.T__66 - 65)) | (1 << (bitmarkParser.T__67 - 65)) | (1 << (bitmarkParser.T__68 - 65)) | (1 << (bitmarkParser.T__74 - 65)) | (1 << (bitmarkParser.T__75 - 65)) | (1 << (bitmarkParser.T__78 - 65)) | (1 << (bitmarkParser.T__79 - 65)) | (1 << (bitmarkParser.T__85 - 65)))) !== 0)) {
            this.state = 2163;
            switch(this._input.LA(1)) {
            case bitmarkParser.T__65:
                this.state = 2158;
                this.match(bitmarkParser.T__65);
                break;
            case bitmarkParser.T__66:
            case bitmarkParser.T__67:
            case bitmarkParser.T__68:
                this.state = 2159;
                this.image_format();
                break;
            case bitmarkParser.T__74:
            case bitmarkParser.T__75:
                this.state = 2160;
                this.audio_format();
                break;
            case bitmarkParser.T__78:
            case bitmarkParser.T__79:
                this.state = 2161;
                this.video_format();
                break;
            case bitmarkParser.T__64:
            case bitmarkParser.T__85:
                this.state = 2162;
                this.article_format();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2167;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Image_formatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_image_format;
    return this;
}

Image_formatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Image_formatContext.prototype.constructor = Image_formatContext;

Image_formatContext.prototype.image_type = function() {
    return this.getTypedRuleContext(Image_typeContext,0);
};

Image_formatContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterImage_format(this);
	}
};

Image_formatContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitImage_format(this);
	}
};

Image_formatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitImage_format(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Image_formatContext = Image_formatContext;

bitmarkParser.prototype.image_format = function() {

    var localctx = new Image_formatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, bitmarkParser.RULE_image_format);
    var _la = 0; // Token type
    try {
        this.state = 2183;
        switch(this._input.LA(1)) {
        case bitmarkParser.T__66:
            this.enterOuterAlt(localctx, 1);
            this.state = 2168;
            this.match(bitmarkParser.T__66);
            this.state = 2171;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.T__4) {
                this.state = 2169;
                this.match(bitmarkParser.T__4);
                this.state = 2170;
                this.image_type();
            }

            break;
        case bitmarkParser.T__67:
            this.enterOuterAlt(localctx, 2);
            this.state = 2173;
            this.match(bitmarkParser.T__67);
            this.state = 2176;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.T__4) {
                this.state = 2174;
                this.match(bitmarkParser.T__4);
                this.state = 2175;
                this.image_type();
            }

            break;
        case bitmarkParser.T__68:
            this.enterOuterAlt(localctx, 3);
            this.state = 2178;
            this.match(bitmarkParser.T__68);
            this.state = 2181;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.T__4) {
                this.state = 2179;
                this.match(bitmarkParser.T__4);
                this.state = 2180;
                this.image_type();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Image_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_image_type;
    return this;
}

Image_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Image_typeContext.prototype.constructor = Image_typeContext;


Image_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterImage_type(this);
	}
};

Image_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitImage_type(this);
	}
};

Image_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitImage_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Image_typeContext = Image_typeContext;

bitmarkParser.prototype.image_type = function() {

    var localctx = new Image_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, bitmarkParser.RULE_image_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2185;
        _la = this._input.LA(1);
        if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (bitmarkParser.T__69 - 70)) | (1 << (bitmarkParser.T__70 - 70)) | (1 << (bitmarkParser.T__71 - 70)) | (1 << (bitmarkParser.T__72 - 70)) | (1 << (bitmarkParser.T__73 - 70)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Audio_formatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_audio_format;
    return this;
}

Audio_formatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Audio_formatContext.prototype.constructor = Audio_formatContext;

Audio_formatContext.prototype.audio_type = function() {
    return this.getTypedRuleContext(Audio_typeContext,0);
};

Audio_formatContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAudio_format(this);
	}
};

Audio_formatContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAudio_format(this);
	}
};

Audio_formatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAudio_format(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Audio_formatContext = Audio_formatContext;

bitmarkParser.prototype.audio_format = function() {

    var localctx = new Audio_formatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, bitmarkParser.RULE_audio_format);
    var _la = 0; // Token type
    try {
        this.state = 2197;
        switch(this._input.LA(1)) {
        case bitmarkParser.T__74:
            this.enterOuterAlt(localctx, 1);
            this.state = 2187;
            this.match(bitmarkParser.T__74);
            this.state = 2190;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.T__4) {
                this.state = 2188;
                this.match(bitmarkParser.T__4);
                this.state = 2189;
                this.audio_type();
            }

            break;
        case bitmarkParser.T__75:
            this.enterOuterAlt(localctx, 2);
            this.state = 2192;
            this.match(bitmarkParser.T__75);
            this.state = 2195;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.T__4) {
                this.state = 2193;
                this.match(bitmarkParser.T__4);
                this.state = 2194;
                this.audio_type();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Audio_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_audio_type;
    return this;
}

Audio_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Audio_typeContext.prototype.constructor = Audio_typeContext;


Audio_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAudio_type(this);
	}
};

Audio_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAudio_type(this);
	}
};

Audio_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAudio_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Audio_typeContext = Audio_typeContext;

bitmarkParser.prototype.audio_type = function() {

    var localctx = new Audio_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, bitmarkParser.RULE_audio_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2199;
        _la = this._input.LA(1);
        if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (bitmarkParser.T__69 - 70)) | (1 << (bitmarkParser.T__76 - 70)) | (1 << (bitmarkParser.T__77 - 70)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Video_formatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_video_format;
    return this;
}

Video_formatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Video_formatContext.prototype.constructor = Video_formatContext;

Video_formatContext.prototype.video_type = function() {
    return this.getTypedRuleContext(Video_typeContext,0);
};

Video_formatContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterVideo_format(this);
	}
};

Video_formatContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitVideo_format(this);
	}
};

Video_formatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitVideo_format(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Video_formatContext = Video_formatContext;

bitmarkParser.prototype.video_format = function() {

    var localctx = new Video_formatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, bitmarkParser.RULE_video_format);
    var _la = 0; // Token type
    try {
        this.state = 2211;
        switch(this._input.LA(1)) {
        case bitmarkParser.T__78:
            this.enterOuterAlt(localctx, 1);
            this.state = 2201;
            this.match(bitmarkParser.T__78);
            this.state = 2204;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.T__4) {
                this.state = 2202;
                this.match(bitmarkParser.T__4);
                this.state = 2203;
                this.video_type();
            }

            break;
        case bitmarkParser.T__79:
            this.enterOuterAlt(localctx, 2);
            this.state = 2206;
            this.match(bitmarkParser.T__79);
            this.state = 2209;
            _la = this._input.LA(1);
            if(_la===bitmarkParser.T__4) {
                this.state = 2207;
                this.match(bitmarkParser.T__4);
                this.state = 2208;
                this.video_type();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Video_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_video_type;
    return this;
}

Video_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Video_typeContext.prototype.constructor = Video_typeContext;


Video_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterVideo_type(this);
	}
};

Video_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitVideo_type(this);
	}
};

Video_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitVideo_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Video_typeContext = Video_typeContext;

bitmarkParser.prototype.video_type = function() {

    var localctx = new Video_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, bitmarkParser.RULE_video_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2213;
        _la = this._input.LA(1);
        if(!(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (bitmarkParser.T__72 - 73)) | (1 << (bitmarkParser.T__77 - 73)) | (1 << (bitmarkParser.T__80 - 73)) | (1 << (bitmarkParser.T__81 - 73)) | (1 << (bitmarkParser.T__82 - 73)) | (1 << (bitmarkParser.T__83 - 73)) | (1 << (bitmarkParser.T__84 - 73)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Article_formatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_article_format;
    return this;
}

Article_formatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Article_formatContext.prototype.constructor = Article_formatContext;


Article_formatContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterArticle_format(this);
	}
};

Article_formatContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitArticle_format(this);
	}
};

Article_formatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitArticle_format(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Article_formatContext = Article_formatContext;

bitmarkParser.prototype.article_format = function() {

    var localctx = new Article_formatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, bitmarkParser.RULE_article_format);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2215;
        _la = this._input.LA(1);
        if(!(_la===bitmarkParser.T__64 || _la===bitmarkParser.T__85)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_formatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_document_format;
    return this;
}

Document_formatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_formatContext.prototype.constructor = Document_formatContext;


Document_formatContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterDocument_format(this);
	}
};

Document_formatContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitDocument_format(this);
	}
};

Document_formatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitDocument_format(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Document_formatContext = Document_formatContext;

bitmarkParser.prototype.document_format = function() {

    var localctx = new Document_formatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, bitmarkParser.RULE_document_format);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2217;
        _la = this._input.LA(1);
        if(!(_la===bitmarkParser.T__86 || _la===bitmarkParser.T__87)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function App_formatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_app_format;
    return this;
}

App_formatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
App_formatContext.prototype.constructor = App_formatContext;


App_formatContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterApp_format(this);
	}
};

App_formatContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitApp_format(this);
	}
};

App_formatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitApp_format(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.App_formatContext = App_formatContext;

bitmarkParser.prototype.app_format = function() {

    var localctx = new App_formatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, bitmarkParser.RULE_app_format);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2219;
        this.match(bitmarkParser.T__88);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImagebitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_imagebit;
    return this;
}

ImagebitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImagebitContext.prototype.constructor = ImagebitContext;

ImagebitContext.prototype.op = function() {
    return this.getTypedRuleContext(OpContext,0);
};

ImagebitContext.prototype.image_format = function() {
    return this.getTypedRuleContext(Image_formatContext,0);
};

ImagebitContext.prototype.url = function() {
    return this.getTypedRuleContext(UrlContext,0);
};

ImagebitContext.prototype.cl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClContext);
    } else {
        return this.getTypedRuleContext(ClContext,i);
    }
};

ImagebitContext.prototype.resolution = function() {
    return this.getTypedRuleContext(ResolutionContext,0);
};

ImagebitContext.prototype.NL = function() {
    return this.getToken(bitmarkParser.NL, 0);
};

ImagebitContext.prototype.opa = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OpaContext);
    } else {
        return this.getTypedRuleContext(OpaContext,i);
    }
};

ImagebitContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ImagebitContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterImagebit(this);
	}
};

ImagebitContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitImagebit(this);
	}
};

ImagebitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitImagebit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ImagebitContext = ImagebitContext;

bitmarkParser.prototype.imagebit = function() {

    var localctx = new ImagebitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, bitmarkParser.RULE_imagebit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2221;
        this.op();
        this.state = 2222;
        this.image_format();
        this.state = 2224;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.T__93) {
            this.state = 2223;
            this.resolution();
        }

        this.state = 2226;
        this.match(bitmarkParser.T__31);
        this.state = 2227;
        this.url();
        this.state = 2228;
        this.cl();
        this.state = 2234;
        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
        if(la_===1) {
            this.state = 2229;
            this.match(bitmarkParser.NL);
            this.state = 2230;
            this.opa();
            this.state = 2231;
            this.match(bitmarkParser.T__89);
            this.state = 2232;
            this.cl();

        }
        this.state = 2241;
        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
        if(la_===1) {
            this.state = 2236;
            this.opa();
            this.state = 2237;
            this.match(bitmarkParser.T__90);
            this.state = 2238;
            this.words();
            this.state = 2239;
            this.cl();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AudiobitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_audiobit;
    return this;
}

AudiobitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AudiobitContext.prototype.constructor = AudiobitContext;

AudiobitContext.prototype.op = function() {
    return this.getTypedRuleContext(OpContext,0);
};

AudiobitContext.prototype.audio_format = function() {
    return this.getTypedRuleContext(Audio_formatContext,0);
};

AudiobitContext.prototype.url = function() {
    return this.getTypedRuleContext(UrlContext,0);
};

AudiobitContext.prototype.cl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClContext);
    } else {
        return this.getTypedRuleContext(ClContext,i);
    }
};

AudiobitContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

AudiobitContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

AudiobitContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAudiobit(this);
	}
};

AudiobitContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAudiobit(this);
	}
};

AudiobitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAudiobit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.AudiobitContext = AudiobitContext;

bitmarkParser.prototype.audiobit = function() {

    var localctx = new AudiobitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, bitmarkParser.RULE_audiobit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2243;
        this.op();
        this.state = 2244;
        this.audio_format();
        this.state = 2245;
        this.match(bitmarkParser.T__31);
        this.state = 2246;
        this.url();
        this.state = 2247;
        this.cl();
        this.state = 2253;
        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
        if(la_===1) {
            this.state = 2248;
            this.opa();
            this.state = 2249;
            this.match(bitmarkParser.T__90);
            this.state = 2250;
            this.words();
            this.state = 2251;
            this.cl();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VideobitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_videobit;
    return this;
}

VideobitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VideobitContext.prototype.constructor = VideobitContext;

VideobitContext.prototype.op = function() {
    return this.getTypedRuleContext(OpContext,0);
};

VideobitContext.prototype.video_format = function() {
    return this.getTypedRuleContext(Video_formatContext,0);
};

VideobitContext.prototype.url = function() {
    return this.getTypedRuleContext(UrlContext,0);
};

VideobitContext.prototype.cl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClContext);
    } else {
        return this.getTypedRuleContext(ClContext,i);
    }
};

VideobitContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

VideobitContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

VideobitContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterVideobit(this);
	}
};

VideobitContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitVideobit(this);
	}
};

VideobitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitVideobit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.VideobitContext = VideobitContext;

bitmarkParser.prototype.videobit = function() {

    var localctx = new VideobitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, bitmarkParser.RULE_videobit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2255;
        this.op();
        this.state = 2256;
        this.video_format();
        this.state = 2257;
        this.match(bitmarkParser.T__31);
        this.state = 2258;
        this.url();
        this.state = 2259;
        this.cl();
        this.state = 2265;
        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
        if(la_===1) {
            this.state = 2260;
            this.opa();
            this.state = 2261;
            this.match(bitmarkParser.T__90);
            this.state = 2262;
            this.words();
            this.state = 2263;
            this.cl();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArticlebitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_articlebit;
    return this;
}

ArticlebitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArticlebitContext.prototype.constructor = ArticlebitContext;

ArticlebitContext.prototype.op = function() {
    return this.getTypedRuleContext(OpContext,0);
};

ArticlebitContext.prototype.article_format = function() {
    return this.getTypedRuleContext(Article_formatContext,0);
};

ArticlebitContext.prototype.url = function() {
    return this.getTypedRuleContext(UrlContext,0);
};

ArticlebitContext.prototype.cl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClContext);
    } else {
        return this.getTypedRuleContext(ClContext,i);
    }
};

ArticlebitContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

ArticlebitContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ArticlebitContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterArticlebit(this);
	}
};

ArticlebitContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitArticlebit(this);
	}
};

ArticlebitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitArticlebit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ArticlebitContext = ArticlebitContext;

bitmarkParser.prototype.articlebit = function() {

    var localctx = new ArticlebitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, bitmarkParser.RULE_articlebit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2267;
        this.op();
        this.state = 2268;
        this.article_format();
        this.state = 2269;
        this.match(bitmarkParser.T__31);
        this.state = 2270;
        this.url();
        this.state = 2271;
        this.cl();
        this.state = 2277;
        var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
        if(la_===1) {
            this.state = 2272;
            this.opa();
            this.state = 2273;
            this.match(bitmarkParser.T__90);
            this.state = 2274;
            this.words();
            this.state = 2275;
            this.cl();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DocumentbitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_documentbit;
    return this;
}

DocumentbitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DocumentbitContext.prototype.constructor = DocumentbitContext;

DocumentbitContext.prototype.op = function() {
    return this.getTypedRuleContext(OpContext,0);
};

DocumentbitContext.prototype.document_format = function() {
    return this.getTypedRuleContext(Document_formatContext,0);
};

DocumentbitContext.prototype.url = function() {
    return this.getTypedRuleContext(UrlContext,0);
};

DocumentbitContext.prototype.cl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClContext);
    } else {
        return this.getTypedRuleContext(ClContext,i);
    }
};

DocumentbitContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

DocumentbitContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

DocumentbitContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterDocumentbit(this);
	}
};

DocumentbitContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitDocumentbit(this);
	}
};

DocumentbitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitDocumentbit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.DocumentbitContext = DocumentbitContext;

bitmarkParser.prototype.documentbit = function() {

    var localctx = new DocumentbitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, bitmarkParser.RULE_documentbit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2279;
        this.op();
        this.state = 2280;
        this.document_format();
        this.state = 2281;
        this.match(bitmarkParser.T__31);
        this.state = 2282;
        this.url();
        this.state = 2283;
        this.cl();
        this.state = 2289;
        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
        if(la_===1) {
            this.state = 2284;
            this.opa();
            this.state = 2285;
            this.match(bitmarkParser.T__90);
            this.state = 2286;
            this.words();
            this.state = 2287;
            this.cl();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AppbitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_appbit;
    return this;
}

AppbitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AppbitContext.prototype.constructor = AppbitContext;

AppbitContext.prototype.op = function() {
    return this.getTypedRuleContext(OpContext,0);
};

AppbitContext.prototype.app_format = function() {
    return this.getTypedRuleContext(App_formatContext,0);
};

AppbitContext.prototype.cl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClContext);
    } else {
        return this.getTypedRuleContext(ClContext,i);
    }
};

AppbitContext.prototype.url = function() {
    return this.getTypedRuleContext(UrlContext,0);
};

AppbitContext.prototype.telephone = function() {
    return this.getTypedRuleContext(TelephoneContext,0);
};

AppbitContext.prototype.opa = function() {
    return this.getTypedRuleContext(OpaContext,0);
};

AppbitContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

AppbitContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAppbit(this);
	}
};

AppbitContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAppbit(this);
	}
};

AppbitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAppbit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.AppbitContext = AppbitContext;

bitmarkParser.prototype.appbit = function() {

    var localctx = new AppbitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, bitmarkParser.RULE_appbit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2291;
        this.op();
        this.state = 2292;
        this.app_format();
        this.state = 2293;
        this.match(bitmarkParser.T__31);
        this.state = 2296;
        switch(this._input.LA(1)) {
        case bitmarkParser.T__94:
        case bitmarkParser.T__95:
            this.state = 2294;
            this.url();
            break;
        case bitmarkParser.T__91:
            this.state = 2295;
            this.telephone();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2298;
        this.cl();
        this.state = 2304;
        var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
        if(la_===1) {
            this.state = 2299;
            this.opa();
            this.state = 2300;
            this.match(bitmarkParser.T__90);
            this.state = 2301;
            this.words();
            this.state = 2302;
            this.cl();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TelephoneContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_telephone;
    return this;
}

TelephoneContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TelephoneContext.prototype.constructor = TelephoneContext;

TelephoneContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

TelephoneContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterTelephone(this);
	}
};

TelephoneContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitTelephone(this);
	}
};

TelephoneContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitTelephone(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.TelephoneContext = TelephoneContext;

bitmarkParser.prototype.telephone = function() {

    var localctx = new TelephoneContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, bitmarkParser.RULE_telephone);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2306;
        this.match(bitmarkParser.T__91);
        this.state = 2307;
        this.match(bitmarkParser.T__92);
        this.state = 2308;
        this.numeric();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResolutionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_resolution;
    return this;
}

ResolutionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResolutionContext.prototype.constructor = ResolutionContext;

ResolutionContext.prototype.NUMERIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(bitmarkParser.NUMERIC);
    } else {
        return this.getToken(bitmarkParser.NUMERIC, i);
    }
};


ResolutionContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterResolution(this);
	}
};

ResolutionContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitResolution(this);
	}
};

ResolutionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitResolution(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ResolutionContext = ResolutionContext;

bitmarkParser.prototype.resolution = function() {

    var localctx = new ResolutionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, bitmarkParser.RULE_resolution);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2310;
        this.match(bitmarkParser.T__93);
        this.state = 2312; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2311;
            this.match(bitmarkParser.NUMERIC);
            this.state = 2314; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===bitmarkParser.NUMERIC);
        this.state = 2316;
        this.match(bitmarkParser.T__31);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UrlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_url;
    return this;
}

UrlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UrlContext.prototype.constructor = UrlContext;

UrlContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

UrlContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterUrl(this);
	}
};

UrlContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitUrl(this);
	}
};

UrlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitUrl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.UrlContext = UrlContext;

bitmarkParser.prototype.url = function() {

    var localctx = new UrlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, bitmarkParser.RULE_url);
    try {
        this.state = 2322;
        switch(this._input.LA(1)) {
        case bitmarkParser.T__94:
            this.enterOuterAlt(localctx, 1);
            this.state = 2318;
            this.match(bitmarkParser.T__94);
            this.state = 2319;
            this.words();
            break;
        case bitmarkParser.T__95:
            this.enterOuterAlt(localctx, 2);
            this.state = 2320;
            this.match(bitmarkParser.T__95);
            this.state = 2321;
            this.words();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LinesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_lines;
    return this;
}

LinesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LinesContext.prototype.constructor = LinesContext;

LinesContext.prototype.s_and_w = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(S_and_wContext);
    } else {
        return this.getTypedRuleContext(S_and_wContext,i);
    }
};

LinesContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

LinesContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterLines(this);
	}
};

LinesContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitLines(this);
	}
};

LinesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitLines(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.LinesContext = LinesContext;

bitmarkParser.prototype.lines = function() {

    var localctx = new LinesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, bitmarkParser.RULE_lines);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2328; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2324;
        		this.s_and_w();
        		this.state = 2326;
        		var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
        		if(la_===1) {
        		    this.state = 2325;
        		    this.nl();

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2330; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,289, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function S_and_wContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_s_and_w;
    return this;
}

S_and_wContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
S_and_wContext.prototype.constructor = S_and_wContext;

S_and_wContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

S_and_wContext.prototype.sp = function() {
    return this.getTypedRuleContext(SpContext,0);
};

S_and_wContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

S_and_wContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

S_and_wContext.prototype.bracket_escaped = function() {
    return this.getTypedRuleContext(Bracket_escapedContext,0);
};

S_and_wContext.prototype.SP = function() {
    return this.getToken(bitmarkParser.SP, 0);
};

S_and_wContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterS_and_w(this);
	}
};

S_and_wContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitS_and_w(this);
	}
};

S_and_wContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitS_and_w(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.S_and_wContext = S_and_wContext;

bitmarkParser.prototype.s_and_w = function() {

    var localctx = new S_and_wContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, bitmarkParser.RULE_s_and_w);
    try {
        this.state = 2354;
        switch(this._input.LA(1)) {
        case bitmarkParser.STRING:
            this.enterOuterAlt(localctx, 1);
            this.state = 2332;
            this.string();
            this.state = 2336;
            var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
            if(la_===1) {
                this.state = 2333;
                this.sp();
                this.state = 2334;
                this.numeric();

            }
            break;
        case bitmarkParser.SENTENCE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2338;
            this.words();
            this.state = 2342;
            var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
            if(la_===1) {
                this.state = 2339;
                this.sp();
                this.state = 2340;
                this.numeric();

            }
            break;
        case bitmarkParser.NUMERIC:
            this.enterOuterAlt(localctx, 3);
            this.state = 2344;
            this.numeric();
            break;
        case bitmarkParser.OPESC:
            this.enterOuterAlt(localctx, 4);
            this.state = 2345;
            this.bracket_escaped();
            break;
        case bitmarkParser.T__4:
            this.enterOuterAlt(localctx, 5);
            this.state = 2346;
            this.match(bitmarkParser.T__4);
            this.state = 2348;
            var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
            if(la_===1) {
                this.state = 2347;
                this.match(bitmarkParser.SP);

            }
            break;
        case bitmarkParser.T__96:
            this.enterOuterAlt(localctx, 6);
            this.state = 2350;
            this.match(bitmarkParser.T__96);
            this.state = 2352;
            var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
            if(la_===1) {
                this.state = 2351;
                this.match(bitmarkParser.SP);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnchorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_anchor;
    return this;
}

AnchorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnchorContext.prototype.constructor = AnchorContext;

AnchorContext.prototype.opdangle = function() {
    return this.getTypedRuleContext(OpdangleContext,0);
};

AnchorContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

AnchorContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

AnchorContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAnchor(this);
	}
};

AnchorContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAnchor(this);
	}
};

AnchorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAnchor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.AnchorContext = AnchorContext;

bitmarkParser.prototype.anchor = function() {

    var localctx = new AnchorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, bitmarkParser.RULE_anchor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2356;
        this.opdangle();
        this.state = 2358;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0)) {
            this.state = 2357;
            this.s_and_w();
        }

        this.state = 2360;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_alias;
    return this;
}

AliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasContext.prototype.constructor = AliasContext;

AliasContext.prototype.oprangle = function() {
    return this.getTypedRuleContext(OprangleContext,0);
};

AliasContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

AliasContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

AliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAlias(this);
	}
};

AliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAlias(this);
	}
};

AliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.AliasContext = AliasContext;

bitmarkParser.prototype.alias = function() {

    var localctx = new AliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, bitmarkParser.RULE_alias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2362;
        this.oprangle();
        this.state = 2364;
        _la = this._input.LA(1);
        if(_la===bitmarkParser.T__4 || _la===bitmarkParser.T__96 || _la===bitmarkParser.OPESC || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (bitmarkParser.NUMERIC - 134)) | (1 << (bitmarkParser.STRING - 134)) | (1 << (bitmarkParser.SENTENCE - 134)))) !== 0)) {
            this.state = 2363;
            this.s_and_w();
        }

        this.state = 2366;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_item;
    return this;
}

ItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ItemContext.prototype.constructor = ItemContext;

ItemContext.prototype.opc = function() {
    return this.getTypedRuleContext(OpcContext,0);
};

ItemContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

ItemContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

ItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterItem(this);
	}
};

ItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitItem(this);
	}
};

ItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ItemContext = ItemContext;

bitmarkParser.prototype.item = function() {

    var localctx = new ItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, bitmarkParser.RULE_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2368;
        this.opc();
        this.state = 2369;
        this.s_and_w();
        this.state = 2370;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bracket_escapedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_bracket_escaped;
    return this;
}

Bracket_escapedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bracket_escapedContext.prototype.constructor = Bracket_escapedContext;

Bracket_escapedContext.prototype.opescape = function() {
    return this.getTypedRuleContext(OpescapeContext,0);
};

Bracket_escapedContext.prototype.s_and_w = function() {
    return this.getTypedRuleContext(S_and_wContext,0);
};

Bracket_escapedContext.prototype.cl = function() {
    return this.getTypedRuleContext(ClContext,0);
};

Bracket_escapedContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterBracket_escaped(this);
	}
};

Bracket_escapedContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitBracket_escaped(this);
	}
};

Bracket_escapedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitBracket_escaped(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Bracket_escapedContext = Bracket_escapedContext;

bitmarkParser.prototype.bracket_escaped = function() {

    var localctx = new Bracket_escapedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, bitmarkParser.RULE_bracket_escaped);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2372;
        this.opescape();
        this.state = 2373;
        this.s_and_w();
        this.state = 2374;
        this.cl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpbulContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opbul;
    return this;
}

OpbulContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpbulContext.prototype.constructor = OpbulContext;

OpbulContext.prototype.OPBUL = function() {
    return this.getToken(bitmarkParser.OPBUL, 0);
};

OpbulContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpbul(this);
	}
};

OpbulContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpbul(this);
	}
};

OpbulContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpbul(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpbulContext = OpbulContext;

bitmarkParser.prototype.opbul = function() {

    var localctx = new OpbulContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, bitmarkParser.RULE_opbul);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2376;
        this.match(bitmarkParser.OPBUL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpescapeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opescape;
    return this;
}

OpescapeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpescapeContext.prototype.constructor = OpescapeContext;

OpescapeContext.prototype.OPESC = function() {
    return this.getToken(bitmarkParser.OPESC, 0);
};

OpescapeContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpescape(this);
	}
};

OpescapeContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpescape(this);
	}
};

OpescapeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpescape(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpescapeContext = OpescapeContext;

bitmarkParser.prototype.opescape = function() {

    var localctx = new OpescapeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, bitmarkParser.RULE_opescape);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2378;
        this.match(bitmarkParser.OPESC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OprangleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_oprangle;
    return this;
}

OprangleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OprangleContext.prototype.constructor = OprangleContext;

OprangleContext.prototype.OPRANGLE = function() {
    return this.getToken(bitmarkParser.OPRANGLE, 0);
};

OprangleContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOprangle(this);
	}
};

OprangleContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOprangle(this);
	}
};

OprangleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOprangle(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OprangleContext = OprangleContext;

bitmarkParser.prototype.oprangle = function() {

    var localctx = new OprangleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, bitmarkParser.RULE_oprangle);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2380;
        this.match(bitmarkParser.OPRANGLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpdangleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opdangle;
    return this;
}

OpdangleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpdangleContext.prototype.constructor = OpdangleContext;

OpdangleContext.prototype.OPDANGLE = function() {
    return this.getToken(bitmarkParser.OPDANGLE, 0);
};

OpdangleContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpdangle(this);
	}
};

OpdangleContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpdangle(this);
	}
};

OpdangleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpdangle(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpdangleContext = OpdangleContext;

bitmarkParser.prototype.opdangle = function() {

    var localctx = new OpdangleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, bitmarkParser.RULE_opdangle);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2382;
        this.match(bitmarkParser.OPDANGLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opd;
    return this;
}

OpdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpdContext.prototype.constructor = OpdContext;

OpdContext.prototype.OPD = function() {
    return this.getToken(bitmarkParser.OPD, 0);
};

OpdContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpd(this);
	}
};

OpdContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpd(this);
	}
};

OpdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpdContext = OpdContext;

bitmarkParser.prototype.opd = function() {

    var localctx = new OpdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, bitmarkParser.RULE_opd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2384;
        this.match(bitmarkParser.OPD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpuContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opu;
    return this;
}

OpuContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpuContext.prototype.constructor = OpuContext;

OpuContext.prototype.OPU = function() {
    return this.getToken(bitmarkParser.OPU, 0);
};

OpuContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpu(this);
	}
};

OpuContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpu(this);
	}
};

OpuContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpu(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpuContext = OpuContext;

bitmarkParser.prototype.opu = function() {

    var localctx = new OpuContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, bitmarkParser.RULE_opu);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2386;
        this.match(bitmarkParser.OPU);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpbContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opb;
    return this;
}

OpbContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpbContext.prototype.constructor = OpbContext;

OpbContext.prototype.OPB = function() {
    return this.getToken(bitmarkParser.OPB, 0);
};

OpbContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpb(this);
	}
};

OpbContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpb(this);
	}
};

OpbContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpb(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpbContext = OpbContext;

bitmarkParser.prototype.opb = function() {

    var localctx = new OpbContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, bitmarkParser.RULE_opb);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2388;
        this.match(bitmarkParser.OPB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opq;
    return this;
}

OpqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpqContext.prototype.constructor = OpqContext;

OpqContext.prototype.OPQ = function() {
    return this.getToken(bitmarkParser.OPQ, 0);
};

OpqContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpq(this);
	}
};

OpqContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpq(this);
	}
};

OpqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpqContext = OpqContext;

bitmarkParser.prototype.opq = function() {

    var localctx = new OpqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, bitmarkParser.RULE_opq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2390;
        this.match(bitmarkParser.OPQ);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opa;
    return this;
}

OpaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpaContext.prototype.constructor = OpaContext;

OpaContext.prototype.OPA = function() {
    return this.getToken(bitmarkParser.OPA, 0);
};

OpaContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpa(this);
	}
};

OpaContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpa(this);
	}
};

OpaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpa(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpaContext = OpaContext;

bitmarkParser.prototype.opa = function() {

    var localctx = new OpaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, bitmarkParser.RULE_opa);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2392;
        this.match(bitmarkParser.OPA);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OppContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opp;
    return this;
}

OppContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OppContext.prototype.constructor = OppContext;

OppContext.prototype.OPP = function() {
    return this.getToken(bitmarkParser.OPP, 0);
};

OppContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpp(this);
	}
};

OppContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpp(this);
	}
};

OppContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OppContext = OppContext;

bitmarkParser.prototype.opp = function() {

    var localctx = new OppContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, bitmarkParser.RULE_opp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2394;
        this.match(bitmarkParser.OPP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpmContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opm;
    return this;
}

OpmContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpmContext.prototype.constructor = OpmContext;

OpmContext.prototype.OPM = function() {
    return this.getToken(bitmarkParser.OPM, 0);
};

OpmContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpm(this);
	}
};

OpmContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpm(this);
	}
};

OpmContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpmContext = OpmContext;

bitmarkParser.prototype.opm = function() {

    var localctx = new OpmContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, bitmarkParser.RULE_opm);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2396;
        this.match(bitmarkParser.OPM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_ops;
    return this;
}

OpsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpsContext.prototype.constructor = OpsContext;

OpsContext.prototype.OPS = function() {
    return this.getToken(bitmarkParser.OPS, 0);
};

OpsContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOps(this);
	}
};

OpsContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOps(this);
	}
};

OpsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOps(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpsContext = OpsContext;

bitmarkParser.prototype.ops = function() {

    var localctx = new OpsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, bitmarkParser.RULE_ops);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2398;
        this.match(bitmarkParser.OPS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opr;
    return this;
}

OprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OprContext.prototype.constructor = OprContext;

OprContext.prototype.OPR = function() {
    return this.getToken(bitmarkParser.OPR, 0);
};

OprContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpr(this);
	}
};

OprContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpr(this);
	}
};

OprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OprContext = OprContext;

bitmarkParser.prototype.opr = function() {

    var localctx = new OprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, bitmarkParser.RULE_opr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2400;
        this.match(bitmarkParser.OPR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_opc;
    return this;
}

OpcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpcContext.prototype.constructor = OpcContext;

OpcContext.prototype.OPC = function() {
    return this.getToken(bitmarkParser.OPC, 0);
};

OpcContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOpc(this);
	}
};

OpcContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOpc(this);
	}
};

OpcContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOpc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpcContext = OpcContext;

bitmarkParser.prototype.opc = function() {

    var localctx = new OpcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, bitmarkParser.RULE_opc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2402;
        this.match(bitmarkParser.OPC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_op;
    return this;
}

OpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpContext.prototype.constructor = OpContext;

OpContext.prototype.OP = function() {
    return this.getToken(bitmarkParser.OP, 0);
};

OpContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOp(this);
	}
};

OpContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOp(this);
	}
};

OpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OpContext = OpContext;

bitmarkParser.prototype.op = function() {

    var localctx = new OpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, bitmarkParser.RULE_op);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2404;
        this.match(bitmarkParser.OP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_cl;
    return this;
}

ClContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClContext.prototype.constructor = ClContext;

ClContext.prototype.CL = function() {
    return this.getToken(bitmarkParser.CL, 0);
};

ClContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterCl(this);
	}
};

ClContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitCl(this);
	}
};

ClContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitCl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ClContext = ClContext;

bitmarkParser.prototype.cl = function() {

    var localctx = new ClContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, bitmarkParser.RULE_cl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2406;
        this.match(bitmarkParser.CL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClnspContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_clnsp;
    return this;
}

ClnspContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClnspContext.prototype.constructor = ClnspContext;

ClnspContext.prototype.CL = function() {
    return this.getToken(bitmarkParser.CL, 0);
};

ClnspContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterClnsp(this);
	}
};

ClnspContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitClnsp(this);
	}
};

ClnspContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitClnsp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.ClnspContext = ClnspContext;

bitmarkParser.prototype.clnsp = function() {

    var localctx = new ClnspContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, bitmarkParser.RULE_clnsp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2408;
        this.match(bitmarkParser.CL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_nl;
    return this;
}

NlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NlContext.prototype.constructor = NlContext;

NlContext.prototype.NL = function() {
    return this.getToken(bitmarkParser.NL, 0);
};

NlContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterNl(this);
	}
};

NlContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitNl(this);
	}
};

NlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitNl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.NlContext = NlContext;

bitmarkParser.prototype.nl = function() {

    var localctx = new NlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, bitmarkParser.RULE_nl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2410;
        this.match(bitmarkParser.NL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_or;
    return this;
}

OrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrContext.prototype.constructor = OrContext;

OrContext.prototype.OR = function() {
    return this.getToken(bitmarkParser.OR, 0);
};

OrContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterOr(this);
	}
};

OrContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitOr(this);
	}
};

OrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitOr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.OrContext = OrContext;

bitmarkParser.prototype.or = function() {

    var localctx = new OrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, bitmarkParser.RULE_or);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2412;
        this.match(bitmarkParser.OR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_eq;
    return this;
}

EqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqContext.prototype.constructor = EqContext;

EqContext.prototype.EQ = function() {
    return this.getToken(bitmarkParser.EQ, 0);
};

EqContext.prototype.EQ2 = function() {
    return this.getToken(bitmarkParser.EQ2, 0);
};

EqContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterEq(this);
	}
};

EqContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitEq(this);
	}
};

EqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitEq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.EqContext = EqContext;

bitmarkParser.prototype.eq = function() {

    var localctx = new EqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, bitmarkParser.RULE_eq);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2414;
        _la = this._input.LA(1);
        if(!(_la===bitmarkParser.EQ || _la===bitmarkParser.EQ2)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HsplContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_hspl;
    return this;
}

HsplContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HsplContext.prototype.constructor = HsplContext;

HsplContext.prototype.HSPL = function() {
    return this.getToken(bitmarkParser.HSPL, 0);
};

HsplContext.prototype.HSPL2 = function() {
    return this.getToken(bitmarkParser.HSPL2, 0);
};

HsplContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterHspl(this);
	}
};

HsplContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitHspl(this);
	}
};

HsplContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitHspl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.HsplContext = HsplContext;

bitmarkParser.prototype.hspl = function() {

    var localctx = new HsplContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, bitmarkParser.RULE_hspl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2416;
        _la = this._input.LA(1);
        if(!(_la===bitmarkParser.HSPL || _la===bitmarkParser.HSPL2)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SsplContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_sspl;
    return this;
}

SsplContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SsplContext.prototype.constructor = SsplContext;

SsplContext.prototype.SSPL = function() {
    return this.getToken(bitmarkParser.SSPL, 0);
};

SsplContext.prototype.SSPL2 = function() {
    return this.getToken(bitmarkParser.SSPL2, 0);
};

SsplContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSspl(this);
	}
};

SsplContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSspl(this);
	}
};

SsplContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSspl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.SsplContext = SsplContext;

bitmarkParser.prototype.sspl = function() {

    var localctx = new SsplContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, bitmarkParser.RULE_sspl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2418;
        _la = this._input.LA(1);
        if(!(_la===bitmarkParser.SSPL || _la===bitmarkParser.SSPL2)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cloze_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_cloze_;
    return this;
}

Cloze_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cloze_Context.prototype.constructor = Cloze_Context;

Cloze_Context.prototype.CLOZE = function() {
    return this.getToken(bitmarkParser.CLOZE, 0);
};

Cloze_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterCloze_(this);
	}
};

Cloze_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitCloze_(this);
	}
};

Cloze_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitCloze_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Cloze_Context = Cloze_Context;

bitmarkParser.prototype.cloze_ = function() {

    var localctx = new Cloze_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 300, bitmarkParser.RULE_cloze_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2420;
        this.match(bitmarkParser.CLOZE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Titlestar_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_titlestar_;
    return this;
}

Titlestar_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Titlestar_Context.prototype.constructor = Titlestar_Context;

Titlestar_Context.prototype.EMP1 = function() {
    return this.getToken(bitmarkParser.EMP1, 0);
};

Titlestar_Context.prototype.EMP2 = function() {
    return this.getToken(bitmarkParser.EMP2, 0);
};

Titlestar_Context.prototype.EMP3 = function() {
    return this.getToken(bitmarkParser.EMP3, 0);
};

Titlestar_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterTitlestar_(this);
	}
};

Titlestar_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitTitlestar_(this);
	}
};

Titlestar_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitTitlestar_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Titlestar_Context = Titlestar_Context;

bitmarkParser.prototype.titlestar_ = function() {

    var localctx = new Titlestar_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 302, bitmarkParser.RULE_titlestar_);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2422;
        _la = this._input.LA(1);
        if(!(((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (bitmarkParser.EMP1 - 123)) | (1 << (bitmarkParser.EMP2 - 123)) | (1 << (bitmarkParser.EMP3 - 123)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ins_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_ins_;
    return this;
}

Ins_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ins_Context.prototype.constructor = Ins_Context;

Ins_Context.prototype.INS = function() {
    return this.getToken(bitmarkParser.INS, 0);
};

Ins_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterIns_(this);
	}
};

Ins_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitIns_(this);
	}
};

Ins_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitIns_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Ins_Context = Ins_Context;

bitmarkParser.prototype.ins_ = function() {

    var localctx = new Ins_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 304, bitmarkParser.RULE_ins_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2424;
        this.match(bitmarkParser.INS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Del_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_del_;
    return this;
}

Del_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Del_Context.prototype.constructor = Del_Context;

Del_Context.prototype.DEL = function() {
    return this.getToken(bitmarkParser.DEL, 0);
};

Del_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterDel_(this);
	}
};

Del_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitDel_(this);
	}
};

Del_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitDel_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Del_Context = Del_Context;

bitmarkParser.prototype.del_ = function() {

    var localctx = new Del_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 306, bitmarkParser.RULE_del_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2426;
        this.match(bitmarkParser.DEL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Note_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_note_;
    return this;
}

Note_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Note_Context.prototype.constructor = Note_Context;

Note_Context.prototype.NOTE = function() {
    return this.getToken(bitmarkParser.NOTE, 0);
};

Note_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterNote_(this);
	}
};

Note_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitNote_(this);
	}
};

Note_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitNote_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Note_Context = Note_Context;

bitmarkParser.prototype.note_ = function() {

    var localctx = new Note_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 308, bitmarkParser.RULE_note_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2428;
        this.match(bitmarkParser.NOTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Remark_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_remark_;
    return this;
}

Remark_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Remark_Context.prototype.constructor = Remark_Context;

Remark_Context.prototype.REM = function() {
    return this.getToken(bitmarkParser.REM, 0);
};

Remark_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterRemark_(this);
	}
};

Remark_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitRemark_(this);
	}
};

Remark_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitRemark_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Remark_Context = Remark_Context;

bitmarkParser.prototype.remark_ = function() {

    var localctx = new Remark_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 310, bitmarkParser.RULE_remark_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2430;
        this.match(bitmarkParser.REM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Help_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_help_;
    return this;
}

Help_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Help_Context.prototype.constructor = Help_Context;

Help_Context.prototype.HELP = function() {
    return this.getToken(bitmarkParser.HELP, 0);
};

Help_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterHelp_(this);
	}
};

Help_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitHelp_(this);
	}
};

Help_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitHelp_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Help_Context = Help_Context;

bitmarkParser.prototype.help_ = function() {

    var localctx = new Help_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 312, bitmarkParser.RULE_help_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2432;
        this.match(bitmarkParser.HELP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Highlight_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_highlight_;
    return this;
}

Highlight_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Highlight_Context.prototype.constructor = Highlight_Context;

Highlight_Context.prototype.HIGH = function() {
    return this.getToken(bitmarkParser.HIGH, 0);
};

Highlight_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterHighlight_(this);
	}
};

Highlight_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitHighlight_(this);
	}
};

Highlight_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitHighlight_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Highlight_Context = Highlight_Context;

bitmarkParser.prototype.highlight_ = function() {

    var localctx = new Highlight_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 314, bitmarkParser.RULE_highlight_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2434;
        this.match(bitmarkParser.HIGH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Annotate_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_annotate_;
    return this;
}

Annotate_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Annotate_Context.prototype.constructor = Annotate_Context;

Annotate_Context.prototype.ANNO = function() {
    return this.getToken(bitmarkParser.ANNO, 0);
};

Annotate_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAnnotate_(this);
	}
};

Annotate_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAnnotate_(this);
	}
};

Annotate_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAnnotate_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Annotate_Context = Annotate_Context;

bitmarkParser.prototype.annotate_ = function() {

    var localctx = new Annotate_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 316, bitmarkParser.RULE_annotate_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2436;
        this.match(bitmarkParser.ANNO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Annotate_image_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_annotate_image_;
    return this;
}

Annotate_image_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Annotate_image_Context.prototype.constructor = Annotate_image_Context;

Annotate_image_Context.prototype.ANNO_IM = function() {
    return this.getToken(bitmarkParser.ANNO_IM, 0);
};

Annotate_image_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterAnnotate_image_(this);
	}
};

Annotate_image_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitAnnotate_image_(this);
	}
};

Annotate_image_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitAnnotate_image_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Annotate_image_Context = Annotate_image_Context;

bitmarkParser.prototype.annotate_image_ = function() {

    var localctx = new Annotate_image_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 318, bitmarkParser.RULE_annotate_image_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2438;
        this.match(bitmarkParser.ANNO_IM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Listline_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_listline_;
    return this;
}

Listline_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Listline_Context.prototype.constructor = Listline_Context;

Listline_Context.prototype.LIST_LINE = function() {
    return this.getToken(bitmarkParser.LIST_LINE, 0);
};

Listline_Context.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterListline_(this);
	}
};

Listline_Context.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitListline_(this);
	}
};

Listline_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitListline_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.Listline_Context = Listline_Context;

bitmarkParser.prototype.listline_ = function() {

    var localctx = new Listline_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 320, bitmarkParser.RULE_listline_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2440;
        this.match(bitmarkParser.LIST_LINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_numeric;
    return this;
}

NumericContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericContext.prototype.constructor = NumericContext;

NumericContext.prototype.NUMERIC = function() {
    return this.getToken(bitmarkParser.NUMERIC, 0);
};

NumericContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterNumeric(this);
	}
};

NumericContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitNumeric(this);
	}
};

NumericContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitNumeric(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.NumericContext = NumericContext;

bitmarkParser.prototype.numeric = function() {

    var localctx = new NumericContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, bitmarkParser.RULE_numeric);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2442;
        this.match(bitmarkParser.NUMERIC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.STRING = function() {
    return this.getToken(bitmarkParser.STRING, 0);
};

StringContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterString(this);
	}
};

StringContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitString(this);
	}
};

StringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitString(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.StringContext = StringContext;

bitmarkParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, bitmarkParser.RULE_string);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2444;
        this.match(bitmarkParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmojiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_emoji;
    return this;
}

EmojiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmojiContext.prototype.constructor = EmojiContext;

EmojiContext.prototype.EMOJI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(bitmarkParser.EMOJI);
    } else {
        return this.getToken(bitmarkParser.EMOJI, i);
    }
};


EmojiContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterEmoji(this);
	}
};

EmojiContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitEmoji(this);
	}
};

EmojiContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitEmoji(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.EmojiContext = EmojiContext;

bitmarkParser.prototype.emoji = function() {

    var localctx = new EmojiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, bitmarkParser.RULE_emoji);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2447; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2446;
        		this.match(bitmarkParser.EMOJI);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2449; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,297, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_words;
    return this;
}

WordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WordsContext.prototype.constructor = WordsContext;

WordsContext.prototype.SENTENCE = function() {
    return this.getToken(bitmarkParser.SENTENCE, 0);
};

WordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterWords(this);
	}
};

WordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitWords(this);
	}
};

WordsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitWords(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.WordsContext = WordsContext;

bitmarkParser.prototype.words = function() {

    var localctx = new WordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, bitmarkParser.RULE_words);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2451;
        this.match(bitmarkParser.SENTENCE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = bitmarkParser.RULE_sp;
    return this;
}

SpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpContext.prototype.constructor = SpContext;

SpContext.prototype.SP = function() {
    return this.getToken(bitmarkParser.SP, 0);
};

SpContext.prototype.enterRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.enterSp(this);
	}
};

SpContext.prototype.exitRule = function(listener) {
    if(listener instanceof bitmarkListener ) {
        listener.exitSp(this);
	}
};

SpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof bitmarkVisitor ) {
        return visitor.visitSp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




bitmarkParser.SpContext = SpContext;

bitmarkParser.prototype.sp = function() {

    var localctx = new SpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, bitmarkParser.RULE_sp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2453;
        this.match(bitmarkParser.SP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.bitmarkParser = bitmarkParser;
