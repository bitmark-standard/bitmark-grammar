// Generated from ./typescript//bitmarkParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { bitmarkParserListener } from "./bitmarkParserListener";

export class bitmarkParser extends Parser {
	public static readonly OPDOT = 1;
	public static readonly S = 2;
	public static readonly BitBook = 3;
	public static readonly BitChapter = 4;
	public static readonly BitToc = 5;
	public static readonly BitSummary = 6;
	public static readonly BitIntlink = 7;
	public static readonly BitIntRef = 8;
	public static readonly BitAlias = 9;
	public static readonly BitGroups = 10;
	public static readonly BitGroupt = 11;
	public static readonly BitPlaceholder = 12;
	public static readonly BitStatement = 13;
	public static readonly BitDetails = 14;
	public static readonly BitSampleSolution = 15;
	public static readonly BitTakeAudio = 16;
	public static readonly CLOZE = 17;
	public static readonly MATCH = 18;
	public static readonly BitArticle = 19;
	public static readonly BitPage = 20;
	public static readonly BitEssay = 21;
	public static readonly BitMessage = 22;
	public static readonly BitCorrection = 23;
	public static readonly BitMark = 24;
	public static readonly BitDocup = 25;
	public static readonly BitTakepic = 26;
	public static readonly BitRecaud = 27;
	public static readonly BitPrepnote = 28;
	public static readonly BitAssign = 29;
	public static readonly BitBotint = 30;
	public static readonly BitSelfassess = 31;
	public static readonly BitRating = 32;
	public static readonly BitSurvey = 33;
	public static readonly BitSurvey1 = 34;
	public static readonly BitSurveyanon = 35;
	public static readonly BitSurveyanon1 = 36;
	public static readonly BitNote = 37;
	public static readonly BitInfo = 38;
	public static readonly BitWarning = 39;
	public static readonly BitRemark = 40;
	public static readonly BitHint = 41;
	public static readonly BitHelp = 42;
	public static readonly BitDanger = 43;
	public static readonly BitBug = 44;
	public static readonly BitSidenote = 45;
	public static readonly BitStickynote = 46;
	public static readonly BitQuote = 47;
	public static readonly BitFootnote = 48;
	public static readonly BitExample = 49;
	public static readonly BitButtonCopytext = 50;
	public static readonly BitWbtContinue = 51;
	public static readonly BitLearningPathDetails = 52;
	public static readonly BitLearningPathLti = 53;
	public static readonly BitLearningPathStep = 54;
	public static readonly BitLearningPathBook = 55;
	public static readonly BitLearningPathSign = 56;
	public static readonly BitLearningPathVideoCall = 57;
	public static readonly BitLearningPathLearningGoal = 58;
	public static readonly BitLearningPathClosing = 59;
	public static readonly BitLearningPathFeedback = 60;
	public static readonly BitLearningPathBotTraining = 61;
	public static readonly BitLearningPathExternalLink = 62;
	public static readonly BitLearningPathClassroomTraining = 63;
	public static readonly BitLearningPathClassroomEvent = 64;
	public static readonly BitBotActionSend = 65;
	public static readonly BitBotActionAnnounce = 66;
	public static readonly BitBotActionSave = 67;
	public static readonly BitBotActionRemind = 68;
	public static readonly BitVendorPadletEmbed = 69;
	public static readonly BitScorm = 70;
	public static readonly BitImage = 71;
	public static readonly BitImageLink = 72;
	public static readonly BitImageZoom = 73;
	public static readonly BitImagePrototype = 74;
	public static readonly BitImageSuperWide = 75;
	public static readonly BitAudio = 76;
	public static readonly BitAudioLink = 77;
	public static readonly BitAudioEmbed = 78;
	public static readonly BitVideo = 79;
	public static readonly BitVideoLink = 80;
	public static readonly BitVideoEmbed = 81;
	public static readonly BitVideoPortrait = 82;
	public static readonly BitVideoLandscape = 83;
	public static readonly BitStillImageFilm = 84;
	public static readonly BitStillImageFilmLink = 85;
	public static readonly BitStillImageFilmEmbed = 86;
	public static readonly BitWebsiteLink = 87;
	public static readonly BitDocument = 88;
	public static readonly BitDocumentLink = 89;
	public static readonly BitDocumentEmbed = 90;
	public static readonly BitDocumentDownload = 91;
	public static readonly BitAppLink = 92;
	public static readonly BitEditorial = 93;
	public static readonly BitBookFrontispiece = 94;
	public static readonly BitBookTitle = 95;
	public static readonly BitBookCopyright = 96;
	public static readonly BitBookDedication = 97;
	public static readonly BitBookForword = 98;
	public static readonly BitBookPreface = 99;
	public static readonly BitBookPrologue = 100;
	public static readonly BitBookEpilogue = 101;
	public static readonly BitBookIntroduction = 102;
	public static readonly BitBookIncitingIncident = 103;
	public static readonly BitBookConclusion = 104;
	public static readonly BitBookAfterword = 105;
	public static readonly BitBookPostscript = 106;
	public static readonly BitBookappendix = 107;
	public static readonly BitBookAddendum = 108;
	public static readonly BitBookAcknowledgments = 109;
	public static readonly BitBookListOfContributors = 110;
	public static readonly BitBookBibliography = 111;
	public static readonly BitBookReferenceList = 112;
	public static readonly BitBookEndnotes = 113;
	public static readonly BitBookNotes = 114;
	public static readonly BitBookCopyrightPermissions = 115;
	public static readonly BitBookTeaser = 116;
	public static readonly BitBookAutherBio = 117;
	public static readonly BitBookRequestForABookReview = 118;
	public static readonly BitBookComingSoon = 119;
	public static readonly BitBookReadMore = 120;
	public static readonly BitBookSummary = 121;
	public static readonly BitBookEpigraph = 122;
	public static readonly BitCode = 123;
	public static readonly BitCard1 = 124;
	public static readonly BitQuestion1 = 125;
	public static readonly BitScreenshot = 126;
	public static readonly BitFocusImage = 127;
	public static readonly BitPhoto = 128;
	public static readonly BitBrowserImage = 129;
	public static readonly BitBotActionResponse = 130;
	public static readonly BitBotActionTrueFalse = 131;
	public static readonly BitBotActionRatingNumber = 132;
	public static readonly BitBotActionRatingStars = 133;
	public static readonly BitChapterSubjectMatter = 134;
	public static readonly BitReleaseNote = 135;
	public static readonly BitConclusion = 136;
	public static readonly BitVendorAmcharts5Chart = 137;
	public static readonly BitFeatured = 138;
	public static readonly OPDOLL = 139;
	public static readonly OPBUL = 140;
	public static readonly OPRANGLES = 141;
	public static readonly OPRANGLEL = 142;
	public static readonly OPDANGLE = 143;
	public static readonly OPU = 144;
	public static readonly OPB = 145;
	public static readonly OPQ = 146;
	public static readonly OPA = 147;
	public static readonly OPP = 148;
	public static readonly OPM = 149;
	public static readonly OPS = 150;
	public static readonly OPR = 151;
	public static readonly OPHASH = 152;
	public static readonly OPC = 153;
	public static readonly CL = 154;
	public static readonly COLON = 155;
	public static readonly AMP = 156;
	public static readonly DBLCOLON = 157;
	public static readonly PLUS = 158;
	public static readonly DotAt = 159;
	public static readonly Greater = 160;
	public static readonly Less = 161;
	public static readonly RightAngle = 162;
	public static readonly RightArrow = 163;
	public static readonly DBLEQ = 164;
	public static readonly HSPL = 165;
	public static readonly HSPL2 = 166;
	public static readonly SSPL = 167;
	public static readonly SSPL2 = 168;
	public static readonly QUOTE_INDEX = 169;
	public static readonly COMMENT = 170;
	public static readonly DCANY = 171;
	public static readonly Image_type = 172;
	public static readonly Audio_type = 173;
	public static readonly Video_type = 174;
	public static readonly ArticleText = 175;
	public static readonly NOTCL = 176;
	public static readonly NUMERIC = 177;
	public static readonly STRING = 178;
	public static readonly NL = 179;
	public static readonly NOTBITMARK = 180;
	public static readonly SENTENCE = 181;
	public static readonly BARSTRING = 182;
	public static readonly OPAT = 183;
	public static readonly AtProgress = 184;
	public static readonly AtReference = 185;
	public static readonly AtWidth = 186;
	public static readonly AtHeight = 187;
	public static readonly AtProgressPoints = 188;
	public static readonly AtShortanswer = 189;
	public static readonly AtLonganswer = 190;
	public static readonly AtExampleWithStr = 191;
	public static readonly AtExamplecol = 192;
	public static readonly AtExamplecl = 193;
	public static readonly AtPartialAnswerS = 194;
	public static readonly AtPartialAnswer = 195;
	public static readonly AtLabeltrue = 196;
	public static readonly AtLabelfalse = 197;
	public static readonly AtPoints = 198;
	public static readonly AtSrc = 199;
	public static readonly AtPartner = 200;
	public static readonly OPATALT = 201;
	public static readonly OPAMARK = 202;
	public static readonly ShowInIndex = 203;
	public static readonly OpAtCaption = 204;
	public static readonly OpAtLicense = 205;
	public static readonly OpAtCopyright = 206;
	public static readonly OpAtSearch = 207;
	public static readonly OpAtIsTracked = 208;
	public static readonly OpAtIsInfoOnly = 209;
	public static readonly AtDate = 210;
	public static readonly Http = 211;
	public static readonly Https = 212;
	public static readonly AmpAudio = 213;
	public static readonly AmpImage = 214;
	public static readonly AmpImageZoom = 215;
	public static readonly AmpImageWAudio = 216;
	public static readonly AmpVideo = 217;
	public static readonly AmpArticle = 218;
	public static readonly AmpDocument = 219;
	public static readonly AmpApp = 220;
	public static readonly AmpWebsite = 221;
	public static readonly AmpStillImageFilm = 222;
	public static readonly AmpPdf = 223;
	public static readonly OpAmpAudio = 224;
	public static readonly OpAmpImage = 225;
	public static readonly OpAmpImageZoom = 226;
	public static readonly OpAmpImageWAudio = 227;
	public static readonly OpAmpVideo = 228;
	public static readonly OpAmpArticle = 229;
	public static readonly OpAmpArticleAtt = 230;
	public static readonly OpAmpDocument = 231;
	public static readonly OpAmpApp = 232;
	public static readonly OpAmpWebsite = 233;
	public static readonly OpAmpStillImageFilm = 234;
	public static readonly BracEnclose = 235;
	public static readonly AmpAudioLink = 236;
	public static readonly AmpImageLink = 237;
	public static readonly AmpVideoLink = 238;
	public static readonly AmpArticleLink = 239;
	public static readonly AmpDocumentLink = 240;
	public static readonly AmpAppLink = 241;
	public static readonly AmpWebsiteLink = 242;
	public static readonly AmpStillImageFilmLink = 243;
	public static readonly OpAmpAudioLink = 244;
	public static readonly OpAmpImageLink = 245;
	public static readonly OpAmpVideoLink = 246;
	public static readonly OpAmpArticleLink = 247;
	public static readonly OpAmpDocumentLink = 248;
	public static readonly OpAmpAppLink = 249;
	public static readonly OpAmpWebsiteLink = 250;
	public static readonly OpAmpStillImageFilmLink = 251;
	public static readonly AmpImageEmbed = 252;
	public static readonly AmpVideoEmbed = 253;
	public static readonly AmpAudioEmbed = 254;
	public static readonly AmpDocumentEmbed = 255;
	public static readonly AmpStillImageFilmEmbed = 256;
	public static readonly OpAmpImageEmbed = 257;
	public static readonly OpAmpVideoEmbed = 258;
	public static readonly OpAmpAudioEmbed = 259;
	public static readonly OpAmpDocumentEmbed = 260;
	public static readonly OpAmpStillImageFilmEmbed = 261;
	public static readonly BitmarkMinus = 262;
	public static readonly BitmarkPlus = 263;
	public static readonly ColonText = 264;
	public static readonly ColonJson = 265;
	public static readonly Prosemirror = 266;
	public static readonly Placeholder = 267;
	public static readonly BASIC = 268;
	public static readonly JPG = 269;
	public static readonly PNG = 270;
	public static readonly GIF = 271;
	public static readonly SVG = 272;
	public static readonly MP2 = 273;
	public static readonly MP3 = 274;
	public static readonly MP4 = 275;
	public static readonly FLV = 276;
	public static readonly WMV = 277;
	public static readonly MPEG = 278;
	public static readonly MPG = 279;
	public static readonly TEL = 280;
	public static readonly DotArticleAtt = 281;
	public static readonly STAR = 282;
	public static readonly URL = 283;
	public static readonly LIST_LINE = 284;
	public static readonly ENCLBARS = 285;
	public static readonly RULE_bitmark = 0;
	public static readonly RULE_bitmark_ = 1;
	public static readonly RULE_bit = 2;
	public static readonly RULE_book = 3;
	public static readonly RULE_chapter = 4;
	public static readonly RULE_toc = 5;
	public static readonly RULE_summary = 6;
	public static readonly RULE_internal_link = 7;
	public static readonly RULE_bit_alias = 8;
	public static readonly RULE_title_etc = 9;
	public static readonly RULE_group_born = 10;
	public static readonly RULE_group_died = 11;
	public static readonly RULE_learning_path_lti = 12;
	public static readonly RULE_learning_path_step = 13;
	public static readonly RULE_learning_path_book = 14;
	public static readonly RULE_learning_path_sign = 15;
	public static readonly RULE_learning_path_video_call = 16;
	public static readonly RULE_learning_path_learning_goal = 17;
	public static readonly RULE_learning_path_closing = 18;
	public static readonly RULE_learning_path_feedback = 19;
	public static readonly RULE_learning_path_bot_training = 20;
	public static readonly RULE_learning_path_external_link = 21;
	public static readonly RULE_learning_path_classroom_training = 22;
	public static readonly RULE_learning_path_classroom_event = 23;
	public static readonly RULE_bot_action_send = 24;
	public static readonly RULE_bot_action_announce = 25;
	public static readonly RULE_bot_action_save = 26;
	public static readonly RULE_bot_action_remind = 27;
	public static readonly RULE_bot_action_response = 28;
	public static readonly RULE_bot_action_true_false = 29;
	public static readonly RULE_bot_action_rating_number = 30;
	public static readonly RULE_bot_action_rating_stars = 31;
	public static readonly RULE_bot_action = 32;
	public static readonly RULE_bo_actions = 33;
	public static readonly RULE_boacts = 34;
	public static readonly RULE_feedback = 35;
	public static readonly RULE_footer = 36;
	public static readonly RULE_bitElem = 37;
	public static readonly RULE_gap = 38;
	public static readonly RULE_single_gap = 39;
	public static readonly RULE_choice_plus = 40;
	public static readonly RULE_choice_minus = 41;
	public static readonly RULE_choice_star = 42;
	public static readonly RULE_essay = 43;
	public static readonly RULE_ml_example = 44;
	public static readonly RULE_partans = 45;
	public static readonly RULE_resource = 46;
	public static readonly RULE_correction = 47;
	public static readonly RULE_corrs = 48;
	public static readonly RULE_mark_ = 49;
	public static readonly RULE_mark_text = 50;
	public static readonly RULE_mark_color = 51;
	public static readonly RULE_document_upload = 52;
	public static readonly RULE_take_audio = 53;
	public static readonly RULE_take_picture = 54;
	public static readonly RULE_record_audio = 55;
	public static readonly RULE_preparation_note = 56;
	public static readonly RULE_assignment = 57;
	public static readonly RULE_article = 58;
	public static readonly RULE_statement = 59;
	public static readonly RULE_details = 60;
	public static readonly RULE_sample_solution = 61;
	public static readonly RULE_buttoncopytext = 62;
	public static readonly RULE_wbtcontinue = 63;
	public static readonly RULE_learningpathdetails = 64;
	public static readonly RULE_page = 65;
	public static readonly RULE_note = 66;
	public static readonly RULE_info = 67;
	public static readonly RULE_warning = 68;
	public static readonly RULE_remark = 69;
	public static readonly RULE_help = 70;
	public static readonly RULE_danger = 71;
	public static readonly RULE_bug = 72;
	public static readonly RULE_sidenote = 73;
	public static readonly RULE_stickynote = 74;
	public static readonly RULE_quote = 75;
	public static readonly RULE_footnote = 76;
	public static readonly RULE_hintbit = 77;
	public static readonly RULE_examplebit = 78;
	public static readonly RULE_vendor_padlet_embed = 79;
	public static readonly RULE_scorm = 80;
	public static readonly RULE_bit_image = 81;
	public static readonly RULE_bit_imageLink = 82;
	public static readonly RULE_bit_imageZoom = 83;
	public static readonly RULE_bit_imagePrototype = 84;
	public static readonly RULE_bit_imageSuperWide = 85;
	public static readonly RULE_bit_audio = 86;
	public static readonly RULE_bit_audioLink = 87;
	public static readonly RULE_bit_audioEmbed = 88;
	public static readonly RULE_bit_video = 89;
	public static readonly RULE_bit_videoLink = 90;
	public static readonly RULE_bit_videoEmbed = 91;
	public static readonly RULE_bit_videoPortrait = 92;
	public static readonly RULE_bit_videoLandscape = 93;
	public static readonly RULE_bit_stillImageFilm = 94;
	public static readonly RULE_bit_stillImageFilmLink = 95;
	public static readonly RULE_bit_stillImageFilmEmbed = 96;
	public static readonly RULE_bit_websiteLink = 97;
	public static readonly RULE_bit_document = 98;
	public static readonly RULE_bit_documentLink = 99;
	public static readonly RULE_bit_documentEmbed = 100;
	public static readonly RULE_bit_documentDownload = 101;
	public static readonly RULE_bit_appLink = 102;
	public static readonly RULE_bit_editorial = 103;
	public static readonly RULE_book_frontispiece = 104;
	public static readonly RULE_book_title = 105;
	public static readonly RULE_book_copyright = 106;
	public static readonly RULE_book_dedication = 107;
	public static readonly RULE_book_forword = 108;
	public static readonly RULE_book_preface = 109;
	public static readonly RULE_book_prologue = 110;
	public static readonly RULE_book_epilogue = 111;
	public static readonly RULE_book_introduction = 112;
	public static readonly RULE_book_inciting_incident = 113;
	public static readonly RULE_book_conclusion = 114;
	public static readonly RULE_book_afterword = 115;
	public static readonly RULE_book_postscript = 116;
	public static readonly RULE_book_appendix = 117;
	public static readonly RULE_book_addendum = 118;
	public static readonly RULE_book_acknowledgments = 119;
	public static readonly RULE_book_list_of_contributors = 120;
	public static readonly RULE_book_bibliography = 121;
	public static readonly RULE_book_reference_list = 122;
	public static readonly RULE_book_endnotes = 123;
	public static readonly RULE_book_notes = 124;
	public static readonly RULE_book_copyright_permissions = 125;
	public static readonly RULE_book_teaser = 126;
	public static readonly RULE_book_auther_bio = 127;
	public static readonly RULE_book_request_for_a_book_review = 128;
	public static readonly RULE_book_coming_soon = 129;
	public static readonly RULE_book_read_more = 130;
	public static readonly RULE_book_summary = 131;
	public static readonly RULE_book_epigraph = 132;
	public static readonly RULE_code = 133;
	public static readonly RULE_card1 = 134;
	public static readonly RULE_question1 = 135;
	public static readonly RULE_screenshot = 136;
	public static readonly RULE_focus_image = 137;
	public static readonly RULE_photo = 138;
	public static readonly RULE_browser_image = 139;
	public static readonly RULE_chapter_subject_matter = 140;
	public static readonly RULE_release_note = 141;
	public static readonly RULE_conclusion = 142;
	public static readonly RULE_featured = 143;
	public static readonly RULE_vendor_amcharts_5_chart = 144;
	public static readonly RULE_message = 145;
	public static readonly RULE_bot_interview = 146;
	public static readonly RULE_bot_choice = 147;
	public static readonly RULE_rating = 148;
	public static readonly RULE_bullet_item = 149;
	public static readonly RULE_survey = 150;
	public static readonly RULE_survey_1 = 151;
	public static readonly RULE_survey_anonymous = 152;
	public static readonly RULE_survey_anonymous_1 = 153;
	public static readonly RULE_self_assessment = 154;
	public static readonly RULE_self_assess_s_and_w = 155;
	public static readonly RULE_atpoint = 156;
	public static readonly RULE_format = 157;
	public static readonly RULE_resource_format = 158;
	public static readonly RULE_resource_format_extra = 159;
	public static readonly RULE_format2 = 160;
	public static readonly RULE_image_format = 161;
	public static readonly RULE_video_format = 162;
	public static readonly RULE_article_format = 163;
	public static readonly RULE_document_format = 164;
	public static readonly RULE_app_format = 165;
	public static readonly RULE_website_format = 166;
	public static readonly RULE_stillimagefilm_format = 167;
	public static readonly RULE_op_article_format = 168;
	public static readonly RULE_op_document_format = 169;
	public static readonly RULE_op_app_format = 170;
	public static readonly RULE_op_website_format = 171;
	public static readonly RULE_op_video_format = 172;
	public static readonly RULE_op_stillimagefilm_format = 173;
	public static readonly RULE_articlebit = 174;
	public static readonly RULE_documentbit = 175;
	public static readonly RULE_websitebit = 176;
	public static readonly RULE_appbit = 177;
	public static readonly RULE_stillimagefilmbit = 178;
	public static readonly RULE_stillimg_one = 179;
	public static readonly RULE_videobit = 180;
	public static readonly RULE_video_one = 181;
	public static readonly RULE_imagebit = 182;
	public static readonly RULE_image_one = 183;
	public static readonly RULE_op_image_format = 184;
	public static readonly RULE_image_chained = 185;
	public static readonly RULE_image_chained4match = 186;
	public static readonly RULE_audiobit = 187;
	public static readonly RULE_audio_one = 188;
	public static readonly RULE_audio_format = 189;
	public static readonly RULE_op_audio_format = 190;
	public static readonly RULE_resource_chained = 191;
	public static readonly RULE_telephone = 192;
	public static readonly RULE_url = 193;
	public static readonly RULE_item = 194;
	public static readonly RULE_lead = 195;
	public static readonly RULE_angleref = 196;
	public static readonly RULE_example = 197;
	public static readonly RULE_bracketed_text = 198;
	public static readonly RULE_reference = 199;
	public static readonly RULE_progress = 200;
	public static readonly RULE_dateprop = 201;
	public static readonly RULE_dateprop_chained = 202;
	public static readonly RULE_instruction = 203;
	public static readonly RULE_hint = 204;
	public static readonly RULE_title = 205;
	public static readonly RULE_bool_label = 206;
	public static readonly RULE_progress_points = 207;
	public static readonly RULE_istracked = 208;
	public static readonly RULE_isinfoonly = 209;
	public static readonly RULE_atdef = 210;
	public static readonly RULE_atdef_ = 211;
	public static readonly RULE_dollarans = 212;
	public static readonly RULE_anchor = 213;
	public static readonly RULE_lines = 214;
	public static readonly RULE_s_and_w = 215;
	public static readonly RULE_dclines = 216;
	public static readonly RULE_clnsp = 217;
	public static readonly RULE_sspl = 218;
	public static readonly RULE_words = 219;
	public static readonly RULE_sp = 220;
	public static readonly RULE_sentence = 221;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"bitmark", "bitmark_", "bit", "book", "chapter", "toc", "summary", "internal_link", 
		"bit_alias", "title_etc", "group_born", "group_died", "learning_path_lti", 
		"learning_path_step", "learning_path_book", "learning_path_sign", "learning_path_video_call", 
		"learning_path_learning_goal", "learning_path_closing", "learning_path_feedback", 
		"learning_path_bot_training", "learning_path_external_link", "learning_path_classroom_training", 
		"learning_path_classroom_event", "bot_action_send", "bot_action_announce", 
		"bot_action_save", "bot_action_remind", "bot_action_response", "bot_action_true_false", 
		"bot_action_rating_number", "bot_action_rating_stars", "bot_action", "bo_actions", 
		"boacts", "feedback", "footer", "bitElem", "gap", "single_gap", "choice_plus", 
		"choice_minus", "choice_star", "essay", "ml_example", "partans", "resource", 
		"correction", "corrs", "mark_", "mark_text", "mark_color", "document_upload", 
		"take_audio", "take_picture", "record_audio", "preparation_note", "assignment", 
		"article", "statement", "details", "sample_solution", "buttoncopytext", 
		"wbtcontinue", "learningpathdetails", "page", "note", "info", "warning", 
		"remark", "help", "danger", "bug", "sidenote", "stickynote", "quote", 
		"footnote", "hintbit", "examplebit", "vendor_padlet_embed", "scorm", "bit_image", 
		"bit_imageLink", "bit_imageZoom", "bit_imagePrototype", "bit_imageSuperWide", 
		"bit_audio", "bit_audioLink", "bit_audioEmbed", "bit_video", "bit_videoLink", 
		"bit_videoEmbed", "bit_videoPortrait", "bit_videoLandscape", "bit_stillImageFilm", 
		"bit_stillImageFilmLink", "bit_stillImageFilmEmbed", "bit_websiteLink", 
		"bit_document", "bit_documentLink", "bit_documentEmbed", "bit_documentDownload", 
		"bit_appLink", "bit_editorial", "book_frontispiece", "book_title", "book_copyright", 
		"book_dedication", "book_forword", "book_preface", "book_prologue", "book_epilogue", 
		"book_introduction", "book_inciting_incident", "book_conclusion", "book_afterword", 
		"book_postscript", "book_appendix", "book_addendum", "book_acknowledgments", 
		"book_list_of_contributors", "book_bibliography", "book_reference_list", 
		"book_endnotes", "book_notes", "book_copyright_permissions", "book_teaser", 
		"book_auther_bio", "book_request_for_a_book_review", "book_coming_soon", 
		"book_read_more", "book_summary", "book_epigraph", "code", "card1", "question1", 
		"screenshot", "focus_image", "photo", "browser_image", "chapter_subject_matter", 
		"release_note", "conclusion", "featured", "vendor_amcharts_5_chart", "message", 
		"bot_interview", "bot_choice", "rating", "bullet_item", "survey", "survey_1", 
		"survey_anonymous", "survey_anonymous_1", "self_assessment", "self_assess_s_and_w", 
		"atpoint", "format", "resource_format", "resource_format_extra", "format2", 
		"image_format", "video_format", "article_format", "document_format", "app_format", 
		"website_format", "stillimagefilm_format", "op_article_format", "op_document_format", 
		"op_app_format", "op_website_format", "op_video_format", "op_stillimagefilm_format", 
		"articlebit", "documentbit", "websitebit", "appbit", "stillimagefilmbit", 
		"stillimg_one", "videobit", "video_one", "imagebit", "image_one", "op_image_format", 
		"image_chained", "image_chained4match", "audiobit", "audio_one", "audio_format", 
		"op_audio_format", "resource_chained", "telephone", "url", "item", "lead", 
		"angleref", "example", "bracketed_text", "reference", "progress", "dateprop", 
		"dateprop_chained", "instruction", "hint", "title", "bool_label", "progress_points", 
		"istracked", "isinfoonly", "atdef", "atdef_", "dollarans", "anchor", "lines", 
		"s_and_w", "dclines", "clnsp", "sspl", "words", "sp", "sentence",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'[.'", undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "'CLOZE'", "'MATCH'", undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "':'", "'&'", "'::'", "'+'", "'.@'", "'>'", "'<'", "'\u25BA'", 
		"'\u2192'", "'=='", undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "'[@'", 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "'http://'", 
		"'https://'", "'&audio'", "'&image'", "'&image-zoom'", "'&image-with-audio'", 
		"'&video'", "'&article'", "'&document'", "'&app'", "'&website'", "'&still-image-film'", 
		"'&pdf'", undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "'&audio-link'", 
		"'&image-link'", "'&video-link'", "'&article-link'", "'&document-link'", 
		"'&app-link'", "'&website-link'", "'&still-image-film-link'", undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"'&image-embed'", "'&video-embed'", "'&daudio-embed'", "'&document-embed'", 
		"'&still-image-film-embed'", undefined, undefined, undefined, undefined, 
		undefined, "':bitmark--'", "':bitmark++'", "':text'", "':json'", "':prosemirror'", 
		"':placeholder'", "':basic'", "':jpg'", "':png'", "':gif'", "':svg'", 
		"':mp2'", "':mp3'", "':mp4'", "':flv'", "':wmv'", "':mpeg'", "':mpg'", 
		"'tel:'", "'.article-attachment'", "'*'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "OPDOT", "S", "BitBook", "BitChapter", "BitToc", "BitSummary", 
		"BitIntlink", "BitIntRef", "BitAlias", "BitGroups", "BitGroupt", "BitPlaceholder", 
		"BitStatement", "BitDetails", "BitSampleSolution", "BitTakeAudio", "CLOZE", 
		"MATCH", "BitArticle", "BitPage", "BitEssay", "BitMessage", "BitCorrection", 
		"BitMark", "BitDocup", "BitTakepic", "BitRecaud", "BitPrepnote", "BitAssign", 
		"BitBotint", "BitSelfassess", "BitRating", "BitSurvey", "BitSurvey1", 
		"BitSurveyanon", "BitSurveyanon1", "BitNote", "BitInfo", "BitWarning", 
		"BitRemark", "BitHint", "BitHelp", "BitDanger", "BitBug", "BitSidenote", 
		"BitStickynote", "BitQuote", "BitFootnote", "BitExample", "BitButtonCopytext", 
		"BitWbtContinue", "BitLearningPathDetails", "BitLearningPathLti", "BitLearningPathStep", 
		"BitLearningPathBook", "BitLearningPathSign", "BitLearningPathVideoCall", 
		"BitLearningPathLearningGoal", "BitLearningPathClosing", "BitLearningPathFeedback", 
		"BitLearningPathBotTraining", "BitLearningPathExternalLink", "BitLearningPathClassroomTraining", 
		"BitLearningPathClassroomEvent", "BitBotActionSend", "BitBotActionAnnounce", 
		"BitBotActionSave", "BitBotActionRemind", "BitVendorPadletEmbed", "BitScorm", 
		"BitImage", "BitImageLink", "BitImageZoom", "BitImagePrototype", "BitImageSuperWide", 
		"BitAudio", "BitAudioLink", "BitAudioEmbed", "BitVideo", "BitVideoLink", 
		"BitVideoEmbed", "BitVideoPortrait", "BitVideoLandscape", "BitStillImageFilm", 
		"BitStillImageFilmLink", "BitStillImageFilmEmbed", "BitWebsiteLink", "BitDocument", 
		"BitDocumentLink", "BitDocumentEmbed", "BitDocumentDownload", "BitAppLink", 
		"BitEditorial", "BitBookFrontispiece", "BitBookTitle", "BitBookCopyright", 
		"BitBookDedication", "BitBookForword", "BitBookPreface", "BitBookPrologue", 
		"BitBookEpilogue", "BitBookIntroduction", "BitBookIncitingIncident", "BitBookConclusion", 
		"BitBookAfterword", "BitBookPostscript", "BitBookappendix", "BitBookAddendum", 
		"BitBookAcknowledgments", "BitBookListOfContributors", "BitBookBibliography", 
		"BitBookReferenceList", "BitBookEndnotes", "BitBookNotes", "BitBookCopyrightPermissions", 
		"BitBookTeaser", "BitBookAutherBio", "BitBookRequestForABookReview", "BitBookComingSoon", 
		"BitBookReadMore", "BitBookSummary", "BitBookEpigraph", "BitCode", "BitCard1", 
		"BitQuestion1", "BitScreenshot", "BitFocusImage", "BitPhoto", "BitBrowserImage", 
		"BitBotActionResponse", "BitBotActionTrueFalse", "BitBotActionRatingNumber", 
		"BitBotActionRatingStars", "BitChapterSubjectMatter", "BitReleaseNote", 
		"BitConclusion", "BitVendorAmcharts5Chart", "BitFeatured", "OPDOLL", "OPBUL", 
		"OPRANGLES", "OPRANGLEL", "OPDANGLE", "OPU", "OPB", "OPQ", "OPA", "OPP", 
		"OPM", "OPS", "OPR", "OPHASH", "OPC", "CL", "COLON", "AMP", "DBLCOLON", 
		"PLUS", "DotAt", "Greater", "Less", "RightAngle", "RightArrow", "DBLEQ", 
		"HSPL", "HSPL2", "SSPL", "SSPL2", "QUOTE_INDEX", "COMMENT", "DCANY", "Image_type", 
		"Audio_type", "Video_type", "ArticleText", "NOTCL", "NUMERIC", "STRING", 
		"NL", "NOTBITMARK", "SENTENCE", "BARSTRING", "OPAT", "AtProgress", "AtReference", 
		"AtWidth", "AtHeight", "AtProgressPoints", "AtShortanswer", "AtLonganswer", 
		"AtExampleWithStr", "AtExamplecol", "AtExamplecl", "AtPartialAnswerS", 
		"AtPartialAnswer", "AtLabeltrue", "AtLabelfalse", "AtPoints", "AtSrc", 
		"AtPartner", "OPATALT", "OPAMARK", "ShowInIndex", "OpAtCaption", "OpAtLicense", 
		"OpAtCopyright", "OpAtSearch", "OpAtIsTracked", "OpAtIsInfoOnly", "AtDate", 
		"Http", "Https", "AmpAudio", "AmpImage", "AmpImageZoom", "AmpImageWAudio", 
		"AmpVideo", "AmpArticle", "AmpDocument", "AmpApp", "AmpWebsite", "AmpStillImageFilm", 
		"AmpPdf", "OpAmpAudio", "OpAmpImage", "OpAmpImageZoom", "OpAmpImageWAudio", 
		"OpAmpVideo", "OpAmpArticle", "OpAmpArticleAtt", "OpAmpDocument", "OpAmpApp", 
		"OpAmpWebsite", "OpAmpStillImageFilm", "BracEnclose", "AmpAudioLink", 
		"AmpImageLink", "AmpVideoLink", "AmpArticleLink", "AmpDocumentLink", "AmpAppLink", 
		"AmpWebsiteLink", "AmpStillImageFilmLink", "OpAmpAudioLink", "OpAmpImageLink", 
		"OpAmpVideoLink", "OpAmpArticleLink", "OpAmpDocumentLink", "OpAmpAppLink", 
		"OpAmpWebsiteLink", "OpAmpStillImageFilmLink", "AmpImageEmbed", "AmpVideoEmbed", 
		"AmpAudioEmbed", "AmpDocumentEmbed", "AmpStillImageFilmEmbed", "OpAmpImageEmbed", 
		"OpAmpVideoEmbed", "OpAmpAudioEmbed", "OpAmpDocumentEmbed", "OpAmpStillImageFilmEmbed", 
		"BitmarkMinus", "BitmarkPlus", "ColonText", "ColonJson", "Prosemirror", 
		"Placeholder", "BASIC", "JPG", "PNG", "GIF", "SVG", "MP2", "MP3", "MP4", 
		"FLV", "WMV", "MPEG", "MPG", "TEL", "DotArticleAtt", "STAR", "URL", "LIST_LINE", 
		"ENCLBARS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(bitmarkParser._LITERAL_NAMES, bitmarkParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return bitmarkParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "bitmarkParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return bitmarkParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return bitmarkParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(bitmarkParser._ATN, this);
	}
	// @RuleVersion(0)
	public bitmark(): BitmarkContext {
		let _localctx: BitmarkContext = new BitmarkContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, bitmarkParser.RULE_bitmark);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 457;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 444;
				this.bitmark_();
				this.state = 454;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 448;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.S) {
							{
							{
							this.state = 445;
							this.match(bitmarkParser.S);
							}
							}
							this.state = 450;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 451;
						this.match(bitmarkParser.NL);
						}
						}
					}
					this.state = 456;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
				}
				}
				}
				this.state = 459;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitDocup) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitBotint) | (1 << bitmarkParser.BitSelfassess))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitRating - 32)) | (1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)) | (1 << (bitmarkParser.BitLearningPathBotTraining - 32)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 32)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitLearningPathClassroomEvent - 64)) | (1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitImagePrototype - 64)) | (1 << (bitmarkParser.BitImageSuperWide - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitVideoPortrait - 64)) | (1 << (bitmarkParser.BitVideoLandscape - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)) | (1 << (bitmarkParser.BitEditorial - 64)) | (1 << (bitmarkParser.BitBookFrontispiece - 64)) | (1 << (bitmarkParser.BitBookTitle - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitBookCopyright - 96)) | (1 << (bitmarkParser.BitBookDedication - 96)) | (1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)) | (1 << (bitmarkParser.BitQuestion1 - 96)) | (1 << (bitmarkParser.BitScreenshot - 96)) | (1 << (bitmarkParser.BitFocusImage - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.BitPhoto - 128)) | (1 << (bitmarkParser.BitBrowserImage - 128)) | (1 << (bitmarkParser.BitBotActionResponse - 128)) | (1 << (bitmarkParser.BitBotActionTrueFalse - 128)) | (1 << (bitmarkParser.BitBotActionRatingNumber - 128)) | (1 << (bitmarkParser.BitBotActionRatingStars - 128)) | (1 << (bitmarkParser.BitChapterSubjectMatter - 128)) | (1 << (bitmarkParser.BitReleaseNote - 128)) | (1 << (bitmarkParser.BitConclusion - 128)) | (1 << (bitmarkParser.BitVendorAmcharts5Chart - 128)) | (1 << (bitmarkParser.BitFeatured - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.COLON - 128)) | (1 << (bitmarkParser.AMP - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.Greater - 160)) | (1 << (bitmarkParser.Less - 160)) | (1 << (bitmarkParser.RightAngle - 160)) | (1 << (bitmarkParser.RightArrow - 160)) | (1 << (bitmarkParser.DBLEQ - 160)) | (1 << (bitmarkParser.QUOTE_INDEX - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.NOTBITMARK - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.BARSTRING - 160)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (bitmarkParser.AmpAudio - 213)) | (1 << (bitmarkParser.AmpImage - 213)) | (1 << (bitmarkParser.AmpVideo - 213)) | (1 << (bitmarkParser.AmpArticle - 213)) | (1 << (bitmarkParser.AmpDocument - 213)) | (1 << (bitmarkParser.AmpApp - 213)) | (1 << (bitmarkParser.AmpWebsite - 213)) | (1 << (bitmarkParser.AmpStillImageFilm - 213)) | (1 << (bitmarkParser.AmpAudioLink - 213)) | (1 << (bitmarkParser.AmpImageLink - 213)) | (1 << (bitmarkParser.AmpVideoLink - 213)) | (1 << (bitmarkParser.AmpArticleLink - 213)) | (1 << (bitmarkParser.AmpDocumentLink - 213)) | (1 << (bitmarkParser.AmpAppLink - 213)) | (1 << (bitmarkParser.AmpWebsiteLink - 213)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 213)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
			this.state = 464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 461;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 466;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 467;
			this.match(bitmarkParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bitmark_(): Bitmark_Context {
		let _localctx: Bitmark_Context = new Bitmark_Context(this._ctx, this.state);
		this.enterRule(_localctx, 2, bitmarkParser.RULE_bitmark_);
		try {
			this.state = 471;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.BitBook:
			case bitmarkParser.BitChapter:
			case bitmarkParser.BitToc:
			case bitmarkParser.BitSummary:
			case bitmarkParser.BitIntlink:
			case bitmarkParser.BitIntRef:
			case bitmarkParser.BitAlias:
			case bitmarkParser.BitGroups:
			case bitmarkParser.BitGroupt:
			case bitmarkParser.BitStatement:
			case bitmarkParser.BitDetails:
			case bitmarkParser.BitSampleSolution:
			case bitmarkParser.BitTakeAudio:
			case bitmarkParser.BitArticle:
			case bitmarkParser.BitPage:
			case bitmarkParser.BitEssay:
			case bitmarkParser.BitMessage:
			case bitmarkParser.BitCorrection:
			case bitmarkParser.BitMark:
			case bitmarkParser.BitDocup:
			case bitmarkParser.BitTakepic:
			case bitmarkParser.BitRecaud:
			case bitmarkParser.BitPrepnote:
			case bitmarkParser.BitAssign:
			case bitmarkParser.BitBotint:
			case bitmarkParser.BitSelfassess:
			case bitmarkParser.BitRating:
			case bitmarkParser.BitSurvey:
			case bitmarkParser.BitSurvey1:
			case bitmarkParser.BitSurveyanon:
			case bitmarkParser.BitSurveyanon1:
			case bitmarkParser.BitNote:
			case bitmarkParser.BitInfo:
			case bitmarkParser.BitWarning:
			case bitmarkParser.BitRemark:
			case bitmarkParser.BitHint:
			case bitmarkParser.BitHelp:
			case bitmarkParser.BitDanger:
			case bitmarkParser.BitBug:
			case bitmarkParser.BitSidenote:
			case bitmarkParser.BitStickynote:
			case bitmarkParser.BitQuote:
			case bitmarkParser.BitFootnote:
			case bitmarkParser.BitExample:
			case bitmarkParser.BitButtonCopytext:
			case bitmarkParser.BitWbtContinue:
			case bitmarkParser.BitLearningPathDetails:
			case bitmarkParser.BitLearningPathLti:
			case bitmarkParser.BitLearningPathStep:
			case bitmarkParser.BitLearningPathBook:
			case bitmarkParser.BitLearningPathSign:
			case bitmarkParser.BitLearningPathVideoCall:
			case bitmarkParser.BitLearningPathLearningGoal:
			case bitmarkParser.BitLearningPathClosing:
			case bitmarkParser.BitLearningPathFeedback:
			case bitmarkParser.BitLearningPathBotTraining:
			case bitmarkParser.BitLearningPathExternalLink:
			case bitmarkParser.BitLearningPathClassroomTraining:
			case bitmarkParser.BitLearningPathClassroomEvent:
			case bitmarkParser.BitBotActionSend:
			case bitmarkParser.BitBotActionAnnounce:
			case bitmarkParser.BitBotActionSave:
			case bitmarkParser.BitBotActionRemind:
			case bitmarkParser.BitVendorPadletEmbed:
			case bitmarkParser.BitScorm:
			case bitmarkParser.BitImage:
			case bitmarkParser.BitImageLink:
			case bitmarkParser.BitImageZoom:
			case bitmarkParser.BitImagePrototype:
			case bitmarkParser.BitImageSuperWide:
			case bitmarkParser.BitAudio:
			case bitmarkParser.BitAudioLink:
			case bitmarkParser.BitAudioEmbed:
			case bitmarkParser.BitVideo:
			case bitmarkParser.BitVideoLink:
			case bitmarkParser.BitVideoEmbed:
			case bitmarkParser.BitVideoPortrait:
			case bitmarkParser.BitVideoLandscape:
			case bitmarkParser.BitStillImageFilm:
			case bitmarkParser.BitStillImageFilmLink:
			case bitmarkParser.BitStillImageFilmEmbed:
			case bitmarkParser.BitWebsiteLink:
			case bitmarkParser.BitDocument:
			case bitmarkParser.BitDocumentLink:
			case bitmarkParser.BitDocumentEmbed:
			case bitmarkParser.BitDocumentDownload:
			case bitmarkParser.BitAppLink:
			case bitmarkParser.BitEditorial:
			case bitmarkParser.BitBookFrontispiece:
			case bitmarkParser.BitBookTitle:
			case bitmarkParser.BitBookCopyright:
			case bitmarkParser.BitBookDedication:
			case bitmarkParser.BitBookForword:
			case bitmarkParser.BitBookPreface:
			case bitmarkParser.BitBookPrologue:
			case bitmarkParser.BitBookEpilogue:
			case bitmarkParser.BitBookIntroduction:
			case bitmarkParser.BitBookIncitingIncident:
			case bitmarkParser.BitBookConclusion:
			case bitmarkParser.BitBookAfterword:
			case bitmarkParser.BitBookPostscript:
			case bitmarkParser.BitBookappendix:
			case bitmarkParser.BitBookAddendum:
			case bitmarkParser.BitBookAcknowledgments:
			case bitmarkParser.BitBookListOfContributors:
			case bitmarkParser.BitBookBibliography:
			case bitmarkParser.BitBookReferenceList:
			case bitmarkParser.BitBookEndnotes:
			case bitmarkParser.BitBookNotes:
			case bitmarkParser.BitBookCopyrightPermissions:
			case bitmarkParser.BitBookTeaser:
			case bitmarkParser.BitBookAutherBio:
			case bitmarkParser.BitBookRequestForABookReview:
			case bitmarkParser.BitBookComingSoon:
			case bitmarkParser.BitBookReadMore:
			case bitmarkParser.BitBookSummary:
			case bitmarkParser.BitBookEpigraph:
			case bitmarkParser.BitCode:
			case bitmarkParser.BitCard1:
			case bitmarkParser.BitQuestion1:
			case bitmarkParser.BitScreenshot:
			case bitmarkParser.BitFocusImage:
			case bitmarkParser.BitPhoto:
			case bitmarkParser.BitBrowserImage:
			case bitmarkParser.BitBotActionResponse:
			case bitmarkParser.BitBotActionTrueFalse:
			case bitmarkParser.BitBotActionRatingNumber:
			case bitmarkParser.BitBotActionRatingStars:
			case bitmarkParser.BitChapterSubjectMatter:
			case bitmarkParser.BitReleaseNote:
			case bitmarkParser.BitConclusion:
			case bitmarkParser.BitVendorAmcharts5Chart:
			case bitmarkParser.BitFeatured:
			case bitmarkParser.OPDANGLE:
			case bitmarkParser.OPQ:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 469;
				this.bit();
				}
				break;
			case bitmarkParser.S:
			case bitmarkParser.OPS:
			case bitmarkParser.COLON:
			case bitmarkParser.AMP:
			case bitmarkParser.Greater:
			case bitmarkParser.Less:
			case bitmarkParser.RightAngle:
			case bitmarkParser.RightArrow:
			case bitmarkParser.DBLEQ:
			case bitmarkParser.QUOTE_INDEX:
			case bitmarkParser.NUMERIC:
			case bitmarkParser.STRING:
			case bitmarkParser.NOTBITMARK:
			case bitmarkParser.SENTENCE:
			case bitmarkParser.BARSTRING:
			case bitmarkParser.AmpAudio:
			case bitmarkParser.AmpImage:
			case bitmarkParser.AmpVideo:
			case bitmarkParser.AmpArticle:
			case bitmarkParser.AmpDocument:
			case bitmarkParser.AmpApp:
			case bitmarkParser.AmpWebsite:
			case bitmarkParser.AmpStillImageFilm:
			case bitmarkParser.AmpAudioLink:
			case bitmarkParser.AmpImageLink:
			case bitmarkParser.AmpVideoLink:
			case bitmarkParser.AmpArticleLink:
			case bitmarkParser.AmpDocumentLink:
			case bitmarkParser.AmpAppLink:
			case bitmarkParser.AmpWebsiteLink:
			case bitmarkParser.AmpStillImageFilmLink:
			case bitmarkParser.BitmarkMinus:
			case bitmarkParser.BitmarkPlus:
			case bitmarkParser.URL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 470;
				this.lines();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit(): BitContext {
		let _localctx: BitContext = new BitContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, bitmarkParser.RULE_bit);
		try {
			this.state = 607;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.BitBook:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 473;
				this.book();
				}
				break;
			case bitmarkParser.BitChapter:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 474;
				this.chapter();
				}
				break;
			case bitmarkParser.BitSummary:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 475;
				this.summary();
				}
				break;
			case bitmarkParser.BitToc:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 476;
				this.toc();
				}
				break;
			case bitmarkParser.BitAlias:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 477;
				this.bit_alias();
				}
				break;
			case bitmarkParser.BitIntlink:
			case bitmarkParser.BitIntRef:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 478;
				this.internal_link();
				}
				break;
			case bitmarkParser.OPDANGLE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 479;
				this.anchor();
				}
				break;
			case bitmarkParser.BitGroups:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 480;
				this.group_born();
				}
				break;
			case bitmarkParser.BitGroupt:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 481;
				this.group_died();
				}
				break;
			case bitmarkParser.BitEssay:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 482;
				this.essay();
				}
				break;
			case bitmarkParser.BitCorrection:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 483;
				this.correction();
				}
				break;
			case bitmarkParser.BitMark:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 484;
				this.mark_();
				}
				break;
			case bitmarkParser.BitDocup:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 485;
				this.document_upload();
				}
				break;
			case bitmarkParser.BitTakepic:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 486;
				this.take_picture();
				}
				break;
			case bitmarkParser.BitTakeAudio:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 487;
				this.take_audio();
				}
				break;
			case bitmarkParser.BitRecaud:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 488;
				this.record_audio();
				}
				break;
			case bitmarkParser.BitPrepnote:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 489;
				this.preparation_note();
				}
				break;
			case bitmarkParser.BitAssign:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 490;
				this.assignment();
				}
				break;
			case bitmarkParser.BitArticle:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 491;
				this.article();
				}
				break;
			case bitmarkParser.BitStatement:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 492;
				this.statement();
				}
				break;
			case bitmarkParser.BitDetails:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 493;
				this.details();
				}
				break;
			case bitmarkParser.BitSampleSolution:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 494;
				this.sample_solution();
				}
				break;
			case bitmarkParser.BitButtonCopytext:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 495;
				this.buttoncopytext();
				}
				break;
			case bitmarkParser.BitWbtContinue:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 496;
				this.wbtcontinue();
				}
				break;
			case bitmarkParser.BitLearningPathDetails:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 497;
				this.learningpathdetails();
				}
				break;
			case bitmarkParser.BitNote:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 498;
				this.note();
				}
				break;
			case bitmarkParser.BitInfo:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 499;
				this.info();
				}
				break;
			case bitmarkParser.BitWarning:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 500;
				this.warning();
				}
				break;
			case bitmarkParser.BitRemark:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 501;
				this.remark();
				}
				break;
			case bitmarkParser.BitHint:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 502;
				this.hintbit();
				}
				break;
			case bitmarkParser.BitHelp:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 503;
				this.help();
				}
				break;
			case bitmarkParser.BitDanger:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 504;
				this.danger();
				}
				break;
			case bitmarkParser.BitBug:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 505;
				this.bug();
				}
				break;
			case bitmarkParser.BitSidenote:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 506;
				this.sidenote();
				}
				break;
			case bitmarkParser.BitStickynote:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 507;
				this.stickynote();
				}
				break;
			case bitmarkParser.BitQuote:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 508;
				this.quote();
				}
				break;
			case bitmarkParser.BitFootnote:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 509;
				this.footnote();
				}
				break;
			case bitmarkParser.BitExample:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 510;
				this.examplebit();
				}
				break;
			case bitmarkParser.BitPage:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 511;
				this.page();
				}
				break;
			case bitmarkParser.BitMessage:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 512;
				this.message();
				}
				break;
			case bitmarkParser.BitBotint:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 513;
				this.bot_interview();
				}
				break;
			case bitmarkParser.BitSelfassess:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 514;
				this.self_assessment();
				}
				break;
			case bitmarkParser.BitRating:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 515;
				this.rating();
				}
				break;
			case bitmarkParser.BitSurvey:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 516;
				this.survey();
				}
				break;
			case bitmarkParser.BitSurvey1:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 517;
				this.survey_1();
				}
				break;
			case bitmarkParser.BitSurveyanon:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 518;
				this.survey_anonymous();
				}
				break;
			case bitmarkParser.BitSurveyanon1:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 519;
				this.survey_anonymous_1();
				}
				break;
			case bitmarkParser.OPQ:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 520;
				this.hint();
				}
				break;
			case bitmarkParser.BitVendorPadletEmbed:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 521;
				this.vendor_padlet_embed();
				}
				break;
			case bitmarkParser.BitScorm:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 522;
				this.scorm();
				}
				break;
			case bitmarkParser.BitLearningPathLti:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 523;
				this.learning_path_lti();
				}
				break;
			case bitmarkParser.BitLearningPathStep:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 524;
				this.learning_path_step();
				}
				break;
			case bitmarkParser.BitLearningPathBook:
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 525;
				this.learning_path_book();
				}
				break;
			case bitmarkParser.BitLearningPathSign:
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 526;
				this.learning_path_sign();
				}
				break;
			case bitmarkParser.BitLearningPathVideoCall:
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 527;
				this.learning_path_video_call();
				}
				break;
			case bitmarkParser.BitLearningPathLearningGoal:
				this.enterOuterAlt(_localctx, 56);
				{
				this.state = 528;
				this.learning_path_learning_goal();
				}
				break;
			case bitmarkParser.BitLearningPathClosing:
				this.enterOuterAlt(_localctx, 57);
				{
				this.state = 529;
				this.learning_path_closing();
				}
				break;
			case bitmarkParser.BitLearningPathFeedback:
				this.enterOuterAlt(_localctx, 58);
				{
				this.state = 530;
				this.learning_path_feedback();
				}
				break;
			case bitmarkParser.BitLearningPathBotTraining:
				this.enterOuterAlt(_localctx, 59);
				{
				this.state = 531;
				this.learning_path_bot_training();
				}
				break;
			case bitmarkParser.BitLearningPathExternalLink:
				this.enterOuterAlt(_localctx, 60);
				{
				this.state = 532;
				this.learning_path_external_link();
				}
				break;
			case bitmarkParser.BitLearningPathClassroomTraining:
				this.enterOuterAlt(_localctx, 61);
				{
				this.state = 533;
				this.learning_path_classroom_training();
				}
				break;
			case bitmarkParser.BitLearningPathClassroomEvent:
				this.enterOuterAlt(_localctx, 62);
				{
				this.state = 534;
				this.learning_path_classroom_event();
				}
				break;
			case bitmarkParser.BitBotActionSend:
				this.enterOuterAlt(_localctx, 63);
				{
				this.state = 535;
				this.bot_action_send();
				}
				break;
			case bitmarkParser.BitBotActionAnnounce:
				this.enterOuterAlt(_localctx, 64);
				{
				this.state = 536;
				this.bot_action_announce();
				}
				break;
			case bitmarkParser.BitBotActionSave:
				this.enterOuterAlt(_localctx, 65);
				{
				this.state = 537;
				this.bot_action_save();
				}
				break;
			case bitmarkParser.BitBotActionRemind:
				this.enterOuterAlt(_localctx, 66);
				{
				this.state = 538;
				this.bot_action_remind();
				}
				break;
			case bitmarkParser.BitBotActionResponse:
				this.enterOuterAlt(_localctx, 67);
				{
				this.state = 539;
				this.bot_action_response();
				}
				break;
			case bitmarkParser.BitBotActionTrueFalse:
				this.enterOuterAlt(_localctx, 68);
				{
				this.state = 540;
				this.bot_action_true_false();
				}
				break;
			case bitmarkParser.BitBotActionRatingNumber:
				this.enterOuterAlt(_localctx, 69);
				{
				this.state = 541;
				this.bot_action_rating_number();
				}
				break;
			case bitmarkParser.BitBotActionRatingStars:
				this.enterOuterAlt(_localctx, 70);
				{
				this.state = 542;
				this.bot_action_rating_stars();
				}
				break;
			case bitmarkParser.BitImage:
				this.enterOuterAlt(_localctx, 71);
				{
				this.state = 543;
				this.bit_image();
				}
				break;
			case bitmarkParser.BitImageLink:
				this.enterOuterAlt(_localctx, 72);
				{
				this.state = 544;
				this.bit_imageLink();
				}
				break;
			case bitmarkParser.BitImageZoom:
				this.enterOuterAlt(_localctx, 73);
				{
				this.state = 545;
				this.bit_imageZoom();
				}
				break;
			case bitmarkParser.BitImagePrototype:
				this.enterOuterAlt(_localctx, 74);
				{
				this.state = 546;
				this.bit_imagePrototype();
				}
				break;
			case bitmarkParser.BitImageSuperWide:
				this.enterOuterAlt(_localctx, 75);
				{
				this.state = 547;
				this.bit_imageSuperWide();
				}
				break;
			case bitmarkParser.BitAudio:
				this.enterOuterAlt(_localctx, 76);
				{
				this.state = 548;
				this.bit_audio();
				}
				break;
			case bitmarkParser.BitAudioLink:
				this.enterOuterAlt(_localctx, 77);
				{
				this.state = 549;
				this.bit_audioLink();
				}
				break;
			case bitmarkParser.BitAudioEmbed:
				this.enterOuterAlt(_localctx, 78);
				{
				this.state = 550;
				this.bit_audioEmbed();
				}
				break;
			case bitmarkParser.BitVideo:
				this.enterOuterAlt(_localctx, 79);
				{
				this.state = 551;
				this.bit_video();
				}
				break;
			case bitmarkParser.BitVideoLink:
				this.enterOuterAlt(_localctx, 80);
				{
				this.state = 552;
				this.bit_videoLink();
				}
				break;
			case bitmarkParser.BitVideoEmbed:
				this.enterOuterAlt(_localctx, 81);
				{
				this.state = 553;
				this.bit_videoEmbed();
				}
				break;
			case bitmarkParser.BitVideoPortrait:
				this.enterOuterAlt(_localctx, 82);
				{
				this.state = 554;
				this.bit_videoPortrait();
				}
				break;
			case bitmarkParser.BitVideoLandscape:
				this.enterOuterAlt(_localctx, 83);
				{
				this.state = 555;
				this.bit_videoLandscape();
				}
				break;
			case bitmarkParser.BitStillImageFilm:
				this.enterOuterAlt(_localctx, 84);
				{
				this.state = 556;
				this.bit_stillImageFilm();
				}
				break;
			case bitmarkParser.BitStillImageFilmLink:
				this.enterOuterAlt(_localctx, 85);
				{
				this.state = 557;
				this.bit_stillImageFilmLink();
				}
				break;
			case bitmarkParser.BitStillImageFilmEmbed:
				this.enterOuterAlt(_localctx, 86);
				{
				this.state = 558;
				this.bit_stillImageFilmEmbed();
				}
				break;
			case bitmarkParser.BitDocument:
				this.enterOuterAlt(_localctx, 87);
				{
				this.state = 559;
				this.bit_document();
				}
				break;
			case bitmarkParser.BitDocumentLink:
				this.enterOuterAlt(_localctx, 88);
				{
				this.state = 560;
				this.bit_documentLink();
				}
				break;
			case bitmarkParser.BitDocumentEmbed:
				this.enterOuterAlt(_localctx, 89);
				{
				this.state = 561;
				this.bit_documentEmbed();
				}
				break;
			case bitmarkParser.BitDocumentDownload:
				this.enterOuterAlt(_localctx, 90);
				{
				this.state = 562;
				this.bit_documentDownload();
				}
				break;
			case bitmarkParser.BitWebsiteLink:
				this.enterOuterAlt(_localctx, 91);
				{
				this.state = 563;
				this.bit_websiteLink();
				}
				break;
			case bitmarkParser.BitAppLink:
				this.enterOuterAlt(_localctx, 92);
				{
				this.state = 564;
				this.bit_appLink();
				}
				break;
			case bitmarkParser.BitEditorial:
				this.enterOuterAlt(_localctx, 93);
				{
				this.state = 565;
				this.bit_editorial();
				}
				break;
			case bitmarkParser.BitBookFrontispiece:
				this.enterOuterAlt(_localctx, 94);
				{
				this.state = 566;
				this.book_frontispiece();
				}
				break;
			case bitmarkParser.BitBookTitle:
				this.enterOuterAlt(_localctx, 95);
				{
				this.state = 567;
				this.book_title();
				}
				break;
			case bitmarkParser.BitBookCopyright:
				this.enterOuterAlt(_localctx, 96);
				{
				this.state = 568;
				this.book_copyright();
				}
				break;
			case bitmarkParser.BitBookDedication:
				this.enterOuterAlt(_localctx, 97);
				{
				this.state = 569;
				this.book_dedication();
				}
				break;
			case bitmarkParser.BitBookForword:
				this.enterOuterAlt(_localctx, 98);
				{
				this.state = 570;
				this.book_forword();
				}
				break;
			case bitmarkParser.BitBookPreface:
				this.enterOuterAlt(_localctx, 99);
				{
				this.state = 571;
				this.book_preface();
				}
				break;
			case bitmarkParser.BitBookPrologue:
				this.enterOuterAlt(_localctx, 100);
				{
				this.state = 572;
				this.book_prologue();
				}
				break;
			case bitmarkParser.BitBookEpilogue:
				this.enterOuterAlt(_localctx, 101);
				{
				this.state = 573;
				this.book_epilogue();
				}
				break;
			case bitmarkParser.BitBookIntroduction:
				this.enterOuterAlt(_localctx, 102);
				{
				this.state = 574;
				this.book_introduction();
				}
				break;
			case bitmarkParser.BitBookIncitingIncident:
				this.enterOuterAlt(_localctx, 103);
				{
				this.state = 575;
				this.book_inciting_incident();
				}
				break;
			case bitmarkParser.BitBookConclusion:
				this.enterOuterAlt(_localctx, 104);
				{
				this.state = 576;
				this.book_conclusion();
				}
				break;
			case bitmarkParser.BitBookAfterword:
				this.enterOuterAlt(_localctx, 105);
				{
				this.state = 577;
				this.book_afterword();
				}
				break;
			case bitmarkParser.BitBookPostscript:
				this.enterOuterAlt(_localctx, 106);
				{
				this.state = 578;
				this.book_postscript();
				}
				break;
			case bitmarkParser.BitBookappendix:
				this.enterOuterAlt(_localctx, 107);
				{
				this.state = 579;
				this.book_appendix();
				}
				break;
			case bitmarkParser.BitBookAddendum:
				this.enterOuterAlt(_localctx, 108);
				{
				this.state = 580;
				this.book_addendum();
				}
				break;
			case bitmarkParser.BitBookAcknowledgments:
				this.enterOuterAlt(_localctx, 109);
				{
				this.state = 581;
				this.book_acknowledgments();
				}
				break;
			case bitmarkParser.BitBookListOfContributors:
				this.enterOuterAlt(_localctx, 110);
				{
				this.state = 582;
				this.book_list_of_contributors();
				}
				break;
			case bitmarkParser.BitBookBibliography:
				this.enterOuterAlt(_localctx, 111);
				{
				this.state = 583;
				this.book_bibliography();
				}
				break;
			case bitmarkParser.BitBookReferenceList:
				this.enterOuterAlt(_localctx, 112);
				{
				this.state = 584;
				this.book_reference_list();
				}
				break;
			case bitmarkParser.BitBookEndnotes:
				this.enterOuterAlt(_localctx, 113);
				{
				this.state = 585;
				this.book_endnotes();
				}
				break;
			case bitmarkParser.BitBookNotes:
				this.enterOuterAlt(_localctx, 114);
				{
				this.state = 586;
				this.book_notes();
				}
				break;
			case bitmarkParser.BitBookCopyrightPermissions:
				this.enterOuterAlt(_localctx, 115);
				{
				this.state = 587;
				this.book_copyright_permissions();
				}
				break;
			case bitmarkParser.BitBookTeaser:
				this.enterOuterAlt(_localctx, 116);
				{
				this.state = 588;
				this.book_teaser();
				}
				break;
			case bitmarkParser.BitBookAutherBio:
				this.enterOuterAlt(_localctx, 117);
				{
				this.state = 589;
				this.book_auther_bio();
				}
				break;
			case bitmarkParser.BitBookRequestForABookReview:
				this.enterOuterAlt(_localctx, 118);
				{
				this.state = 590;
				this.book_request_for_a_book_review();
				}
				break;
			case bitmarkParser.BitBookComingSoon:
				this.enterOuterAlt(_localctx, 119);
				{
				this.state = 591;
				this.book_coming_soon();
				}
				break;
			case bitmarkParser.BitBookReadMore:
				this.enterOuterAlt(_localctx, 120);
				{
				this.state = 592;
				this.book_read_more();
				}
				break;
			case bitmarkParser.BitBookSummary:
				this.enterOuterAlt(_localctx, 121);
				{
				this.state = 593;
				this.book_summary();
				}
				break;
			case bitmarkParser.BitBookEpigraph:
				this.enterOuterAlt(_localctx, 122);
				{
				this.state = 594;
				this.book_epigraph();
				}
				break;
			case bitmarkParser.BitCode:
				this.enterOuterAlt(_localctx, 123);
				{
				this.state = 595;
				this.code();
				}
				break;
			case bitmarkParser.BitCard1:
				this.enterOuterAlt(_localctx, 124);
				{
				this.state = 596;
				this.card1();
				}
				break;
			case bitmarkParser.BitQuestion1:
				this.enterOuterAlt(_localctx, 125);
				{
				this.state = 597;
				this.question1();
				}
				break;
			case bitmarkParser.BitScreenshot:
				this.enterOuterAlt(_localctx, 126);
				{
				this.state = 598;
				this.screenshot();
				}
				break;
			case bitmarkParser.BitFocusImage:
				this.enterOuterAlt(_localctx, 127);
				{
				this.state = 599;
				this.focus_image();
				}
				break;
			case bitmarkParser.BitPhoto:
				this.enterOuterAlt(_localctx, 128);
				{
				this.state = 600;
				this.photo();
				}
				break;
			case bitmarkParser.BitBrowserImage:
				this.enterOuterAlt(_localctx, 129);
				{
				this.state = 601;
				this.browser_image();
				}
				break;
			case bitmarkParser.BitChapterSubjectMatter:
				this.enterOuterAlt(_localctx, 130);
				{
				this.state = 602;
				this.chapter_subject_matter();
				}
				break;
			case bitmarkParser.BitReleaseNote:
				this.enterOuterAlt(_localctx, 131);
				{
				this.state = 603;
				this.release_note();
				}
				break;
			case bitmarkParser.BitConclusion:
				this.enterOuterAlt(_localctx, 132);
				{
				this.state = 604;
				this.conclusion();
				}
				break;
			case bitmarkParser.BitFeatured:
				this.enterOuterAlt(_localctx, 133);
				{
				this.state = 605;
				this.featured();
				}
				break;
			case bitmarkParser.BitVendorAmcharts5Chart:
				this.enterOuterAlt(_localctx, 134);
				{
				this.state = 606;
				this.vendor_amcharts_5_chart();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book(): BookContext {
		let _localctx: BookContext = new BookContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, bitmarkParser.RULE_book);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 609;
			this.match(bitmarkParser.BitBook);
			this.state = 611;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 6, this._ctx) ) {
			case 1:
				{
				this.state = 610;
				this.format();
				}
				break;
			}
			this.state = 613;
			this.match(bitmarkParser.CL);
			this.state = 621;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 617;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 614;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 619;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 620;
					this.bitElem();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 623;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public chapter(): ChapterContext {
		let _localctx: ChapterContext = new ChapterContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, bitmarkParser.RULE_chapter);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 625;
			this.match(bitmarkParser.BitChapter);
			this.state = 627;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 9, this._ctx) ) {
			case 1:
				{
				this.state = 626;
				this.format();
				}
				break;
			}
			this.state = 629;
			this.match(bitmarkParser.CL);
			this.state = 633;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 630;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 635;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 639;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 11, this._ctx) ) {
			case 1:
				{
				this.state = 636;
				this.anchor();
				this.state = 637;
				this.match(bitmarkParser.NL);
				}
				break;
			}
			this.state = 641;
			this.resource();
			this.state = 651;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 645;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 642;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 647;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 648;
					this.resource();
					}
					}
				}
				this.state = 653;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public toc(): TocContext {
		let _localctx: TocContext = new TocContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, bitmarkParser.RULE_toc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 654;
			this.match(bitmarkParser.BitToc);
			this.state = 656;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
				{
				this.state = 655;
				this.s_and_w();
				}
			}

			this.state = 658;
			this.match(bitmarkParser.CL);
			this.state = 659;
			this.match(bitmarkParser.NL);
			this.state = 663;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPA || _la === bitmarkParser.OpAtCopyright) {
				{
				this.state = 660;
				this.atdef();
				this.state = 661;
				this.match(bitmarkParser.NL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public summary(): SummaryContext {
		let _localctx: SummaryContext = new SummaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, bitmarkParser.RULE_summary);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 665;
			this.match(bitmarkParser.BitSummary);
			this.state = 666;
			this.match(bitmarkParser.CL);
			this.state = 670;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 667;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 672;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
			}
			this.state = 673;
			this.title_etc();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public internal_link(): Internal_linkContext {
		let _localctx: Internal_linkContext = new Internal_linkContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, bitmarkParser.RULE_internal_link);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 675;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.BitIntlink || _la === bitmarkParser.BitIntRef)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 677;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
				{
				this.state = 676;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 679;
			this.match(bitmarkParser.CL);
			this.state = 689;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 683;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 680;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 685;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 686;
					this.bitElem();
					}
					}
				}
				this.state = 691;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_alias(): Bit_aliasContext {
		let _localctx: Bit_aliasContext = new Bit_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, bitmarkParser.RULE_bit_alias);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 692;
			this.match(bitmarkParser.BitAlias);
			this.state = 693;
			this.match(bitmarkParser.CL);
			this.state = 694;
			this.angleref();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public title_etc(): Title_etcContext {
		let _localctx: Title_etcContext = new Title_etcContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, bitmarkParser.RULE_title_etc);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 710;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 697;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === bitmarkParser.NL) {
						{
						this.state = 696;
						this.match(bitmarkParser.NL);
						}
					}

					this.state = 706;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.OPHASH:
						{
						this.state = 699;
						this.title();
						}
						break;
					case bitmarkParser.OPA:
					case bitmarkParser.OpAtCopyright:
						{
						this.state = 700;
						this.atdef();
						}
						break;
					case bitmarkParser.OPC:
						{
						this.state = 701;
						this.item();
						}
						break;
					case bitmarkParser.OPB:
						{
						this.state = 702;
						this.instruction();
						}
						break;
					case bitmarkParser.OPRANGLES:
					case bitmarkParser.OPRANGLEL:
						{
						this.state = 703;
						this.angleref();
						}
						break;
					case bitmarkParser.OPDANGLE:
						{
						this.state = 704;
						this.anchor();
						}
						break;
					case bitmarkParser.AtProgress:
						{
						this.state = 705;
						this.progress();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 712;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_born(): Group_bornContext {
		let _localctx: Group_bornContext = new Group_bornContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, bitmarkParser.RULE_group_born);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 713;
			this.match(bitmarkParser.BitGroups);
			this.state = 714;
			this.match(bitmarkParser.CL);
			this.state = 724;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 715;
					this.match(bitmarkParser.NL);
					this.state = 716;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 719;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						this.state = 719;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 23, this._ctx) ) {
						case 1:
							{
							this.state = 717;
							this.s_and_w();
							}
							break;

						case 2:
							{
							this.state = 718;
							this.match(bitmarkParser.COLON);
							}
							break;
						}
						}
						this.state = 721;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
					this.state = 723;
					this.match(bitmarkParser.CL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 726;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 728;
			this.match(bitmarkParser.NL);
			this.state = 732;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 26, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 729;
					this.lines();
					}
					}
				}
				this.state = 734;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 26, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_died(): Group_diedContext {
		let _localctx: Group_diedContext = new Group_diedContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, bitmarkParser.RULE_group_died);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 735;
			this.match(bitmarkParser.BitGroupt);
			this.state = 736;
			this.match(bitmarkParser.CL);
			this.state = 746;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 737;
					this.match(bitmarkParser.NL);
					this.state = 738;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 741;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						this.state = 741;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 27, this._ctx) ) {
						case 1:
							{
							this.state = 739;
							this.s_and_w();
							}
							break;

						case 2:
							{
							this.state = 740;
							this.match(bitmarkParser.COLON);
							}
							break;
						}
						}
						this.state = 743;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
					this.state = 745;
					this.match(bitmarkParser.CL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 748;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 29, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 750;
			this.match(bitmarkParser.NL);
			this.state = 754;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 751;
					this.lines();
					}
					}
				}
				this.state = 756;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_lti(): Learning_path_ltiContext {
		let _localctx: Learning_path_ltiContext = new Learning_path_ltiContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, bitmarkParser.RULE_learning_path_lti);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 757;
			this.match(bitmarkParser.BitLearningPathLti);
			this.state = 758;
			this.format();
			this.state = 759;
			this.match(bitmarkParser.CL);
			this.state = 763;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 760;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 765;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 773;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 766;
					this.bitElem();
					this.state = 770;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 767;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 772;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 775;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_step(): Learning_path_stepContext {
		let _localctx: Learning_path_stepContext = new Learning_path_stepContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, bitmarkParser.RULE_learning_path_step);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 777;
			this.match(bitmarkParser.BitLearningPathStep);
			this.state = 778;
			this.format();
			this.state = 779;
			this.match(bitmarkParser.CL);
			this.state = 783;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 780;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 785;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 793;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 786;
					this.bitElem();
					this.state = 790;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 787;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 792;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 795;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_book(): Learning_path_bookContext {
		let _localctx: Learning_path_bookContext = new Learning_path_bookContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, bitmarkParser.RULE_learning_path_book);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 797;
			this.match(bitmarkParser.BitLearningPathBook);
			this.state = 798;
			this.format();
			this.state = 799;
			this.match(bitmarkParser.CL);
			this.state = 803;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 800;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 813;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 806;
					this.bitElem();
					this.state = 810;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 807;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 812;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 815;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 39, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_sign(): Learning_path_signContext {
		let _localctx: Learning_path_signContext = new Learning_path_signContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, bitmarkParser.RULE_learning_path_sign);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 817;
			this.match(bitmarkParser.BitLearningPathSign);
			this.state = 818;
			this.format();
			this.state = 819;
			this.match(bitmarkParser.CL);
			this.state = 823;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 820;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 825;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 833;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 826;
					this.bitElem();
					this.state = 830;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 827;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 832;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 835;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_video_call(): Learning_path_video_callContext {
		let _localctx: Learning_path_video_callContext = new Learning_path_video_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, bitmarkParser.RULE_learning_path_video_call);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 837;
			this.match(bitmarkParser.BitLearningPathVideoCall);
			this.state = 838;
			this.format();
			this.state = 839;
			this.match(bitmarkParser.CL);
			this.state = 843;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 840;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 845;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 853;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 846;
					this.bitElem();
					this.state = 850;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 847;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 852;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 855;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 45, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_learning_goal(): Learning_path_learning_goalContext {
		let _localctx: Learning_path_learning_goalContext = new Learning_path_learning_goalContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, bitmarkParser.RULE_learning_path_learning_goal);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 857;
			this.match(bitmarkParser.BitLearningPathLearningGoal);
			this.state = 858;
			this.format();
			this.state = 859;
			this.match(bitmarkParser.CL);
			this.state = 863;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 860;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 865;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 873;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 866;
					this.bitElem();
					this.state = 870;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 867;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 872;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 875;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_closing(): Learning_path_closingContext {
		let _localctx: Learning_path_closingContext = new Learning_path_closingContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, bitmarkParser.RULE_learning_path_closing);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 877;
			this.match(bitmarkParser.BitLearningPathClosing);
			this.state = 878;
			this.format();
			this.state = 879;
			this.match(bitmarkParser.CL);
			this.state = 883;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 880;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 885;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 893;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 886;
					this.bitElem();
					this.state = 890;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 887;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 892;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 895;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 51, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_feedback(): Learning_path_feedbackContext {
		let _localctx: Learning_path_feedbackContext = new Learning_path_feedbackContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, bitmarkParser.RULE_learning_path_feedback);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 897;
			this.match(bitmarkParser.BitLearningPathFeedback);
			this.state = 898;
			this.format();
			this.state = 899;
			this.match(bitmarkParser.CL);
			this.state = 903;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 900;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 905;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 913;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 906;
					this.bitElem();
					this.state = 910;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 907;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 912;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 915;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 54, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_bot_training(): Learning_path_bot_trainingContext {
		let _localctx: Learning_path_bot_trainingContext = new Learning_path_bot_trainingContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, bitmarkParser.RULE_learning_path_bot_training);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 917;
			this.match(bitmarkParser.BitLearningPathBotTraining);
			this.state = 918;
			this.format();
			this.state = 919;
			this.match(bitmarkParser.CL);
			this.state = 923;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 920;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 925;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 933;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 926;
					this.bitElem();
					this.state = 930;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 927;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 932;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 935;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 57, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_external_link(): Learning_path_external_linkContext {
		let _localctx: Learning_path_external_linkContext = new Learning_path_external_linkContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, bitmarkParser.RULE_learning_path_external_link);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 937;
			this.match(bitmarkParser.BitLearningPathExternalLink);
			this.state = 938;
			this.format();
			this.state = 939;
			this.match(bitmarkParser.CL);
			this.state = 943;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 940;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 945;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 953;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 946;
					this.bitElem();
					this.state = 950;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 947;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 952;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 955;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_classroom_training(): Learning_path_classroom_trainingContext {
		let _localctx: Learning_path_classroom_trainingContext = new Learning_path_classroom_trainingContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, bitmarkParser.RULE_learning_path_classroom_training);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 957;
			this.match(bitmarkParser.BitLearningPathClassroomTraining);
			this.state = 958;
			this.format();
			this.state = 959;
			this.match(bitmarkParser.CL);
			this.state = 963;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 960;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 965;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 973;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 966;
					this.bitElem();
					this.state = 970;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 967;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 972;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 975;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learning_path_classroom_event(): Learning_path_classroom_eventContext {
		let _localctx: Learning_path_classroom_eventContext = new Learning_path_classroom_eventContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, bitmarkParser.RULE_learning_path_classroom_event);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 977;
			this.match(bitmarkParser.BitLearningPathClassroomEvent);
			this.state = 978;
			this.format();
			this.state = 979;
			this.match(bitmarkParser.CL);
			this.state = 983;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 980;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 993;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 986;
					this.bitElem();
					this.state = 990;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 987;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 992;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 995;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 66, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_send(): Bot_action_sendContext {
		let _localctx: Bot_action_sendContext = new Bot_action_sendContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, bitmarkParser.RULE_bot_action_send);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 997;
			this.match(bitmarkParser.BitBotActionSend);
			this.state = 998;
			this.format();
			this.state = 999;
			this.match(bitmarkParser.CL);
			this.state = 1003;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1000;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1013;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1006;
					this.bitElem();
					this.state = 1010;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1007;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1012;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1015;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 69, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_announce(): Bot_action_announceContext {
		let _localctx: Bot_action_announceContext = new Bot_action_announceContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, bitmarkParser.RULE_bot_action_announce);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1017;
			this.match(bitmarkParser.BitBotActionAnnounce);
			this.state = 1018;
			this.format();
			this.state = 1019;
			this.match(bitmarkParser.CL);
			this.state = 1023;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1020;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1025;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1033;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1026;
					this.bitElem();
					this.state = 1030;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1027;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1032;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1035;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 72, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_save(): Bot_action_saveContext {
		let _localctx: Bot_action_saveContext = new Bot_action_saveContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, bitmarkParser.RULE_bot_action_save);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1037;
			this.match(bitmarkParser.BitBotActionSave);
			this.state = 1038;
			this.format();
			this.state = 1039;
			this.match(bitmarkParser.CL);
			this.state = 1043;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1040;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1045;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1053;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1046;
					this.bitElem();
					this.state = 1050;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1047;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1052;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1055;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 75, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_remind(): Bot_action_remindContext {
		let _localctx: Bot_action_remindContext = new Bot_action_remindContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, bitmarkParser.RULE_bot_action_remind);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1057;
			this.match(bitmarkParser.BitBotActionRemind);
			this.state = 1058;
			this.format();
			this.state = 1059;
			this.match(bitmarkParser.CL);
			this.state = 1063;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1060;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1065;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1073;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1066;
					this.bitElem();
					this.state = 1070;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1067;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1072;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1075;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 78, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_response(): Bot_action_responseContext {
		let _localctx: Bot_action_responseContext = new Bot_action_responseContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, bitmarkParser.RULE_bot_action_response);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1077;
			this.match(bitmarkParser.BitBotActionResponse);
			this.state = 1078;
			this.format();
			this.state = 1079;
			this.match(bitmarkParser.CL);
			this.state = 1083;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1080;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1085;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1093;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1086;
				this.bitElem();
				this.state = 1090;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 1087;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 1092;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1095;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (bitmarkParser.OPDOLL - 139)) | (1 << (bitmarkParser.OPRANGLES - 139)) | (1 << (bitmarkParser.OPRANGLEL - 139)) | (1 << (bitmarkParser.OPDANGLE - 139)) | (1 << (bitmarkParser.OPU - 139)) | (1 << (bitmarkParser.OPB - 139)) | (1 << (bitmarkParser.OPQ - 139)) | (1 << (bitmarkParser.OPA - 139)) | (1 << (bitmarkParser.OPS - 139)) | (1 << (bitmarkParser.OPHASH - 139)) | (1 << (bitmarkParser.OPC - 139)) | (1 << (bitmarkParser.COLON - 139)) | (1 << (bitmarkParser.AMP - 139)) | (1 << (bitmarkParser.Greater - 139)) | (1 << (bitmarkParser.Less - 139)) | (1 << (bitmarkParser.RightAngle - 139)) | (1 << (bitmarkParser.RightArrow - 139)) | (1 << (bitmarkParser.DBLEQ - 139)) | (1 << (bitmarkParser.QUOTE_INDEX - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (bitmarkParser.DCANY - 171)) | (1 << (bitmarkParser.ArticleText - 171)) | (1 << (bitmarkParser.NUMERIC - 171)) | (1 << (bitmarkParser.STRING - 171)) | (1 << (bitmarkParser.NOTBITMARK - 171)) | (1 << (bitmarkParser.SENTENCE - 171)) | (1 << (bitmarkParser.BARSTRING - 171)) | (1 << (bitmarkParser.AtProgress - 171)) | (1 << (bitmarkParser.AtReference - 171)) | (1 << (bitmarkParser.AtProgressPoints - 171)) | (1 << (bitmarkParser.AtExampleWithStr - 171)) | (1 << (bitmarkParser.AtExamplecol - 171)) | (1 << (bitmarkParser.AtExamplecl - 171)) | (1 << (bitmarkParser.AtPartialAnswerS - 171)) | (1 << (bitmarkParser.AtPartialAnswer - 171)) | (1 << (bitmarkParser.AtLabeltrue - 171)) | (1 << (bitmarkParser.AtLabelfalse - 171)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (bitmarkParser.OpAtCopyright - 206)) | (1 << (bitmarkParser.OpAtIsTracked - 206)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 206)) | (1 << (bitmarkParser.AtDate - 206)) | (1 << (bitmarkParser.AmpAudio - 206)) | (1 << (bitmarkParser.AmpImage - 206)) | (1 << (bitmarkParser.AmpVideo - 206)) | (1 << (bitmarkParser.AmpArticle - 206)) | (1 << (bitmarkParser.AmpDocument - 206)) | (1 << (bitmarkParser.AmpApp - 206)) | (1 << (bitmarkParser.AmpWebsite - 206)) | (1 << (bitmarkParser.AmpStillImageFilm - 206)) | (1 << (bitmarkParser.OpAmpAudio - 206)) | (1 << (bitmarkParser.OpAmpImage - 206)) | (1 << (bitmarkParser.OpAmpImageZoom - 206)) | (1 << (bitmarkParser.OpAmpImageWAudio - 206)) | (1 << (bitmarkParser.OpAmpVideo - 206)) | (1 << (bitmarkParser.OpAmpArticle - 206)) | (1 << (bitmarkParser.OpAmpDocument - 206)) | (1 << (bitmarkParser.OpAmpApp - 206)) | (1 << (bitmarkParser.OpAmpWebsite - 206)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 206)) | (1 << (bitmarkParser.BracEnclose - 206)) | (1 << (bitmarkParser.AmpAudioLink - 206)) | (1 << (bitmarkParser.AmpImageLink - 206)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (bitmarkParser.AmpVideoLink - 238)) | (1 << (bitmarkParser.AmpArticleLink - 238)) | (1 << (bitmarkParser.AmpDocumentLink - 238)) | (1 << (bitmarkParser.AmpAppLink - 238)) | (1 << (bitmarkParser.AmpWebsiteLink - 238)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpAudioLink - 238)) | (1 << (bitmarkParser.OpAmpImageLink - 238)) | (1 << (bitmarkParser.OpAmpVideoLink - 238)) | (1 << (bitmarkParser.OpAmpArticleLink - 238)) | (1 << (bitmarkParser.OpAmpDocumentLink - 238)) | (1 << (bitmarkParser.OpAmpAppLink - 238)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 238)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 238)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 238)) | (1 << (bitmarkParser.BitmarkMinus - 238)) | (1 << (bitmarkParser.BitmarkPlus - 238)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE);
			this.state = 1098;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1097;
					this.bot_action();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1100;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 82, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1102;
			this.match(bitmarkParser.HSPL);
			this.state = 1104;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 83, this._ctx) ) {
			case 1:
				{
				this.state = 1103;
				this.footer();
				}
				break;
			}
			this.state = 1109;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 84, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1106;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1111;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 84, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_true_false(): Bot_action_true_falseContext {
		let _localctx: Bot_action_true_falseContext = new Bot_action_true_falseContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, bitmarkParser.RULE_bot_action_true_false);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1112;
			this.match(bitmarkParser.BitBotActionTrueFalse);
			this.state = 1113;
			this.format();
			this.state = 1114;
			this.match(bitmarkParser.CL);
			this.state = 1118;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1115;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1120;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1128;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1121;
				this.bitElem();
				this.state = 1125;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 1122;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 1127;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1130;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (bitmarkParser.OPDOLL - 139)) | (1 << (bitmarkParser.OPRANGLES - 139)) | (1 << (bitmarkParser.OPRANGLEL - 139)) | (1 << (bitmarkParser.OPDANGLE - 139)) | (1 << (bitmarkParser.OPU - 139)) | (1 << (bitmarkParser.OPB - 139)) | (1 << (bitmarkParser.OPQ - 139)) | (1 << (bitmarkParser.OPA - 139)) | (1 << (bitmarkParser.OPS - 139)) | (1 << (bitmarkParser.OPHASH - 139)) | (1 << (bitmarkParser.OPC - 139)) | (1 << (bitmarkParser.COLON - 139)) | (1 << (bitmarkParser.AMP - 139)) | (1 << (bitmarkParser.Greater - 139)) | (1 << (bitmarkParser.Less - 139)) | (1 << (bitmarkParser.RightAngle - 139)) | (1 << (bitmarkParser.RightArrow - 139)) | (1 << (bitmarkParser.DBLEQ - 139)) | (1 << (bitmarkParser.QUOTE_INDEX - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (bitmarkParser.DCANY - 171)) | (1 << (bitmarkParser.ArticleText - 171)) | (1 << (bitmarkParser.NUMERIC - 171)) | (1 << (bitmarkParser.STRING - 171)) | (1 << (bitmarkParser.NOTBITMARK - 171)) | (1 << (bitmarkParser.SENTENCE - 171)) | (1 << (bitmarkParser.BARSTRING - 171)) | (1 << (bitmarkParser.AtProgress - 171)) | (1 << (bitmarkParser.AtReference - 171)) | (1 << (bitmarkParser.AtProgressPoints - 171)) | (1 << (bitmarkParser.AtExampleWithStr - 171)) | (1 << (bitmarkParser.AtExamplecol - 171)) | (1 << (bitmarkParser.AtExamplecl - 171)) | (1 << (bitmarkParser.AtPartialAnswerS - 171)) | (1 << (bitmarkParser.AtPartialAnswer - 171)) | (1 << (bitmarkParser.AtLabeltrue - 171)) | (1 << (bitmarkParser.AtLabelfalse - 171)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (bitmarkParser.OpAtCopyright - 206)) | (1 << (bitmarkParser.OpAtIsTracked - 206)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 206)) | (1 << (bitmarkParser.AtDate - 206)) | (1 << (bitmarkParser.AmpAudio - 206)) | (1 << (bitmarkParser.AmpImage - 206)) | (1 << (bitmarkParser.AmpVideo - 206)) | (1 << (bitmarkParser.AmpArticle - 206)) | (1 << (bitmarkParser.AmpDocument - 206)) | (1 << (bitmarkParser.AmpApp - 206)) | (1 << (bitmarkParser.AmpWebsite - 206)) | (1 << (bitmarkParser.AmpStillImageFilm - 206)) | (1 << (bitmarkParser.OpAmpAudio - 206)) | (1 << (bitmarkParser.OpAmpImage - 206)) | (1 << (bitmarkParser.OpAmpImageZoom - 206)) | (1 << (bitmarkParser.OpAmpImageWAudio - 206)) | (1 << (bitmarkParser.OpAmpVideo - 206)) | (1 << (bitmarkParser.OpAmpArticle - 206)) | (1 << (bitmarkParser.OpAmpDocument - 206)) | (1 << (bitmarkParser.OpAmpApp - 206)) | (1 << (bitmarkParser.OpAmpWebsite - 206)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 206)) | (1 << (bitmarkParser.BracEnclose - 206)) | (1 << (bitmarkParser.AmpAudioLink - 206)) | (1 << (bitmarkParser.AmpImageLink - 206)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (bitmarkParser.AmpVideoLink - 238)) | (1 << (bitmarkParser.AmpArticleLink - 238)) | (1 << (bitmarkParser.AmpDocumentLink - 238)) | (1 << (bitmarkParser.AmpAppLink - 238)) | (1 << (bitmarkParser.AmpWebsiteLink - 238)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpAudioLink - 238)) | (1 << (bitmarkParser.OpAmpImageLink - 238)) | (1 << (bitmarkParser.OpAmpVideoLink - 238)) | (1 << (bitmarkParser.OpAmpArticleLink - 238)) | (1 << (bitmarkParser.OpAmpDocumentLink - 238)) | (1 << (bitmarkParser.OpAmpAppLink - 238)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 238)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 238)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 238)) | (1 << (bitmarkParser.BitmarkMinus - 238)) | (1 << (bitmarkParser.BitmarkPlus - 238)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE);
			this.state = 1133;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1132;
					this.bot_action();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1135;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1137;
			this.match(bitmarkParser.HSPL);
			this.state = 1139;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 89, this._ctx) ) {
			case 1:
				{
				this.state = 1138;
				this.footer();
				}
				break;
			}
			this.state = 1144;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 90, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1141;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1146;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 90, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_rating_number(): Bot_action_rating_numberContext {
		let _localctx: Bot_action_rating_numberContext = new Bot_action_rating_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, bitmarkParser.RULE_bot_action_rating_number);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1147;
			this.match(bitmarkParser.BitBotActionRatingNumber);
			this.state = 1148;
			this.format();
			this.state = 1149;
			this.match(bitmarkParser.CL);
			this.state = 1153;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1150;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1155;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1163;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1156;
				this.bitElem();
				this.state = 1160;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 1157;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 1162;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1165;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (bitmarkParser.OPDOLL - 139)) | (1 << (bitmarkParser.OPRANGLES - 139)) | (1 << (bitmarkParser.OPRANGLEL - 139)) | (1 << (bitmarkParser.OPDANGLE - 139)) | (1 << (bitmarkParser.OPU - 139)) | (1 << (bitmarkParser.OPB - 139)) | (1 << (bitmarkParser.OPQ - 139)) | (1 << (bitmarkParser.OPA - 139)) | (1 << (bitmarkParser.OPS - 139)) | (1 << (bitmarkParser.OPHASH - 139)) | (1 << (bitmarkParser.OPC - 139)) | (1 << (bitmarkParser.COLON - 139)) | (1 << (bitmarkParser.AMP - 139)) | (1 << (bitmarkParser.Greater - 139)) | (1 << (bitmarkParser.Less - 139)) | (1 << (bitmarkParser.RightAngle - 139)) | (1 << (bitmarkParser.RightArrow - 139)) | (1 << (bitmarkParser.DBLEQ - 139)) | (1 << (bitmarkParser.QUOTE_INDEX - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (bitmarkParser.DCANY - 171)) | (1 << (bitmarkParser.ArticleText - 171)) | (1 << (bitmarkParser.NUMERIC - 171)) | (1 << (bitmarkParser.STRING - 171)) | (1 << (bitmarkParser.NOTBITMARK - 171)) | (1 << (bitmarkParser.SENTENCE - 171)) | (1 << (bitmarkParser.BARSTRING - 171)) | (1 << (bitmarkParser.AtProgress - 171)) | (1 << (bitmarkParser.AtReference - 171)) | (1 << (bitmarkParser.AtProgressPoints - 171)) | (1 << (bitmarkParser.AtExampleWithStr - 171)) | (1 << (bitmarkParser.AtExamplecol - 171)) | (1 << (bitmarkParser.AtExamplecl - 171)) | (1 << (bitmarkParser.AtPartialAnswerS - 171)) | (1 << (bitmarkParser.AtPartialAnswer - 171)) | (1 << (bitmarkParser.AtLabeltrue - 171)) | (1 << (bitmarkParser.AtLabelfalse - 171)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (bitmarkParser.OpAtCopyright - 206)) | (1 << (bitmarkParser.OpAtIsTracked - 206)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 206)) | (1 << (bitmarkParser.AtDate - 206)) | (1 << (bitmarkParser.AmpAudio - 206)) | (1 << (bitmarkParser.AmpImage - 206)) | (1 << (bitmarkParser.AmpVideo - 206)) | (1 << (bitmarkParser.AmpArticle - 206)) | (1 << (bitmarkParser.AmpDocument - 206)) | (1 << (bitmarkParser.AmpApp - 206)) | (1 << (bitmarkParser.AmpWebsite - 206)) | (1 << (bitmarkParser.AmpStillImageFilm - 206)) | (1 << (bitmarkParser.OpAmpAudio - 206)) | (1 << (bitmarkParser.OpAmpImage - 206)) | (1 << (bitmarkParser.OpAmpImageZoom - 206)) | (1 << (bitmarkParser.OpAmpImageWAudio - 206)) | (1 << (bitmarkParser.OpAmpVideo - 206)) | (1 << (bitmarkParser.OpAmpArticle - 206)) | (1 << (bitmarkParser.OpAmpDocument - 206)) | (1 << (bitmarkParser.OpAmpApp - 206)) | (1 << (bitmarkParser.OpAmpWebsite - 206)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 206)) | (1 << (bitmarkParser.BracEnclose - 206)) | (1 << (bitmarkParser.AmpAudioLink - 206)) | (1 << (bitmarkParser.AmpImageLink - 206)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (bitmarkParser.AmpVideoLink - 238)) | (1 << (bitmarkParser.AmpArticleLink - 238)) | (1 << (bitmarkParser.AmpDocumentLink - 238)) | (1 << (bitmarkParser.AmpAppLink - 238)) | (1 << (bitmarkParser.AmpWebsiteLink - 238)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpAudioLink - 238)) | (1 << (bitmarkParser.OpAmpImageLink - 238)) | (1 << (bitmarkParser.OpAmpVideoLink - 238)) | (1 << (bitmarkParser.OpAmpArticleLink - 238)) | (1 << (bitmarkParser.OpAmpDocumentLink - 238)) | (1 << (bitmarkParser.OpAmpAppLink - 238)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 238)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 238)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 238)) | (1 << (bitmarkParser.BitmarkMinus - 238)) | (1 << (bitmarkParser.BitmarkPlus - 238)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE);
			this.state = 1168;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1167;
					this.bot_action();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1170;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1172;
			this.match(bitmarkParser.HSPL);
			this.state = 1174;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 95, this._ctx) ) {
			case 1:
				{
				this.state = 1173;
				this.footer();
				}
				break;
			}
			this.state = 1179;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 96, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1176;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1181;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 96, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action_rating_stars(): Bot_action_rating_starsContext {
		let _localctx: Bot_action_rating_starsContext = new Bot_action_rating_starsContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, bitmarkParser.RULE_bot_action_rating_stars);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1182;
			this.match(bitmarkParser.BitBotActionRatingStars);
			this.state = 1183;
			this.format();
			this.state = 1184;
			this.match(bitmarkParser.CL);
			this.state = 1188;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1185;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1190;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1198;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1191;
					this.bitElem();
					this.state = 1195;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 98, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1192;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1197;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 98, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1200;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 99, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_action(): Bot_actionContext {
		let _localctx: Bot_actionContext = new Bot_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, bitmarkParser.RULE_bot_action);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1202;
			this.match(bitmarkParser.HSPL);
			this.state = 1203;
			this.bo_actions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bo_actions(): Bo_actionsContext {
		let _localctx: Bo_actionsContext = new Bo_actionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, bitmarkParser.RULE_bo_actions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1218;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1208;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 1205;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 1210;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1211;
				this.boacts();
				this.state = 1215;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1212;
						this.match(bitmarkParser.NL);
						}
						}
					}
					this.state = 1217;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
				}
				}
				}
				this.state = 1220;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 145)) & ~0x1F) === 0 && ((1 << (_la - 145)) & ((1 << (bitmarkParser.OPB - 145)) | (1 << (bitmarkParser.OPQ - 145)) | (1 << (bitmarkParser.OPA - 145)) | (1 << (bitmarkParser.OPP - 145)) | (1 << (bitmarkParser.OPM - 145)) | (1 << (bitmarkParser.OPS - 145)) | (1 << (bitmarkParser.OPC - 145)) | (1 << (bitmarkParser.COLON - 145)) | (1 << (bitmarkParser.AMP - 145)) | (1 << (bitmarkParser.Greater - 145)) | (1 << (bitmarkParser.Less - 145)) | (1 << (bitmarkParser.RightAngle - 145)) | (1 << (bitmarkParser.RightArrow - 145)) | (1 << (bitmarkParser.DBLEQ - 145)) | (1 << (bitmarkParser.QUOTE_INDEX - 145)))) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & ((1 << (bitmarkParser.NUMERIC - 177)) | (1 << (bitmarkParser.STRING - 177)) | (1 << (bitmarkParser.NL - 177)) | (1 << (bitmarkParser.NOTBITMARK - 177)) | (1 << (bitmarkParser.SENTENCE - 177)) | (1 << (bitmarkParser.BARSTRING - 177)) | (1 << (bitmarkParser.OpAtCopyright - 177)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (bitmarkParser.AmpAudio - 213)) | (1 << (bitmarkParser.AmpImage - 213)) | (1 << (bitmarkParser.AmpVideo - 213)) | (1 << (bitmarkParser.AmpArticle - 213)) | (1 << (bitmarkParser.AmpDocument - 213)) | (1 << (bitmarkParser.AmpApp - 213)) | (1 << (bitmarkParser.AmpWebsite - 213)) | (1 << (bitmarkParser.AmpStillImageFilm - 213)) | (1 << (bitmarkParser.AmpAudioLink - 213)) | (1 << (bitmarkParser.AmpImageLink - 213)) | (1 << (bitmarkParser.AmpVideoLink - 213)) | (1 << (bitmarkParser.AmpArticleLink - 213)) | (1 << (bitmarkParser.AmpDocumentLink - 213)) | (1 << (bitmarkParser.AmpAppLink - 213)) | (1 << (bitmarkParser.AmpWebsiteLink - 213)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 213)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)) | (1 << (bitmarkParser.ENCLBARS - 262)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public boacts(): BoactsContext {
		let _localctx: BoactsContext = new BoactsContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, bitmarkParser.RULE_boacts);
		try {
			this.state = 1229;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1222;
				this.instruction();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1223;
				this.item();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1224;
				this.atdef();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1225;
				this.hint();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1226;
				this.choice_minus();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1227;
				this.choice_plus();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1228;
				this.feedback();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public feedback(): FeedbackContext {
		let _localctx: FeedbackContext = new FeedbackContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, bitmarkParser.RULE_feedback);
		try {
			this.state = 1233;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.ENCLBARS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1231;
				this.match(bitmarkParser.ENCLBARS);
				}
				break;
			case bitmarkParser.S:
			case bitmarkParser.OPS:
			case bitmarkParser.COLON:
			case bitmarkParser.AMP:
			case bitmarkParser.Greater:
			case bitmarkParser.Less:
			case bitmarkParser.RightAngle:
			case bitmarkParser.RightArrow:
			case bitmarkParser.DBLEQ:
			case bitmarkParser.QUOTE_INDEX:
			case bitmarkParser.NUMERIC:
			case bitmarkParser.STRING:
			case bitmarkParser.NOTBITMARK:
			case bitmarkParser.SENTENCE:
			case bitmarkParser.BARSTRING:
			case bitmarkParser.AmpAudio:
			case bitmarkParser.AmpImage:
			case bitmarkParser.AmpVideo:
			case bitmarkParser.AmpArticle:
			case bitmarkParser.AmpDocument:
			case bitmarkParser.AmpApp:
			case bitmarkParser.AmpWebsite:
			case bitmarkParser.AmpStillImageFilm:
			case bitmarkParser.AmpAudioLink:
			case bitmarkParser.AmpImageLink:
			case bitmarkParser.AmpVideoLink:
			case bitmarkParser.AmpArticleLink:
			case bitmarkParser.AmpDocumentLink:
			case bitmarkParser.AmpAppLink:
			case bitmarkParser.AmpWebsiteLink:
			case bitmarkParser.AmpStillImageFilmLink:
			case bitmarkParser.BitmarkMinus:
			case bitmarkParser.BitmarkPlus:
			case bitmarkParser.URL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1232;
				this.s_and_w();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footer(): FooterContext {
		let _localctx: FooterContext = new FooterContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, bitmarkParser.RULE_footer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1242;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1238;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 1235;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 1240;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1241;
					this.s_and_w();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1244;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 106, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bitElem(): BitElemContext {
		let _localctx: BitElemContext = new BitElemContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, bitmarkParser.RULE_bitElem);
		try {
			this.state = 1278;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 107, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1246;
				this.match(bitmarkParser.LIST_LINE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1247;
				this.match(bitmarkParser.NOTBITMARK);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1248;
				this.dclines();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1249;
				this.gap();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1250;
				this.reference();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1251;
				this.dateprop();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1252;
				this.progress();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1253;
				this.atdef();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1254;
				this.dollarans();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1255;
				this.partans();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1256;
				this.item();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1257;
				this.title();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1258;
				this.instruction();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1259;
				this.hint();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1260;
				this.s_and_w();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1261;
				this.example();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1262;
				this.bool_label();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1263;
				this.progress_points();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1264;
				this.istracked();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1265;
				this.isinfoonly();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1266;
				this.imagebit();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1267;
				this.audiobit();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1268;
				this.videobit();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1269;
				this.articlebit();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1270;
				this.documentbit();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1271;
				this.appbit();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1272;
				this.websitebit();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 1273;
				this.stillimagefilmbit();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 1274;
				this.angleref();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 1275;
				this.anchor();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 1276;
				this.bracketed_text();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 1277;
				this.sp();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public gap(): GapContext {
		let _localctx: GapContext = new GapContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, bitmarkParser.RULE_gap);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1280;
			this.single_gap();
			this.state = 1288;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 1286;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.OPU:
						{
						this.state = 1281;
						this.single_gap();
						}
						break;
					case bitmarkParser.OPB:
						{
						this.state = 1282;
						this.instruction();
						}
						break;
					case bitmarkParser.OPQ:
						{
						this.state = 1283;
						this.hint();
						}
						break;
					case bitmarkParser.OPC:
						{
						this.state = 1284;
						this.item();
						}
						break;
					case bitmarkParser.AtExampleWithStr:
					case bitmarkParser.AtExamplecol:
					case bitmarkParser.AtExamplecl:
						{
						this.state = 1285;
						this.example();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 1290;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public single_gap(): Single_gapContext {
		let _localctx: Single_gapContext = new Single_gapContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, bitmarkParser.RULE_single_gap);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1291;
			this.match(bitmarkParser.OPU);
			this.state = 1295;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 110, this._ctx) ) {
			case 1:
				{
				this.state = 1292;
				this.match(bitmarkParser.NUMERIC);
				}
				break;

			case 2:
				{
				this.state = 1293;
				this.match(bitmarkParser.STRING);
				}
				break;

			case 3:
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
			this.state = 1300;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
				{
				{
				this.state = 1297;
				this.s_and_w();
				}
				}
				this.state = 1302;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1303;
			this.clnsp();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public choice_plus(): Choice_plusContext {
		let _localctx: Choice_plusContext = new Choice_plusContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, bitmarkParser.RULE_choice_plus);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1306;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPC) {
				{
				this.state = 1305;
				this.item();
				}
			}

			this.state = 1308;
			this.match(bitmarkParser.OPP);
			this.state = 1310;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1309;
				this.s_and_w();
				}
				}
				this.state = 1312;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
			this.state = 1314;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public choice_minus(): Choice_minusContext {
		let _localctx: Choice_minusContext = new Choice_minusContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, bitmarkParser.RULE_choice_minus);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1317;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPC) {
				{
				this.state = 1316;
				this.item();
				}
			}

			this.state = 1319;
			this.match(bitmarkParser.OPM);
			this.state = 1321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1320;
				this.s_and_w();
				}
				}
				this.state = 1323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
			this.state = 1325;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public choice_star(): Choice_starContext {
		let _localctx: Choice_starContext = new Choice_starContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, bitmarkParser.RULE_choice_star);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1328;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPC) {
				{
				this.state = 1327;
				this.item();
				}
			}

			this.state = 1330;
			this.match(bitmarkParser.OPR);
			this.state = 1332;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1331;
				this.s_and_w();
				}
				}
				this.state = 1334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
			this.state = 1336;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public essay(): EssayContext {
		let _localctx: EssayContext = new EssayContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, bitmarkParser.RULE_essay);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1338;
			this.match(bitmarkParser.BitEssay);
			this.state = 1339;
			this.format();
			this.state = 1340;
			this.match(bitmarkParser.CL);
			this.state = 1341;
			this.match(bitmarkParser.NL);
			this.state = 1351;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 119, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					{
					this.state = 1342;
					this.bitElem();
					}
					this.state = 1346;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 118, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1343;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1348;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 118, this._ctx);
					}
					}
					}
				}
				this.state = 1353;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 119, this._ctx);
			}
			this.state = 1363;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 121, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1357;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 1354;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 1359;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					{
					this.state = 1360;
					this.ml_example();
					}
					}
					}
				}
				this.state = 1365;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 121, this._ctx);
			}
			this.state = 1369;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 122, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1366;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1371;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 122, this._ctx);
			}
			this.state = 1385;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 125, this._ctx) ) {
			case 1:
				{
				this.state = 1372;
				this.resource();
				this.state = 1382;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 124, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1376;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1373;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1378;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1379;
						this.resource();
						}
						}
					}
					this.state = 1384;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 124, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ml_example(): Ml_exampleContext {
		let _localctx: Ml_exampleContext = new Ml_exampleContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, bitmarkParser.RULE_ml_example);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1387;
			this.match(bitmarkParser.AtExamplecol);
			this.state = 1395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
				{
				this.state = 1389;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.NL) {
					{
					this.state = 1388;
					this.match(bitmarkParser.NL);
					}
				}

				this.state = 1391;
				this.lines();
				this.state = 1393;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.NL) {
					{
					this.state = 1392;
					this.match(bitmarkParser.NL);
					}
				}

				}
			}

			this.state = 1397;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partans(): PartansContext {
		let _localctx: PartansContext = new PartansContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, bitmarkParser.RULE_partans);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1399;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AtPartialAnswerS || _la === bitmarkParser.AtPartialAnswer)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resource(): ResourceContext {
		let _localctx: ResourceContext = new ResourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, bitmarkParser.RULE_resource);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1401;
			this.bitElem();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public correction(): CorrectionContext {
		let _localctx: CorrectionContext = new CorrectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, bitmarkParser.RULE_correction);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1403;
			this.match(bitmarkParser.BitCorrection);
			this.state = 1404;
			this.format();
			this.state = 1405;
			this.match(bitmarkParser.CL);
			this.state = 1406;
			this.match(bitmarkParser.NL);
			this.state = 1416;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1407;
					this.bitElem();
					this.state = 1411;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1408;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1413;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);
					}
					}
					}
				}
				this.state = 1418;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
			}
			this.state = 1422;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.OPP || _la === bitmarkParser.OPM) {
				{
				{
				this.state = 1419;
				this.corrs();
				}
				}
				this.state = 1424;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1428;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1425;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1430;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
			}
			this.state = 1444;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 135, this._ctx) ) {
			case 1:
				{
				this.state = 1431;
				this.resource();
				this.state = 1441;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1435;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1432;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1437;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1438;
						this.resource();
						}
						}
					}
					this.state = 1443;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public corrs(): CorrsContext {
		let _localctx: CorrsContext = new CorrsContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, bitmarkParser.RULE_corrs);
		try {
			let _alt: number;
			this.state = 1464;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OPM:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1446;
				this.match(bitmarkParser.OPM);
				this.state = 1450;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 136, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 1447;
						this.matchWildcard();
						}
						}
					}
					this.state = 1452;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 136, this._ctx);
				}
				this.state = 1453;
				this.match(bitmarkParser.CL);
				this.state = 1454;
				this.match(bitmarkParser.NL);
				}
				break;
			case bitmarkParser.OPP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1455;
				this.match(bitmarkParser.OPP);
				this.state = 1459;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 137, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 1456;
						this.matchWildcard();
						}
						}
					}
					this.state = 1461;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 137, this._ctx);
				}
				this.state = 1462;
				this.match(bitmarkParser.CL);
				this.state = 1463;
				this.match(bitmarkParser.NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mark_(): Mark_Context {
		let _localctx: Mark_Context = new Mark_Context(this._ctx, this.state);
		this.enterRule(_localctx, 98, bitmarkParser.RULE_mark_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1466;
			this.match(bitmarkParser.BitMark);
			this.state = 1467;
			this.format();
			this.state = 1468;
			this.match(bitmarkParser.CL);
			this.state = 1469;
			this.match(bitmarkParser.NL);
			this.state = 1482;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1472;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 139, this._ctx) ) {
					case 1:
						{
						this.state = 1470;
						this.bitElem();
						}
						break;

					case 2:
						{
						this.state = 1471;
						this.mark_text();
						}
						break;
					}
					this.state = 1477;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1474;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1479;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
					}
					}
					}
				}
				this.state = 1484;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
			}
			this.state = 1488;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1485;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1490;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
			}
			this.state = 1504;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 145, this._ctx) ) {
			case 1:
				{
				this.state = 1491;
				this.resource();
				this.state = 1501;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1495;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1492;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1497;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1498;
						this.resource();
						}
						}
					}
					this.state = 1503;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mark_text(): Mark_textContext {
		let _localctx: Mark_textContext = new Mark_textContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, bitmarkParser.RULE_mark_text);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1506;
			this.match(bitmarkParser.OPS);
			this.state = 1507;
			this.s_and_w();
			this.state = 1508;
			this.match(bitmarkParser.CL);
			this.state = 1510;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPAMARK) {
				{
				this.state = 1509;
				this.mark_color();
				}
			}

			this.state = 1517;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 1515;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.OPQ:
						{
						this.state = 1512;
						this.hint();
						}
						break;
					case bitmarkParser.OPC:
						{
						this.state = 1513;
						this.item();
						}
						break;
					case bitmarkParser.OPB:
						{
						this.state = 1514;
						this.instruction();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 1519;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mark_color(): Mark_colorContext {
		let _localctx: Mark_colorContext = new Mark_colorContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, bitmarkParser.RULE_mark_color);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1520;
			this.match(bitmarkParser.OPAMARK);
			this.state = 1524;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S) {
				{
				{
				this.state = 1521;
				this.match(bitmarkParser.S);
				}
				}
				this.state = 1526;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1527;
			this.match(bitmarkParser.STRING);
			this.state = 1531;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S) {
				{
				{
				this.state = 1528;
				this.match(bitmarkParser.S);
				}
				}
				this.state = 1533;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1534;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public document_upload(): Document_uploadContext {
		let _localctx: Document_uploadContext = new Document_uploadContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, bitmarkParser.RULE_document_upload);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1536;
			this.match(bitmarkParser.BitDocup);
			this.state = 1538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & ((1 << (bitmarkParser.Image_type - 172)) | (1 << (bitmarkParser.Audio_type - 172)) | (1 << (bitmarkParser.Video_type - 172)))) !== 0)) {
				{
				this.state = 1537;
				_la = this._input.LA(1);
				if (!(((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & ((1 << (bitmarkParser.Image_type - 172)) | (1 << (bitmarkParser.Audio_type - 172)) | (1 << (bitmarkParser.Video_type - 172)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1540;
			this.match(bitmarkParser.CL);
			this.state = 1541;
			this.match(bitmarkParser.NL);
			this.state = 1551;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 153, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1542;
					this.bitElem();
					this.state = 1546;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1543;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1548;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
					}
					}
					}
				}
				this.state = 1553;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 153, this._ctx);
			}
			this.state = 1557;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 154, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1554;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1559;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 154, this._ctx);
			}
			this.state = 1573;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 157, this._ctx) ) {
			case 1:
				{
				this.state = 1560;
				this.resource();
				this.state = 1570;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 156, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1564;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1561;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1566;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1567;
						this.resource();
						}
						}
					}
					this.state = 1572;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 156, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public take_audio(): Take_audioContext {
		let _localctx: Take_audioContext = new Take_audioContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, bitmarkParser.RULE_take_audio);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1575;
			this.match(bitmarkParser.BitTakeAudio);
			this.state = 1576;
			this.format();
			this.state = 1577;
			this.match(bitmarkParser.CL);
			this.state = 1578;
			this.match(bitmarkParser.NL);
			this.state = 1588;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1579;
					this.bitElem();
					this.state = 1583;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 158, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1580;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1585;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 158, this._ctx);
					}
					}
					}
				}
				this.state = 1590;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
			}
			this.state = 1594;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 160, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1591;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1596;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 160, this._ctx);
			}
			this.state = 1610;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
			case 1:
				{
				this.state = 1597;
				this.resource();
				this.state = 1607;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1601;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1598;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1603;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1604;
						this.resource();
						}
						}
					}
					this.state = 1609;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public take_picture(): Take_pictureContext {
		let _localctx: Take_pictureContext = new Take_pictureContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, bitmarkParser.RULE_take_picture);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1612;
			this.match(bitmarkParser.BitTakepic);
			this.state = 1613;
			this.format();
			this.state = 1614;
			this.match(bitmarkParser.CL);
			this.state = 1615;
			this.match(bitmarkParser.NL);
			this.state = 1625;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1616;
					this.bitElem();
					this.state = 1620;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1617;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1622;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
					}
					}
					}
				}
				this.state = 1627;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
			}
			this.state = 1631;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1628;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1633;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
			}
			this.state = 1647;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 169, this._ctx) ) {
			case 1:
				{
				this.state = 1634;
				this.resource();
				this.state = 1644;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1638;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1635;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1640;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1641;
						this.resource();
						}
						}
					}
					this.state = 1646;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_audio(): Record_audioContext {
		let _localctx: Record_audioContext = new Record_audioContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, bitmarkParser.RULE_record_audio);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1649;
			this.match(bitmarkParser.BitRecaud);
			this.state = 1650;
			this.format();
			this.state = 1651;
			this.match(bitmarkParser.CL);
			this.state = 1652;
			this.match(bitmarkParser.NL);
			this.state = 1662;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1653;
					this.bitElem();
					this.state = 1657;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1654;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1659;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
					}
					}
					}
				}
				this.state = 1664;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
			}
			this.state = 1668;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 172, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1665;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1670;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 172, this._ctx);
			}
			this.state = 1684;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 175, this._ctx) ) {
			case 1:
				{
				this.state = 1671;
				this.resource();
				this.state = 1681;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 174, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1675;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1672;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1677;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1678;
						this.resource();
						}
						}
					}
					this.state = 1683;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 174, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preparation_note(): Preparation_noteContext {
		let _localctx: Preparation_noteContext = new Preparation_noteContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, bitmarkParser.RULE_preparation_note);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1686;
			this.match(bitmarkParser.BitPrepnote);
			this.state = 1687;
			this.format();
			this.state = 1688;
			this.match(bitmarkParser.CL);
			this.state = 1692;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 176, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1689;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1694;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 176, this._ctx);
			}
			this.state = 1704;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1695;
					this.bitElem();
					this.state = 1699;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 177, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1696;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1701;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 177, this._ctx);
					}
					}
					}
				}
				this.state = 1706;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
			}
			this.state = 1708;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 179, this._ctx) ) {
			case 1:
				{
				this.state = 1707;
				this.lines();
				}
				break;
			}
			this.state = 1713;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 180, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1710;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1715;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 180, this._ctx);
			}
			this.state = 1729;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 183, this._ctx) ) {
			case 1:
				{
				this.state = 1716;
				this.resource();
				this.state = 1726;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 182, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1720;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1717;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1722;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1723;
						this.resource();
						}
						}
					}
					this.state = 1728;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 182, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignment(): AssignmentContext {
		let _localctx: AssignmentContext = new AssignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, bitmarkParser.RULE_assignment);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1731;
			this.match(bitmarkParser.BitAssign);
			this.state = 1732;
			this.format();
			this.state = 1733;
			this.match(bitmarkParser.CL);
			this.state = 1735;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1734;
					this.match(bitmarkParser.NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1737;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 184, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1748;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1739;
					this.bitElem();
					this.state = 1743;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 185, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1740;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1745;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 185, this._ctx);
					}
					}
					}
				}
				this.state = 1750;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
			}
			this.state = 1752;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				{
				this.state = 1751;
				this.lines();
				}
				break;
			}
			this.state = 1757;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1754;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 1759;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
			}
			this.state = 1773;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 191, this._ctx) ) {
			case 1:
				{
				this.state = 1760;
				this.resource();
				this.state = 1770;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1764;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 1761;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 1766;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1767;
						this.resource();
						}
						}
					}
					this.state = 1772;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public article(): ArticleContext {
		let _localctx: ArticleContext = new ArticleContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, bitmarkParser.RULE_article);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1775;
			this.match(bitmarkParser.BitArticle);
			this.state = 1776;
			this.format();
			this.state = 1777;
			this.match(bitmarkParser.CL);
			this.state = 1781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1778;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1791;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1784;
					this.bitElem();
					this.state = 1788;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 193, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1785;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1790;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 193, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1793;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 194, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, bitmarkParser.RULE_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1795;
			this.match(bitmarkParser.BitStatement);
			this.state = 1796;
			this.format();
			this.state = 1797;
			this.match(bitmarkParser.CL);
			this.state = 1801;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1798;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1803;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1811;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1804;
					this.bitElem();
					this.state = 1808;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 196, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1805;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1810;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 196, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1813;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public details(): DetailsContext {
		let _localctx: DetailsContext = new DetailsContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, bitmarkParser.RULE_details);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1815;
			this.match(bitmarkParser.BitDetails);
			this.state = 1816;
			this.format();
			this.state = 1817;
			this.match(bitmarkParser.CL);
			this.state = 1821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1818;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1831;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1824;
					this.bitElem();
					this.state = 1828;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 199, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1825;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1830;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 199, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1833;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 200, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sample_solution(): Sample_solutionContext {
		let _localctx: Sample_solutionContext = new Sample_solutionContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, bitmarkParser.RULE_sample_solution);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1835;
			this.match(bitmarkParser.BitSampleSolution);
			this.state = 1836;
			this.format();
			this.state = 1837;
			this.match(bitmarkParser.CL);
			this.state = 1841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1838;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1851;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1844;
					this.bitElem();
					this.state = 1848;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1845;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1850;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1853;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public buttoncopytext(): ButtoncopytextContext {
		let _localctx: ButtoncopytextContext = new ButtoncopytextContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, bitmarkParser.RULE_buttoncopytext);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1855;
			this.match(bitmarkParser.BitButtonCopytext);
			this.state = 1856;
			this.format();
			this.state = 1857;
			this.match(bitmarkParser.CL);
			this.state = 1861;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1858;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1871;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1864;
					this.bitElem();
					this.state = 1868;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 205, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1865;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1870;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 205, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1873;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public wbtcontinue(): WbtcontinueContext {
		let _localctx: WbtcontinueContext = new WbtcontinueContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, bitmarkParser.RULE_wbtcontinue);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1875;
			this.match(bitmarkParser.BitWbtContinue);
			this.state = 1876;
			this.format();
			this.state = 1877;
			this.match(bitmarkParser.CL);
			this.state = 1881;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1878;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1883;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1891;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1884;
					this.bitElem();
					this.state = 1888;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 208, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1885;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1890;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 208, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1893;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public learningpathdetails(): LearningpathdetailsContext {
		let _localctx: LearningpathdetailsContext = new LearningpathdetailsContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, bitmarkParser.RULE_learningpathdetails);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1895;
			this.match(bitmarkParser.BitLearningPathDetails);
			this.state = 1896;
			this.format();
			this.state = 1897;
			this.match(bitmarkParser.CL);
			this.state = 1901;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1898;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1911;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1904;
					this.bitElem();
					this.state = 1908;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1905;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1910;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1913;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 212, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page(): PageContext {
		let _localctx: PageContext = new PageContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, bitmarkParser.RULE_page);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1915;
			this.match(bitmarkParser.BitPage);
			this.state = 1916;
			this.format();
			this.state = 1917;
			this.match(bitmarkParser.CL);
			this.state = 1921;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1918;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1923;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1931;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1924;
					this.bitElem();
					this.state = 1928;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 214, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1925;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1930;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 214, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1933;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public note(): NoteContext {
		let _localctx: NoteContext = new NoteContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, bitmarkParser.RULE_note);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1935;
			this.match(bitmarkParser.BitNote);
			this.state = 1936;
			this.format();
			this.state = 1937;
			this.match(bitmarkParser.CL);
			this.state = 1941;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1938;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1951;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1944;
					this.bitElem();
					this.state = 1948;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 217, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1945;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1950;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 217, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1953;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 218, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public info(): InfoContext {
		let _localctx: InfoContext = new InfoContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, bitmarkParser.RULE_info);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1955;
			this.match(bitmarkParser.BitInfo);
			this.state = 1956;
			this.format();
			this.state = 1957;
			this.match(bitmarkParser.CL);
			this.state = 1961;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1958;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1971;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1964;
					this.bitElem();
					this.state = 1968;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 220, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1965;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1970;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 220, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1973;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 221, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public warning(): WarningContext {
		let _localctx: WarningContext = new WarningContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, bitmarkParser.RULE_warning);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1975;
			this.match(bitmarkParser.BitWarning);
			this.state = 1976;
			this.format();
			this.state = 1977;
			this.match(bitmarkParser.CL);
			this.state = 1981;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1978;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 1983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1991;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1984;
					this.bitElem();
					this.state = 1988;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 223, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1985;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 1990;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 223, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1993;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 224, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public remark(): RemarkContext {
		let _localctx: RemarkContext = new RemarkContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, bitmarkParser.RULE_remark);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1995;
			this.match(bitmarkParser.BitRemark);
			this.state = 1996;
			this.format();
			this.state = 1997;
			this.match(bitmarkParser.CL);
			this.state = 2001;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 1998;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2003;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2011;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2004;
					this.bitElem();
					this.state = 2008;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2005;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2010;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2013;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 227, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public help(): HelpContext {
		let _localctx: HelpContext = new HelpContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, bitmarkParser.RULE_help);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2015;
			this.match(bitmarkParser.BitHelp);
			this.state = 2016;
			this.format();
			this.state = 2017;
			this.match(bitmarkParser.CL);
			this.state = 2021;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2018;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2031;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2024;
					this.bitElem();
					this.state = 2028;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2025;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2030;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2033;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 230, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public danger(): DangerContext {
		let _localctx: DangerContext = new DangerContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, bitmarkParser.RULE_danger);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2035;
			this.match(bitmarkParser.BitDanger);
			this.state = 2036;
			this.format();
			this.state = 2037;
			this.match(bitmarkParser.CL);
			this.state = 2041;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2038;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2043;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2051;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2044;
					this.bitElem();
					this.state = 2048;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2045;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2050;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2053;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bug(): BugContext {
		let _localctx: BugContext = new BugContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, bitmarkParser.RULE_bug);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2055;
			this.match(bitmarkParser.BitBug);
			this.state = 2056;
			this.format();
			this.state = 2057;
			this.match(bitmarkParser.CL);
			this.state = 2061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2058;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2071;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2064;
					this.bitElem();
					this.state = 2068;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2065;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2070;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2073;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sidenote(): SidenoteContext {
		let _localctx: SidenoteContext = new SidenoteContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, bitmarkParser.RULE_sidenote);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2075;
			this.match(bitmarkParser.BitSidenote);
			this.state = 2076;
			this.format();
			this.state = 2077;
			this.match(bitmarkParser.CL);
			this.state = 2081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2078;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2083;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2091;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2084;
					this.bitElem();
					this.state = 2088;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 238, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2085;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2090;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 238, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2093;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stickynote(): StickynoteContext {
		let _localctx: StickynoteContext = new StickynoteContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, bitmarkParser.RULE_stickynote);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2095;
			this.match(bitmarkParser.BitStickynote);
			this.state = 2096;
			this.format();
			this.state = 2097;
			this.match(bitmarkParser.CL);
			this.state = 2101;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2098;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2111;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2104;
					this.bitElem();
					this.state = 2108;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2105;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2110;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2113;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public quote(): QuoteContext {
		let _localctx: QuoteContext = new QuoteContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, bitmarkParser.RULE_quote);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2115;
			this.match(bitmarkParser.BitQuote);
			this.state = 2116;
			this.format();
			this.state = 2117;
			this.match(bitmarkParser.CL);
			this.state = 2121;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2118;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2123;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2131;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2124;
					this.bitElem();
					this.state = 2128;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2125;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2130;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2133;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footnote(): FootnoteContext {
		let _localctx: FootnoteContext = new FootnoteContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, bitmarkParser.RULE_footnote);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2135;
			this.match(bitmarkParser.BitFootnote);
			this.state = 2136;
			this.format();
			this.state = 2137;
			this.match(bitmarkParser.CL);
			this.state = 2141;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2138;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2143;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2151;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2144;
					this.bitElem();
					this.state = 2148;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 247, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2145;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2150;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 247, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2153;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hintbit(): HintbitContext {
		let _localctx: HintbitContext = new HintbitContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, bitmarkParser.RULE_hintbit);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2155;
			this.match(bitmarkParser.BitHint);
			this.state = 2156;
			this.format();
			this.state = 2157;
			this.match(bitmarkParser.CL);
			this.state = 2161;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2158;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2171;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2164;
					this.bitElem();
					this.state = 2168;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 250, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2165;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2170;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 250, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2173;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public examplebit(): ExamplebitContext {
		let _localctx: ExamplebitContext = new ExamplebitContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, bitmarkParser.RULE_examplebit);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2175;
			this.match(bitmarkParser.BitExample);
			this.state = 2176;
			this.format();
			this.state = 2177;
			this.match(bitmarkParser.CL);
			this.state = 2181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2178;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2183;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2191;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2184;
					this.bitElem();
					this.state = 2188;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 253, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2185;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2190;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 253, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2193;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 254, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vendor_padlet_embed(): Vendor_padlet_embedContext {
		let _localctx: Vendor_padlet_embedContext = new Vendor_padlet_embedContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, bitmarkParser.RULE_vendor_padlet_embed);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2195;
			this.match(bitmarkParser.BitVendorPadletEmbed);
			this.state = 2196;
			this.format();
			this.state = 2197;
			this.match(bitmarkParser.CL);
			this.state = 2201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2198;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2211;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2204;
					this.bitElem();
					this.state = 2208;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2205;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2210;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2213;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scorm(): ScormContext {
		let _localctx: ScormContext = new ScormContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, bitmarkParser.RULE_scorm);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2215;
			this.match(bitmarkParser.BitScorm);
			this.state = 2216;
			this.format();
			this.state = 2217;
			this.match(bitmarkParser.CL);
			this.state = 2221;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2218;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2231;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2224;
					this.bitElem();
					this.state = 2228;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2225;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2230;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2233;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 260, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_image(): Bit_imageContext {
		let _localctx: Bit_imageContext = new Bit_imageContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, bitmarkParser.RULE_bit_image);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2235;
			this.match(bitmarkParser.BitImage);
			this.state = 2236;
			this.format2();
			this.state = 2237;
			this.match(bitmarkParser.CL);
			this.state = 2241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2238;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2251;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2244;
					this.bitElem();
					this.state = 2248;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2245;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2250;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2253;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_imageLink(): Bit_imageLinkContext {
		let _localctx: Bit_imageLinkContext = new Bit_imageLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, bitmarkParser.RULE_bit_imageLink);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2255;
			this.match(bitmarkParser.BitImageLink);
			this.state = 2256;
			this.format2();
			this.state = 2257;
			this.match(bitmarkParser.CL);
			this.state = 2261;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2258;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2263;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2271;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2264;
					this.bitElem();
					this.state = 2268;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 265, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2265;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2270;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 265, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2273;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 266, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_imageZoom(): Bit_imageZoomContext {
		let _localctx: Bit_imageZoomContext = new Bit_imageZoomContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, bitmarkParser.RULE_bit_imageZoom);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2275;
			this.match(bitmarkParser.BitImageZoom);
			this.state = 2276;
			this.format2();
			this.state = 2277;
			this.match(bitmarkParser.CL);
			this.state = 2281;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2278;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2291;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2284;
					this.bitElem();
					this.state = 2288;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2285;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2290;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2293;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 269, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_imagePrototype(): Bit_imagePrototypeContext {
		let _localctx: Bit_imagePrototypeContext = new Bit_imagePrototypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, bitmarkParser.RULE_bit_imagePrototype);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2295;
			this.match(bitmarkParser.BitImagePrototype);
			this.state = 2296;
			this.format2();
			this.state = 2297;
			this.match(bitmarkParser.CL);
			this.state = 2301;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2298;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2303;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2311;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2304;
					this.bitElem();
					this.state = 2308;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2305;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2310;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2313;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 272, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_imageSuperWide(): Bit_imageSuperWideContext {
		let _localctx: Bit_imageSuperWideContext = new Bit_imageSuperWideContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, bitmarkParser.RULE_bit_imageSuperWide);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2315;
			this.match(bitmarkParser.BitImageSuperWide);
			this.state = 2316;
			this.format2();
			this.state = 2317;
			this.match(bitmarkParser.CL);
			this.state = 2321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2318;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2331;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2324;
					this.bitElem();
					this.state = 2328;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2325;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2330;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2333;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 275, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_audio(): Bit_audioContext {
		let _localctx: Bit_audioContext = new Bit_audioContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, bitmarkParser.RULE_bit_audio);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2335;
			this.match(bitmarkParser.BitAudio);
			this.state = 2336;
			this.format2();
			this.state = 2337;
			this.match(bitmarkParser.CL);
			this.state = 2341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2338;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2351;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2344;
					this.bitElem();
					this.state = 2348;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2345;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2350;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2353;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_audioLink(): Bit_audioLinkContext {
		let _localctx: Bit_audioLinkContext = new Bit_audioLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, bitmarkParser.RULE_bit_audioLink);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2355;
			this.match(bitmarkParser.BitAudioLink);
			this.state = 2356;
			this.format2();
			this.state = 2357;
			this.match(bitmarkParser.CL);
			this.state = 2361;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2358;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2363;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2371;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2364;
					this.bitElem();
					this.state = 2368;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 280, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2365;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2370;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 280, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2373;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_audioEmbed(): Bit_audioEmbedContext {
		let _localctx: Bit_audioEmbedContext = new Bit_audioEmbedContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, bitmarkParser.RULE_bit_audioEmbed);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2375;
			this.match(bitmarkParser.BitAudioEmbed);
			this.state = 2376;
			this.format2();
			this.state = 2377;
			this.match(bitmarkParser.CL);
			this.state = 2381;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2378;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2383;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2391;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2384;
					this.bitElem();
					this.state = 2388;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2385;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2390;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2393;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 284, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_video(): Bit_videoContext {
		let _localctx: Bit_videoContext = new Bit_videoContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, bitmarkParser.RULE_bit_video);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2395;
			this.match(bitmarkParser.BitVideo);
			this.state = 2396;
			this.format2();
			this.state = 2397;
			this.match(bitmarkParser.CL);
			this.state = 2401;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2398;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2411;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2404;
					this.bitElem();
					this.state = 2408;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2405;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2410;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2413;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 287, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_videoLink(): Bit_videoLinkContext {
		let _localctx: Bit_videoLinkContext = new Bit_videoLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, bitmarkParser.RULE_bit_videoLink);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2415;
			this.match(bitmarkParser.BitVideoLink);
			this.state = 2416;
			this.format2();
			this.state = 2417;
			this.match(bitmarkParser.CL);
			this.state = 2421;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2418;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2423;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2431;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2424;
					this.bitElem();
					this.state = 2428;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2425;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2430;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2433;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 290, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_videoEmbed(): Bit_videoEmbedContext {
		let _localctx: Bit_videoEmbedContext = new Bit_videoEmbedContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, bitmarkParser.RULE_bit_videoEmbed);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2435;
			this.match(bitmarkParser.BitVideoEmbed);
			this.state = 2436;
			this.format2();
			this.state = 2437;
			this.match(bitmarkParser.CL);
			this.state = 2441;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2438;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2451;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2444;
					this.bitElem();
					this.state = 2448;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 292, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2445;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2450;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 292, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2453;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 293, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_videoPortrait(): Bit_videoPortraitContext {
		let _localctx: Bit_videoPortraitContext = new Bit_videoPortraitContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, bitmarkParser.RULE_bit_videoPortrait);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2455;
			this.match(bitmarkParser.BitVideoPortrait);
			this.state = 2456;
			this.format2();
			this.state = 2457;
			this.match(bitmarkParser.CL);
			this.state = 2461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2458;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2471;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2464;
					this.bitElem();
					this.state = 2468;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2465;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2470;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2473;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 296, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_videoLandscape(): Bit_videoLandscapeContext {
		let _localctx: Bit_videoLandscapeContext = new Bit_videoLandscapeContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, bitmarkParser.RULE_bit_videoLandscape);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2475;
			this.match(bitmarkParser.BitVideoLandscape);
			this.state = 2476;
			this.format2();
			this.state = 2477;
			this.match(bitmarkParser.CL);
			this.state = 2481;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2478;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2491;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2484;
					this.bitElem();
					this.state = 2488;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2485;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2490;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2493;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_stillImageFilm(): Bit_stillImageFilmContext {
		let _localctx: Bit_stillImageFilmContext = new Bit_stillImageFilmContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, bitmarkParser.RULE_bit_stillImageFilm);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2495;
			this.match(bitmarkParser.BitStillImageFilm);
			this.state = 2496;
			this.format2();
			this.state = 2497;
			this.match(bitmarkParser.CL);
			this.state = 2501;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2498;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2503;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2511;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2504;
					this.bitElem();
					this.state = 2508;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2505;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2510;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2513;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_stillImageFilmLink(): Bit_stillImageFilmLinkContext {
		let _localctx: Bit_stillImageFilmLinkContext = new Bit_stillImageFilmLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, bitmarkParser.RULE_bit_stillImageFilmLink);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2515;
			this.match(bitmarkParser.BitStillImageFilmLink);
			this.state = 2516;
			this.format2();
			this.state = 2517;
			this.match(bitmarkParser.CL);
			this.state = 2521;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2518;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2531;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2524;
					this.bitElem();
					this.state = 2528;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 304, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2525;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2530;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 304, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2533;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_stillImageFilmEmbed(): Bit_stillImageFilmEmbedContext {
		let _localctx: Bit_stillImageFilmEmbedContext = new Bit_stillImageFilmEmbedContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, bitmarkParser.RULE_bit_stillImageFilmEmbed);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2535;
			this.match(bitmarkParser.BitStillImageFilmEmbed);
			this.state = 2536;
			this.format2();
			this.state = 2537;
			this.match(bitmarkParser.CL);
			this.state = 2541;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2538;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2543;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2551;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2544;
					this.bitElem();
					this.state = 2548;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2545;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2550;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2553;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_websiteLink(): Bit_websiteLinkContext {
		let _localctx: Bit_websiteLinkContext = new Bit_websiteLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, bitmarkParser.RULE_bit_websiteLink);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2555;
			this.match(bitmarkParser.BitWebsiteLink);
			this.state = 2556;
			this.format2();
			this.state = 2557;
			this.match(bitmarkParser.CL);
			this.state = 2561;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2558;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2563;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2571;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2564;
					this.bitElem();
					this.state = 2568;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 310, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2565;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2570;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 310, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2573;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_document(): Bit_documentContext {
		let _localctx: Bit_documentContext = new Bit_documentContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, bitmarkParser.RULE_bit_document);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2575;
			this.match(bitmarkParser.BitDocument);
			this.state = 2576;
			this.format2();
			this.state = 2577;
			this.match(bitmarkParser.CL);
			this.state = 2581;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2578;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2591;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2584;
					this.bitElem();
					this.state = 2588;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2585;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2590;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2593;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 314, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_documentLink(): Bit_documentLinkContext {
		let _localctx: Bit_documentLinkContext = new Bit_documentLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, bitmarkParser.RULE_bit_documentLink);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2595;
			this.match(bitmarkParser.BitDocumentLink);
			this.state = 2596;
			this.format2();
			this.state = 2597;
			this.match(bitmarkParser.CL);
			this.state = 2601;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2598;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2611;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2604;
					this.bitElem();
					this.state = 2608;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2605;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2610;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2613;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_documentEmbed(): Bit_documentEmbedContext {
		let _localctx: Bit_documentEmbedContext = new Bit_documentEmbedContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, bitmarkParser.RULE_bit_documentEmbed);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2615;
			this.match(bitmarkParser.BitDocumentEmbed);
			this.state = 2616;
			this.format2();
			this.state = 2617;
			this.match(bitmarkParser.CL);
			this.state = 2621;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2618;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2623;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2631;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2624;
					this.bitElem();
					this.state = 2628;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2625;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2630;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2633;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 320, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_documentDownload(): Bit_documentDownloadContext {
		let _localctx: Bit_documentDownloadContext = new Bit_documentDownloadContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, bitmarkParser.RULE_bit_documentDownload);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2635;
			this.match(bitmarkParser.BitDocumentDownload);
			this.state = 2636;
			this.format2();
			this.state = 2637;
			this.match(bitmarkParser.CL);
			this.state = 2641;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2638;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2643;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2651;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2644;
					this.bitElem();
					this.state = 2648;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2645;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2650;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2653;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 323, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_appLink(): Bit_appLinkContext {
		let _localctx: Bit_appLinkContext = new Bit_appLinkContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, bitmarkParser.RULE_bit_appLink);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2655;
			this.match(bitmarkParser.BitAppLink);
			this.state = 2656;
			this.format2();
			this.state = 2657;
			this.match(bitmarkParser.CL);
			this.state = 2661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2658;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2671;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2664;
					this.bitElem();
					this.state = 2668;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 325, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2665;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2670;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 325, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2673;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 326, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_editorial(): Bit_editorialContext {
		let _localctx: Bit_editorialContext = new Bit_editorialContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, bitmarkParser.RULE_bit_editorial);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2675;
			this.match(bitmarkParser.BitEditorial);
			this.state = 2676;
			this.format2();
			this.state = 2677;
			this.match(bitmarkParser.CL);
			this.state = 2681;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2678;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2683;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2691;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2684;
					this.bitElem();
					this.state = 2688;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2685;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2690;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2693;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 329, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_frontispiece(): Book_frontispieceContext {
		let _localctx: Book_frontispieceContext = new Book_frontispieceContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, bitmarkParser.RULE_book_frontispiece);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2695;
			this.match(bitmarkParser.BitBookFrontispiece);
			this.state = 2696;
			this.format();
			this.state = 2697;
			this.match(bitmarkParser.CL);
			this.state = 2701;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2698;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2703;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2711;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2704;
					this.bitElem();
					this.state = 2708;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 331, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2705;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2710;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 331, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2713;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_title(): Book_titleContext {
		let _localctx: Book_titleContext = new Book_titleContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, bitmarkParser.RULE_book_title);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2715;
			this.match(bitmarkParser.BitBookTitle);
			this.state = 2716;
			this.format();
			this.state = 2717;
			this.match(bitmarkParser.CL);
			this.state = 2721;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2718;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2731;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2724;
					this.bitElem();
					this.state = 2728;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 334, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2725;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2730;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 334, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2733;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_copyright(): Book_copyrightContext {
		let _localctx: Book_copyrightContext = new Book_copyrightContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, bitmarkParser.RULE_book_copyright);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2735;
			this.match(bitmarkParser.BitBookCopyright);
			this.state = 2736;
			this.format();
			this.state = 2737;
			this.match(bitmarkParser.CL);
			this.state = 2741;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2738;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2751;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2744;
					this.bitElem();
					this.state = 2748;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2745;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2750;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2753;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 338, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_dedication(): Book_dedicationContext {
		let _localctx: Book_dedicationContext = new Book_dedicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, bitmarkParser.RULE_book_dedication);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2755;
			this.match(bitmarkParser.BitBookDedication);
			this.state = 2756;
			this.format();
			this.state = 2757;
			this.match(bitmarkParser.CL);
			this.state = 2761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2758;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2771;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2764;
					this.bitElem();
					this.state = 2768;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 340, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2765;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2770;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 340, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2773;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_forword(): Book_forwordContext {
		let _localctx: Book_forwordContext = new Book_forwordContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, bitmarkParser.RULE_book_forword);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2775;
			this.match(bitmarkParser.BitBookForword);
			this.state = 2776;
			this.format();
			this.state = 2777;
			this.match(bitmarkParser.CL);
			this.state = 2781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2778;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2791;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2784;
					this.bitElem();
					this.state = 2788;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2785;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2790;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2793;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_preface(): Book_prefaceContext {
		let _localctx: Book_prefaceContext = new Book_prefaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, bitmarkParser.RULE_book_preface);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2795;
			this.match(bitmarkParser.BitBookPreface);
			this.state = 2796;
			this.format();
			this.state = 2797;
			this.match(bitmarkParser.CL);
			this.state = 2801;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2798;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2803;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2811;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2804;
					this.bitElem();
					this.state = 2808;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2805;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2810;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2813;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 347, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_prologue(): Book_prologueContext {
		let _localctx: Book_prologueContext = new Book_prologueContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, bitmarkParser.RULE_book_prologue);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2815;
			this.match(bitmarkParser.BitBookPrologue);
			this.state = 2816;
			this.format();
			this.state = 2817;
			this.match(bitmarkParser.CL);
			this.state = 2821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2818;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2831;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2824;
					this.bitElem();
					this.state = 2828;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 349, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2825;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2830;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 349, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2833;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 350, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_epilogue(): Book_epilogueContext {
		let _localctx: Book_epilogueContext = new Book_epilogueContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, bitmarkParser.RULE_book_epilogue);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2835;
			this.match(bitmarkParser.BitBookEpilogue);
			this.state = 2836;
			this.format();
			this.state = 2837;
			this.match(bitmarkParser.CL);
			this.state = 2841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2838;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2851;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2844;
					this.bitElem();
					this.state = 2848;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2845;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2850;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2853;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 353, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_introduction(): Book_introductionContext {
		let _localctx: Book_introductionContext = new Book_introductionContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, bitmarkParser.RULE_book_introduction);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2855;
			this.match(bitmarkParser.BitBookIntroduction);
			this.state = 2856;
			this.format();
			this.state = 2857;
			this.match(bitmarkParser.CL);
			this.state = 2861;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2858;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2871;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2864;
					this.bitElem();
					this.state = 2868;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 355, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2865;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2870;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 355, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2873;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 356, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_inciting_incident(): Book_inciting_incidentContext {
		let _localctx: Book_inciting_incidentContext = new Book_inciting_incidentContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, bitmarkParser.RULE_book_inciting_incident);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2875;
			this.match(bitmarkParser.BitBookIncitingIncident);
			this.state = 2876;
			this.format();
			this.state = 2877;
			this.match(bitmarkParser.CL);
			this.state = 2881;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2878;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2883;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2891;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2884;
					this.bitElem();
					this.state = 2888;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2885;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2890;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2893;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 359, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_conclusion(): Book_conclusionContext {
		let _localctx: Book_conclusionContext = new Book_conclusionContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, bitmarkParser.RULE_book_conclusion);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2895;
			this.match(bitmarkParser.BitBookConclusion);
			this.state = 2896;
			this.format();
			this.state = 2897;
			this.match(bitmarkParser.CL);
			this.state = 2901;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2898;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2911;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2904;
					this.bitElem();
					this.state = 2908;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2905;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2910;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2913;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_afterword(): Book_afterwordContext {
		let _localctx: Book_afterwordContext = new Book_afterwordContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, bitmarkParser.RULE_book_afterword);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2915;
			this.match(bitmarkParser.BitBookAfterword);
			this.state = 2916;
			this.format();
			this.state = 2917;
			this.match(bitmarkParser.CL);
			this.state = 2921;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2918;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2923;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2931;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2924;
					this.bitElem();
					this.state = 2928;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2925;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2930;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2933;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 365, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_postscript(): Book_postscriptContext {
		let _localctx: Book_postscriptContext = new Book_postscriptContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, bitmarkParser.RULE_book_postscript);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2935;
			this.match(bitmarkParser.BitBookPostscript);
			this.state = 2936;
			this.format();
			this.state = 2937;
			this.match(bitmarkParser.CL);
			this.state = 2941;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2938;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2951;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2944;
					this.bitElem();
					this.state = 2948;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2945;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2950;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2953;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 368, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_appendix(): Book_appendixContext {
		let _localctx: Book_appendixContext = new Book_appendixContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, bitmarkParser.RULE_book_appendix);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2955;
			this.match(bitmarkParser.BitBookappendix);
			this.state = 2956;
			this.format();
			this.state = 2957;
			this.match(bitmarkParser.CL);
			this.state = 2961;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2958;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2971;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2964;
					this.bitElem();
					this.state = 2968;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2965;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2970;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2973;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 371, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_addendum(): Book_addendumContext {
		let _localctx: Book_addendumContext = new Book_addendumContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, bitmarkParser.RULE_book_addendum);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2975;
			this.match(bitmarkParser.BitBookAddendum);
			this.state = 2976;
			this.format();
			this.state = 2977;
			this.match(bitmarkParser.CL);
			this.state = 2981;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2978;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 2983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2991;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2984;
					this.bitElem();
					this.state = 2988;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 373, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2985;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 2990;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 373, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2993;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 374, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_acknowledgments(): Book_acknowledgmentsContext {
		let _localctx: Book_acknowledgmentsContext = new Book_acknowledgmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, bitmarkParser.RULE_book_acknowledgments);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2995;
			this.match(bitmarkParser.BitBookAcknowledgments);
			this.state = 2996;
			this.format();
			this.state = 2997;
			this.match(bitmarkParser.CL);
			this.state = 3001;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 2998;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3003;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3011;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3004;
					this.bitElem();
					this.state = 3008;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 376, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3005;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3010;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 376, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3013;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_list_of_contributors(): Book_list_of_contributorsContext {
		let _localctx: Book_list_of_contributorsContext = new Book_list_of_contributorsContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, bitmarkParser.RULE_book_list_of_contributors);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3015;
			this.match(bitmarkParser.BitBookListOfContributors);
			this.state = 3016;
			this.format();
			this.state = 3017;
			this.match(bitmarkParser.CL);
			this.state = 3021;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3018;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3031;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3024;
					this.bitElem();
					this.state = 3028;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 379, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3025;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3030;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 379, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3033;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_bibliography(): Book_bibliographyContext {
		let _localctx: Book_bibliographyContext = new Book_bibliographyContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, bitmarkParser.RULE_book_bibliography);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3035;
			this.match(bitmarkParser.BitBookBibliography);
			this.state = 3036;
			this.format();
			this.state = 3037;
			this.match(bitmarkParser.CL);
			this.state = 3041;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3038;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3043;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3051;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3044;
					this.bitElem();
					this.state = 3048;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3045;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3050;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3053;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_reference_list(): Book_reference_listContext {
		let _localctx: Book_reference_listContext = new Book_reference_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, bitmarkParser.RULE_book_reference_list);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3055;
			this.match(bitmarkParser.BitBookReferenceList);
			this.state = 3056;
			this.format();
			this.state = 3057;
			this.match(bitmarkParser.CL);
			this.state = 3061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3058;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3071;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3064;
					this.bitElem();
					this.state = 3068;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3065;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3070;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3073;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 386, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_endnotes(): Book_endnotesContext {
		let _localctx: Book_endnotesContext = new Book_endnotesContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, bitmarkParser.RULE_book_endnotes);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3075;
			this.match(bitmarkParser.BitBookEndnotes);
			this.state = 3076;
			this.format();
			this.state = 3077;
			this.match(bitmarkParser.CL);
			this.state = 3081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3078;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3083;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3091;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3084;
					this.bitElem();
					this.state = 3088;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3085;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3090;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3093;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 389, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_notes(): Book_notesContext {
		let _localctx: Book_notesContext = new Book_notesContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, bitmarkParser.RULE_book_notes);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3095;
			this.match(bitmarkParser.BitBookNotes);
			this.state = 3096;
			this.format();
			this.state = 3097;
			this.match(bitmarkParser.CL);
			this.state = 3101;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3098;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3111;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3104;
					this.bitElem();
					this.state = 3108;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3105;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3110;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3113;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_copyright_permissions(): Book_copyright_permissionsContext {
		let _localctx: Book_copyright_permissionsContext = new Book_copyright_permissionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, bitmarkParser.RULE_book_copyright_permissions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3115;
			this.match(bitmarkParser.BitBookCopyrightPermissions);
			this.state = 3116;
			this.format();
			this.state = 3117;
			this.match(bitmarkParser.CL);
			this.state = 3121;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3118;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3123;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3131;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3124;
					this.bitElem();
					this.state = 3128;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3125;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3130;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3133;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 395, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_teaser(): Book_teaserContext {
		let _localctx: Book_teaserContext = new Book_teaserContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, bitmarkParser.RULE_book_teaser);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3135;
			this.match(bitmarkParser.BitBookTeaser);
			this.state = 3136;
			this.format();
			this.state = 3137;
			this.match(bitmarkParser.CL);
			this.state = 3141;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3138;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3143;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3151;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3144;
					this.bitElem();
					this.state = 3148;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3145;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3150;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3153;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_auther_bio(): Book_auther_bioContext {
		let _localctx: Book_auther_bioContext = new Book_auther_bioContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, bitmarkParser.RULE_book_auther_bio);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3155;
			this.match(bitmarkParser.BitBookAutherBio);
			this.state = 3156;
			this.format();
			this.state = 3157;
			this.match(bitmarkParser.CL);
			this.state = 3161;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3158;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3171;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3164;
					this.bitElem();
					this.state = 3168;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3165;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3170;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3173;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 401, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_request_for_a_book_review(): Book_request_for_a_book_reviewContext {
		let _localctx: Book_request_for_a_book_reviewContext = new Book_request_for_a_book_reviewContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, bitmarkParser.RULE_book_request_for_a_book_review);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3175;
			this.match(bitmarkParser.BitBookRequestForABookReview);
			this.state = 3176;
			this.format();
			this.state = 3177;
			this.match(bitmarkParser.CL);
			this.state = 3181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3178;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3183;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3191;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3184;
					this.bitElem();
					this.state = 3188;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3185;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3190;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3193;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_coming_soon(): Book_coming_soonContext {
		let _localctx: Book_coming_soonContext = new Book_coming_soonContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, bitmarkParser.RULE_book_coming_soon);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3195;
			this.match(bitmarkParser.BitBookComingSoon);
			this.state = 3196;
			this.format();
			this.state = 3197;
			this.match(bitmarkParser.CL);
			this.state = 3201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3198;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3211;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3204;
					this.bitElem();
					this.state = 3208;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3205;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3210;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3213;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_read_more(): Book_read_moreContext {
		let _localctx: Book_read_moreContext = new Book_read_moreContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, bitmarkParser.RULE_book_read_more);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3215;
			this.match(bitmarkParser.BitBookReadMore);
			this.state = 3216;
			this.format();
			this.state = 3217;
			this.match(bitmarkParser.CL);
			this.state = 3221;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3218;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3231;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3224;
					this.bitElem();
					this.state = 3228;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 409, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3225;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3230;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 409, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3233;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_summary(): Book_summaryContext {
		let _localctx: Book_summaryContext = new Book_summaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, bitmarkParser.RULE_book_summary);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3235;
			this.match(bitmarkParser.BitBookSummary);
			this.state = 3236;
			this.format();
			this.state = 3237;
			this.match(bitmarkParser.CL);
			this.state = 3241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3238;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3251;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3244;
					this.bitElem();
					this.state = 3248;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 412, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3245;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3250;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 412, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3253;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public book_epigraph(): Book_epigraphContext {
		let _localctx: Book_epigraphContext = new Book_epigraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, bitmarkParser.RULE_book_epigraph);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3255;
			this.match(bitmarkParser.BitBookEpigraph);
			this.state = 3256;
			this.format();
			this.state = 3257;
			this.match(bitmarkParser.CL);
			this.state = 3261;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3258;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3263;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3271;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3264;
					this.bitElem();
					this.state = 3268;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3265;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3270;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3273;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public code(): CodeContext {
		let _localctx: CodeContext = new CodeContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, bitmarkParser.RULE_code);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3275;
			this.match(bitmarkParser.BitCode);
			this.state = 3276;
			this.format();
			this.state = 3277;
			this.match(bitmarkParser.CL);
			this.state = 3281;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3278;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3291;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3284;
					this.bitElem();
					this.state = 3288;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3285;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3290;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3293;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public card1(): Card1Context {
		let _localctx: Card1Context = new Card1Context(this._ctx, this.state);
		this.enterRule(_localctx, 268, bitmarkParser.RULE_card1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3295;
			this.match(bitmarkParser.BitCard1);
			this.state = 3296;
			this.format();
			this.state = 3297;
			this.match(bitmarkParser.CL);
			this.state = 3301;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3298;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3303;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3311;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3304;
					this.bitElem();
					this.state = 3308;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3305;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3310;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3313;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 422, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public question1(): Question1Context {
		let _localctx: Question1Context = new Question1Context(this._ctx, this.state);
		this.enterRule(_localctx, 270, bitmarkParser.RULE_question1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3315;
			this.match(bitmarkParser.BitQuestion1);
			this.state = 3316;
			this.format();
			this.state = 3317;
			this.match(bitmarkParser.CL);
			this.state = 3321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3318;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3331;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3324;
					this.bitElem();
					this.state = 3328;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3325;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3330;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3333;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 425, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenshot(): ScreenshotContext {
		let _localctx: ScreenshotContext = new ScreenshotContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, bitmarkParser.RULE_screenshot);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3335;
			this.match(bitmarkParser.BitScreenshot);
			this.state = 3336;
			this.format2();
			this.state = 3337;
			this.match(bitmarkParser.CL);
			this.state = 3341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3338;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3351;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3344;
					this.bitElem();
					this.state = 3348;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 427, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3345;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3350;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 427, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3353;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 428, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public focus_image(): Focus_imageContext {
		let _localctx: Focus_imageContext = new Focus_imageContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, bitmarkParser.RULE_focus_image);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3355;
			this.match(bitmarkParser.BitFocusImage);
			this.state = 3356;
			this.format2();
			this.state = 3357;
			this.match(bitmarkParser.CL);
			this.state = 3361;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3358;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3363;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3371;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3364;
					this.bitElem();
					this.state = 3368;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3365;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3370;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3373;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 431, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public photo(): PhotoContext {
		let _localctx: PhotoContext = new PhotoContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, bitmarkParser.RULE_photo);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3375;
			this.match(bitmarkParser.BitPhoto);
			this.state = 3376;
			this.format2();
			this.state = 3377;
			this.match(bitmarkParser.CL);
			this.state = 3381;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3378;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3383;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3391;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3384;
					this.bitElem();
					this.state = 3388;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3385;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3390;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3393;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public browser_image(): Browser_imageContext {
		let _localctx: Browser_imageContext = new Browser_imageContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, bitmarkParser.RULE_browser_image);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3395;
			this.match(bitmarkParser.BitBrowserImage);
			this.state = 3396;
			this.format2();
			this.state = 3397;
			this.match(bitmarkParser.CL);
			this.state = 3401;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3398;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3411;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3404;
					this.bitElem();
					this.state = 3408;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 436, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3405;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3410;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 436, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3413;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public chapter_subject_matter(): Chapter_subject_matterContext {
		let _localctx: Chapter_subject_matterContext = new Chapter_subject_matterContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, bitmarkParser.RULE_chapter_subject_matter);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3415;
			this.match(bitmarkParser.BitChapterSubjectMatter);
			this.state = 3416;
			this.format();
			this.state = 3417;
			this.match(bitmarkParser.CL);
			this.state = 3421;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3418;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3423;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3431;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3424;
					this.bitElem();
					this.state = 3428;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 439, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3425;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3430;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 439, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3433;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public release_note(): Release_noteContext {
		let _localctx: Release_noteContext = new Release_noteContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, bitmarkParser.RULE_release_note);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3435;
			this.match(bitmarkParser.BitReleaseNote);
			this.state = 3436;
			this.format();
			this.state = 3437;
			this.match(bitmarkParser.CL);
			this.state = 3441;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3438;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3451;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3444;
					this.bitElem();
					this.state = 3448;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 442, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3445;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3450;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 442, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3453;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conclusion(): ConclusionContext {
		let _localctx: ConclusionContext = new ConclusionContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, bitmarkParser.RULE_conclusion);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3455;
			this.match(bitmarkParser.BitConclusion);
			this.state = 3456;
			this.format();
			this.state = 3457;
			this.match(bitmarkParser.CL);
			this.state = 3461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3458;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3471;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3464;
					this.bitElem();
					this.state = 3468;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 445, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3465;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3470;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 445, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3473;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public featured(): FeaturedContext {
		let _localctx: FeaturedContext = new FeaturedContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, bitmarkParser.RULE_featured);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3475;
			this.match(bitmarkParser.BitFeatured);
			this.state = 3476;
			this.format();
			this.state = 3477;
			this.match(bitmarkParser.CL);
			this.state = 3481;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3478;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3491;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3484;
					this.bitElem();
					this.state = 3488;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3485;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3490;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3493;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vendor_amcharts_5_chart(): Vendor_amcharts_5_chartContext {
		let _localctx: Vendor_amcharts_5_chartContext = new Vendor_amcharts_5_chartContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, bitmarkParser.RULE_vendor_amcharts_5_chart);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3495;
			this.match(bitmarkParser.BitVendorAmcharts5Chart);
			this.state = 3496;
			this.format2();
			this.state = 3497;
			this.match(bitmarkParser.CL);
			this.state = 3501;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3498;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3503;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3511;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3504;
					this.bitElem();
					this.state = 3508;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 451, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3505;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3510;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 451, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3513;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public message(): MessageContext {
		let _localctx: MessageContext = new MessageContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, bitmarkParser.RULE_message);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3515;
			this.match(bitmarkParser.BitMessage);
			this.state = 3516;
			this.format();
			this.state = 3517;
			this.match(bitmarkParser.CL);
			this.state = 3521;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3518;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3531;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3524;
					this.bitElem();
					this.state = 3528;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3525;
							this.match(bitmarkParser.NL);
							}
							}
						}
						this.state = 3530;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3533;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 455, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_interview(): Bot_interviewContext {
		let _localctx: Bot_interviewContext = new Bot_interviewContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, bitmarkParser.RULE_bot_interview);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3535;
			this.match(bitmarkParser.BitBotint);
			this.state = 3536;
			this.format();
			this.state = 3537;
			this.match(bitmarkParser.CL);
			this.state = 3548;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3538;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3539;
					this.bot_choice();
					this.state = 3545;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.SSPL || _la === bitmarkParser.SSPL2) {
						{
						{
						this.state = 3540;
						this.sspl();
						this.state = 3541;
						this.bot_choice();
						}
						}
						this.state = 3547;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3550;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 457, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3552;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3556;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3553;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3558;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
			}
			this.state = 3572;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 461, this._ctx) ) {
			case 1:
				{
				this.state = 3559;
				this.resource();
				this.state = 3569;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3563;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 3560;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 3565;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 3566;
						this.resource();
						}
						}
					}
					this.state = 3571;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bot_choice(): Bot_choiceContext {
		let _localctx: Bot_choiceContext = new Bot_choiceContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, bitmarkParser.RULE_bot_choice);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3581;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 3581;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 462, this._ctx) ) {
				case 1:
					{
					this.state = 3574;
					this.words();
					}
					break;

				case 2:
					{
					this.state = 3575;
					this.instruction();
					}
					break;

				case 3:
					{
					this.state = 3576;
					this.audiobit();
					}
					break;

				case 4:
					{
					this.state = 3577;
					this.gap();
					}
					break;

				case 5:
					{
					this.state = 3578;
					this.choice_plus();
					}
					break;

				case 6:
					{
					this.state = 3579;
					this.choice_minus();
					}
					break;

				case 7:
					{
					this.state = 3580;
					this.choice_star();
					}
					break;
				}
				}
				this.state = 3583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & ((1 << (bitmarkParser.OPU - 144)) | (1 << (bitmarkParser.OPB - 144)) | (1 << (bitmarkParser.OPP - 144)) | (1 << (bitmarkParser.OPM - 144)) | (1 << (bitmarkParser.OPR - 144)) | (1 << (bitmarkParser.OPC - 144)) | (1 << (bitmarkParser.AMP - 144)) | (1 << (bitmarkParser.Greater - 144)) | (1 << (bitmarkParser.Less - 144)) | (1 << (bitmarkParser.RightAngle - 144)) | (1 << (bitmarkParser.RightArrow - 144)) | (1 << (bitmarkParser.QUOTE_INDEX - 144)))) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & ((1 << (bitmarkParser.NOTBITMARK - 180)) | (1 << (bitmarkParser.SENTENCE - 180)) | (1 << (bitmarkParser.BARSTRING - 180)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (bitmarkParser.AmpAudio - 213)) | (1 << (bitmarkParser.AmpImage - 213)) | (1 << (bitmarkParser.AmpVideo - 213)) | (1 << (bitmarkParser.AmpArticle - 213)) | (1 << (bitmarkParser.AmpDocument - 213)) | (1 << (bitmarkParser.AmpApp - 213)) | (1 << (bitmarkParser.AmpWebsite - 213)) | (1 << (bitmarkParser.AmpStillImageFilm - 213)) | (1 << (bitmarkParser.OpAmpAudio - 213)) | (1 << (bitmarkParser.AmpAudioLink - 213)) | (1 << (bitmarkParser.AmpImageLink - 213)) | (1 << (bitmarkParser.AmpVideoLink - 213)) | (1 << (bitmarkParser.AmpArticleLink - 213)) | (1 << (bitmarkParser.AmpDocumentLink - 213)) | (1 << (bitmarkParser.AmpAppLink - 213)) | (1 << (bitmarkParser.AmpWebsiteLink - 213)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 213)) | (1 << (bitmarkParser.OpAmpAudioLink - 213)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (bitmarkParser.OpAmpAudioEmbed - 259)) | (1 << (bitmarkParser.BitmarkMinus - 259)) | (1 << (bitmarkParser.BitmarkPlus - 259)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rating(): RatingContext {
		let _localctx: RatingContext = new RatingContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, bitmarkParser.RULE_rating);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3585;
			this.match(bitmarkParser.BitRating);
			this.state = 3586;
			this.format();
			this.state = 3587;
			this.match(bitmarkParser.CL);
			this.state = 3591;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3588;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3603;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (bitmarkParser.OPDOLL - 139)) | (1 << (bitmarkParser.OPRANGLES - 139)) | (1 << (bitmarkParser.OPRANGLEL - 139)) | (1 << (bitmarkParser.OPDANGLE - 139)) | (1 << (bitmarkParser.OPU - 139)) | (1 << (bitmarkParser.OPB - 139)) | (1 << (bitmarkParser.OPQ - 139)) | (1 << (bitmarkParser.OPA - 139)) | (1 << (bitmarkParser.OPS - 139)) | (1 << (bitmarkParser.OPHASH - 139)) | (1 << (bitmarkParser.OPC - 139)) | (1 << (bitmarkParser.COLON - 139)) | (1 << (bitmarkParser.AMP - 139)) | (1 << (bitmarkParser.Greater - 139)) | (1 << (bitmarkParser.Less - 139)) | (1 << (bitmarkParser.RightAngle - 139)) | (1 << (bitmarkParser.RightArrow - 139)) | (1 << (bitmarkParser.DBLEQ - 139)) | (1 << (bitmarkParser.QUOTE_INDEX - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (bitmarkParser.DCANY - 171)) | (1 << (bitmarkParser.ArticleText - 171)) | (1 << (bitmarkParser.NUMERIC - 171)) | (1 << (bitmarkParser.STRING - 171)) | (1 << (bitmarkParser.NOTBITMARK - 171)) | (1 << (bitmarkParser.SENTENCE - 171)) | (1 << (bitmarkParser.BARSTRING - 171)) | (1 << (bitmarkParser.AtProgress - 171)) | (1 << (bitmarkParser.AtReference - 171)) | (1 << (bitmarkParser.AtProgressPoints - 171)) | (1 << (bitmarkParser.AtExampleWithStr - 171)) | (1 << (bitmarkParser.AtExamplecol - 171)) | (1 << (bitmarkParser.AtExamplecl - 171)) | (1 << (bitmarkParser.AtPartialAnswerS - 171)) | (1 << (bitmarkParser.AtPartialAnswer - 171)) | (1 << (bitmarkParser.AtLabeltrue - 171)) | (1 << (bitmarkParser.AtLabelfalse - 171)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (bitmarkParser.OpAtCopyright - 206)) | (1 << (bitmarkParser.OpAtIsTracked - 206)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 206)) | (1 << (bitmarkParser.AtDate - 206)) | (1 << (bitmarkParser.AmpAudio - 206)) | (1 << (bitmarkParser.AmpImage - 206)) | (1 << (bitmarkParser.AmpVideo - 206)) | (1 << (bitmarkParser.AmpArticle - 206)) | (1 << (bitmarkParser.AmpDocument - 206)) | (1 << (bitmarkParser.AmpApp - 206)) | (1 << (bitmarkParser.AmpWebsite - 206)) | (1 << (bitmarkParser.AmpStillImageFilm - 206)) | (1 << (bitmarkParser.OpAmpAudio - 206)) | (1 << (bitmarkParser.OpAmpImage - 206)) | (1 << (bitmarkParser.OpAmpImageZoom - 206)) | (1 << (bitmarkParser.OpAmpImageWAudio - 206)) | (1 << (bitmarkParser.OpAmpVideo - 206)) | (1 << (bitmarkParser.OpAmpArticle - 206)) | (1 << (bitmarkParser.OpAmpDocument - 206)) | (1 << (bitmarkParser.OpAmpApp - 206)) | (1 << (bitmarkParser.OpAmpWebsite - 206)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 206)) | (1 << (bitmarkParser.BracEnclose - 206)) | (1 << (bitmarkParser.AmpAudioLink - 206)) | (1 << (bitmarkParser.AmpImageLink - 206)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (bitmarkParser.AmpVideoLink - 238)) | (1 << (bitmarkParser.AmpArticleLink - 238)) | (1 << (bitmarkParser.AmpDocumentLink - 238)) | (1 << (bitmarkParser.AmpAppLink - 238)) | (1 << (bitmarkParser.AmpWebsiteLink - 238)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpAudioLink - 238)) | (1 << (bitmarkParser.OpAmpImageLink - 238)) | (1 << (bitmarkParser.OpAmpVideoLink - 238)) | (1 << (bitmarkParser.OpAmpArticleLink - 238)) | (1 << (bitmarkParser.OpAmpDocumentLink - 238)) | (1 << (bitmarkParser.OpAmpAppLink - 238)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 238)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 238)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 238)) | (1 << (bitmarkParser.BitmarkMinus - 238)) | (1 << (bitmarkParser.BitmarkPlus - 238)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
				{
				{
				this.state = 3594;
				this.bitElem();
				this.state = 3598;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 3595;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 3600;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3605;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3614;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3606;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3607;
					this.s_and_w();
					this.state = 3610;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3608;
						this.match(bitmarkParser.NL);
						this.state = 3609;
						this.bullet_item();
						}
						}
						this.state = 3612;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3616;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3618;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3622;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3619;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3624;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			}
			this.state = 3638;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 472, this._ctx) ) {
			case 1:
				{
				this.state = 3625;
				this.resource();
				this.state = 3635;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3629;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 3626;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 3631;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 3632;
						this.resource();
						}
						}
					}
					this.state = 3637;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 471, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bullet_item(): Bullet_itemContext {
		let _localctx: Bullet_itemContext = new Bullet_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, bitmarkParser.RULE_bullet_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3640;
			this.match(bitmarkParser.OPBUL);
			this.state = 3641;
			this.s_and_w();
			this.state = 3642;
			this.match(bitmarkParser.CL);
			this.state = 3644;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.AtPoints) {
				{
				this.state = 3643;
				this.atpoint();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public survey(): SurveyContext {
		let _localctx: SurveyContext = new SurveyContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, bitmarkParser.RULE_survey);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3646;
			this.match(bitmarkParser.BitSurvey);
			this.state = 3647;
			this.format();
			this.state = 3648;
			this.match(bitmarkParser.CL);
			this.state = 3652;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3649;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3654;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3664;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (bitmarkParser.OPDOLL - 139)) | (1 << (bitmarkParser.OPRANGLES - 139)) | (1 << (bitmarkParser.OPRANGLEL - 139)) | (1 << (bitmarkParser.OPDANGLE - 139)) | (1 << (bitmarkParser.OPU - 139)) | (1 << (bitmarkParser.OPB - 139)) | (1 << (bitmarkParser.OPQ - 139)) | (1 << (bitmarkParser.OPA - 139)) | (1 << (bitmarkParser.OPS - 139)) | (1 << (bitmarkParser.OPHASH - 139)) | (1 << (bitmarkParser.OPC - 139)) | (1 << (bitmarkParser.COLON - 139)) | (1 << (bitmarkParser.AMP - 139)) | (1 << (bitmarkParser.Greater - 139)) | (1 << (bitmarkParser.Less - 139)) | (1 << (bitmarkParser.RightAngle - 139)) | (1 << (bitmarkParser.RightArrow - 139)) | (1 << (bitmarkParser.DBLEQ - 139)) | (1 << (bitmarkParser.QUOTE_INDEX - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (bitmarkParser.DCANY - 171)) | (1 << (bitmarkParser.ArticleText - 171)) | (1 << (bitmarkParser.NUMERIC - 171)) | (1 << (bitmarkParser.STRING - 171)) | (1 << (bitmarkParser.NOTBITMARK - 171)) | (1 << (bitmarkParser.SENTENCE - 171)) | (1 << (bitmarkParser.BARSTRING - 171)) | (1 << (bitmarkParser.AtProgress - 171)) | (1 << (bitmarkParser.AtReference - 171)) | (1 << (bitmarkParser.AtProgressPoints - 171)) | (1 << (bitmarkParser.AtExampleWithStr - 171)) | (1 << (bitmarkParser.AtExamplecol - 171)) | (1 << (bitmarkParser.AtExamplecl - 171)) | (1 << (bitmarkParser.AtPartialAnswerS - 171)) | (1 << (bitmarkParser.AtPartialAnswer - 171)) | (1 << (bitmarkParser.AtLabeltrue - 171)) | (1 << (bitmarkParser.AtLabelfalse - 171)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (bitmarkParser.OpAtCopyright - 206)) | (1 << (bitmarkParser.OpAtIsTracked - 206)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 206)) | (1 << (bitmarkParser.AtDate - 206)) | (1 << (bitmarkParser.AmpAudio - 206)) | (1 << (bitmarkParser.AmpImage - 206)) | (1 << (bitmarkParser.AmpVideo - 206)) | (1 << (bitmarkParser.AmpArticle - 206)) | (1 << (bitmarkParser.AmpDocument - 206)) | (1 << (bitmarkParser.AmpApp - 206)) | (1 << (bitmarkParser.AmpWebsite - 206)) | (1 << (bitmarkParser.AmpStillImageFilm - 206)) | (1 << (bitmarkParser.OpAmpAudio - 206)) | (1 << (bitmarkParser.OpAmpImage - 206)) | (1 << (bitmarkParser.OpAmpImageZoom - 206)) | (1 << (bitmarkParser.OpAmpImageWAudio - 206)) | (1 << (bitmarkParser.OpAmpVideo - 206)) | (1 << (bitmarkParser.OpAmpArticle - 206)) | (1 << (bitmarkParser.OpAmpDocument - 206)) | (1 << (bitmarkParser.OpAmpApp - 206)) | (1 << (bitmarkParser.OpAmpWebsite - 206)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 206)) | (1 << (bitmarkParser.BracEnclose - 206)) | (1 << (bitmarkParser.AmpAudioLink - 206)) | (1 << (bitmarkParser.AmpImageLink - 206)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (bitmarkParser.AmpVideoLink - 238)) | (1 << (bitmarkParser.AmpArticleLink - 238)) | (1 << (bitmarkParser.AmpDocumentLink - 238)) | (1 << (bitmarkParser.AmpAppLink - 238)) | (1 << (bitmarkParser.AmpWebsiteLink - 238)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpAudioLink - 238)) | (1 << (bitmarkParser.OpAmpImageLink - 238)) | (1 << (bitmarkParser.OpAmpVideoLink - 238)) | (1 << (bitmarkParser.OpAmpArticleLink - 238)) | (1 << (bitmarkParser.OpAmpDocumentLink - 238)) | (1 << (bitmarkParser.OpAmpAppLink - 238)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 238)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 238)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 238)) | (1 << (bitmarkParser.BitmarkMinus - 238)) | (1 << (bitmarkParser.BitmarkPlus - 238)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
				{
				{
				this.state = 3655;
				this.bitElem();
				this.state = 3659;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 3656;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 3661;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3666;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3682;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3667;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3669;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
						{
						this.state = 3668;
						this.s_and_w();
						}
					}

					this.state = 3678;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3674;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 3671;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 3676;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 3677;
						this.bullet_item();
						}
						}
						this.state = 3680;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3684;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 480, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3686;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public survey_1(): Survey_1Context {
		let _localctx: Survey_1Context = new Survey_1Context(this._ctx, this.state);
		this.enterRule(_localctx, 302, bitmarkParser.RULE_survey_1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3688;
			this.match(bitmarkParser.BitSurvey1);
			this.state = 3689;
			this.format();
			this.state = 3690;
			this.match(bitmarkParser.CL);
			this.state = 3694;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3691;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3706;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (bitmarkParser.OPDOLL - 139)) | (1 << (bitmarkParser.OPRANGLES - 139)) | (1 << (bitmarkParser.OPRANGLEL - 139)) | (1 << (bitmarkParser.OPDANGLE - 139)) | (1 << (bitmarkParser.OPU - 139)) | (1 << (bitmarkParser.OPB - 139)) | (1 << (bitmarkParser.OPQ - 139)) | (1 << (bitmarkParser.OPA - 139)) | (1 << (bitmarkParser.OPS - 139)) | (1 << (bitmarkParser.OPHASH - 139)) | (1 << (bitmarkParser.OPC - 139)) | (1 << (bitmarkParser.COLON - 139)) | (1 << (bitmarkParser.AMP - 139)) | (1 << (bitmarkParser.Greater - 139)) | (1 << (bitmarkParser.Less - 139)) | (1 << (bitmarkParser.RightAngle - 139)) | (1 << (bitmarkParser.RightArrow - 139)) | (1 << (bitmarkParser.DBLEQ - 139)) | (1 << (bitmarkParser.QUOTE_INDEX - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (bitmarkParser.DCANY - 171)) | (1 << (bitmarkParser.ArticleText - 171)) | (1 << (bitmarkParser.NUMERIC - 171)) | (1 << (bitmarkParser.STRING - 171)) | (1 << (bitmarkParser.NOTBITMARK - 171)) | (1 << (bitmarkParser.SENTENCE - 171)) | (1 << (bitmarkParser.BARSTRING - 171)) | (1 << (bitmarkParser.AtProgress - 171)) | (1 << (bitmarkParser.AtReference - 171)) | (1 << (bitmarkParser.AtProgressPoints - 171)) | (1 << (bitmarkParser.AtExampleWithStr - 171)) | (1 << (bitmarkParser.AtExamplecol - 171)) | (1 << (bitmarkParser.AtExamplecl - 171)) | (1 << (bitmarkParser.AtPartialAnswerS - 171)) | (1 << (bitmarkParser.AtPartialAnswer - 171)) | (1 << (bitmarkParser.AtLabeltrue - 171)) | (1 << (bitmarkParser.AtLabelfalse - 171)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (bitmarkParser.OpAtCopyright - 206)) | (1 << (bitmarkParser.OpAtIsTracked - 206)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 206)) | (1 << (bitmarkParser.AtDate - 206)) | (1 << (bitmarkParser.AmpAudio - 206)) | (1 << (bitmarkParser.AmpImage - 206)) | (1 << (bitmarkParser.AmpVideo - 206)) | (1 << (bitmarkParser.AmpArticle - 206)) | (1 << (bitmarkParser.AmpDocument - 206)) | (1 << (bitmarkParser.AmpApp - 206)) | (1 << (bitmarkParser.AmpWebsite - 206)) | (1 << (bitmarkParser.AmpStillImageFilm - 206)) | (1 << (bitmarkParser.OpAmpAudio - 206)) | (1 << (bitmarkParser.OpAmpImage - 206)) | (1 << (bitmarkParser.OpAmpImageZoom - 206)) | (1 << (bitmarkParser.OpAmpImageWAudio - 206)) | (1 << (bitmarkParser.OpAmpVideo - 206)) | (1 << (bitmarkParser.OpAmpArticle - 206)) | (1 << (bitmarkParser.OpAmpDocument - 206)) | (1 << (bitmarkParser.OpAmpApp - 206)) | (1 << (bitmarkParser.OpAmpWebsite - 206)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 206)) | (1 << (bitmarkParser.BracEnclose - 206)) | (1 << (bitmarkParser.AmpAudioLink - 206)) | (1 << (bitmarkParser.AmpImageLink - 206)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (bitmarkParser.AmpVideoLink - 238)) | (1 << (bitmarkParser.AmpArticleLink - 238)) | (1 << (bitmarkParser.AmpDocumentLink - 238)) | (1 << (bitmarkParser.AmpAppLink - 238)) | (1 << (bitmarkParser.AmpWebsiteLink - 238)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpAudioLink - 238)) | (1 << (bitmarkParser.OpAmpImageLink - 238)) | (1 << (bitmarkParser.OpAmpVideoLink - 238)) | (1 << (bitmarkParser.OpAmpArticleLink - 238)) | (1 << (bitmarkParser.OpAmpDocumentLink - 238)) | (1 << (bitmarkParser.OpAmpAppLink - 238)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 238)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 238)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 238)) | (1 << (bitmarkParser.BitmarkMinus - 238)) | (1 << (bitmarkParser.BitmarkPlus - 238)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
				{
				{
				this.state = 3697;
				this.bitElem();
				this.state = 3701;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 3698;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 3703;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3708;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3717;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3709;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3710;
					this.s_and_w();
					this.state = 3713;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3711;
						this.match(bitmarkParser.NL);
						this.state = 3712;
						this.bullet_item();
						}
						}
						this.state = 3715;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3719;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 485, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3721;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public survey_anonymous(): Survey_anonymousContext {
		let _localctx: Survey_anonymousContext = new Survey_anonymousContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, bitmarkParser.RULE_survey_anonymous);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3723;
			this.match(bitmarkParser.BitSurveyanon);
			this.state = 3724;
			this.format();
			this.state = 3725;
			this.match(bitmarkParser.CL);
			this.state = 3729;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3726;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3731;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3741;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (bitmarkParser.OPDOLL - 139)) | (1 << (bitmarkParser.OPRANGLES - 139)) | (1 << (bitmarkParser.OPRANGLEL - 139)) | (1 << (bitmarkParser.OPDANGLE - 139)) | (1 << (bitmarkParser.OPU - 139)) | (1 << (bitmarkParser.OPB - 139)) | (1 << (bitmarkParser.OPQ - 139)) | (1 << (bitmarkParser.OPA - 139)) | (1 << (bitmarkParser.OPS - 139)) | (1 << (bitmarkParser.OPHASH - 139)) | (1 << (bitmarkParser.OPC - 139)) | (1 << (bitmarkParser.COLON - 139)) | (1 << (bitmarkParser.AMP - 139)) | (1 << (bitmarkParser.Greater - 139)) | (1 << (bitmarkParser.Less - 139)) | (1 << (bitmarkParser.RightAngle - 139)) | (1 << (bitmarkParser.RightArrow - 139)) | (1 << (bitmarkParser.DBLEQ - 139)) | (1 << (bitmarkParser.QUOTE_INDEX - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (bitmarkParser.DCANY - 171)) | (1 << (bitmarkParser.ArticleText - 171)) | (1 << (bitmarkParser.NUMERIC - 171)) | (1 << (bitmarkParser.STRING - 171)) | (1 << (bitmarkParser.NOTBITMARK - 171)) | (1 << (bitmarkParser.SENTENCE - 171)) | (1 << (bitmarkParser.BARSTRING - 171)) | (1 << (bitmarkParser.AtProgress - 171)) | (1 << (bitmarkParser.AtReference - 171)) | (1 << (bitmarkParser.AtProgressPoints - 171)) | (1 << (bitmarkParser.AtExampleWithStr - 171)) | (1 << (bitmarkParser.AtExamplecol - 171)) | (1 << (bitmarkParser.AtExamplecl - 171)) | (1 << (bitmarkParser.AtPartialAnswerS - 171)) | (1 << (bitmarkParser.AtPartialAnswer - 171)) | (1 << (bitmarkParser.AtLabeltrue - 171)) | (1 << (bitmarkParser.AtLabelfalse - 171)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (bitmarkParser.OpAtCopyright - 206)) | (1 << (bitmarkParser.OpAtIsTracked - 206)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 206)) | (1 << (bitmarkParser.AtDate - 206)) | (1 << (bitmarkParser.AmpAudio - 206)) | (1 << (bitmarkParser.AmpImage - 206)) | (1 << (bitmarkParser.AmpVideo - 206)) | (1 << (bitmarkParser.AmpArticle - 206)) | (1 << (bitmarkParser.AmpDocument - 206)) | (1 << (bitmarkParser.AmpApp - 206)) | (1 << (bitmarkParser.AmpWebsite - 206)) | (1 << (bitmarkParser.AmpStillImageFilm - 206)) | (1 << (bitmarkParser.OpAmpAudio - 206)) | (1 << (bitmarkParser.OpAmpImage - 206)) | (1 << (bitmarkParser.OpAmpImageZoom - 206)) | (1 << (bitmarkParser.OpAmpImageWAudio - 206)) | (1 << (bitmarkParser.OpAmpVideo - 206)) | (1 << (bitmarkParser.OpAmpArticle - 206)) | (1 << (bitmarkParser.OpAmpDocument - 206)) | (1 << (bitmarkParser.OpAmpApp - 206)) | (1 << (bitmarkParser.OpAmpWebsite - 206)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 206)) | (1 << (bitmarkParser.BracEnclose - 206)) | (1 << (bitmarkParser.AmpAudioLink - 206)) | (1 << (bitmarkParser.AmpImageLink - 206)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (bitmarkParser.AmpVideoLink - 238)) | (1 << (bitmarkParser.AmpArticleLink - 238)) | (1 << (bitmarkParser.AmpDocumentLink - 238)) | (1 << (bitmarkParser.AmpAppLink - 238)) | (1 << (bitmarkParser.AmpWebsiteLink - 238)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpAudioLink - 238)) | (1 << (bitmarkParser.OpAmpImageLink - 238)) | (1 << (bitmarkParser.OpAmpVideoLink - 238)) | (1 << (bitmarkParser.OpAmpArticleLink - 238)) | (1 << (bitmarkParser.OpAmpDocumentLink - 238)) | (1 << (bitmarkParser.OpAmpAppLink - 238)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 238)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 238)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 238)) | (1 << (bitmarkParser.BitmarkMinus - 238)) | (1 << (bitmarkParser.BitmarkPlus - 238)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
				{
				{
				this.state = 3732;
				this.bitElem();
				this.state = 3736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 3733;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 3738;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3752;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3744;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3745;
					this.s_and_w();
					this.state = 3748;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3746;
						this.match(bitmarkParser.NL);
						this.state = 3747;
						this.bullet_item();
						}
						}
						this.state = 3750;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3754;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 490, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3756;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public survey_anonymous_1(): Survey_anonymous_1Context {
		let _localctx: Survey_anonymous_1Context = new Survey_anonymous_1Context(this._ctx, this.state);
		this.enterRule(_localctx, 306, bitmarkParser.RULE_survey_anonymous_1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3758;
			this.match(bitmarkParser.BitSurveyanon1);
			this.state = 3759;
			this.format();
			this.state = 3760;
			this.match(bitmarkParser.CL);
			this.state = 3764;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3761;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3766;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3776;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (bitmarkParser.OPDOLL - 139)) | (1 << (bitmarkParser.OPRANGLES - 139)) | (1 << (bitmarkParser.OPRANGLEL - 139)) | (1 << (bitmarkParser.OPDANGLE - 139)) | (1 << (bitmarkParser.OPU - 139)) | (1 << (bitmarkParser.OPB - 139)) | (1 << (bitmarkParser.OPQ - 139)) | (1 << (bitmarkParser.OPA - 139)) | (1 << (bitmarkParser.OPS - 139)) | (1 << (bitmarkParser.OPHASH - 139)) | (1 << (bitmarkParser.OPC - 139)) | (1 << (bitmarkParser.COLON - 139)) | (1 << (bitmarkParser.AMP - 139)) | (1 << (bitmarkParser.Greater - 139)) | (1 << (bitmarkParser.Less - 139)) | (1 << (bitmarkParser.RightAngle - 139)) | (1 << (bitmarkParser.RightArrow - 139)) | (1 << (bitmarkParser.DBLEQ - 139)) | (1 << (bitmarkParser.QUOTE_INDEX - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (bitmarkParser.DCANY - 171)) | (1 << (bitmarkParser.ArticleText - 171)) | (1 << (bitmarkParser.NUMERIC - 171)) | (1 << (bitmarkParser.STRING - 171)) | (1 << (bitmarkParser.NOTBITMARK - 171)) | (1 << (bitmarkParser.SENTENCE - 171)) | (1 << (bitmarkParser.BARSTRING - 171)) | (1 << (bitmarkParser.AtProgress - 171)) | (1 << (bitmarkParser.AtReference - 171)) | (1 << (bitmarkParser.AtProgressPoints - 171)) | (1 << (bitmarkParser.AtExampleWithStr - 171)) | (1 << (bitmarkParser.AtExamplecol - 171)) | (1 << (bitmarkParser.AtExamplecl - 171)) | (1 << (bitmarkParser.AtPartialAnswerS - 171)) | (1 << (bitmarkParser.AtPartialAnswer - 171)) | (1 << (bitmarkParser.AtLabeltrue - 171)) | (1 << (bitmarkParser.AtLabelfalse - 171)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (bitmarkParser.OpAtCopyright - 206)) | (1 << (bitmarkParser.OpAtIsTracked - 206)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 206)) | (1 << (bitmarkParser.AtDate - 206)) | (1 << (bitmarkParser.AmpAudio - 206)) | (1 << (bitmarkParser.AmpImage - 206)) | (1 << (bitmarkParser.AmpVideo - 206)) | (1 << (bitmarkParser.AmpArticle - 206)) | (1 << (bitmarkParser.AmpDocument - 206)) | (1 << (bitmarkParser.AmpApp - 206)) | (1 << (bitmarkParser.AmpWebsite - 206)) | (1 << (bitmarkParser.AmpStillImageFilm - 206)) | (1 << (bitmarkParser.OpAmpAudio - 206)) | (1 << (bitmarkParser.OpAmpImage - 206)) | (1 << (bitmarkParser.OpAmpImageZoom - 206)) | (1 << (bitmarkParser.OpAmpImageWAudio - 206)) | (1 << (bitmarkParser.OpAmpVideo - 206)) | (1 << (bitmarkParser.OpAmpArticle - 206)) | (1 << (bitmarkParser.OpAmpDocument - 206)) | (1 << (bitmarkParser.OpAmpApp - 206)) | (1 << (bitmarkParser.OpAmpWebsite - 206)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 206)) | (1 << (bitmarkParser.BracEnclose - 206)) | (1 << (bitmarkParser.AmpAudioLink - 206)) | (1 << (bitmarkParser.AmpImageLink - 206)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (bitmarkParser.AmpVideoLink - 238)) | (1 << (bitmarkParser.AmpArticleLink - 238)) | (1 << (bitmarkParser.AmpDocumentLink - 238)) | (1 << (bitmarkParser.AmpAppLink - 238)) | (1 << (bitmarkParser.AmpWebsiteLink - 238)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpAudioLink - 238)) | (1 << (bitmarkParser.OpAmpImageLink - 238)) | (1 << (bitmarkParser.OpAmpVideoLink - 238)) | (1 << (bitmarkParser.OpAmpArticleLink - 238)) | (1 << (bitmarkParser.OpAmpDocumentLink - 238)) | (1 << (bitmarkParser.OpAmpAppLink - 238)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 238)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 238)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 238)) | (1 << (bitmarkParser.BitmarkMinus - 238)) | (1 << (bitmarkParser.BitmarkPlus - 238)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
				{
				{
				this.state = 3767;
				this.bitElem();
				this.state = 3771;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 3768;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 3773;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3778;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3787;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3779;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3780;
					this.s_and_w();
					this.state = 3783;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3781;
						this.match(bitmarkParser.NL);
						this.state = 3782;
						this.bullet_item();
						}
						}
						this.state = 3785;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3789;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 495, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3791;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public self_assessment(): Self_assessmentContext {
		let _localctx: Self_assessmentContext = new Self_assessmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, bitmarkParser.RULE_self_assessment);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3793;
			this.match(bitmarkParser.BitSelfassess);
			this.state = 3794;
			this.format();
			this.state = 3795;
			this.match(bitmarkParser.CL);
			this.state = 3799;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.NL) {
				{
				{
				this.state = 3796;
				this.match(bitmarkParser.NL);
				}
				}
				this.state = 3801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3811;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (bitmarkParser.OPDOLL - 139)) | (1 << (bitmarkParser.OPRANGLES - 139)) | (1 << (bitmarkParser.OPRANGLEL - 139)) | (1 << (bitmarkParser.OPDANGLE - 139)) | (1 << (bitmarkParser.OPU - 139)) | (1 << (bitmarkParser.OPB - 139)) | (1 << (bitmarkParser.OPQ - 139)) | (1 << (bitmarkParser.OPA - 139)) | (1 << (bitmarkParser.OPS - 139)) | (1 << (bitmarkParser.OPHASH - 139)) | (1 << (bitmarkParser.OPC - 139)) | (1 << (bitmarkParser.COLON - 139)) | (1 << (bitmarkParser.AMP - 139)) | (1 << (bitmarkParser.Greater - 139)) | (1 << (bitmarkParser.Less - 139)) | (1 << (bitmarkParser.RightAngle - 139)) | (1 << (bitmarkParser.RightArrow - 139)) | (1 << (bitmarkParser.DBLEQ - 139)) | (1 << (bitmarkParser.QUOTE_INDEX - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (bitmarkParser.DCANY - 171)) | (1 << (bitmarkParser.ArticleText - 171)) | (1 << (bitmarkParser.NUMERIC - 171)) | (1 << (bitmarkParser.STRING - 171)) | (1 << (bitmarkParser.NOTBITMARK - 171)) | (1 << (bitmarkParser.SENTENCE - 171)) | (1 << (bitmarkParser.BARSTRING - 171)) | (1 << (bitmarkParser.AtProgress - 171)) | (1 << (bitmarkParser.AtReference - 171)) | (1 << (bitmarkParser.AtProgressPoints - 171)) | (1 << (bitmarkParser.AtExampleWithStr - 171)) | (1 << (bitmarkParser.AtExamplecol - 171)) | (1 << (bitmarkParser.AtExamplecl - 171)) | (1 << (bitmarkParser.AtPartialAnswerS - 171)) | (1 << (bitmarkParser.AtPartialAnswer - 171)) | (1 << (bitmarkParser.AtLabeltrue - 171)) | (1 << (bitmarkParser.AtLabelfalse - 171)))) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (bitmarkParser.OpAtCopyright - 206)) | (1 << (bitmarkParser.OpAtIsTracked - 206)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 206)) | (1 << (bitmarkParser.AtDate - 206)) | (1 << (bitmarkParser.AmpAudio - 206)) | (1 << (bitmarkParser.AmpImage - 206)) | (1 << (bitmarkParser.AmpVideo - 206)) | (1 << (bitmarkParser.AmpArticle - 206)) | (1 << (bitmarkParser.AmpDocument - 206)) | (1 << (bitmarkParser.AmpApp - 206)) | (1 << (bitmarkParser.AmpWebsite - 206)) | (1 << (bitmarkParser.AmpStillImageFilm - 206)) | (1 << (bitmarkParser.OpAmpAudio - 206)) | (1 << (bitmarkParser.OpAmpImage - 206)) | (1 << (bitmarkParser.OpAmpImageZoom - 206)) | (1 << (bitmarkParser.OpAmpImageWAudio - 206)) | (1 << (bitmarkParser.OpAmpVideo - 206)) | (1 << (bitmarkParser.OpAmpArticle - 206)) | (1 << (bitmarkParser.OpAmpDocument - 206)) | (1 << (bitmarkParser.OpAmpApp - 206)) | (1 << (bitmarkParser.OpAmpWebsite - 206)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 206)) | (1 << (bitmarkParser.BracEnclose - 206)) | (1 << (bitmarkParser.AmpAudioLink - 206)) | (1 << (bitmarkParser.AmpImageLink - 206)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (bitmarkParser.AmpVideoLink - 238)) | (1 << (bitmarkParser.AmpArticleLink - 238)) | (1 << (bitmarkParser.AmpDocumentLink - 238)) | (1 << (bitmarkParser.AmpAppLink - 238)) | (1 << (bitmarkParser.AmpWebsiteLink - 238)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpAudioLink - 238)) | (1 << (bitmarkParser.OpAmpImageLink - 238)) | (1 << (bitmarkParser.OpAmpVideoLink - 238)) | (1 << (bitmarkParser.OpAmpArticleLink - 238)) | (1 << (bitmarkParser.OpAmpDocumentLink - 238)) | (1 << (bitmarkParser.OpAmpAppLink - 238)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 238)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 238)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 238)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 238)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 238)) | (1 << (bitmarkParser.BitmarkMinus - 238)) | (1 << (bitmarkParser.BitmarkPlus - 238)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
				{
				{
				this.state = 3802;
				this.bitElem();
				this.state = 3806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 3803;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 3808;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3813;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3827;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3814;
					_la = this._input.LA(1);
					if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3815;
					this.self_assess_s_and_w();
					this.state = 3823;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3819;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 3816;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 3821;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 3822;
						this.bullet_item();
						}
						}
						this.state = 3825;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3829;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 501, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3831;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3835;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3832;
					this.match(bitmarkParser.NL);
					}
					}
				}
				this.state = 3837;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
			}
			this.state = 3851;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 505, this._ctx) ) {
			case 1:
				{
				this.state = 3838;
				this.resource();
				this.state = 3848;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 504, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3842;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === bitmarkParser.NL) {
							{
							{
							this.state = 3839;
							this.match(bitmarkParser.NL);
							}
							}
							this.state = 3844;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 3845;
						this.resource();
						}
						}
					}
					this.state = 3850;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 504, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public self_assess_s_and_w(): Self_assess_s_and_wContext {
		let _localctx: Self_assess_s_and_wContext = new Self_assess_s_and_wContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, bitmarkParser.RULE_self_assess_s_and_w);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3854;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3853;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === bitmarkParser.OPBUL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3856;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 506, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public atpoint(): AtpointContext {
		let _localctx: AtpointContext = new AtpointContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, bitmarkParser.RULE_atpoint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3858;
			this.match(bitmarkParser.AtPoints);
			this.state = 3859;
			this.match(bitmarkParser.NUMERIC);
			this.state = 3860;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public format(): FormatContext {
		let _localctx: FormatContext = new FormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, bitmarkParser.RULE_format);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3865;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 507, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3862;
					this.resource_format();
					}
					}
				}
				this.state = 3867;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 507, this._ctx);
			}
			this.state = 3873;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (bitmarkParser.AmpAudio - 213)) | (1 << (bitmarkParser.AmpImage - 213)) | (1 << (bitmarkParser.AmpImageZoom - 213)) | (1 << (bitmarkParser.AmpImageWAudio - 213)) | (1 << (bitmarkParser.AmpVideo - 213)) | (1 << (bitmarkParser.AmpArticle - 213)) | (1 << (bitmarkParser.AmpDocument - 213)) | (1 << (bitmarkParser.AmpApp - 213)) | (1 << (bitmarkParser.AmpWebsite - 213)) | (1 << (bitmarkParser.AmpStillImageFilm - 213)) | (1 << (bitmarkParser.AmpPdf - 213)) | (1 << (bitmarkParser.AmpAudioLink - 213)) | (1 << (bitmarkParser.AmpImageLink - 213)) | (1 << (bitmarkParser.AmpVideoLink - 213)) | (1 << (bitmarkParser.AmpArticleLink - 213)) | (1 << (bitmarkParser.AmpDocumentLink - 213)) | (1 << (bitmarkParser.AmpAppLink - 213)) | (1 << (bitmarkParser.AmpWebsiteLink - 213)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 213)))) !== 0) || ((((_la - 253)) & ~0x1F) === 0 && ((1 << (_la - 253)) & ((1 << (bitmarkParser.AmpVideoEmbed - 253)) | (1 << (bitmarkParser.AmpDocumentEmbed - 253)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 253)) | (1 << (bitmarkParser.ColonText - 253)) | (1 << (bitmarkParser.ColonJson - 253)))) !== 0)) {
				{
				this.state = 3871;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case bitmarkParser.ColonText:
					{
					this.state = 3868;
					this.match(bitmarkParser.ColonText);
					}
					break;
				case bitmarkParser.ColonJson:
					{
					this.state = 3869;
					this.match(bitmarkParser.ColonJson);
					}
					break;
				case bitmarkParser.AmpAudio:
				case bitmarkParser.AmpImage:
				case bitmarkParser.AmpImageZoom:
				case bitmarkParser.AmpImageWAudio:
				case bitmarkParser.AmpVideo:
				case bitmarkParser.AmpArticle:
				case bitmarkParser.AmpDocument:
				case bitmarkParser.AmpApp:
				case bitmarkParser.AmpWebsite:
				case bitmarkParser.AmpStillImageFilm:
				case bitmarkParser.AmpPdf:
				case bitmarkParser.AmpAudioLink:
				case bitmarkParser.AmpImageLink:
				case bitmarkParser.AmpVideoLink:
				case bitmarkParser.AmpArticleLink:
				case bitmarkParser.AmpDocumentLink:
				case bitmarkParser.AmpAppLink:
				case bitmarkParser.AmpWebsiteLink:
				case bitmarkParser.AmpStillImageFilmLink:
				case bitmarkParser.AmpVideoEmbed:
				case bitmarkParser.AmpDocumentEmbed:
				case bitmarkParser.AmpStillImageFilmEmbed:
					{
					this.state = 3870;
					this.resource_format_extra();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 3875;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resource_format(): Resource_formatContext {
		let _localctx: Resource_formatContext = new Resource_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, bitmarkParser.RULE_resource_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3876;
			_la = this._input.LA(1);
			if (!(((((_la - 218)) & ~0x1F) === 0 && ((1 << (_la - 218)) & ((1 << (bitmarkParser.AmpArticle - 218)) | (1 << (bitmarkParser.AmpDocument - 218)) | (1 << (bitmarkParser.AmpWebsite - 218)) | (1 << (bitmarkParser.AmpStillImageFilm - 218)) | (1 << (bitmarkParser.AmpAudioLink - 218)) | (1 << (bitmarkParser.AmpImageLink - 218)) | (1 << (bitmarkParser.AmpVideoLink - 218)) | (1 << (bitmarkParser.AmpArticleLink - 218)) | (1 << (bitmarkParser.AmpDocumentLink - 218)) | (1 << (bitmarkParser.AmpAppLink - 218)) | (1 << (bitmarkParser.AmpWebsiteLink - 218)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 218)))) !== 0) || ((((_la - 253)) & ~0x1F) === 0 && ((1 << (_la - 253)) & ((1 << (bitmarkParser.AmpVideoEmbed - 253)) | (1 << (bitmarkParser.AmpAudioEmbed - 253)) | (1 << (bitmarkParser.AmpDocumentEmbed - 253)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 253)) | (1 << (bitmarkParser.BitmarkMinus - 253)) | (1 << (bitmarkParser.BitmarkPlus - 253)) | (1 << (bitmarkParser.ColonJson - 253)) | (1 << (bitmarkParser.Prosemirror - 253)) | (1 << (bitmarkParser.Placeholder - 253)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resource_format_extra(): Resource_format_extraContext {
		let _localctx: Resource_format_extraContext = new Resource_format_extraContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, bitmarkParser.RULE_resource_format_extra);
		try {
			this.state = 3887;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AmpImage:
			case bitmarkParser.AmpImageZoom:
			case bitmarkParser.AmpImageWAudio:
			case bitmarkParser.AmpImageLink:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3878;
				this.image_format();
				}
				break;
			case bitmarkParser.AmpAudio:
			case bitmarkParser.AmpAudioLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3879;
				this.audio_format();
				}
				break;
			case bitmarkParser.AmpVideo:
			case bitmarkParser.AmpVideoLink:
			case bitmarkParser.AmpVideoEmbed:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3880;
				this.video_format();
				}
				break;
			case bitmarkParser.AmpArticle:
			case bitmarkParser.AmpArticleLink:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3881;
				this.article_format();
				}
				break;
			case bitmarkParser.AmpDocument:
			case bitmarkParser.AmpDocumentLink:
			case bitmarkParser.AmpDocumentEmbed:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3882;
				this.document_format();
				}
				break;
			case bitmarkParser.AmpApp:
			case bitmarkParser.AmpAppLink:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3883;
				this.app_format();
				}
				break;
			case bitmarkParser.AmpWebsite:
			case bitmarkParser.AmpWebsiteLink:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3884;
				this.website_format();
				}
				break;
			case bitmarkParser.AmpStillImageFilm:
			case bitmarkParser.AmpStillImageFilmLink:
			case bitmarkParser.AmpStillImageFilmEmbed:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3885;
				this.stillimagefilm_format();
				}
				break;
			case bitmarkParser.AmpPdf:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3886;
				this.match(bitmarkParser.AmpPdf);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public format2(): Format2Context {
		let _localctx: Format2Context = new Format2Context(this._ctx, this.state);
		this.enterRule(_localctx, 320, bitmarkParser.RULE_format2);
		try {
			this.state = 3894;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.BitmarkMinus:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3889;
				this.match(bitmarkParser.BitmarkMinus);
				}
				break;
			case bitmarkParser.BitmarkPlus:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3890;
				this.match(bitmarkParser.BitmarkPlus);
				}
				break;
			case bitmarkParser.ColonText:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3891;
				this.match(bitmarkParser.ColonText);
				}
				break;
			case bitmarkParser.ColonJson:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3892;
				this.match(bitmarkParser.ColonJson);
				}
				break;
			case bitmarkParser.CL:
				this.enterOuterAlt(_localctx, 5);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_format(): Image_formatContext {
		let _localctx: Image_formatContext = new Image_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, bitmarkParser.RULE_image_format);
		let _la: number;
		try {
			this.state = 3910;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AmpImage:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3896;
				this.match(bitmarkParser.AmpImage);
				this.state = 3899;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case bitmarkParser.Image_type:
					{
					{
					this.state = 3897;
					this.match(bitmarkParser.Image_type);
					}
					}
					break;
				case bitmarkParser.DotArticleAtt:
					{
					{
					this.state = 3898;
					this.match(bitmarkParser.DotArticleAtt);
					}
					}
					break;
				case bitmarkParser.CL:
				case bitmarkParser.AmpAudio:
				case bitmarkParser.AmpImage:
				case bitmarkParser.AmpImageZoom:
				case bitmarkParser.AmpImageWAudio:
				case bitmarkParser.AmpVideo:
				case bitmarkParser.AmpArticle:
				case bitmarkParser.AmpDocument:
				case bitmarkParser.AmpApp:
				case bitmarkParser.AmpWebsite:
				case bitmarkParser.AmpStillImageFilm:
				case bitmarkParser.AmpPdf:
				case bitmarkParser.AmpAudioLink:
				case bitmarkParser.AmpImageLink:
				case bitmarkParser.AmpVideoLink:
				case bitmarkParser.AmpArticleLink:
				case bitmarkParser.AmpDocumentLink:
				case bitmarkParser.AmpAppLink:
				case bitmarkParser.AmpWebsiteLink:
				case bitmarkParser.AmpStillImageFilmLink:
				case bitmarkParser.AmpVideoEmbed:
				case bitmarkParser.AmpDocumentEmbed:
				case bitmarkParser.AmpStillImageFilmEmbed:
				case bitmarkParser.ColonText:
				case bitmarkParser.ColonJson:
					break;
				default:
					break;
				}
				}
				break;
			case bitmarkParser.AmpImageLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3901;
				this.match(bitmarkParser.AmpImageLink);
				this.state = 3903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.Image_type) {
					{
					this.state = 3902;
					this.match(bitmarkParser.Image_type);
					}
				}

				}
				break;
			case bitmarkParser.AmpImageZoom:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3905;
				this.match(bitmarkParser.AmpImageZoom);
				this.state = 3907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.Image_type) {
					{
					this.state = 3906;
					this.match(bitmarkParser.Image_type);
					}
				}

				}
				break;
			case bitmarkParser.AmpImageWAudio:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3909;
				this.match(bitmarkParser.AmpImageWAudio);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public video_format(): Video_formatContext {
		let _localctx: Video_formatContext = new Video_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, bitmarkParser.RULE_video_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3912;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpVideo || _la === bitmarkParser.AmpVideoLink || _la === bitmarkParser.AmpVideoEmbed)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3915;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.COLON) {
				{
				this.state = 3913;
				this.match(bitmarkParser.COLON);
				this.state = 3914;
				this.match(bitmarkParser.Video_type);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public article_format(): Article_formatContext {
		let _localctx: Article_formatContext = new Article_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, bitmarkParser.RULE_article_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3917;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpArticle || _la === bitmarkParser.AmpArticleLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public document_format(): Document_formatContext {
		let _localctx: Document_formatContext = new Document_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, bitmarkParser.RULE_document_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3919;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpDocument || _la === bitmarkParser.AmpDocumentLink || _la === bitmarkParser.AmpDocumentEmbed)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public app_format(): App_formatContext {
		let _localctx: App_formatContext = new App_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, bitmarkParser.RULE_app_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3921;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpApp || _la === bitmarkParser.AmpAppLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public website_format(): Website_formatContext {
		let _localctx: Website_formatContext = new Website_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, bitmarkParser.RULE_website_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3923;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpWebsite || _la === bitmarkParser.AmpWebsiteLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stillimagefilm_format(): Stillimagefilm_formatContext {
		let _localctx: Stillimagefilm_formatContext = new Stillimagefilm_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, bitmarkParser.RULE_stillimagefilm_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3925;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.AmpStillImageFilm || _la === bitmarkParser.AmpStillImageFilmLink || _la === bitmarkParser.AmpStillImageFilmEmbed)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_article_format(): Op_article_formatContext {
		let _localctx: Op_article_formatContext = new Op_article_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, bitmarkParser.RULE_op_article_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3927;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.OpAmpArticle || _la === bitmarkParser.OpAmpArticleLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_document_format(): Op_document_formatContext {
		let _localctx: Op_document_formatContext = new Op_document_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, bitmarkParser.RULE_op_document_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3929;
			_la = this._input.LA(1);
			if (!(((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & ((1 << (bitmarkParser.OpAmpDocument - 231)) | (1 << (bitmarkParser.OpAmpDocumentLink - 231)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 231)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_app_format(): Op_app_formatContext {
		let _localctx: Op_app_formatContext = new Op_app_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, bitmarkParser.RULE_op_app_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3931;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.OpAmpApp || _la === bitmarkParser.OpAmpAppLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_website_format(): Op_website_formatContext {
		let _localctx: Op_website_formatContext = new Op_website_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, bitmarkParser.RULE_op_website_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3933;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.OpAmpWebsite || _la === bitmarkParser.OpAmpWebsiteLink)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_video_format(): Op_video_formatContext {
		let _localctx: Op_video_formatContext = new Op_video_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, bitmarkParser.RULE_op_video_format);
		try {
			this.state = 3950;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OpAmpVideo:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3935;
				this.match(bitmarkParser.OpAmpVideo);
				this.state = 3938;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 517, this._ctx) ) {
				case 1:
					{
					this.state = 3936;
					this.match(bitmarkParser.COLON);
					this.state = 3937;
					this.match(bitmarkParser.Video_type);
					}
					break;
				}
				}
				break;
			case bitmarkParser.OpAmpVideoLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3940;
				this.match(bitmarkParser.OpAmpVideoLink);
				this.state = 3943;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 518, this._ctx) ) {
				case 1:
					{
					this.state = 3941;
					this.match(bitmarkParser.COLON);
					this.state = 3942;
					this.match(bitmarkParser.Video_type);
					}
					break;
				}
				}
				break;
			case bitmarkParser.OpAmpVideoEmbed:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3945;
				this.match(bitmarkParser.OpAmpVideoEmbed);
				this.state = 3948;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 519, this._ctx) ) {
				case 1:
					{
					this.state = 3946;
					this.match(bitmarkParser.COLON);
					this.state = 3947;
					this.match(bitmarkParser.Video_type);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_stillimagefilm_format(): Op_stillimagefilm_formatContext {
		let _localctx: Op_stillimagefilm_formatContext = new Op_stillimagefilm_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, bitmarkParser.RULE_op_stillimagefilm_format);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3952;
			_la = this._input.LA(1);
			if (!(((((_la - 234)) & ~0x1F) === 0 && ((1 << (_la - 234)) & ((1 << (bitmarkParser.OpAmpStillImageFilm - 234)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 234)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 234)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public articlebit(): ArticlebitContext {
		let _localctx: ArticlebitContext = new ArticlebitContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, bitmarkParser.RULE_articlebit);
		try {
			this.state = 3960;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OpAmpArticle:
			case bitmarkParser.OpAmpArticleLink:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3954;
				this.op_article_format();
				this.state = 3955;
				this.match(bitmarkParser.COLON);
				this.state = 3956;
				this.url();
				this.state = 3957;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.ArticleText:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3959;
				this.match(bitmarkParser.ArticleText);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public documentbit(): DocumentbitContext {
		let _localctx: DocumentbitContext = new DocumentbitContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, bitmarkParser.RULE_documentbit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3962;
			this.op_document_format();
			this.state = 3963;
			this.match(bitmarkParser.COLON);
			this.state = 3964;
			this.url();
			this.state = 3965;
			this.match(bitmarkParser.CL);
			this.state = 3970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPATALT) {
				{
				this.state = 3966;
				this.match(bitmarkParser.OPATALT);
				this.state = 3967;
				this.words();
				this.state = 3968;
				this.match(bitmarkParser.CL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public websitebit(): WebsitebitContext {
		let _localctx: WebsitebitContext = new WebsitebitContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, bitmarkParser.RULE_websitebit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3972;
			this.op_website_format();
			this.state = 3973;
			this.match(bitmarkParser.COLON);
			this.state = 3974;
			this.url();
			this.state = 3975;
			this.match(bitmarkParser.CL);
			this.state = 3980;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPATALT) {
				{
				this.state = 3976;
				this.match(bitmarkParser.OPATALT);
				this.state = 3977;
				this.words();
				this.state = 3978;
				this.match(bitmarkParser.CL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public appbit(): AppbitContext {
		let _localctx: AppbitContext = new AppbitContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, bitmarkParser.RULE_appbit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3982;
			this.op_app_format();
			this.state = 3983;
			this.match(bitmarkParser.COLON);
			this.state = 3986;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.URL:
				{
				this.state = 3984;
				this.url();
				}
				break;
			case bitmarkParser.TEL:
				{
				this.state = 3985;
				this.telephone();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3988;
			this.match(bitmarkParser.CL);
			this.state = 3993;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.OPATALT) {
				{
				this.state = 3989;
				this.match(bitmarkParser.OPATALT);
				this.state = 3990;
				this.words();
				this.state = 3991;
				this.match(bitmarkParser.CL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stillimagefilmbit(): StillimagefilmbitContext {
		let _localctx: StillimagefilmbitContext = new StillimagefilmbitContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, bitmarkParser.RULE_stillimagefilmbit);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3995;
			this.stillimg_one();
			this.state = 3999;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 526, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3996;
					this.resource_chained();
					}
					}
				}
				this.state = 4001;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 526, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stillimg_one(): Stillimg_oneContext {
		let _localctx: Stillimg_oneContext = new Stillimg_oneContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, bitmarkParser.RULE_stillimg_one);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4002;
			this.op_stillimagefilm_format();
			this.state = 4003;
			this.match(bitmarkParser.COLON);
			this.state = 4007;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S) {
				{
				{
				this.state = 4004;
				this.match(bitmarkParser.S);
				}
				}
				this.state = 4009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4010;
			this.url();
			this.state = 4011;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public videobit(): VideobitContext {
		let _localctx: VideobitContext = new VideobitContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, bitmarkParser.RULE_videobit);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4013;
			this.video_one();
			this.state = 4017;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 528, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4014;
					this.resource_chained();
					}
					}
				}
				this.state = 4019;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 528, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public video_one(): Video_oneContext {
		let _localctx: Video_oneContext = new Video_oneContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, bitmarkParser.RULE_video_one);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4020;
			this.op_video_format();
			this.state = 4021;
			this.match(bitmarkParser.COLON);
			this.state = 4022;
			this.url();
			this.state = 4023;
			this.match(bitmarkParser.CL);
			this.state = 4028;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 529, this._ctx) ) {
			case 1:
				{
				this.state = 4024;
				this.match(bitmarkParser.OPATALT);
				this.state = 4025;
				this.words();
				this.state = 4026;
				this.match(bitmarkParser.CL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public imagebit(): ImagebitContext {
		let _localctx: ImagebitContext = new ImagebitContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, bitmarkParser.RULE_imagebit);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4030;
			this.image_one();
			this.state = 4034;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4031;
					this.image_chained();
					}
					}
				}
				this.state = 4036;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
			}
			this.state = 4039;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 531, this._ctx) ) {
			case 1:
				{
				this.state = 4037;
				this.match(bitmarkParser.NL);
				this.state = 4038;
				this.match(bitmarkParser.ShowInIndex);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_one(): Image_oneContext {
		let _localctx: Image_oneContext = new Image_oneContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, bitmarkParser.RULE_image_one);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4041;
			this.op_image_format();
			this.state = 4042;
			this.match(bitmarkParser.COLON);
			this.state = 4046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === bitmarkParser.S) {
				{
				{
				this.state = 4043;
				this.match(bitmarkParser.S);
				}
				}
				this.state = 4048;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4049;
			this.url();
			this.state = 4050;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_image_format(): Op_image_formatContext {
		let _localctx: Op_image_formatContext = new Op_image_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, bitmarkParser.RULE_op_image_format);
		let _la: number;
		try {
			this.state = 4066;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OpAmpImage:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4052;
				this.match(bitmarkParser.OpAmpImage);
				this.state = 4055;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case bitmarkParser.Image_type:
					{
					{
					this.state = 4053;
					this.match(bitmarkParser.Image_type);
					}
					}
					break;
				case bitmarkParser.DotArticleAtt:
					{
					{
					this.state = 4054;
					this.match(bitmarkParser.DotArticleAtt);
					}
					}
					break;
				case bitmarkParser.COLON:
					break;
				default:
					break;
				}
				}
				break;
			case bitmarkParser.OpAmpImageLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4057;
				this.match(bitmarkParser.OpAmpImageLink);
				this.state = 4059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.Image_type) {
					{
					this.state = 4058;
					this.match(bitmarkParser.Image_type);
					}
				}

				}
				break;
			case bitmarkParser.OpAmpImageZoom:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4061;
				this.match(bitmarkParser.OpAmpImageZoom);
				this.state = 4063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.Image_type) {
					{
					this.state = 4062;
					this.match(bitmarkParser.Image_type);
					}
				}

				}
				break;
			case bitmarkParser.OpAmpImageWAudio:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4065;
				this.match(bitmarkParser.OpAmpImageWAudio);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_chained(): Image_chainedContext {
		let _localctx: Image_chainedContext = new Image_chainedContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, bitmarkParser.RULE_image_chained);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4085;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AtSrc:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4068;
				this.match(bitmarkParser.AtSrc);
				this.state = 4069;
				this.match(bitmarkParser.COLON);
				this.state = 4070;
				this.url();
				this.state = 4071;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.AtWidth:
			case bitmarkParser.AtHeight:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4073;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4074;
				this.match(bitmarkParser.COLON);
				this.state = 4075;
				this.match(bitmarkParser.NUMERIC);
				this.state = 4076;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.OPATALT:
			case bitmarkParser.OpAtCaption:
			case bitmarkParser.OpAtLicense:
			case bitmarkParser.OpAtCopyright:
			case bitmarkParser.OpAtSearch:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4077;
				_la = this._input.LA(1);
				if (!(((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (bitmarkParser.OPATALT - 201)) | (1 << (bitmarkParser.OpAtCaption - 201)) | (1 << (bitmarkParser.OpAtLicense - 201)) | (1 << (bitmarkParser.OpAtCopyright - 201)) | (1 << (bitmarkParser.OpAtSearch - 201)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4081;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 537, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 4078;
						this.matchWildcard();
						}
						}
					}
					this.state = 4083;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 537, this._ctx);
				}
				this.state = 4084;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public image_chained4match(): Image_chained4matchContext {
		let _localctx: Image_chained4matchContext = new Image_chained4matchContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, bitmarkParser.RULE_image_chained4match);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4104;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AtSrc:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4087;
				this.match(bitmarkParser.AtSrc);
				this.state = 4088;
				this.match(bitmarkParser.COLON);
				this.state = 4089;
				this.url();
				this.state = 4090;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.AtWidth:
			case bitmarkParser.AtHeight:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4092;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4093;
				this.match(bitmarkParser.COLON);
				this.state = 4094;
				this.match(bitmarkParser.NUMERIC);
				this.state = 4095;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.OPATALT:
			case bitmarkParser.OpAtCaption:
			case bitmarkParser.OpAtLicense:
			case bitmarkParser.OpAtCopyright:
			case bitmarkParser.OpAtSearch:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4096;
				_la = this._input.LA(1);
				if (!(((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (bitmarkParser.OPATALT - 201)) | (1 << (bitmarkParser.OpAtCaption - 201)) | (1 << (bitmarkParser.OpAtLicense - 201)) | (1 << (bitmarkParser.OpAtCopyright - 201)) | (1 << (bitmarkParser.OpAtSearch - 201)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4100;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 539, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 4097;
						this.matchWildcard();
						}
						}
					}
					this.state = 4102;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 539, this._ctx);
				}
				this.state = 4103;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public audiobit(): AudiobitContext {
		let _localctx: AudiobitContext = new AudiobitContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, bitmarkParser.RULE_audiobit);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4106;
			this.audio_one();
			this.state = 4110;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 541, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4107;
					this.resource_chained();
					}
					}
				}
				this.state = 4112;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 541, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public audio_one(): Audio_oneContext {
		let _localctx: Audio_oneContext = new Audio_oneContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, bitmarkParser.RULE_audio_one);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4113;
			this.op_audio_format();
			this.state = 4114;
			this.match(bitmarkParser.COLON);
			this.state = 4115;
			this.url();
			this.state = 4116;
			this.match(bitmarkParser.CL);
			this.state = 4121;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 542, this._ctx) ) {
			case 1:
				{
				this.state = 4117;
				this.match(bitmarkParser.OPATALT);
				this.state = 4118;
				this.words();
				this.state = 4119;
				this.match(bitmarkParser.CL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public audio_format(): Audio_formatContext {
		let _localctx: Audio_formatContext = new Audio_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, bitmarkParser.RULE_audio_format);
		let _la: number;
		try {
			this.state = 4133;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AmpAudio:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4123;
				this.match(bitmarkParser.AmpAudio);
				this.state = 4126;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.COLON) {
					{
					this.state = 4124;
					this.match(bitmarkParser.COLON);
					this.state = 4125;
					this.match(bitmarkParser.Audio_type);
					}
				}

				}
				break;
			case bitmarkParser.AmpAudioLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4128;
				this.match(bitmarkParser.AmpAudioLink);
				this.state = 4131;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.COLON) {
					{
					this.state = 4129;
					this.match(bitmarkParser.COLON);
					this.state = 4130;
					this.match(bitmarkParser.Audio_type);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public op_audio_format(): Op_audio_formatContext {
		let _localctx: Op_audio_formatContext = new Op_audio_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, bitmarkParser.RULE_op_audio_format);
		try {
			this.state = 4150;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OpAmpAudio:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4135;
				this.match(bitmarkParser.OpAmpAudio);
				this.state = 4138;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 546, this._ctx) ) {
				case 1:
					{
					this.state = 4136;
					this.match(bitmarkParser.COLON);
					this.state = 4137;
					this.match(bitmarkParser.Audio_type);
					}
					break;
				}
				}
				break;
			case bitmarkParser.OpAmpAudioLink:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4140;
				this.match(bitmarkParser.OpAmpAudioLink);
				this.state = 4143;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 547, this._ctx) ) {
				case 1:
					{
					this.state = 4141;
					this.match(bitmarkParser.COLON);
					this.state = 4142;
					this.match(bitmarkParser.Audio_type);
					}
					break;
				}
				}
				break;
			case bitmarkParser.OpAmpAudioEmbed:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4145;
				this.match(bitmarkParser.OpAmpAudioEmbed);
				this.state = 4148;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 548, this._ctx) ) {
				case 1:
					{
					this.state = 4146;
					this.match(bitmarkParser.COLON);
					this.state = 4147;
					this.match(bitmarkParser.Audio_type);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resource_chained(): Resource_chainedContext {
		let _localctx: Resource_chainedContext = new Resource_chainedContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, bitmarkParser.RULE_resource_chained);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4183;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OPA:
			case bitmarkParser.AtSrc:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4155;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case bitmarkParser.OPA:
					{
					this.state = 4152;
					this.match(bitmarkParser.OPA);
					this.state = 4153;
					this.s_and_w();
					}
					break;
				case bitmarkParser.AtSrc:
					{
					this.state = 4154;
					this.match(bitmarkParser.AtSrc);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4157;
				this.match(bitmarkParser.COLON);
				this.state = 4161;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4158;
						this.match(bitmarkParser.S);
						}
						}
					}
					this.state = 4163;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
				}
				this.state = 4166;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 4166;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.S:
					case bitmarkParser.OPS:
					case bitmarkParser.COLON:
					case bitmarkParser.AMP:
					case bitmarkParser.Greater:
					case bitmarkParser.Less:
					case bitmarkParser.RightAngle:
					case bitmarkParser.RightArrow:
					case bitmarkParser.DBLEQ:
					case bitmarkParser.QUOTE_INDEX:
					case bitmarkParser.NUMERIC:
					case bitmarkParser.STRING:
					case bitmarkParser.NOTBITMARK:
					case bitmarkParser.SENTENCE:
					case bitmarkParser.BARSTRING:
					case bitmarkParser.AmpAudio:
					case bitmarkParser.AmpImage:
					case bitmarkParser.AmpVideo:
					case bitmarkParser.AmpArticle:
					case bitmarkParser.AmpDocument:
					case bitmarkParser.AmpApp:
					case bitmarkParser.AmpWebsite:
					case bitmarkParser.AmpStillImageFilm:
					case bitmarkParser.AmpAudioLink:
					case bitmarkParser.AmpImageLink:
					case bitmarkParser.AmpVideoLink:
					case bitmarkParser.AmpArticleLink:
					case bitmarkParser.AmpDocumentLink:
					case bitmarkParser.AmpAppLink:
					case bitmarkParser.AmpWebsiteLink:
					case bitmarkParser.AmpStillImageFilmLink:
					case bitmarkParser.BitmarkMinus:
					case bitmarkParser.BitmarkPlus:
					case bitmarkParser.URL:
						{
						this.state = 4164;
						this.s_and_w();
						}
						break;
					case bitmarkParser.NL:
						{
						this.state = 4165;
						this.match(bitmarkParser.NL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 4168;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
				this.state = 4170;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.AtWidth:
			case bitmarkParser.AtHeight:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4171;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4172;
				this.match(bitmarkParser.COLON);
				this.state = 4173;
				this.match(bitmarkParser.NUMERIC);
				this.state = 4174;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.OPATALT:
			case bitmarkParser.OpAtCaption:
			case bitmarkParser.OpAtLicense:
			case bitmarkParser.OpAtCopyright:
			case bitmarkParser.OpAtSearch:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4175;
				_la = this._input.LA(1);
				if (!(((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (bitmarkParser.OPATALT - 201)) | (1 << (bitmarkParser.OpAtCaption - 201)) | (1 << (bitmarkParser.OpAtLicense - 201)) | (1 << (bitmarkParser.OpAtCopyright - 201)) | (1 << (bitmarkParser.OpAtSearch - 201)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4179;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 554, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 4176;
						this.matchWildcard();
						}
						}
					}
					this.state = 4181;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 554, this._ctx);
				}
				this.state = 4182;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public telephone(): TelephoneContext {
		let _localctx: TelephoneContext = new TelephoneContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, bitmarkParser.RULE_telephone);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4185;
			this.match(bitmarkParser.TEL);
			this.state = 4186;
			this.match(bitmarkParser.PLUS);
			this.state = 4187;
			this.match(bitmarkParser.NUMERIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public url(): UrlContext {
		let _localctx: UrlContext = new UrlContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, bitmarkParser.RULE_url);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4189;
			this.match(bitmarkParser.URL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public item(): ItemContext {
		let _localctx: ItemContext = new ItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, bitmarkParser.RULE_item);
		let _la: number;
		try {
			this.state = 4221;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 562, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4191;
				this.match(bitmarkParser.OPC);
				this.state = 4192;
				this.match(bitmarkParser.CL);
				this.state = 4200;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 557, this._ctx) ) {
				case 1:
					{
					this.state = 4196;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.S) {
						{
						{
						this.state = 4193;
						this.match(bitmarkParser.S);
						}
						}
						this.state = 4198;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4199;
					this.lead();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4202;
				this.match(bitmarkParser.OPC);
				this.state = 4203;
				this.s_and_w();
				this.state = 4208;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 155)) & ~0x1F) === 0 && ((1 << (_la - 155)) & ((1 << (bitmarkParser.COLON - 155)) | (1 << (bitmarkParser.AMP - 155)) | (1 << (bitmarkParser.Greater - 155)) | (1 << (bitmarkParser.Less - 155)) | (1 << (bitmarkParser.RightAngle - 155)) | (1 << (bitmarkParser.RightArrow - 155)) | (1 << (bitmarkParser.QUOTE_INDEX - 155)) | (1 << (bitmarkParser.NOTBITMARK - 155)) | (1 << (bitmarkParser.SENTENCE - 155)) | (1 << (bitmarkParser.BARSTRING - 155)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (bitmarkParser.AmpAudio - 213)) | (1 << (bitmarkParser.AmpImage - 213)) | (1 << (bitmarkParser.AmpVideo - 213)) | (1 << (bitmarkParser.AmpArticle - 213)) | (1 << (bitmarkParser.AmpDocument - 213)) | (1 << (bitmarkParser.AmpApp - 213)) | (1 << (bitmarkParser.AmpWebsite - 213)) | (1 << (bitmarkParser.AmpStillImageFilm - 213)) | (1 << (bitmarkParser.AmpAudioLink - 213)) | (1 << (bitmarkParser.AmpImageLink - 213)) | (1 << (bitmarkParser.AmpVideoLink - 213)) | (1 << (bitmarkParser.AmpArticleLink - 213)) | (1 << (bitmarkParser.AmpDocumentLink - 213)) | (1 << (bitmarkParser.AmpAppLink - 213)) | (1 << (bitmarkParser.AmpWebsiteLink - 213)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 213)))) !== 0) || _la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
					{
					this.state = 4206;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.COLON:
						{
						this.state = 4204;
						this.match(bitmarkParser.COLON);
						}
						break;
					case bitmarkParser.AMP:
					case bitmarkParser.Greater:
					case bitmarkParser.Less:
					case bitmarkParser.RightAngle:
					case bitmarkParser.RightArrow:
					case bitmarkParser.QUOTE_INDEX:
					case bitmarkParser.NOTBITMARK:
					case bitmarkParser.SENTENCE:
					case bitmarkParser.BARSTRING:
					case bitmarkParser.AmpAudio:
					case bitmarkParser.AmpImage:
					case bitmarkParser.AmpVideo:
					case bitmarkParser.AmpArticle:
					case bitmarkParser.AmpDocument:
					case bitmarkParser.AmpApp:
					case bitmarkParser.AmpWebsite:
					case bitmarkParser.AmpStillImageFilm:
					case bitmarkParser.AmpAudioLink:
					case bitmarkParser.AmpImageLink:
					case bitmarkParser.AmpVideoLink:
					case bitmarkParser.AmpArticleLink:
					case bitmarkParser.AmpDocumentLink:
					case bitmarkParser.AmpAppLink:
					case bitmarkParser.AmpWebsiteLink:
					case bitmarkParser.AmpStillImageFilmLink:
					case bitmarkParser.BitmarkMinus:
					case bitmarkParser.BitmarkPlus:
						{
						this.state = 4205;
						this.words();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 4210;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4211;
				this.match(bitmarkParser.CL);
				this.state = 4219;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 561, this._ctx) ) {
				case 1:
					{
					this.state = 4215;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.S) {
						{
						{
						this.state = 4212;
						this.match(bitmarkParser.S);
						}
						}
						this.state = 4217;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4218;
					this.lead();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lead(): LeadContext {
		let _localctx: LeadContext = new LeadContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, bitmarkParser.RULE_lead);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4223;
			this.match(bitmarkParser.OPC);
			this.state = 4224;
			this.s_and_w();
			this.state = 4229;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 155)) & ~0x1F) === 0 && ((1 << (_la - 155)) & ((1 << (bitmarkParser.COLON - 155)) | (1 << (bitmarkParser.AMP - 155)) | (1 << (bitmarkParser.Greater - 155)) | (1 << (bitmarkParser.Less - 155)) | (1 << (bitmarkParser.RightAngle - 155)) | (1 << (bitmarkParser.RightArrow - 155)) | (1 << (bitmarkParser.QUOTE_INDEX - 155)) | (1 << (bitmarkParser.NOTBITMARK - 155)) | (1 << (bitmarkParser.SENTENCE - 155)) | (1 << (bitmarkParser.BARSTRING - 155)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (bitmarkParser.AmpAudio - 213)) | (1 << (bitmarkParser.AmpImage - 213)) | (1 << (bitmarkParser.AmpVideo - 213)) | (1 << (bitmarkParser.AmpArticle - 213)) | (1 << (bitmarkParser.AmpDocument - 213)) | (1 << (bitmarkParser.AmpApp - 213)) | (1 << (bitmarkParser.AmpWebsite - 213)) | (1 << (bitmarkParser.AmpStillImageFilm - 213)) | (1 << (bitmarkParser.AmpAudioLink - 213)) | (1 << (bitmarkParser.AmpImageLink - 213)) | (1 << (bitmarkParser.AmpVideoLink - 213)) | (1 << (bitmarkParser.AmpArticleLink - 213)) | (1 << (bitmarkParser.AmpDocumentLink - 213)) | (1 << (bitmarkParser.AmpAppLink - 213)) | (1 << (bitmarkParser.AmpWebsiteLink - 213)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 213)))) !== 0) || _la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
				{
				this.state = 4227;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case bitmarkParser.COLON:
					{
					this.state = 4225;
					this.match(bitmarkParser.COLON);
					}
					break;
				case bitmarkParser.AMP:
				case bitmarkParser.Greater:
				case bitmarkParser.Less:
				case bitmarkParser.RightAngle:
				case bitmarkParser.RightArrow:
				case bitmarkParser.QUOTE_INDEX:
				case bitmarkParser.NOTBITMARK:
				case bitmarkParser.SENTENCE:
				case bitmarkParser.BARSTRING:
				case bitmarkParser.AmpAudio:
				case bitmarkParser.AmpImage:
				case bitmarkParser.AmpVideo:
				case bitmarkParser.AmpArticle:
				case bitmarkParser.AmpDocument:
				case bitmarkParser.AmpApp:
				case bitmarkParser.AmpWebsite:
				case bitmarkParser.AmpStillImageFilm:
				case bitmarkParser.AmpAudioLink:
				case bitmarkParser.AmpImageLink:
				case bitmarkParser.AmpVideoLink:
				case bitmarkParser.AmpArticleLink:
				case bitmarkParser.AmpDocumentLink:
				case bitmarkParser.AmpAppLink:
				case bitmarkParser.AmpWebsiteLink:
				case bitmarkParser.AmpStillImageFilmLink:
				case bitmarkParser.BitmarkMinus:
				case bitmarkParser.BitmarkPlus:
					{
					this.state = 4226;
					this.words();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 4231;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4232;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public angleref(): AnglerefContext {
		let _localctx: AnglerefContext = new AnglerefContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, bitmarkParser.RULE_angleref);
		let _la: number;
		try {
			this.state = 4244;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OPRANGLES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4234;
				this.match(bitmarkParser.OPRANGLES);
				this.state = 4236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
					{
					this.state = 4235;
					this.s_and_w();
					}
				}

				this.state = 4238;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.OPRANGLEL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4239;
				this.match(bitmarkParser.OPRANGLEL);
				this.state = 4241;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
					{
					this.state = 4240;
					this.s_and_w();
					}
				}

				this.state = 4243;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public example(): ExampleContext {
		let _localctx: ExampleContext = new ExampleContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, bitmarkParser.RULE_example);
		let _la: number;
		try {
			this.state = 4253;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AtExamplecl:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4246;
				this.match(bitmarkParser.AtExamplecl);
				}
				break;
			case bitmarkParser.AtExampleWithStr:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4247;
				this.match(bitmarkParser.AtExampleWithStr);
				}
				break;
			case bitmarkParser.AtExamplecol:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4248;
				this.match(bitmarkParser.AtExamplecol);
				this.state = 4250;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.SENTENCE) {
					{
					this.state = 4249;
					this.match(bitmarkParser.SENTENCE);
					}
				}

				this.state = 4252;
				this.match(bitmarkParser.EOF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bracketed_text(): Bracketed_textContext {
		let _localctx: Bracketed_textContext = new Bracketed_textContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, bitmarkParser.RULE_bracketed_text);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4294;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 577, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4255;
				this.match(bitmarkParser.BracEnclose);
				this.state = 4257;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 570, this._ctx) ) {
				case 1:
					{
					this.state = 4256;
					this.s_and_w();
					}
					break;
				}
				this.state = 4280;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
					{
					{
					this.state = 4259;
					this.s_and_w();
					this.state = 4269;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 572, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4260;
							this.match(bitmarkParser.NL);
							this.state = 4264;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 571, this._ctx);
							while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
								if (_alt === 1) {
									{
									{
									this.state = 4261;
									this.match(bitmarkParser.S);
									}
									}
								}
								this.state = 4266;
								this._errHandler.sync(this);
								_alt = this.interpreter.adaptivePredict(this._input, 571, this._ctx);
							}
							}
							}
						}
						this.state = 4271;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 572, this._ctx);
					}
					this.state = 4275;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 4272;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 4277;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4282;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4283;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4284;
				this.match(bitmarkParser.BracEnclose);
				this.state = 4290;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
					{
					this.state = 4288;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 575, this._ctx) ) {
					case 1:
						{
						this.state = 4285;
						this.s_and_w();
						}
						break;

					case 2:
						{
						this.state = 4286;
						this.match(bitmarkParser.NL);
						}
						break;

					case 3:
						{
						this.state = 4287;
						this.match(bitmarkParser.S);
						}
						break;
					}
					}
					this.state = 4292;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4293;
				this.match(bitmarkParser.EOF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reference(): ReferenceContext {
		let _localctx: ReferenceContext = new ReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, bitmarkParser.RULE_reference);
		let _la: number;
		try {
			this.state = 4318;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 582, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4296;
				this.match(bitmarkParser.AtReference);
				this.state = 4301;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 4301;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 578, this._ctx) ) {
					case 1:
						{
						this.state = 4297;
						this.s_and_w();
						}
						break;

					case 2:
						{
						this.state = 4298;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 3:
						{
						this.state = 4299;
						this.match(bitmarkParser.URL);
						}
						break;

					case 4:
						{
						this.state = 4300;
						this.match(bitmarkParser.NL);
						}
						break;
					}
					}
					this.state = 4303;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
				this.state = 4305;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4306;
				this.match(bitmarkParser.AtReference);
				this.state = 4314;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
					{
					this.state = 4312;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 580, this._ctx) ) {
					case 1:
						{
						this.state = 4307;
						this.s_and_w();
						}
						break;

					case 2:
						{
						this.state = 4308;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 3:
						{
						this.state = 4309;
						this.match(bitmarkParser.URL);
						}
						break;

					case 4:
						{
						this.state = 4310;
						this.match(bitmarkParser.NL);
						}
						break;

					case 5:
						{
						this.state = 4311;
						this.match(bitmarkParser.S);
						}
						break;
					}
					}
					this.state = 4316;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4317;
				this.match(bitmarkParser.EOF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public progress(): ProgressContext {
		let _localctx: ProgressContext = new ProgressContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, bitmarkParser.RULE_progress);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4320;
			this.match(bitmarkParser.AtProgress);
			this.state = 4321;
			this.s_and_w();
			this.state = 4322;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dateprop(): DatepropContext {
		let _localctx: DatepropContext = new DatepropContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, bitmarkParser.RULE_dateprop);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4324;
			this.match(bitmarkParser.AtDate);
			this.state = 4328;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 4328;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 583, this._ctx) ) {
				case 1:
					{
					this.state = 4325;
					this.s_and_w();
					}
					break;

				case 2:
					{
					this.state = 4326;
					this.match(bitmarkParser.COLON);
					}
					break;

				case 3:
					{
					this.state = 4327;
					this.match(bitmarkParser.NL);
					}
					break;
				}
				}
				this.state = 4330;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
			this.state = 4332;
			this.match(bitmarkParser.CL);
			this.state = 4334;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 585, this._ctx) ) {
			case 1:
				{
				this.state = 4333;
				this.dateprop_chained();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dateprop_chained(): Dateprop_chainedContext {
		let _localctx: Dateprop_chainedContext = new Dateprop_chainedContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, bitmarkParser.RULE_dateprop_chained);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4336;
			this.match(bitmarkParser.AtDate);
			this.state = 4340;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 4340;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 586, this._ctx) ) {
				case 1:
					{
					this.state = 4337;
					this.s_and_w();
					}
					break;

				case 2:
					{
					this.state = 4338;
					this.match(bitmarkParser.COLON);
					}
					break;

				case 3:
					{
					this.state = 4339;
					this.match(bitmarkParser.NL);
					}
					break;
				}
				}
				this.state = 4342;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
			this.state = 4344;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public instruction(): InstructionContext {
		let _localctx: InstructionContext = new InstructionContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, bitmarkParser.RULE_instruction);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4392;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 596, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4346;
				this.match(bitmarkParser.OPB);
				this.state = 4350;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 4347;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 4352;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4354;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 589, this._ctx) ) {
				case 1:
					{
					this.state = 4353;
					this.s_and_w();
					}
					break;
				}
				this.state = 4377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
					{
					{
					this.state = 4356;
					this.s_and_w();
					this.state = 4366;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4357;
							this.match(bitmarkParser.NL);
							this.state = 4361;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 590, this._ctx);
							while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
								if (_alt === 1) {
									{
									{
									this.state = 4358;
									this.match(bitmarkParser.S);
									}
									}
								}
								this.state = 4363;
								this._errHandler.sync(this);
								_alt = this.interpreter.adaptivePredict(this._input, 590, this._ctx);
							}
							}
							}
						}
						this.state = 4368;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
					}
					this.state = 4372;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 4369;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 4374;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4379;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4380;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4381;
				this.match(bitmarkParser.OPB);
				this.state = 4385;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.NL) {
					{
					{
					this.state = 4382;
					this.match(bitmarkParser.NL);
					}
					}
					this.state = 4387;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4389;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
					{
					this.state = 4388;
					this.s_and_w();
					}
				}

				this.state = 4391;
				this.match(bitmarkParser.EOF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hint(): HintContext {
		let _localctx: HintContext = new HintContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, bitmarkParser.RULE_hint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4394;
			this.match(bitmarkParser.OPQ);
			this.state = 4396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4395;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === bitmarkParser.CL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 4398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.OPDOT) | (1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitPlaceholder) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.CLOZE) | (1 << bitmarkParser.MATCH) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitDocup) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitBotint) | (1 << bitmarkParser.BitSelfassess))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitRating - 32)) | (1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)) | (1 << (bitmarkParser.BitLearningPathBotTraining - 32)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 32)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitLearningPathClassroomEvent - 64)) | (1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitImagePrototype - 64)) | (1 << (bitmarkParser.BitImageSuperWide - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitVideoPortrait - 64)) | (1 << (bitmarkParser.BitVideoLandscape - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)) | (1 << (bitmarkParser.BitEditorial - 64)) | (1 << (bitmarkParser.BitBookFrontispiece - 64)) | (1 << (bitmarkParser.BitBookTitle - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitBookCopyright - 96)) | (1 << (bitmarkParser.BitBookDedication - 96)) | (1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)) | (1 << (bitmarkParser.BitQuestion1 - 96)) | (1 << (bitmarkParser.BitScreenshot - 96)) | (1 << (bitmarkParser.BitFocusImage - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.BitPhoto - 128)) | (1 << (bitmarkParser.BitBrowserImage - 128)) | (1 << (bitmarkParser.BitBotActionResponse - 128)) | (1 << (bitmarkParser.BitBotActionTrueFalse - 128)) | (1 << (bitmarkParser.BitBotActionRatingNumber - 128)) | (1 << (bitmarkParser.BitBotActionRatingStars - 128)) | (1 << (bitmarkParser.BitChapterSubjectMatter - 128)) | (1 << (bitmarkParser.BitReleaseNote - 128)) | (1 << (bitmarkParser.BitConclusion - 128)) | (1 << (bitmarkParser.BitVendorAmcharts5Chart - 128)) | (1 << (bitmarkParser.BitFeatured - 128)) | (1 << (bitmarkParser.OPDOLL - 128)) | (1 << (bitmarkParser.OPBUL - 128)) | (1 << (bitmarkParser.OPRANGLES - 128)) | (1 << (bitmarkParser.OPRANGLEL - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPU - 128)) | (1 << (bitmarkParser.OPB - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPA - 128)) | (1 << (bitmarkParser.OPP - 128)) | (1 << (bitmarkParser.OPM - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.OPR - 128)) | (1 << (bitmarkParser.OPHASH - 128)) | (1 << (bitmarkParser.OPC - 128)) | (1 << (bitmarkParser.COLON - 128)) | (1 << (bitmarkParser.AMP - 128)) | (1 << (bitmarkParser.DBLCOLON - 128)) | (1 << (bitmarkParser.PLUS - 128)) | (1 << (bitmarkParser.DotAt - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.Greater - 160)) | (1 << (bitmarkParser.Less - 160)) | (1 << (bitmarkParser.RightAngle - 160)) | (1 << (bitmarkParser.RightArrow - 160)) | (1 << (bitmarkParser.DBLEQ - 160)) | (1 << (bitmarkParser.HSPL - 160)) | (1 << (bitmarkParser.HSPL2 - 160)) | (1 << (bitmarkParser.SSPL - 160)) | (1 << (bitmarkParser.SSPL2 - 160)) | (1 << (bitmarkParser.QUOTE_INDEX - 160)) | (1 << (bitmarkParser.COMMENT - 160)) | (1 << (bitmarkParser.DCANY - 160)) | (1 << (bitmarkParser.Image_type - 160)) | (1 << (bitmarkParser.Audio_type - 160)) | (1 << (bitmarkParser.Video_type - 160)) | (1 << (bitmarkParser.ArticleText - 160)) | (1 << (bitmarkParser.NOTCL - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.NL - 160)) | (1 << (bitmarkParser.NOTBITMARK - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.BARSTRING - 160)) | (1 << (bitmarkParser.OPAT - 160)) | (1 << (bitmarkParser.AtProgress - 160)) | (1 << (bitmarkParser.AtReference - 160)) | (1 << (bitmarkParser.AtWidth - 160)) | (1 << (bitmarkParser.AtHeight - 160)) | (1 << (bitmarkParser.AtProgressPoints - 160)) | (1 << (bitmarkParser.AtShortanswer - 160)) | (1 << (bitmarkParser.AtLonganswer - 160)) | (1 << (bitmarkParser.AtExampleWithStr - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.AtExamplecol - 192)) | (1 << (bitmarkParser.AtExamplecl - 192)) | (1 << (bitmarkParser.AtPartialAnswerS - 192)) | (1 << (bitmarkParser.AtPartialAnswer - 192)) | (1 << (bitmarkParser.AtLabeltrue - 192)) | (1 << (bitmarkParser.AtLabelfalse - 192)) | (1 << (bitmarkParser.AtPoints - 192)) | (1 << (bitmarkParser.AtSrc - 192)) | (1 << (bitmarkParser.AtPartner - 192)) | (1 << (bitmarkParser.OPATALT - 192)) | (1 << (bitmarkParser.OPAMARK - 192)) | (1 << (bitmarkParser.ShowInIndex - 192)) | (1 << (bitmarkParser.OpAtCaption - 192)) | (1 << (bitmarkParser.OpAtLicense - 192)) | (1 << (bitmarkParser.OpAtCopyright - 192)) | (1 << (bitmarkParser.OpAtSearch - 192)) | (1 << (bitmarkParser.OpAtIsTracked - 192)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 192)) | (1 << (bitmarkParser.AtDate - 192)) | (1 << (bitmarkParser.Http - 192)) | (1 << (bitmarkParser.Https - 192)) | (1 << (bitmarkParser.AmpAudio - 192)) | (1 << (bitmarkParser.AmpImage - 192)) | (1 << (bitmarkParser.AmpImageZoom - 192)) | (1 << (bitmarkParser.AmpImageWAudio - 192)) | (1 << (bitmarkParser.AmpVideo - 192)) | (1 << (bitmarkParser.AmpArticle - 192)) | (1 << (bitmarkParser.AmpDocument - 192)) | (1 << (bitmarkParser.AmpApp - 192)) | (1 << (bitmarkParser.AmpWebsite - 192)) | (1 << (bitmarkParser.AmpStillImageFilm - 192)) | (1 << (bitmarkParser.AmpPdf - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.OpAmpAudio - 224)) | (1 << (bitmarkParser.OpAmpImage - 224)) | (1 << (bitmarkParser.OpAmpImageZoom - 224)) | (1 << (bitmarkParser.OpAmpImageWAudio - 224)) | (1 << (bitmarkParser.OpAmpVideo - 224)) | (1 << (bitmarkParser.OpAmpArticle - 224)) | (1 << (bitmarkParser.OpAmpArticleAtt - 224)) | (1 << (bitmarkParser.OpAmpDocument - 224)) | (1 << (bitmarkParser.OpAmpApp - 224)) | (1 << (bitmarkParser.OpAmpWebsite - 224)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 224)) | (1 << (bitmarkParser.BracEnclose - 224)) | (1 << (bitmarkParser.AmpAudioLink - 224)) | (1 << (bitmarkParser.AmpImageLink - 224)) | (1 << (bitmarkParser.AmpVideoLink - 224)) | (1 << (bitmarkParser.AmpArticleLink - 224)) | (1 << (bitmarkParser.AmpDocumentLink - 224)) | (1 << (bitmarkParser.AmpAppLink - 224)) | (1 << (bitmarkParser.AmpWebsiteLink - 224)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.OpAmpAudioLink - 224)) | (1 << (bitmarkParser.OpAmpImageLink - 224)) | (1 << (bitmarkParser.OpAmpVideoLink - 224)) | (1 << (bitmarkParser.OpAmpArticleLink - 224)) | (1 << (bitmarkParser.OpAmpDocumentLink - 224)) | (1 << (bitmarkParser.OpAmpAppLink - 224)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 224)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.AmpImageEmbed - 224)) | (1 << (bitmarkParser.AmpVideoEmbed - 224)) | (1 << (bitmarkParser.AmpAudioEmbed - 224)) | (1 << (bitmarkParser.AmpDocumentEmbed - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (bitmarkParser.AmpStillImageFilmEmbed - 256)) | (1 << (bitmarkParser.OpAmpImageEmbed - 256)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 256)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 256)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 256)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 256)) | (1 << (bitmarkParser.BitmarkMinus - 256)) | (1 << (bitmarkParser.BitmarkPlus - 256)) | (1 << (bitmarkParser.ColonText - 256)) | (1 << (bitmarkParser.ColonJson - 256)) | (1 << (bitmarkParser.Prosemirror - 256)) | (1 << (bitmarkParser.Placeholder - 256)) | (1 << (bitmarkParser.BASIC - 256)) | (1 << (bitmarkParser.JPG - 256)) | (1 << (bitmarkParser.PNG - 256)) | (1 << (bitmarkParser.GIF - 256)) | (1 << (bitmarkParser.SVG - 256)) | (1 << (bitmarkParser.MP2 - 256)) | (1 << (bitmarkParser.MP3 - 256)) | (1 << (bitmarkParser.MP4 - 256)) | (1 << (bitmarkParser.FLV - 256)) | (1 << (bitmarkParser.WMV - 256)) | (1 << (bitmarkParser.MPEG - 256)) | (1 << (bitmarkParser.MPG - 256)) | (1 << (bitmarkParser.TEL - 256)) | (1 << (bitmarkParser.DotArticleAtt - 256)) | (1 << (bitmarkParser.STAR - 256)) | (1 << (bitmarkParser.URL - 256)) | (1 << (bitmarkParser.LIST_LINE - 256)) | (1 << (bitmarkParser.ENCLBARS - 256)))) !== 0));
			this.state = 4400;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public title(): TitleContext {
		let _localctx: TitleContext = new TitleContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, bitmarkParser.RULE_title);
		let _la: number;
		try {
			this.state = 4414;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 600, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4402;
				this.match(bitmarkParser.OPHASH);
				this.state = 4405;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 4405;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.S:
					case bitmarkParser.OPS:
					case bitmarkParser.COLON:
					case bitmarkParser.AMP:
					case bitmarkParser.Greater:
					case bitmarkParser.Less:
					case bitmarkParser.RightAngle:
					case bitmarkParser.RightArrow:
					case bitmarkParser.DBLEQ:
					case bitmarkParser.QUOTE_INDEX:
					case bitmarkParser.NUMERIC:
					case bitmarkParser.STRING:
					case bitmarkParser.NOTBITMARK:
					case bitmarkParser.SENTENCE:
					case bitmarkParser.BARSTRING:
					case bitmarkParser.AmpAudio:
					case bitmarkParser.AmpImage:
					case bitmarkParser.AmpVideo:
					case bitmarkParser.AmpArticle:
					case bitmarkParser.AmpDocument:
					case bitmarkParser.AmpApp:
					case bitmarkParser.AmpWebsite:
					case bitmarkParser.AmpStillImageFilm:
					case bitmarkParser.AmpAudioLink:
					case bitmarkParser.AmpImageLink:
					case bitmarkParser.AmpVideoLink:
					case bitmarkParser.AmpArticleLink:
					case bitmarkParser.AmpDocumentLink:
					case bitmarkParser.AmpAppLink:
					case bitmarkParser.AmpWebsiteLink:
					case bitmarkParser.AmpStillImageFilmLink:
					case bitmarkParser.BitmarkMinus:
					case bitmarkParser.BitmarkPlus:
					case bitmarkParser.URL:
						{
						this.state = 4403;
						this.s_and_w();
						}
						break;
					case bitmarkParser.NL:
						{
						this.state = 4404;
						this.match(bitmarkParser.NL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 4407;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
				this.state = 4409;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4410;
				this.match(bitmarkParser.OPHASH);
				this.state = 4411;
				this.s_and_w();
				this.state = 4412;
				this.match(bitmarkParser.EOF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bool_label(): Bool_labelContext {
		let _localctx: Bool_labelContext = new Bool_labelContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, bitmarkParser.RULE_bool_label);
		try {
			this.state = 4424;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.AtLabeltrue:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4416;
				this.match(bitmarkParser.AtLabeltrue);
				this.state = 4417;
				this.s_and_w();
				this.state = 4418;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.AtLabelfalse:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4420;
				this.match(bitmarkParser.AtLabelfalse);
				this.state = 4421;
				this.s_and_w();
				this.state = 4422;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public progress_points(): Progress_pointsContext {
		let _localctx: Progress_pointsContext = new Progress_pointsContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, bitmarkParser.RULE_progress_points);
		try {
			this.state = 4435;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 602, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4426;
				this.match(bitmarkParser.AtProgressPoints);
				this.state = 4427;
				this.match(bitmarkParser.COLON);
				this.state = 4428;
				this.match(bitmarkParser.NUMERIC);
				this.state = 4429;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4430;
				this.match(bitmarkParser.AtProgressPoints);
				this.state = 4431;
				this.match(bitmarkParser.COLON);
				this.state = 4432;
				this.s_and_w();
				this.state = 4433;
				this.match(bitmarkParser.CL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public istracked(): IstrackedContext {
		let _localctx: IstrackedContext = new IstrackedContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, bitmarkParser.RULE_istracked);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4437;
			this.match(bitmarkParser.OpAtIsTracked);
			this.state = 4438;
			this.s_and_w();
			this.state = 4439;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public isinfoonly(): IsinfoonlyContext {
		let _localctx: IsinfoonlyContext = new IsinfoonlyContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, bitmarkParser.RULE_isinfoonly);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4441;
			this.match(bitmarkParser.OpAtIsInfoOnly);
			this.state = 4442;
			this.s_and_w();
			this.state = 4443;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public atdef(): AtdefContext {
		let _localctx: AtdefContext = new AtdefContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, bitmarkParser.RULE_atdef);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4445;
			this.atdef_();
			this.state = 4455;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 604, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4449;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === bitmarkParser.NL) {
						{
						{
						this.state = 4446;
						this.match(bitmarkParser.NL);
						}
						}
						this.state = 4451;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4452;
					this.atdef_();
					}
					}
				}
				this.state = 4457;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 604, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public atdef_(): Atdef_Context {
		let _localctx: Atdef_Context = new Atdef_Context(this._ctx, this.state);
		this.enterRule(_localctx, 422, bitmarkParser.RULE_atdef_);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4480;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case bitmarkParser.OPA:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4458;
				this.match(bitmarkParser.OPA);
				this.state = 4459;
				this.s_and_w();
				this.state = 4460;
				_la = this._input.LA(1);
				if (!(_la === bitmarkParser.COLON || _la === bitmarkParser.DBLCOLON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4461;
				this.s_and_w();
				this.state = 4467;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
					{
					this.state = 4465;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 605, this._ctx) ) {
					case 1:
						{
						this.state = 4462;
						this.match(bitmarkParser.NL);
						}
						break;

					case 2:
						{
						this.state = 4463;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 3:
						{
						this.state = 4464;
						this.s_and_w();
						}
						break;
					}
					}
					this.state = 4469;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4470;
				this.match(bitmarkParser.CL);
				}
				break;
			case bitmarkParser.OpAtCopyright:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4472;
				this.match(bitmarkParser.OpAtCopyright);
				this.state = 4476;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
				while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1 + 1) {
						{
						{
						this.state = 4473;
						this.matchWildcard();
						}
						}
					}
					this.state = 4478;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
				}
				this.state = 4479;
				this.match(bitmarkParser.CL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dollarans(): DollaransContext {
		let _localctx: DollaransContext = new DollaransContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, bitmarkParser.RULE_dollarans);
		let _la: number;
		try {
			this.state = 4501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 613, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4482;
				this.match(bitmarkParser.OPDOLL);
				this.state = 4486;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 4486;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 609, this._ctx) ) {
					case 1:
						{
						this.state = 4483;
						this.s_and_w();
						}
						break;

					case 2:
						{
						this.state = 4484;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 3:
						{
						this.state = 4485;
						this.match(bitmarkParser.NL);
						}
						break;
					}
					}
					this.state = 4488;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0));
				this.state = 4490;
				this.match(bitmarkParser.CL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4491;
				this.match(bitmarkParser.OPDOLL);
				this.state = 4497;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NL - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
					{
					this.state = 4495;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 611, this._ctx) ) {
					case 1:
						{
						this.state = 4492;
						this.s_and_w();
						}
						break;

					case 2:
						{
						this.state = 4493;
						this.match(bitmarkParser.COLON);
						}
						break;

					case 3:
						{
						this.state = 4494;
						this.match(bitmarkParser.NL);
						}
						break;
					}
					}
					this.state = 4499;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4500;
				this.match(bitmarkParser.EOF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public anchor(): AnchorContext {
		let _localctx: AnchorContext = new AnchorContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, bitmarkParser.RULE_anchor);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4503;
			this.match(bitmarkParser.OPDANGLE);
			this.state = 4505;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === bitmarkParser.S || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (bitmarkParser.OPS - 150)) | (1 << (bitmarkParser.COLON - 150)) | (1 << (bitmarkParser.AMP - 150)) | (1 << (bitmarkParser.Greater - 150)) | (1 << (bitmarkParser.Less - 150)) | (1 << (bitmarkParser.RightAngle - 150)) | (1 << (bitmarkParser.RightArrow - 150)) | (1 << (bitmarkParser.DBLEQ - 150)) | (1 << (bitmarkParser.QUOTE_INDEX - 150)) | (1 << (bitmarkParser.NUMERIC - 150)) | (1 << (bitmarkParser.STRING - 150)) | (1 << (bitmarkParser.NOTBITMARK - 150)) | (1 << (bitmarkParser.SENTENCE - 150)))) !== 0) || _la === bitmarkParser.BARSTRING || _la === bitmarkParser.AmpAudio || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (bitmarkParser.AmpImage - 214)) | (1 << (bitmarkParser.AmpVideo - 214)) | (1 << (bitmarkParser.AmpArticle - 214)) | (1 << (bitmarkParser.AmpDocument - 214)) | (1 << (bitmarkParser.AmpApp - 214)) | (1 << (bitmarkParser.AmpWebsite - 214)) | (1 << (bitmarkParser.AmpStillImageFilm - 214)) | (1 << (bitmarkParser.AmpAudioLink - 214)) | (1 << (bitmarkParser.AmpImageLink - 214)) | (1 << (bitmarkParser.AmpVideoLink - 214)) | (1 << (bitmarkParser.AmpArticleLink - 214)) | (1 << (bitmarkParser.AmpDocumentLink - 214)) | (1 << (bitmarkParser.AmpAppLink - 214)) | (1 << (bitmarkParser.AmpWebsiteLink - 214)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 214)))) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (bitmarkParser.BitmarkMinus - 262)) | (1 << (bitmarkParser.BitmarkPlus - 262)) | (1 << (bitmarkParser.URL - 262)))) !== 0)) {
				{
				this.state = 4504;
				this.s_and_w();
				}
			}

			this.state = 4507;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lines(): LinesContext {
		let _localctx: LinesContext = new LinesContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, bitmarkParser.RULE_lines);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4513;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4509;
					this.s_and_w();
					this.state = 4511;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 615, this._ctx) ) {
					case 1:
						{
						this.state = 4510;
						this.match(bitmarkParser.NL);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4515;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 616, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public s_and_w(): S_and_wContext {
		let _localctx: S_and_wContext = new S_and_wContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, bitmarkParser.RULE_s_and_w);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4562;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 624, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4517;
				this.match(bitmarkParser.STRING);
				this.state = 4524;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 618, this._ctx) ) {
				case 1:
					{
					this.state = 4519;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4518;
						this.match(bitmarkParser.S);
						}
						}
						this.state = 4521;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.S);
					this.state = 4523;
					this.match(bitmarkParser.NUMERIC);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4526;
				this.words();
				this.state = 4533;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 620, this._ctx) ) {
				case 1:
					{
					this.state = 4528;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4527;
						this.match(bitmarkParser.S);
						}
						}
						this.state = 4530;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === bitmarkParser.S);
					this.state = 4532;
					this.match(bitmarkParser.NUMERIC);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4535;
				this.match(bitmarkParser.NUMERIC);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4536;
				this.match(bitmarkParser.OPS);
				this.state = 4537;
				this.s_and_w();
				this.state = 4538;
				this.match(bitmarkParser.CL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4543;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === bitmarkParser.S) {
					{
					{
					this.state = 4540;
					this.match(bitmarkParser.S);
					}
					}
					this.state = 4545;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4546;
				this.match(bitmarkParser.COLON);
				this.state = 4550;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4547;
						this.match(bitmarkParser.S);
						}
						}
					}
					this.state = 4552;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4553;
				this.match(bitmarkParser.AMP);
				this.state = 4557;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 623, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4554;
						this.match(bitmarkParser.S);
						}
						}
					}
					this.state = 4559;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 623, this._ctx);
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4560;
				this.match(bitmarkParser.DBLEQ);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4561;
				this.match(bitmarkParser.URL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dclines(): DclinesContext {
		let _localctx: DclinesContext = new DclinesContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, bitmarkParser.RULE_dclines);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4564;
			this.match(bitmarkParser.DCANY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clnsp(): ClnspContext {
		let _localctx: ClnspContext = new ClnspContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, bitmarkParser.RULE_clnsp);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4566;
			this.match(bitmarkParser.CL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sspl(): SsplContext {
		let _localctx: SsplContext = new SsplContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, bitmarkParser.RULE_sspl);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4568;
			_la = this._input.LA(1);
			if (!(_la === bitmarkParser.SSPL || _la === bitmarkParser.SSPL2)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public words(): WordsContext {
		let _localctx: WordsContext = new WordsContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, bitmarkParser.RULE_words);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4599;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					this.state = 4599;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case bitmarkParser.SENTENCE:
						{
						this.state = 4570;
						this.sentence();
						}
						break;
					case bitmarkParser.NOTBITMARK:
						{
						this.state = 4571;
						this.match(bitmarkParser.NOTBITMARK);
						}
						break;
					case bitmarkParser.BARSTRING:
						{
						this.state = 4572;
						this.match(bitmarkParser.BARSTRING);
						}
						break;
					case bitmarkParser.AMP:
						{
						this.state = 4573;
						this.match(bitmarkParser.AMP);
						}
						break;
					case bitmarkParser.Greater:
						{
						this.state = 4574;
						this.match(bitmarkParser.Greater);
						this.state = 4575;
						_la = this._input.LA(1);
						if (_la <= 0 || (_la === bitmarkParser.Greater)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case bitmarkParser.Less:
						{
						this.state = 4576;
						this.match(bitmarkParser.Less);
						this.state = 4577;
						_la = this._input.LA(1);
						if (_la <= 0 || (_la === bitmarkParser.Less)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case bitmarkParser.RightArrow:
						{
						this.state = 4578;
						this.match(bitmarkParser.RightArrow);
						}
						break;
					case bitmarkParser.RightAngle:
						{
						this.state = 4579;
						this.match(bitmarkParser.RightAngle);
						}
						break;
					case bitmarkParser.AmpArticle:
						{
						this.state = 4580;
						this.match(bitmarkParser.AmpArticle);
						}
						break;
					case bitmarkParser.AmpArticleLink:
						{
						this.state = 4581;
						this.match(bitmarkParser.AmpArticleLink);
						}
						break;
					case bitmarkParser.AmpDocument:
						{
						this.state = 4582;
						this.match(bitmarkParser.AmpDocument);
						}
						break;
					case bitmarkParser.AmpDocumentLink:
						{
						this.state = 4583;
						this.match(bitmarkParser.AmpDocumentLink);
						}
						break;
					case bitmarkParser.AmpWebsite:
						{
						this.state = 4584;
						this.match(bitmarkParser.AmpWebsite);
						}
						break;
					case bitmarkParser.AmpWebsiteLink:
						{
						this.state = 4585;
						this.match(bitmarkParser.AmpWebsiteLink);
						}
						break;
					case bitmarkParser.AmpImage:
						{
						this.state = 4586;
						this.match(bitmarkParser.AmpImage);
						}
						break;
					case bitmarkParser.AmpImageLink:
						{
						this.state = 4587;
						this.match(bitmarkParser.AmpImageLink);
						}
						break;
					case bitmarkParser.AmpAudio:
						{
						this.state = 4588;
						this.match(bitmarkParser.AmpAudio);
						}
						break;
					case bitmarkParser.AmpAudioLink:
						{
						this.state = 4589;
						this.match(bitmarkParser.AmpAudioLink);
						}
						break;
					case bitmarkParser.AmpVideo:
						{
						this.state = 4590;
						this.match(bitmarkParser.AmpVideo);
						}
						break;
					case bitmarkParser.AmpVideoLink:
						{
						this.state = 4591;
						this.match(bitmarkParser.AmpVideoLink);
						}
						break;
					case bitmarkParser.AmpApp:
						{
						this.state = 4592;
						this.match(bitmarkParser.AmpApp);
						}
						break;
					case bitmarkParser.AmpAppLink:
						{
						this.state = 4593;
						this.match(bitmarkParser.AmpAppLink);
						}
						break;
					case bitmarkParser.AmpStillImageFilm:
						{
						this.state = 4594;
						this.match(bitmarkParser.AmpStillImageFilm);
						}
						break;
					case bitmarkParser.AmpStillImageFilmLink:
						{
						this.state = 4595;
						this.match(bitmarkParser.AmpStillImageFilmLink);
						}
						break;
					case bitmarkParser.BitmarkMinus:
						{
						this.state = 4596;
						this.match(bitmarkParser.BitmarkMinus);
						}
						break;
					case bitmarkParser.BitmarkPlus:
						{
						this.state = 4597;
						this.match(bitmarkParser.BitmarkPlus);
						}
						break;
					case bitmarkParser.QUOTE_INDEX:
						{
						this.state = 4598;
						this.match(bitmarkParser.QUOTE_INDEX);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4601;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 626, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sp(): SpContext {
		let _localctx: SpContext = new SpContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, bitmarkParser.RULE_sp);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4603;
			this.match(bitmarkParser.S);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sentence(): SentenceContext {
		let _localctx: SentenceContext = new SentenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, bitmarkParser.RULE_sentence);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4605;
			this.match(bitmarkParser.SENTENCE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	private static readonly _serializedATNSegments: number = 9;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u011F\u1202\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x03\x02\x03\x02" +
		"\x07\x02\u01C1\n\x02\f\x02\x0E\x02\u01C4\v\x02\x03\x02\x07\x02\u01C7\n" +
		"\x02\f\x02\x0E\x02\u01CA\v\x02\x06\x02\u01CC\n\x02\r\x02\x0E\x02\u01CD" +
		"\x03\x02\x07\x02\u01D1\n\x02\f\x02\x0E\x02\u01D4\v\x02\x03\x02\x03\x02" +
		"\x03\x03\x03\x03\x05\x03\u01DA\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x05\x04\u0262\n\x04\x03\x05\x03\x05\x05\x05" +
		"\u0266\n\x05\x03\x05\x03\x05\x07\x05\u026A\n\x05\f\x05\x0E\x05\u026D\v" +
		"\x05\x03\x05\x06\x05\u0270\n\x05\r\x05\x0E\x05\u0271\x03\x06\x03\x06\x05" +
		"\x06\u0276\n\x06\x03\x06\x03\x06\x07\x06\u027A\n\x06\f\x06\x0E\x06\u027D" +
		"\v\x06\x03\x06\x03\x06\x03\x06\x05\x06\u0282\n\x06\x03\x06\x03\x06\x07" +
		"\x06\u0286\n\x06\f\x06\x0E\x06\u0289\v\x06\x03\x06\x07\x06\u028C\n\x06" +
		"\f\x06\x0E\x06\u028F\v\x06\x03\x07\x03\x07\x05\x07\u0293\n\x07\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u029A\n\x07\x03\b\x03\b\x03\b" +
		"\x07\b\u029F\n\b\f\b\x0E\b\u02A2\v\b\x03\b\x03\b\x03\t\x03\t\x05\t\u02A8" +
		"\n\t\x03\t\x03\t\x07\t\u02AC\n\t\f\t\x0E\t\u02AF\v\t\x03\t\x07\t\u02B2" +
		"\n\t\f\t\x0E\t\u02B5\v\t\x03\n\x03\n\x03\n\x03\n\x03\v\x05\v\u02BC\n\v" +
		"\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v\u02C5\n\v\x07\v\u02C7" +
		"\n\v\f\v\x0E\v\u02CA\v\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x06\f\u02D2" +
		"\n\f\r\f\x0E\f\u02D3\x03\f\x06\f\u02D7\n\f\r\f\x0E\f\u02D8\x03\f\x03\f" +
		"\x07\f\u02DD\n\f\f\f\x0E\f\u02E0\v\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x06\r\u02E8\n\r\r\r\x0E\r\u02E9\x03\r\x06\r\u02ED\n\r\r\r\x0E\r\u02EE" +
		"\x03\r\x03\r\x07\r\u02F3\n\r\f\r\x0E\r\u02F6\v\r\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x07\x0E\u02FC\n\x0E\f\x0E\x0E\x0E\u02FF\v\x0E\x03\x0E\x03\x0E" +
		"\x07\x0E\u0303\n\x0E\f\x0E\x0E\x0E\u0306\v\x0E\x06\x0E\u0308\n\x0E\r\x0E" +
		"\x0E\x0E\u0309\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F\u0310\n\x0F\f\x0F" +
		"\x0E\x0F\u0313\v\x0F\x03\x0F\x03\x0F\x07\x0F\u0317\n\x0F\f\x0F\x0E\x0F" +
		"\u031A\v\x0F\x06\x0F\u031C\n\x0F\r\x0F\x0E\x0F\u031D\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x07\x10\u0324\n\x10\f\x10\x0E\x10\u0327\v\x10\x03\x10\x03" +
		"\x10\x07\x10\u032B\n\x10\f\x10\x0E\x10\u032E\v\x10\x06\x10\u0330\n\x10" +
		"\r\x10\x0E\x10\u0331\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11\u0338\n\x11" +
		"\f\x11\x0E\x11\u033B\v\x11\x03\x11\x03\x11\x07\x11\u033F\n\x11\f\x11\x0E" +
		"\x11\u0342\v\x11\x06\x11\u0344\n\x11\r\x11\x0E\x11\u0345\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x07\x12\u034C\n\x12\f\x12\x0E\x12\u034F\v\x12\x03\x12" +
		"\x03\x12\x07\x12\u0353\n\x12\f\x12\x0E\x12\u0356\v\x12\x06\x12\u0358\n" +
		"\x12\r\x12\x0E\x12\u0359\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13\u0360" +
		"\n\x13\f\x13\x0E\x13\u0363\v\x13\x03\x13\x03\x13\x07\x13\u0367\n\x13\f" +
		"\x13\x0E\x13\u036A\v\x13\x06\x13\u036C\n\x13\r\x13\x0E\x13\u036D\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x07\x14\u0374\n\x14\f\x14\x0E\x14\u0377\v\x14" +
		"\x03\x14\x03\x14\x07\x14\u037B\n\x14\f\x14\x0E\x14\u037E\v\x14\x06\x14" +
		"\u0380\n\x14\r\x14\x0E\x14\u0381\x03\x15\x03\x15\x03\x15\x03\x15\x07\x15" +
		"\u0388\n\x15\f\x15\x0E\x15\u038B\v\x15\x03\x15\x03\x15\x07\x15\u038F\n" +
		"\x15\f\x15\x0E\x15\u0392\v\x15\x06\x15\u0394\n\x15\r\x15\x0E\x15\u0395" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16\u039C\n\x16\f\x16\x0E\x16\u039F" +
		"\v\x16\x03\x16\x03\x16\x07\x16\u03A3\n\x16\f\x16\x0E\x16\u03A6\v\x16\x06" +
		"\x16\u03A8\n\x16\r\x16\x0E\x16\u03A9\x03\x17\x03\x17\x03\x17\x03\x17\x07" +
		"\x17\u03B0\n\x17\f\x17\x0E\x17\u03B3\v\x17\x03\x17\x03\x17\x07\x17\u03B7" +
		"\n\x17\f\x17\x0E\x17\u03BA\v\x17\x06\x17\u03BC\n\x17\r\x17\x0E\x17\u03BD" +
		"\x03\x18\x03\x18\x03\x18\x03\x18\x07\x18\u03C4\n\x18\f\x18\x0E\x18\u03C7" +
		"\v\x18\x03\x18\x03\x18\x07\x18\u03CB\n\x18\f\x18\x0E\x18\u03CE\v\x18\x06" +
		"\x18\u03D0\n\x18\r\x18\x0E\x18\u03D1\x03\x19\x03\x19\x03\x19\x03\x19\x07" +
		"\x19\u03D8\n\x19\f\x19\x0E\x19\u03DB\v\x19\x03\x19\x03\x19\x07\x19\u03DF" +
		"\n\x19\f\x19\x0E\x19\u03E2\v\x19\x06\x19\u03E4\n\x19\r\x19\x0E\x19\u03E5" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A\u03EC\n\x1A\f\x1A\x0E\x1A\u03EF" +
		"\v\x1A\x03\x1A\x03\x1A\x07\x1A\u03F3\n\x1A\f\x1A\x0E\x1A\u03F6\v\x1A\x06" +
		"\x1A\u03F8\n\x1A\r\x1A\x0E\x1A\u03F9\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x07" +
		"\x1B\u0400\n\x1B\f\x1B\x0E\x1B\u0403\v\x1B\x03\x1B\x03\x1B\x07\x1B\u0407" +
		"\n\x1B\f\x1B\x0E\x1B\u040A\v\x1B\x06\x1B\u040C\n\x1B\r\x1B\x0E\x1B\u040D" +
		"\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x07\x1C\u0414\n\x1C\f\x1C\x0E\x1C\u0417" +
		"\v\x1C\x03\x1C\x03\x1C\x07\x1C\u041B\n\x1C\f\x1C\x0E\x1C\u041E\v\x1C\x06" +
		"\x1C\u0420\n\x1C\r\x1C\x0E\x1C\u0421\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07" +
		"\x1D\u0428\n\x1D\f\x1D\x0E\x1D\u042B\v\x1D\x03\x1D\x03\x1D\x07\x1D\u042F" +
		"\n\x1D\f\x1D\x0E\x1D\u0432\v\x1D\x06\x1D\u0434\n\x1D\r\x1D\x0E\x1D\u0435" +
		"\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\u043C\n\x1E\f\x1E\x0E\x1E\u043F" +
		"\v\x1E\x03\x1E\x03\x1E\x07\x1E\u0443\n\x1E\f\x1E\x0E\x1E\u0446\v\x1E\x06" +
		"\x1E\u0448\n\x1E\r\x1E\x0E\x1E\u0449\x03\x1E\x06\x1E\u044D\n\x1E\r\x1E" +
		"\x0E\x1E\u044E\x03\x1E\x03\x1E\x05\x1E\u0453\n\x1E\x03\x1E\x07\x1E\u0456" +
		"\n\x1E\f\x1E\x0E\x1E\u0459\v\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F" +
		"\u045F\n\x1F\f\x1F\x0E\x1F\u0462\v\x1F\x03\x1F\x03\x1F\x07\x1F\u0466\n" +
		"\x1F\f\x1F\x0E\x1F\u0469\v\x1F\x06\x1F\u046B\n\x1F\r\x1F\x0E\x1F\u046C" +
		"\x03\x1F\x06\x1F\u0470\n\x1F\r\x1F\x0E\x1F\u0471\x03\x1F\x03\x1F\x05\x1F" +
		"\u0476\n\x1F\x03\x1F\x07\x1F\u0479\n\x1F\f\x1F\x0E\x1F\u047C\v\x1F\x03" +
		" \x03 \x03 \x03 \x07 \u0482\n \f \x0E \u0485\v \x03 \x03 \x07 \u0489\n" +
		" \f \x0E \u048C\v \x06 \u048E\n \r \x0E \u048F\x03 \x06 \u0493\n \r \x0E" +
		" \u0494\x03 \x03 \x05 \u0499\n \x03 \x07 \u049C\n \f \x0E \u049F\v \x03" +
		"!\x03!\x03!\x03!\x07!\u04A5\n!\f!\x0E!\u04A8\v!\x03!\x03!\x07!\u04AC\n" +
		"!\f!\x0E!\u04AF\v!\x06!\u04B1\n!\r!\x0E!\u04B2\x03\"\x03\"\x03\"\x03#" +
		"\x07#\u04B9\n#\f#\x0E#\u04BC\v#\x03#\x03#\x07#\u04C0\n#\f#\x0E#\u04C3" +
		"\v#\x06#\u04C5\n#\r#\x0E#\u04C6\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x05" +
		"$\u04D0\n$\x03%\x03%\x05%\u04D4\n%\x03&\x07&\u04D7\n&\f&\x0E&\u04DA\v" +
		"&\x03&\x06&\u04DD\n&\r&\x0E&\u04DE\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'" +
		"\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x03\'\x05\'\u0501\n\'\x03(\x03(\x03(\x03(\x03(\x03(\x07(\u0509" +
		"\n(\f(\x0E(\u050C\v(\x03)\x03)\x03)\x03)\x05)\u0512\n)\x03)\x07)\u0515" +
		"\n)\f)\x0E)\u0518\v)\x03)\x03)\x03*\x05*\u051D\n*\x03*\x03*\x06*\u0521" +
		"\n*\r*\x0E*\u0522\x03*\x03*\x03+\x05+\u0528\n+\x03+\x03+\x06+\u052C\n" +
		"+\r+\x0E+\u052D\x03+\x03+\x03,\x05,\u0533\n,\x03,\x03,\x06,\u0537\n,\r" +
		",\x0E,\u0538\x03,\x03,\x03-\x03-\x03-\x03-\x03-\x03-\x07-\u0543\n-\f-" +
		"\x0E-\u0546\v-\x07-\u0548\n-\f-\x0E-\u054B\v-\x03-\x07-\u054E\n-\f-\x0E" +
		"-\u0551\v-\x03-\x07-\u0554\n-\f-\x0E-\u0557\v-\x03-\x07-\u055A\n-\f-\x0E" +
		"-\u055D\v-\x03-\x03-\x07-\u0561\n-\f-\x0E-\u0564\v-\x03-\x07-\u0567\n" +
		"-\f-\x0E-\u056A\v-\x05-\u056C\n-\x03.\x03.\x05.\u0570\n.\x03.\x03.\x05" +
		".\u0574\n.\x05.\u0576\n.\x03.\x03.\x03/\x03/\x030\x030\x031\x031\x031" +
		"\x031\x031\x031\x071\u0584\n1\f1\x0E1\u0587\v1\x071\u0589\n1\f1\x0E1\u058C" +
		"\v1\x031\x071\u058F\n1\f1\x0E1\u0592\v1\x031\x071\u0595\n1\f1\x0E1\u0598" +
		"\v1\x031\x031\x071\u059C\n1\f1\x0E1\u059F\v1\x031\x071\u05A2\n1\f1\x0E" +
		"1\u05A5\v1\x051\u05A7\n1\x032\x032\x072\u05AB\n2\f2\x0E2\u05AE\v2\x03" +
		"2\x032\x032\x032\x072\u05B4\n2\f2\x0E2\u05B7\v2\x032\x032\x052\u05BB\n" +
		"2\x033\x033\x033\x033\x033\x033\x053\u05C3\n3\x033\x073\u05C6\n3\f3\x0E" +
		"3\u05C9\v3\x073\u05CB\n3\f3\x0E3\u05CE\v3\x033\x073\u05D1\n3\f3\x0E3\u05D4" +
		"\v3\x033\x033\x073\u05D8\n3\f3\x0E3\u05DB\v3\x033\x073\u05DE\n3\f3\x0E" +
		"3\u05E1\v3\x053\u05E3\n3\x034\x034\x034\x034\x054\u05E9\n4\x034\x034\x03" +
		"4\x074\u05EE\n4\f4\x0E4\u05F1\v4\x035\x035\x075\u05F5\n5\f5\x0E5\u05F8" +
		"\v5\x035\x035\x075\u05FC\n5\f5\x0E5\u05FF\v5\x035\x035\x036\x036\x056" +
		"\u0605\n6\x036\x036\x036\x036\x076\u060B\n6\f6\x0E6\u060E\v6\x076\u0610" +
		"\n6\f6\x0E6\u0613\v6\x036\x076\u0616\n6\f6\x0E6\u0619\v6\x036\x036\x07" +
		"6\u061D\n6\f6\x0E6\u0620\v6\x036\x076\u0623\n6\f6\x0E6\u0626\v6\x056\u0628" +
		"\n6\x037\x037\x037\x037\x037\x037\x077\u0630\n7\f7\x0E7\u0633\v7\x077" +
		"\u0635\n7\f7\x0E7\u0638\v7\x037\x077\u063B\n7\f7\x0E7\u063E\v7\x037\x03" +
		"7\x077\u0642\n7\f7\x0E7\u0645\v7\x037\x077\u0648\n7\f7\x0E7\u064B\v7\x05" +
		"7\u064D\n7\x038\x038\x038\x038\x038\x038\x078\u0655\n8\f8\x0E8\u0658\v" +
		"8\x078\u065A\n8\f8\x0E8\u065D\v8\x038\x078\u0660\n8\f8\x0E8\u0663\v8\x03" +
		"8\x038\x078\u0667\n8\f8\x0E8\u066A\v8\x038\x078\u066D\n8\f8\x0E8\u0670" +
		"\v8\x058\u0672\n8\x039\x039\x039\x039\x039\x039\x079\u067A\n9\f9\x0E9" +
		"\u067D\v9\x079\u067F\n9\f9\x0E9\u0682\v9\x039\x079\u0685\n9\f9\x0E9\u0688" +
		"\v9\x039\x039\x079\u068C\n9\f9\x0E9\u068F\v9\x039\x079\u0692\n9\f9\x0E" +
		"9\u0695\v9\x059\u0697\n9\x03:\x03:\x03:\x03:\x07:\u069D\n:\f:\x0E:\u06A0" +
		"\v:\x03:\x03:\x07:\u06A4\n:\f:\x0E:\u06A7\v:\x07:\u06A9\n:\f:\x0E:\u06AC" +
		"\v:\x03:\x05:\u06AF\n:\x03:\x07:\u06B2\n:\f:\x0E:\u06B5\v:\x03:\x03:\x07" +
		":\u06B9\n:\f:\x0E:\u06BC\v:\x03:\x07:\u06BF\n:\f:\x0E:\u06C2\v:\x05:\u06C4" +
		"\n:\x03;\x03;\x03;\x03;\x06;\u06CA\n;\r;\x0E;\u06CB\x03;\x03;\x07;\u06D0" +
		"\n;\f;\x0E;\u06D3\v;\x07;\u06D5\n;\f;\x0E;\u06D8\v;\x03;\x05;\u06DB\n" +
		";\x03;\x07;\u06DE\n;\f;\x0E;\u06E1\v;\x03;\x03;\x07;\u06E5\n;\f;\x0E;" +
		"\u06E8\v;\x03;\x07;\u06EB\n;\f;\x0E;\u06EE\v;\x05;\u06F0\n;\x03<\x03<" +
		"\x03<\x03<\x07<\u06F6\n<\f<\x0E<\u06F9\v<\x03<\x03<\x07<\u06FD\n<\f<\x0E" +
		"<\u0700\v<\x06<\u0702\n<\r<\x0E<\u0703\x03=\x03=\x03=\x03=\x07=\u070A" +
		"\n=\f=\x0E=\u070D\v=\x03=\x03=\x07=\u0711\n=\f=\x0E=\u0714\v=\x06=\u0716" +
		"\n=\r=\x0E=\u0717\x03>\x03>\x03>\x03>\x07>\u071E\n>\f>\x0E>\u0721\v>\x03" +
		">\x03>\x07>\u0725\n>\f>\x0E>\u0728\v>\x06>\u072A\n>\r>\x0E>\u072B\x03" +
		"?\x03?\x03?\x03?\x07?\u0732\n?\f?\x0E?\u0735\v?\x03?\x03?\x07?\u0739\n" +
		"?\f?\x0E?\u073C\v?\x06?\u073E\n?\r?\x0E?\u073F\x03@\x03@\x03@\x03@\x07" +
		"@\u0746\n@\f@\x0E@\u0749\v@\x03@\x03@\x07@\u074D\n@\f@\x0E@\u0750\v@\x06" +
		"@\u0752\n@\r@\x0E@\u0753\x03A\x03A\x03A\x03A\x07A\u075A\nA\fA\x0EA\u075D" +
		"\vA\x03A\x03A\x07A\u0761\nA\fA\x0EA\u0764\vA\x06A\u0766\nA\rA\x0EA\u0767" +
		"\x03B\x03B\x03B\x03B\x07B\u076E\nB\fB\x0EB\u0771\vB\x03B\x03B\x07B\u0775" +
		"\nB\fB\x0EB\u0778\vB\x06B\u077A\nB\rB\x0EB\u077B\x03C\x03C\x03C\x03C\x07" +
		"C\u0782\nC\fC\x0EC\u0785\vC\x03C\x03C\x07C\u0789\nC\fC\x0EC\u078C\vC\x06" +
		"C\u078E\nC\rC\x0EC\u078F\x03D\x03D\x03D\x03D\x07D\u0796\nD\fD\x0ED\u0799" +
		"\vD\x03D\x03D\x07D\u079D\nD\fD\x0ED\u07A0\vD\x06D\u07A2\nD\rD\x0ED\u07A3" +
		"\x03E\x03E\x03E\x03E\x07E\u07AA\nE\fE\x0EE\u07AD\vE\x03E\x03E\x07E\u07B1" +
		"\nE\fE\x0EE\u07B4\vE\x06E\u07B6\nE\rE\x0EE\u07B7\x03F\x03F\x03F\x03F\x07" +
		"F\u07BE\nF\fF\x0EF\u07C1\vF\x03F\x03F\x07F\u07C5\nF\fF\x0EF\u07C8\vF\x06" +
		"F\u07CA\nF\rF\x0EF\u07CB\x03G\x03G\x03G\x03G\x07G\u07D2\nG\fG\x0EG\u07D5" +
		"\vG\x03G\x03G\x07G\u07D9\nG\fG\x0EG\u07DC\vG\x06G\u07DE\nG\rG\x0EG\u07DF" +
		"\x03H\x03H\x03H\x03H\x07H\u07E6\nH\fH\x0EH\u07E9\vH\x03H\x03H\x07H\u07ED" +
		"\nH\fH\x0EH\u07F0\vH\x06H\u07F2\nH\rH\x0EH\u07F3\x03I\x03I\x03I\x03I\x07" +
		"I\u07FA\nI\fI\x0EI\u07FD\vI\x03I\x03I\x07I\u0801\nI\fI\x0EI\u0804\vI\x06" +
		"I\u0806\nI\rI\x0EI\u0807\x03J\x03J\x03J\x03J\x07J\u080E\nJ\fJ\x0EJ\u0811" +
		"\vJ\x03J\x03J\x07J\u0815\nJ\fJ\x0EJ\u0818\vJ\x06J\u081A\nJ\rJ\x0EJ\u081B" +
		"\x03K\x03K\x03K\x03K\x07K\u0822\nK\fK\x0EK\u0825\vK\x03K\x03K\x07K\u0829" +
		"\nK\fK\x0EK\u082C\vK\x06K\u082E\nK\rK\x0EK\u082F\x03L\x03L\x03L\x03L\x07" +
		"L\u0836\nL\fL\x0EL\u0839\vL\x03L\x03L\x07L\u083D\nL\fL\x0EL\u0840\vL\x06" +
		"L\u0842\nL\rL\x0EL\u0843\x03M\x03M\x03M\x03M\x07M\u084A\nM\fM\x0EM\u084D" +
		"\vM\x03M\x03M\x07M\u0851\nM\fM\x0EM\u0854\vM\x06M\u0856\nM\rM\x0EM\u0857" +
		"\x03N\x03N\x03N\x03N\x07N\u085E\nN\fN\x0EN\u0861\vN\x03N\x03N\x07N\u0865" +
		"\nN\fN\x0EN\u0868\vN\x06N\u086A\nN\rN\x0EN\u086B\x03O\x03O\x03O\x03O\x07" +
		"O\u0872\nO\fO\x0EO\u0875\vO\x03O\x03O\x07O\u0879\nO\fO\x0EO\u087C\vO\x06" +
		"O\u087E\nO\rO\x0EO\u087F\x03P\x03P\x03P\x03P\x07P\u0886\nP\fP\x0EP\u0889" +
		"\vP\x03P\x03P\x07P\u088D\nP\fP\x0EP\u0890\vP\x06P\u0892\nP\rP\x0EP\u0893" +
		"\x03Q\x03Q\x03Q\x03Q\x07Q\u089A\nQ\fQ\x0EQ\u089D\vQ\x03Q\x03Q\x07Q\u08A1" +
		"\nQ\fQ\x0EQ\u08A4\vQ\x06Q\u08A6\nQ\rQ\x0EQ\u08A7\x03R\x03R\x03R\x03R\x07" +
		"R\u08AE\nR\fR\x0ER\u08B1\vR\x03R\x03R\x07R\u08B5\nR\fR\x0ER\u08B8\vR\x06" +
		"R\u08BA\nR\rR\x0ER\u08BB\x03S\x03S\x03S\x03S\x07S\u08C2\nS\fS\x0ES\u08C5" +
		"\vS\x03S\x03S\x07S\u08C9\nS\fS\x0ES\u08CC\vS\x06S\u08CE\nS\r";
	private static readonly _serializedATNSegment1: string =
		"S\x0ES\u08CF\x03T\x03T\x03T\x03T\x07T\u08D6\nT\fT\x0ET\u08D9\vT\x03T\x03" +
		"T\x07T\u08DD\nT\fT\x0ET\u08E0\vT\x06T\u08E2\nT\rT\x0ET\u08E3\x03U\x03" +
		"U\x03U\x03U\x07U\u08EA\nU\fU\x0EU\u08ED\vU\x03U\x03U\x07U\u08F1\nU\fU" +
		"\x0EU\u08F4\vU\x06U\u08F6\nU\rU\x0EU\u08F7\x03V\x03V\x03V\x03V\x07V\u08FE" +
		"\nV\fV\x0EV\u0901\vV\x03V\x03V\x07V\u0905\nV\fV\x0EV\u0908\vV\x06V\u090A" +
		"\nV\rV\x0EV\u090B\x03W\x03W\x03W\x03W\x07W\u0912\nW\fW\x0EW\u0915\vW\x03" +
		"W\x03W\x07W\u0919\nW\fW\x0EW\u091C\vW\x06W\u091E\nW\rW\x0EW\u091F\x03" +
		"X\x03X\x03X\x03X\x07X\u0926\nX\fX\x0EX\u0929\vX\x03X\x03X\x07X\u092D\n" +
		"X\fX\x0EX\u0930\vX\x06X\u0932\nX\rX\x0EX\u0933\x03Y\x03Y\x03Y\x03Y\x07" +
		"Y\u093A\nY\fY\x0EY\u093D\vY\x03Y\x03Y\x07Y\u0941\nY\fY\x0EY\u0944\vY\x06" +
		"Y\u0946\nY\rY\x0EY\u0947\x03Z\x03Z\x03Z\x03Z\x07Z\u094E\nZ\fZ\x0EZ\u0951" +
		"\vZ\x03Z\x03Z\x07Z\u0955\nZ\fZ\x0EZ\u0958\vZ\x06Z\u095A\nZ\rZ\x0EZ\u095B" +
		"\x03[\x03[\x03[\x03[\x07[\u0962\n[\f[\x0E[\u0965\v[\x03[\x03[\x07[\u0969" +
		"\n[\f[\x0E[\u096C\v[\x06[\u096E\n[\r[\x0E[\u096F\x03\\\x03\\\x03\\\x03" +
		"\\\x07\\\u0976\n\\\f\\\x0E\\\u0979\v\\\x03\\\x03\\\x07\\\u097D\n\\\f\\" +
		"\x0E\\\u0980\v\\\x06\\\u0982\n\\\r\\\x0E\\\u0983\x03]\x03]\x03]\x03]\x07" +
		"]\u098A\n]\f]\x0E]\u098D\v]\x03]\x03]\x07]\u0991\n]\f]\x0E]\u0994\v]\x06" +
		"]\u0996\n]\r]\x0E]\u0997\x03^\x03^\x03^\x03^\x07^\u099E\n^\f^\x0E^\u09A1" +
		"\v^\x03^\x03^\x07^\u09A5\n^\f^\x0E^\u09A8\v^\x06^\u09AA\n^\r^\x0E^\u09AB" +
		"\x03_\x03_\x03_\x03_\x07_\u09B2\n_\f_\x0E_\u09B5\v_\x03_\x03_\x07_\u09B9" +
		"\n_\f_\x0E_\u09BC\v_\x06_\u09BE\n_\r_\x0E_\u09BF\x03`\x03`\x03`\x03`\x07" +
		"`\u09C6\n`\f`\x0E`\u09C9\v`\x03`\x03`\x07`\u09CD\n`\f`\x0E`\u09D0\v`\x06" +
		"`\u09D2\n`\r`\x0E`\u09D3\x03a\x03a\x03a\x03a\x07a\u09DA\na\fa\x0Ea\u09DD" +
		"\va\x03a\x03a\x07a\u09E1\na\fa\x0Ea\u09E4\va\x06a\u09E6\na\ra\x0Ea\u09E7" +
		"\x03b\x03b\x03b\x03b\x07b\u09EE\nb\fb\x0Eb\u09F1\vb\x03b\x03b\x07b\u09F5" +
		"\nb\fb\x0Eb\u09F8\vb\x06b\u09FA\nb\rb\x0Eb\u09FB\x03c\x03c\x03c\x03c\x07" +
		"c\u0A02\nc\fc\x0Ec\u0A05\vc\x03c\x03c\x07c\u0A09\nc\fc\x0Ec\u0A0C\vc\x06" +
		"c\u0A0E\nc\rc\x0Ec\u0A0F\x03d\x03d\x03d\x03d\x07d\u0A16\nd\fd\x0Ed\u0A19" +
		"\vd\x03d\x03d\x07d\u0A1D\nd\fd\x0Ed\u0A20\vd\x06d\u0A22\nd\rd\x0Ed\u0A23" +
		"\x03e\x03e\x03e\x03e\x07e\u0A2A\ne\fe\x0Ee\u0A2D\ve\x03e\x03e\x07e\u0A31" +
		"\ne\fe\x0Ee\u0A34\ve\x06e\u0A36\ne\re\x0Ee\u0A37\x03f\x03f\x03f\x03f\x07" +
		"f\u0A3E\nf\ff\x0Ef\u0A41\vf\x03f\x03f\x07f\u0A45\nf\ff\x0Ef\u0A48\vf\x06" +
		"f\u0A4A\nf\rf\x0Ef\u0A4B\x03g\x03g\x03g\x03g\x07g\u0A52\ng\fg\x0Eg\u0A55" +
		"\vg\x03g\x03g\x07g\u0A59\ng\fg\x0Eg\u0A5C\vg\x06g\u0A5E\ng\rg\x0Eg\u0A5F" +
		"\x03h\x03h\x03h\x03h\x07h\u0A66\nh\fh\x0Eh\u0A69\vh\x03h\x03h\x07h\u0A6D" +
		"\nh\fh\x0Eh\u0A70\vh\x06h\u0A72\nh\rh\x0Eh\u0A73\x03i\x03i\x03i\x03i\x07" +
		"i\u0A7A\ni\fi\x0Ei\u0A7D\vi\x03i\x03i\x07i\u0A81\ni\fi\x0Ei\u0A84\vi\x06" +
		"i\u0A86\ni\ri\x0Ei\u0A87\x03j\x03j\x03j\x03j\x07j\u0A8E\nj\fj\x0Ej\u0A91" +
		"\vj\x03j\x03j\x07j\u0A95\nj\fj\x0Ej\u0A98\vj\x06j\u0A9A\nj\rj\x0Ej\u0A9B" +
		"\x03k\x03k\x03k\x03k\x07k\u0AA2\nk\fk\x0Ek\u0AA5\vk\x03k\x03k\x07k\u0AA9" +
		"\nk\fk\x0Ek\u0AAC\vk\x06k\u0AAE\nk\rk\x0Ek\u0AAF\x03l\x03l\x03l\x03l\x07" +
		"l\u0AB6\nl\fl\x0El\u0AB9\vl\x03l\x03l\x07l\u0ABD\nl\fl\x0El\u0AC0\vl\x06" +
		"l\u0AC2\nl\rl\x0El\u0AC3\x03m\x03m\x03m\x03m\x07m\u0ACA\nm\fm\x0Em\u0ACD" +
		"\vm\x03m\x03m\x07m\u0AD1\nm\fm\x0Em\u0AD4\vm\x06m\u0AD6\nm\rm\x0Em\u0AD7" +
		"\x03n\x03n\x03n\x03n\x07n\u0ADE\nn\fn\x0En\u0AE1\vn\x03n\x03n\x07n\u0AE5" +
		"\nn\fn\x0En\u0AE8\vn\x06n\u0AEA\nn\rn\x0En\u0AEB\x03o\x03o\x03o\x03o\x07" +
		"o\u0AF2\no\fo\x0Eo\u0AF5\vo\x03o\x03o\x07o\u0AF9\no\fo\x0Eo\u0AFC\vo\x06" +
		"o\u0AFE\no\ro\x0Eo\u0AFF\x03p\x03p\x03p\x03p\x07p\u0B06\np\fp\x0Ep\u0B09" +
		"\vp\x03p\x03p\x07p\u0B0D\np\fp\x0Ep\u0B10\vp\x06p\u0B12\np\rp\x0Ep\u0B13" +
		"\x03q\x03q\x03q\x03q\x07q\u0B1A\nq\fq\x0Eq\u0B1D\vq\x03q\x03q\x07q\u0B21" +
		"\nq\fq\x0Eq\u0B24\vq\x06q\u0B26\nq\rq\x0Eq\u0B27\x03r\x03r\x03r\x03r\x07" +
		"r\u0B2E\nr\fr\x0Er\u0B31\vr\x03r\x03r\x07r\u0B35\nr\fr\x0Er\u0B38\vr\x06" +
		"r\u0B3A\nr\rr\x0Er\u0B3B\x03s\x03s\x03s\x03s\x07s\u0B42\ns\fs\x0Es\u0B45" +
		"\vs\x03s\x03s\x07s\u0B49\ns\fs\x0Es\u0B4C\vs\x06s\u0B4E\ns\rs\x0Es\u0B4F" +
		"\x03t\x03t\x03t\x03t\x07t\u0B56\nt\ft\x0Et\u0B59\vt\x03t\x03t\x07t\u0B5D" +
		"\nt\ft\x0Et\u0B60\vt\x06t\u0B62\nt\rt\x0Et\u0B63\x03u\x03u\x03u\x03u\x07" +
		"u\u0B6A\nu\fu\x0Eu\u0B6D\vu\x03u\x03u\x07u\u0B71\nu\fu\x0Eu\u0B74\vu\x06" +
		"u\u0B76\nu\ru\x0Eu\u0B77\x03v\x03v\x03v\x03v\x07v\u0B7E\nv\fv\x0Ev\u0B81" +
		"\vv\x03v\x03v\x07v\u0B85\nv\fv\x0Ev\u0B88\vv\x06v\u0B8A\nv\rv\x0Ev\u0B8B" +
		"\x03w\x03w\x03w\x03w\x07w\u0B92\nw\fw\x0Ew\u0B95\vw\x03w\x03w\x07w\u0B99" +
		"\nw\fw\x0Ew\u0B9C\vw\x06w\u0B9E\nw\rw\x0Ew\u0B9F\x03x\x03x\x03x\x03x\x07" +
		"x\u0BA6\nx\fx\x0Ex\u0BA9\vx\x03x\x03x\x07x\u0BAD\nx\fx\x0Ex\u0BB0\vx\x06" +
		"x\u0BB2\nx\rx\x0Ex\u0BB3\x03y\x03y\x03y\x03y\x07y\u0BBA\ny\fy\x0Ey\u0BBD" +
		"\vy\x03y\x03y\x07y\u0BC1\ny\fy\x0Ey\u0BC4\vy\x06y\u0BC6\ny\ry\x0Ey\u0BC7" +
		"\x03z\x03z\x03z\x03z\x07z\u0BCE\nz\fz\x0Ez\u0BD1\vz\x03z\x03z\x07z\u0BD5" +
		"\nz\fz\x0Ez\u0BD8\vz\x06z\u0BDA\nz\rz\x0Ez\u0BDB\x03{\x03{\x03{\x03{\x07" +
		"{\u0BE2\n{\f{\x0E{\u0BE5\v{\x03{\x03{\x07{\u0BE9\n{\f{\x0E{\u0BEC\v{\x06" +
		"{\u0BEE\n{\r{\x0E{\u0BEF\x03|\x03|\x03|\x03|\x07|\u0BF6\n|\f|\x0E|\u0BF9" +
		"\v|\x03|\x03|\x07|\u0BFD\n|\f|\x0E|\u0C00\v|\x06|\u0C02\n|\r|\x0E|\u0C03" +
		"\x03}\x03}\x03}\x03}\x07}\u0C0A\n}\f}\x0E}\u0C0D\v}\x03}\x03}\x07}\u0C11" +
		"\n}\f}\x0E}\u0C14\v}\x06}\u0C16\n}\r}\x0E}\u0C17\x03~\x03~\x03~\x03~\x07" +
		"~\u0C1E\n~\f~\x0E~\u0C21\v~\x03~\x03~\x07~\u0C25\n~\f~\x0E~\u0C28\v~\x06" +
		"~\u0C2A\n~\r~\x0E~\u0C2B\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x07\x7F\u0C32" +
		"\n\x7F\f\x7F\x0E\x7F\u0C35\v\x7F\x03\x7F\x03\x7F\x07\x7F\u0C39\n\x7F\f" +
		"\x7F\x0E\x7F\u0C3C\v\x7F\x06\x7F\u0C3E\n\x7F\r\x7F\x0E\x7F\u0C3F\x03\x80" +
		"\x03\x80\x03\x80\x03\x80\x07\x80\u0C46\n\x80\f\x80\x0E\x80\u0C49\v\x80" +
		"\x03\x80\x03\x80\x07\x80\u0C4D\n\x80\f\x80\x0E\x80\u0C50\v\x80\x06\x80" +
		"\u0C52\n\x80\r\x80\x0E\x80\u0C53\x03\x81\x03\x81\x03\x81\x03\x81\x07\x81" +
		"\u0C5A\n\x81\f\x81\x0E\x81\u0C5D\v\x81\x03\x81\x03\x81\x07\x81\u0C61\n" +
		"\x81\f\x81\x0E\x81\u0C64\v\x81\x06\x81\u0C66\n\x81\r\x81\x0E\x81\u0C67" +
		"\x03\x82\x03\x82\x03\x82\x03\x82\x07\x82\u0C6E\n\x82\f\x82\x0E\x82\u0C71" +
		"\v\x82\x03\x82\x03\x82\x07\x82\u0C75\n\x82\f\x82\x0E\x82\u0C78\v\x82\x06" +
		"\x82\u0C7A\n\x82\r\x82\x0E\x82\u0C7B\x03\x83\x03\x83\x03\x83\x03\x83\x07" +
		"\x83\u0C82\n\x83\f\x83\x0E\x83\u0C85\v\x83\x03\x83\x03\x83\x07\x83\u0C89" +
		"\n\x83\f\x83\x0E\x83\u0C8C\v\x83\x06\x83\u0C8E\n\x83\r\x83\x0E\x83\u0C8F" +
		"\x03\x84\x03\x84\x03\x84\x03\x84\x07\x84\u0C96\n\x84\f\x84\x0E\x84\u0C99" +
		"\v\x84\x03\x84\x03\x84\x07\x84\u0C9D\n\x84\f\x84\x0E\x84\u0CA0\v\x84\x06" +
		"\x84\u0CA2\n\x84\r\x84\x0E\x84\u0CA3\x03\x85\x03\x85\x03\x85\x03\x85\x07" +
		"\x85\u0CAA\n\x85\f\x85\x0E\x85\u0CAD\v\x85\x03\x85\x03\x85\x07\x85\u0CB1" +
		"\n\x85\f\x85\x0E\x85\u0CB4\v\x85\x06\x85\u0CB6\n\x85\r\x85\x0E\x85\u0CB7" +
		"\x03\x86\x03\x86\x03\x86\x03\x86\x07\x86\u0CBE\n\x86\f\x86\x0E\x86\u0CC1" +
		"\v\x86\x03\x86\x03\x86\x07\x86\u0CC5\n\x86\f\x86\x0E\x86\u0CC8\v\x86\x06" +
		"\x86\u0CCA\n\x86\r\x86\x0E\x86\u0CCB\x03\x87\x03\x87\x03\x87\x03\x87\x07" +
		"\x87\u0CD2\n\x87\f\x87\x0E\x87\u0CD5\v\x87\x03\x87\x03\x87\x07\x87\u0CD9" +
		"\n\x87\f\x87\x0E\x87\u0CDC\v\x87\x06\x87\u0CDE\n\x87\r\x87\x0E\x87\u0CDF" +
		"\x03\x88\x03\x88\x03\x88\x03\x88\x07\x88\u0CE6\n\x88\f\x88\x0E\x88\u0CE9" +
		"\v\x88\x03\x88\x03\x88\x07\x88\u0CED\n\x88\f\x88\x0E\x88\u0CF0\v\x88\x06" +
		"\x88\u0CF2\n\x88\r\x88\x0E\x88\u0CF3\x03\x89\x03\x89\x03\x89\x03\x89\x07" +
		"\x89\u0CFA\n\x89\f\x89\x0E\x89\u0CFD\v\x89\x03\x89\x03\x89\x07\x89\u0D01" +
		"\n\x89\f\x89\x0E\x89\u0D04\v\x89\x06\x89\u0D06\n\x89\r\x89\x0E\x89\u0D07" +
		"\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x07\x8A\u0D0E\n\x8A\f\x8A\x0E\x8A\u0D11" +
		"\v\x8A\x03\x8A\x03\x8A\x07\x8A\u0D15\n\x8A\f\x8A\x0E\x8A\u0D18\v\x8A\x06" +
		"\x8A\u0D1A\n\x8A\r\x8A\x0E\x8A\u0D1B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x07" +
		"\x8B\u0D22\n\x8B\f\x8B\x0E\x8B\u0D25\v\x8B\x03\x8B\x03\x8B\x07\x8B\u0D29" +
		"\n\x8B\f\x8B\x0E\x8B\u0D2C\v\x8B\x06\x8B\u0D2E\n\x8B\r\x8B\x0E\x8B\u0D2F" +
		"\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x07\x8C\u0D36\n\x8C\f\x8C\x0E\x8C\u0D39" +
		"\v\x8C\x03\x8C\x03\x8C\x07\x8C\u0D3D\n\x8C\f\x8C\x0E\x8C\u0D40\v\x8C\x06" +
		"\x8C\u0D42\n\x8C\r\x8C\x0E\x8C\u0D43\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x07" +
		"\x8D\u0D4A\n\x8D\f\x8D\x0E\x8D\u0D4D\v\x8D\x03\x8D\x03\x8D\x07\x8D\u0D51" +
		"\n\x8D\f\x8D\x0E\x8D\u0D54\v\x8D\x06\x8D\u0D56\n\x8D\r\x8D\x0E\x8D\u0D57" +
		"\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x07\x8E\u0D5E\n\x8E\f\x8E\x0E\x8E\u0D61" +
		"\v\x8E\x03\x8E\x03\x8E\x07\x8E\u0D65\n\x8E\f\x8E\x0E\x8E\u0D68\v\x8E\x06" +
		"\x8E\u0D6A\n\x8E\r\x8E\x0E\x8E\u0D6B\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x07" +
		"\x8F\u0D72\n\x8F\f\x8F\x0E\x8F\u0D75\v\x8F\x03\x8F\x03\x8F\x07\x8F\u0D79" +
		"\n\x8F\f\x8F\x0E\x8F\u0D7C\v\x8F\x06\x8F\u0D7E\n\x8F\r\x8F\x0E\x8F\u0D7F" +
		"\x03\x90\x03\x90\x03\x90\x03\x90\x07\x90\u0D86\n\x90\f\x90\x0E\x90\u0D89" +
		"\v\x90\x03\x90\x03\x90\x07\x90\u0D8D\n\x90\f\x90\x0E\x90\u0D90\v\x90\x06" +
		"\x90\u0D92\n\x90\r\x90\x0E\x90\u0D93\x03\x91\x03\x91\x03\x91\x03\x91\x07" +
		"\x91\u0D9A\n\x91\f\x91\x0E\x91\u0D9D\v\x91\x03\x91\x03\x91\x07\x91\u0DA1" +
		"\n\x91\f\x91\x0E\x91\u0DA4\v\x91\x06\x91\u0DA6\n\x91\r\x91\x0E\x91\u0DA7" +
		"\x03\x92\x03\x92\x03\x92\x03\x92\x07\x92\u0DAE\n\x92\f\x92\x0E\x92\u0DB1" +
		"\v\x92\x03\x92\x03\x92\x07\x92\u0DB5\n\x92\f\x92\x0E\x92\u0DB8\v\x92\x06" +
		"\x92\u0DBA\n\x92\r\x92\x0E\x92\u0DBB\x03\x93\x03\x93\x03\x93\x03\x93\x07" +
		"\x93\u0DC2\n\x93\f\x93\x0E\x93\u0DC5\v\x93\x03\x93\x03\x93\x07\x93\u0DC9" +
		"\n\x93\f\x93\x0E\x93\u0DCC\v\x93\x06\x93\u0DCE\n\x93\r\x93\x0E\x93\u0DCF" +
		"\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x07\x94" +
		"\u0DDA\n\x94\f\x94\x0E\x94\u0DDD\v\x94\x06\x94\u0DDF\n\x94\r\x94\x0E\x94" +
		"\u0DE0\x03\x94\x03\x94\x07\x94\u0DE5\n\x94\f\x94\x0E\x94\u0DE8\v\x94\x03" +
		"\x94\x03\x94\x07\x94\u0DEC\n\x94\f\x94\x0E\x94\u0DEF\v\x94\x03\x94\x07" +
		"\x94\u0DF2\n\x94\f\x94\x0E\x94\u0DF5\v\x94\x05\x94\u0DF7\n\x94\x03\x95" +
		"\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x06\x95\u0E00\n\x95\r" +
		"\x95\x0E\x95\u0E01\x03\x96\x03\x96\x03\x96\x03\x96\x07\x96\u0E08\n\x96" +
		"\f\x96\x0E\x96\u0E0B\v\x96\x03\x96\x03\x96\x07\x96\u0E0F\n\x96\f\x96\x0E" +
		"\x96\u0E12\v\x96\x07\x96\u0E14\n\x96\f\x96\x0E\x96\u0E17\v\x96\x03\x96" +
		"\x03\x96\x03\x96\x03\x96\x06\x96\u0E1D\n\x96\r\x96\x0E\x96\u0E1E\x06\x96" +
		"\u0E21\n\x96\r\x96\x0E\x96\u0E22\x03\x96\x03\x96\x07\x96\u0E27\n\x96\f" +
		"\x96\x0E\x96\u0E2A\v\x96\x03\x96\x03\x96\x07\x96\u0E2E\n\x96\f\x96\x0E" +
		"\x96\u0E31\v\x96\x03\x96\x07\x96\u0E34\n\x96\f\x96\x0E\x96\u0E37\v\x96" +
		"\x05\x96\u0E39\n\x96\x03\x97\x03\x97\x03\x97\x03\x97\x05\x97\u0E3F\n\x97" +
		"\x03\x98\x03\x98\x03\x98\x03\x98\x07\x98\u0E45\n\x98\f\x98\x0E\x98\u0E48" +
		"\v\x98\x03\x98\x03\x98\x07\x98\u0E4C\n\x98\f\x98\x0E\x98\u0E4F\v\x98\x07" +
		"\x98\u0E51\n\x98\f\x98\x0E\x98\u0E54\v\x98\x03\x98\x03\x98\x05\x98\u0E58" +
		"\n\x98\x03\x98\x07\x98\u0E5B\n\x98\f\x98\x0E\x98\u0E5E\v\x98\x03\x98\x06" +
		"\x98\u0E61\n\x98\r\x98\x0E\x98\u0E62\x06\x98\u0E65\n\x98\r\x98\x0E\x98" +
		"\u0E66\x03\x98\x03\x98\x03\x99\x03\x99\x03\x99\x03\x99\x07\x99\u0E6F\n" +
		"\x99\f\x99\x0E\x99\u0E72\v\x99\x03\x99\x03\x99\x07\x99\u0E76\n\x99\f\x99" +
		"\x0E\x99\u0E79\v\x99\x07\x99\u0E7B\n\x99\f\x99\x0E\x99\u0E7E\v\x99\x03" +
		"\x99\x03\x99\x03\x99\x03\x99\x06\x99\u0E84\n\x99\r\x99\x0E\x99\u0E85\x06" +
		"\x99\u0E88\n\x99\r\x99\x0E\x99\u0E89\x03\x99\x03\x99\x03\x9A\x03\x9A\x03" +
		"\x9A\x03\x9A\x07\x9A\u0E92\n\x9A\f\x9A\x0E\x9A\u0E95\v\x9A\x03\x9A\x03" +
		"\x9A\x07\x9A\u0E99\n\x9A\f\x9A\x0E\x9A\u0E9C\v\x9A\x07\x9A\u0E9E\n\x9A" +
		"\f\x9A\x0E\x9A\u0EA1\v\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x06\x9A\u0EA7" +
		"\n\x9A\r\x9A\x0E\x9A\u0EA8\x06\x9A\u0EAB\n\x9A\r\x9A\x0E\x9A\u0EAC\x03" +
		"\x9A\x03\x9A\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x07\x9B\u0EB5\n\x9B\f\x9B" +
		"\x0E\x9B\u0EB8\v\x9B\x03\x9B\x03\x9B\x07\x9B\u0EBC\n\x9B\f\x9B\x0E\x9B" +
		"\u0EBF\v\x9B\x07\x9B\u0EC1\n\x9B\f\x9B\x0E\x9B\u0EC4\v\x9B\x03\x9B\x03" +
		"\x9B\x03\x9B\x03\x9B\x06\x9B\u0ECA\n\x9B\r\x9B\x0E\x9B\u0ECB\x06\x9B\u0ECE" +
		"\n\x9B\r\x9B\x0E\x9B\u0ECF\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03\x9C\x03" +
		"\x9C\x07\x9C\u0ED8\n\x9C\f\x9C\x0E\x9C\u0EDB\v\x9C\x03\x9C\x03\x9C\x07" +
		"\x9C\u0EDF\n\x9C\f\x9C\x0E\x9C\u0EE2\v\x9C\x07\x9C\u0EE4\n\x9C\f\x9C\x0E" +
		"\x9C\u0EE7\v\x9C\x03\x9C\x03\x9C\x03\x9C\x07\x9C\u0EEC\n\x9C\f\x9C\x0E" +
		"\x9C\u0EEF\v\x9C\x03\x9C\x06\x9C\u0EF2\n\x9C\r\x9C\x0E\x9C\u0EF3\x06\x9C" +
		"\u0EF6\n\x9C\r\x9C\x0E\x9C\u0EF7\x03\x9C\x03\x9C\x07\x9C\u0EFC\n\x9C\f" +
		"\x9C\x0E\x9C\u0EFF\v\x9C\x03\x9C\x03\x9C\x07\x9C\u0F03\n\x9C\f\x9C\x0E" +
		"\x9C\u0F06\v\x9C\x03\x9C\x07\x9C\u0F09\n\x9C\f\x9C\x0E\x9C\u0F0C\v\x9C" +
		"\x05\x9C\u0F0E\n\x9C\x03\x9D\x06\x9D\u0F11\n\x9D\r\x9D\x0E\x9D\u0F12\x03" +
		"\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9F\x07\x9F\u0F1A\n\x9F\f\x9F\x0E\x9F" +
		"\u0F1D\v\x9F\x03\x9F\x03\x9F\x03\x9F\x07\x9F\u0F22\n\x9F\f\x9F\x0E\x9F" +
		"\u0F25\v\x9F\x03\xA0\x03\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03" +
		"\xA1\x03\xA1\x03\xA1\x03\xA1\x05\xA1\u0F32\n\xA1\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x03\xA2\x05\xA2\u0F39\n\xA2\x03\xA3\x03\xA3\x03\xA3\x05\xA3\u0F3E" +
		"\n\xA3\x03\xA3\x03\xA3\x05\xA3\u0F42\n\xA3\x03\xA3\x03\xA3\x05\xA3\u0F46" +
		"\n\xA3\x03\xA3\x05\xA3\u0F49\n\xA3\x03\xA4\x03\xA4\x03\xA4\x05\xA4\u0F4E" +
		"\n\xA4\x03\xA5\x03\xA5\x03\xA6\x03\xA6\x03\xA7\x03\xA7\x03\xA8\x03\xA8" +
		"\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03\xAC\x03\xAC\x03\xAD" +
		"\x03\xAD\x03\xAE\x03\xAE\x03\xAE\x05\xAE\u0F65\n\xAE\x03\xAE\x03\xAE\x03" +
		"\xAE\x05\xAE\u0F6A\n\xAE\x03\xAE\x03\xAE\x03\xAE\x05\xAE\u0F6F\n\xAE\x05" +
		"\xAE\u0F71\n\xAE\x03\xAF\x03\xAF\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0" +
		"\x03\xB0\x05\xB0\u0F7B\n\xB0\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03" +
		"\xB1\x03\xB1\x03\xB1\x05\xB1\u0F85\n\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2" +
		"\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x05\xB2\u0F8F\n\xB2\x03\xB3\x03\xB3\x03" +
		"\xB3\x03\xB3\x05\xB3\u0F95\n\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3" +
		"\x05\xB3\u0F9C\n\xB3\x03\xB4\x03\xB4\x07\xB4\u0FA0\n\xB4\f\xB4\x0E\xB4" +
		"\u0FA3\v\xB4\x03\xB5\x03\xB5\x03\xB5\x07\xB5\u0FA8\n\xB5\f\xB5\x0E\xB5" +
		"\u0FAB\v\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB6\x03\xB6\x07\xB6\u0FB2\n\xB6" +
		"\f\xB6\x0E\xB6\u0FB5\v\xB6\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03" +
		"\xB7\x03\xB7\x03\xB7\x05\xB7\u0FBF\n\xB7\x03\xB8\x03\xB8\x07\xB8\u0FC3" +
		"\n\xB8\f\xB8\x0E\xB8\u0FC6\v\xB8\x03\xB8\x03\xB8\x05\xB8\u0FCA\n\xB8\x03" +
		"\xB9\x03\xB9\x03\xB9\x07\xB9\u0FCF\n\xB9\f\xB9\x0E\xB9\u0FD2\v\xB9\x03" +
		"\xB9\x03\xB9\x03\xB9\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u0FDA\n\xBA\x03\xBA" +
		"\x03\xBA\x05\xBA\u0FDE\n\xBA\x03\xBA\x03\xBA\x05\xBA\u0FE2\n\xBA\x03\xBA" +
		"\x05\xBA\u0FE5\n\xBA\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03" +
		"\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x07\xBB\u0FF2\n\xBB\f\xBB\x0E\xBB" +
		"\u0FF5\v\xBB\x03\xBB\x05\xBB\u0FF8\n\xBB\x03\xBC\x03\xBC\x03\xBC\x03\xBC" +
		"\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x07\xBC\u1005" +
		"\n\xBC\f\xBC\x0E\xBC\u1008\v\xBC\x03\xBC\x05\xBC\u100B\n\xBC\x03\xBD\x03" +
		"\xBD\x07\xBD\u100F\n\xBD\f\xBD\x0E\xBD\u1012\v\xBD\x03\xBE\x03\xBE\x03" +
		"\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x05\xBE\u101C\n\xBE\x03\xBF" +
		"\x03\xBF\x03\xBF\x05\xBF\u1021\n\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u1026" +
		"\n\xBF\x05\xBF\u1028\n\xBF\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u102D\n\xC0" +
		"\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u1032\n\xC0\x03\xC0\x03\xC0\x03\xC0\x05" +
		"\xC0\u1037\n\xC0\x05\xC0\u1039\n\xC0\x03\xC1\x03\xC1\x03\xC1\x05\xC1\u103E" +
		"\n\xC1\x03\xC1\x03\xC1\x07\xC1\u1042\n\xC1\f\xC1\x0E\xC1\u1045\v\xC1\x03" +
		"\xC1\x03\xC1\x06\xC1\u1049\n\xC1\r\xC1\x0E\xC1\u104A\x03\xC1\x03\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x07\xC1\u1054\n\xC1\f\xC1\x0E\xC1" +
		"\u1057\v\xC1\x03\xC1\x05\xC1\u105A\n\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2" +
		"\x03\xC3\x03\xC3\x03\xC4\x03\xC4\x03\xC4\x07\xC4\u1065\n\xC4\f\xC4\x0E" +
		"\xC4\u1068\v\xC4\x03\xC4\x05\xC4\u106B\n\xC4\x03\xC4\x03\xC4\x03\xC4\x03" +
		"\xC4\x07\xC4\u1071\n\xC4\f\xC4\x0E\xC4\u1074\v\xC4\x03\xC4\x03\xC4\x07" +
		"\xC4\u1078\n\xC4\f\xC4\x0E\xC4\u107B\v\xC4\x03\xC4\x05\xC4\u107E\n\xC4" +
		"\x05\xC4\u1080\n\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x07\xC5\u1086\n\xC5" +
		"\f\xC5\x0E\xC5\u1089\v\xC5\x03\xC5\x03\xC5\x03\xC6\x03\xC6\x05\xC6\u108F" +
		"\n\xC6\x03\xC6\x03\xC6\x03\xC6\x05\xC6\u1094\n\xC6\x03\xC6\x05\xC6\u1097" +
		"\n\xC6\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u109D\n\xC7\x03\xC7\x05" +
		"\xC7\u10A0\n\xC7\x03\xC8\x03\xC8\x05\xC8\u10A4\n\xC8\x03\xC8\x03\xC8\x03" +
		"\xC8\x07\xC8\u10A9\n\xC8\f\xC8\x0E\xC8\u10AC\v\xC8\x07\xC8\u10AE\n\xC8" +
		"\f\xC8\x0E\xC8\u10B1\v\xC8\x03\xC8\x07\xC8\u10B4\n\xC8\f\xC8\x0E\xC8\u10B7" +
		"\v\xC8\x07\xC8\u10B9\n\xC8\f\xC8\x0E\xC8\u10BC\v\xC8\x03\xC8\x03\xC8\x03" +
		"\xC8\x03\xC8\x03\xC8\x07\xC8\u10C3\n\xC8\f\xC8\x0E\xC8\u10C6\v\xC8\x03" +
		"\xC8\x05\xC8\u10C9\n\xC8\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x06\xC9" +
		"\u10D0\n\xC9\r\xC9\x0E\xC9\u10D1\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9" +
		"\x03\xC9\x03\xC9\x07\xC9\u10DB\n\xC9\f\xC9\x0E\xC9\u10DE\v\xC9\x03\xC9" +
		"\x05\xC9\u10E1\n\xC9\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCB\x03\xCB\x03" +
		"\xCB\x03\xCB\x06\xCB\u10EB\n\xCB\r\xCB\x0E\xCB\u10EC\x03\xCB\x03\xCB\x05" +
		"\xCB\u10F1\n\xCB\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x06\xCC\u10F7\n\xCC\r" +
		"\xCC\x0E\xCC\u10F8\x03\xCC\x03\xCC\x03\xCD\x03\xCD\x07\xCD\u10FF\n\xCD" +
		"\f\xCD\x0E\xCD\u1102\v\xCD\x03\xCD\x05\xCD\u1105\n\xCD\x03\xCD\x03\xCD" +
		"\x03\xCD\x07\xCD\u110A\n\xCD\f\xCD\x0E\xCD\u110D\v\xCD\x07\xCD\u110F\n" +
		"\xCD\f\xCD\x0E\xCD\u1112\v\xCD\x03\xCD\x07\xCD\u1115\n\xCD\f\xCD\x0E\xCD" +
		"\u1118\v\xCD\x07\xCD\u111A\n\xCD\f\xCD\x0E\xCD\u111D\v\xCD\x03\xCD\x03" +
		"\xCD\x03\xCD\x07\xCD\u1122\n\xCD\f\xCD\x0E\xCD\u1125\v\xCD\x03\xCD\x05" +
		"\xCD\u1128\n\xCD\x03\xCD\x05\xCD\u112B\n\xCD\x03\xCE\x03\xCE\x06\xCE\u112F" +
		"\n\xCE\r\xCE\x0E\xCE\u1130\x03\xCE\x03\xCE\x03\xCF\x03\xCF\x03\xCF\x06" +
		"\xCF\u1138\n\xCF\r\xCF\x0E\xCF\u1139\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03" +
		"\xCF\x05\xCF\u1141\n\xCF\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0" +
		"\x03\xD0\x03\xD0\x05\xD0\u114B\n\xD0\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03" +
		"\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x05\xD1\u1156\n\xD1\x03\xD2\x03\xD2" +
		"\x03\xD2\x03\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD4\x03\xD4\x07\xD4" +
		"\u1162\n\xD4\f\xD4\x0E\xD4\u1165\v\xD4\x03";
	private static readonly _serializedATNSegment2: string =
		"\xD4\x07\xD4\u1168\n\xD4\f\xD4\x0E\xD4\u116B\v\xD4\x03\xD5\x03\xD5\x03" +
		"\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x07\xD5\u1174\n\xD5\f\xD5\x0E\xD5" +
		"\u1177\v\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x07\xD5\u117D\n\xD5\f\xD5" +
		"\x0E\xD5\u1180\v\xD5\x03\xD5\x05\xD5\u1183\n\xD5\x03\xD6\x03\xD6\x03\xD6" +
		"\x03\xD6\x06\xD6\u1189\n\xD6\r\xD6\x0E\xD6\u118A\x03\xD6\x03\xD6\x03\xD6" +
		"\x03\xD6\x03\xD6\x07\xD6\u1192\n\xD6\f\xD6\x0E\xD6\u1195\v\xD6\x03\xD6" +
		"\x05\xD6\u1198\n\xD6\x03\xD7\x03\xD7\x05\xD7\u119C\n\xD7\x03\xD7\x03\xD7" +
		"\x03\xD8\x03\xD8\x05\xD8\u11A2\n\xD8\x06\xD8\u11A4\n\xD8\r\xD8\x0E\xD8" +
		"\u11A5\x03\xD9\x03\xD9\x06\xD9\u11AA\n\xD9\r\xD9\x0E\xD9\u11AB\x03\xD9" +
		"\x05\xD9\u11AF\n\xD9\x03\xD9\x03\xD9\x06\xD9\u11B3\n\xD9\r\xD9\x0E\xD9" +
		"\u11B4\x03\xD9\x05\xD9\u11B8\n\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03" +
		"\xD9\x03\xD9\x07\xD9\u11C0\n\xD9\f\xD9\x0E\xD9\u11C3\v\xD9\x03\xD9\x03" +
		"\xD9\x07\xD9\u11C7\n\xD9\f\xD9\x0E\xD9\u11CA\v\xD9\x03\xD9\x03\xD9\x07" +
		"\xD9\u11CE\n\xD9\f\xD9\x0E\xD9\u11D1\v\xD9\x03\xD9\x03\xD9\x05\xD9\u11D5" +
		"\n\xD9\x03\xDA\x03\xDA\x03\xDB\x03\xDB\x03\xDC\x03\xDC\x03\xDD\x03\xDD" +
		"\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD" +
		"\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD" +
		"\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD" +
		"\x06\xDD\u11FA\n\xDD\r\xDD\x0E\xDD\u11FB\x03\xDE\x03\xDE\x03\xDF\x03\xDF" +
		"\x03\xDF\b\u05AC\u05B5\u0FF3\u1006\u1055\u117E\x02\x02\xE0\x02\x02\x04" +
		"\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02" +
		"\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02." +
		"\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02" +
		"J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02" +
		"f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80" +
		"\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92" +
		"\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4" +
		"\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6" +
		"\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8" +
		"\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA" +
		"\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC" +
		"\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE" +
		"\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C" +
		"\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A" +
		"\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128" +
		"\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136" +
		"\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144" +
		"\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152" +
		"\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160" +
		"\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E" +
		"\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C" +
		"\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A" +
		"\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198" +
		"\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6" +
		"\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4" +
		"\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\x02\x1C\x03\x02\t\n\x03\x02" +
		"\u0108\u0109\x03\x02\x99\x9A\x03\x02\xC4\xC5\x03\x02\xAE\xB0\x03\x02\xA7" +
		"\xA8\x03\x02\x8E\x8E\b\x02\xDC\xDD\xDF\xE0\xEE\xF5\xFF\u0102\u0108\u0109" +
		"\u010B\u010D\x05\x02\xDB\xDB\xF0\xF0\xFF\xFF\x04\x02\xDC\xDC\xF1\xF1\x05" +
		"\x02\xDD\xDD\xF2\xF2\u0101\u0101\x04\x02\xDE\xDE\xF3\xF3\x04\x02\xDF\xDF" +
		"\xF4\xF4\x05\x02\xE0\xE0\xF5\xF5\u0102\u0102\x04\x02\xE7\xE7\xF9\xF9\x05" +
		"\x02\xE9\xE9\xFA\xFA\u0106\u0106\x04\x02\xEA\xEA\xFB\xFB\x04\x02\xEB\xEB" +
		"\xFC\xFC\x05\x02\xEC\xEC\xFD\xFD\u0107\u0107\x03\x02\xBC\xBD\x04\x02\xCB" +
		"\xCB\xCE\xD1\x03\x02\x9C\x9C\x04\x02\x9D\x9D\x9F\x9F\x03\x02\xA9\xAA\x03" +
		"\x02\xA2\xA2\x03\x02\xA3\xA3\x02\u148D\x02\u01CB\x03\x02\x02\x02\x04\u01D9" +
		"\x03\x02\x02\x02\x06\u0261\x03\x02\x02\x02\b\u0263\x03\x02\x02\x02\n\u0273" +
		"\x03\x02\x02\x02\f\u0290\x03\x02\x02\x02\x0E\u029B\x03\x02\x02\x02\x10" +
		"\u02A5\x03\x02\x02\x02\x12\u02B6\x03\x02\x02\x02\x14\u02C8\x03\x02\x02" +
		"\x02\x16\u02CB\x03\x02\x02\x02\x18\u02E1\x03\x02\x02\x02\x1A\u02F7\x03" +
		"\x02\x02\x02\x1C\u030B\x03\x02\x02\x02\x1E\u031F\x03\x02\x02\x02 \u0333" +
		"\x03\x02\x02\x02\"\u0347\x03\x02\x02\x02$\u035B\x03\x02\x02\x02&\u036F" +
		"\x03\x02\x02\x02(\u0383\x03\x02\x02\x02*\u0397\x03\x02\x02\x02,\u03AB" +
		"\x03\x02\x02\x02.\u03BF\x03\x02\x02\x020\u03D3\x03\x02\x02\x022\u03E7" +
		"\x03\x02\x02\x024\u03FB\x03\x02\x02\x026\u040F\x03\x02\x02\x028\u0423" +
		"\x03\x02\x02\x02:\u0437\x03\x02\x02\x02<\u045A\x03\x02\x02\x02>\u047D" +
		"\x03\x02\x02\x02@\u04A0\x03\x02\x02\x02B\u04B4\x03\x02\x02\x02D\u04C4" +
		"\x03\x02\x02\x02F\u04CF\x03\x02\x02\x02H\u04D3\x03\x02\x02\x02J\u04DC" +
		"\x03\x02\x02\x02L\u0500\x03\x02\x02\x02N\u0502\x03\x02\x02\x02P\u050D" +
		"\x03\x02\x02\x02R\u051C\x03\x02\x02\x02T\u0527\x03\x02\x02\x02V\u0532" +
		"\x03\x02\x02\x02X\u053C\x03\x02\x02\x02Z\u056D\x03\x02\x02\x02\\\u0579" +
		"\x03\x02\x02\x02^\u057B\x03\x02\x02\x02`\u057D\x03\x02\x02\x02b\u05BA" +
		"\x03\x02\x02\x02d\u05BC\x03\x02\x02\x02f\u05E4\x03\x02\x02\x02h\u05F2" +
		"\x03\x02\x02\x02j\u0602\x03\x02\x02\x02l\u0629\x03\x02\x02\x02n\u064E" +
		"\x03\x02\x02\x02p\u0673\x03\x02\x02\x02r\u0698\x03\x02\x02\x02t\u06C5" +
		"\x03\x02\x02\x02v\u06F1\x03\x02\x02\x02x\u0705\x03\x02\x02\x02z\u0719" +
		"\x03\x02\x02\x02|\u072D\x03\x02\x02\x02~\u0741\x03\x02\x02\x02\x80\u0755" +
		"\x03\x02\x02\x02\x82\u0769\x03\x02\x02\x02\x84\u077D\x03\x02\x02\x02\x86" +
		"\u0791\x03\x02\x02\x02\x88\u07A5\x03\x02\x02\x02\x8A\u07B9\x03\x02\x02" +
		"\x02\x8C\u07CD\x03\x02\x02\x02\x8E\u07E1\x03\x02\x02\x02\x90\u07F5\x03" +
		"\x02\x02\x02\x92\u0809\x03\x02\x02\x02\x94\u081D\x03\x02\x02\x02\x96\u0831" +
		"\x03\x02\x02\x02\x98\u0845\x03\x02\x02\x02\x9A\u0859\x03\x02\x02\x02\x9C" +
		"\u086D\x03\x02\x02\x02\x9E\u0881\x03\x02\x02\x02\xA0\u0895\x03\x02\x02" +
		"\x02\xA2\u08A9\x03\x02\x02\x02\xA4\u08BD\x03\x02\x02\x02\xA6\u08D1\x03" +
		"\x02\x02\x02\xA8\u08E5\x03\x02\x02\x02\xAA\u08F9\x03\x02\x02\x02\xAC\u090D" +
		"\x03\x02\x02\x02\xAE\u0921\x03\x02\x02\x02\xB0\u0935\x03\x02\x02\x02\xB2" +
		"\u0949\x03\x02\x02\x02\xB4\u095D\x03\x02\x02\x02\xB6\u0971\x03\x02\x02" +
		"\x02\xB8\u0985\x03\x02\x02\x02\xBA\u0999\x03\x02\x02\x02\xBC\u09AD\x03" +
		"\x02\x02\x02\xBE\u09C1\x03\x02\x02\x02\xC0\u09D5\x03\x02\x02\x02\xC2\u09E9" +
		"\x03\x02\x02\x02\xC4\u09FD\x03\x02\x02\x02\xC6\u0A11\x03\x02\x02\x02\xC8" +
		"\u0A25\x03\x02\x02\x02\xCA\u0A39\x03\x02\x02\x02\xCC\u0A4D\x03\x02\x02" +
		"\x02\xCE\u0A61\x03\x02\x02\x02\xD0\u0A75\x03\x02\x02\x02\xD2\u0A89\x03" +
		"\x02\x02\x02\xD4\u0A9D\x03\x02\x02\x02\xD6\u0AB1\x03\x02\x02\x02\xD8\u0AC5" +
		"\x03\x02\x02\x02\xDA\u0AD9\x03\x02\x02\x02\xDC\u0AED\x03\x02\x02\x02\xDE" +
		"\u0B01\x03\x02\x02\x02\xE0\u0B15\x03\x02\x02\x02\xE2\u0B29\x03\x02\x02" +
		"\x02\xE4\u0B3D\x03\x02\x02\x02\xE6\u0B51\x03\x02\x02\x02\xE8\u0B65\x03" +
		"\x02\x02\x02\xEA\u0B79\x03\x02\x02\x02\xEC\u0B8D\x03\x02\x02\x02\xEE\u0BA1" +
		"\x03\x02\x02\x02\xF0\u0BB5\x03\x02\x02\x02\xF2\u0BC9\x03\x02\x02\x02\xF4" +
		"\u0BDD\x03\x02\x02\x02\xF6\u0BF1\x03\x02\x02\x02\xF8\u0C05\x03\x02\x02" +
		"\x02\xFA\u0C19\x03\x02\x02\x02\xFC\u0C2D\x03\x02\x02\x02\xFE\u0C41\x03" +
		"\x02\x02\x02\u0100\u0C55\x03\x02\x02\x02\u0102\u0C69\x03\x02\x02\x02\u0104" +
		"\u0C7D\x03\x02\x02\x02\u0106\u0C91\x03\x02\x02\x02\u0108\u0CA5\x03\x02" +
		"\x02\x02\u010A\u0CB9\x03\x02\x02\x02\u010C\u0CCD\x03\x02\x02\x02\u010E" +
		"\u0CE1\x03\x02\x02\x02\u0110\u0CF5\x03\x02\x02\x02\u0112\u0D09\x03\x02" +
		"\x02\x02\u0114\u0D1D\x03\x02\x02\x02\u0116\u0D31\x03\x02\x02\x02\u0118" +
		"\u0D45\x03\x02\x02\x02\u011A\u0D59\x03\x02\x02\x02\u011C\u0D6D\x03\x02" +
		"\x02\x02\u011E\u0D81\x03\x02\x02\x02\u0120\u0D95\x03\x02\x02\x02\u0122" +
		"\u0DA9\x03\x02\x02\x02\u0124\u0DBD\x03\x02\x02\x02\u0126\u0DD1\x03\x02" +
		"\x02\x02\u0128\u0DFF\x03\x02\x02\x02\u012A\u0E03\x03\x02\x02\x02\u012C" +
		"\u0E3A\x03\x02\x02\x02\u012E\u0E40\x03\x02\x02\x02\u0130\u0E6A\x03\x02" +
		"\x02\x02\u0132\u0E8D\x03\x02\x02\x02\u0134\u0EB0\x03\x02\x02\x02\u0136" +
		"\u0ED3\x03\x02\x02\x02\u0138\u0F10\x03\x02\x02\x02\u013A\u0F14\x03\x02" +
		"\x02\x02\u013C\u0F1B\x03\x02\x02\x02\u013E\u0F26\x03\x02\x02\x02\u0140" +
		"\u0F31\x03\x02\x02\x02\u0142\u0F38\x03\x02\x02\x02\u0144\u0F48\x03\x02" +
		"\x02\x02\u0146\u0F4A\x03\x02\x02\x02\u0148\u0F4F\x03\x02\x02\x02\u014A" +
		"\u0F51\x03\x02\x02\x02\u014C\u0F53\x03\x02\x02\x02\u014E\u0F55\x03\x02" +
		"\x02\x02\u0150\u0F57\x03\x02\x02\x02\u0152\u0F59\x03\x02\x02\x02\u0154" +
		"\u0F5B\x03\x02\x02\x02\u0156\u0F5D\x03\x02\x02\x02\u0158\u0F5F\x03\x02" +
		"\x02\x02\u015A\u0F70\x03\x02\x02\x02\u015C\u0F72\x03\x02\x02\x02\u015E" +
		"\u0F7A\x03\x02\x02\x02\u0160\u0F7C\x03\x02\x02\x02\u0162\u0F86\x03\x02" +
		"\x02\x02\u0164\u0F90\x03\x02\x02\x02\u0166\u0F9D\x03\x02\x02\x02\u0168" +
		"\u0FA4\x03\x02\x02\x02\u016A\u0FAF\x03\x02\x02\x02\u016C\u0FB6\x03\x02" +
		"\x02\x02\u016E\u0FC0\x03\x02\x02\x02\u0170\u0FCB\x03\x02\x02\x02\u0172" +
		"\u0FE4\x03\x02\x02\x02\u0174\u0FF7\x03\x02\x02\x02\u0176\u100A\x03\x02" +
		"\x02\x02\u0178\u100C\x03\x02\x02\x02\u017A\u1013\x03\x02\x02\x02\u017C" +
		"\u1027\x03\x02\x02\x02\u017E\u1038\x03\x02\x02\x02\u0180\u1059\x03\x02" +
		"\x02\x02\u0182\u105B\x03\x02\x02\x02\u0184\u105F\x03\x02\x02\x02\u0186" +
		"\u107F\x03\x02\x02\x02\u0188\u1081\x03\x02\x02\x02\u018A\u1096\x03\x02" +
		"\x02\x02\u018C\u109F\x03\x02\x02\x02\u018E\u10C8\x03\x02\x02\x02\u0190" +
		"\u10E0\x03\x02\x02\x02\u0192\u10E2\x03\x02\x02\x02\u0194\u10E6\x03\x02" +
		"\x02\x02\u0196\u10F2\x03\x02\x02\x02\u0198\u112A\x03\x02\x02\x02\u019A" +
		"\u112C\x03\x02\x02\x02\u019C\u1140\x03\x02\x02\x02\u019E\u114A\x03\x02" +
		"\x02\x02\u01A0\u1155\x03\x02\x02\x02\u01A2\u1157\x03\x02\x02\x02\u01A4" +
		"\u115B\x03\x02\x02\x02\u01A6\u115F\x03\x02\x02\x02\u01A8\u1182\x03\x02" +
		"\x02\x02\u01AA\u1197\x03\x02\x02\x02\u01AC\u1199\x03\x02\x02\x02\u01AE" +
		"\u11A3\x03\x02\x02\x02\u01B0\u11D4\x03\x02\x02\x02\u01B2\u11D6\x03\x02" +
		"\x02\x02\u01B4\u11D8\x03\x02\x02\x02\u01B6\u11DA\x03\x02\x02\x02\u01B8" +
		"\u11F9\x03\x02\x02\x02\u01BA\u11FD\x03\x02\x02\x02\u01BC\u11FF\x03\x02" +
		"\x02\x02\u01BE\u01C8\x05\x04\x03\x02\u01BF\u01C1\x07\x04\x02\x02\u01C0" +
		"\u01BF\x03\x02\x02\x02\u01C1\u01C4\x03\x02\x02\x02\u01C2\u01C0\x03\x02" +
		"\x02\x02\u01C2\u01C3\x03\x02\x02\x02\u01C3\u01C5\x03\x02\x02\x02\u01C4" +
		"\u01C2\x03\x02\x02\x02\u01C5\u01C7\x07\xB5\x02\x02\u01C6\u01C2\x03\x02" +
		"\x02\x02\u01C7\u01CA\x03\x02\x02\x02\u01C8\u01C6\x03\x02\x02\x02\u01C8" +
		"\u01C9\x03\x02\x02\x02\u01C9\u01CC\x03\x02\x02\x02\u01CA\u01C8\x03\x02" +
		"\x02\x02\u01CB\u01BE\x03\x02\x02\x02\u01CC\u01CD\x03\x02\x02\x02\u01CD" +
		"\u01CB\x03\x02\x02\x02\u01CD\u01CE\x03\x02\x02\x02\u01CE\u01D2\x03\x02" +
		"\x02\x02\u01CF\u01D1\x07\xB5\x02\x02\u01D0\u01CF\x03\x02\x02\x02\u01D1" +
		"\u01D4\x03\x02\x02\x02\u01D2\u01D0\x03\x02\x02\x02\u01D2\u01D3\x03\x02" +
		"\x02\x02\u01D3\u01D5\x03\x02\x02\x02\u01D4\u01D2\x03\x02\x02\x02\u01D5" +
		"\u01D6\x07\x02\x02\x03\u01D6\x03\x03\x02\x02\x02\u01D7\u01DA\x05\x06\x04" +
		"\x02\u01D8\u01DA\x05\u01AE\xD8\x02\u01D9\u01D7\x03\x02\x02\x02\u01D9\u01D8" +
		"\x03\x02\x02\x02\u01DA\x05\x03\x02\x02\x02\u01DB\u0262\x05\b\x05\x02\u01DC" +
		"\u0262\x05\n\x06\x02\u01DD\u0262\x05\x0E\b\x02\u01DE\u0262\x05\f\x07\x02" +
		"\u01DF\u0262\x05\x12\n\x02\u01E0\u0262\x05\x10\t\x02\u01E1\u0262\x05\u01AC" +
		"\xD7\x02\u01E2\u0262\x05\x16\f\x02\u01E3\u0262\x05\x18\r\x02\u01E4\u0262" +
		"\x05X-\x02\u01E5\u0262\x05`1\x02\u01E6\u0262\x05d3\x02\u01E7\u0262\x05" +
		"j6\x02\u01E8\u0262\x05n8\x02\u01E9\u0262\x05l7\x02\u01EA\u0262\x05p9\x02" +
		"\u01EB\u0262\x05r:\x02\u01EC\u0262\x05t;\x02\u01ED\u0262\x05v<\x02\u01EE" +
		"\u0262\x05x=\x02\u01EF\u0262\x05z>\x02\u01F0\u0262\x05|?\x02\u01F1\u0262" +
		"\x05~@\x02\u01F2\u0262\x05\x80A\x02\u01F3\u0262\x05\x82B\x02\u01F4\u0262" +
		"\x05\x86D\x02\u01F5\u0262\x05\x88E\x02\u01F6\u0262\x05\x8AF\x02\u01F7" +
		"\u0262\x05\x8CG\x02\u01F8\u0262\x05\x9CO\x02\u01F9\u0262\x05\x8EH\x02" +
		"\u01FA\u0262\x05\x90I\x02\u01FB\u0262\x05\x92J\x02\u01FC\u0262\x05\x94" +
		"K\x02\u01FD\u0262\x05\x96L\x02\u01FE\u0262\x05\x98M\x02\u01FF\u0262\x05" +
		"\x9AN\x02\u0200\u0262\x05\x9EP\x02\u0201\u0262\x05\x84C\x02\u0202\u0262" +
		"\x05\u0124\x93\x02\u0203\u0262\x05\u0126\x94\x02\u0204\u0262\x05\u0136" +
		"\x9C\x02\u0205\u0262\x05\u012A\x96\x02\u0206\u0262\x05\u012E\x98\x02\u0207" +
		"\u0262\x05\u0130\x99\x02\u0208\u0262\x05\u0132\x9A\x02\u0209\u0262\x05" +
		"\u0134\x9B\x02\u020A\u0262\x05\u019A\xCE\x02\u020B\u0262\x05\xA0Q\x02" +
		"\u020C\u0262\x05\xA2R\x02\u020D\u0262\x05\x1A\x0E\x02\u020E\u0262\x05" +
		"\x1C\x0F\x02\u020F\u0262\x05\x1E\x10\x02\u0210\u0262\x05 \x11\x02\u0211" +
		"\u0262\x05\"\x12\x02\u0212\u0262\x05$\x13\x02\u0213\u0262\x05&\x14\x02" +
		"\u0214\u0262\x05(\x15\x02\u0215\u0262\x05*\x16\x02\u0216\u0262\x05,\x17" +
		"\x02\u0217\u0262\x05.\x18\x02\u0218\u0262\x050\x19\x02\u0219\u0262\x05" +
		"2\x1A\x02\u021A\u0262\x054\x1B\x02\u021B\u0262\x056\x1C\x02\u021C\u0262" +
		"\x058\x1D\x02\u021D\u0262\x05:\x1E\x02\u021E\u0262\x05<\x1F\x02\u021F" +
		"\u0262\x05> \x02\u0220\u0262\x05@!\x02\u0221\u0262\x05\xA4S\x02\u0222" +
		"\u0262\x05\xA6T\x02\u0223\u0262\x05\xA8U\x02\u0224\u0262\x05\xAAV\x02" +
		"\u0225\u0262\x05\xACW\x02\u0226\u0262\x05\xAEX\x02\u0227\u0262\x05\xB0" +
		"Y\x02\u0228\u0262\x05\xB2Z\x02\u0229\u0262\x05\xB4[\x02\u022A\u0262\x05" +
		"\xB6\\\x02\u022B\u0262\x05\xB8]\x02\u022C\u0262\x05\xBA^\x02\u022D\u0262" +
		"\x05\xBC_\x02\u022E\u0262\x05\xBE`\x02\u022F\u0262\x05\xC0a\x02\u0230" +
		"\u0262\x05\xC2b\x02\u0231\u0262\x05\xC6d\x02\u0232\u0262\x05\xC8e\x02" +
		"\u0233\u0262\x05\xCAf\x02\u0234\u0262\x05\xCCg\x02\u0235\u0262\x05\xC4" +
		"c\x02\u0236\u0262\x05\xCEh\x02\u0237\u0262\x05\xD0i\x02\u0238\u0262\x05" +
		"\xD2j\x02\u0239\u0262\x05\xD4k\x02\u023A\u0262\x05\xD6l\x02\u023B\u0262" +
		"\x05\xD8m\x02\u023C\u0262\x05\xDAn\x02\u023D\u0262\x05\xDCo\x02\u023E" +
		"\u0262\x05\xDEp\x02\u023F\u0262\x05\xE0q\x02\u0240\u0262\x05\xE2r\x02" +
		"\u0241\u0262\x05\xE4s\x02\u0242\u0262\x05\xE6t\x02\u0243\u0262\x05\xE8" +
		"u\x02\u0244\u0262\x05\xEAv\x02\u0245\u0262\x05\xECw\x02\u0246\u0262\x05" +
		"\xEEx\x02\u0247\u0262\x05\xF0y\x02\u0248\u0262\x05\xF2z\x02\u0249\u0262" +
		"\x05\xF4{\x02\u024A\u0262\x05\xF6|\x02\u024B\u0262\x05\xF8}\x02\u024C" +
		"\u0262\x05\xFA~\x02\u024D\u0262\x05\xFC\x7F\x02\u024E\u0262\x05\xFE\x80" +
		"\x02\u024F\u0262\x05\u0100\x81\x02\u0250\u0262\x05\u0102\x82\x02\u0251" +
		"\u0262\x05\u0104\x83\x02\u0252\u0262\x05\u0106\x84\x02\u0253\u0262\x05" +
		"\u0108\x85\x02\u0254\u0262\x05\u010A\x86\x02\u0255\u0262\x05\u010C\x87" +
		"\x02\u0256\u0262\x05\u010E\x88\x02\u0257\u0262\x05\u0110\x89\x02\u0258" +
		"\u0262\x05\u0112\x8A\x02\u0259\u0262\x05\u0114\x8B\x02\u025A\u0262\x05" +
		"\u0116\x8C\x02\u025B\u0262\x05\u0118\x8D\x02\u025C\u0262\x05\u011A\x8E" +
		"\x02\u025D\u0262\x05\u011C\x8F\x02\u025E\u0262\x05\u011E\x90\x02\u025F" +
		"\u0262\x05\u0120\x91\x02\u0260\u0262\x05\u0122\x92\x02\u0261\u01DB\x03" +
		"\x02\x02\x02\u0261\u01DC\x03\x02\x02\x02\u0261\u01DD\x03\x02\x02\x02\u0261" +
		"\u01DE\x03\x02\x02\x02\u0261\u01DF\x03\x02\x02\x02\u0261\u01E0\x03\x02" +
		"\x02\x02\u0261\u01E1\x03\x02\x02\x02\u0261\u01E2\x03\x02\x02\x02\u0261" +
		"\u01E3\x03\x02\x02\x02\u0261\u01E4\x03\x02\x02\x02\u0261\u01E5\x03\x02" +
		"\x02\x02\u0261\u01E6\x03\x02\x02\x02\u0261\u01E7\x03\x02\x02\x02\u0261" +
		"\u01E8\x03\x02\x02\x02\u0261\u01E9\x03\x02\x02\x02\u0261\u01EA\x03\x02" +
		"\x02\x02\u0261\u01EB\x03\x02\x02\x02\u0261\u01EC\x03\x02\x02\x02\u0261" +
		"\u01ED\x03\x02\x02\x02\u0261\u01EE\x03\x02\x02\x02\u0261\u01EF\x03\x02" +
		"\x02\x02\u0261\u01F0\x03\x02\x02\x02\u0261\u01F1\x03\x02\x02\x02\u0261" +
		"\u01F2\x03\x02\x02\x02\u0261\u01F3\x03\x02\x02\x02\u0261\u01F4\x03\x02" +
		"\x02\x02\u0261\u01F5\x03\x02\x02\x02\u0261\u01F6\x03\x02\x02\x02\u0261" +
		"\u01F7\x03\x02\x02\x02\u0261\u01F8\x03\x02\x02\x02\u0261\u01F9\x03\x02" +
		"\x02\x02\u0261\u01FA\x03\x02\x02\x02\u0261\u01FB\x03\x02\x02\x02\u0261" +
		"\u01FC\x03\x02\x02\x02\u0261\u01FD\x03\x02\x02\x02\u0261\u01FE\x03\x02" +
		"\x02\x02\u0261\u01FF\x03\x02\x02\x02\u0261\u0200\x03\x02\x02\x02\u0261" +
		"\u0201\x03\x02\x02\x02\u0261\u0202\x03\x02\x02\x02\u0261\u0203\x03\x02" +
		"\x02\x02\u0261\u0204\x03\x02\x02\x02\u0261\u0205\x03\x02\x02\x02\u0261" +
		"\u0206\x03\x02\x02\x02\u0261\u0207\x03\x02\x02\x02\u0261\u0208\x03\x02" +
		"\x02\x02\u0261\u0209\x03\x02\x02\x02\u0261\u020A\x03\x02\x02\x02\u0261" +
		"\u020B\x03\x02\x02\x02\u0261\u020C\x03\x02\x02\x02\u0261\u020D\x03\x02" +
		"\x02\x02\u0261\u020E\x03\x02\x02\x02\u0261\u020F\x03\x02\x02\x02\u0261" +
		"\u0210\x03\x02\x02\x02\u0261\u0211\x03\x02\x02\x02\u0261\u0212\x03\x02" +
		"\x02\x02\u0261\u0213\x03\x02\x02\x02\u0261\u0214\x03\x02\x02\x02\u0261" +
		"\u0215\x03\x02\x02\x02\u0261\u0216\x03\x02\x02\x02\u0261\u0217\x03\x02" +
		"\x02\x02\u0261\u0218\x03\x02\x02\x02\u0261\u0219\x03\x02\x02\x02\u0261" +
		"\u021A\x03\x02\x02\x02\u0261\u021B\x03\x02\x02\x02\u0261\u021C\x03\x02" +
		"\x02\x02\u0261\u021D\x03\x02\x02\x02\u0261\u021E\x03\x02\x02\x02\u0261" +
		"\u021F\x03\x02\x02\x02\u0261\u0220\x03\x02\x02\x02\u0261\u0221\x03\x02" +
		"\x02\x02\u0261\u0222\x03\x02\x02\x02\u0261\u0223\x03\x02\x02\x02\u0261" +
		"\u0224\x03\x02\x02\x02\u0261\u0225\x03\x02\x02\x02\u0261\u0226\x03\x02" +
		"\x02\x02\u0261\u0227\x03\x02\x02\x02\u0261\u0228\x03\x02\x02\x02\u0261" +
		"\u0229\x03\x02\x02\x02\u0261\u022A\x03\x02\x02\x02\u0261\u022B\x03\x02" +
		"\x02\x02\u0261\u022C\x03\x02\x02\x02\u0261\u022D\x03\x02\x02\x02\u0261" +
		"\u022E\x03\x02\x02\x02\u0261\u022F\x03\x02\x02\x02\u0261\u0230\x03\x02" +
		"\x02\x02\u0261\u0231\x03\x02\x02\x02\u0261\u0232\x03\x02\x02\x02\u0261" +
		"\u0233\x03\x02\x02\x02\u0261\u0234\x03\x02\x02\x02\u0261\u0235\x03\x02" +
		"\x02\x02\u0261\u0236\x03\x02\x02\x02\u0261\u0237\x03\x02\x02\x02\u0261" +
		"\u0238\x03\x02\x02\x02\u0261\u0239\x03\x02\x02\x02\u0261\u023A\x03\x02" +
		"\x02\x02\u0261\u023B\x03\x02\x02\x02\u0261\u023C\x03\x02\x02\x02\u0261" +
		"\u023D\x03\x02\x02\x02\u0261\u023E\x03\x02\x02\x02\u0261\u023F\x03\x02" +
		"\x02\x02\u0261\u0240\x03\x02\x02\x02\u0261\u0241\x03\x02\x02\x02\u0261" +
		"\u0242\x03\x02\x02\x02\u0261\u0243\x03\x02\x02\x02\u0261\u0244\x03\x02" +
		"\x02\x02\u0261\u0245\x03\x02\x02\x02\u0261\u0246\x03\x02\x02\x02\u0261" +
		"\u0247\x03\x02\x02\x02\u0261\u0248\x03\x02\x02\x02\u0261\u0249\x03\x02" +
		"\x02\x02\u0261\u024A\x03\x02\x02\x02\u0261\u024B\x03\x02\x02\x02\u0261" +
		"\u024C\x03\x02\x02\x02\u0261\u024D\x03\x02\x02\x02\u0261\u024E\x03\x02" +
		"\x02\x02\u0261\u024F\x03\x02\x02\x02\u0261\u0250\x03\x02\x02\x02\u0261" +
		"\u0251\x03\x02\x02\x02\u0261\u0252\x03\x02\x02\x02\u0261\u0253\x03\x02" +
		"\x02\x02\u0261\u0254\x03\x02\x02\x02\u0261\u0255\x03\x02\x02\x02\u0261" +
		"\u0256\x03\x02\x02\x02\u0261\u0257\x03\x02\x02\x02\u0261\u0258\x03\x02" +
		"\x02\x02\u0261\u0259\x03\x02\x02\x02\u0261\u025A\x03\x02\x02\x02\u0261" +
		"\u025B\x03\x02\x02\x02\u0261\u025C\x03\x02\x02\x02\u0261\u025D\x03\x02" +
		"\x02\x02\u0261\u025E\x03\x02\x02\x02\u0261\u025F\x03\x02\x02\x02\u0261" +
		"\u0260\x03\x02\x02\x02\u0262\x07\x03\x02\x02\x02\u0263\u0265\x07\x05\x02" +
		"\x02\u0264\u0266\x05\u013C\x9F\x02\u0265\u0264\x03\x02\x02\x02\u0265\u0266" +
		"\x03\x02\x02\x02\u0266\u0267\x03\x02\x02\x02\u0267\u026F\x07\x9C\x02\x02" +
		"\u0268\u026A\x07\xB5\x02\x02\u0269\u0268\x03\x02\x02\x02\u026A\u026D\x03" +
		"\x02\x02\x02\u026B\u0269\x03\x02\x02\x02\u026B\u026C\x03\x02\x02\x02\u026C" +
		"\u026E\x03\x02\x02\x02\u026D\u026B\x03\x02\x02\x02\u026E\u0270\x05L\'" +
		"\x02\u026F\u026B\x03\x02\x02\x02\u0270\u0271\x03\x02\x02\x02\u0271\u026F" +
		"\x03\x02\x02\x02\u0271\u0272\x03\x02\x02\x02\u0272\t\x03\x02\x02\x02\u0273" +
		"\u0275\x07\x06\x02\x02\u0274\u0276\x05\u013C\x9F\x02\u0275\u0274\x03\x02" +
		"\x02\x02\u0275\u0276\x03\x02\x02\x02\u0276\u0277\x03\x02\x02\x02\u0277" +
		"\u027B\x07\x9C\x02\x02\u0278\u027A\x07\xB5\x02\x02\u0279\u0278\x03\x02" +
		"\x02\x02\u027A\u027D\x03\x02\x02\x02\u027B\u0279\x03\x02\x02\x02\u027B" +
		"\u027C\x03\x02\x02\x02\u027C\u0281\x03\x02\x02\x02\u027D\u027B\x03\x02" +
		"\x02\x02\u027E\u027F\x05\u01AC\xD7\x02\u027F\u0280\x07\xB5\x02\x02\u0280" +
		"\u0282\x03\x02\x02\x02\u0281\u027E\x03\x02\x02\x02\u0281\u0282\x03\x02" +
		"\x02\x02\u0282\u0283\x03\x02\x02\x02\u0283\u028D\x05^0\x02\u0284\u0286" +
		"\x07\xB5\x02\x02\u0285\u0284\x03\x02\x02\x02\u0286\u0289\x03\x02\x02\x02" +
		"\u0287\u0285\x03\x02\x02\x02\u0287\u0288\x03\x02\x02\x02\u0288\u028A\x03" +
		"\x02\x02\x02\u0289\u0287\x03\x02\x02\x02\u028A\u028C\x05^0\x02\u028B\u0287" +
		"\x03\x02\x02\x02\u028C\u028F\x03\x02\x02\x02\u028D\u028B\x03\x02\x02\x02" +
		"\u028D\u028E\x03\x02\x02\x02\u028E\v\x03\x02\x02\x02\u028F\u028D\x03\x02" +
		"\x02\x02\u0290\u0292\x07\x07\x02\x02\u0291\u0293\x05\u01B0\xD9\x02\u0292" +
		"\u0291\x03\x02\x02\x02\u0292\u0293\x03\x02\x02\x02\u0293\u0294\x03\x02" +
		"\x02\x02\u0294\u0295\x07\x9C\x02\x02\u0295\u0299\x07\xB5\x02\x02\u0296" +
		"\u0297\x05\u01A6\xD4\x02\u0297\u0298\x07\xB5\x02\x02\u0298\u029A\x03\x02" +
		"\x02\x02\u0299\u0296\x03\x02\x02\x02\u0299\u029A\x03\x02\x02\x02\u029A" +
		"\r\x03\x02\x02\x02\u029B\u029C\x07\b\x02\x02\u029C\u02A0\x07\x9C\x02\x02" +
		"\u029D\u029F\x07\xB5\x02\x02\u029E\u029D\x03\x02\x02\x02\u029F\u02A2\x03" +
		"\x02\x02\x02\u02A0\u029E\x03\x02\x02\x02\u02A0\u02A1\x03\x02\x02\x02\u02A1" +
		"\u02A3\x03\x02\x02\x02\u02A2\u02A0\x03\x02\x02\x02\u02A3\u02A4\x05\x14" +
		"\v\x02\u02A4\x0F\x03\x02\x02\x02\u02A5\u02A7\t\x02\x02\x02\u02A6\u02A8" +
		"\t\x03\x02\x02\u02A7\u02A6\x03\x02\x02\x02\u02A7\u02A8\x03\x02\x02\x02" +
		"\u02A8\u02A9\x03\x02\x02\x02\u02A9\u02B3\x07\x9C\x02\x02\u02AA\u02AC\x07" +
		"\xB5\x02\x02\u02AB\u02AA\x03\x02\x02\x02\u02AC\u02AF\x03\x02\x02\x02\u02AD" +
		"\u02AB\x03\x02\x02\x02\u02AD\u02AE\x03\x02\x02\x02\u02AE\u02B0\x03\x02" +
		"\x02\x02\u02AF\u02AD\x03\x02\x02\x02\u02B0\u02B2\x05L\'\x02\u02B1\u02AD" +
		"\x03\x02\x02\x02\u02B2\u02B5\x03\x02\x02\x02\u02B3\u02B1\x03\x02\x02\x02" +
		"\u02B3\u02B4\x03\x02\x02\x02\u02B4\x11\x03\x02\x02\x02\u02B5\u02B3\x03" +
		"\x02\x02\x02\u02B6\u02B7\x07\v\x02\x02\u02B7\u02B8\x07\x9C\x02\x02\u02B8" +
		"\u02B9\x05\u018A\xC6\x02\u02B9\x13\x03\x02\x02\x02\u02BA\u02BC\x07\xB5" +
		"\x02\x02\u02BB\u02BA\x03\x02\x02\x02\u02BB\u02BC\x03\x02\x02\x02\u02BC" +
		"\u02C4\x03\x02\x02\x02\u02BD\u02C5\x05\u019C\xCF\x02\u02BE\u02C5\x05\u01A6" +
		"\xD4\x02\u02BF\u02C5\x05\u0186\xC4\x02\u02C0\u02C5\x05\u0198\xCD\x02\u02C1" +
		"\u02C5\x05\u018A\xC6\x02\u02C2\u02C5\x05\u01AC\xD7\x02\u02C3\u02C5\x05" +
		"\u0192\xCA\x02\u02C4\u02BD\x03\x02\x02\x02\u02C4\u02BE\x03\x02\x02\x02" +
		"\u02C4\u02BF\x03\x02\x02\x02\u02C4\u02C0\x03\x02\x02\x02\u02C4\u02C1\x03" +
		"\x02\x02\x02\u02C4\u02C2\x03\x02\x02\x02\u02C4\u02C3\x03\x02\x02\x02\u02C5" +
		"\u02C7\x03\x02\x02\x02\u02C6\u02BB\x03\x02\x02\x02\u02C7\u02CA\x03\x02" +
		"\x02\x02\u02C8\u02C6\x03\x02\x02\x02\u02C8\u02C9\x03\x02\x02\x02\u02C9" +
		"\x15\x03\x02\x02\x02\u02CA\u02C8\x03\x02\x02\x02\u02CB\u02CC\x07\f\x02" +
		"\x02\u02CC\u02D6\x07\x9C\x02\x02\u02CD\u02CE\x07\xB5\x02\x02\u02CE\u02D1" +
		"\t\x04\x02\x02\u02CF\u02D2\x05\u01B0\xD9\x02\u02D0\u02D2\x07\x9D\x02\x02" +
		"\u02D1\u02CF\x03\x02\x02\x02\u02D1\u02D0\x03\x02\x02\x02\u02D2\u02D3\x03" +
		"\x02\x02\x02\u02D3\u02D1\x03\x02\x02\x02\u02D3\u02D4\x03\x02\x02\x02\u02D4" +
		"\u02D5\x03\x02\x02\x02\u02D5\u02D7\x07\x9C\x02\x02\u02D6\u02CD\x03\x02" +
		"\x02\x02\u02D7\u02D8\x03\x02\x02\x02\u02D8\u02D6\x03\x02\x02\x02\u02D8" +
		"\u02D9\x03\x02\x02\x02\u02D9\u02DA\x03\x02\x02\x02\u02DA\u02DE\x07\xB5" +
		"\x02\x02\u02DB\u02DD\x05\u01AE\xD8\x02\u02DC\u02DB\x03\x02\x02\x02\u02DD" +
		"\u02E0\x03\x02\x02\x02\u02DE\u02DC\x03\x02\x02\x02\u02DE\u02DF\x03\x02" +
		"\x02\x02";
	private static readonly _serializedATNSegment3: string =
		"\u02DF\x17\x03\x02\x02\x02\u02E0\u02DE\x03\x02\x02\x02\u02E1\u02E2\x07" +
		"\r\x02\x02\u02E2\u02EC\x07\x9C\x02\x02\u02E3\u02E4\x07\xB5\x02\x02\u02E4" +
		"\u02E7\t\x04\x02\x02\u02E5\u02E8\x05\u01B0\xD9\x02\u02E6\u02E8\x07\x9D" +
		"\x02\x02\u02E7\u02E5\x03\x02\x02\x02\u02E7\u02E6\x03\x02\x02\x02\u02E8" +
		"\u02E9\x03\x02\x02\x02\u02E9\u02E7\x03\x02\x02\x02\u02E9\u02EA\x03\x02" +
		"\x02\x02\u02EA\u02EB\x03\x02\x02\x02\u02EB\u02ED\x07\x9C\x02\x02\u02EC" +
		"\u02E3\x03\x02\x02\x02\u02ED\u02EE\x03\x02\x02\x02\u02EE\u02EC\x03\x02" +
		"\x02\x02\u02EE\u02EF\x03\x02\x02\x02\u02EF\u02F0\x03\x02\x02\x02\u02F0" +
		"\u02F4\x07\xB5\x02\x02\u02F1\u02F3\x05\u01AE\xD8\x02\u02F2\u02F1\x03\x02" +
		"\x02\x02\u02F3\u02F6\x03\x02\x02\x02\u02F4\u02F2\x03\x02\x02\x02\u02F4" +
		"\u02F5\x03\x02\x02\x02\u02F5\x19\x03\x02\x02\x02\u02F6\u02F4\x03\x02\x02" +
		"\x02\u02F7\u02F8\x077\x02\x02\u02F8\u02F9\x05\u013C\x9F\x02\u02F9\u02FD" +
		"\x07\x9C\x02\x02\u02FA\u02FC\x07\xB5\x02\x02\u02FB\u02FA\x03\x02\x02\x02" +
		"\u02FC\u02FF\x03\x02\x02\x02\u02FD\u02FB\x03\x02\x02\x02\u02FD\u02FE\x03" +
		"\x02\x02\x02\u02FE\u0307\x03\x02\x02\x02\u02FF\u02FD\x03\x02\x02\x02\u0300" +
		"\u0304\x05L\'\x02\u0301\u0303\x07\xB5\x02\x02\u0302\u0301\x03\x02\x02" +
		"\x02\u0303\u0306\x03\x02\x02\x02\u0304\u0302\x03\x02\x02\x02\u0304\u0305" +
		"\x03\x02\x02\x02\u0305\u0308\x03\x02\x02\x02\u0306\u0304\x03\x02\x02\x02" +
		"\u0307\u0300\x03\x02\x02\x02\u0308\u0309\x03\x02\x02\x02\u0309\u0307\x03" +
		"\x02\x02\x02\u0309\u030A\x03\x02\x02\x02\u030A\x1B\x03\x02\x02\x02\u030B" +
		"\u030C\x078\x02\x02\u030C\u030D\x05\u013C\x9F\x02\u030D\u0311\x07\x9C" +
		"\x02\x02\u030E\u0310\x07\xB5\x02\x02\u030F\u030E\x03\x02\x02\x02\u0310" +
		"\u0313\x03\x02\x02\x02\u0311\u030F\x03\x02\x02\x02\u0311\u0312\x03\x02" +
		"\x02\x02\u0312\u031B\x03\x02\x02\x02\u0313\u0311\x03\x02\x02\x02\u0314" +
		"\u0318\x05L\'\x02\u0315\u0317\x07\xB5\x02\x02\u0316\u0315\x03\x02\x02" +
		"\x02\u0317\u031A\x03\x02\x02\x02\u0318\u0316\x03\x02\x02\x02\u0318\u0319" +
		"\x03\x02\x02\x02\u0319\u031C\x03\x02\x02\x02\u031A\u0318\x03\x02\x02\x02" +
		"\u031B\u0314\x03\x02\x02\x02\u031C\u031D\x03\x02\x02\x02\u031D\u031B\x03" +
		"\x02\x02\x02\u031D\u031E\x03\x02\x02\x02\u031E\x1D\x03\x02\x02\x02\u031F" +
		"\u0320\x079\x02\x02\u0320\u0321\x05\u013C\x9F\x02\u0321\u0325\x07\x9C" +
		"\x02\x02\u0322\u0324\x07\xB5\x02\x02\u0323\u0322\x03\x02\x02\x02\u0324" +
		"\u0327\x03\x02\x02\x02\u0325\u0323\x03\x02\x02\x02\u0325\u0326\x03\x02" +
		"\x02\x02\u0326\u032F\x03\x02\x02\x02\u0327\u0325\x03\x02\x02\x02\u0328" +
		"\u032C\x05L\'\x02\u0329\u032B\x07\xB5\x02\x02\u032A\u0329\x03\x02\x02" +
		"\x02\u032B\u032E\x03\x02\x02\x02\u032C\u032A\x03\x02\x02\x02\u032C\u032D" +
		"\x03\x02\x02\x02\u032D\u0330\x03\x02\x02\x02\u032E\u032C\x03\x02\x02\x02" +
		"\u032F\u0328\x03\x02\x02\x02\u0330\u0331\x03\x02\x02\x02\u0331\u032F\x03" +
		"\x02\x02\x02\u0331\u0332\x03\x02\x02\x02\u0332\x1F\x03\x02\x02\x02\u0333" +
		"\u0334\x07:\x02\x02\u0334\u0335\x05\u013C\x9F\x02\u0335\u0339\x07\x9C" +
		"\x02\x02\u0336\u0338\x07\xB5\x02\x02\u0337\u0336\x03\x02\x02\x02\u0338" +
		"\u033B\x03\x02\x02\x02\u0339\u0337\x03\x02\x02\x02\u0339\u033A\x03\x02" +
		"\x02\x02\u033A\u0343\x03\x02\x02\x02\u033B\u0339\x03\x02\x02\x02\u033C" +
		"\u0340\x05L\'\x02\u033D\u033F\x07\xB5\x02\x02\u033E\u033D\x03\x02\x02" +
		"\x02\u033F\u0342\x03\x02\x02\x02\u0340\u033E\x03\x02\x02\x02\u0340\u0341" +
		"\x03\x02\x02\x02\u0341\u0344\x03\x02\x02\x02\u0342\u0340\x03\x02\x02\x02" +
		"\u0343\u033C\x03\x02\x02\x02\u0344\u0345\x03\x02\x02\x02\u0345\u0343\x03" +
		"\x02\x02\x02\u0345\u0346\x03\x02\x02\x02\u0346!\x03\x02\x02\x02\u0347" +
		"\u0348\x07;\x02\x02\u0348\u0349\x05\u013C\x9F\x02\u0349\u034D\x07\x9C" +
		"\x02\x02\u034A\u034C\x07\xB5\x02\x02\u034B\u034A\x03\x02\x02\x02\u034C" +
		"\u034F\x03\x02\x02\x02\u034D\u034B\x03\x02\x02\x02\u034D\u034E\x03\x02" +
		"\x02\x02\u034E\u0357\x03\x02\x02\x02\u034F\u034D\x03\x02\x02\x02\u0350" +
		"\u0354\x05L\'\x02\u0351\u0353\x07\xB5\x02\x02\u0352\u0351\x03\x02\x02" +
		"\x02\u0353\u0356\x03\x02\x02\x02\u0354\u0352\x03\x02\x02\x02\u0354\u0355" +
		"\x03\x02\x02\x02\u0355\u0358\x03\x02\x02\x02\u0356\u0354\x03\x02\x02\x02" +
		"\u0357\u0350\x03\x02\x02\x02\u0358\u0359\x03\x02\x02\x02\u0359\u0357\x03" +
		"\x02\x02\x02\u0359\u035A\x03\x02\x02\x02\u035A#\x03\x02\x02\x02\u035B" +
		"\u035C\x07<\x02\x02\u035C\u035D\x05\u013C\x9F\x02\u035D\u0361\x07\x9C" +
		"\x02\x02\u035E\u0360\x07\xB5\x02\x02\u035F\u035E\x03\x02\x02\x02\u0360" +
		"\u0363\x03\x02\x02\x02\u0361\u035F\x03\x02\x02\x02\u0361\u0362\x03\x02" +
		"\x02\x02\u0362\u036B\x03\x02\x02\x02\u0363\u0361\x03\x02\x02\x02\u0364" +
		"\u0368\x05L\'\x02\u0365\u0367\x07\xB5\x02\x02\u0366\u0365\x03\x02\x02" +
		"\x02\u0367\u036A\x03\x02\x02\x02\u0368\u0366\x03\x02\x02\x02\u0368\u0369" +
		"\x03\x02\x02\x02\u0369\u036C\x03\x02\x02\x02\u036A\u0368\x03\x02\x02\x02" +
		"\u036B\u0364\x03\x02\x02\x02\u036C\u036D\x03\x02\x02\x02\u036D\u036B\x03" +
		"\x02\x02\x02\u036D\u036E\x03\x02\x02\x02\u036E%\x03\x02\x02\x02\u036F" +
		"\u0370\x07=\x02\x02\u0370\u0371\x05\u013C\x9F\x02\u0371\u0375\x07\x9C" +
		"\x02\x02\u0372\u0374\x07\xB5\x02\x02\u0373\u0372\x03\x02\x02\x02\u0374" +
		"\u0377\x03\x02\x02\x02\u0375\u0373\x03\x02\x02\x02\u0375\u0376\x03\x02" +
		"\x02\x02\u0376\u037F\x03\x02\x02\x02\u0377\u0375\x03\x02\x02\x02\u0378" +
		"\u037C\x05L\'\x02\u0379\u037B\x07\xB5\x02\x02\u037A\u0379\x03\x02\x02" +
		"\x02\u037B\u037E\x03\x02\x02\x02\u037C\u037A\x03\x02\x02\x02\u037C\u037D" +
		"\x03\x02\x02\x02\u037D\u0380\x03\x02\x02\x02\u037E\u037C\x03\x02\x02\x02" +
		"\u037F\u0378\x03\x02\x02\x02\u0380\u0381\x03\x02\x02\x02\u0381\u037F\x03" +
		"\x02\x02\x02\u0381\u0382\x03\x02\x02\x02\u0382\'\x03\x02\x02\x02\u0383" +
		"\u0384\x07>\x02\x02\u0384\u0385\x05\u013C\x9F\x02\u0385\u0389\x07\x9C" +
		"\x02\x02\u0386\u0388\x07\xB5\x02\x02\u0387\u0386\x03\x02\x02\x02\u0388" +
		"\u038B\x03\x02\x02\x02\u0389\u0387\x03\x02\x02\x02\u0389\u038A\x03\x02" +
		"\x02\x02\u038A\u0393\x03\x02\x02\x02\u038B\u0389\x03\x02\x02\x02\u038C" +
		"\u0390\x05L\'\x02\u038D\u038F\x07\xB5\x02\x02\u038E\u038D\x03\x02\x02" +
		"\x02\u038F\u0392\x03\x02\x02\x02\u0390\u038E\x03\x02\x02\x02\u0390\u0391" +
		"\x03\x02\x02\x02\u0391\u0394\x03\x02\x02\x02\u0392\u0390\x03\x02\x02\x02" +
		"\u0393\u038C\x03\x02\x02\x02\u0394\u0395\x03\x02\x02\x02\u0395\u0393\x03" +
		"\x02\x02\x02\u0395\u0396\x03\x02\x02\x02\u0396)\x03\x02\x02\x02\u0397" +
		"\u0398\x07?\x02\x02\u0398\u0399\x05\u013C\x9F\x02\u0399\u039D\x07\x9C" +
		"\x02\x02\u039A\u039C\x07\xB5\x02\x02\u039B\u039A\x03\x02\x02\x02\u039C" +
		"\u039F\x03\x02\x02\x02\u039D\u039B\x03\x02\x02\x02\u039D\u039E\x03\x02" +
		"\x02\x02\u039E\u03A7\x03\x02\x02\x02\u039F\u039D\x03\x02\x02\x02\u03A0" +
		"\u03A4\x05L\'\x02\u03A1\u03A3\x07\xB5\x02\x02\u03A2\u03A1\x03\x02\x02" +
		"\x02\u03A3\u03A6\x03\x02\x02\x02\u03A4\u03A2\x03\x02\x02\x02\u03A4\u03A5" +
		"\x03\x02\x02\x02\u03A5\u03A8\x03\x02\x02\x02\u03A6\u03A4\x03\x02\x02\x02" +
		"\u03A7\u03A0\x03\x02\x02\x02\u03A8\u03A9\x03\x02\x02\x02\u03A9\u03A7\x03" +
		"\x02\x02\x02\u03A9\u03AA\x03\x02\x02\x02\u03AA+\x03\x02\x02\x02\u03AB" +
		"\u03AC\x07@\x02\x02\u03AC\u03AD\x05\u013C\x9F\x02\u03AD\u03B1\x07\x9C" +
		"\x02\x02\u03AE\u03B0\x07\xB5\x02\x02\u03AF\u03AE\x03\x02\x02\x02\u03B0" +
		"\u03B3\x03\x02\x02\x02\u03B1\u03AF\x03\x02\x02\x02\u03B1\u03B2\x03\x02" +
		"\x02\x02\u03B2\u03BB\x03\x02\x02\x02\u03B3\u03B1\x03\x02\x02\x02\u03B4" +
		"\u03B8\x05L\'\x02\u03B5\u03B7\x07\xB5\x02\x02\u03B6\u03B5\x03\x02\x02" +
		"\x02\u03B7\u03BA\x03\x02\x02\x02\u03B8\u03B6\x03\x02\x02\x02\u03B8\u03B9" +
		"\x03\x02\x02\x02\u03B9\u03BC\x03\x02\x02\x02\u03BA\u03B8\x03\x02\x02\x02" +
		"\u03BB\u03B4\x03\x02\x02\x02\u03BC\u03BD\x03\x02\x02\x02\u03BD\u03BB\x03" +
		"\x02\x02\x02\u03BD\u03BE\x03\x02\x02\x02\u03BE-\x03\x02\x02\x02\u03BF" +
		"\u03C0\x07A\x02\x02\u03C0\u03C1\x05\u013C\x9F\x02\u03C1\u03C5\x07\x9C" +
		"\x02\x02\u03C2\u03C4\x07\xB5\x02\x02\u03C3\u03C2\x03\x02\x02\x02\u03C4" +
		"\u03C7\x03\x02\x02\x02\u03C5\u03C3\x03\x02\x02\x02\u03C5\u03C6\x03\x02" +
		"\x02\x02\u03C6\u03CF\x03\x02\x02\x02\u03C7\u03C5\x03\x02\x02\x02\u03C8" +
		"\u03CC\x05L\'\x02\u03C9\u03CB\x07\xB5\x02\x02\u03CA\u03C9\x03\x02\x02" +
		"\x02\u03CB\u03CE\x03\x02\x02\x02\u03CC\u03CA\x03\x02\x02\x02\u03CC\u03CD" +
		"\x03\x02\x02\x02\u03CD\u03D0\x03\x02\x02\x02\u03CE\u03CC\x03\x02\x02\x02" +
		"\u03CF\u03C8\x03\x02\x02\x02\u03D0\u03D1\x03\x02\x02\x02\u03D1\u03CF\x03" +
		"\x02\x02\x02\u03D1\u03D2\x03\x02\x02\x02\u03D2/\x03\x02\x02\x02\u03D3" +
		"\u03D4\x07B\x02\x02\u03D4\u03D5\x05\u013C\x9F\x02\u03D5\u03D9\x07\x9C" +
		"\x02\x02\u03D6\u03D8\x07\xB5\x02\x02\u03D7\u03D6\x03\x02\x02\x02\u03D8" +
		"\u03DB\x03\x02\x02\x02\u03D9\u03D7\x03\x02\x02\x02\u03D9\u03DA\x03\x02" +
		"\x02\x02\u03DA\u03E3\x03\x02\x02\x02\u03DB\u03D9\x03\x02\x02\x02\u03DC" +
		"\u03E0\x05L\'\x02\u03DD\u03DF\x07\xB5\x02\x02\u03DE\u03DD\x03\x02\x02" +
		"\x02\u03DF\u03E2\x03\x02\x02\x02\u03E0\u03DE\x03\x02\x02\x02\u03E0\u03E1" +
		"\x03\x02\x02\x02\u03E1\u03E4\x03\x02\x02\x02\u03E2\u03E0\x03\x02\x02\x02" +
		"\u03E3\u03DC\x03\x02\x02\x02\u03E4\u03E5\x03\x02\x02\x02\u03E5\u03E3\x03" +
		"\x02\x02\x02\u03E5\u03E6\x03\x02\x02\x02\u03E61\x03\x02\x02\x02\u03E7" +
		"\u03E8\x07C\x02\x02\u03E8\u03E9\x05\u013C\x9F\x02\u03E9\u03ED\x07\x9C" +
		"\x02\x02\u03EA\u03EC\x07\xB5\x02\x02\u03EB\u03EA\x03\x02\x02\x02\u03EC" +
		"\u03EF\x03\x02\x02\x02\u03ED\u03EB\x03\x02\x02\x02\u03ED\u03EE\x03\x02" +
		"\x02\x02\u03EE\u03F7\x03\x02\x02\x02\u03EF\u03ED\x03\x02\x02\x02\u03F0" +
		"\u03F4\x05L\'\x02\u03F1\u03F3\x07\xB5\x02\x02\u03F2\u03F1\x03\x02\x02" +
		"\x02\u03F3\u03F6\x03\x02\x02\x02\u03F4\u03F2\x03\x02\x02\x02\u03F4\u03F5" +
		"\x03\x02\x02\x02\u03F5\u03F8\x03\x02\x02\x02\u03F6\u03F4\x03\x02\x02\x02" +
		"\u03F7\u03F0\x03\x02\x02\x02\u03F8\u03F9\x03\x02\x02\x02\u03F9\u03F7\x03" +
		"\x02\x02\x02\u03F9\u03FA\x03\x02\x02\x02\u03FA3\x03\x02\x02\x02\u03FB" +
		"\u03FC\x07D\x02\x02\u03FC\u03FD\x05\u013C\x9F\x02\u03FD\u0401\x07\x9C" +
		"\x02\x02\u03FE\u0400\x07\xB5\x02\x02\u03FF\u03FE\x03\x02\x02\x02\u0400" +
		"\u0403\x03\x02\x02\x02\u0401\u03FF\x03\x02\x02\x02\u0401\u0402\x03\x02" +
		"\x02\x02\u0402\u040B\x03\x02\x02\x02\u0403\u0401\x03\x02\x02\x02\u0404" +
		"\u0408\x05L\'\x02\u0405\u0407\x07\xB5\x02\x02\u0406\u0405\x03\x02\x02" +
		"\x02\u0407\u040A\x03\x02\x02\x02\u0408\u0406\x03\x02\x02\x02\u0408\u0409" +
		"\x03\x02\x02\x02\u0409\u040C\x03\x02\x02\x02\u040A\u0408\x03\x02\x02\x02" +
		"\u040B\u0404\x03\x02\x02\x02\u040C\u040D\x03\x02\x02\x02\u040D\u040B\x03" +
		"\x02\x02\x02\u040D\u040E\x03\x02\x02\x02\u040E5\x03\x02\x02\x02\u040F" +
		"\u0410\x07E\x02\x02\u0410\u0411\x05\u013C\x9F\x02\u0411\u0415\x07\x9C" +
		"\x02\x02\u0412\u0414\x07\xB5\x02\x02\u0413\u0412\x03\x02\x02\x02\u0414" +
		"\u0417\x03\x02\x02\x02\u0415\u0413\x03\x02\x02\x02\u0415\u0416\x03\x02" +
		"\x02\x02\u0416\u041F\x03\x02\x02\x02\u0417\u0415\x03\x02\x02\x02\u0418" +
		"\u041C\x05L\'\x02\u0419\u041B\x07\xB5\x02\x02\u041A\u0419\x03\x02\x02" +
		"\x02\u041B\u041E\x03\x02\x02\x02\u041C\u041A\x03\x02\x02\x02\u041C\u041D" +
		"\x03\x02\x02\x02\u041D\u0420\x03\x02\x02\x02\u041E\u041C\x03\x02\x02\x02" +
		"\u041F\u0418\x03\x02\x02\x02\u0420\u0421\x03\x02\x02\x02\u0421\u041F\x03" +
		"\x02\x02\x02\u0421\u0422\x03\x02\x02\x02\u04227\x03\x02\x02\x02\u0423" +
		"\u0424\x07F\x02\x02\u0424\u0425\x05\u013C\x9F\x02\u0425\u0429\x07\x9C" +
		"\x02\x02\u0426\u0428\x07\xB5\x02\x02\u0427\u0426\x03\x02\x02\x02\u0428" +
		"\u042B\x03\x02\x02\x02\u0429\u0427\x03\x02\x02\x02\u0429\u042A\x03\x02" +
		"\x02\x02\u042A\u0433\x03\x02\x02\x02\u042B\u0429\x03\x02\x02\x02\u042C" +
		"\u0430\x05L\'\x02\u042D\u042F\x07\xB5\x02\x02\u042E\u042D\x03\x02\x02" +
		"\x02\u042F\u0432\x03\x02\x02\x02\u0430\u042E\x03\x02\x02\x02\u0430\u0431" +
		"\x03\x02\x02\x02\u0431\u0434\x03\x02\x02\x02\u0432\u0430\x03\x02\x02\x02" +
		"\u0433\u042C\x03\x02\x02\x02\u0434\u0435\x03\x02\x02\x02\u0435\u0433\x03" +
		"\x02\x02\x02\u0435\u0436\x03\x02\x02\x02\u04369\x03\x02\x02\x02\u0437" +
		"\u0438\x07\x84\x02\x02\u0438\u0439\x05\u013C\x9F\x02\u0439\u043D\x07\x9C" +
		"\x02\x02\u043A\u043C\x07\xB5\x02\x02\u043B\u043A\x03\x02\x02\x02\u043C" +
		"\u043F\x03\x02\x02\x02\u043D\u043B\x03\x02\x02\x02\u043D\u043E\x03\x02" +
		"\x02\x02\u043E\u0447\x03\x02\x02\x02\u043F\u043D\x03\x02\x02\x02\u0440" +
		"\u0444\x05L\'\x02\u0441\u0443\x07\xB5\x02\x02\u0442\u0441\x03\x02\x02" +
		"\x02\u0443\u0446\x03\x02\x02\x02\u0444\u0442\x03\x02\x02\x02\u0444\u0445" +
		"\x03\x02\x02\x02\u0445\u0448\x03\x02\x02\x02\u0446\u0444\x03\x02\x02\x02" +
		"\u0447\u0440\x03\x02\x02\x02\u0448\u0449\x03\x02\x02\x02\u0449\u0447\x03" +
		"\x02\x02\x02\u0449\u044A\x03\x02\x02\x02\u044A\u044C\x03\x02\x02\x02\u044B" +
		"\u044D\x05B\"\x02\u044C\u044B\x03\x02\x02\x02\u044D\u044E\x03\x02\x02" +
		"\x02\u044E\u044C\x03\x02\x02\x02\u044E\u044F\x03\x02\x02\x02\u044F\u0450" +
		"\x03\x02\x02\x02\u0450\u0452\x07\xA7\x02\x02\u0451\u0453\x05J&\x02\u0452" +
		"\u0451\x03\x02\x02\x02\u0452\u0453\x03\x02\x02\x02\u0453\u0457\x03\x02" +
		"\x02\x02\u0454\u0456\x07\xB5\x02\x02\u0455\u0454\x03\x02\x02\x02\u0456" +
		"\u0459\x03\x02\x02\x02\u0457\u0455\x03\x02\x02\x02\u0457\u0458\x03\x02" +
		"\x02\x02\u0458;\x03\x02\x02\x02\u0459\u0457\x03\x02\x02\x02\u045A\u045B" +
		"\x07\x85\x02\x02\u045B\u045C\x05\u013C\x9F\x02\u045C\u0460\x07\x9C\x02" +
		"\x02\u045D\u045F\x07\xB5\x02\x02\u045E\u045D\x03\x02\x02\x02\u045F\u0462" +
		"\x03\x02\x02\x02\u0460\u045E\x03\x02\x02\x02\u0460\u0461\x03\x02\x02\x02" +
		"\u0461\u046A\x03\x02\x02\x02\u0462\u0460\x03\x02\x02\x02\u0463\u0467\x05" +
		"L\'\x02\u0464\u0466\x07\xB5\x02\x02\u0465\u0464\x03\x02\x02\x02\u0466" +
		"\u0469\x03\x02\x02\x02\u0467\u0465\x03\x02\x02\x02\u0467\u0468\x03\x02" +
		"\x02\x02\u0468\u046B\x03\x02\x02\x02\u0469\u0467\x03\x02\x02\x02\u046A" +
		"\u0463\x03\x02\x02\x02\u046B\u046C\x03\x02\x02\x02\u046C\u046A\x03\x02" +
		"\x02\x02\u046C\u046D\x03\x02\x02\x02\u046D\u046F\x03\x02\x02\x02\u046E" +
		"\u0470\x05B\"\x02\u046F\u046E\x03\x02\x02\x02\u0470\u0471\x03\x02\x02" +
		"\x02\u0471\u046F\x03\x02\x02\x02\u0471\u0472\x03\x02\x02\x02\u0472\u0473" +
		"\x03\x02\x02\x02\u0473\u0475\x07\xA7\x02\x02\u0474\u0476\x05J&\x02\u0475" +
		"\u0474\x03\x02\x02\x02\u0475\u0476\x03\x02\x02\x02\u0476\u047A\x03\x02" +
		"\x02\x02\u0477\u0479\x07\xB5\x02\x02\u0478\u0477\x03\x02\x02\x02\u0479" +
		"\u047C\x03\x02\x02\x02\u047A\u0478\x03\x02\x02\x02\u047A\u047B\x03\x02" +
		"\x02\x02\u047B=\x03\x02\x02\x02\u047C\u047A\x03\x02\x02\x02\u047D\u047E" +
		"\x07\x86\x02\x02\u047E\u047F\x05\u013C\x9F\x02\u047F\u0483\x07\x9C\x02" +
		"\x02\u0480\u0482\x07\xB5\x02\x02\u0481\u0480\x03\x02\x02\x02\u0482\u0485" +
		"\x03\x02\x02\x02\u0483\u0481\x03\x02\x02\x02\u0483\u0484\x03\x02\x02\x02" +
		"\u0484\u048D\x03\x02\x02\x02\u0485\u0483\x03\x02\x02\x02\u0486\u048A\x05" +
		"L\'\x02\u0487\u0489\x07\xB5\x02\x02\u0488\u0487\x03\x02\x02\x02\u0489" +
		"\u048C\x03\x02\x02\x02\u048A\u0488\x03\x02\x02\x02\u048A\u048B\x03\x02" +
		"\x02\x02\u048B\u048E\x03\x02\x02\x02\u048C\u048A\x03\x02\x02\x02\u048D" +
		"\u0486\x03\x02\x02\x02\u048E\u048F\x03\x02\x02\x02\u048F\u048D\x03\x02" +
		"\x02\x02\u048F\u0490\x03\x02\x02\x02\u0490\u0492\x03\x02\x02\x02\u0491" +
		"\u0493\x05B\"\x02\u0492\u0491\x03\x02\x02\x02\u0493\u0494\x03\x02\x02" +
		"\x02\u0494\u0492\x03\x02\x02\x02\u0494\u0495\x03\x02\x02\x02\u0495\u0496" +
		"\x03\x02\x02\x02\u0496\u0498\x07\xA7\x02\x02\u0497\u0499\x05J&\x02\u0498" +
		"\u0497\x03\x02\x02\x02\u0498\u0499\x03\x02\x02\x02\u0499\u049D\x03\x02" +
		"\x02\x02\u049A\u049C\x07\xB5\x02\x02\u049B\u049A\x03\x02\x02\x02\u049C" +
		"\u049F\x03\x02\x02\x02\u049D\u049B\x03\x02\x02\x02\u049D\u049E\x03\x02" +
		"\x02\x02\u049E?\x03\x02\x02\x02\u049F\u049D\x03\x02\x02\x02\u04A0\u04A1" +
		"\x07\x87\x02\x02\u04A1\u04A2\x05\u013C\x9F\x02\u04A2\u04A6\x07\x9C\x02" +
		"\x02\u04A3\u04A5\x07\xB5\x02\x02\u04A4\u04A3\x03\x02\x02\x02\u04A5\u04A8" +
		"\x03\x02\x02\x02\u04A6\u04A4\x03\x02\x02\x02\u04A6\u04A7\x03\x02\x02\x02" +
		"\u04A7\u04B0\x03\x02\x02\x02\u04A8\u04A6\x03\x02\x02\x02\u04A9\u04AD\x05" +
		"L\'\x02\u04AA\u04AC\x07\xB5\x02\x02\u04AB\u04AA\x03\x02\x02\x02\u04AC" +
		"\u04AF\x03\x02\x02\x02\u04AD\u04AB\x03\x02\x02\x02\u04AD\u04AE\x03\x02" +
		"\x02\x02\u04AE\u04B1\x03\x02\x02\x02\u04AF\u04AD\x03\x02\x02\x02\u04B0" +
		"\u04A9\x03\x02\x02\x02\u04B1\u04B2\x03\x02\x02\x02\u04B2\u04B0\x03\x02" +
		"\x02\x02\u04B2\u04B3\x03\x02\x02\x02\u04B3A\x03\x02\x02\x02\u04B4\u04B5" +
		"\x07\xA7\x02\x02\u04B5\u04B6\x05D#\x02\u04B6C\x03\x02\x02\x02\u04B7\u04B9" +
		"\x07\xB5\x02\x02\u04B8\u04B7\x03\x02\x02\x02\u04B9\u04BC\x03\x02\x02\x02" +
		"\u04BA\u04B8\x03\x02\x02\x02\u04BA\u04BB\x03\x02\x02\x02\u04BB\u04BD\x03" +
		"\x02\x02\x02\u04BC\u04BA\x03\x02\x02\x02\u04BD\u04C1\x05F$\x02\u04BE\u04C0" +
		"\x07\xB5\x02\x02\u04BF\u04BE\x03\x02\x02\x02\u04C0\u04C3\x03\x02\x02\x02" +
		"\u04C1\u04BF\x03\x02\x02\x02\u04C1\u04C2\x03\x02\x02\x02\u04C2\u04C5\x03" +
		"\x02\x02\x02\u04C3\u04C1\x03\x02\x02\x02\u04C4\u04BA\x03\x02\x02\x02\u04C5" +
		"\u04C6\x03\x02\x02\x02\u04C6\u04C4\x03\x02\x02\x02\u04C6\u04C7\x03\x02" +
		"\x02\x02\u04C7E\x03\x02\x02\x02\u04C8\u04D0\x05\u0198\xCD\x02\u04C9\u04D0" +
		"\x05\u0186\xC4\x02\u04CA\u04D0\x05\u01A6\xD4\x02\u04CB\u04D0\x05\u019A" +
		"\xCE\x02\u04CC\u04D0\x05T+\x02\u04CD\u04D0\x05R*\x02\u04CE\u04D0\x05H" +
		"%\x02\u04CF\u04C8\x03\x02\x02\x02\u04CF\u04C9\x03\x02\x02\x02\u04CF\u04CA" +
		"\x03\x02\x02\x02\u04CF\u04CB\x03\x02\x02\x02\u04CF\u04CC\x03\x02\x02\x02" +
		"\u04CF\u04CD\x03\x02\x02\x02\u04CF\u04CE\x03\x02\x02\x02\u04D0G\x03\x02" +
		"\x02\x02\u04D1\u04D4\x07\u011F\x02\x02\u04D2\u04D4\x05\u01B0\xD9\x02\u04D3" +
		"\u04D1\x03\x02\x02\x02\u04D3\u04D2\x03\x02\x02\x02\u04D4I\x03\x02\x02" +
		"\x02\u04D5\u04D7\x07\xB5\x02\x02\u04D6\u04D5\x03\x02\x02\x02\u04D7\u04DA" +
		"\x03\x02\x02\x02\u04D8\u04D6\x03\x02\x02\x02\u04D8\u04D9\x03\x02\x02\x02" +
		"\u04D9\u04DB\x03\x02\x02\x02\u04DA\u04D8\x03\x02\x02\x02\u04DB\u04DD\x05" +
		"\u01B0\xD9\x02\u04DC\u04D8\x03\x02\x02\x02\u04DD\u04DE\x03\x02\x02\x02" +
		"\u04DE\u04DC\x03\x02\x02\x02\u04DE\u04DF\x03\x02\x02\x02\u04DFK\x03\x02" +
		"\x02\x02\u04E0\u0501\x07\u011E\x02\x02\u04E1\u0501\x07\xB6\x02\x02\u04E2" +
		"\u0501\x05\u01B2\xDA\x02\u04E3\u0501\x05N(\x02\u04E4\u0501\x05\u0190\xC9" +
		"\x02\u04E5\u0501\x05\u0194\xCB\x02\u04E6\u0501\x05\u0192\xCA\x02\u04E7" +
		"\u0501\x05\u01A6\xD4\x02\u04E8\u0501\x05\u01AA\xD6\x02\u04E9\u0501\x05" +
		"\\/\x02\u04EA\u0501\x05\u0186\xC4\x02\u04EB\u0501\x05\u019C\xCF\x02\u04EC" +
		"\u0501\x05\u0198\xCD\x02\u04ED\u0501\x05\u019A\xCE\x02\u04EE\u0501\x05" +
		"\u01B0\xD9\x02\u04EF\u0501\x05\u018C\xC7\x02\u04F0\u0501\x05\u019E\xD0" +
		"\x02\u04F1\u0501\x05\u01A0\xD1\x02\u04F2\u0501\x05\u01A2\xD2\x02\u04F3" +
		"\u0501\x05\u01A4\xD3\x02\u04F4\u0501\x05\u016E\xB8\x02\u04F5\u0501\x05" +
		"\u0178\xBD\x02\u04F6\u0501\x05\u016A\xB6\x02\u04F7\u0501\x05\u015E\xB0" +
		"\x02\u04F8\u0501\x05\u0160\xB1\x02\u04F9\u0501\x05\u0164\xB3\x02\u04FA" +
		"\u0501\x05\u0162\xB2\x02\u04FB\u0501\x05\u0166\xB4\x02\u04FC\u0501\x05" +
		"\u018A\xC6\x02\u04FD\u0501\x05\u01AC\xD7\x02\u04FE\u0501\x05\u018E\xC8" +
		"\x02\u04FF\u0501\x05\u01BA\xDE\x02\u0500\u04E0\x03\x02\x02\x02\u0500\u04E1" +
		"\x03\x02\x02\x02\u0500\u04E2\x03\x02\x02\x02\u0500\u04E3\x03\x02\x02\x02" +
		"\u0500\u04E4\x03\x02\x02\x02\u0500\u04E5\x03\x02\x02\x02\u0500\u04E6\x03" +
		"\x02\x02\x02\u0500\u04E7\x03\x02\x02\x02\u0500\u04E8\x03\x02\x02\x02\u0500" +
		"\u04E9\x03\x02\x02\x02\u0500\u04EA\x03\x02\x02\x02\u0500\u04EB\x03\x02" +
		"\x02\x02\u0500\u04EC\x03\x02\x02\x02\u0500\u04ED\x03\x02\x02\x02\u0500" +
		"\u04EE\x03\x02\x02\x02\u0500\u04EF\x03\x02\x02\x02\u0500\u04F0\x03\x02" +
		"\x02\x02\u0500\u04F1\x03\x02\x02\x02\u0500\u04F2\x03\x02\x02\x02\u0500" +
		"\u04F3\x03\x02\x02\x02\u0500\u04F4\x03\x02\x02\x02\u0500\u04F5\x03\x02" +
		"\x02\x02\u0500\u04F6\x03\x02\x02\x02\u0500\u04F7\x03\x02\x02\x02\u0500" +
		"\u04F8\x03\x02\x02\x02\u0500\u04F9\x03\x02\x02\x02\u0500\u04FA\x03\x02" +
		"\x02\x02\u0500\u04FB\x03\x02\x02\x02\u0500\u04FC\x03\x02\x02\x02\u0500" +
		"\u04FD\x03\x02\x02\x02\u0500\u04FE\x03\x02\x02\x02\u0500\u04FF\x03\x02" +
		"\x02\x02\u0501M\x03\x02\x02\x02\u0502\u050A\x05P)\x02\u0503\u0509\x05" +
		"P)\x02\u0504\u0509\x05\u0198\xCD\x02\u0505\u0509\x05\u019A\xCE\x02\u0506" +
		"\u0509\x05\u0186\xC4\x02\u0507\u0509\x05\u018C\xC7\x02\u0508\u0503\x03" +
		"\x02\x02\x02\u0508\u0504\x03\x02\x02\x02\u0508\u0505\x03\x02\x02\x02\u0508" +
		"\u0506\x03\x02\x02\x02\u0508\u0507\x03\x02\x02\x02\u0509\u050C\x03\x02" +
		"\x02\x02\u050A\u0508\x03\x02\x02\x02\u050A\u050B\x03\x02\x02\x02\u050B" +
		"O\x03\x02\x02\x02\u050C\u050A\x03\x02\x02\x02\u050D\u0511\x07\x92\x02" +
		"\x02\u050E\u0512\x07\xB3\x02\x02\u050F\u0512\x07\xB4\x02\x02\u0510\u0512" +
		"\x03\x02\x02\x02\u0511\u050E\x03\x02\x02\x02\u0511\u050F\x03\x02\x02\x02" +
		"\u0511\u0510\x03\x02\x02\x02\u0512\u0516\x03\x02\x02\x02\u0513\u0515\x05" +
		"\u01B0\xD9\x02\u0514\u0513\x03\x02\x02\x02\u0515\u0518\x03\x02\x02\x02" +
		"\u0516\u0514\x03\x02\x02\x02\u0516\u0517\x03\x02\x02\x02\u0517\u0519\x03" +
		"\x02\x02\x02\u0518\u0516\x03\x02\x02\x02\u0519\u051A\x05\u01B4\xDB\x02" +
		"\u051AQ\x03\x02\x02\x02\u051B\u051D\x05\u0186\xC4\x02\u051C\u051B\x03" +
		"\x02\x02\x02\u051C\u051D\x03\x02\x02\x02\u051D\u051E\x03\x02\x02\x02\u051E" +
		"\u0520\x07\x96\x02\x02\u051F\u0521\x05\u01B0\xD9\x02\u0520\u051F\x03\x02" +
		"\x02\x02\u0521\u0522\x03\x02\x02\x02\u0522\u0520\x03\x02\x02\x02\u0522" +
		"\u0523\x03\x02\x02\x02\u0523\u0524\x03\x02\x02\x02\u0524\u0525\x07\x9C" +
		"\x02\x02\u0525S\x03\x02\x02\x02\u0526\u0528\x05\u0186\xC4\x02\u0527\u0526" +
		"\x03\x02\x02\x02\u0527\u0528\x03\x02\x02\x02\u0528\u0529\x03\x02\x02\x02" +
		"\u0529\u052B\x07\x97\x02\x02\u052A\u052C\x05\u01B0\xD9\x02\u052B\u052A" +
		"\x03\x02\x02\x02\u052C\u052D\x03\x02\x02\x02\u052D\u052B\x03\x02\x02\x02" +
		"\u052D\u052E\x03\x02\x02\x02\u052E\u052F\x03\x02\x02\x02\u052F\u0530\x07" +
		"\x9C\x02\x02\u0530U\x03\x02\x02\x02\u0531\u0533\x05\u0186\xC4\x02\u0532" +
		"\u0531\x03\x02\x02\x02\u0532\u0533\x03\x02\x02\x02\u0533\u0534\x03\x02" +
		"\x02\x02\u0534\u0536\x07\x99\x02\x02\u0535\u0537\x05\u01B0\xD9\x02\u0536" +
		"\u0535\x03\x02\x02\x02\u0537\u0538\x03\x02\x02\x02\u0538\u0536\x03\x02" +
		"\x02\x02\u0538\u0539\x03\x02\x02\x02\u0539\u053A\x03\x02\x02\x02\u053A" +
		"\u053B\x07\x9C\x02\x02\u053BW\x03\x02\x02\x02\u053C\u053D\x07\x17\x02" +
		"\x02\u053D\u053E\x05\u013C\x9F\x02\u053E\u053F\x07\x9C\x02\x02\u053F\u0549" +
		"\x07\xB5\x02\x02\u0540\u0544\x05L\'\x02\u0541\u0543\x07\xB5\x02\x02\u0542" +
		"\u0541\x03\x02\x02\x02\u0543\u0546\x03\x02\x02\x02\u0544\u0542\x03\x02" +
		"\x02\x02\u0544\u0545\x03\x02\x02\x02\u0545\u0548\x03\x02\x02\x02\u0546" +
		"\u0544\x03\x02\x02\x02\u0547\u0540\x03\x02\x02\x02\u0548\u054B\x03\x02" +
		"\x02\x02\u0549\u0547\x03\x02\x02\x02\u0549\u054A\x03\x02\x02\x02\u054A" +
		"\u0555\x03\x02\x02\x02\u054B\u0549\x03\x02\x02\x02\u054C\u054E\x07\xB5" +
		"\x02\x02\u054D\u054C\x03\x02\x02\x02\u054E\u0551\x03\x02\x02\x02\u054F" +
		"\u054D\x03\x02\x02\x02\u054F\u0550\x03\x02\x02\x02\u0550\u0552\x03\x02" +
		"\x02\x02\u0551\u054F\x03\x02\x02\x02\u0552\u0554\x05Z.\x02\u0553\u054F" +
		"\x03\x02\x02\x02\u0554\u0557\x03\x02\x02\x02\u0555\u0553\x03\x02\x02\x02" +
		"\u0555\u0556\x03\x02\x02\x02\u0556\u055B\x03\x02\x02\x02\u0557\u0555\x03" +
		"\x02\x02\x02\u0558\u055A\x07\xB5\x02\x02\u0559\u0558\x03\x02\x02\x02\u055A" +
		"\u055D\x03\x02\x02\x02\u055B\u0559\x03\x02\x02\x02\u055B\u055C\x03\x02" +
		"\x02\x02\u055C\u056B\x03\x02\x02\x02\u055D\u055B\x03\x02\x02\x02\u055E" +
		"\u0568\x05^0\x02\u055F\u0561\x07\xB5\x02\x02\u0560\u055F\x03\x02\x02\x02" +
		"\u0561\u0564\x03\x02\x02\x02\u0562\u0560\x03\x02\x02\x02\u0562\u0563\x03" +
		"\x02\x02\x02\u0563\u0565\x03\x02\x02\x02\u0564\u0562\x03\x02\x02\x02\u0565" +
		"\u0567\x05^0\x02\u0566\u0562\x03\x02\x02\x02\u0567\u056A\x03\x02\x02\x02" +
		"\u0568\u0566\x03\x02\x02\x02\u0568\u0569\x03\x02\x02\x02\u0569\u056C\x03" +
		"\x02\x02\x02\u056A\u0568\x03\x02\x02\x02\u056B\u055E\x03\x02\x02\x02\u056B" +
		"\u056C\x03\x02\x02\x02\u056CY\x03\x02\x02\x02\u056D\u0575\x07\xC2\x02" +
		"\x02\u056E\u0570\x07\xB5\x02\x02\u056F\u056E\x03\x02\x02\x02\u056F\u0570" +
		"\x03\x02\x02\x02\u0570\u0571\x03\x02\x02\x02\u0571\u0573\x05\u01AE\xD8" +
		"\x02\u0572\u0574\x07\xB5\x02\x02\u0573\u0572\x03\x02\x02\x02\u0573\u0574" +
		"\x03\x02\x02\x02\u0574\u0576\x03\x02\x02\x02\u0575\u056F\x03\x02\x02\x02" +
		"\u0575\u0576\x03\x02\x02\x02\u0576\u0577\x03\x02\x02\x02\u0577\u0578\x07" +
		"\x9C\x02\x02\u0578[\x03\x02\x02\x02\u0579\u057A\t\x05\x02\x02\u057A]\x03" +
		"\x02\x02\x02\u057B\u057C\x05L\'\x02\u057C_\x03\x02\x02\x02\u057D\u057E" +
		"\x07\x19\x02\x02\u057E\u057F\x05\u013C\x9F\x02\u057F\u0580\x07\x9C\x02" +
		"\x02\u0580\u058A\x07\xB5\x02\x02\u0581\u0585\x05L\'\x02\u0582\u0584\x07" +
		"\xB5\x02\x02\u0583\u0582\x03\x02\x02\x02\u0584\u0587\x03\x02\x02\x02\u0585" +
		"\u0583\x03\x02\x02\x02\u0585\u0586\x03\x02\x02\x02\u0586\u0589\x03\x02" +
		"\x02\x02\u0587\u0585\x03\x02\x02\x02\u0588\u0581\x03\x02\x02\x02\u0589" +
		"\u058C\x03\x02\x02\x02\u058A\u0588\x03\x02\x02\x02\u058A\u058B\x03\x02" +
		"\x02\x02\u058B\u0590\x03\x02\x02\x02\u058C\u058A\x03\x02\x02\x02\u058D" +
		"\u058F\x05b2\x02\u058E\u058D\x03\x02\x02\x02\u058F\u0592\x03\x02\x02\x02" +
		"\u0590\u058E\x03\x02\x02\x02\u0590\u0591";
	private static readonly _serializedATNSegment4: string =
		"\x03\x02\x02\x02\u0591\u0596\x03\x02\x02\x02\u0592\u0590\x03\x02\x02\x02" +
		"\u0593\u0595\x07\xB5\x02\x02\u0594\u0593\x03\x02\x02\x02\u0595\u0598\x03" +
		"\x02\x02\x02\u0596\u0594\x03\x02\x02\x02\u0596\u0597\x03\x02\x02\x02\u0597" +
		"\u05A6\x03\x02\x02\x02\u0598\u0596\x03\x02\x02\x02\u0599\u05A3\x05^0\x02" +
		"\u059A\u059C\x07\xB5\x02\x02\u059B\u059A\x03\x02\x02\x02\u059C\u059F\x03" +
		"\x02\x02\x02\u059D\u059B\x03\x02\x02\x02\u059D\u059E\x03\x02\x02\x02\u059E" +
		"\u05A0\x03\x02\x02\x02\u059F\u059D\x03\x02\x02\x02\u05A0\u05A2\x05^0\x02" +
		"\u05A1\u059D\x03\x02\x02\x02\u05A2\u05A5\x03\x02\x02\x02\u05A3\u05A1\x03" +
		"\x02\x02\x02\u05A3\u05A4\x03\x02\x02\x02\u05A4\u05A7\x03\x02\x02\x02\u05A5" +
		"\u05A3\x03\x02\x02\x02\u05A6\u0599\x03\x02\x02\x02\u05A6\u05A7\x03\x02" +
		"\x02\x02\u05A7a\x03\x02\x02\x02\u05A8\u05AC\x07\x97\x02\x02\u05A9\u05AB" +
		"\v\x02\x02\x02\u05AA\u05A9\x03\x02\x02\x02\u05AB\u05AE\x03\x02\x02\x02" +
		"\u05AC\u05AD\x03\x02\x02\x02\u05AC\u05AA\x03\x02\x02\x02\u05AD\u05AF\x03" +
		"\x02\x02\x02\u05AE\u05AC\x03\x02\x02\x02\u05AF\u05B0\x07\x9C\x02\x02\u05B0" +
		"\u05BB\x07\xB5\x02\x02\u05B1\u05B5\x07\x96\x02\x02\u05B2\u05B4\v\x02\x02" +
		"\x02\u05B3\u05B2\x03\x02\x02\x02\u05B4\u05B7\x03\x02\x02\x02\u05B5\u05B6" +
		"\x03\x02\x02\x02\u05B5\u05B3\x03\x02\x02\x02\u05B6\u05B8\x03\x02\x02\x02" +
		"\u05B7\u05B5\x03\x02\x02\x02\u05B8\u05B9\x07\x9C\x02\x02\u05B9\u05BB\x07" +
		"\xB5\x02\x02\u05BA\u05A8\x03\x02\x02\x02\u05BA\u05B1\x03\x02\x02\x02\u05BB" +
		"c\x03\x02\x02\x02\u05BC\u05BD\x07\x1A\x02\x02\u05BD\u05BE\x05\u013C\x9F" +
		"\x02\u05BE\u05BF\x07\x9C\x02\x02\u05BF\u05CC\x07\xB5\x02\x02\u05C0\u05C3" +
		"\x05L\'\x02\u05C1\u05C3\x05f4\x02\u05C2\u05C0\x03\x02\x02\x02\u05C2\u05C1" +
		"\x03\x02\x02\x02\u05C3\u05C7\x03\x02\x02\x02\u05C4\u05C6\x07\xB5\x02\x02" +
		"\u05C5\u05C4\x03\x02\x02\x02\u05C6\u05C9\x03\x02\x02\x02\u05C7\u05C5\x03" +
		"\x02\x02\x02\u05C7\u05C8\x03\x02\x02\x02\u05C8\u05CB\x03\x02\x02\x02\u05C9" +
		"\u05C7\x03\x02\x02\x02\u05CA\u05C2\x03\x02\x02\x02\u05CB\u05CE\x03\x02" +
		"\x02\x02\u05CC\u05CA\x03\x02\x02\x02\u05CC\u05CD\x03\x02\x02\x02\u05CD" +
		"\u05D2\x03\x02\x02\x02\u05CE\u05CC\x03\x02\x02\x02\u05CF\u05D1\x07\xB5" +
		"\x02\x02\u05D0\u05CF\x03\x02\x02\x02\u05D1\u05D4\x03\x02\x02\x02\u05D2" +
		"\u05D0\x03\x02\x02\x02\u05D2\u05D3\x03\x02\x02\x02\u05D3\u05E2\x03\x02" +
		"\x02\x02\u05D4\u05D2\x03\x02\x02\x02\u05D5\u05DF\x05^0\x02\u05D6\u05D8" +
		"\x07\xB5\x02\x02\u05D7\u05D6\x03\x02\x02\x02\u05D8\u05DB\x03\x02\x02\x02" +
		"\u05D9\u05D7\x03\x02\x02\x02\u05D9\u05DA\x03\x02\x02\x02\u05DA\u05DC\x03" +
		"\x02\x02\x02\u05DB\u05D9\x03\x02\x02\x02\u05DC\u05DE\x05^0\x02\u05DD\u05D9" +
		"\x03\x02\x02\x02\u05DE\u05E1\x03\x02\x02\x02\u05DF\u05DD\x03\x02\x02\x02" +
		"\u05DF\u05E0\x03\x02\x02\x02\u05E0\u05E3\x03\x02\x02\x02\u05E1\u05DF\x03" +
		"\x02\x02\x02\u05E2\u05D5\x03\x02\x02\x02\u05E2\u05E3\x03\x02\x02\x02\u05E3" +
		"e\x03\x02\x02\x02\u05E4\u05E5\x07\x98\x02\x02\u05E5\u05E6\x05\u01B0\xD9" +
		"\x02\u05E6\u05E8\x07\x9C\x02\x02\u05E7\u05E9\x05h5\x02\u05E8\u05E7\x03" +
		"\x02\x02\x02\u05E8\u05E9\x03\x02\x02\x02\u05E9\u05EF\x03\x02\x02\x02\u05EA" +
		"\u05EE\x05\u019A\xCE\x02\u05EB\u05EE\x05\u0186\xC4\x02\u05EC\u05EE\x05" +
		"\u0198\xCD\x02\u05ED\u05EA\x03\x02\x02\x02\u05ED\u05EB\x03\x02\x02\x02" +
		"\u05ED\u05EC\x03\x02\x02\x02\u05EE\u05F1\x03\x02\x02\x02\u05EF\u05ED\x03" +
		"\x02\x02\x02\u05EF\u05F0\x03\x02\x02\x02\u05F0g\x03\x02\x02\x02\u05F1" +
		"\u05EF\x03\x02\x02\x02\u05F2\u05F6\x07\xCC\x02\x02\u05F3\u05F5\x07\x04" +
		"\x02\x02\u05F4\u05F3\x03\x02\x02\x02\u05F5\u05F8\x03\x02\x02\x02\u05F6" +
		"\u05F4\x03\x02\x02\x02\u05F6\u05F7\x03\x02\x02\x02\u05F7\u05F9\x03\x02" +
		"\x02\x02\u05F8\u05F6\x03\x02\x02\x02\u05F9\u05FD\x07\xB4\x02\x02\u05FA" +
		"\u05FC\x07\x04\x02\x02\u05FB\u05FA\x03\x02\x02\x02\u05FC\u05FF\x03\x02" +
		"\x02\x02\u05FD\u05FB\x03\x02\x02\x02\u05FD\u05FE\x03\x02\x02\x02\u05FE" +
		"\u0600\x03\x02\x02\x02\u05FF\u05FD\x03\x02\x02\x02\u0600\u0601\x07\x9C" +
		"\x02\x02\u0601i\x03\x02\x02\x02\u0602\u0604\x07\x1B\x02\x02\u0603\u0605" +
		"\t\x06\x02\x02\u0604\u0603\x03\x02\x02\x02\u0604\u0605\x03\x02\x02\x02" +
		"\u0605\u0606\x03\x02\x02\x02\u0606\u0607\x07\x9C\x02\x02\u0607\u0611\x07" +
		"\xB5\x02\x02\u0608\u060C\x05L\'\x02\u0609\u060B\x07\xB5\x02\x02\u060A" +
		"\u0609\x03\x02\x02\x02\u060B\u060E\x03\x02\x02\x02\u060C\u060A\x03\x02" +
		"\x02\x02\u060C\u060D\x03\x02\x02\x02\u060D\u0610\x03\x02\x02\x02\u060E" +
		"\u060C\x03\x02\x02\x02\u060F\u0608\x03\x02\x02\x02\u0610\u0613\x03\x02" +
		"\x02\x02\u0611\u060F\x03\x02\x02\x02\u0611\u0612\x03\x02\x02\x02\u0612" +
		"\u0617\x03\x02\x02\x02\u0613\u0611\x03\x02\x02\x02\u0614\u0616\x07\xB5" +
		"\x02\x02\u0615\u0614\x03\x02\x02\x02\u0616\u0619\x03\x02\x02\x02\u0617" +
		"\u0615\x03\x02\x02\x02\u0617\u0618\x03\x02\x02\x02\u0618\u0627\x03\x02" +
		"\x02\x02\u0619\u0617\x03\x02\x02\x02\u061A\u0624\x05^0\x02\u061B\u061D" +
		"\x07\xB5\x02\x02\u061C\u061B\x03\x02\x02\x02\u061D\u0620\x03\x02\x02\x02" +
		"\u061E\u061C\x03\x02\x02\x02\u061E\u061F\x03\x02\x02\x02\u061F\u0621\x03" +
		"\x02\x02\x02\u0620\u061E\x03\x02\x02\x02\u0621\u0623\x05^0\x02\u0622\u061E" +
		"\x03\x02\x02\x02\u0623\u0626\x03\x02\x02\x02\u0624\u0622\x03\x02\x02\x02" +
		"\u0624\u0625\x03\x02\x02\x02\u0625\u0628\x03\x02\x02\x02\u0626\u0624\x03" +
		"\x02\x02\x02\u0627\u061A\x03\x02\x02\x02\u0627\u0628\x03\x02\x02\x02\u0628" +
		"k\x03\x02\x02\x02\u0629\u062A\x07\x12\x02\x02\u062A\u062B\x05\u013C\x9F" +
		"\x02\u062B\u062C\x07\x9C\x02\x02\u062C\u0636\x07\xB5\x02\x02\u062D\u0631" +
		"\x05L\'\x02\u062E\u0630\x07\xB5\x02\x02\u062F\u062E\x03\x02\x02\x02\u0630" +
		"\u0633\x03\x02\x02\x02\u0631\u062F\x03\x02\x02\x02\u0631\u0632\x03\x02" +
		"\x02\x02\u0632\u0635\x03\x02\x02\x02\u0633\u0631\x03\x02\x02\x02\u0634" +
		"\u062D\x03\x02\x02\x02\u0635\u0638\x03\x02\x02\x02\u0636\u0634\x03\x02" +
		"\x02\x02\u0636\u0637\x03\x02\x02\x02\u0637\u063C\x03\x02\x02\x02\u0638" +
		"\u0636\x03\x02\x02\x02\u0639\u063B\x07\xB5\x02\x02\u063A\u0639\x03\x02" +
		"\x02\x02\u063B\u063E\x03\x02\x02\x02\u063C\u063A\x03\x02\x02\x02\u063C" +
		"\u063D\x03\x02\x02\x02\u063D\u064C\x03\x02\x02\x02\u063E\u063C\x03\x02" +
		"\x02\x02\u063F\u0649\x05^0\x02\u0640\u0642\x07\xB5\x02\x02\u0641\u0640" +
		"\x03\x02\x02\x02\u0642\u0645\x03\x02\x02\x02\u0643\u0641\x03\x02\x02\x02" +
		"\u0643\u0644\x03\x02\x02\x02\u0644\u0646\x03\x02\x02\x02\u0645\u0643\x03" +
		"\x02\x02\x02\u0646\u0648\x05^0\x02\u0647\u0643\x03\x02\x02\x02\u0648\u064B" +
		"\x03\x02\x02\x02\u0649\u0647\x03\x02\x02\x02\u0649\u064A\x03\x02\x02\x02" +
		"\u064A\u064D\x03\x02\x02\x02\u064B\u0649\x03\x02\x02\x02\u064C\u063F\x03" +
		"\x02\x02\x02\u064C\u064D\x03\x02\x02\x02\u064Dm\x03\x02\x02\x02\u064E" +
		"\u064F\x07\x1C\x02\x02\u064F\u0650\x05\u013C\x9F\x02\u0650\u0651\x07\x9C" +
		"\x02\x02\u0651\u065B\x07\xB5\x02\x02\u0652\u0656\x05L\'\x02\u0653\u0655" +
		"\x07\xB5\x02\x02\u0654\u0653\x03\x02\x02\x02\u0655\u0658\x03\x02\x02\x02" +
		"\u0656\u0654\x03\x02\x02\x02\u0656\u0657\x03\x02\x02\x02\u0657\u065A\x03" +
		"\x02\x02\x02\u0658\u0656\x03\x02\x02\x02\u0659\u0652\x03\x02\x02\x02\u065A" +
		"\u065D\x03\x02\x02\x02\u065B\u0659\x03\x02\x02\x02\u065B\u065C\x03\x02" +
		"\x02\x02\u065C\u0661\x03\x02\x02\x02\u065D\u065B\x03\x02\x02\x02\u065E" +
		"\u0660\x07\xB5\x02\x02\u065F\u065E\x03\x02\x02\x02\u0660\u0663\x03\x02" +
		"\x02\x02\u0661\u065F\x03\x02\x02\x02\u0661\u0662\x03\x02\x02\x02\u0662" +
		"\u0671\x03\x02\x02\x02\u0663\u0661\x03\x02\x02\x02\u0664\u066E\x05^0\x02" +
		"\u0665\u0667\x07\xB5\x02\x02\u0666\u0665\x03\x02\x02\x02\u0667\u066A\x03" +
		"\x02\x02\x02\u0668\u0666\x03\x02\x02\x02\u0668\u0669\x03\x02\x02\x02\u0669" +
		"\u066B\x03\x02\x02\x02\u066A\u0668\x03\x02\x02\x02\u066B\u066D\x05^0\x02" +
		"\u066C\u0668\x03\x02\x02\x02\u066D\u0670\x03\x02\x02\x02\u066E\u066C\x03" +
		"\x02\x02\x02\u066E\u066F\x03\x02\x02\x02\u066F\u0672\x03\x02\x02\x02\u0670" +
		"\u066E\x03\x02\x02\x02\u0671\u0664\x03\x02\x02\x02\u0671\u0672\x03\x02" +
		"\x02\x02\u0672o\x03\x02\x02\x02\u0673\u0674\x07\x1D\x02\x02\u0674\u0675" +
		"\x05\u013C\x9F\x02\u0675\u0676\x07\x9C\x02\x02\u0676\u0680\x07\xB5\x02" +
		"\x02\u0677\u067B\x05L\'\x02\u0678\u067A\x07\xB5\x02\x02\u0679\u0678\x03" +
		"\x02\x02\x02\u067A\u067D\x03\x02\x02\x02\u067B\u0679\x03\x02\x02\x02\u067B" +
		"\u067C\x03\x02\x02\x02\u067C\u067F\x03\x02\x02\x02\u067D\u067B\x03\x02" +
		"\x02\x02\u067E\u0677\x03\x02\x02\x02\u067F\u0682\x03\x02\x02\x02\u0680" +
		"\u067E\x03\x02\x02\x02\u0680\u0681\x03\x02\x02\x02\u0681\u0686\x03\x02" +
		"\x02\x02\u0682\u0680\x03\x02\x02\x02\u0683\u0685\x07\xB5\x02\x02\u0684" +
		"\u0683\x03\x02\x02\x02\u0685\u0688\x03\x02\x02\x02\u0686\u0684\x03\x02" +
		"\x02\x02\u0686\u0687\x03\x02\x02\x02\u0687\u0696\x03\x02\x02\x02\u0688" +
		"\u0686\x03\x02\x02\x02\u0689\u0693\x05^0\x02\u068A\u068C\x07\xB5\x02\x02" +
		"\u068B\u068A\x03\x02\x02\x02\u068C\u068F\x03\x02\x02\x02\u068D\u068B\x03" +
		"\x02\x02\x02\u068D\u068E\x03\x02\x02\x02\u068E\u0690\x03\x02\x02\x02\u068F" +
		"\u068D\x03\x02\x02\x02\u0690\u0692\x05^0\x02\u0691\u068D\x03\x02\x02\x02" +
		"\u0692\u0695\x03\x02\x02\x02\u0693\u0691\x03\x02\x02\x02\u0693\u0694\x03" +
		"\x02\x02\x02\u0694\u0697\x03\x02\x02\x02\u0695\u0693\x03\x02\x02\x02\u0696" +
		"\u0689\x03\x02\x02\x02\u0696\u0697\x03\x02\x02\x02\u0697q\x03\x02\x02" +
		"\x02\u0698\u0699\x07\x1E\x02\x02\u0699\u069A\x05\u013C\x9F\x02\u069A\u069E" +
		"\x07\x9C\x02\x02\u069B\u069D\x07\xB5\x02\x02\u069C\u069B\x03\x02\x02\x02" +
		"\u069D\u06A0\x03\x02\x02\x02\u069E\u069C\x03\x02\x02\x02\u069E\u069F\x03" +
		"\x02\x02\x02\u069F\u06AA\x03\x02\x02\x02\u06A0\u069E\x03\x02\x02\x02\u06A1" +
		"\u06A5\x05L\'\x02\u06A2\u06A4\x07\xB5\x02\x02\u06A3\u06A2\x03\x02\x02" +
		"\x02\u06A4\u06A7\x03\x02\x02\x02\u06A5\u06A3\x03\x02\x02\x02\u06A5\u06A6" +
		"\x03\x02\x02\x02\u06A6\u06A9\x03\x02\x02\x02\u06A7\u06A5\x03\x02\x02\x02" +
		"\u06A8\u06A1\x03\x02\x02\x02\u06A9\u06AC\x03\x02\x02\x02\u06AA\u06A8\x03" +
		"\x02\x02\x02\u06AA\u06AB\x03\x02\x02\x02\u06AB\u06AE\x03\x02\x02\x02\u06AC" +
		"\u06AA\x03\x02\x02\x02\u06AD\u06AF\x05\u01AE\xD8\x02\u06AE\u06AD\x03\x02" +
		"\x02\x02\u06AE\u06AF\x03\x02\x02\x02\u06AF\u06B3\x03\x02\x02\x02\u06B0" +
		"\u06B2\x07\xB5\x02\x02\u06B1\u06B0\x03\x02\x02\x02\u06B2\u06B5\x03\x02" +
		"\x02\x02\u06B3\u06B1\x03\x02\x02\x02\u06B3\u06B4\x03\x02\x02\x02\u06B4" +
		"\u06C3\x03\x02\x02\x02\u06B5\u06B3\x03\x02\x02\x02\u06B6\u06C0\x05^0\x02" +
		"\u06B7\u06B9\x07\xB5\x02\x02\u06B8\u06B7\x03\x02\x02\x02\u06B9\u06BC\x03" +
		"\x02\x02\x02\u06BA\u06B8\x03\x02\x02\x02\u06BA\u06BB\x03\x02\x02\x02\u06BB" +
		"\u06BD\x03\x02\x02\x02\u06BC\u06BA\x03\x02\x02\x02\u06BD\u06BF\x05^0\x02" +
		"\u06BE\u06BA\x03\x02\x02\x02\u06BF\u06C2\x03\x02\x02\x02\u06C0\u06BE\x03" +
		"\x02\x02\x02\u06C0\u06C1\x03\x02\x02\x02\u06C1\u06C4\x03\x02\x02\x02\u06C2" +
		"\u06C0\x03\x02\x02\x02\u06C3\u06B6\x03\x02\x02\x02\u06C3\u06C4\x03\x02" +
		"\x02\x02\u06C4s\x03\x02\x02\x02\u06C5\u06C6\x07\x1F\x02\x02\u06C6\u06C7" +
		"\x05\u013C\x9F\x02\u06C7\u06C9\x07\x9C\x02\x02\u06C8\u06CA\x07\xB5\x02" +
		"\x02\u06C9\u06C8\x03\x02\x02\x02\u06CA\u06CB\x03\x02\x02\x02\u06CB\u06C9" +
		"\x03\x02\x02\x02\u06CB\u06CC\x03\x02\x02\x02\u06CC\u06D6\x03\x02\x02\x02" +
		"\u06CD\u06D1\x05L\'\x02\u06CE\u06D0\x07\xB5\x02\x02\u06CF\u06CE\x03\x02" +
		"\x02\x02\u06D0\u06D3\x03\x02\x02\x02\u06D1\u06CF\x03\x02\x02\x02\u06D1" +
		"\u06D2\x03\x02\x02\x02\u06D2\u06D5\x03\x02\x02\x02\u06D3\u06D1\x03\x02" +
		"\x02\x02\u06D4\u06CD\x03\x02\x02\x02\u06D5\u06D8\x03\x02\x02\x02\u06D6" +
		"\u06D4\x03\x02\x02\x02\u06D6\u06D7\x03\x02\x02\x02\u06D7\u06DA\x03\x02" +
		"\x02\x02\u06D8\u06D6\x03\x02\x02\x02\u06D9\u06DB\x05\u01AE\xD8\x02\u06DA" +
		"\u06D9\x03\x02\x02\x02\u06DA\u06DB\x03\x02\x02\x02\u06DB\u06DF\x03\x02" +
		"\x02\x02\u06DC\u06DE\x07\xB5\x02\x02\u06DD\u06DC\x03\x02\x02\x02\u06DE" +
		"\u06E1\x03\x02\x02\x02\u06DF\u06DD\x03\x02\x02\x02\u06DF\u06E0\x03\x02" +
		"\x02\x02\u06E0\u06EF\x03\x02\x02\x02\u06E1\u06DF\x03\x02\x02\x02\u06E2" +
		"\u06EC\x05^0\x02\u06E3\u06E5\x07\xB5\x02\x02\u06E4\u06E3\x03\x02\x02\x02" +
		"\u06E5\u06E8\x03\x02\x02\x02\u06E6\u06E4\x03\x02\x02\x02\u06E6\u06E7\x03" +
		"\x02\x02\x02\u06E7\u06E9\x03\x02\x02\x02\u06E8\u06E6\x03\x02\x02\x02\u06E9" +
		"\u06EB\x05^0\x02\u06EA\u06E6\x03\x02\x02\x02\u06EB\u06EE\x03\x02\x02\x02" +
		"\u06EC\u06EA\x03\x02\x02\x02\u06EC\u06ED\x03\x02\x02\x02\u06ED\u06F0\x03" +
		"\x02\x02\x02\u06EE\u06EC\x03\x02\x02\x02\u06EF\u06E2\x03\x02\x02\x02\u06EF" +
		"\u06F0\x03\x02\x02\x02\u06F0u\x03\x02\x02\x02\u06F1\u06F2\x07\x15\x02" +
		"\x02\u06F2\u06F3\x05\u013C\x9F\x02\u06F3\u06F7\x07\x9C\x02\x02\u06F4\u06F6" +
		"\x07\xB5\x02\x02\u06F5\u06F4\x03\x02\x02\x02\u06F6\u06F9\x03\x02\x02\x02" +
		"\u06F7\u06F5\x03\x02\x02\x02\u06F7\u06F8\x03\x02\x02\x02\u06F8\u0701\x03" +
		"\x02\x02\x02\u06F9\u06F7\x03\x02\x02\x02\u06FA\u06FE\x05L\'\x02\u06FB" +
		"\u06FD\x07\xB5\x02\x02\u06FC\u06FB\x03\x02\x02\x02\u06FD\u0700\x03\x02" +
		"\x02\x02\u06FE\u06FC\x03\x02\x02\x02\u06FE\u06FF\x03\x02\x02\x02\u06FF" +
		"\u0702\x03\x02\x02\x02\u0700\u06FE\x03\x02\x02\x02\u0701\u06FA\x03\x02" +
		"\x02\x02\u0702\u0703\x03\x02\x02\x02\u0703\u0701\x03\x02\x02\x02\u0703" +
		"\u0704\x03\x02\x02\x02\u0704w\x03\x02\x02\x02\u0705\u0706\x07\x0F\x02" +
		"\x02\u0706\u0707\x05\u013C\x9F\x02\u0707\u070B\x07\x9C\x02\x02\u0708\u070A" +
		"\x07\xB5\x02\x02\u0709\u0708\x03\x02\x02\x02\u070A\u070D\x03\x02\x02\x02" +
		"\u070B\u0709\x03\x02\x02\x02\u070B\u070C\x03\x02\x02\x02\u070C\u0715\x03" +
		"\x02\x02\x02\u070D\u070B\x03\x02\x02\x02\u070E\u0712\x05L\'\x02\u070F" +
		"\u0711\x07\xB5\x02\x02\u0710\u070F\x03\x02\x02\x02\u0711\u0714\x03\x02" +
		"\x02\x02\u0712\u0710\x03\x02\x02\x02\u0712\u0713\x03\x02\x02\x02\u0713" +
		"\u0716\x03\x02\x02\x02\u0714\u0712\x03\x02\x02\x02\u0715\u070E\x03\x02" +
		"\x02\x02\u0716\u0717\x03\x02\x02\x02\u0717\u0715\x03\x02\x02\x02\u0717" +
		"\u0718\x03\x02\x02\x02\u0718y\x03\x02\x02\x02\u0719\u071A\x07\x10\x02" +
		"\x02\u071A\u071B\x05\u013C\x9F\x02\u071B\u071F\x07\x9C\x02\x02\u071C\u071E" +
		"\x07\xB5\x02\x02\u071D\u071C\x03\x02\x02\x02\u071E\u0721\x03\x02\x02\x02" +
		"\u071F\u071D\x03\x02\x02\x02\u071F\u0720\x03\x02\x02\x02\u0720\u0729\x03" +
		"\x02\x02\x02\u0721\u071F\x03\x02\x02\x02\u0722\u0726\x05L\'\x02\u0723" +
		"\u0725\x07\xB5\x02\x02\u0724\u0723\x03\x02\x02\x02\u0725\u0728\x03\x02" +
		"\x02\x02\u0726\u0724\x03\x02\x02\x02\u0726\u0727\x03\x02\x02\x02\u0727" +
		"\u072A\x03\x02\x02\x02\u0728\u0726\x03\x02\x02\x02\u0729\u0722\x03\x02" +
		"\x02\x02\u072A\u072B\x03\x02\x02\x02\u072B\u0729\x03\x02\x02\x02\u072B" +
		"\u072C\x03\x02\x02\x02\u072C{\x03\x02\x02\x02\u072D\u072E\x07\x11\x02" +
		"\x02\u072E\u072F\x05\u013C\x9F\x02\u072F\u0733\x07\x9C\x02\x02\u0730\u0732" +
		"\x07\xB5\x02\x02\u0731\u0730\x03\x02\x02\x02\u0732\u0735\x03\x02\x02\x02" +
		"\u0733\u0731\x03\x02\x02\x02\u0733\u0734\x03\x02\x02\x02\u0734\u073D\x03" +
		"\x02\x02\x02\u0735\u0733\x03\x02\x02\x02\u0736\u073A\x05L\'\x02\u0737" +
		"\u0739\x07\xB5\x02\x02\u0738\u0737\x03\x02\x02\x02\u0739\u073C\x03\x02" +
		"\x02\x02\u073A\u0738\x03\x02\x02\x02\u073A\u073B\x03\x02\x02\x02\u073B" +
		"\u073E\x03\x02\x02\x02\u073C\u073A\x03\x02\x02\x02\u073D\u0736\x03\x02" +
		"\x02\x02\u073E\u073F\x03\x02\x02\x02\u073F\u073D\x03\x02\x02\x02\u073F" +
		"\u0740\x03\x02\x02\x02\u0740}\x03\x02\x02\x02\u0741\u0742\x074\x02\x02" +
		"\u0742\u0743\x05\u013C\x9F\x02\u0743\u0747\x07\x9C\x02\x02\u0744\u0746" +
		"\x07\xB5\x02\x02\u0745\u0744\x03\x02\x02\x02\u0746\u0749\x03\x02\x02\x02" +
		"\u0747\u0745\x03\x02\x02\x02\u0747\u0748\x03\x02\x02\x02\u0748\u0751\x03" +
		"\x02\x02\x02\u0749\u0747\x03\x02\x02\x02\u074A\u074E\x05L\'\x02\u074B" +
		"\u074D\x07\xB5\x02\x02\u074C\u074B\x03\x02\x02\x02\u074D\u0750\x03\x02" +
		"\x02\x02\u074E\u074C\x03\x02\x02\x02\u074E\u074F\x03\x02\x02\x02\u074F" +
		"\u0752\x03\x02\x02\x02\u0750\u074E\x03\x02\x02\x02\u0751\u074A\x03\x02" +
		"\x02\x02\u0752\u0753\x03\x02\x02\x02\u0753\u0751\x03\x02\x02\x02\u0753" +
		"\u0754\x03\x02\x02\x02\u0754\x7F\x03\x02\x02\x02\u0755\u0756\x075\x02" +
		"\x02\u0756\u0757\x05\u013C\x9F\x02\u0757\u075B\x07\x9C\x02\x02\u0758\u075A" +
		"\x07\xB5\x02\x02\u0759\u0758\x03\x02\x02\x02\u075A\u075D\x03\x02\x02\x02" +
		"\u075B\u0759\x03\x02\x02\x02\u075B\u075C\x03\x02\x02\x02\u075C\u0765\x03" +
		"\x02\x02\x02\u075D\u075B\x03\x02\x02\x02\u075E\u0762\x05L\'\x02\u075F" +
		"\u0761\x07\xB5\x02\x02\u0760\u075F\x03\x02\x02\x02\u0761\u0764\x03\x02" +
		"\x02\x02\u0762\u0760\x03\x02\x02\x02\u0762\u0763\x03\x02\x02\x02\u0763" +
		"\u0766\x03\x02\x02\x02\u0764\u0762\x03\x02\x02\x02\u0765\u075E\x03\x02" +
		"\x02\x02\u0766\u0767\x03\x02\x02\x02\u0767\u0765\x03\x02\x02\x02\u0767" +
		"\u0768\x03\x02\x02\x02\u0768\x81\x03\x02\x02\x02\u0769\u076A\x076\x02" +
		"\x02\u076A\u076B\x05\u013C\x9F\x02\u076B\u076F\x07\x9C\x02\x02\u076C\u076E" +
		"\x07\xB5\x02\x02\u076D\u076C\x03\x02\x02\x02\u076E\u0771\x03\x02\x02\x02" +
		"\u076F\u076D\x03\x02\x02\x02\u076F\u0770\x03\x02\x02\x02\u0770\u0779\x03" +
		"\x02\x02\x02\u0771\u076F\x03\x02\x02\x02\u0772\u0776\x05L\'\x02\u0773" +
		"\u0775\x07\xB5\x02\x02\u0774\u0773\x03\x02\x02\x02\u0775\u0778\x03\x02" +
		"\x02\x02\u0776\u0774\x03\x02\x02\x02\u0776\u0777\x03\x02\x02\x02\u0777" +
		"\u077A\x03\x02\x02\x02\u0778\u0776\x03\x02\x02\x02\u0779\u0772\x03\x02" +
		"\x02\x02\u077A\u077B\x03\x02\x02\x02\u077B\u0779\x03\x02\x02\x02\u077B" +
		"\u077C\x03\x02\x02\x02\u077C\x83\x03\x02\x02\x02\u077D\u077E\x07\x16\x02" +
		"\x02\u077E\u077F\x05\u013C\x9F\x02\u077F\u0783\x07\x9C\x02\x02\u0780\u0782" +
		"\x07\xB5\x02\x02\u0781\u0780\x03\x02\x02\x02\u0782\u0785\x03\x02\x02\x02" +
		"\u0783\u0781\x03\x02\x02\x02\u0783\u0784\x03\x02\x02\x02\u0784\u078D\x03" +
		"\x02\x02\x02\u0785\u0783\x03\x02\x02\x02\u0786\u078A\x05L\'\x02\u0787" +
		"\u0789\x07\xB5\x02\x02\u0788\u0787\x03\x02\x02\x02\u0789\u078C\x03\x02" +
		"\x02\x02\u078A\u0788\x03\x02\x02\x02\u078A\u078B\x03\x02\x02\x02\u078B" +
		"\u078E\x03\x02\x02\x02\u078C\u078A\x03\x02\x02\x02\u078D\u0786\x03\x02" +
		"\x02\x02\u078E\u078F\x03\x02\x02\x02\u078F\u078D\x03\x02\x02\x02\u078F" +
		"\u0790\x03\x02\x02\x02\u0790\x85\x03\x02\x02\x02\u0791\u0792\x07\'\x02" +
		"\x02\u0792\u0793\x05\u013C\x9F\x02\u0793\u0797\x07\x9C\x02\x02\u0794\u0796" +
		"\x07\xB5\x02\x02\u0795\u0794\x03\x02\x02\x02\u0796\u0799\x03\x02\x02\x02" +
		"\u0797\u0795\x03\x02\x02\x02\u0797\u0798\x03\x02\x02\x02\u0798\u07A1\x03" +
		"\x02\x02\x02\u0799\u0797\x03\x02\x02\x02\u079A\u079E\x05L\'\x02\u079B" +
		"\u079D\x07\xB5\x02\x02\u079C\u079B\x03\x02\x02\x02\u079D\u07A0\x03\x02" +
		"\x02\x02\u079E\u079C\x03\x02\x02\x02\u079E\u079F\x03\x02\x02\x02\u079F" +
		"\u07A2\x03\x02\x02\x02\u07A0\u079E\x03\x02\x02\x02\u07A1\u079A\x03\x02" +
		"\x02\x02\u07A2\u07A3\x03\x02\x02\x02\u07A3\u07A1\x03\x02\x02\x02\u07A3" +
		"\u07A4\x03\x02\x02\x02\u07A4\x87\x03\x02\x02\x02\u07A5\u07A6\x07(\x02" +
		"\x02\u07A6\u07A7\x05\u013C\x9F\x02\u07A7\u07AB\x07\x9C\x02\x02\u07A8\u07AA" +
		"\x07\xB5\x02\x02\u07A9\u07A8\x03\x02\x02\x02\u07AA\u07AD\x03\x02\x02\x02" +
		"\u07AB\u07A9\x03\x02\x02\x02\u07AB\u07AC\x03\x02\x02\x02\u07AC\u07B5\x03" +
		"\x02\x02\x02\u07AD\u07AB\x03\x02\x02\x02\u07AE\u07B2\x05L\'\x02\u07AF" +
		"\u07B1\x07\xB5\x02\x02\u07B0\u07AF\x03\x02\x02\x02\u07B1\u07B4\x03\x02" +
		"\x02\x02\u07B2\u07B0\x03\x02\x02\x02\u07B2\u07B3\x03\x02\x02\x02\u07B3" +
		"\u07B6\x03\x02\x02\x02\u07B4\u07B2\x03\x02\x02\x02\u07B5\u07AE\x03\x02" +
		"\x02\x02\u07B6\u07B7\x03\x02\x02\x02\u07B7\u07B5\x03\x02\x02\x02\u07B7" +
		"\u07B8\x03\x02\x02\x02\u07B8\x89\x03\x02\x02\x02\u07B9\u07BA\x07)\x02" +
		"\x02\u07BA\u07BB\x05\u013C\x9F\x02\u07BB\u07BF\x07\x9C\x02\x02\u07BC\u07BE" +
		"\x07\xB5\x02\x02\u07BD\u07BC\x03\x02\x02\x02\u07BE\u07C1\x03\x02\x02\x02" +
		"\u07BF\u07BD\x03\x02\x02\x02\u07BF\u07C0\x03\x02\x02\x02\u07C0\u07C9\x03" +
		"\x02\x02\x02\u07C1\u07BF\x03\x02\x02\x02\u07C2\u07C6\x05L\'\x02\u07C3" +
		"\u07C5\x07\xB5\x02\x02\u07C4\u07C3\x03\x02\x02\x02\u07C5\u07C8\x03\x02" +
		"\x02\x02\u07C6\u07C4\x03\x02\x02\x02\u07C6\u07C7\x03\x02\x02\x02\u07C7" +
		"\u07CA\x03\x02\x02\x02\u07C8\u07C6\x03\x02\x02\x02\u07C9\u07C2\x03\x02" +
		"\x02\x02\u07CA\u07CB\x03\x02\x02\x02\u07CB\u07C9\x03\x02\x02\x02\u07CB" +
		"\u07CC\x03\x02\x02\x02\u07CC\x8B\x03\x02\x02\x02\u07CD\u07CE\x07*\x02" +
		"\x02\u07CE\u07CF\x05\u013C\x9F\x02\u07CF\u07D3\x07\x9C\x02\x02\u07D0\u07D2" +
		"\x07\xB5\x02\x02\u07D1\u07D0\x03\x02\x02\x02\u07D2\u07D5\x03\x02\x02\x02" +
		"\u07D3\u07D1\x03\x02\x02\x02\u07D3\u07D4\x03\x02\x02\x02\u07D4\u07DD\x03" +
		"\x02\x02\x02\u07D5\u07D3\x03\x02\x02\x02\u07D6\u07DA\x05L\'\x02\u07D7" +
		"\u07D9\x07\xB5\x02\x02\u07D8\u07D7\x03\x02\x02\x02\u07D9\u07DC\x03\x02" +
		"\x02\x02\u07DA\u07D8\x03\x02\x02\x02\u07DA\u07DB\x03\x02\x02\x02\u07DB" +
		"\u07DE\x03\x02\x02\x02\u07DC\u07DA\x03\x02\x02\x02\u07DD\u07D6\x03\x02" +
		"\x02\x02\u07DE\u07DF\x03\x02\x02\x02\u07DF\u07DD\x03\x02\x02\x02\u07DF" +
		"\u07E0\x03\x02\x02\x02\u07E0\x8D\x03\x02\x02\x02\u07E1\u07E2\x07,\x02" +
		"\x02\u07E2\u07E3\x05\u013C\x9F\x02\u07E3\u07E7\x07\x9C\x02\x02\u07E4\u07E6" +
		"\x07\xB5\x02\x02\u07E5\u07E4\x03\x02\x02\x02\u07E6\u07E9\x03\x02\x02\x02" +
		"\u07E7\u07E5\x03\x02\x02\x02\u07E7\u07E8\x03\x02\x02\x02\u07E8\u07F1\x03" +
		"\x02\x02\x02\u07E9\u07E7\x03\x02\x02\x02\u07EA\u07EE\x05L\'\x02\u07EB" +
		"\u07ED\x07\xB5\x02\x02\u07EC\u07EB\x03\x02\x02\x02\u07ED\u07F0\x03\x02" +
		"\x02\x02\u07EE\u07EC\x03\x02\x02\x02\u07EE\u07EF\x03\x02\x02\x02\u07EF" +
		"\u07F2\x03\x02\x02\x02\u07F0\u07EE\x03\x02\x02\x02\u07F1\u07EA\x03\x02" +
		"\x02\x02\u07F2\u07F3\x03\x02\x02\x02\u07F3\u07F1\x03\x02\x02\x02\u07F3" +
		"\u07F4\x03\x02\x02\x02\u07F4\x8F\x03\x02\x02\x02\u07F5\u07F6\x07-\x02" +
		"\x02\u07F6\u07F7\x05\u013C\x9F\x02\u07F7\u07FB\x07\x9C\x02\x02\u07F8\u07FA" +
		"\x07\xB5\x02\x02\u07F9\u07F8\x03\x02\x02\x02\u07FA\u07FD\x03\x02\x02\x02" +
		"\u07FB\u07F9\x03\x02\x02\x02\u07FB\u07FC\x03\x02\x02\x02\u07FC\u0805\x03" +
		"\x02\x02\x02\u07FD\u07FB\x03\x02\x02\x02\u07FE\u0802\x05L\'\x02\u07FF" +
		"\u0801\x07\xB5\x02\x02\u0800\u07FF\x03\x02\x02\x02\u0801\u0804\x03\x02" +
		"\x02\x02\u0802\u0800\x03\x02\x02\x02\u0802\u0803\x03\x02\x02\x02\u0803" +
		"\u0806\x03\x02\x02\x02\u0804\u0802\x03\x02\x02\x02\u0805\u07FE\x03\x02" +
		"\x02\x02\u0806\u0807\x03\x02\x02\x02\u0807\u0805\x03\x02\x02\x02\u0807" +
		"\u0808\x03\x02\x02\x02\u0808\x91\x03\x02\x02\x02\u0809\u080A\x07.\x02" +
		"\x02\u080A\u080B\x05\u013C\x9F\x02\u080B\u080F\x07\x9C\x02\x02\u080C\u080E" +
		"\x07\xB5\x02\x02\u080D\u080C\x03\x02\x02\x02\u080E\u0811\x03\x02\x02\x02" +
		"\u080F\u080D\x03\x02\x02\x02\u080F\u0810\x03\x02\x02\x02\u0810\u0819\x03" +
		"\x02\x02\x02\u0811\u080F\x03\x02\x02\x02\u0812\u0816\x05L\'\x02\u0813" +
		"\u0815\x07\xB5\x02\x02\u0814\u0813\x03\x02\x02\x02\u0815\u0818\x03\x02" +
		"\x02\x02\u0816\u0814\x03\x02\x02\x02\u0816\u0817\x03\x02\x02\x02\u0817" +
		"\u081A\x03\x02\x02\x02\u0818\u0816\x03\x02\x02\x02\u0819\u0812\x03\x02" +
		"\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\u0819\x03\x02\x02\x02\u081B" +
		"\u081C\x03\x02\x02\x02\u081C\x93\x03\x02\x02\x02\u081D\u081E\x07/\x02" +
		"\x02\u081E\u081F\x05\u013C\x9F\x02\u081F\u0823\x07\x9C\x02\x02\u0820\u0822" +
		"\x07\xB5\x02\x02\u0821\u0820\x03\x02\x02\x02\u0822\u0825\x03\x02\x02\x02" +
		"\u0823\u0821\x03\x02\x02\x02\u0823\u0824\x03\x02\x02\x02\u0824\u082D\x03" +
		"\x02\x02\x02\u0825\u0823\x03\x02\x02\x02\u0826\u082A\x05L\'\x02\u0827" +
		"\u0829\x07\xB5\x02\x02\u0828\u0827\x03\x02\x02\x02\u0829\u082C\x03\x02" +
		"\x02\x02\u082A\u0828\x03\x02\x02\x02\u082A\u082B\x03\x02\x02\x02\u082B" +
		"\u082E\x03\x02\x02\x02\u082C\u082A\x03\x02\x02\x02\u082D\u0826\x03\x02" +
		"\x02\x02\u082E\u082F\x03\x02\x02\x02\u082F\u082D\x03\x02\x02\x02\u082F" +
		"\u0830\x03\x02\x02\x02\u0830\x95\x03\x02\x02\x02\u0831\u0832\x070\x02" +
		"\x02\u0832\u0833\x05\u013C\x9F\x02\u0833\u0837\x07\x9C\x02\x02\u0834\u0836" +
		"\x07\xB5\x02\x02\u0835\u0834\x03\x02\x02\x02\u0836\u0839\x03\x02\x02\x02" +
		"\u0837\u0835\x03\x02\x02\x02\u0837\u0838\x03\x02\x02\x02\u0838\u0841\x03" +
		"\x02\x02\x02\u0839\u0837\x03\x02\x02\x02\u083A\u083E\x05L\'\x02\u083B" +
		"\u083D\x07\xB5\x02\x02\u083C\u083B\x03\x02\x02\x02\u083D\u0840\x03\x02" +
		"\x02\x02\u083E\u083C\x03\x02\x02\x02\u083E\u083F\x03\x02\x02\x02\u083F" +
		"\u0842\x03\x02\x02\x02\u0840\u083E\x03\x02\x02\x02\u0841\u083A\x03\x02" +
		"\x02\x02\u0842\u0843\x03\x02\x02\x02\u0843\u0841\x03\x02\x02\x02\u0843" +
		"\u0844\x03\x02\x02\x02\u0844\x97\x03\x02\x02\x02\u0845\u0846\x071\x02" +
		"\x02\u0846\u0847\x05\u013C\x9F\x02\u0847\u084B\x07\x9C\x02\x02\u0848\u084A" +
		"\x07\xB5\x02\x02\u0849\u0848\x03\x02\x02\x02\u084A\u084D\x03\x02\x02\x02" +
		"\u084B\u0849\x03\x02\x02\x02\u084B\u084C\x03\x02\x02\x02\u084C\u0855\x03" +
		"\x02\x02\x02\u084D\u084B\x03\x02\x02\x02\u084E\u0852\x05L\'\x02\u084F" +
		"\u0851\x07\xB5\x02\x02\u0850\u084F\x03\x02\x02\x02\u0851\u0854\x03\x02" +
		"\x02\x02\u0852\u0850\x03\x02\x02\x02\u0852\u0853\x03\x02\x02\x02\u0853" +
		"\u0856\x03\x02\x02\x02\u0854\u0852\x03\x02\x02\x02\u0855\u084E\x03\x02" +
		"\x02\x02\u0856\u0857\x03\x02\x02\x02\u0857\u0855\x03\x02\x02\x02\u0857" +
		"\u0858\x03\x02\x02\x02\u0858\x99\x03\x02\x02\x02\u0859\u085A\x072\x02" +
		"\x02\u085A\u085B\x05\u013C\x9F\x02\u085B\u085F\x07\x9C\x02\x02\u085C\u085E" +
		"\x07\xB5\x02\x02\u085D\u085C\x03\x02\x02\x02\u085E\u0861\x03\x02";
	private static readonly _serializedATNSegment5: string =
		"\x02\x02\u085F\u085D\x03\x02\x02\x02\u085F\u0860\x03\x02\x02\x02\u0860" +
		"\u0869\x03\x02\x02\x02\u0861\u085F\x03\x02\x02\x02\u0862\u0866\x05L\'" +
		"\x02\u0863\u0865\x07\xB5\x02\x02\u0864\u0863\x03\x02\x02\x02\u0865\u0868" +
		"\x03\x02\x02\x02\u0866\u0864\x03\x02\x02\x02\u0866\u0867\x03\x02\x02\x02" +
		"\u0867\u086A\x03\x02\x02\x02\u0868\u0866\x03\x02\x02\x02\u0869\u0862\x03" +
		"\x02\x02\x02\u086A\u086B\x03\x02\x02\x02\u086B\u0869\x03\x02\x02\x02\u086B" +
		"\u086C\x03\x02\x02\x02\u086C\x9B\x03\x02\x02\x02\u086D\u086E\x07+\x02" +
		"\x02\u086E\u086F\x05\u013C\x9F\x02\u086F\u0873\x07\x9C\x02\x02\u0870\u0872" +
		"\x07\xB5\x02\x02\u0871\u0870\x03\x02\x02\x02\u0872\u0875\x03\x02\x02\x02" +
		"\u0873\u0871\x03\x02\x02\x02\u0873\u0874\x03\x02\x02\x02\u0874\u087D\x03" +
		"\x02\x02\x02\u0875\u0873\x03\x02\x02\x02\u0876\u087A\x05L\'\x02\u0877" +
		"\u0879\x07\xB5\x02\x02\u0878\u0877\x03\x02\x02\x02\u0879\u087C\x03\x02" +
		"\x02\x02\u087A\u0878\x03\x02\x02\x02\u087A\u087B\x03\x02\x02\x02\u087B" +
		"\u087E\x03\x02\x02\x02\u087C\u087A\x03\x02\x02\x02\u087D\u0876\x03\x02" +
		"\x02\x02\u087E\u087F\x03\x02\x02\x02\u087F\u087D\x03\x02\x02\x02\u087F" +
		"\u0880\x03\x02\x02\x02\u0880\x9D\x03\x02\x02\x02\u0881\u0882\x073\x02" +
		"\x02\u0882\u0883\x05\u013C\x9F\x02\u0883\u0887\x07\x9C\x02\x02\u0884\u0886" +
		"\x07\xB5\x02\x02\u0885\u0884\x03\x02\x02\x02\u0886\u0889\x03\x02\x02\x02" +
		"\u0887\u0885\x03\x02\x02\x02\u0887\u0888\x03\x02\x02\x02\u0888\u0891\x03" +
		"\x02\x02\x02\u0889\u0887\x03\x02\x02\x02\u088A\u088E\x05L\'\x02\u088B" +
		"\u088D\x07\xB5\x02\x02\u088C\u088B\x03\x02\x02\x02\u088D\u0890\x03\x02" +
		"\x02\x02\u088E\u088C\x03\x02\x02\x02\u088E\u088F\x03\x02\x02\x02\u088F" +
		"\u0892\x03\x02\x02\x02\u0890\u088E\x03\x02\x02\x02\u0891\u088A\x03\x02" +
		"\x02\x02\u0892\u0893\x03\x02\x02\x02\u0893\u0891\x03\x02\x02\x02\u0893" +
		"\u0894\x03\x02\x02\x02\u0894\x9F\x03\x02\x02\x02\u0895\u0896\x07G\x02" +
		"\x02\u0896\u0897\x05\u013C\x9F\x02\u0897\u089B\x07\x9C\x02\x02\u0898\u089A" +
		"\x07\xB5\x02\x02\u0899\u0898\x03\x02\x02\x02\u089A\u089D\x03\x02\x02\x02" +
		"\u089B\u0899\x03\x02\x02\x02\u089B\u089C\x03\x02\x02\x02\u089C\u08A5\x03" +
		"\x02\x02\x02\u089D\u089B\x03\x02\x02\x02\u089E\u08A2\x05L\'\x02\u089F" +
		"\u08A1\x07\xB5\x02\x02\u08A0\u089F\x03\x02\x02\x02\u08A1\u08A4\x03\x02" +
		"\x02\x02\u08A2\u08A0\x03\x02\x02\x02\u08A2\u08A3\x03\x02\x02\x02\u08A3" +
		"\u08A6\x03\x02\x02\x02\u08A4\u08A2\x03\x02\x02\x02\u08A5\u089E\x03\x02" +
		"\x02\x02\u08A6\u08A7\x03\x02\x02\x02\u08A7\u08A5\x03\x02\x02\x02\u08A7" +
		"\u08A8\x03\x02\x02\x02\u08A8\xA1\x03\x02\x02\x02\u08A9\u08AA\x07H\x02" +
		"\x02\u08AA\u08AB\x05\u013C\x9F\x02\u08AB\u08AF\x07\x9C\x02\x02\u08AC\u08AE" +
		"\x07\xB5\x02\x02\u08AD\u08AC\x03\x02\x02\x02\u08AE\u08B1\x03\x02\x02\x02" +
		"\u08AF\u08AD\x03\x02\x02\x02\u08AF\u08B0\x03\x02\x02\x02\u08B0\u08B9\x03" +
		"\x02\x02\x02\u08B1\u08AF\x03\x02\x02\x02\u08B2\u08B6\x05L\'\x02\u08B3" +
		"\u08B5\x07\xB5\x02\x02\u08B4\u08B3\x03\x02\x02\x02\u08B5\u08B8\x03\x02" +
		"\x02\x02\u08B6\u08B4\x03\x02\x02\x02\u08B6\u08B7\x03\x02\x02\x02\u08B7" +
		"\u08BA\x03\x02\x02\x02\u08B8\u08B6\x03\x02\x02\x02\u08B9\u08B2\x03\x02" +
		"\x02\x02\u08BA\u08BB\x03\x02\x02\x02\u08BB\u08B9\x03\x02\x02\x02\u08BB" +
		"\u08BC\x03\x02\x02\x02\u08BC\xA3\x03\x02\x02\x02\u08BD\u08BE\x07I\x02" +
		"\x02\u08BE\u08BF\x05\u0142\xA2\x02\u08BF\u08C3\x07\x9C\x02\x02\u08C0\u08C2" +
		"\x07\xB5\x02\x02\u08C1\u08C0\x03\x02\x02\x02\u08C2\u08C5\x03\x02\x02\x02" +
		"\u08C3\u08C1\x03\x02\x02\x02\u08C3\u08C4\x03\x02\x02\x02\u08C4\u08CD\x03" +
		"\x02\x02\x02\u08C5\u08C3\x03\x02\x02\x02\u08C6\u08CA\x05L\'\x02\u08C7" +
		"\u08C9\x07\xB5\x02\x02\u08C8\u08C7\x03\x02\x02\x02\u08C9\u08CC\x03\x02" +
		"\x02\x02\u08CA\u08C8\x03\x02\x02\x02\u08CA\u08CB\x03\x02\x02\x02\u08CB" +
		"\u08CE\x03\x02\x02\x02\u08CC\u08CA\x03\x02\x02\x02\u08CD\u08C6\x03\x02" +
		"\x02\x02\u08CE\u08CF\x03\x02\x02\x02\u08CF\u08CD\x03\x02\x02\x02\u08CF" +
		"\u08D0\x03\x02\x02\x02\u08D0\xA5\x03\x02\x02\x02\u08D1\u08D2\x07J\x02" +
		"\x02\u08D2\u08D3\x05\u0142\xA2\x02\u08D3\u08D7\x07\x9C\x02\x02\u08D4\u08D6" +
		"\x07\xB5\x02\x02\u08D5\u08D4\x03\x02\x02\x02\u08D6\u08D9\x03\x02\x02\x02" +
		"\u08D7\u08D5\x03\x02\x02\x02\u08D7\u08D8\x03\x02\x02\x02\u08D8\u08E1\x03" +
		"\x02\x02\x02\u08D9\u08D7\x03\x02\x02\x02\u08DA\u08DE\x05L\'\x02\u08DB" +
		"\u08DD\x07\xB5\x02\x02\u08DC\u08DB\x03\x02\x02\x02\u08DD\u08E0\x03\x02" +
		"\x02\x02\u08DE\u08DC\x03\x02\x02\x02\u08DE\u08DF\x03\x02\x02\x02\u08DF" +
		"\u08E2\x03\x02\x02\x02\u08E0\u08DE\x03\x02\x02\x02\u08E1\u08DA\x03\x02" +
		"\x02\x02\u08E2\u08E3\x03\x02\x02\x02\u08E3\u08E1\x03\x02\x02\x02\u08E3" +
		"\u08E4\x03\x02\x02\x02\u08E4\xA7\x03\x02\x02\x02\u08E5\u08E6\x07K\x02" +
		"\x02\u08E6\u08E7\x05\u0142\xA2\x02\u08E7\u08EB\x07\x9C\x02\x02\u08E8\u08EA" +
		"\x07\xB5\x02\x02\u08E9\u08E8\x03\x02\x02\x02\u08EA\u08ED\x03\x02\x02\x02" +
		"\u08EB\u08E9\x03\x02\x02\x02\u08EB\u08EC\x03\x02\x02\x02\u08EC\u08F5\x03" +
		"\x02\x02\x02\u08ED\u08EB\x03\x02\x02\x02\u08EE\u08F2\x05L\'\x02\u08EF" +
		"\u08F1\x07\xB5\x02\x02\u08F0\u08EF\x03\x02\x02\x02\u08F1\u08F4\x03\x02" +
		"\x02\x02\u08F2\u08F0\x03\x02\x02\x02\u08F2\u08F3\x03\x02\x02\x02\u08F3" +
		"\u08F6\x03\x02\x02\x02\u08F4\u08F2\x03\x02\x02\x02\u08F5\u08EE\x03\x02" +
		"\x02\x02\u08F6\u08F7\x03\x02\x02\x02\u08F7\u08F5\x03\x02\x02\x02\u08F7" +
		"\u08F8\x03\x02\x02\x02\u08F8\xA9\x03\x02\x02\x02\u08F9\u08FA\x07L\x02" +
		"\x02\u08FA\u08FB\x05\u0142\xA2\x02\u08FB\u08FF\x07\x9C\x02\x02\u08FC\u08FE" +
		"\x07\xB5\x02\x02\u08FD\u08FC\x03\x02\x02\x02\u08FE\u0901\x03\x02\x02\x02" +
		"\u08FF\u08FD\x03\x02\x02\x02\u08FF\u0900\x03\x02\x02\x02\u0900\u0909\x03" +
		"\x02\x02\x02\u0901\u08FF\x03\x02\x02\x02\u0902\u0906\x05L\'\x02\u0903" +
		"\u0905\x07\xB5\x02\x02\u0904\u0903\x03\x02\x02\x02\u0905\u0908\x03\x02" +
		"\x02\x02\u0906\u0904\x03\x02\x02\x02\u0906\u0907\x03\x02\x02\x02\u0907" +
		"\u090A\x03\x02\x02\x02\u0908\u0906\x03\x02\x02\x02\u0909\u0902\x03\x02" +
		"\x02\x02\u090A\u090B\x03\x02\x02\x02\u090B\u0909\x03\x02\x02\x02\u090B" +
		"\u090C\x03\x02\x02\x02\u090C\xAB\x03\x02\x02\x02\u090D\u090E\x07M\x02" +
		"\x02\u090E\u090F\x05\u0142\xA2\x02\u090F\u0913\x07\x9C\x02\x02\u0910\u0912" +
		"\x07\xB5\x02\x02\u0911\u0910\x03\x02\x02\x02\u0912\u0915\x03\x02\x02\x02" +
		"\u0913\u0911\x03\x02\x02\x02\u0913\u0914\x03\x02\x02\x02\u0914\u091D\x03" +
		"\x02\x02\x02\u0915\u0913\x03\x02\x02\x02\u0916\u091A\x05L\'\x02\u0917" +
		"\u0919\x07\xB5\x02\x02\u0918\u0917\x03\x02\x02\x02\u0919\u091C\x03\x02" +
		"\x02\x02\u091A\u0918\x03\x02\x02\x02\u091A\u091B\x03\x02\x02\x02\u091B" +
		"\u091E\x03\x02\x02\x02\u091C\u091A\x03\x02\x02\x02\u091D\u0916\x03\x02" +
		"\x02\x02\u091E\u091F\x03\x02\x02\x02\u091F\u091D\x03\x02\x02\x02\u091F" +
		"\u0920\x03\x02\x02\x02\u0920\xAD\x03\x02\x02\x02\u0921\u0922\x07N\x02" +
		"\x02\u0922\u0923\x05\u0142\xA2\x02\u0923\u0927\x07\x9C\x02\x02\u0924\u0926" +
		"\x07\xB5\x02\x02\u0925\u0924\x03\x02\x02\x02\u0926\u0929\x03\x02\x02\x02" +
		"\u0927\u0925\x03\x02\x02\x02\u0927\u0928\x03\x02\x02\x02\u0928\u0931\x03" +
		"\x02\x02\x02\u0929\u0927\x03\x02\x02\x02\u092A\u092E\x05L\'\x02\u092B" +
		"\u092D\x07\xB5\x02\x02\u092C\u092B\x03\x02\x02\x02\u092D\u0930\x03\x02" +
		"\x02\x02\u092E\u092C\x03\x02\x02\x02\u092E\u092F\x03\x02\x02\x02\u092F" +
		"\u0932\x03\x02\x02\x02\u0930\u092E\x03\x02\x02\x02\u0931\u092A\x03\x02" +
		"\x02\x02\u0932\u0933\x03\x02\x02\x02\u0933\u0931\x03\x02\x02\x02\u0933" +
		"\u0934\x03\x02\x02\x02\u0934\xAF\x03\x02\x02\x02\u0935\u0936\x07O\x02" +
		"\x02\u0936\u0937\x05\u0142\xA2\x02\u0937\u093B\x07\x9C\x02\x02\u0938\u093A" +
		"\x07\xB5\x02\x02\u0939\u0938\x03\x02\x02\x02\u093A\u093D\x03\x02\x02\x02" +
		"\u093B\u0939\x03\x02\x02\x02\u093B\u093C\x03\x02\x02\x02\u093C\u0945\x03" +
		"\x02\x02\x02\u093D\u093B\x03\x02\x02\x02\u093E\u0942\x05L\'\x02\u093F" +
		"\u0941\x07\xB5\x02\x02\u0940\u093F\x03\x02\x02\x02\u0941\u0944\x03\x02" +
		"\x02\x02\u0942\u0940\x03\x02\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943" +
		"\u0946\x03\x02\x02\x02\u0944\u0942\x03\x02\x02\x02\u0945\u093E\x03\x02" +
		"\x02\x02\u0946\u0947\x03\x02\x02\x02\u0947\u0945\x03\x02\x02\x02\u0947" +
		"\u0948\x03\x02\x02\x02\u0948\xB1\x03\x02\x02\x02\u0949\u094A\x07P\x02" +
		"\x02\u094A\u094B\x05\u0142\xA2\x02\u094B\u094F\x07\x9C\x02\x02\u094C\u094E" +
		"\x07\xB5\x02\x02\u094D\u094C\x03\x02\x02\x02\u094E\u0951\x03\x02\x02\x02" +
		"\u094F\u094D\x03\x02\x02\x02\u094F\u0950\x03\x02\x02\x02\u0950\u0959\x03" +
		"\x02\x02\x02\u0951\u094F\x03\x02\x02\x02\u0952\u0956\x05L\'\x02\u0953" +
		"\u0955\x07\xB5\x02\x02\u0954\u0953\x03\x02\x02\x02\u0955\u0958\x03\x02" +
		"\x02\x02\u0956\u0954\x03\x02\x02\x02\u0956\u0957\x03\x02\x02\x02\u0957" +
		"\u095A\x03\x02\x02\x02\u0958\u0956\x03\x02\x02\x02\u0959\u0952\x03\x02" +
		"\x02\x02\u095A\u095B\x03\x02\x02\x02\u095B\u0959\x03\x02\x02\x02\u095B" +
		"\u095C\x03\x02\x02\x02\u095C\xB3\x03\x02\x02\x02\u095D\u095E\x07Q\x02" +
		"\x02\u095E\u095F\x05\u0142\xA2\x02\u095F\u0963\x07\x9C\x02\x02\u0960\u0962" +
		"\x07\xB5\x02\x02\u0961\u0960\x03\x02\x02\x02\u0962\u0965\x03\x02\x02\x02" +
		"\u0963\u0961\x03\x02\x02\x02\u0963\u0964\x03\x02\x02\x02\u0964\u096D\x03" +
		"\x02\x02\x02\u0965\u0963\x03\x02\x02\x02\u0966\u096A\x05L\'\x02\u0967" +
		"\u0969\x07\xB5\x02\x02\u0968\u0967\x03\x02\x02\x02\u0969\u096C\x03\x02" +
		"\x02\x02\u096A\u0968\x03\x02\x02\x02\u096A\u096B\x03\x02\x02\x02\u096B" +
		"\u096E\x03\x02\x02\x02\u096C\u096A\x03\x02\x02\x02\u096D\u0966\x03\x02" +
		"\x02\x02\u096E\u096F\x03\x02\x02\x02\u096F\u096D\x03\x02\x02\x02\u096F" +
		"\u0970\x03\x02\x02\x02\u0970\xB5\x03\x02\x02\x02\u0971\u0972\x07R\x02" +
		"\x02\u0972\u0973\x05\u0142\xA2\x02\u0973\u0977\x07\x9C\x02\x02\u0974\u0976" +
		"\x07\xB5\x02\x02\u0975\u0974\x03\x02\x02\x02\u0976\u0979\x03\x02\x02\x02" +
		"\u0977\u0975\x03\x02\x02\x02\u0977\u0978\x03\x02\x02\x02\u0978\u0981\x03" +
		"\x02\x02\x02\u0979\u0977\x03\x02\x02\x02\u097A\u097E\x05L\'\x02\u097B" +
		"\u097D\x07\xB5\x02\x02\u097C\u097B\x03\x02\x02\x02\u097D\u0980\x03\x02" +
		"\x02\x02\u097E\u097C\x03\x02\x02\x02\u097E\u097F\x03\x02\x02\x02\u097F" +
		"\u0982\x03\x02\x02\x02\u0980\u097E\x03\x02\x02\x02\u0981\u097A\x03\x02" +
		"\x02\x02\u0982\u0983\x03\x02\x02\x02\u0983\u0981\x03\x02\x02\x02\u0983" +
		"\u0984\x03\x02\x02\x02\u0984\xB7\x03\x02\x02\x02\u0985\u0986\x07S\x02" +
		"\x02\u0986\u0987\x05\u0142\xA2\x02\u0987\u098B\x07\x9C\x02\x02\u0988\u098A" +
		"\x07\xB5\x02\x02\u0989\u0988\x03\x02\x02\x02\u098A\u098D\x03\x02\x02\x02" +
		"\u098B\u0989\x03\x02\x02\x02\u098B\u098C\x03\x02\x02\x02\u098C\u0995\x03" +
		"\x02\x02\x02\u098D\u098B\x03\x02\x02\x02\u098E\u0992\x05L\'\x02\u098F" +
		"\u0991\x07\xB5\x02\x02\u0990\u098F\x03\x02\x02\x02\u0991\u0994\x03\x02" +
		"\x02\x02\u0992\u0990\x03\x02\x02\x02\u0992\u0993\x03\x02\x02\x02\u0993" +
		"\u0996\x03\x02\x02\x02\u0994\u0992\x03\x02\x02\x02\u0995\u098E\x03\x02" +
		"\x02\x02\u0996\u0997\x03\x02\x02\x02\u0997\u0995\x03\x02\x02\x02\u0997" +
		"\u0998\x03\x02\x02\x02\u0998\xB9\x03\x02\x02\x02\u0999\u099A\x07T\x02" +
		"\x02\u099A\u099B\x05\u0142\xA2\x02\u099B\u099F\x07\x9C\x02\x02\u099C\u099E" +
		"\x07\xB5\x02\x02\u099D\u099C\x03\x02\x02\x02\u099E\u09A1\x03\x02\x02\x02" +
		"\u099F\u099D\x03\x02\x02\x02\u099F\u09A0\x03\x02\x02\x02\u09A0\u09A9\x03" +
		"\x02\x02\x02\u09A1\u099F\x03\x02\x02\x02\u09A2\u09A6\x05L\'\x02\u09A3" +
		"\u09A5\x07\xB5\x02\x02\u09A4\u09A3\x03\x02\x02\x02\u09A5\u09A8\x03\x02" +
		"\x02\x02\u09A6\u09A4\x03\x02\x02\x02\u09A6\u09A7\x03\x02\x02\x02\u09A7" +
		"\u09AA\x03\x02\x02\x02\u09A8\u09A6\x03\x02\x02\x02\u09A9\u09A2\x03\x02" +
		"\x02\x02\u09AA\u09AB\x03\x02\x02\x02\u09AB\u09A9\x03\x02\x02\x02\u09AB" +
		"\u09AC\x03\x02\x02\x02\u09AC\xBB\x03\x02\x02\x02\u09AD\u09AE\x07U\x02" +
		"\x02\u09AE\u09AF\x05\u0142\xA2\x02\u09AF\u09B3\x07\x9C\x02\x02\u09B0\u09B2" +
		"\x07\xB5\x02\x02\u09B1\u09B0\x03\x02\x02\x02\u09B2\u09B5\x03\x02\x02\x02" +
		"\u09B3\u09B1\x03\x02\x02\x02\u09B3\u09B4\x03\x02\x02\x02\u09B4\u09BD\x03" +
		"\x02\x02\x02\u09B5\u09B3\x03\x02\x02\x02\u09B6\u09BA\x05L\'\x02\u09B7" +
		"\u09B9\x07\xB5\x02\x02\u09B8\u09B7\x03\x02\x02\x02\u09B9\u09BC\x03\x02" +
		"\x02\x02\u09BA\u09B8\x03\x02\x02\x02\u09BA\u09BB\x03\x02\x02\x02\u09BB" +
		"\u09BE\x03\x02\x02\x02\u09BC\u09BA\x03\x02\x02\x02\u09BD\u09B6\x03\x02" +
		"\x02\x02\u09BE\u09BF\x03\x02\x02\x02\u09BF\u09BD\x03\x02\x02\x02\u09BF" +
		"\u09C0\x03\x02\x02\x02\u09C0\xBD\x03\x02\x02\x02\u09C1\u09C2\x07V\x02" +
		"\x02\u09C2\u09C3\x05\u0142\xA2\x02\u09C3\u09C7\x07\x9C\x02\x02\u09C4\u09C6" +
		"\x07\xB5\x02\x02\u09C5\u09C4\x03\x02\x02\x02\u09C6\u09C9\x03\x02\x02\x02" +
		"\u09C7\u09C5\x03\x02\x02\x02\u09C7\u09C8\x03\x02\x02\x02\u09C8\u09D1\x03" +
		"\x02\x02\x02\u09C9\u09C7\x03\x02\x02\x02\u09CA\u09CE\x05L\'\x02\u09CB" +
		"\u09CD\x07\xB5\x02\x02\u09CC\u09CB\x03\x02\x02\x02\u09CD\u09D0\x03\x02" +
		"\x02\x02\u09CE\u09CC\x03\x02\x02\x02\u09CE\u09CF\x03\x02\x02\x02\u09CF" +
		"\u09D2\x03\x02\x02\x02\u09D0\u09CE\x03\x02\x02\x02\u09D1\u09CA\x03\x02" +
		"\x02\x02\u09D2\u09D3\x03\x02\x02\x02\u09D3\u09D1\x03\x02\x02\x02\u09D3" +
		"\u09D4\x03\x02\x02\x02\u09D4\xBF\x03\x02\x02\x02\u09D5\u09D6\x07W\x02" +
		"\x02\u09D6\u09D7\x05\u0142\xA2\x02\u09D7\u09DB\x07\x9C\x02\x02\u09D8\u09DA" +
		"\x07\xB5\x02\x02\u09D9\u09D8\x03\x02\x02\x02\u09DA\u09DD\x03\x02\x02\x02" +
		"\u09DB\u09D9\x03\x02\x02\x02\u09DB\u09DC\x03\x02\x02\x02\u09DC\u09E5\x03" +
		"\x02\x02\x02\u09DD\u09DB\x03\x02\x02\x02\u09DE\u09E2\x05L\'\x02\u09DF" +
		"\u09E1\x07\xB5\x02\x02\u09E0\u09DF\x03\x02\x02\x02\u09E1\u09E4\x03\x02" +
		"\x02\x02\u09E2\u09E0\x03\x02\x02\x02\u09E2\u09E3\x03\x02\x02\x02\u09E3" +
		"\u09E6\x03\x02\x02\x02\u09E4\u09E2\x03\x02\x02\x02\u09E5\u09DE\x03\x02" +
		"\x02\x02\u09E6\u09E7\x03\x02\x02\x02\u09E7\u09E5\x03\x02\x02\x02\u09E7" +
		"\u09E8\x03\x02\x02\x02\u09E8\xC1\x03\x02\x02\x02\u09E9\u09EA\x07X\x02" +
		"\x02\u09EA\u09EB\x05\u0142\xA2\x02\u09EB\u09EF\x07\x9C\x02\x02\u09EC\u09EE" +
		"\x07\xB5\x02\x02\u09ED\u09EC\x03\x02\x02\x02\u09EE\u09F1\x03\x02\x02\x02" +
		"\u09EF\u09ED\x03\x02\x02\x02\u09EF\u09F0\x03\x02\x02\x02\u09F0\u09F9\x03" +
		"\x02\x02\x02\u09F1\u09EF\x03\x02\x02\x02\u09F2\u09F6\x05L\'\x02\u09F3" +
		"\u09F5\x07\xB5\x02\x02\u09F4\u09F3\x03\x02\x02\x02\u09F5\u09F8\x03\x02" +
		"\x02\x02\u09F6\u09F4\x03\x02\x02\x02\u09F6\u09F7\x03\x02\x02\x02\u09F7" +
		"\u09FA\x03\x02\x02\x02\u09F8\u09F6\x03\x02\x02\x02\u09F9\u09F2\x03\x02" +
		"\x02\x02\u09FA\u09FB\x03\x02\x02\x02\u09FB\u09F9\x03\x02\x02\x02\u09FB" +
		"\u09FC\x03\x02\x02\x02\u09FC\xC3\x03\x02\x02\x02\u09FD\u09FE\x07Y\x02" +
		"\x02\u09FE\u09FF\x05\u0142\xA2\x02\u09FF\u0A03\x07\x9C\x02\x02\u0A00\u0A02" +
		"\x07\xB5\x02\x02\u0A01\u0A00\x03\x02\x02\x02\u0A02\u0A05\x03\x02\x02\x02" +
		"\u0A03\u0A01\x03\x02\x02\x02\u0A03\u0A04\x03\x02\x02\x02\u0A04\u0A0D\x03" +
		"\x02\x02\x02\u0A05\u0A03\x03\x02\x02\x02\u0A06\u0A0A\x05L\'\x02\u0A07" +
		"\u0A09\x07\xB5\x02\x02\u0A08\u0A07\x03\x02\x02\x02\u0A09\u0A0C\x03\x02" +
		"\x02\x02\u0A0A\u0A08\x03\x02\x02\x02\u0A0A\u0A0B\x03\x02\x02\x02\u0A0B" +
		"\u0A0E\x03\x02\x02\x02\u0A0C\u0A0A\x03\x02\x02\x02\u0A0D\u0A06\x03\x02" +
		"\x02\x02\u0A0E\u0A0F\x03\x02\x02\x02\u0A0F\u0A0D\x03\x02\x02\x02\u0A0F" +
		"\u0A10\x03\x02\x02\x02\u0A10\xC5\x03\x02\x02\x02\u0A11\u0A12\x07Z\x02" +
		"\x02\u0A12\u0A13\x05\u0142\xA2\x02\u0A13\u0A17\x07\x9C\x02\x02\u0A14\u0A16" +
		"\x07\xB5\x02\x02\u0A15\u0A14\x03\x02\x02\x02\u0A16\u0A19\x03\x02\x02\x02" +
		"\u0A17\u0A15\x03\x02\x02\x02\u0A17\u0A18\x03\x02\x02\x02\u0A18\u0A21\x03" +
		"\x02\x02\x02\u0A19\u0A17\x03\x02\x02\x02\u0A1A\u0A1E\x05L\'\x02\u0A1B" +
		"\u0A1D\x07\xB5\x02\x02\u0A1C\u0A1B\x03\x02\x02\x02\u0A1D\u0A20\x03\x02" +
		"\x02\x02\u0A1E\u0A1C\x03\x02\x02\x02\u0A1E\u0A1F\x03\x02\x02\x02\u0A1F" +
		"\u0A22\x03\x02\x02\x02\u0A20\u0A1E\x03\x02\x02\x02\u0A21\u0A1A\x03\x02" +
		"\x02\x02\u0A22\u0A23\x03\x02\x02\x02\u0A23\u0A21\x03\x02\x02\x02\u0A23" +
		"\u0A24\x03\x02\x02\x02\u0A24\xC7\x03\x02\x02\x02\u0A25\u0A26\x07[\x02" +
		"\x02\u0A26\u0A27\x05\u0142\xA2\x02\u0A27\u0A2B\x07\x9C\x02\x02\u0A28\u0A2A" +
		"\x07\xB5\x02\x02\u0A29\u0A28\x03\x02\x02\x02\u0A2A\u0A2D\x03\x02\x02\x02" +
		"\u0A2B\u0A29\x03\x02\x02\x02\u0A2B\u0A2C\x03\x02\x02\x02\u0A2C\u0A35\x03" +
		"\x02\x02\x02\u0A2D\u0A2B\x03\x02\x02\x02\u0A2E\u0A32\x05L\'\x02\u0A2F" +
		"\u0A31\x07\xB5\x02\x02\u0A30\u0A2F\x03\x02\x02\x02\u0A31\u0A34\x03\x02" +
		"\x02\x02\u0A32\u0A30\x03\x02\x02\x02\u0A32\u0A33\x03\x02\x02\x02\u0A33" +
		"\u0A36\x03\x02\x02\x02\u0A34\u0A32\x03\x02\x02\x02\u0A35\u0A2E\x03\x02" +
		"\x02\x02\u0A36\u0A37\x03\x02\x02\x02\u0A37\u0A35\x03\x02\x02\x02\u0A37" +
		"\u0A38\x03\x02\x02\x02\u0A38\xC9\x03\x02\x02\x02\u0A39\u0A3A\x07\\\x02" +
		"\x02\u0A3A\u0A3B\x05\u0142\xA2\x02\u0A3B\u0A3F\x07\x9C\x02\x02\u0A3C\u0A3E" +
		"\x07\xB5\x02\x02\u0A3D\u0A3C\x03\x02\x02\x02\u0A3E\u0A41\x03\x02\x02\x02" +
		"\u0A3F\u0A3D\x03\x02\x02\x02\u0A3F\u0A40\x03\x02\x02\x02\u0A40\u0A49\x03" +
		"\x02\x02\x02\u0A41\u0A3F\x03\x02\x02\x02\u0A42\u0A46\x05L\'\x02\u0A43" +
		"\u0A45\x07\xB5\x02\x02\u0A44\u0A43\x03\x02\x02\x02\u0A45\u0A48\x03\x02" +
		"\x02\x02\u0A46\u0A44\x03\x02\x02\x02\u0A46\u0A47\x03\x02\x02\x02\u0A47" +
		"\u0A4A\x03\x02\x02\x02\u0A48\u0A46\x03\x02\x02\x02\u0A49\u0A42\x03\x02" +
		"\x02\x02\u0A4A\u0A4B\x03\x02\x02\x02\u0A4B\u0A49\x03\x02\x02\x02\u0A4B" +
		"\u0A4C\x03\x02\x02\x02\u0A4C\xCB\x03\x02\x02\x02\u0A4D\u0A4E\x07]\x02" +
		"\x02\u0A4E\u0A4F\x05\u0142\xA2\x02\u0A4F\u0A53\x07\x9C\x02\x02\u0A50\u0A52" +
		"\x07\xB5\x02\x02\u0A51\u0A50\x03\x02\x02\x02\u0A52\u0A55\x03\x02\x02\x02" +
		"\u0A53\u0A51\x03\x02\x02\x02\u0A53\u0A54\x03\x02\x02\x02\u0A54\u0A5D\x03" +
		"\x02\x02\x02\u0A55\u0A53\x03\x02\x02\x02\u0A56\u0A5A\x05L\'\x02\u0A57" +
		"\u0A59\x07\xB5\x02\x02\u0A58\u0A57\x03\x02\x02\x02\u0A59\u0A5C\x03\x02" +
		"\x02\x02\u0A5A\u0A58\x03\x02\x02\x02\u0A5A\u0A5B\x03\x02\x02\x02\u0A5B" +
		"\u0A5E\x03\x02\x02\x02\u0A5C\u0A5A\x03\x02\x02\x02\u0A5D\u0A56\x03\x02" +
		"\x02\x02\u0A5E\u0A5F\x03\x02\x02\x02\u0A5F\u0A5D\x03\x02\x02\x02\u0A5F" +
		"\u0A60\x03\x02\x02\x02\u0A60\xCD\x03\x02\x02\x02\u0A61\u0A62\x07^\x02" +
		"\x02\u0A62\u0A63\x05\u0142\xA2\x02\u0A63\u0A67\x07\x9C\x02\x02\u0A64\u0A66" +
		"\x07\xB5\x02\x02\u0A65\u0A64\x03\x02\x02\x02\u0A66\u0A69\x03\x02\x02\x02" +
		"\u0A67\u0A65\x03\x02\x02\x02\u0A67\u0A68\x03\x02\x02\x02\u0A68\u0A71\x03" +
		"\x02\x02\x02\u0A69\u0A67\x03\x02\x02\x02\u0A6A\u0A6E\x05L\'\x02\u0A6B" +
		"\u0A6D\x07\xB5\x02\x02\u0A6C\u0A6B\x03\x02\x02\x02\u0A6D\u0A70\x03\x02" +
		"\x02\x02\u0A6E\u0A6C\x03\x02\x02\x02\u0A6E\u0A6F\x03\x02\x02\x02\u0A6F" +
		"\u0A72\x03\x02\x02\x02\u0A70\u0A6E\x03\x02\x02\x02\u0A71\u0A6A\x03\x02" +
		"\x02\x02\u0A72\u0A73\x03\x02\x02\x02\u0A73\u0A71\x03\x02\x02\x02\u0A73" +
		"\u0A74\x03\x02\x02\x02\u0A74\xCF\x03\x02\x02\x02\u0A75\u0A76\x07_\x02" +
		"\x02\u0A76\u0A77\x05\u0142\xA2\x02\u0A77\u0A7B\x07\x9C\x02\x02\u0A78\u0A7A" +
		"\x07\xB5\x02\x02\u0A79\u0A78\x03\x02\x02\x02\u0A7A\u0A7D\x03\x02\x02\x02" +
		"\u0A7B\u0A79\x03\x02\x02\x02\u0A7B\u0A7C\x03\x02\x02\x02\u0A7C\u0A85\x03" +
		"\x02\x02\x02\u0A7D\u0A7B\x03\x02\x02\x02\u0A7E\u0A82\x05L\'\x02\u0A7F" +
		"\u0A81\x07\xB5\x02\x02\u0A80\u0A7F\x03\x02\x02\x02\u0A81\u0A84\x03\x02" +
		"\x02\x02\u0A82\u0A80\x03\x02\x02\x02\u0A82\u0A83\x03\x02\x02\x02\u0A83" +
		"\u0A86\x03\x02\x02\x02\u0A84\u0A82\x03\x02\x02\x02\u0A85\u0A7E\x03\x02" +
		"\x02\x02\u0A86\u0A87\x03\x02\x02\x02\u0A87\u0A85\x03\x02\x02\x02\u0A87" +
		"\u0A88\x03\x02\x02\x02\u0A88\xD1\x03\x02\x02\x02\u0A89\u0A8A\x07`\x02" +
		"\x02\u0A8A\u0A8B\x05\u013C\x9F\x02\u0A8B\u0A8F\x07\x9C\x02\x02\u0A8C\u0A8E" +
		"\x07\xB5\x02\x02\u0A8D\u0A8C\x03\x02\x02\x02\u0A8E\u0A91\x03\x02\x02\x02" +
		"\u0A8F\u0A8D\x03\x02\x02\x02\u0A8F\u0A90\x03\x02\x02\x02\u0A90\u0A99\x03" +
		"\x02\x02\x02\u0A91\u0A8F\x03\x02\x02\x02\u0A92\u0A96\x05L\'\x02\u0A93" +
		"\u0A95\x07\xB5\x02\x02\u0A94\u0A93\x03\x02\x02\x02\u0A95\u0A98\x03\x02" +
		"\x02\x02\u0A96\u0A94\x03\x02\x02\x02\u0A96\u0A97\x03\x02\x02\x02\u0A97" +
		"\u0A9A\x03\x02\x02\x02\u0A98\u0A96\x03\x02\x02\x02\u0A99\u0A92\x03\x02" +
		"\x02\x02\u0A9A\u0A9B\x03\x02\x02\x02\u0A9B\u0A99\x03\x02\x02\x02\u0A9B" +
		"\u0A9C\x03\x02\x02\x02\u0A9C\xD3\x03\x02\x02\x02\u0A9D\u0A9E\x07a\x02" +
		"\x02\u0A9E\u0A9F\x05\u013C\x9F\x02\u0A9F\u0AA3\x07\x9C\x02\x02\u0AA0\u0AA2" +
		"\x07\xB5\x02\x02\u0AA1\u0AA0\x03\x02\x02\x02\u0AA2\u0AA5\x03\x02\x02\x02" +
		"\u0AA3\u0AA1\x03\x02\x02\x02\u0AA3\u0AA4\x03\x02\x02\x02\u0AA4\u0AAD\x03" +
		"\x02\x02\x02\u0AA5\u0AA3\x03\x02\x02\x02\u0AA6\u0AAA\x05L\'\x02\u0AA7" +
		"\u0AA9\x07\xB5\x02\x02\u0AA8\u0AA7\x03\x02\x02\x02\u0AA9\u0AAC\x03\x02" +
		"\x02\x02\u0AAA\u0AA8\x03\x02\x02\x02\u0AAA\u0AAB\x03\x02\x02\x02\u0AAB" +
		"\u0AAE\x03\x02\x02\x02\u0AAC\u0AAA\x03\x02\x02\x02\u0AAD\u0AA6\x03\x02" +
		"\x02\x02\u0AAE\u0AAF\x03\x02\x02\x02\u0AAF\u0AAD\x03\x02\x02\x02\u0AAF" +
		"\u0AB0\x03\x02\x02\x02\u0AB0\xD5\x03\x02\x02\x02\u0AB1\u0AB2\x07b\x02" +
		"\x02\u0AB2\u0AB3\x05\u013C\x9F\x02\u0AB3\u0AB7\x07\x9C\x02\x02\u0AB4\u0AB6" +
		"\x07\xB5\x02\x02\u0AB5\u0AB4\x03\x02\x02\x02\u0AB6\u0AB9\x03\x02\x02\x02" +
		"\u0AB7\u0AB5\x03\x02\x02\x02\u0AB7\u0AB8\x03\x02\x02\x02\u0AB8\u0AC1\x03" +
		"\x02\x02\x02\u0AB9\u0AB7\x03\x02\x02\x02\u0ABA\u0ABE\x05L\'\x02\u0ABB" +
		"\u0ABD\x07\xB5\x02\x02\u0ABC\u0ABB\x03\x02\x02\x02\u0ABD\u0AC0\x03\x02" +
		"\x02\x02\u0ABE\u0ABC\x03\x02\x02\x02\u0ABE\u0ABF\x03\x02\x02\x02\u0ABF" +
		"\u0AC2\x03\x02\x02\x02\u0AC0\u0ABE\x03\x02\x02\x02\u0AC1\u0ABA\x03\x02" +
		"\x02\x02\u0AC2\u0AC3\x03\x02\x02\x02\u0AC3\u0AC1\x03\x02\x02\x02\u0AC3" +
		"\u0AC4\x03\x02\x02\x02\u0AC4\xD7\x03\x02\x02\x02\u0AC5\u0AC6\x07c\x02" +
		"\x02\u0AC6\u0AC7\x05\u013C\x9F\x02\u0AC7\u0ACB\x07\x9C\x02\x02\u0AC8\u0ACA" +
		"\x07\xB5\x02\x02\u0AC9\u0AC8\x03\x02\x02\x02\u0ACA\u0ACD\x03\x02\x02\x02" +
		"\u0ACB\u0AC9\x03\x02\x02\x02\u0ACB\u0ACC\x03\x02\x02\x02\u0ACC\u0AD5\x03" +
		"\x02\x02\x02\u0ACD\u0ACB\x03\x02\x02\x02\u0ACE\u0AD2\x05L\'\x02\u0ACF" +
		"\u0AD1\x07\xB5\x02\x02\u0AD0\u0ACF\x03\x02\x02\x02\u0AD1\u0AD4\x03\x02" +
		"\x02\x02\u0AD2\u0AD0\x03\x02\x02\x02\u0AD2\u0AD3\x03\x02\x02\x02\u0AD3" +
		"\u0AD6\x03\x02\x02\x02\u0AD4\u0AD2\x03\x02\x02\x02\u0AD5\u0ACE\x03\x02" +
		"\x02\x02\u0AD6\u0AD7\x03\x02\x02\x02\u0AD7\u0AD5\x03\x02\x02\x02\u0AD7" +
		"\u0AD8\x03\x02\x02\x02\u0AD8\xD9\x03\x02\x02\x02\u0AD9\u0ADA\x07d\x02" +
		"\x02\u0ADA\u0ADB\x05\u013C\x9F\x02\u0ADB\u0ADF\x07\x9C\x02\x02\u0ADC\u0ADE" +
		"\x07\xB5\x02\x02\u0ADD\u0ADC\x03\x02\x02\x02\u0ADE\u0AE1\x03\x02\x02\x02" +
		"\u0ADF\u0ADD\x03\x02\x02\x02\u0ADF\u0AE0\x03\x02\x02\x02\u0AE0\u0AE9\x03" +
		"\x02\x02\x02\u0AE1\u0ADF\x03\x02\x02\x02\u0AE2\u0AE6\x05L\'\x02\u0AE3" +
		"\u0AE5\x07\xB5\x02\x02\u0AE4\u0AE3\x03\x02\x02\x02\u0AE5\u0AE8\x03\x02" +
		"\x02\x02\u0AE6\u0AE4\x03\x02\x02\x02\u0AE6\u0AE7\x03\x02\x02\x02\u0AE7" +
		"\u0AEA\x03\x02\x02\x02\u0AE8\u0AE6\x03\x02\x02\x02\u0AE9\u0AE2\x03\x02" +
		"\x02\x02\u0AEA\u0AEB\x03\x02\x02\x02\u0AEB\u0AE9\x03\x02\x02\x02\u0AEB" +
		"\u0AEC\x03\x02\x02\x02\u0AEC\xDB\x03\x02\x02\x02\u0AED\u0AEE\x07e\x02" +
		"\x02\u0AEE\u0AEF\x05\u013C\x9F\x02\u0AEF\u0AF3\x07\x9C\x02\x02\u0AF0\u0AF2" +
		"\x07\xB5\x02\x02\u0AF1\u0AF0\x03\x02\x02\x02\u0AF2\u0AF5\x03\x02\x02\x02" +
		"\u0AF3\u0AF1\x03\x02\x02\x02\u0AF3\u0AF4\x03\x02\x02\x02\u0AF4\u0AFD\x03" +
		"\x02\x02\x02\u0AF5\u0AF3\x03\x02\x02\x02\u0AF6\u0AFA\x05L\'\x02\u0AF7" +
		"\u0AF9\x07\xB5\x02\x02\u0AF8\u0AF7\x03\x02\x02\x02\u0AF9\u0AFC\x03\x02" +
		"\x02\x02\u0AFA\u0AF8\x03\x02\x02\x02\u0AFA\u0AFB\x03\x02\x02\x02\u0AFB" +
		"\u0AFE\x03\x02\x02\x02\u0AFC\u0AFA\x03\x02\x02\x02\u0AFD\u0AF6\x03\x02" +
		"\x02\x02\u0AFE\u0AFF\x03\x02\x02\x02\u0AFF\u0AFD\x03\x02\x02\x02\u0AFF" +
		"\u0B00\x03\x02\x02\x02\u0B00\xDD\x03\x02\x02\x02\u0B01\u0B02\x07f\x02" +
		"\x02\u0B02\u0B03\x05\u013C\x9F\x02\u0B03\u0B07\x07\x9C\x02\x02\u0B04\u0B06" +
		"\x07\xB5\x02\x02\u0B05\u0B04\x03\x02\x02\x02\u0B06\u0B09\x03\x02\x02\x02" +
		"\u0B07\u0B05\x03\x02\x02\x02\u0B07\u0B08\x03\x02\x02\x02\u0B08\u0B11\x03" +
		"\x02\x02\x02\u0B09\u0B07\x03\x02\x02\x02\u0B0A\u0B0E\x05L\'\x02\u0B0B" +
		"\u0B0D\x07\xB5\x02\x02\u0B0C\u0B0B\x03\x02\x02\x02\u0B0D\u0B10\x03\x02" +
		"\x02\x02\u0B0E\u0B0C\x03\x02\x02\x02\u0B0E\u0B0F\x03\x02\x02\x02\u0B0F" +
		"\u0B12\x03\x02\x02\x02\u0B10\u0B0E\x03\x02\x02\x02\u0B11\u0B0A\x03\x02" +
		"\x02\x02\u0B12\u0B13\x03\x02\x02\x02\u0B13\u0B11\x03\x02\x02\x02\u0B13" +
		"\u0B14\x03\x02\x02\x02\u0B14\xDF\x03\x02\x02\x02\u0B15\u0B16\x07g\x02" +
		"\x02\u0B16\u0B17\x05\u013C\x9F\x02\u0B17\u0B1B\x07\x9C\x02\x02\u0B18\u0B1A" +
		"\x07\xB5\x02\x02\u0B19\u0B18\x03\x02\x02\x02\u0B1A\u0B1D\x03\x02\x02\x02" +
		"\u0B1B\u0B19\x03\x02\x02\x02\u0B1B\u0B1C\x03\x02\x02\x02\u0B1C\u0B25\x03" +
		"\x02\x02\x02\u0B1D\u0B1B\x03\x02\x02\x02\u0B1E\u0B22\x05L\'\x02\u0B1F" +
		"\u0B21\x07\xB5\x02\x02\u0B20\u0B1F\x03\x02\x02\x02\u0B21\u0B24\x03\x02" +
		"\x02\x02\u0B22\u0B20\x03\x02\x02\x02\u0B22\u0B23\x03\x02\x02\x02\u0B23" +
		"\u0B26\x03\x02\x02\x02\u0B24\u0B22\x03\x02\x02\x02\u0B25\u0B1E\x03\x02" +
		"\x02\x02\u0B26\u0B27\x03\x02\x02\x02\u0B27\u0B25\x03\x02\x02\x02\u0B27" +
		"\u0B28\x03\x02\x02\x02\u0B28\xE1\x03\x02\x02\x02\u0B29\u0B2A\x07h\x02" +
		"\x02\u0B2A\u0B2B\x05\u013C\x9F\x02\u0B2B\u0B2F\x07\x9C\x02\x02\u0B2C\u0B2E" +
		"\x07\xB5\x02\x02\u0B2D\u0B2C\x03\x02\x02\x02\u0B2E\u0B31\x03\x02\x02\x02" +
		"\u0B2F\u0B2D\x03\x02\x02\x02\u0B2F\u0B30\x03\x02\x02\x02\u0B30\u0B39\x03" +
		"\x02\x02\x02\u0B31\u0B2F\x03\x02\x02\x02\u0B32\u0B36\x05L\'\x02";
	private static readonly _serializedATNSegment6: string =
		"\u0B33\u0B35\x07\xB5\x02\x02\u0B34\u0B33\x03\x02\x02\x02\u0B35\u0B38\x03" +
		"\x02\x02\x02\u0B36\u0B34\x03\x02\x02\x02\u0B36\u0B37\x03\x02\x02\x02\u0B37" +
		"\u0B3A\x03\x02\x02\x02\u0B38\u0B36\x03\x02\x02\x02\u0B39\u0B32\x03\x02" +
		"\x02\x02\u0B3A\u0B3B\x03\x02\x02\x02\u0B3B\u0B39\x03\x02\x02\x02\u0B3B" +
		"\u0B3C\x03\x02\x02\x02\u0B3C\xE3\x03\x02\x02\x02\u0B3D\u0B3E\x07i\x02" +
		"\x02\u0B3E\u0B3F\x05\u013C\x9F\x02\u0B3F\u0B43\x07\x9C\x02\x02\u0B40\u0B42" +
		"\x07\xB5\x02\x02\u0B41\u0B40\x03\x02\x02\x02\u0B42\u0B45\x03\x02\x02\x02" +
		"\u0B43\u0B41\x03\x02\x02\x02\u0B43\u0B44\x03\x02\x02\x02\u0B44\u0B4D\x03" +
		"\x02\x02\x02\u0B45\u0B43\x03\x02\x02\x02\u0B46\u0B4A\x05L\'\x02\u0B47" +
		"\u0B49\x07\xB5\x02\x02\u0B48\u0B47\x03\x02\x02\x02\u0B49\u0B4C\x03\x02" +
		"\x02\x02\u0B4A\u0B48\x03\x02\x02\x02\u0B4A\u0B4B\x03\x02\x02\x02\u0B4B" +
		"\u0B4E\x03\x02\x02\x02\u0B4C\u0B4A\x03\x02\x02\x02\u0B4D\u0B46\x03\x02" +
		"\x02\x02\u0B4E\u0B4F\x03\x02\x02\x02\u0B4F\u0B4D\x03\x02\x02\x02\u0B4F" +
		"\u0B50\x03\x02\x02\x02\u0B50\xE5\x03\x02\x02\x02\u0B51\u0B52\x07j\x02" +
		"\x02\u0B52\u0B53\x05\u013C\x9F\x02\u0B53\u0B57\x07\x9C\x02\x02\u0B54\u0B56" +
		"\x07\xB5\x02\x02\u0B55\u0B54\x03\x02\x02\x02\u0B56\u0B59\x03\x02\x02\x02" +
		"\u0B57\u0B55\x03\x02\x02\x02\u0B57\u0B58\x03\x02\x02\x02\u0B58\u0B61\x03" +
		"\x02\x02\x02\u0B59\u0B57\x03\x02\x02\x02\u0B5A\u0B5E\x05L\'\x02\u0B5B" +
		"\u0B5D\x07\xB5\x02\x02\u0B5C\u0B5B\x03\x02\x02\x02\u0B5D\u0B60\x03\x02" +
		"\x02\x02\u0B5E\u0B5C\x03\x02\x02\x02\u0B5E\u0B5F\x03\x02\x02\x02\u0B5F" +
		"\u0B62\x03\x02\x02\x02\u0B60\u0B5E\x03\x02\x02\x02\u0B61\u0B5A\x03\x02" +
		"\x02\x02\u0B62\u0B63\x03\x02\x02\x02\u0B63\u0B61\x03\x02\x02\x02\u0B63" +
		"\u0B64\x03\x02\x02\x02\u0B64\xE7\x03\x02\x02\x02\u0B65\u0B66\x07k\x02" +
		"\x02\u0B66\u0B67\x05\u013C\x9F\x02\u0B67\u0B6B\x07\x9C\x02\x02\u0B68\u0B6A" +
		"\x07\xB5\x02\x02\u0B69\u0B68\x03\x02\x02\x02\u0B6A\u0B6D\x03\x02\x02\x02" +
		"\u0B6B\u0B69\x03\x02\x02\x02\u0B6B\u0B6C\x03\x02\x02\x02\u0B6C\u0B75\x03" +
		"\x02\x02\x02\u0B6D\u0B6B\x03\x02\x02\x02\u0B6E\u0B72\x05L\'\x02\u0B6F" +
		"\u0B71\x07\xB5\x02\x02\u0B70\u0B6F\x03\x02\x02\x02\u0B71\u0B74\x03\x02" +
		"\x02\x02\u0B72\u0B70\x03\x02\x02\x02\u0B72\u0B73\x03\x02\x02\x02\u0B73" +
		"\u0B76\x03\x02\x02\x02\u0B74\u0B72\x03\x02\x02\x02\u0B75\u0B6E\x03\x02" +
		"\x02\x02\u0B76\u0B77\x03\x02\x02\x02\u0B77\u0B75\x03\x02\x02\x02\u0B77" +
		"\u0B78\x03\x02\x02\x02\u0B78\xE9\x03\x02\x02\x02\u0B79\u0B7A\x07l\x02" +
		"\x02\u0B7A\u0B7B\x05\u013C\x9F\x02\u0B7B\u0B7F\x07\x9C\x02\x02\u0B7C\u0B7E" +
		"\x07\xB5\x02\x02\u0B7D\u0B7C\x03\x02\x02\x02\u0B7E\u0B81\x03\x02\x02\x02" +
		"\u0B7F\u0B7D\x03\x02\x02\x02\u0B7F\u0B80\x03\x02\x02\x02\u0B80\u0B89\x03" +
		"\x02\x02\x02\u0B81\u0B7F\x03\x02\x02\x02\u0B82\u0B86\x05L\'\x02\u0B83" +
		"\u0B85\x07\xB5\x02\x02\u0B84\u0B83\x03\x02\x02\x02\u0B85\u0B88\x03\x02" +
		"\x02\x02\u0B86\u0B84\x03\x02\x02\x02\u0B86\u0B87\x03\x02\x02\x02\u0B87" +
		"\u0B8A\x03\x02\x02\x02\u0B88\u0B86\x03\x02\x02\x02\u0B89\u0B82\x03\x02" +
		"\x02\x02\u0B8A\u0B8B\x03\x02\x02\x02\u0B8B\u0B89\x03\x02\x02\x02\u0B8B" +
		"\u0B8C\x03\x02\x02\x02\u0B8C\xEB\x03\x02\x02\x02\u0B8D\u0B8E\x07m\x02" +
		"\x02\u0B8E\u0B8F\x05\u013C\x9F\x02\u0B8F\u0B93\x07\x9C\x02\x02\u0B90\u0B92" +
		"\x07\xB5\x02\x02\u0B91\u0B90\x03\x02\x02\x02\u0B92\u0B95\x03\x02\x02\x02" +
		"\u0B93\u0B91\x03\x02\x02\x02\u0B93\u0B94\x03\x02\x02\x02\u0B94\u0B9D\x03" +
		"\x02\x02\x02\u0B95\u0B93\x03\x02\x02\x02\u0B96\u0B9A\x05L\'\x02\u0B97" +
		"\u0B99\x07\xB5\x02\x02\u0B98\u0B97\x03\x02\x02\x02\u0B99\u0B9C\x03\x02" +
		"\x02\x02\u0B9A\u0B98\x03\x02\x02\x02\u0B9A\u0B9B\x03\x02\x02\x02\u0B9B" +
		"\u0B9E\x03\x02\x02\x02\u0B9C\u0B9A\x03\x02\x02\x02\u0B9D\u0B96\x03\x02" +
		"\x02\x02\u0B9E\u0B9F\x03\x02\x02\x02\u0B9F\u0B9D\x03\x02\x02\x02\u0B9F" +
		"\u0BA0\x03\x02\x02\x02\u0BA0\xED\x03\x02\x02\x02\u0BA1\u0BA2\x07n\x02" +
		"\x02\u0BA2\u0BA3\x05\u013C\x9F\x02\u0BA3\u0BA7\x07\x9C\x02\x02\u0BA4\u0BA6" +
		"\x07\xB5\x02\x02\u0BA5\u0BA4\x03\x02\x02\x02\u0BA6\u0BA9\x03\x02\x02\x02" +
		"\u0BA7\u0BA5\x03\x02\x02\x02\u0BA7\u0BA8\x03\x02\x02\x02\u0BA8\u0BB1\x03" +
		"\x02\x02\x02\u0BA9\u0BA7\x03\x02\x02\x02\u0BAA\u0BAE\x05L\'\x02\u0BAB" +
		"\u0BAD\x07\xB5\x02\x02\u0BAC\u0BAB\x03\x02\x02\x02\u0BAD\u0BB0\x03\x02" +
		"\x02\x02\u0BAE\u0BAC\x03\x02\x02\x02\u0BAE\u0BAF\x03\x02\x02\x02\u0BAF" +
		"\u0BB2\x03\x02\x02\x02\u0BB0\u0BAE\x03\x02\x02\x02\u0BB1\u0BAA\x03\x02" +
		"\x02\x02\u0BB2\u0BB3\x03\x02\x02\x02\u0BB3\u0BB1\x03\x02\x02\x02\u0BB3" +
		"\u0BB4\x03\x02\x02\x02\u0BB4\xEF\x03\x02\x02\x02\u0BB5\u0BB6\x07o\x02" +
		"\x02\u0BB6\u0BB7\x05\u013C\x9F\x02\u0BB7\u0BBB\x07\x9C\x02\x02\u0BB8\u0BBA" +
		"\x07\xB5\x02\x02\u0BB9\u0BB8\x03\x02\x02\x02\u0BBA\u0BBD\x03\x02\x02\x02" +
		"\u0BBB\u0BB9\x03\x02\x02\x02\u0BBB\u0BBC\x03\x02\x02\x02\u0BBC\u0BC5\x03" +
		"\x02\x02\x02\u0BBD\u0BBB\x03\x02\x02\x02\u0BBE\u0BC2\x05L\'\x02\u0BBF" +
		"\u0BC1\x07\xB5\x02\x02\u0BC0\u0BBF\x03\x02\x02\x02\u0BC1\u0BC4\x03\x02" +
		"\x02\x02\u0BC2\u0BC0\x03\x02\x02\x02\u0BC2\u0BC3\x03\x02\x02\x02\u0BC3" +
		"\u0BC6\x03\x02\x02\x02\u0BC4\u0BC2\x03\x02\x02\x02\u0BC5\u0BBE\x03\x02" +
		"\x02\x02\u0BC6\u0BC7\x03\x02\x02\x02\u0BC7\u0BC5\x03\x02\x02\x02\u0BC7" +
		"\u0BC8\x03\x02\x02\x02\u0BC8\xF1\x03\x02\x02\x02\u0BC9\u0BCA\x07p\x02" +
		"\x02\u0BCA\u0BCB\x05\u013C\x9F\x02\u0BCB\u0BCF\x07\x9C\x02\x02\u0BCC\u0BCE" +
		"\x07\xB5\x02\x02\u0BCD\u0BCC\x03\x02\x02\x02\u0BCE\u0BD1\x03\x02\x02\x02" +
		"\u0BCF\u0BCD\x03\x02\x02\x02\u0BCF\u0BD0\x03\x02\x02\x02\u0BD0\u0BD9\x03" +
		"\x02\x02\x02\u0BD1\u0BCF\x03\x02\x02\x02\u0BD2\u0BD6\x05L\'\x02\u0BD3" +
		"\u0BD5\x07\xB5\x02\x02\u0BD4\u0BD3\x03\x02\x02\x02\u0BD5\u0BD8\x03\x02" +
		"\x02\x02\u0BD6\u0BD4\x03\x02\x02\x02\u0BD6\u0BD7\x03\x02\x02\x02\u0BD7" +
		"\u0BDA\x03\x02\x02\x02\u0BD8\u0BD6\x03\x02\x02\x02\u0BD9\u0BD2\x03\x02" +
		"\x02\x02\u0BDA\u0BDB\x03\x02\x02\x02\u0BDB\u0BD9\x03\x02\x02\x02\u0BDB" +
		"\u0BDC\x03\x02\x02\x02\u0BDC\xF3\x03\x02\x02\x02\u0BDD\u0BDE\x07q\x02" +
		"\x02\u0BDE\u0BDF\x05\u013C\x9F\x02\u0BDF\u0BE3\x07\x9C\x02\x02\u0BE0\u0BE2" +
		"\x07\xB5\x02\x02\u0BE1\u0BE0\x03\x02\x02\x02\u0BE2\u0BE5\x03\x02\x02\x02" +
		"\u0BE3\u0BE1\x03\x02\x02\x02\u0BE3\u0BE4\x03\x02\x02\x02\u0BE4\u0BED\x03" +
		"\x02\x02\x02\u0BE5\u0BE3\x03\x02\x02\x02\u0BE6\u0BEA\x05L\'\x02\u0BE7" +
		"\u0BE9\x07\xB5\x02\x02\u0BE8\u0BE7\x03\x02\x02\x02\u0BE9\u0BEC\x03\x02" +
		"\x02\x02\u0BEA\u0BE8\x03\x02\x02\x02\u0BEA\u0BEB\x03\x02\x02\x02\u0BEB" +
		"\u0BEE\x03\x02\x02\x02\u0BEC\u0BEA\x03\x02\x02\x02\u0BED\u0BE6\x03\x02" +
		"\x02\x02\u0BEE\u0BEF\x03\x02\x02\x02\u0BEF\u0BED\x03\x02\x02\x02\u0BEF" +
		"\u0BF0\x03\x02\x02\x02\u0BF0\xF5\x03\x02\x02\x02\u0BF1\u0BF2\x07r\x02" +
		"\x02\u0BF2\u0BF3\x05\u013C\x9F\x02\u0BF3\u0BF7\x07\x9C\x02\x02\u0BF4\u0BF6" +
		"\x07\xB5\x02\x02\u0BF5\u0BF4\x03\x02\x02\x02\u0BF6\u0BF9\x03\x02\x02\x02" +
		"\u0BF7\u0BF5\x03\x02\x02\x02\u0BF7\u0BF8\x03\x02\x02\x02\u0BF8\u0C01\x03" +
		"\x02\x02\x02\u0BF9\u0BF7\x03\x02\x02\x02\u0BFA\u0BFE\x05L\'\x02\u0BFB" +
		"\u0BFD\x07\xB5\x02\x02\u0BFC\u0BFB\x03\x02\x02\x02\u0BFD\u0C00\x03\x02" +
		"\x02\x02\u0BFE\u0BFC\x03\x02\x02\x02\u0BFE\u0BFF\x03\x02\x02\x02\u0BFF" +
		"\u0C02\x03\x02\x02\x02\u0C00\u0BFE\x03\x02\x02\x02\u0C01\u0BFA\x03\x02" +
		"\x02\x02\u0C02\u0C03\x03\x02\x02\x02\u0C03\u0C01\x03\x02\x02\x02\u0C03" +
		"\u0C04\x03\x02\x02\x02\u0C04\xF7\x03\x02\x02\x02\u0C05\u0C06\x07s\x02" +
		"\x02\u0C06\u0C07\x05\u013C\x9F\x02\u0C07\u0C0B\x07\x9C\x02\x02\u0C08\u0C0A" +
		"\x07\xB5\x02\x02\u0C09\u0C08\x03\x02\x02\x02\u0C0A\u0C0D\x03\x02\x02\x02" +
		"\u0C0B\u0C09\x03\x02\x02\x02\u0C0B\u0C0C\x03\x02\x02\x02\u0C0C\u0C15\x03" +
		"\x02\x02\x02\u0C0D\u0C0B\x03\x02\x02\x02\u0C0E\u0C12\x05L\'\x02\u0C0F" +
		"\u0C11\x07\xB5\x02\x02\u0C10\u0C0F\x03\x02\x02\x02\u0C11\u0C14\x03\x02" +
		"\x02\x02\u0C12\u0C10\x03\x02\x02\x02\u0C12\u0C13\x03\x02\x02\x02\u0C13" +
		"\u0C16\x03\x02\x02\x02\u0C14\u0C12\x03\x02\x02\x02\u0C15\u0C0E\x03\x02" +
		"\x02\x02\u0C16\u0C17\x03\x02\x02\x02\u0C17\u0C15\x03\x02\x02\x02\u0C17" +
		"\u0C18\x03\x02\x02\x02\u0C18\xF9\x03\x02\x02\x02\u0C19\u0C1A\x07t\x02" +
		"\x02\u0C1A\u0C1B\x05\u013C\x9F\x02\u0C1B\u0C1F\x07\x9C\x02\x02\u0C1C\u0C1E" +
		"\x07\xB5\x02\x02\u0C1D\u0C1C\x03\x02\x02\x02\u0C1E\u0C21\x03\x02\x02\x02" +
		"\u0C1F\u0C1D\x03\x02\x02\x02\u0C1F\u0C20\x03\x02\x02\x02\u0C20\u0C29\x03" +
		"\x02\x02\x02\u0C21\u0C1F\x03\x02\x02\x02\u0C22\u0C26\x05L\'\x02\u0C23" +
		"\u0C25\x07\xB5\x02\x02\u0C24\u0C23\x03\x02\x02\x02\u0C25\u0C28\x03\x02" +
		"\x02\x02\u0C26\u0C24\x03\x02\x02\x02\u0C26\u0C27\x03\x02\x02\x02\u0C27" +
		"\u0C2A\x03\x02\x02\x02\u0C28\u0C26\x03\x02\x02\x02\u0C29\u0C22\x03\x02" +
		"\x02\x02\u0C2A\u0C2B\x03\x02\x02\x02\u0C2B\u0C29\x03\x02\x02\x02\u0C2B" +
		"\u0C2C\x03\x02\x02\x02\u0C2C\xFB\x03\x02\x02\x02\u0C2D\u0C2E\x07u\x02" +
		"\x02\u0C2E\u0C2F\x05\u013C\x9F\x02\u0C2F\u0C33\x07\x9C\x02\x02\u0C30\u0C32" +
		"\x07\xB5\x02\x02\u0C31\u0C30\x03\x02\x02\x02\u0C32\u0C35\x03\x02\x02\x02" +
		"\u0C33\u0C31\x03\x02\x02\x02\u0C33\u0C34\x03\x02\x02\x02\u0C34\u0C3D\x03" +
		"\x02\x02\x02\u0C35\u0C33\x03\x02\x02\x02\u0C36\u0C3A\x05L\'\x02\u0C37" +
		"\u0C39\x07\xB5\x02\x02\u0C38\u0C37\x03\x02\x02\x02\u0C39\u0C3C\x03\x02" +
		"\x02\x02\u0C3A\u0C38\x03\x02\x02\x02\u0C3A\u0C3B\x03\x02\x02\x02\u0C3B" +
		"\u0C3E\x03\x02\x02\x02\u0C3C\u0C3A\x03\x02\x02\x02\u0C3D\u0C36\x03\x02" +
		"\x02\x02\u0C3E\u0C3F\x03\x02\x02\x02\u0C3F\u0C3D\x03\x02\x02\x02\u0C3F" +
		"\u0C40\x03\x02\x02\x02\u0C40\xFD\x03\x02\x02\x02\u0C41\u0C42\x07v\x02" +
		"\x02\u0C42\u0C43\x05\u013C\x9F\x02\u0C43\u0C47\x07\x9C\x02\x02\u0C44\u0C46" +
		"\x07\xB5\x02\x02\u0C45\u0C44\x03\x02\x02\x02\u0C46\u0C49\x03\x02\x02\x02" +
		"\u0C47\u0C45\x03\x02\x02\x02\u0C47\u0C48\x03\x02\x02\x02\u0C48\u0C51\x03" +
		"\x02\x02\x02\u0C49\u0C47\x03\x02\x02\x02\u0C4A\u0C4E\x05L\'\x02\u0C4B" +
		"\u0C4D\x07\xB5\x02\x02\u0C4C\u0C4B\x03\x02\x02\x02\u0C4D\u0C50\x03\x02" +
		"\x02\x02\u0C4E\u0C4C\x03\x02\x02\x02\u0C4E\u0C4F\x03\x02\x02\x02\u0C4F" +
		"\u0C52\x03\x02\x02\x02\u0C50\u0C4E\x03\x02\x02\x02\u0C51\u0C4A\x03\x02" +
		"\x02\x02\u0C52\u0C53\x03\x02\x02\x02\u0C53\u0C51\x03\x02\x02\x02\u0C53" +
		"\u0C54\x03\x02\x02\x02\u0C54\xFF\x03\x02\x02\x02\u0C55\u0C56\x07w\x02" +
		"\x02\u0C56\u0C57\x05\u013C\x9F\x02\u0C57\u0C5B\x07\x9C\x02\x02\u0C58\u0C5A" +
		"\x07\xB5\x02\x02\u0C59\u0C58\x03\x02\x02\x02\u0C5A\u0C5D\x03\x02\x02\x02" +
		"\u0C5B\u0C59\x03\x02\x02\x02\u0C5B\u0C5C\x03\x02\x02\x02\u0C5C\u0C65\x03" +
		"\x02\x02\x02\u0C5D\u0C5B\x03\x02\x02\x02\u0C5E\u0C62\x05L\'\x02\u0C5F" +
		"\u0C61\x07\xB5\x02\x02\u0C60\u0C5F\x03\x02\x02\x02\u0C61\u0C64\x03\x02" +
		"\x02\x02\u0C62\u0C60\x03\x02\x02\x02\u0C62\u0C63\x03\x02\x02\x02\u0C63" +
		"\u0C66\x03\x02\x02\x02\u0C64\u0C62\x03\x02\x02\x02\u0C65\u0C5E\x03\x02" +
		"\x02\x02\u0C66\u0C67\x03\x02\x02\x02\u0C67\u0C65\x03\x02\x02\x02\u0C67" +
		"\u0C68\x03\x02\x02\x02\u0C68\u0101\x03\x02\x02\x02\u0C69\u0C6A\x07x\x02" +
		"\x02\u0C6A\u0C6B\x05\u013C\x9F\x02\u0C6B\u0C6F\x07\x9C\x02\x02\u0C6C\u0C6E" +
		"\x07\xB5\x02\x02\u0C6D\u0C6C\x03\x02\x02\x02\u0C6E\u0C71\x03\x02\x02\x02" +
		"\u0C6F\u0C6D\x03\x02\x02\x02\u0C6F\u0C70\x03\x02\x02\x02\u0C70\u0C79\x03" +
		"\x02\x02\x02\u0C71\u0C6F\x03\x02\x02\x02\u0C72\u0C76\x05L\'\x02\u0C73" +
		"\u0C75\x07\xB5\x02\x02\u0C74\u0C73\x03\x02\x02\x02\u0C75\u0C78\x03\x02" +
		"\x02\x02\u0C76\u0C74\x03\x02\x02\x02\u0C76\u0C77\x03\x02\x02\x02\u0C77" +
		"\u0C7A\x03\x02\x02\x02\u0C78\u0C76\x03\x02\x02\x02\u0C79\u0C72\x03\x02" +
		"\x02\x02\u0C7A\u0C7B\x03\x02\x02\x02\u0C7B\u0C79\x03\x02\x02\x02\u0C7B" +
		"\u0C7C\x03\x02\x02\x02\u0C7C\u0103\x03\x02\x02\x02\u0C7D\u0C7E\x07y\x02" +
		"\x02\u0C7E\u0C7F\x05\u013C\x9F\x02\u0C7F\u0C83\x07\x9C\x02\x02\u0C80\u0C82" +
		"\x07\xB5\x02\x02\u0C81\u0C80\x03\x02\x02\x02\u0C82\u0C85\x03\x02\x02\x02" +
		"\u0C83\u0C81\x03\x02\x02\x02\u0C83\u0C84\x03\x02\x02\x02\u0C84\u0C8D\x03" +
		"\x02\x02\x02\u0C85\u0C83\x03\x02\x02\x02\u0C86\u0C8A\x05L\'\x02\u0C87" +
		"\u0C89\x07\xB5\x02\x02\u0C88\u0C87\x03\x02\x02\x02\u0C89\u0C8C\x03\x02" +
		"\x02\x02\u0C8A\u0C88\x03\x02\x02\x02\u0C8A\u0C8B\x03\x02\x02\x02\u0C8B" +
		"\u0C8E\x03\x02\x02\x02\u0C8C\u0C8A\x03\x02\x02\x02\u0C8D\u0C86\x03\x02" +
		"\x02\x02\u0C8E\u0C8F\x03\x02\x02\x02\u0C8F\u0C8D\x03\x02\x02\x02\u0C8F" +
		"\u0C90\x03\x02\x02\x02\u0C90\u0105\x03\x02\x02\x02\u0C91\u0C92\x07z\x02" +
		"\x02\u0C92\u0C93\x05\u013C\x9F\x02\u0C93\u0C97\x07\x9C\x02\x02\u0C94\u0C96" +
		"\x07\xB5\x02\x02\u0C95\u0C94\x03\x02\x02\x02\u0C96\u0C99\x03\x02\x02\x02" +
		"\u0C97\u0C95\x03\x02\x02\x02\u0C97\u0C98\x03\x02\x02\x02\u0C98\u0CA1\x03" +
		"\x02\x02\x02\u0C99\u0C97\x03\x02\x02\x02\u0C9A\u0C9E\x05L\'\x02\u0C9B" +
		"\u0C9D\x07\xB5\x02\x02\u0C9C\u0C9B\x03\x02\x02\x02\u0C9D\u0CA0\x03\x02" +
		"\x02\x02\u0C9E\u0C9C\x03\x02\x02\x02\u0C9E\u0C9F\x03\x02\x02\x02\u0C9F" +
		"\u0CA2\x03\x02\x02\x02\u0CA0\u0C9E\x03\x02\x02\x02\u0CA1\u0C9A\x03\x02" +
		"\x02\x02\u0CA2\u0CA3\x03\x02\x02\x02\u0CA3\u0CA1\x03\x02\x02\x02\u0CA3" +
		"\u0CA4\x03\x02\x02\x02\u0CA4\u0107\x03\x02\x02\x02\u0CA5\u0CA6\x07{\x02" +
		"\x02\u0CA6\u0CA7\x05\u013C\x9F\x02\u0CA7\u0CAB\x07\x9C\x02\x02\u0CA8\u0CAA" +
		"\x07\xB5\x02\x02\u0CA9\u0CA8\x03\x02\x02\x02\u0CAA\u0CAD\x03\x02\x02\x02" +
		"\u0CAB\u0CA9\x03\x02\x02\x02\u0CAB\u0CAC\x03\x02\x02\x02\u0CAC\u0CB5\x03" +
		"\x02\x02\x02\u0CAD\u0CAB\x03\x02\x02\x02\u0CAE\u0CB2\x05L\'\x02\u0CAF" +
		"\u0CB1\x07\xB5\x02\x02\u0CB0\u0CAF\x03\x02\x02\x02\u0CB1\u0CB4\x03\x02" +
		"\x02\x02\u0CB2\u0CB0\x03\x02\x02\x02\u0CB2\u0CB3\x03\x02\x02\x02\u0CB3" +
		"\u0CB6\x03\x02\x02\x02\u0CB4\u0CB2\x03\x02\x02\x02\u0CB5\u0CAE\x03\x02" +
		"\x02\x02\u0CB6\u0CB7\x03\x02\x02\x02\u0CB7\u0CB5\x03\x02\x02\x02\u0CB7" +
		"\u0CB8\x03\x02\x02\x02\u0CB8\u0109\x03\x02\x02\x02\u0CB9\u0CBA\x07|\x02" +
		"\x02\u0CBA\u0CBB\x05\u013C\x9F\x02\u0CBB\u0CBF\x07\x9C\x02\x02\u0CBC\u0CBE" +
		"\x07\xB5\x02\x02\u0CBD\u0CBC\x03\x02\x02\x02\u0CBE\u0CC1\x03\x02\x02\x02" +
		"\u0CBF\u0CBD\x03\x02\x02\x02\u0CBF\u0CC0\x03\x02\x02\x02\u0CC0\u0CC9\x03" +
		"\x02\x02\x02\u0CC1\u0CBF\x03\x02\x02\x02\u0CC2\u0CC6\x05L\'\x02\u0CC3" +
		"\u0CC5\x07\xB5\x02\x02\u0CC4\u0CC3\x03\x02\x02\x02\u0CC5\u0CC8\x03\x02" +
		"\x02\x02\u0CC6\u0CC4\x03\x02\x02\x02\u0CC6\u0CC7\x03\x02\x02\x02\u0CC7" +
		"\u0CCA\x03\x02\x02\x02\u0CC8\u0CC6\x03\x02\x02\x02\u0CC9\u0CC2\x03\x02" +
		"\x02\x02\u0CCA\u0CCB\x03\x02\x02\x02\u0CCB\u0CC9\x03\x02\x02\x02\u0CCB" +
		"\u0CCC\x03\x02\x02\x02\u0CCC\u010B\x03\x02\x02\x02\u0CCD\u0CCE\x07}\x02" +
		"\x02\u0CCE\u0CCF\x05\u013C\x9F\x02\u0CCF\u0CD3\x07\x9C\x02\x02\u0CD0\u0CD2" +
		"\x07\xB5\x02\x02\u0CD1\u0CD0\x03\x02\x02\x02\u0CD2\u0CD5\x03\x02\x02\x02" +
		"\u0CD3\u0CD1\x03\x02\x02\x02\u0CD3\u0CD4\x03\x02\x02\x02\u0CD4\u0CDD\x03" +
		"\x02\x02\x02\u0CD5\u0CD3\x03\x02\x02\x02\u0CD6\u0CDA\x05L\'\x02\u0CD7" +
		"\u0CD9\x07\xB5\x02\x02\u0CD8\u0CD7\x03\x02\x02\x02\u0CD9\u0CDC\x03\x02" +
		"\x02\x02\u0CDA\u0CD8\x03\x02\x02\x02\u0CDA\u0CDB\x03\x02\x02\x02\u0CDB" +
		"\u0CDE\x03\x02\x02\x02\u0CDC\u0CDA\x03\x02\x02\x02\u0CDD\u0CD6\x03\x02" +
		"\x02\x02\u0CDE\u0CDF\x03\x02\x02\x02\u0CDF\u0CDD\x03\x02\x02\x02\u0CDF" +
		"\u0CE0\x03\x02\x02\x02\u0CE0\u010D\x03\x02\x02\x02\u0CE1\u0CE2\x07~\x02" +
		"\x02\u0CE2\u0CE3\x05\u013C\x9F\x02\u0CE3\u0CE7\x07\x9C\x02\x02\u0CE4\u0CE6" +
		"\x07\xB5\x02\x02\u0CE5\u0CE4\x03\x02\x02\x02\u0CE6\u0CE9\x03\x02\x02\x02" +
		"\u0CE7\u0CE5\x03\x02\x02\x02\u0CE7\u0CE8\x03\x02\x02\x02\u0CE8\u0CF1\x03" +
		"\x02\x02\x02\u0CE9\u0CE7\x03\x02\x02\x02\u0CEA\u0CEE\x05L\'\x02\u0CEB" +
		"\u0CED\x07\xB5\x02\x02\u0CEC\u0CEB\x03\x02\x02\x02\u0CED\u0CF0\x03\x02" +
		"\x02\x02\u0CEE\u0CEC\x03\x02\x02\x02\u0CEE\u0CEF\x03\x02\x02\x02\u0CEF" +
		"\u0CF2\x03\x02\x02\x02\u0CF0\u0CEE\x03\x02\x02\x02\u0CF1\u0CEA\x03\x02" +
		"\x02\x02\u0CF2\u0CF3\x03\x02\x02\x02\u0CF3\u0CF1\x03\x02\x02\x02\u0CF3" +
		"\u0CF4\x03\x02\x02\x02\u0CF4\u010F\x03\x02\x02\x02\u0CF5\u0CF6\x07\x7F" +
		"\x02\x02\u0CF6\u0CF7\x05\u013C\x9F\x02\u0CF7\u0CFB\x07\x9C\x02\x02\u0CF8" +
		"\u0CFA\x07\xB5\x02\x02\u0CF9\u0CF8\x03\x02\x02\x02\u0CFA\u0CFD\x03\x02" +
		"\x02\x02\u0CFB\u0CF9\x03\x02\x02\x02\u0CFB\u0CFC\x03\x02\x02\x02\u0CFC" +
		"\u0D05\x03\x02\x02\x02\u0CFD\u0CFB\x03\x02\x02\x02\u0CFE\u0D02\x05L\'" +
		"\x02\u0CFF\u0D01\x07\xB5\x02\x02\u0D00\u0CFF\x03\x02\x02\x02\u0D01\u0D04" +
		"\x03\x02\x02\x02\u0D02\u0D00\x03\x02\x02\x02\u0D02\u0D03\x03\x02\x02\x02" +
		"\u0D03\u0D06\x03\x02\x02\x02\u0D04\u0D02\x03\x02\x02\x02\u0D05\u0CFE\x03" +
		"\x02\x02\x02\u0D06\u0D07\x03\x02\x02\x02\u0D07\u0D05\x03\x02\x02\x02\u0D07" +
		"\u0D08\x03\x02\x02\x02\u0D08\u0111\x03\x02\x02\x02\u0D09\u0D0A\x07\x80" +
		"\x02\x02\u0D0A\u0D0B\x05\u0142\xA2\x02\u0D0B\u0D0F\x07\x9C\x02\x02\u0D0C" +
		"\u0D0E\x07\xB5\x02\x02\u0D0D\u0D0C\x03\x02\x02\x02\u0D0E\u0D11\x03\x02" +
		"\x02\x02\u0D0F\u0D0D\x03\x02\x02\x02\u0D0F\u0D10\x03\x02\x02\x02\u0D10" +
		"\u0D19\x03\x02\x02\x02\u0D11\u0D0F\x03\x02\x02\x02\u0D12\u0D16\x05L\'" +
		"\x02\u0D13\u0D15\x07\xB5\x02\x02\u0D14\u0D13\x03\x02\x02\x02\u0D15\u0D18" +
		"\x03\x02\x02\x02\u0D16\u0D14\x03\x02\x02\x02\u0D16\u0D17\x03\x02\x02\x02" +
		"\u0D17\u0D1A\x03\x02\x02\x02\u0D18\u0D16\x03\x02\x02\x02\u0D19\u0D12\x03" +
		"\x02\x02\x02\u0D1A\u0D1B\x03\x02\x02\x02\u0D1B\u0D19\x03\x02\x02\x02\u0D1B" +
		"\u0D1C\x03\x02\x02\x02\u0D1C\u0113\x03\x02\x02\x02\u0D1D\u0D1E\x07\x81" +
		"\x02\x02\u0D1E\u0D1F\x05\u0142\xA2\x02\u0D1F\u0D23\x07\x9C\x02\x02\u0D20" +
		"\u0D22\x07\xB5\x02\x02\u0D21\u0D20\x03\x02\x02\x02\u0D22\u0D25\x03\x02" +
		"\x02\x02\u0D23\u0D21\x03\x02\x02\x02\u0D23\u0D24\x03\x02\x02\x02\u0D24" +
		"\u0D2D\x03\x02\x02\x02\u0D25\u0D23\x03\x02\x02\x02\u0D26\u0D2A\x05L\'" +
		"\x02\u0D27\u0D29\x07\xB5\x02\x02\u0D28\u0D27\x03\x02\x02\x02\u0D29\u0D2C" +
		"\x03\x02\x02\x02\u0D2A\u0D28\x03\x02\x02\x02\u0D2A\u0D2B\x03\x02\x02\x02" +
		"\u0D2B\u0D2E\x03\x02\x02\x02\u0D2C\u0D2A\x03\x02\x02\x02\u0D2D\u0D26\x03" +
		"\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D2D\x03\x02\x02\x02\u0D2F" +
		"\u0D30\x03\x02\x02\x02\u0D30\u0115\x03\x02\x02\x02\u0D31\u0D32\x07\x82" +
		"\x02\x02\u0D32\u0D33\x05\u0142\xA2\x02\u0D33\u0D37\x07\x9C\x02\x02\u0D34" +
		"\u0D36\x07\xB5\x02\x02\u0D35\u0D34\x03\x02\x02\x02\u0D36\u0D39\x03\x02" +
		"\x02\x02\u0D37\u0D35\x03\x02\x02\x02\u0D37\u0D38\x03\x02\x02\x02\u0D38" +
		"\u0D41\x03\x02\x02\x02\u0D39\u0D37\x03\x02\x02\x02\u0D3A\u0D3E\x05L\'" +
		"\x02\u0D3B\u0D3D\x07\xB5\x02\x02\u0D3C\u0D3B\x03\x02\x02\x02\u0D3D\u0D40" +
		"\x03\x02\x02\x02\u0D3E\u0D3C\x03\x02\x02\x02\u0D3E\u0D3F\x03\x02\x02\x02" +
		"\u0D3F\u0D42\x03\x02\x02\x02\u0D40\u0D3E\x03\x02\x02\x02\u0D41\u0D3A\x03" +
		"\x02\x02\x02\u0D42\u0D43\x03\x02\x02\x02\u0D43\u0D41\x03\x02\x02\x02\u0D43" +
		"\u0D44\x03\x02\x02\x02\u0D44\u0117\x03\x02\x02\x02\u0D45\u0D46\x07\x83" +
		"\x02\x02\u0D46\u0D47\x05\u0142\xA2\x02\u0D47\u0D4B\x07\x9C\x02\x02\u0D48" +
		"\u0D4A\x07\xB5\x02\x02\u0D49\u0D48\x03\x02\x02\x02\u0D4A\u0D4D\x03\x02" +
		"\x02\x02\u0D4B\u0D49\x03\x02\x02\x02\u0D4B\u0D4C\x03\x02\x02\x02\u0D4C" +
		"\u0D55\x03\x02\x02\x02\u0D4D\u0D4B\x03\x02\x02\x02\u0D4E\u0D52\x05L\'" +
		"\x02\u0D4F\u0D51\x07\xB5\x02\x02\u0D50\u0D4F\x03\x02\x02\x02\u0D51\u0D54" +
		"\x03\x02\x02\x02\u0D52\u0D50\x03\x02\x02\x02\u0D52\u0D53\x03\x02\x02\x02" +
		"\u0D53\u0D56\x03\x02\x02\x02\u0D54\u0D52\x03\x02\x02\x02\u0D55\u0D4E\x03" +
		"\x02\x02\x02\u0D56\u0D57\x03\x02\x02\x02\u0D57\u0D55\x03\x02\x02\x02\u0D57" +
		"\u0D58\x03\x02\x02\x02\u0D58\u0119\x03\x02\x02\x02\u0D59\u0D5A\x07\x88" +
		"\x02\x02\u0D5A\u0D5B\x05\u013C\x9F\x02\u0D5B\u0D5F\x07\x9C\x02\x02\u0D5C" +
		"\u0D5E\x07\xB5\x02\x02\u0D5D\u0D5C\x03\x02\x02\x02\u0D5E\u0D61\x03\x02" +
		"\x02\x02\u0D5F\u0D5D\x03\x02\x02\x02\u0D5F\u0D60\x03\x02\x02\x02\u0D60" +
		"\u0D69\x03\x02\x02\x02\u0D61\u0D5F\x03\x02\x02\x02\u0D62\u0D66\x05L\'" +
		"\x02\u0D63\u0D65\x07\xB5\x02\x02\u0D64\u0D63\x03\x02\x02\x02\u0D65\u0D68" +
		"\x03\x02\x02\x02\u0D66\u0D64\x03\x02\x02\x02\u0D66\u0D67\x03\x02\x02\x02" +
		"\u0D67\u0D6A\x03\x02\x02\x02\u0D68\u0D66\x03\x02\x02\x02\u0D69\u0D62\x03" +
		"\x02\x02\x02\u0D6A\u0D6B\x03\x02\x02\x02\u0D6B\u0D69\x03\x02\x02\x02\u0D6B" +
		"\u0D6C\x03\x02\x02\x02\u0D6C\u011B\x03\x02\x02\x02\u0D6D\u0D6E\x07\x89" +
		"\x02\x02\u0D6E\u0D6F\x05\u013C\x9F\x02\u0D6F\u0D73\x07\x9C\x02\x02\u0D70" +
		"\u0D72\x07\xB5\x02\x02\u0D71\u0D70\x03\x02\x02\x02\u0D72\u0D75\x03\x02" +
		"\x02\x02\u0D73\u0D71\x03\x02\x02\x02\u0D73\u0D74\x03\x02\x02\x02\u0D74" +
		"\u0D7D\x03\x02\x02\x02\u0D75\u0D73\x03\x02\x02\x02\u0D76\u0D7A\x05L\'" +
		"\x02\u0D77\u0D79\x07\xB5\x02\x02\u0D78\u0D77\x03\x02\x02\x02\u0D79\u0D7C" +
		"\x03\x02\x02\x02\u0D7A\u0D78\x03\x02\x02\x02\u0D7A\u0D7B\x03\x02\x02\x02" +
		"\u0D7B\u0D7E\x03\x02\x02\x02\u0D7C\u0D7A\x03\x02\x02\x02\u0D7D\u0D76\x03" +
		"\x02\x02\x02\u0D7E\u0D7F\x03\x02\x02\x02\u0D7F\u0D7D\x03\x02\x02\x02\u0D7F" +
		"\u0D80\x03\x02\x02\x02\u0D80\u011D\x03\x02\x02\x02\u0D81\u0D82\x07\x8A" +
		"\x02\x02\u0D82\u0D83\x05\u013C\x9F\x02\u0D83\u0D87\x07\x9C\x02\x02\u0D84" +
		"\u0D86\x07\xB5\x02\x02\u0D85\u0D84\x03\x02\x02\x02\u0D86\u0D89\x03\x02" +
		"\x02\x02\u0D87\u0D85\x03\x02\x02\x02\u0D87\u0D88\x03\x02\x02\x02\u0D88" +
		"\u0D91\x03\x02\x02\x02\u0D89\u0D87\x03\x02\x02\x02\u0D8A\u0D8E\x05L\'" +
		"\x02\u0D8B\u0D8D\x07\xB5\x02\x02\u0D8C\u0D8B\x03\x02\x02\x02\u0D8D\u0D90" +
		"\x03\x02\x02\x02\u0D8E\u0D8C\x03\x02\x02\x02\u0D8E\u0D8F\x03\x02\x02\x02" +
		"\u0D8F\u0D92\x03\x02\x02\x02\u0D90\u0D8E\x03\x02\x02\x02\u0D91\u0D8A\x03" +
		"\x02\x02\x02\u0D92\u0D93\x03\x02\x02\x02\u0D93\u0D91\x03\x02\x02\x02\u0D93" +
		"\u0D94\x03\x02\x02\x02\u0D94\u011F\x03\x02\x02\x02\u0D95\u0D96\x07\x8C" +
		"\x02\x02\u0D96\u0D97\x05\u013C\x9F\x02\u0D97\u0D9B\x07\x9C\x02\x02\u0D98" +
		"\u0D9A\x07\xB5\x02\x02\u0D99\u0D98\x03\x02\x02\x02\u0D9A\u0D9D\x03\x02" +
		"\x02\x02\u0D9B\u0D99\x03\x02\x02\x02\u0D9B\u0D9C\x03\x02\x02\x02\u0D9C" +
		"\u0DA5\x03\x02\x02\x02\u0D9D\u0D9B\x03\x02\x02\x02\u0D9E\u0DA2\x05L\'" +
		"\x02\u0D9F\u0DA1\x07\xB5\x02\x02\u0DA0\u0D9F\x03\x02\x02\x02\u0DA1\u0DA4" +
		"\x03\x02\x02\x02\u0DA2\u0DA0\x03\x02\x02\x02\u0DA2\u0DA3\x03\x02\x02\x02" +
		"\u0DA3\u0DA6\x03\x02\x02\x02\u0DA4\u0DA2\x03\x02\x02\x02\u0DA5\u0D9E\x03" +
		"\x02\x02\x02\u0DA6\u0DA7\x03\x02\x02\x02\u0DA7\u0DA5\x03\x02\x02\x02\u0DA7" +
		"\u0DA8\x03\x02\x02\x02\u0DA8\u0121\x03\x02\x02\x02\u0DA9\u0DAA\x07\x8B" +
		"\x02\x02\u0DAA\u0DAB\x05\u0142\xA2\x02\u0DAB\u0DAF\x07\x9C\x02\x02\u0DAC" +
		"\u0DAE\x07\xB5\x02\x02\u0DAD\u0DAC\x03\x02\x02\x02\u0DAE\u0DB1\x03\x02" +
		"\x02\x02\u0DAF\u0DAD\x03\x02\x02\x02\u0DAF\u0DB0\x03\x02\x02\x02\u0DB0" +
		"\u0DB9\x03\x02\x02\x02\u0DB1\u0DAF\x03\x02\x02\x02\u0DB2\u0DB6\x05L\'" +
		"\x02\u0DB3\u0DB5\x07\xB5\x02\x02\u0DB4\u0DB3\x03\x02\x02\x02\u0DB5\u0DB8" +
		"\x03\x02\x02\x02\u0DB6\u0DB4\x03\x02\x02\x02\u0DB6\u0DB7\x03\x02\x02\x02" +
		"\u0DB7\u0DBA\x03\x02\x02\x02\u0DB8\u0DB6\x03\x02\x02\x02\u0DB9\u0DB2\x03" +
		"\x02\x02\x02\u0DBA\u0DBB\x03\x02\x02\x02\u0DBB\u0DB9\x03\x02\x02\x02\u0DBB" +
		"\u0DBC\x03\x02\x02\x02\u0DBC\u0123\x03\x02\x02\x02\u0DBD\u0DBE\x07\x18" +
		"\x02\x02\u0DBE\u0DBF\x05\u013C\x9F\x02\u0DBF\u0DC3\x07\x9C\x02\x02\u0DC0" +
		"\u0DC2\x07\xB5\x02\x02\u0DC1\u0DC0\x03\x02\x02\x02\u0DC2\u0DC5\x03\x02" +
		"\x02\x02\u0DC3\u0DC1\x03\x02\x02\x02\u0DC3\u0DC4\x03\x02\x02\x02\u0DC4" +
		"\u0DCD\x03\x02\x02\x02\u0DC5\u0DC3\x03\x02\x02\x02\u0DC6\u0DCA\x05L\'" +
		"\x02\u0DC7\u0DC9\x07\xB5\x02\x02\u0DC8\u0DC7\x03\x02\x02\x02\u0DC9\u0DCC" +
		"\x03\x02\x02\x02\u0DCA\u0DC8\x03\x02\x02\x02\u0DCA\u0DCB\x03\x02\x02\x02" +
		"\u0DCB\u0DCE\x03\x02\x02\x02\u0DCC\u0DCA\x03\x02\x02\x02\u0DCD\u0DC6\x03" +
		"\x02\x02\x02\u0DCE\u0DCF\x03\x02\x02\x02\u0DCF\u0DCD\x03\x02\x02\x02\u0DCF" +
		"\u0DD0\x03\x02\x02\x02\u0DD0\u0125\x03\x02\x02\x02\u0DD1\u0DD2\x07 \x02" +
		"\x02\u0DD2\u0DD3\x05\u013C\x9F\x02\u0DD3\u0DDE\x07\x9C\x02\x02\u0DD4\u0DD5" +
		"\t\x07\x02\x02\u0DD5\u0DDB\x05\u0128\x95\x02\u0DD6\u0DD7\x05\u01B6\xDC" +
		"\x02\u0DD7\u0DD8\x05\u0128\x95\x02\u0DD8\u0DDA\x03\x02\x02\x02\u0DD9\u0DD6" +
		"\x03\x02\x02\x02\u0DDA\u0DDD\x03\x02\x02\x02\u0DDB\u0DD9\x03\x02\x02\x02" +
		"\u0DDB\u0DDC\x03\x02\x02\x02\u0DDC\u0DDF\x03\x02\x02\x02\u0DDD\u0DDB\x03" +
		"\x02\x02\x02\u0DDE\u0DD4\x03\x02\x02\x02\u0DDF\u0DE0\x03\x02\x02\x02\u0DE0" +
		"\u0DDE\x03\x02\x02\x02\u0DE0\u0DE1\x03\x02\x02\x02\u0DE1\u0DE2\x03\x02" +
		"\x02\x02\u0DE2\u0DE6\t\x07\x02\x02\u0DE3\u0DE5\x07\xB5\x02\x02\u0DE4\u0DE3" +
		"\x03\x02\x02\x02\u0DE5\u0DE8\x03\x02\x02\x02\u0DE6\u0DE4\x03\x02\x02\x02" +
		"\u0DE6\u0DE7\x03\x02\x02\x02\u0DE7\u0DF6\x03\x02\x02\x02\u0DE8\u0DE6\x03" +
		"\x02\x02\x02\u0DE9\u0DF3\x05^0\x02\u0DEA\u0DEC\x07\xB5\x02\x02\u0DEB\u0DEA" +
		"\x03\x02\x02\x02\u0DEC\u0DEF\x03\x02\x02\x02\u0DED\u0DEB\x03\x02\x02\x02" +
		"\u0DED\u0DEE\x03\x02\x02\x02\u0DEE\u0DF0\x03\x02\x02\x02\u0DEF\u0DED\x03" +
		"\x02\x02\x02\u0DF0\u0DF2\x05^0\x02\u0DF1\u0DED\x03\x02\x02\x02\u0DF2\u0DF5" +
		"\x03\x02\x02\x02\u0DF3\u0DF1\x03\x02\x02\x02\u0DF3\u0DF4\x03\x02\x02\x02" +
		"\u0DF4\u0DF7\x03\x02\x02\x02\u0DF5\u0DF3\x03\x02\x02\x02\u0DF6\u0DE9\x03" +
		"\x02\x02\x02\u0DF6\u0DF7\x03\x02\x02\x02\u0DF7\u0127\x03\x02\x02\x02\u0DF8" +
		"\u0E00\x05\u01B8\xDD\x02\u0DF9\u0E00\x05\u0198\xCD\x02\u0DFA\u0E00\x05" +
		"\u0178\xBD\x02\u0DFB\u0E00\x05N(\x02\u0DFC\u0E00\x05R*\x02\u0DFD\u0E00" +
		"\x05T+\x02\u0DFE\u0E00\x05V,\x02\u0DFF\u0DF8\x03\x02\x02\x02\u0DFF\u0DF9" +
		"\x03\x02\x02\x02\u0DFF\u0DFA\x03\x02\x02\x02\u0DFF\u0DFB\x03\x02\x02\x02" +
		"\u0DFF\u0DFC\x03\x02\x02\x02\u0DFF\u0DFD\x03\x02\x02\x02\u0DFF\u0DFE\x03" +
		"\x02\x02\x02\u0E00\u0E01\x03\x02\x02\x02\u0E01\u0DFF\x03\x02\x02\x02\u0E01" +
		"\u0E02\x03\x02\x02\x02\u0E02\u0129";
	private static readonly _serializedATNSegment7: string =
		"\x03\x02\x02\x02\u0E03\u0E04\x07\"\x02\x02\u0E04\u0E05\x05\u013C\x9F\x02" +
		"\u0E05\u0E09\x07\x9C\x02\x02\u0E06\u0E08\x07\xB5\x02\x02\u0E07\u0E06\x03" +
		"\x02\x02\x02\u0E08\u0E0B\x03\x02\x02\x02\u0E09\u0E07\x03\x02\x02\x02\u0E09" +
		"\u0E0A\x03\x02\x02\x02\u0E0A\u0E15\x03\x02\x02\x02\u0E0B\u0E09\x03\x02" +
		"\x02\x02\u0E0C\u0E10\x05L\'\x02\u0E0D\u0E0F\x07\xB5\x02\x02\u0E0E\u0E0D" +
		"\x03\x02\x02\x02\u0E0F\u0E12\x03\x02\x02\x02\u0E10\u0E0E\x03\x02\x02\x02" +
		"\u0E10\u0E11\x03\x02\x02\x02\u0E11\u0E14\x03\x02\x02\x02\u0E12\u0E10\x03" +
		"\x02\x02\x02\u0E13\u0E0C\x03\x02\x02\x02\u0E14\u0E17\x03\x02\x02\x02\u0E15" +
		"\u0E13\x03\x02\x02\x02\u0E15\u0E16\x03\x02\x02\x02\u0E16\u0E20\x03\x02" +
		"\x02\x02\u0E17\u0E15\x03\x02\x02\x02\u0E18\u0E19\t\x07\x02\x02\u0E19\u0E1C" +
		"\x05\u01B0\xD9\x02\u0E1A\u0E1B\x07\xB5\x02\x02\u0E1B\u0E1D\x05\u012C\x97" +
		"\x02\u0E1C\u0E1A\x03\x02\x02\x02\u0E1D\u0E1E\x03\x02\x02\x02\u0E1E\u0E1C" +
		"\x03\x02\x02\x02\u0E1E\u0E1F\x03\x02\x02\x02\u0E1F\u0E21\x03\x02\x02\x02" +
		"\u0E20\u0E18\x03\x02\x02\x02\u0E21\u0E22\x03\x02\x02\x02\u0E22\u0E20\x03" +
		"\x02\x02\x02\u0E22\u0E23\x03\x02\x02\x02\u0E23\u0E24\x03\x02\x02\x02\u0E24" +
		"\u0E28\t\x07\x02\x02\u0E25\u0E27\x07\xB5\x02\x02\u0E26\u0E25\x03\x02\x02" +
		"\x02\u0E27\u0E2A\x03\x02\x02\x02\u0E28\u0E26\x03\x02\x02\x02\u0E28\u0E29" +
		"\x03\x02\x02\x02\u0E29\u0E38\x03\x02\x02\x02\u0E2A\u0E28\x03\x02\x02\x02" +
		"\u0E2B\u0E35\x05^0\x02\u0E2C\u0E2E\x07\xB5\x02\x02\u0E2D\u0E2C\x03\x02" +
		"\x02\x02\u0E2E\u0E31\x03\x02\x02\x02\u0E2F\u0E2D\x03\x02\x02\x02\u0E2F" +
		"\u0E30\x03\x02\x02\x02\u0E30\u0E32\x03\x02\x02\x02\u0E31\u0E2F\x03\x02" +
		"\x02\x02\u0E32\u0E34\x05^0\x02\u0E33\u0E2F\x03\x02\x02\x02\u0E34\u0E37" +
		"\x03\x02\x02\x02\u0E35\u0E33\x03\x02\x02\x02\u0E35\u0E36\x03\x02\x02\x02" +
		"\u0E36\u0E39\x03\x02\x02\x02\u0E37\u0E35\x03\x02\x02\x02\u0E38\u0E2B\x03" +
		"\x02\x02\x02\u0E38\u0E39\x03\x02\x02\x02\u0E39\u012B\x03\x02\x02\x02\u0E3A" +
		"\u0E3B\x07\x8E\x02\x02\u0E3B\u0E3C\x05\u01B0\xD9\x02\u0E3C\u0E3E\x07\x9C" +
		"\x02\x02\u0E3D\u0E3F\x05\u013A\x9E\x02\u0E3E\u0E3D\x03\x02\x02\x02\u0E3E" +
		"\u0E3F\x03\x02\x02\x02\u0E3F\u012D\x03\x02\x02\x02\u0E40\u0E41\x07#\x02" +
		"\x02\u0E41\u0E42\x05\u013C\x9F\x02\u0E42\u0E46\x07\x9C\x02\x02\u0E43\u0E45" +
		"\x07\xB5\x02\x02\u0E44\u0E43\x03\x02\x02\x02\u0E45\u0E48\x03\x02\x02\x02" +
		"\u0E46\u0E44\x03\x02\x02\x02\u0E46\u0E47\x03\x02\x02\x02\u0E47\u0E52\x03" +
		"\x02\x02\x02\u0E48\u0E46\x03\x02\x02\x02\u0E49\u0E4D\x05L\'\x02\u0E4A" +
		"\u0E4C\x07\xB5\x02\x02\u0E4B\u0E4A\x03\x02\x02\x02\u0E4C\u0E4F\x03\x02" +
		"\x02\x02\u0E4D\u0E4B\x03\x02\x02\x02\u0E4D\u0E4E\x03\x02\x02\x02\u0E4E" +
		"\u0E51\x03\x02\x02\x02\u0E4F\u0E4D\x03\x02\x02\x02\u0E50\u0E49\x03\x02" +
		"\x02\x02\u0E51\u0E54\x03\x02\x02\x02\u0E52\u0E50\x03\x02\x02\x02\u0E52" +
		"\u0E53\x03\x02\x02\x02\u0E53\u0E64\x03\x02\x02\x02\u0E54\u0E52\x03\x02" +
		"\x02\x02\u0E55\u0E57\t\x07\x02\x02\u0E56\u0E58\x05\u01B0\xD9\x02\u0E57" +
		"\u0E56\x03\x02\x02\x02\u0E57\u0E58\x03\x02\x02\x02\u0E58\u0E60\x03\x02" +
		"\x02\x02\u0E59\u0E5B\x07\xB5\x02\x02\u0E5A\u0E59\x03\x02\x02\x02\u0E5B" +
		"\u0E5E\x03\x02\x02\x02\u0E5C\u0E5A\x03\x02\x02\x02\u0E5C\u0E5D\x03\x02" +
		"\x02\x02\u0E5D\u0E5F\x03\x02\x02\x02\u0E5E\u0E5C\x03\x02\x02\x02\u0E5F" +
		"\u0E61\x05\u012C\x97\x02\u0E60\u0E5C\x03\x02\x02\x02\u0E61\u0E62\x03\x02" +
		"\x02\x02\u0E62\u0E60\x03\x02\x02\x02\u0E62\u0E63\x03\x02\x02\x02\u0E63" +
		"\u0E65\x03\x02\x02\x02\u0E64\u0E55\x03\x02\x02\x02\u0E65\u0E66\x03\x02" +
		"\x02\x02\u0E66\u0E64\x03\x02\x02\x02\u0E66\u0E67\x03\x02\x02\x02\u0E67" +
		"\u0E68\x03\x02\x02\x02\u0E68\u0E69\t\x07\x02\x02\u0E69\u012F\x03\x02\x02" +
		"\x02\u0E6A\u0E6B\x07$\x02\x02\u0E6B\u0E6C\x05\u013C\x9F\x02\u0E6C\u0E70" +
		"\x07\x9C\x02\x02\u0E6D\u0E6F\x07\xB5\x02\x02\u0E6E\u0E6D\x03\x02\x02\x02" +
		"\u0E6F\u0E72\x03\x02\x02\x02\u0E70\u0E6E\x03\x02\x02\x02\u0E70\u0E71\x03" +
		"\x02\x02\x02\u0E71\u0E7C\x03\x02\x02\x02\u0E72\u0E70\x03\x02\x02\x02\u0E73" +
		"\u0E77\x05L\'\x02\u0E74\u0E76\x07\xB5\x02\x02\u0E75\u0E74\x03\x02\x02" +
		"\x02\u0E76\u0E79\x03\x02\x02\x02\u0E77\u0E75\x03\x02\x02\x02\u0E77\u0E78" +
		"\x03\x02\x02\x02\u0E78\u0E7B\x03\x02\x02\x02\u0E79\u0E77\x03\x02\x02\x02" +
		"\u0E7A\u0E73\x03\x02\x02\x02\u0E7B\u0E7E\x03\x02\x02\x02\u0E7C\u0E7A\x03" +
		"\x02\x02\x02\u0E7C\u0E7D\x03\x02\x02\x02\u0E7D\u0E87\x03\x02\x02\x02\u0E7E" +
		"\u0E7C\x03\x02\x02\x02\u0E7F\u0E80\t\x07\x02\x02\u0E80\u0E83\x05\u01B0" +
		"\xD9\x02\u0E81\u0E82\x07\xB5\x02\x02\u0E82\u0E84\x05\u012C\x97\x02\u0E83" +
		"\u0E81\x03\x02\x02\x02\u0E84\u0E85\x03\x02\x02\x02\u0E85\u0E83\x03\x02" +
		"\x02\x02\u0E85\u0E86\x03\x02\x02\x02\u0E86\u0E88\x03\x02\x02\x02\u0E87" +
		"\u0E7F\x03\x02\x02\x02\u0E88\u0E89\x03\x02\x02\x02\u0E89\u0E87\x03\x02" +
		"\x02\x02\u0E89\u0E8A\x03\x02\x02\x02\u0E8A\u0E8B\x03\x02\x02\x02\u0E8B" +
		"\u0E8C\t\x07\x02\x02\u0E8C\u0131\x03\x02\x02\x02\u0E8D\u0E8E\x07%\x02" +
		"\x02\u0E8E\u0E8F\x05\u013C\x9F\x02\u0E8F\u0E93\x07\x9C\x02\x02\u0E90\u0E92" +
		"\x07\xB5\x02\x02\u0E91\u0E90\x03\x02\x02\x02\u0E92\u0E95\x03\x02\x02\x02" +
		"\u0E93\u0E91\x03\x02\x02\x02\u0E93\u0E94\x03\x02\x02\x02\u0E94\u0E9F\x03" +
		"\x02\x02\x02\u0E95\u0E93\x03\x02\x02\x02\u0E96\u0E9A\x05L\'\x02\u0E97" +
		"\u0E99\x07\xB5\x02\x02\u0E98\u0E97\x03\x02\x02\x02\u0E99\u0E9C\x03\x02" +
		"\x02\x02\u0E9A\u0E98\x03\x02\x02\x02\u0E9A\u0E9B\x03\x02\x02\x02\u0E9B" +
		"\u0E9E\x03\x02\x02\x02\u0E9C\u0E9A\x03\x02\x02\x02\u0E9D\u0E96\x03\x02" +
		"\x02\x02\u0E9E\u0EA1\x03\x02\x02\x02\u0E9F\u0E9D\x03\x02\x02\x02\u0E9F" +
		"\u0EA0\x03\x02\x02\x02\u0EA0\u0EAA\x03\x02\x02\x02\u0EA1\u0E9F\x03\x02" +
		"\x02\x02\u0EA2\u0EA3\t\x07\x02\x02\u0EA3\u0EA6\x05\u01B0\xD9\x02\u0EA4" +
		"\u0EA5\x07\xB5\x02\x02\u0EA5\u0EA7\x05\u012C\x97\x02\u0EA6\u0EA4\x03\x02" +
		"\x02\x02\u0EA7\u0EA8\x03\x02\x02\x02\u0EA8\u0EA6\x03\x02\x02\x02\u0EA8" +
		"\u0EA9\x03\x02\x02\x02\u0EA9\u0EAB\x03\x02\x02\x02\u0EAA\u0EA2\x03\x02" +
		"\x02\x02\u0EAB\u0EAC\x03\x02\x02\x02\u0EAC\u0EAA\x03\x02\x02\x02\u0EAC" +
		"\u0EAD\x03\x02\x02\x02\u0EAD\u0EAE\x03\x02\x02\x02\u0EAE\u0EAF\t\x07\x02" +
		"\x02\u0EAF\u0133\x03\x02\x02\x02\u0EB0\u0EB1\x07&\x02\x02\u0EB1\u0EB2" +
		"\x05\u013C\x9F\x02\u0EB2\u0EB6\x07\x9C\x02\x02\u0EB3\u0EB5\x07\xB5\x02" +
		"\x02\u0EB4\u0EB3\x03\x02\x02\x02\u0EB5\u0EB8\x03\x02\x02\x02\u0EB6\u0EB4" +
		"\x03\x02\x02\x02\u0EB6\u0EB7\x03\x02\x02\x02\u0EB7\u0EC2\x03\x02\x02\x02" +
		"\u0EB8\u0EB6\x03\x02\x02\x02\u0EB9\u0EBD\x05L\'\x02\u0EBA\u0EBC\x07\xB5" +
		"\x02\x02\u0EBB\u0EBA\x03\x02\x02\x02\u0EBC\u0EBF\x03\x02\x02\x02\u0EBD" +
		"\u0EBB\x03\x02\x02\x02\u0EBD\u0EBE\x03\x02\x02\x02\u0EBE\u0EC1\x03\x02" +
		"\x02\x02\u0EBF\u0EBD\x03\x02\x02\x02\u0EC0\u0EB9\x03\x02\x02\x02\u0EC1" +
		"\u0EC4\x03\x02\x02\x02\u0EC2\u0EC0\x03\x02\x02\x02\u0EC2\u0EC3\x03\x02" +
		"\x02\x02\u0EC3\u0ECD\x03\x02\x02\x02\u0EC4\u0EC2\x03\x02\x02\x02\u0EC5" +
		"\u0EC6\t\x07\x02\x02\u0EC6\u0EC9\x05\u01B0\xD9\x02\u0EC7\u0EC8\x07\xB5" +
		"\x02\x02\u0EC8\u0ECA\x05\u012C\x97\x02\u0EC9\u0EC7\x03\x02\x02\x02\u0ECA" +
		"\u0ECB\x03\x02\x02\x02\u0ECB\u0EC9\x03\x02\x02\x02\u0ECB\u0ECC\x03\x02" +
		"\x02\x02\u0ECC\u0ECE\x03\x02\x02\x02\u0ECD\u0EC5\x03\x02\x02\x02\u0ECE" +
		"\u0ECF\x03\x02\x02\x02\u0ECF\u0ECD\x03\x02\x02\x02\u0ECF\u0ED0\x03\x02" +
		"\x02\x02\u0ED0\u0ED1\x03\x02\x02\x02\u0ED1\u0ED2\t\x07\x02\x02\u0ED2\u0135" +
		"\x03\x02\x02\x02\u0ED3\u0ED4\x07!\x02\x02\u0ED4\u0ED5\x05\u013C\x9F\x02" +
		"\u0ED5\u0ED9\x07\x9C\x02\x02\u0ED6\u0ED8\x07\xB5\x02\x02\u0ED7\u0ED6\x03" +
		"\x02\x02\x02\u0ED8\u0EDB\x03\x02\x02\x02\u0ED9\u0ED7\x03\x02\x02\x02\u0ED9" +
		"\u0EDA\x03\x02\x02\x02\u0EDA\u0EE5\x03\x02\x02\x02\u0EDB\u0ED9\x03\x02" +
		"\x02\x02\u0EDC\u0EE0\x05L\'\x02\u0EDD\u0EDF\x07\xB5\x02\x02\u0EDE\u0EDD" +
		"\x03\x02\x02\x02\u0EDF\u0EE2\x03\x02\x02\x02\u0EE0\u0EDE\x03\x02\x02\x02" +
		"\u0EE0\u0EE1\x03\x02\x02\x02\u0EE1\u0EE4\x03\x02\x02\x02\u0EE2\u0EE0\x03" +
		"\x02\x02\x02\u0EE3\u0EDC\x03\x02\x02\x02\u0EE4\u0EE7\x03\x02\x02\x02\u0EE5" +
		"\u0EE3\x03\x02\x02\x02\u0EE5\u0EE6\x03\x02\x02\x02\u0EE6\u0EF5\x03\x02" +
		"\x02\x02\u0EE7\u0EE5\x03\x02\x02\x02\u0EE8\u0EE9\t\x07\x02\x02\u0EE9\u0EF1" +
		"\x05\u0138\x9D\x02\u0EEA\u0EEC\x07\xB5\x02\x02\u0EEB\u0EEA\x03\x02\x02" +
		"\x02\u0EEC\u0EEF\x03\x02\x02\x02\u0EED\u0EEB\x03\x02\x02\x02\u0EED\u0EEE" +
		"\x03\x02\x02\x02\u0EEE\u0EF0\x03\x02\x02\x02\u0EEF\u0EED\x03\x02\x02\x02" +
		"\u0EF0\u0EF2\x05\u012C\x97\x02\u0EF1\u0EED\x03\x02\x02\x02\u0EF2\u0EF3" +
		"\x03\x02\x02\x02\u0EF3\u0EF1\x03\x02\x02\x02\u0EF3\u0EF4\x03\x02\x02\x02" +
		"\u0EF4\u0EF6\x03\x02\x02\x02\u0EF5\u0EE8\x03\x02\x02\x02\u0EF6\u0EF7\x03" +
		"\x02\x02\x02\u0EF7\u0EF5\x03\x02\x02\x02\u0EF7\u0EF8\x03\x02\x02\x02\u0EF8" +
		"\u0EF9\x03\x02\x02\x02\u0EF9\u0EFD\t\x07\x02\x02\u0EFA\u0EFC\x07\xB5\x02" +
		"\x02\u0EFB\u0EFA\x03\x02\x02\x02\u0EFC\u0EFF\x03\x02\x02\x02\u0EFD\u0EFB" +
		"\x03\x02\x02\x02\u0EFD\u0EFE\x03\x02\x02\x02\u0EFE\u0F0D\x03\x02\x02\x02" +
		"\u0EFF\u0EFD\x03\x02\x02\x02\u0F00\u0F0A\x05^0\x02\u0F01\u0F03\x07\xB5" +
		"\x02\x02\u0F02\u0F01\x03\x02\x02\x02\u0F03\u0F06\x03\x02\x02\x02\u0F04" +
		"\u0F02\x03\x02\x02\x02\u0F04\u0F05\x03\x02\x02\x02\u0F05\u0F07\x03\x02" +
		"\x02\x02\u0F06\u0F04\x03\x02\x02\x02\u0F07\u0F09\x05^0\x02\u0F08\u0F04" +
		"\x03\x02\x02\x02\u0F09\u0F0C\x03\x02\x02\x02\u0F0A\u0F08\x03\x02\x02\x02" +
		"\u0F0A\u0F0B\x03\x02\x02\x02\u0F0B\u0F0E\x03\x02\x02\x02\u0F0C\u0F0A\x03" +
		"\x02\x02\x02\u0F0D\u0F00\x03\x02\x02\x02\u0F0D\u0F0E\x03\x02\x02\x02\u0F0E" +
		"\u0137\x03\x02\x02\x02\u0F0F\u0F11\n\b\x02\x02\u0F10\u0F0F\x03\x02\x02" +
		"\x02\u0F11\u0F12\x03\x02\x02\x02\u0F12\u0F10\x03\x02\x02\x02\u0F12\u0F13" +
		"\x03\x02\x02\x02\u0F13\u0139\x03\x02\x02\x02\u0F14\u0F15\x07\xC8\x02\x02" +
		"\u0F15\u0F16\x07\xB3\x02\x02\u0F16\u0F17\x07\x9C\x02\x02\u0F17\u013B\x03" +
		"\x02\x02\x02\u0F18\u0F1A\x05\u013E\xA0\x02\u0F19\u0F18\x03\x02\x02\x02" +
		"\u0F1A\u0F1D\x03\x02\x02\x02\u0F1B\u0F19\x03\x02\x02\x02\u0F1B\u0F1C\x03" +
		"\x02\x02\x02\u0F1C\u0F23\x03\x02\x02\x02\u0F1D\u0F1B\x03\x02\x02\x02\u0F1E" +
		"\u0F22\x07\u010A\x02\x02\u0F1F\u0F22\x07\u010B\x02\x02\u0F20\u0F22\x05" +
		"\u0140\xA1\x02\u0F21\u0F1E\x03\x02\x02\x02\u0F21\u0F1F\x03\x02\x02\x02" +
		"\u0F21\u0F20\x03\x02\x02\x02\u0F22\u0F25\x03\x02\x02\x02\u0F23\u0F21\x03" +
		"\x02\x02\x02\u0F23\u0F24\x03\x02\x02\x02\u0F24\u013D\x03\x02\x02\x02\u0F25" +
		"\u0F23\x03\x02\x02\x02\u0F26\u0F27\t\t\x02\x02\u0F27\u013F\x03\x02\x02" +
		"\x02\u0F28\u0F32\x05\u0144\xA3\x02\u0F29\u0F32\x05\u017C\xBF\x02\u0F2A" +
		"\u0F32\x05\u0146\xA4\x02\u0F2B\u0F32\x05\u0148\xA5\x02\u0F2C\u0F32\x05" +
		"\u014A\xA6\x02\u0F2D\u0F32\x05\u014C\xA7\x02\u0F2E\u0F32\x05\u014E\xA8" +
		"\x02\u0F2F\u0F32\x05\u0150\xA9\x02\u0F30\u0F32\x07\xE1\x02\x02\u0F31\u0F28" +
		"\x03\x02\x02\x02\u0F31\u0F29\x03\x02\x02\x02\u0F31\u0F2A\x03\x02\x02\x02" +
		"\u0F31\u0F2B\x03\x02\x02\x02\u0F31\u0F2C\x03\x02\x02\x02\u0F31\u0F2D\x03" +
		"\x02\x02\x02\u0F31\u0F2E\x03\x02\x02\x02\u0F31\u0F2F\x03\x02\x02\x02\u0F31" +
		"\u0F30\x03\x02\x02\x02\u0F32\u0141\x03\x02\x02\x02\u0F33\u0F39\x07\u0108" +
		"\x02\x02\u0F34\u0F39\x07\u0109\x02\x02\u0F35\u0F39\x07\u010A\x02\x02\u0F36" +
		"\u0F39\x07\u010B\x02\x02\u0F37\u0F39\x03\x02\x02\x02\u0F38\u0F33\x03\x02" +
		"\x02\x02\u0F38\u0F34\x03\x02\x02\x02\u0F38\u0F35\x03\x02\x02\x02\u0F38" +
		"\u0F36\x03\x02\x02\x02\u0F38\u0F37\x03\x02\x02\x02\u0F39\u0143\x03\x02" +
		"\x02\x02\u0F3A\u0F3D\x07\xD8\x02\x02\u0F3B\u0F3E\x07\xAE\x02\x02\u0F3C" +
		"\u0F3E\x07\u011B\x02\x02\u0F3D\u0F3B\x03\x02\x02\x02\u0F3D\u0F3C\x03\x02" +
		"\x02\x02\u0F3D\u0F3E\x03\x02\x02\x02\u0F3E\u0F49\x03\x02\x02\x02\u0F3F" +
		"\u0F41\x07\xEF\x02\x02\u0F40\u0F42\x07\xAE\x02\x02\u0F41\u0F40\x03\x02" +
		"\x02\x02\u0F41\u0F42\x03\x02\x02\x02\u0F42\u0F49\x03\x02\x02\x02\u0F43" +
		"\u0F45\x07\xD9\x02\x02\u0F44\u0F46\x07\xAE\x02\x02\u0F45\u0F44\x03\x02" +
		"\x02\x02\u0F45\u0F46\x03\x02\x02\x02\u0F46\u0F49\x03\x02\x02\x02\u0F47" +
		"\u0F49\x07\xDA\x02\x02\u0F48\u0F3A\x03\x02\x02\x02\u0F48\u0F3F\x03\x02" +
		"\x02\x02\u0F48\u0F43\x03\x02\x02\x02\u0F48\u0F47\x03\x02\x02\x02\u0F49" +
		"\u0145\x03\x02\x02\x02\u0F4A\u0F4D\t\n\x02\x02\u0F4B\u0F4C\x07\x9D\x02" +
		"\x02\u0F4C\u0F4E\x07\xB0\x02\x02\u0F4D\u0F4B\x03\x02\x02\x02\u0F4D\u0F4E" +
		"\x03\x02\x02\x02\u0F4E\u0147\x03\x02\x02\x02\u0F4F\u0F50\t\v\x02\x02\u0F50" +
		"\u0149\x03\x02\x02\x02\u0F51\u0F52\t\f\x02\x02\u0F52\u014B\x03\x02\x02" +
		"\x02\u0F53\u0F54\t\r\x02\x02\u0F54\u014D\x03\x02\x02\x02\u0F55\u0F56\t" +
		"\x0E\x02\x02\u0F56\u014F\x03\x02\x02\x02\u0F57\u0F58\t\x0F\x02\x02\u0F58" +
		"\u0151\x03\x02\x02\x02\u0F59\u0F5A\t\x10\x02\x02\u0F5A\u0153\x03\x02\x02" +
		"\x02\u0F5B\u0F5C\t\x11\x02\x02\u0F5C\u0155\x03\x02\x02\x02\u0F5D\u0F5E" +
		"\t\x12\x02\x02\u0F5E\u0157\x03\x02\x02\x02\u0F5F\u0F60\t\x13\x02\x02\u0F60" +
		"\u0159\x03\x02\x02\x02\u0F61\u0F64\x07\xE6\x02\x02\u0F62\u0F63\x07\x9D" +
		"\x02\x02\u0F63\u0F65\x07\xB0\x02\x02\u0F64\u0F62\x03\x02\x02\x02\u0F64" +
		"\u0F65\x03\x02\x02\x02\u0F65\u0F71\x03\x02\x02\x02\u0F66\u0F69\x07\xF8" +
		"\x02\x02\u0F67\u0F68\x07\x9D\x02\x02\u0F68\u0F6A\x07\xB0\x02\x02\u0F69" +
		"\u0F67\x03\x02\x02\x02\u0F69\u0F6A\x03\x02\x02\x02\u0F6A\u0F71\x03\x02" +
		"\x02\x02\u0F6B\u0F6E\x07\u0104\x02\x02\u0F6C\u0F6D\x07\x9D\x02\x02\u0F6D" +
		"\u0F6F\x07\xB0\x02\x02\u0F6E\u0F6C\x03\x02\x02\x02\u0F6E\u0F6F\x03\x02" +
		"\x02\x02\u0F6F\u0F71\x03\x02\x02\x02\u0F70\u0F61\x03\x02\x02\x02\u0F70" +
		"\u0F66\x03\x02\x02\x02\u0F70\u0F6B\x03\x02\x02\x02\u0F71\u015B\x03\x02" +
		"\x02\x02\u0F72\u0F73\t\x14\x02\x02\u0F73\u015D\x03\x02\x02\x02\u0F74\u0F75" +
		"\x05\u0152\xAA\x02\u0F75\u0F76\x07\x9D\x02\x02\u0F76\u0F77\x05\u0184\xC3" +
		"\x02\u0F77\u0F78\x07\x9C\x02\x02\u0F78\u0F7B\x03\x02\x02\x02\u0F79\u0F7B" +
		"\x07\xB1\x02\x02\u0F7A\u0F74\x03\x02\x02\x02\u0F7A\u0F79\x03\x02\x02\x02" +
		"\u0F7B\u015F\x03\x02\x02\x02\u0F7C\u0F7D\x05\u0154\xAB\x02\u0F7D\u0F7E" +
		"\x07\x9D\x02\x02\u0F7E\u0F7F\x05\u0184\xC3\x02\u0F7F\u0F84\x07\x9C\x02" +
		"\x02\u0F80\u0F81\x07\xCB\x02\x02\u0F81\u0F82\x05\u01B8\xDD\x02\u0F82\u0F83" +
		"\x07\x9C\x02\x02\u0F83\u0F85\x03\x02\x02\x02\u0F84\u0F80\x03\x02\x02\x02" +
		"\u0F84\u0F85\x03\x02\x02\x02\u0F85\u0161\x03\x02\x02\x02\u0F86\u0F87\x05" +
		"\u0158\xAD\x02\u0F87\u0F88\x07\x9D\x02\x02\u0F88\u0F89\x05\u0184\xC3\x02" +
		"\u0F89\u0F8E\x07\x9C\x02\x02\u0F8A\u0F8B\x07\xCB\x02\x02\u0F8B\u0F8C\x05" +
		"\u01B8\xDD\x02\u0F8C\u0F8D\x07\x9C\x02\x02\u0F8D\u0F8F\x03\x02\x02\x02" +
		"\u0F8E\u0F8A\x03\x02\x02\x02\u0F8E\u0F8F\x03\x02\x02\x02\u0F8F\u0163\x03" +
		"\x02\x02\x02\u0F90\u0F91\x05\u0156\xAC\x02\u0F91\u0F94\x07\x9D\x02\x02" +
		"\u0F92\u0F95\x05\u0184\xC3\x02\u0F93\u0F95\x05\u0182\xC2\x02\u0F94\u0F92" +
		"\x03\x02\x02\x02\u0F94\u0F93\x03\x02\x02\x02\u0F95\u0F96\x03\x02\x02\x02" +
		"\u0F96\u0F9B\x07\x9C\x02\x02\u0F97\u0F98\x07\xCB\x02\x02\u0F98\u0F99\x05" +
		"\u01B8\xDD\x02\u0F99\u0F9A\x07\x9C\x02\x02\u0F9A\u0F9C\x03\x02\x02\x02" +
		"\u0F9B\u0F97\x03\x02\x02\x02\u0F9B\u0F9C\x03\x02\x02\x02\u0F9C\u0165\x03" +
		"\x02\x02\x02\u0F9D\u0FA1\x05\u0168\xB5\x02\u0F9E\u0FA0\x05\u0180\xC1\x02" +
		"\u0F9F\u0F9E\x03\x02\x02\x02\u0FA0\u0FA3\x03\x02\x02\x02\u0FA1\u0F9F\x03" +
		"\x02\x02\x02\u0FA1\u0FA2\x03\x02\x02\x02\u0FA2\u0167\x03\x02\x02\x02\u0FA3" +
		"\u0FA1\x03\x02\x02\x02\u0FA4\u0FA5\x05\u015C\xAF\x02\u0FA5\u0FA9\x07\x9D" +
		"\x02\x02\u0FA6\u0FA8\x07\x04\x02\x02\u0FA7\u0FA6\x03\x02\x02\x02\u0FA8" +
		"\u0FAB\x03\x02\x02\x02\u0FA9\u0FA7\x03\x02\x02\x02\u0FA9\u0FAA\x03\x02" +
		"\x02\x02\u0FAA\u0FAC\x03\x02\x02\x02\u0FAB\u0FA9\x03\x02\x02\x02\u0FAC" +
		"\u0FAD\x05\u0184\xC3\x02\u0FAD\u0FAE\x07\x9C\x02\x02\u0FAE\u0169\x03\x02" +
		"\x02\x02\u0FAF\u0FB3\x05\u016C\xB7\x02\u0FB0\u0FB2\x05\u0180\xC1\x02\u0FB1" +
		"\u0FB0\x03\x02\x02\x02\u0FB2\u0FB5\x03\x02\x02\x02\u0FB3\u0FB1\x03\x02" +
		"\x02\x02\u0FB3\u0FB4\x03\x02\x02\x02\u0FB4\u016B\x03\x02\x02\x02\u0FB5" +
		"\u0FB3\x03\x02\x02\x02\u0FB6\u0FB7\x05\u015A\xAE\x02\u0FB7\u0FB8\x07\x9D" +
		"\x02\x02\u0FB8\u0FB9\x05\u0184\xC3\x02\u0FB9\u0FBE\x07\x9C\x02\x02\u0FBA" +
		"\u0FBB\x07\xCB\x02\x02\u0FBB\u0FBC\x05\u01B8\xDD\x02\u0FBC\u0FBD\x07\x9C" +
		"\x02\x02\u0FBD\u0FBF\x03\x02\x02\x02\u0FBE\u0FBA\x03\x02\x02\x02\u0FBE" +
		"\u0FBF\x03\x02\x02\x02\u0FBF\u016D\x03\x02\x02\x02\u0FC0\u0FC4\x05\u0170" +
		"\xB9\x02\u0FC1\u0FC3\x05\u0174\xBB\x02\u0FC2\u0FC1\x03\x02\x02\x02\u0FC3" +
		"\u0FC6\x03\x02\x02\x02\u0FC4\u0FC2\x03\x02\x02\x02\u0FC4\u0FC5\x03\x02" +
		"\x02\x02\u0FC5\u0FC9\x03\x02\x02\x02\u0FC6\u0FC4\x03\x02\x02\x02\u0FC7" +
		"\u0FC8\x07\xB5\x02\x02\u0FC8\u0FCA\x07\xCD\x02\x02\u0FC9\u0FC7\x03\x02" +
		"\x02\x02\u0FC9\u0FCA\x03\x02\x02\x02\u0FCA\u016F\x03\x02\x02\x02\u0FCB" +
		"\u0FCC\x05\u0172\xBA\x02\u0FCC\u0FD0\x07\x9D\x02\x02\u0FCD\u0FCF\x07\x04" +
		"\x02\x02\u0FCE\u0FCD\x03\x02\x02\x02\u0FCF\u0FD2\x03\x02\x02\x02\u0FD0" +
		"\u0FCE\x03\x02\x02\x02\u0FD0\u0FD1\x03\x02\x02\x02\u0FD1\u0FD3\x03\x02" +
		"\x02\x02\u0FD2\u0FD0\x03\x02\x02\x02\u0FD3\u0FD4\x05\u0184\xC3\x02\u0FD4" +
		"\u0FD5\x07\x9C\x02\x02\u0FD5\u0171\x03\x02\x02\x02\u0FD6\u0FD9\x07\xE3" +
		"\x02\x02\u0FD7\u0FDA\x07\xAE\x02\x02\u0FD8\u0FDA\x07\u011B\x02\x02\u0FD9" +
		"\u0FD7\x03\x02\x02\x02\u0FD9\u0FD8\x03\x02\x02\x02\u0FD9\u0FDA\x03\x02" +
		"\x02\x02\u0FDA\u0FE5\x03\x02\x02\x02\u0FDB\u0FDD\x07\xF7\x02\x02\u0FDC" +
		"\u0FDE\x07\xAE\x02\x02\u0FDD\u0FDC\x03\x02\x02\x02\u0FDD\u0FDE\x03\x02" +
		"\x02\x02\u0FDE\u0FE5\x03\x02\x02\x02\u0FDF\u0FE1\x07\xE4\x02\x02\u0FE0" +
		"\u0FE2\x07\xAE\x02\x02\u0FE1\u0FE0\x03\x02\x02\x02\u0FE1\u0FE2\x03\x02" +
		"\x02\x02\u0FE2\u0FE5\x03\x02\x02\x02\u0FE3\u0FE5\x07\xE5\x02\x02\u0FE4" +
		"\u0FD6\x03\x02\x02\x02\u0FE4\u0FDB\x03\x02\x02\x02\u0FE4\u0FDF\x03\x02" +
		"\x02\x02\u0FE4\u0FE3\x03\x02\x02\x02\u0FE5\u0173\x03\x02\x02\x02\u0FE6" +
		"\u0FE7\x07\xC9\x02\x02\u0FE7\u0FE8\x07\x9D\x02\x02\u0FE8\u0FE9\x05\u0184" +
		"\xC3\x02\u0FE9\u0FEA\x07\x9C\x02\x02\u0FEA\u0FF8\x03\x02\x02\x02\u0FEB" +
		"\u0FEC\t\x15\x02\x02\u0FEC\u0FED\x07\x9D\x02\x02\u0FED\u0FEE\x07\xB3\x02" +
		"\x02\u0FEE\u0FF8\x07\x9C\x02\x02\u0FEF\u0FF3\t\x16\x02\x02\u0FF0\u0FF2" +
		"\v\x02\x02\x02\u0FF1\u0FF0\x03\x02\x02\x02\u0FF2\u0FF5\x03\x02\x02\x02" +
		"\u0FF3\u0FF4\x03\x02\x02\x02\u0FF3\u0FF1\x03\x02\x02\x02\u0FF4\u0FF6\x03" +
		"\x02\x02\x02\u0FF5\u0FF3\x03\x02\x02\x02\u0FF6\u0FF8\x07\x9C\x02\x02\u0FF7" +
		"\u0FE6\x03\x02\x02\x02\u0FF7\u0FEB\x03\x02\x02\x02\u0FF7\u0FEF\x03\x02" +
		"\x02\x02\u0FF8\u0175\x03\x02\x02\x02\u0FF9\u0FFA\x07\xC9\x02\x02\u0FFA" +
		"\u0FFB\x07\x9D\x02\x02\u0FFB\u0FFC\x05\u0184\xC3\x02\u0FFC\u0FFD\x07\x9C" +
		"\x02\x02\u0FFD\u100B\x03\x02\x02\x02\u0FFE\u0FFF\t\x15\x02\x02\u0FFF\u1000" +
		"\x07\x9D\x02\x02\u1000\u1001\x07\xB3\x02\x02\u1001\u100B\x07\x9C\x02\x02" +
		"\u1002\u1006\t\x16\x02\x02\u1003\u1005\v\x02\x02\x02\u1004\u1003\x03\x02" +
		"\x02\x02\u1005\u1008\x03\x02\x02\x02\u1006\u1007\x03\x02\x02\x02\u1006" +
		"\u1004\x03\x02\x02\x02\u1007\u1009\x03\x02\x02\x02\u1008\u1006\x03\x02" +
		"\x02\x02\u1009\u100B\x07\x9C\x02\x02\u100A\u0FF9\x03\x02\x02\x02\u100A" +
		"\u0FFE\x03\x02\x02\x02\u100A\u1002\x03\x02\x02\x02\u100B\u0177\x03\x02" +
		"\x02\x02\u100C\u1010\x05\u017A\xBE\x02\u100D\u100F\x05\u0180\xC1\x02\u100E" +
		"\u100D\x03\x02\x02\x02\u100F\u1012\x03\x02\x02\x02\u1010\u100E\x03\x02" +
		"\x02\x02\u1010\u1011\x03\x02\x02\x02\u1011\u0179\x03\x02\x02\x02\u1012" +
		"\u1010\x03\x02\x02\x02\u1013\u1014\x05\u017E\xC0\x02\u1014\u1015\x07\x9D" +
		"\x02\x02\u1015\u1016\x05\u0184\xC3\x02\u1016\u101B\x07\x9C\x02\x02\u1017" +
		"\u1018\x07\xCB\x02\x02\u1018\u1019\x05\u01B8\xDD\x02\u1019\u101A\x07\x9C" +
		"\x02\x02\u101A\u101C\x03\x02\x02\x02\u101B\u1017\x03\x02\x02\x02\u101B" +
		"\u101C\x03\x02\x02\x02\u101C\u017B\x03\x02\x02\x02\u101D\u1020\x07\xD7" +
		"\x02\x02\u101E\u101F\x07\x9D\x02\x02\u101F\u1021\x07\xAF\x02\x02\u1020" +
		"\u101E\x03\x02\x02\x02\u1020\u1021\x03\x02\x02\x02\u1021\u1028\x03\x02" +
		"\x02\x02\u1022\u1025\x07\xEE\x02\x02\u1023\u1024\x07\x9D\x02\x02\u1024" +
		"\u1026\x07\xAF\x02\x02\u1025\u1023\x03\x02\x02\x02\u1025\u1026\x03\x02" +
		"\x02\x02\u1026\u1028\x03\x02\x02\x02\u1027\u101D\x03\x02\x02\x02\u1027" +
		"\u1022\x03\x02\x02\x02\u1028\u017D\x03\x02\x02\x02\u1029\u102C\x07\xE2" +
		"\x02\x02\u102A\u102B\x07\x9D\x02\x02\u102B\u102D\x07\xAF\x02\x02\u102C" +
		"\u102A\x03\x02\x02\x02\u102C\u102D\x03\x02\x02\x02\u102D\u1039\x03\x02" +
		"\x02\x02\u102E\u1031\x07\xF6\x02\x02\u102F\u1030\x07\x9D\x02\x02\u1030" +
		"\u1032\x07\xAF\x02\x02\u1031\u102F\x03\x02\x02\x02\u1031\u1032\x03\x02" +
		"\x02\x02\u1032\u1039\x03\x02\x02\x02\u1033\u1036\x07\u0105\x02\x02\u1034" +
		"\u1035\x07\x9D\x02\x02\u1035\u1037\x07\xAF\x02\x02\u1036\u1034\x03\x02" +
		"\x02\x02\u1036\u1037\x03\x02\x02\x02\u1037\u1039\x03\x02\x02\x02\u1038" +
		"\u1029\x03\x02\x02\x02\u1038\u102E\x03\x02\x02\x02\u1038\u1033\x03\x02" +
		"\x02\x02\u1039\u017F\x03\x02\x02\x02\u103A\u103B\x07\x95\x02\x02\u103B" +
		"\u103E\x05\u01B0\xD9\x02\u103C\u103E\x07\xC9\x02\x02\u103D\u103A\x03\x02" +
		"\x02\x02\u103D\u103C\x03\x02\x02\x02\u103E\u103F\x03\x02\x02\x02\u103F" +
		"\u1043\x07\x9D\x02\x02\u1040\u1042\x07\x04\x02\x02\u1041\u1040\x03\x02" +
		"\x02\x02\u1042\u1045\x03\x02\x02\x02\u1043\u1041\x03\x02\x02\x02\u1043" +
		"\u1044\x03\x02\x02\x02\u1044\u1048\x03\x02\x02\x02\u1045\u1043\x03\x02" +
		"\x02\x02\u1046\u1049\x05\u01B0\xD9\x02\u1047\u1049\x07\xB5\x02\x02\u1048" +
		"\u1046\x03\x02\x02\x02\u1048\u1047\x03\x02\x02\x02\u1049\u104A\x03\x02" +
		"\x02\x02\u104A\u1048\x03\x02\x02\x02\u104A\u104B\x03\x02\x02\x02\u104B" +
		"\u104C\x03\x02\x02\x02\u104C\u105A\x07\x9C\x02\x02\u104D\u104E\t\x15\x02" +
		"\x02\u104E\u104F\x07\x9D\x02\x02\u104F\u1050\x07\xB3\x02\x02\u1050\u105A" +
		"\x07\x9C\x02\x02\u1051\u1055\t\x16\x02\x02\u1052\u1054\v\x02\x02\x02\u1053" +
		"\u1052\x03\x02\x02\x02\u1054\u1057\x03\x02\x02\x02\u1055\u1056\x03\x02" +
		"\x02\x02\u1055\u1053\x03\x02\x02\x02\u1056\u1058\x03\x02\x02\x02\u1057" +
		"\u1055\x03\x02\x02\x02\u1058\u105A\x07\x9C\x02\x02\u1059\u103D\x03\x02" +
		"\x02\x02\u1059\u104D\x03\x02\x02\x02\u1059\u1051\x03\x02\x02\x02\u105A" +
		"\u0181\x03\x02\x02\x02\u105B\u105C\x07\u011A\x02\x02\u105C\u105D\x07\xA0" +
		"\x02\x02\u105D\u105E\x07\xB3\x02\x02\u105E\u0183\x03\x02\x02\x02\u105F" +
		"\u1060\x07\u011D\x02\x02\u1060\u0185\x03\x02\x02\x02\u1061\u1062\x07\x9B" +
		"\x02\x02\u1062\u106A\x07\x9C\x02\x02\u1063\u1065\x07\x04\x02\x02\u1064" +
		"\u1063\x03\x02\x02\x02\u1065\u1068\x03\x02\x02\x02\u1066\u1064\x03\x02" +
		"\x02\x02\u1066\u1067\x03\x02\x02\x02\u1067\u1069\x03\x02\x02\x02\u1068" +
		"\u1066\x03\x02\x02\x02\u1069\u106B\x05\u0188\xC5\x02\u106A\u1066\x03\x02" +
		"\x02\x02\u106A\u106B\x03\x02\x02\x02\u106B\u1080\x03\x02\x02\x02\u106C" +
		"\u106D\x07\x9B\x02\x02\u106D\u1072\x05\u01B0\xD9\x02\u106E\u1071\x07\x9D" +
		"\x02\x02\u106F\u1071\x05\u01B8\xDD\x02\u1070\u106E\x03\x02\x02\x02\u1070" +
		"\u106F\x03\x02\x02\x02\u1071\u1074\x03\x02\x02\x02\u1072\u1070\x03\x02" +
		"\x02\x02\u1072\u1073\x03\x02\x02\x02\u1073\u1075\x03\x02\x02\x02\u1074" +
		"\u1072\x03\x02\x02\x02\u1075\u107D\x07\x9C\x02\x02\u1076\u1078\x07\x04" +
		"\x02\x02\u1077\u1076\x03\x02\x02\x02\u1078\u107B\x03\x02\x02\x02\u1079" +
		"\u1077\x03\x02\x02\x02\u1079\u107A\x03\x02\x02\x02\u107A\u107C\x03\x02" +
		"\x02\x02\u107B\u1079\x03\x02\x02\x02\u107C\u107E\x05\u0188\xC5\x02\u107D" +
		"\u1079\x03\x02\x02\x02\u107D\u107E\x03\x02\x02\x02\u107E\u1080\x03\x02" +
		"\x02\x02\u107F\u1061\x03\x02\x02\x02\u107F\u106C\x03\x02\x02\x02\u1080" +
		"\u0187\x03\x02\x02\x02\u1081\u1082\x07\x9B\x02\x02\u1082\u1087\x05\u01B0" +
		"\xD9\x02\u1083\u1086\x07\x9D\x02\x02\u1084\u1086\x05\u01B8\xDD\x02\u1085" +
		"\u1083\x03\x02\x02\x02\u1085\u1084\x03\x02\x02\x02\u1086\u1089\x03\x02" +
		"\x02\x02\u1087\u1085\x03\x02\x02\x02\u1087\u1088\x03\x02\x02\x02\u1088" +
		"\u108A\x03\x02\x02\x02\u1089\u1087\x03\x02\x02\x02\u108A\u108B\x07\x9C" +
		"\x02\x02\u108B\u0189\x03\x02\x02\x02\u108C\u108E\x07\x8F\x02\x02\u108D" +
		"\u108F\x05\u01B0\xD9\x02\u108E\u108D\x03\x02\x02\x02\u108E\u108F\x03\x02" +
		"\x02\x02\u108F\u1090\x03\x02\x02\x02\u1090\u1097\x07\x9C\x02\x02\u1091" +
		"\u1093\x07\x90\x02\x02\u1092\u1094\x05\u01B0\xD9\x02\u1093\u1092\x03\x02" +
		"\x02\x02\u1093\u1094\x03\x02\x02\x02\u1094\u1095\x03\x02\x02\x02\u1095" +
		"\u1097\x07\x9C\x02\x02\u1096\u108C\x03\x02\x02\x02\u1096\u1091\x03\x02" +
		"\x02\x02\u1097\u018B\x03\x02\x02\x02\u1098\u10A0\x07\xC3\x02\x02\u1099" +
		"\u10A0\x07\xC1\x02\x02\u109A\u109C\x07\xC2\x02\x02\u109B\u109D\x07\xB7" +
		"\x02\x02\u109C\u109B\x03\x02\x02\x02\u109C\u109D\x03\x02\x02\x02\u109D" +
		"\u109E\x03\x02\x02\x02\u109E\u10A0\x07\x02\x02\x03\u109F\u1098\x03\x02" +
		"\x02\x02\u109F\u1099\x03\x02\x02\x02\u109F\u109A\x03\x02\x02\x02\u10A0" +
		"\u018D\x03\x02\x02\x02\u10A1\u10A3\x07\xED\x02\x02\u10A2\u10A4\x05\u01B0" +
		"\xD9\x02\u10A3\u10A2\x03\x02\x02\x02\u10A3\u10A4\x03\x02\x02\x02\u10A4" +
		"\u10BA\x03\x02\x02\x02\u10A5\u10AF\x05\u01B0\xD9\x02\u10A6\u10AA\x07\xB5" +
		"\x02\x02\u10A7\u10A9\x07\x04\x02\x02\u10A8\u10A7\x03\x02\x02\x02\u10A9" +
		"\u10AC\x03\x02\x02\x02\u10AA\u10A8\x03\x02\x02\x02\u10AA\u10AB\x03\x02" +
		"\x02\x02\u10AB\u10AE\x03\x02\x02\x02\u10AC\u10AA\x03\x02\x02\x02\u10AD" +
		"\u10A6\x03\x02\x02\x02\u10AE\u10B1\x03\x02\x02\x02\u10AF\u10AD\x03\x02" +
		"\x02\x02\u10AF\u10B0\x03\x02\x02\x02\u10B0\u10B5\x03\x02\x02\x02\u10B1" +
		"\u10AF\x03\x02\x02\x02\u10B2\u10B4\x07\xB5\x02\x02\u10B3\u10B2\x03\x02" +
		"\x02\x02\u10B4\u10B7\x03\x02\x02\x02\u10B5\u10B3\x03\x02\x02\x02\u10B5" +
		"\u10B6\x03\x02\x02\x02\u10B6\u10B9\x03\x02\x02\x02\u10B7\u10B5\x03\x02" +
		"\x02\x02\u10B8\u10A5\x03\x02\x02\x02\u10B9\u10BC\x03\x02\x02\x02\u10BA" +
		"\u10B8\x03\x02\x02\x02\u10BA\u10BB\x03\x02\x02\x02\u10BB\u10BD\x03\x02" +
		"\x02\x02\u10BC\u10BA\x03\x02\x02\x02\u10BD\u10C9\x07\x9C";
	private static readonly _serializedATNSegment8: string =
		"\x02\x02\u10BE\u10C4\x07\xED\x02\x02\u10BF\u10C3\x05\u01B0\xD9\x02\u10C0" +
		"\u10C3\x07\xB5\x02\x02\u10C1\u10C3\x07\x04\x02\x02\u10C2\u10BF\x03\x02" +
		"\x02\x02\u10C2\u10C0\x03\x02\x02\x02\u10C2\u10C1\x03\x02\x02\x02\u10C3" +
		"\u10C6\x03\x02\x02\x02\u10C4\u10C2\x03\x02\x02\x02\u10C4\u10C5\x03\x02" +
		"\x02\x02\u10C5\u10C7\x03\x02\x02\x02\u10C6\u10C4\x03\x02\x02\x02\u10C7" +
		"\u10C9\x07\x02\x02\x03\u10C8\u10A1\x03\x02\x02\x02\u10C8\u10BE\x03\x02" +
		"\x02\x02\u10C9\u018F\x03\x02\x02\x02\u10CA\u10CF\x07\xBB\x02\x02\u10CB" +
		"\u10D0\x05\u01B0\xD9\x02\u10CC\u10D0\x07\x9D\x02\x02\u10CD\u10D0\x07\u011D" +
		"\x02\x02\u10CE\u10D0\x07\xB5\x02\x02\u10CF\u10CB\x03\x02\x02\x02\u10CF" +
		"\u10CC\x03\x02\x02\x02\u10CF\u10CD\x03\x02\x02\x02\u10CF\u10CE\x03\x02" +
		"\x02\x02\u10D0\u10D1\x03\x02\x02\x02\u10D1\u10CF\x03\x02\x02\x02\u10D1" +
		"\u10D2\x03\x02\x02\x02\u10D2\u10D3\x03\x02\x02\x02\u10D3\u10E1\x07\x9C" +
		"\x02\x02\u10D4\u10DC\x07\xBB\x02\x02\u10D5\u10DB\x05\u01B0\xD9\x02\u10D6" +
		"\u10DB\x07\x9D\x02\x02\u10D7\u10DB\x07\u011D\x02\x02\u10D8\u10DB\x07\xB5" +
		"\x02\x02\u10D9\u10DB\x07\x04\x02\x02\u10DA\u10D5\x03\x02\x02\x02\u10DA" +
		"\u10D6\x03\x02\x02\x02\u10DA\u10D7\x03\x02\x02\x02\u10DA\u10D8\x03\x02" +
		"\x02\x02\u10DA\u10D9\x03\x02\x02\x02\u10DB\u10DE\x03\x02\x02\x02\u10DC" +
		"\u10DA\x03\x02\x02\x02\u10DC\u10DD\x03\x02\x02\x02\u10DD\u10DF\x03\x02" +
		"\x02\x02\u10DE\u10DC\x03\x02\x02\x02\u10DF\u10E1\x07\x02\x02\x03\u10E0" +
		"\u10CA\x03\x02\x02\x02\u10E0\u10D4\x03\x02\x02\x02\u10E1\u0191\x03\x02" +
		"\x02\x02\u10E2\u10E3\x07\xBA\x02\x02\u10E3\u10E4\x05\u01B0\xD9\x02\u10E4" +
		"\u10E5\x07\x9C\x02\x02\u10E5\u0193\x03\x02\x02\x02\u10E6\u10EA\x07\xD4" +
		"\x02\x02\u10E7\u10EB\x05\u01B0\xD9\x02\u10E8\u10EB\x07\x9D\x02\x02\u10E9" +
		"\u10EB\x07\xB5\x02\x02\u10EA\u10E7\x03\x02\x02\x02\u10EA\u10E8\x03\x02" +
		"\x02\x02\u10EA\u10E9\x03\x02\x02\x02\u10EB\u10EC\x03\x02\x02\x02\u10EC" +
		"\u10EA\x03\x02\x02\x02\u10EC\u10ED\x03\x02\x02\x02\u10ED\u10EE\x03\x02" +
		"\x02\x02\u10EE\u10F0\x07\x9C\x02\x02\u10EF\u10F1\x05\u0196\xCC\x02\u10F0" +
		"\u10EF\x03\x02\x02\x02\u10F0\u10F1\x03\x02\x02\x02\u10F1\u0195\x03\x02" +
		"\x02\x02\u10F2\u10F6\x07\xD4\x02\x02\u10F3\u10F7\x05\u01B0\xD9\x02\u10F4" +
		"\u10F7\x07\x9D\x02\x02\u10F5\u10F7\x07\xB5\x02\x02\u10F6\u10F3\x03\x02" +
		"\x02\x02\u10F6\u10F4\x03\x02\x02\x02\u10F6\u10F5\x03\x02\x02\x02\u10F7" +
		"\u10F8\x03\x02\x02\x02\u10F8\u10F6\x03\x02\x02\x02\u10F8\u10F9\x03\x02" +
		"\x02\x02\u10F9\u10FA\x03\x02\x02\x02\u10FA\u10FB\x07\x9C\x02\x02\u10FB" +
		"\u0197\x03\x02\x02\x02\u10FC\u1100\x07\x93\x02\x02\u10FD\u10FF\x07\xB5" +
		"\x02\x02\u10FE\u10FD\x03\x02\x02\x02\u10FF\u1102\x03\x02\x02\x02\u1100" +
		"\u10FE\x03\x02\x02\x02\u1100\u1101\x03\x02\x02\x02\u1101\u1104\x03\x02" +
		"\x02\x02\u1102\u1100\x03\x02\x02\x02\u1103\u1105\x05\u01B0\xD9\x02\u1104" +
		"\u1103\x03\x02\x02\x02\u1104\u1105\x03\x02\x02\x02\u1105\u111B\x03\x02" +
		"\x02\x02\u1106\u1110\x05\u01B0\xD9\x02\u1107\u110B\x07\xB5\x02\x02\u1108" +
		"\u110A\x07\x04\x02\x02\u1109\u1108\x03\x02\x02\x02\u110A\u110D\x03\x02" +
		"\x02\x02\u110B\u1109\x03\x02\x02\x02\u110B\u110C\x03\x02\x02\x02\u110C" +
		"\u110F\x03\x02\x02\x02\u110D\u110B\x03\x02\x02\x02\u110E\u1107\x03\x02" +
		"\x02\x02\u110F\u1112\x03\x02\x02\x02\u1110\u110E\x03\x02\x02\x02\u1110" +
		"\u1111\x03\x02\x02\x02\u1111\u1116\x03\x02\x02\x02\u1112\u1110\x03\x02" +
		"\x02\x02\u1113\u1115\x07\xB5\x02\x02\u1114\u1113\x03\x02\x02\x02\u1115" +
		"\u1118\x03\x02\x02\x02\u1116\u1114\x03\x02\x02\x02\u1116\u1117\x03\x02" +
		"\x02\x02\u1117\u111A\x03\x02\x02\x02\u1118\u1116\x03\x02\x02\x02\u1119" +
		"\u1106\x03\x02\x02\x02\u111A\u111D\x03\x02\x02\x02\u111B\u1119\x03\x02" +
		"\x02\x02\u111B\u111C\x03\x02\x02\x02\u111C\u111E\x03\x02\x02\x02\u111D" +
		"\u111B\x03\x02\x02\x02\u111E\u112B\x07\x9C\x02\x02\u111F\u1123\x07\x93" +
		"\x02\x02\u1120\u1122\x07\xB5\x02\x02\u1121\u1120\x03\x02\x02\x02\u1122" +
		"\u1125\x03\x02\x02\x02\u1123\u1121\x03\x02\x02\x02\u1123\u1124\x03\x02" +
		"\x02\x02\u1124\u1127\x03\x02\x02\x02\u1125\u1123\x03\x02\x02\x02\u1126" +
		"\u1128\x05\u01B0\xD9\x02\u1127\u1126\x03\x02\x02\x02\u1127\u1128\x03\x02" +
		"\x02\x02\u1128\u1129\x03\x02\x02\x02\u1129\u112B\x07\x02\x02\x03\u112A" +
		"\u10FC\x03\x02\x02\x02\u112A\u111F\x03\x02\x02\x02\u112B\u0199\x03\x02" +
		"\x02\x02\u112C\u112E\x07\x94\x02\x02\u112D\u112F\n\x17\x02\x02\u112E\u112D" +
		"\x03\x02\x02\x02\u112F\u1130\x03\x02\x02\x02\u1130\u112E\x03\x02\x02\x02" +
		"\u1130\u1131\x03\x02\x02\x02\u1131\u1132\x03\x02\x02\x02\u1132\u1133\x07" +
		"\x9C\x02\x02\u1133\u019B\x03\x02\x02\x02\u1134\u1137\x07\x9A\x02\x02\u1135" +
		"\u1138\x05\u01B0\xD9\x02\u1136\u1138\x07\xB5\x02\x02\u1137\u1135\x03\x02" +
		"\x02\x02\u1137\u1136\x03\x02\x02\x02\u1138\u1139\x03\x02\x02\x02\u1139" +
		"\u1137\x03\x02\x02\x02\u1139\u113A\x03\x02\x02\x02\u113A\u113B\x03\x02" +
		"\x02\x02\u113B\u1141\x07\x9C\x02\x02\u113C\u113D\x07\x9A\x02\x02\u113D" +
		"\u113E\x05\u01B0\xD9\x02\u113E\u113F\x07\x02\x02\x03\u113F\u1141\x03\x02" +
		"\x02\x02\u1140\u1134\x03\x02\x02\x02\u1140\u113C\x03\x02\x02\x02\u1141" +
		"\u019D\x03\x02\x02\x02\u1142\u1143\x07\xC6\x02\x02\u1143\u1144\x05\u01B0" +
		"\xD9\x02\u1144\u1145\x07\x9C\x02\x02\u1145\u114B\x03\x02\x02\x02\u1146" +
		"\u1147\x07\xC7\x02\x02\u1147\u1148\x05\u01B0\xD9\x02\u1148\u1149\x07\x9C" +
		"\x02\x02\u1149\u114B\x03\x02\x02\x02\u114A\u1142\x03\x02\x02\x02\u114A" +
		"\u1146\x03\x02\x02\x02\u114B\u019F\x03\x02\x02\x02\u114C\u114D\x07\xBE" +
		"\x02\x02\u114D\u114E\x07\x9D\x02\x02\u114E\u114F\x07\xB3\x02\x02\u114F" +
		"\u1156\x07\x9C\x02\x02\u1150\u1151\x07\xBE\x02\x02\u1151\u1152\x07\x9D" +
		"\x02\x02\u1152\u1153\x05\u01B0\xD9\x02\u1153\u1154\x07\x9C\x02\x02\u1154" +
		"\u1156\x03\x02\x02\x02\u1155\u114C\x03\x02\x02\x02\u1155\u1150\x03\x02" +
		"\x02\x02\u1156\u01A1\x03\x02\x02\x02\u1157\u1158\x07\xD2\x02\x02\u1158" +
		"\u1159\x05\u01B0\xD9\x02\u1159\u115A\x07\x9C\x02\x02\u115A\u01A3\x03\x02" +
		"\x02\x02\u115B\u115C\x07\xD3\x02\x02\u115C\u115D\x05\u01B0\xD9\x02\u115D" +
		"\u115E\x07\x9C\x02\x02\u115E\u01A5\x03\x02\x02\x02\u115F\u1169\x05\u01A8" +
		"\xD5\x02\u1160\u1162\x07\xB5\x02\x02\u1161\u1160\x03\x02\x02\x02\u1162" +
		"\u1165\x03\x02\x02\x02\u1163\u1161\x03\x02\x02\x02\u1163\u1164\x03\x02" +
		"\x02\x02\u1164\u1166\x03\x02\x02\x02\u1165\u1163\x03\x02\x02\x02\u1166" +
		"\u1168\x05\u01A8\xD5\x02\u1167\u1163\x03\x02\x02\x02\u1168\u116B\x03\x02" +
		"\x02\x02\u1169\u1167\x03\x02\x02\x02\u1169\u116A\x03\x02\x02\x02\u116A" +
		"\u01A7\x03\x02\x02\x02\u116B\u1169\x03\x02\x02\x02\u116C\u116D\x07\x95" +
		"\x02\x02\u116D\u116E\x05\u01B0\xD9\x02\u116E\u116F\t\x18\x02\x02\u116F" +
		"\u1175\x05\u01B0\xD9\x02\u1170\u1174\x07\xB5\x02\x02\u1171\u1174\x07\x9D" +
		"\x02\x02\u1172\u1174\x05\u01B0\xD9\x02\u1173\u1170\x03\x02\x02\x02\u1173" +
		"\u1171\x03\x02\x02\x02\u1173\u1172\x03\x02\x02\x02\u1174\u1177\x03\x02" +
		"\x02\x02\u1175\u1173\x03\x02\x02\x02\u1175\u1176\x03\x02\x02\x02\u1176" +
		"\u1178\x03\x02\x02\x02\u1177\u1175\x03\x02\x02\x02\u1178\u1179\x07\x9C" +
		"\x02\x02\u1179\u1183\x03\x02\x02\x02\u117A\u117E\x07\xD0\x02\x02\u117B" +
		"\u117D\v\x02\x02\x02\u117C\u117B\x03\x02\x02\x02\u117D\u1180\x03\x02\x02" +
		"\x02\u117E\u117F\x03\x02\x02\x02\u117E\u117C\x03\x02\x02\x02\u117F\u1181" +
		"\x03\x02\x02\x02\u1180\u117E\x03\x02\x02\x02\u1181\u1183\x07\x9C\x02\x02" +
		"\u1182\u116C\x03\x02\x02\x02\u1182\u117A\x03\x02\x02\x02\u1183\u01A9\x03" +
		"\x02\x02\x02\u1184\u1188\x07\x8D\x02\x02\u1185\u1189\x05\u01B0\xD9\x02" +
		"\u1186\u1189\x07\x9D\x02\x02\u1187\u1189\x07\xB5\x02\x02\u1188\u1185\x03" +
		"\x02\x02\x02\u1188\u1186\x03\x02\x02\x02\u1188\u1187\x03\x02\x02\x02\u1189" +
		"\u118A\x03\x02\x02\x02\u118A\u1188\x03\x02\x02\x02\u118A\u118B\x03\x02" +
		"\x02\x02\u118B\u118C\x03\x02\x02\x02\u118C\u1198\x07\x9C\x02\x02\u118D" +
		"\u1193\x07\x8D\x02\x02\u118E\u1192\x05\u01B0\xD9\x02\u118F\u1192\x07\x9D" +
		"\x02\x02\u1190\u1192\x07\xB5\x02\x02\u1191\u118E\x03\x02\x02\x02\u1191" +
		"\u118F\x03\x02\x02\x02\u1191\u1190\x03\x02\x02\x02\u1192\u1195\x03\x02" +
		"\x02\x02\u1193\u1191\x03\x02\x02\x02\u1193\u1194\x03\x02\x02\x02\u1194" +
		"\u1196\x03\x02\x02\x02\u1195\u1193\x03\x02\x02\x02\u1196\u1198\x07\x02" +
		"\x02\x03\u1197\u1184\x03\x02\x02\x02\u1197\u118D\x03\x02\x02\x02\u1198" +
		"\u01AB\x03\x02\x02\x02\u1199\u119B\x07\x91\x02\x02\u119A\u119C\x05\u01B0" +
		"\xD9\x02\u119B\u119A\x03\x02\x02\x02\u119B\u119C\x03\x02\x02\x02\u119C" +
		"\u119D\x03\x02\x02\x02\u119D\u119E\x07\x9C\x02\x02\u119E\u01AD\x03\x02" +
		"\x02\x02\u119F\u11A1\x05\u01B0\xD9\x02\u11A0\u11A2\x07\xB5\x02\x02\u11A1" +
		"\u11A0\x03\x02\x02\x02\u11A1\u11A2\x03\x02\x02\x02\u11A2\u11A4\x03\x02" +
		"\x02\x02\u11A3\u119F\x03\x02\x02\x02\u11A4\u11A5\x03\x02\x02\x02\u11A5" +
		"\u11A3\x03\x02\x02\x02\u11A5\u11A6\x03\x02\x02\x02\u11A6\u01AF\x03\x02" +
		"\x02\x02\u11A7\u11AE\x07\xB4\x02\x02\u11A8\u11AA\x07\x04\x02\x02\u11A9" +
		"\u11A8\x03\x02\x02\x02\u11AA\u11AB\x03\x02\x02\x02\u11AB\u11A9\x03\x02" +
		"\x02\x02\u11AB\u11AC\x03\x02\x02\x02\u11AC\u11AD\x03\x02\x02\x02\u11AD" +
		"\u11AF\x07\xB3\x02\x02\u11AE\u11A9\x03\x02\x02\x02\u11AE\u11AF\x03\x02" +
		"\x02\x02\u11AF\u11D5\x03\x02\x02\x02\u11B0\u11B7\x05\u01B8\xDD\x02\u11B1" +
		"\u11B3\x07\x04\x02\x02\u11B2\u11B1\x03\x02\x02\x02\u11B3\u11B4\x03\x02" +
		"\x02\x02\u11B4\u11B2\x03\x02\x02\x02\u11B4\u11B5\x03\x02\x02\x02\u11B5" +
		"\u11B6\x03\x02\x02\x02\u11B6\u11B8\x07\xB3\x02\x02\u11B7\u11B2\x03\x02" +
		"\x02\x02\u11B7\u11B8\x03\x02\x02\x02\u11B8\u11D5\x03\x02\x02\x02\u11B9" +
		"\u11D5\x07\xB3\x02\x02\u11BA\u11BB\x07\x98\x02\x02\u11BB\u11BC\x05\u01B0" +
		"\xD9\x02\u11BC\u11BD\x07\x9C\x02\x02\u11BD\u11D5\x03\x02\x02\x02\u11BE" +
		"\u11C0\x07\x04\x02\x02\u11BF\u11BE\x03\x02\x02\x02\u11C0\u11C3\x03\x02" +
		"\x02\x02\u11C1\u11BF\x03\x02\x02\x02\u11C1\u11C2\x03\x02\x02\x02\u11C2" +
		"\u11C4\x03\x02\x02\x02\u11C3\u11C1\x03\x02\x02\x02\u11C4\u11C8\x07\x9D" +
		"\x02\x02\u11C5\u11C7\x07\x04\x02\x02\u11C6\u11C5\x03\x02\x02\x02\u11C7" +
		"\u11CA\x03\x02\x02\x02\u11C8\u11C6\x03\x02\x02\x02\u11C8\u11C9\x03\x02" +
		"\x02\x02\u11C9\u11D5\x03\x02\x02\x02\u11CA\u11C8\x03\x02\x02\x02\u11CB" +
		"\u11CF\x07\x9E\x02\x02\u11CC\u11CE\x07\x04\x02\x02\u11CD\u11CC\x03\x02" +
		"\x02\x02\u11CE\u11D1\x03\x02\x02\x02\u11CF\u11CD\x03\x02\x02\x02\u11CF" +
		"\u11D0\x03\x02\x02\x02\u11D0\u11D5\x03\x02\x02\x02\u11D1\u11CF\x03\x02" +
		"\x02\x02\u11D2\u11D5\x07\xA6\x02\x02\u11D3\u11D5\x07\u011D\x02\x02\u11D4" +
		"\u11A7\x03\x02\x02\x02\u11D4\u11B0\x03\x02\x02\x02\u11D4\u11B9\x03\x02" +
		"\x02\x02\u11D4\u11BA\x03\x02\x02\x02\u11D4\u11C1\x03\x02\x02\x02\u11D4" +
		"\u11CB\x03\x02\x02\x02\u11D4\u11D2\x03\x02\x02\x02\u11D4\u11D3\x03\x02" +
		"\x02\x02\u11D5\u01B1\x03\x02\x02\x02\u11D6\u11D7\x07\xAD\x02\x02\u11D7" +
		"\u01B3\x03\x02\x02\x02\u11D8\u11D9\x07\x9C\x02\x02\u11D9\u01B5\x03\x02" +
		"\x02\x02\u11DA\u11DB\t\x19\x02\x02\u11DB\u01B7\x03\x02\x02\x02\u11DC\u11FA" +
		"\x05\u01BC\xDF\x02\u11DD\u11FA\x07\xB6\x02\x02\u11DE\u11FA\x07\xB8\x02" +
		"\x02\u11DF\u11FA\x07\x9E\x02\x02\u11E0\u11E1\x07\xA2\x02\x02\u11E1\u11FA" +
		"\n\x1A\x02\x02\u11E2\u11E3\x07\xA3\x02\x02\u11E3\u11FA\n\x1B\x02\x02\u11E4" +
		"\u11FA\x07\xA5\x02\x02\u11E5\u11FA\x07\xA4\x02\x02\u11E6\u11FA\x07\xDC" +
		"\x02\x02\u11E7\u11FA\x07\xF1\x02\x02\u11E8\u11FA\x07\xDD\x02\x02\u11E9" +
		"\u11FA\x07\xF2\x02\x02\u11EA\u11FA\x07\xDF\x02\x02\u11EB\u11FA\x07\xF4" +
		"\x02\x02\u11EC\u11FA\x07\xD8\x02\x02\u11ED\u11FA\x07\xEF\x02\x02\u11EE" +
		"\u11FA\x07\xD7\x02\x02\u11EF\u11FA\x07\xEE\x02\x02\u11F0\u11FA\x07\xDB" +
		"\x02\x02\u11F1\u11FA\x07\xF0\x02\x02\u11F2\u11FA\x07\xDE\x02\x02\u11F3" +
		"\u11FA\x07\xF3\x02\x02\u11F4\u11FA\x07\xE0\x02\x02\u11F5\u11FA\x07\xF5" +
		"\x02\x02\u11F6\u11FA\x07\u0108\x02\x02\u11F7\u11FA\x07\u0109\x02\x02\u11F8" +
		"\u11FA\x07\xAB\x02\x02\u11F9\u11DC\x03\x02\x02\x02\u11F9\u11DD\x03\x02" +
		"\x02\x02\u11F9\u11DE\x03\x02\x02\x02\u11F9\u11DF\x03\x02\x02\x02\u11F9" +
		"\u11E0\x03\x02\x02\x02\u11F9\u11E2\x03\x02\x02\x02\u11F9\u11E4\x03\x02" +
		"\x02\x02\u11F9\u11E5\x03\x02\x02\x02\u11F9\u11E6\x03\x02\x02\x02\u11F9" +
		"\u11E7\x03\x02\x02\x02\u11F9\u11E8\x03\x02\x02\x02\u11F9\u11E9\x03\x02" +
		"\x02\x02\u11F9\u11EA\x03\x02\x02\x02\u11F9\u11EB\x03\x02\x02\x02\u11F9" +
		"\u11EC\x03\x02\x02\x02\u11F9\u11ED\x03\x02\x02\x02\u11F9\u11EE\x03\x02" +
		"\x02\x02\u11F9\u11EF\x03\x02\x02\x02\u11F9\u11F0\x03\x02\x02\x02\u11F9" +
		"\u11F1\x03\x02\x02\x02\u11F9\u11F2\x03\x02\x02\x02\u11F9\u11F3\x03\x02" +
		"\x02\x02\u11F9\u11F4\x03\x02\x02\x02\u11F9\u11F5\x03\x02\x02\x02\u11F9" +
		"\u11F6\x03\x02\x02\x02\u11F9\u11F7\x03\x02\x02\x02\u11F9\u11F8\x03\x02" +
		"\x02\x02\u11FA\u11FB\x03\x02\x02\x02\u11FB\u11F9\x03\x02\x02\x02\u11FB" +
		"\u11FC\x03\x02\x02\x02\u11FC\u01B9\x03\x02\x02\x02\u11FD\u11FE\x07\x04" +
		"\x02\x02\u11FE\u01BB\x03\x02\x02\x02\u11FF\u1200\x07\xB7\x02\x02\u1200" +
		"\u01BD\x03\x02\x02\x02\u0275\u01C2\u01C8\u01CD\u01D2\u01D9\u0261\u0265" +
		"\u026B\u0271\u0275\u027B\u0281\u0287\u028D\u0292\u0299\u02A0\u02A7\u02AD" +
		"\u02B3\u02BB\u02C4\u02C8\u02D1\u02D3\u02D8\u02DE\u02E7\u02E9\u02EE\u02F4" +
		"\u02FD\u0304\u0309\u0311\u0318\u031D\u0325\u032C\u0331\u0339\u0340\u0345" +
		"\u034D\u0354\u0359\u0361\u0368\u036D\u0375\u037C\u0381\u0389\u0390\u0395" +
		"\u039D\u03A4\u03A9\u03B1\u03B8\u03BD\u03C5\u03CC\u03D1\u03D9\u03E0\u03E5" +
		"\u03ED\u03F4\u03F9\u0401\u0408\u040D\u0415\u041C\u0421\u0429\u0430\u0435" +
		"\u043D\u0444\u0449\u044E\u0452\u0457\u0460\u0467\u046C\u0471\u0475\u047A" +
		"\u0483\u048A\u048F\u0494\u0498\u049D\u04A6\u04AD\u04B2\u04BA\u04C1\u04C6" +
		"\u04CF\u04D3\u04D8\u04DE\u0500\u0508\u050A\u0511\u0516\u051C\u0522\u0527" +
		"\u052D\u0532\u0538\u0544\u0549\u054F\u0555\u055B\u0562\u0568\u056B\u056F" +
		"\u0573\u0575\u0585\u058A\u0590\u0596\u059D\u05A3\u05A6\u05AC\u05B5\u05BA" +
		"\u05C2\u05C7\u05CC\u05D2\u05D9\u05DF\u05E2\u05E8\u05ED\u05EF\u05F6\u05FD" +
		"\u0604\u060C\u0611\u0617\u061E\u0624\u0627\u0631\u0636\u063C\u0643\u0649" +
		"\u064C\u0656\u065B\u0661\u0668\u066E\u0671\u067B\u0680\u0686\u068D\u0693" +
		"\u0696\u069E\u06A5\u06AA\u06AE\u06B3\u06BA\u06C0\u06C3\u06CB\u06D1\u06D6" +
		"\u06DA\u06DF\u06E6\u06EC\u06EF\u06F7\u06FE\u0703\u070B\u0712\u0717\u071F" +
		"\u0726\u072B\u0733\u073A\u073F\u0747\u074E\u0753\u075B\u0762\u0767\u076F" +
		"\u0776\u077B\u0783\u078A\u078F\u0797\u079E\u07A3\u07AB\u07B2\u07B7\u07BF" +
		"\u07C6\u07CB\u07D3\u07DA\u07DF\u07E7\u07EE\u07F3\u07FB\u0802\u0807\u080F" +
		"\u0816\u081B\u0823\u082A\u082F\u0837\u083E\u0843\u084B\u0852\u0857\u085F" +
		"\u0866\u086B\u0873\u087A\u087F\u0887\u088E\u0893\u089B\u08A2\u08A7\u08AF" +
		"\u08B6\u08BB\u08C3\u08CA\u08CF\u08D7\u08DE\u08E3\u08EB\u08F2\u08F7\u08FF" +
		"\u0906\u090B\u0913\u091A\u091F\u0927\u092E\u0933\u093B\u0942\u0947\u094F" +
		"\u0956\u095B\u0963\u096A\u096F\u0977\u097E\u0983\u098B\u0992\u0997\u099F" +
		"\u09A6\u09AB\u09B3\u09BA\u09BF\u09C7\u09CE\u09D3\u09DB\u09E2\u09E7\u09EF" +
		"\u09F6\u09FB\u0A03\u0A0A\u0A0F\u0A17\u0A1E\u0A23\u0A2B\u0A32\u0A37\u0A3F" +
		"\u0A46\u0A4B\u0A53\u0A5A\u0A5F\u0A67\u0A6E\u0A73\u0A7B\u0A82\u0A87\u0A8F" +
		"\u0A96\u0A9B\u0AA3\u0AAA\u0AAF\u0AB7\u0ABE\u0AC3\u0ACB\u0AD2\u0AD7\u0ADF" +
		"\u0AE6\u0AEB\u0AF3\u0AFA\u0AFF\u0B07\u0B0E\u0B13\u0B1B\u0B22\u0B27\u0B2F" +
		"\u0B36\u0B3B\u0B43\u0B4A\u0B4F\u0B57\u0B5E\u0B63\u0B6B\u0B72\u0B77\u0B7F" +
		"\u0B86\u0B8B\u0B93\u0B9A\u0B9F\u0BA7\u0BAE\u0BB3\u0BBB\u0BC2\u0BC7\u0BCF" +
		"\u0BD6\u0BDB\u0BE3\u0BEA\u0BEF\u0BF7\u0BFE\u0C03\u0C0B\u0C12\u0C17\u0C1F" +
		"\u0C26\u0C2B\u0C33\u0C3A\u0C3F\u0C47\u0C4E\u0C53\u0C5B\u0C62\u0C67\u0C6F" +
		"\u0C76\u0C7B\u0C83\u0C8A\u0C8F\u0C97\u0C9E\u0CA3\u0CAB\u0CB2\u0CB7\u0CBF" +
		"\u0CC6\u0CCB\u0CD3\u0CDA\u0CDF\u0CE7\u0CEE\u0CF3\u0CFB\u0D02\u0D07\u0D0F" +
		"\u0D16\u0D1B\u0D23\u0D2A\u0D2F\u0D37\u0D3E\u0D43\u0D4B\u0D52\u0D57\u0D5F" +
		"\u0D66\u0D6B\u0D73\u0D7A\u0D7F\u0D87\u0D8E\u0D93\u0D9B\u0DA2\u0DA7\u0DAF" +
		"\u0DB6\u0DBB\u0DC3\u0DCA\u0DCF\u0DDB\u0DE0\u0DE6\u0DED\u0DF3\u0DF6\u0DFF" +
		"\u0E01\u0E09\u0E10\u0E15\u0E1E\u0E22\u0E28\u0E2F\u0E35\u0E38\u0E3E\u0E46" +
		"\u0E4D\u0E52\u0E57\u0E5C\u0E62\u0E66\u0E70\u0E77\u0E7C\u0E85\u0E89\u0E93" +
		"\u0E9A\u0E9F\u0EA8\u0EAC\u0EB6\u0EBD\u0EC2\u0ECB\u0ECF\u0ED9\u0EE0\u0EE5" +
		"\u0EED\u0EF3\u0EF7\u0EFD\u0F04\u0F0A\u0F0D\u0F12\u0F1B\u0F21\u0F23\u0F31" +
		"\u0F38\u0F3D\u0F41\u0F45\u0F48\u0F4D\u0F64\u0F69\u0F6E\u0F70\u0F7A\u0F84" +
		"\u0F8E\u0F94\u0F9B\u0FA1\u0FA9\u0FB3\u0FBE\u0FC4\u0FC9\u0FD0\u0FD9\u0FDD" +
		"\u0FE1\u0FE4\u0FF3\u0FF7\u1006\u100A\u1010\u101B\u1020\u1025\u1027\u102C" +
		"\u1031\u1036\u1038\u103D\u1043\u1048\u104A\u1055\u1059\u1066\u106A\u1070" +
		"\u1072\u1079\u107D\u107F\u1085\u1087\u108E\u1093\u1096\u109C\u109F\u10A3" +
		"\u10AA\u10AF\u10B5\u10BA\u10C2\u10C4\u10C8\u10CF\u10D1\u10DA\u10DC\u10E0" +
		"\u10EA\u10EC\u10F0\u10F6\u10F8\u1100\u1104\u110B\u1110\u1116\u111B\u1123" +
		"\u1127\u112A\u1130\u1137\u1139\u1140\u114A\u1155\u1163\u1169\u1173\u1175" +
		"\u117E\u1182\u1188\u118A\u1191\u1193\u1197\u119B\u11A1\u11A5\u11AB\u11AE" +
		"\u11B4\u11B7\u11C1\u11C8\u11CF\u11D4\u11F9\u11FB";
	public static readonly _serializedATN: string = Utils.join(
		[
			bitmarkParser._serializedATNSegment0,
			bitmarkParser._serializedATNSegment1,
			bitmarkParser._serializedATNSegment2,
			bitmarkParser._serializedATNSegment3,
			bitmarkParser._serializedATNSegment4,
			bitmarkParser._serializedATNSegment5,
			bitmarkParser._serializedATNSegment6,
			bitmarkParser._serializedATNSegment7,
			bitmarkParser._serializedATNSegment8,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!bitmarkParser.__ATN) {
			bitmarkParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(bitmarkParser._serializedATN));
		}

		return bitmarkParser.__ATN;
	}

}

export class BitmarkContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(bitmarkParser.EOF, 0); }
	public bitmark_(): Bitmark_Context[];
	public bitmark_(i: number): Bitmark_Context;
	public bitmark_(i?: number): Bitmark_Context | Bitmark_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Bitmark_Context);
		} else {
			return this.getRuleContext(i, Bitmark_Context);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bitmark; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBitmark) {
			listener.enterBitmark(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBitmark) {
			listener.exitBitmark(this);
		}
	}
}


export class Bitmark_Context extends ParserRuleContext {
	public bit(): BitContext | undefined {
		return this.tryGetRuleContext(0, BitContext);
	}
	public lines(): LinesContext | undefined {
		return this.tryGetRuleContext(0, LinesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bitmark_; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBitmark_) {
			listener.enterBitmark_(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBitmark_) {
			listener.exitBitmark_(this);
		}
	}
}


export class BitContext extends ParserRuleContext {
	public book(): BookContext | undefined {
		return this.tryGetRuleContext(0, BookContext);
	}
	public chapter(): ChapterContext | undefined {
		return this.tryGetRuleContext(0, ChapterContext);
	}
	public summary(): SummaryContext | undefined {
		return this.tryGetRuleContext(0, SummaryContext);
	}
	public toc(): TocContext | undefined {
		return this.tryGetRuleContext(0, TocContext);
	}
	public bit_alias(): Bit_aliasContext | undefined {
		return this.tryGetRuleContext(0, Bit_aliasContext);
	}
	public internal_link(): Internal_linkContext | undefined {
		return this.tryGetRuleContext(0, Internal_linkContext);
	}
	public anchor(): AnchorContext | undefined {
		return this.tryGetRuleContext(0, AnchorContext);
	}
	public group_born(): Group_bornContext | undefined {
		return this.tryGetRuleContext(0, Group_bornContext);
	}
	public group_died(): Group_diedContext | undefined {
		return this.tryGetRuleContext(0, Group_diedContext);
	}
	public essay(): EssayContext | undefined {
		return this.tryGetRuleContext(0, EssayContext);
	}
	public correction(): CorrectionContext | undefined {
		return this.tryGetRuleContext(0, CorrectionContext);
	}
	public mark_(): Mark_Context | undefined {
		return this.tryGetRuleContext(0, Mark_Context);
	}
	public document_upload(): Document_uploadContext | undefined {
		return this.tryGetRuleContext(0, Document_uploadContext);
	}
	public take_picture(): Take_pictureContext | undefined {
		return this.tryGetRuleContext(0, Take_pictureContext);
	}
	public take_audio(): Take_audioContext | undefined {
		return this.tryGetRuleContext(0, Take_audioContext);
	}
	public record_audio(): Record_audioContext | undefined {
		return this.tryGetRuleContext(0, Record_audioContext);
	}
	public preparation_note(): Preparation_noteContext | undefined {
		return this.tryGetRuleContext(0, Preparation_noteContext);
	}
	public assignment(): AssignmentContext | undefined {
		return this.tryGetRuleContext(0, AssignmentContext);
	}
	public article(): ArticleContext | undefined {
		return this.tryGetRuleContext(0, ArticleContext);
	}
	public statement(): StatementContext | undefined {
		return this.tryGetRuleContext(0, StatementContext);
	}
	public details(): DetailsContext | undefined {
		return this.tryGetRuleContext(0, DetailsContext);
	}
	public sample_solution(): Sample_solutionContext | undefined {
		return this.tryGetRuleContext(0, Sample_solutionContext);
	}
	public buttoncopytext(): ButtoncopytextContext | undefined {
		return this.tryGetRuleContext(0, ButtoncopytextContext);
	}
	public wbtcontinue(): WbtcontinueContext | undefined {
		return this.tryGetRuleContext(0, WbtcontinueContext);
	}
	public learningpathdetails(): LearningpathdetailsContext | undefined {
		return this.tryGetRuleContext(0, LearningpathdetailsContext);
	}
	public note(): NoteContext | undefined {
		return this.tryGetRuleContext(0, NoteContext);
	}
	public info(): InfoContext | undefined {
		return this.tryGetRuleContext(0, InfoContext);
	}
	public warning(): WarningContext | undefined {
		return this.tryGetRuleContext(0, WarningContext);
	}
	public remark(): RemarkContext | undefined {
		return this.tryGetRuleContext(0, RemarkContext);
	}
	public hintbit(): HintbitContext | undefined {
		return this.tryGetRuleContext(0, HintbitContext);
	}
	public help(): HelpContext | undefined {
		return this.tryGetRuleContext(0, HelpContext);
	}
	public danger(): DangerContext | undefined {
		return this.tryGetRuleContext(0, DangerContext);
	}
	public bug(): BugContext | undefined {
		return this.tryGetRuleContext(0, BugContext);
	}
	public sidenote(): SidenoteContext | undefined {
		return this.tryGetRuleContext(0, SidenoteContext);
	}
	public stickynote(): StickynoteContext | undefined {
		return this.tryGetRuleContext(0, StickynoteContext);
	}
	public quote(): QuoteContext | undefined {
		return this.tryGetRuleContext(0, QuoteContext);
	}
	public footnote(): FootnoteContext | undefined {
		return this.tryGetRuleContext(0, FootnoteContext);
	}
	public examplebit(): ExamplebitContext | undefined {
		return this.tryGetRuleContext(0, ExamplebitContext);
	}
	public page(): PageContext | undefined {
		return this.tryGetRuleContext(0, PageContext);
	}
	public message(): MessageContext | undefined {
		return this.tryGetRuleContext(0, MessageContext);
	}
	public bot_interview(): Bot_interviewContext | undefined {
		return this.tryGetRuleContext(0, Bot_interviewContext);
	}
	public self_assessment(): Self_assessmentContext | undefined {
		return this.tryGetRuleContext(0, Self_assessmentContext);
	}
	public rating(): RatingContext | undefined {
		return this.tryGetRuleContext(0, RatingContext);
	}
	public survey(): SurveyContext | undefined {
		return this.tryGetRuleContext(0, SurveyContext);
	}
	public survey_1(): Survey_1Context | undefined {
		return this.tryGetRuleContext(0, Survey_1Context);
	}
	public survey_anonymous(): Survey_anonymousContext | undefined {
		return this.tryGetRuleContext(0, Survey_anonymousContext);
	}
	public survey_anonymous_1(): Survey_anonymous_1Context | undefined {
		return this.tryGetRuleContext(0, Survey_anonymous_1Context);
	}
	public hint(): HintContext | undefined {
		return this.tryGetRuleContext(0, HintContext);
	}
	public vendor_padlet_embed(): Vendor_padlet_embedContext | undefined {
		return this.tryGetRuleContext(0, Vendor_padlet_embedContext);
	}
	public scorm(): ScormContext | undefined {
		return this.tryGetRuleContext(0, ScormContext);
	}
	public learning_path_lti(): Learning_path_ltiContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_ltiContext);
	}
	public learning_path_step(): Learning_path_stepContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_stepContext);
	}
	public learning_path_book(): Learning_path_bookContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_bookContext);
	}
	public learning_path_sign(): Learning_path_signContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_signContext);
	}
	public learning_path_video_call(): Learning_path_video_callContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_video_callContext);
	}
	public learning_path_learning_goal(): Learning_path_learning_goalContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_learning_goalContext);
	}
	public learning_path_closing(): Learning_path_closingContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_closingContext);
	}
	public learning_path_feedback(): Learning_path_feedbackContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_feedbackContext);
	}
	public learning_path_bot_training(): Learning_path_bot_trainingContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_bot_trainingContext);
	}
	public learning_path_external_link(): Learning_path_external_linkContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_external_linkContext);
	}
	public learning_path_classroom_training(): Learning_path_classroom_trainingContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_classroom_trainingContext);
	}
	public learning_path_classroom_event(): Learning_path_classroom_eventContext | undefined {
		return this.tryGetRuleContext(0, Learning_path_classroom_eventContext);
	}
	public bot_action_send(): Bot_action_sendContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_sendContext);
	}
	public bot_action_announce(): Bot_action_announceContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_announceContext);
	}
	public bot_action_save(): Bot_action_saveContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_saveContext);
	}
	public bot_action_remind(): Bot_action_remindContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_remindContext);
	}
	public bot_action_response(): Bot_action_responseContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_responseContext);
	}
	public bot_action_true_false(): Bot_action_true_falseContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_true_falseContext);
	}
	public bot_action_rating_number(): Bot_action_rating_numberContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_rating_numberContext);
	}
	public bot_action_rating_stars(): Bot_action_rating_starsContext | undefined {
		return this.tryGetRuleContext(0, Bot_action_rating_starsContext);
	}
	public bit_image(): Bit_imageContext | undefined {
		return this.tryGetRuleContext(0, Bit_imageContext);
	}
	public bit_imageLink(): Bit_imageLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_imageLinkContext);
	}
	public bit_imageZoom(): Bit_imageZoomContext | undefined {
		return this.tryGetRuleContext(0, Bit_imageZoomContext);
	}
	public bit_imagePrototype(): Bit_imagePrototypeContext | undefined {
		return this.tryGetRuleContext(0, Bit_imagePrototypeContext);
	}
	public bit_imageSuperWide(): Bit_imageSuperWideContext | undefined {
		return this.tryGetRuleContext(0, Bit_imageSuperWideContext);
	}
	public bit_audio(): Bit_audioContext | undefined {
		return this.tryGetRuleContext(0, Bit_audioContext);
	}
	public bit_audioLink(): Bit_audioLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_audioLinkContext);
	}
	public bit_audioEmbed(): Bit_audioEmbedContext | undefined {
		return this.tryGetRuleContext(0, Bit_audioEmbedContext);
	}
	public bit_video(): Bit_videoContext | undefined {
		return this.tryGetRuleContext(0, Bit_videoContext);
	}
	public bit_videoLink(): Bit_videoLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_videoLinkContext);
	}
	public bit_videoEmbed(): Bit_videoEmbedContext | undefined {
		return this.tryGetRuleContext(0, Bit_videoEmbedContext);
	}
	public bit_videoPortrait(): Bit_videoPortraitContext | undefined {
		return this.tryGetRuleContext(0, Bit_videoPortraitContext);
	}
	public bit_videoLandscape(): Bit_videoLandscapeContext | undefined {
		return this.tryGetRuleContext(0, Bit_videoLandscapeContext);
	}
	public bit_stillImageFilm(): Bit_stillImageFilmContext | undefined {
		return this.tryGetRuleContext(0, Bit_stillImageFilmContext);
	}
	public bit_stillImageFilmLink(): Bit_stillImageFilmLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_stillImageFilmLinkContext);
	}
	public bit_stillImageFilmEmbed(): Bit_stillImageFilmEmbedContext | undefined {
		return this.tryGetRuleContext(0, Bit_stillImageFilmEmbedContext);
	}
	public bit_document(): Bit_documentContext | undefined {
		return this.tryGetRuleContext(0, Bit_documentContext);
	}
	public bit_documentLink(): Bit_documentLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_documentLinkContext);
	}
	public bit_documentEmbed(): Bit_documentEmbedContext | undefined {
		return this.tryGetRuleContext(0, Bit_documentEmbedContext);
	}
	public bit_documentDownload(): Bit_documentDownloadContext | undefined {
		return this.tryGetRuleContext(0, Bit_documentDownloadContext);
	}
	public bit_websiteLink(): Bit_websiteLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_websiteLinkContext);
	}
	public bit_appLink(): Bit_appLinkContext | undefined {
		return this.tryGetRuleContext(0, Bit_appLinkContext);
	}
	public bit_editorial(): Bit_editorialContext | undefined {
		return this.tryGetRuleContext(0, Bit_editorialContext);
	}
	public book_frontispiece(): Book_frontispieceContext | undefined {
		return this.tryGetRuleContext(0, Book_frontispieceContext);
	}
	public book_title(): Book_titleContext | undefined {
		return this.tryGetRuleContext(0, Book_titleContext);
	}
	public book_copyright(): Book_copyrightContext | undefined {
		return this.tryGetRuleContext(0, Book_copyrightContext);
	}
	public book_dedication(): Book_dedicationContext | undefined {
		return this.tryGetRuleContext(0, Book_dedicationContext);
	}
	public book_forword(): Book_forwordContext | undefined {
		return this.tryGetRuleContext(0, Book_forwordContext);
	}
	public book_preface(): Book_prefaceContext | undefined {
		return this.tryGetRuleContext(0, Book_prefaceContext);
	}
	public book_prologue(): Book_prologueContext | undefined {
		return this.tryGetRuleContext(0, Book_prologueContext);
	}
	public book_epilogue(): Book_epilogueContext | undefined {
		return this.tryGetRuleContext(0, Book_epilogueContext);
	}
	public book_introduction(): Book_introductionContext | undefined {
		return this.tryGetRuleContext(0, Book_introductionContext);
	}
	public book_inciting_incident(): Book_inciting_incidentContext | undefined {
		return this.tryGetRuleContext(0, Book_inciting_incidentContext);
	}
	public book_conclusion(): Book_conclusionContext | undefined {
		return this.tryGetRuleContext(0, Book_conclusionContext);
	}
	public book_afterword(): Book_afterwordContext | undefined {
		return this.tryGetRuleContext(0, Book_afterwordContext);
	}
	public book_postscript(): Book_postscriptContext | undefined {
		return this.tryGetRuleContext(0, Book_postscriptContext);
	}
	public book_appendix(): Book_appendixContext | undefined {
		return this.tryGetRuleContext(0, Book_appendixContext);
	}
	public book_addendum(): Book_addendumContext | undefined {
		return this.tryGetRuleContext(0, Book_addendumContext);
	}
	public book_acknowledgments(): Book_acknowledgmentsContext | undefined {
		return this.tryGetRuleContext(0, Book_acknowledgmentsContext);
	}
	public book_list_of_contributors(): Book_list_of_contributorsContext | undefined {
		return this.tryGetRuleContext(0, Book_list_of_contributorsContext);
	}
	public book_bibliography(): Book_bibliographyContext | undefined {
		return this.tryGetRuleContext(0, Book_bibliographyContext);
	}
	public book_reference_list(): Book_reference_listContext | undefined {
		return this.tryGetRuleContext(0, Book_reference_listContext);
	}
	public book_endnotes(): Book_endnotesContext | undefined {
		return this.tryGetRuleContext(0, Book_endnotesContext);
	}
	public book_notes(): Book_notesContext | undefined {
		return this.tryGetRuleContext(0, Book_notesContext);
	}
	public book_copyright_permissions(): Book_copyright_permissionsContext | undefined {
		return this.tryGetRuleContext(0, Book_copyright_permissionsContext);
	}
	public book_teaser(): Book_teaserContext | undefined {
		return this.tryGetRuleContext(0, Book_teaserContext);
	}
	public book_auther_bio(): Book_auther_bioContext | undefined {
		return this.tryGetRuleContext(0, Book_auther_bioContext);
	}
	public book_request_for_a_book_review(): Book_request_for_a_book_reviewContext | undefined {
		return this.tryGetRuleContext(0, Book_request_for_a_book_reviewContext);
	}
	public book_coming_soon(): Book_coming_soonContext | undefined {
		return this.tryGetRuleContext(0, Book_coming_soonContext);
	}
	public book_read_more(): Book_read_moreContext | undefined {
		return this.tryGetRuleContext(0, Book_read_moreContext);
	}
	public book_summary(): Book_summaryContext | undefined {
		return this.tryGetRuleContext(0, Book_summaryContext);
	}
	public book_epigraph(): Book_epigraphContext | undefined {
		return this.tryGetRuleContext(0, Book_epigraphContext);
	}
	public code(): CodeContext | undefined {
		return this.tryGetRuleContext(0, CodeContext);
	}
	public card1(): Card1Context | undefined {
		return this.tryGetRuleContext(0, Card1Context);
	}
	public question1(): Question1Context | undefined {
		return this.tryGetRuleContext(0, Question1Context);
	}
	public screenshot(): ScreenshotContext | undefined {
		return this.tryGetRuleContext(0, ScreenshotContext);
	}
	public focus_image(): Focus_imageContext | undefined {
		return this.tryGetRuleContext(0, Focus_imageContext);
	}
	public photo(): PhotoContext | undefined {
		return this.tryGetRuleContext(0, PhotoContext);
	}
	public browser_image(): Browser_imageContext | undefined {
		return this.tryGetRuleContext(0, Browser_imageContext);
	}
	public chapter_subject_matter(): Chapter_subject_matterContext | undefined {
		return this.tryGetRuleContext(0, Chapter_subject_matterContext);
	}
	public release_note(): Release_noteContext | undefined {
		return this.tryGetRuleContext(0, Release_noteContext);
	}
	public conclusion(): ConclusionContext | undefined {
		return this.tryGetRuleContext(0, ConclusionContext);
	}
	public featured(): FeaturedContext | undefined {
		return this.tryGetRuleContext(0, FeaturedContext);
	}
	public vendor_amcharts_5_chart(): Vendor_amcharts_5_chartContext | undefined {
		return this.tryGetRuleContext(0, Vendor_amcharts_5_chartContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit) {
			listener.enterBit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit) {
			listener.exitBit(this);
		}
	}
}


export class BookContext extends ParserRuleContext {
	public BitBook(): TerminalNode { return this.getToken(bitmarkParser.BitBook, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public format(): FormatContext | undefined {
		return this.tryGetRuleContext(0, FormatContext);
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook) {
			listener.enterBook(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook) {
			listener.exitBook(this);
		}
	}
}


export class ChapterContext extends ParserRuleContext {
	public BitChapter(): TerminalNode { return this.getToken(bitmarkParser.BitChapter, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public format(): FormatContext | undefined {
		return this.tryGetRuleContext(0, FormatContext);
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public anchor(): AnchorContext | undefined {
		return this.tryGetRuleContext(0, AnchorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_chapter; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChapter) {
			listener.enterChapter(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChapter) {
			listener.exitChapter(this);
		}
	}
}


export class TocContext extends ParserRuleContext {
	public BitToc(): TerminalNode { return this.getToken(bitmarkParser.BitToc, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	public atdef(): AtdefContext | undefined {
		return this.tryGetRuleContext(0, AtdefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_toc; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterToc) {
			listener.enterToc(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitToc) {
			listener.exitToc(this);
		}
	}
}


export class SummaryContext extends ParserRuleContext {
	public BitSummary(): TerminalNode { return this.getToken(bitmarkParser.BitSummary, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public title_etc(): Title_etcContext {
		return this.getRuleContext(0, Title_etcContext);
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_summary; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSummary) {
			listener.enterSummary(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSummary) {
			listener.exitSummary(this);
		}
	}
}


export class Internal_linkContext extends ParserRuleContext {
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public BitIntlink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitIntlink, 0); }
	public BitIntRef(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitIntRef, 0); }
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public BitmarkMinus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
	public BitmarkPlus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_internal_link; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterInternal_link) {
			listener.enterInternal_link(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitInternal_link) {
			listener.exitInternal_link(this);
		}
	}
}


export class Bit_aliasContext extends ParserRuleContext {
	public BitAlias(): TerminalNode { return this.getToken(bitmarkParser.BitAlias, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public angleref(): AnglerefContext {
		return this.getRuleContext(0, AnglerefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_alias; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_alias) {
			listener.enterBit_alias(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_alias) {
			listener.exitBit_alias(this);
		}
	}
}


export class Title_etcContext extends ParserRuleContext {
	public title(): TitleContext[];
	public title(i: number): TitleContext;
	public title(i?: number): TitleContext | TitleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TitleContext);
		} else {
			return this.getRuleContext(i, TitleContext);
		}
	}
	public atdef(): AtdefContext[];
	public atdef(i: number): AtdefContext;
	public atdef(i?: number): AtdefContext | AtdefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AtdefContext);
		} else {
			return this.getRuleContext(i, AtdefContext);
		}
	}
	public item(): ItemContext[];
	public item(i: number): ItemContext;
	public item(i?: number): ItemContext | ItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ItemContext);
		} else {
			return this.getRuleContext(i, ItemContext);
		}
	}
	public instruction(): InstructionContext[];
	public instruction(i: number): InstructionContext;
	public instruction(i?: number): InstructionContext | InstructionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InstructionContext);
		} else {
			return this.getRuleContext(i, InstructionContext);
		}
	}
	public angleref(): AnglerefContext[];
	public angleref(i: number): AnglerefContext;
	public angleref(i?: number): AnglerefContext | AnglerefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AnglerefContext);
		} else {
			return this.getRuleContext(i, AnglerefContext);
		}
	}
	public anchor(): AnchorContext[];
	public anchor(i: number): AnchorContext;
	public anchor(i?: number): AnchorContext | AnchorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AnchorContext);
		} else {
			return this.getRuleContext(i, AnchorContext);
		}
	}
	public progress(): ProgressContext[];
	public progress(i: number): ProgressContext;
	public progress(i?: number): ProgressContext | ProgressContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgressContext);
		} else {
			return this.getRuleContext(i, ProgressContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_title_etc; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterTitle_etc) {
			listener.enterTitle_etc(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitTitle_etc) {
			listener.exitTitle_etc(this);
		}
	}
}


export class Group_bornContext extends ParserRuleContext {
	public BitGroups(): TerminalNode { return this.getToken(bitmarkParser.BitGroups, 0); }
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public lines(): LinesContext[];
	public lines(i: number): LinesContext;
	public lines(i?: number): LinesContext | LinesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LinesContext);
		} else {
			return this.getRuleContext(i, LinesContext);
		}
	}
	public OPR(): TerminalNode[];
	public OPR(i: number): TerminalNode;
	public OPR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.OPR);
		} else {
			return this.getToken(bitmarkParser.OPR, i);
		}
	}
	public OPHASH(): TerminalNode[];
	public OPHASH(i: number): TerminalNode;
	public OPHASH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.OPHASH);
		} else {
			return this.getToken(bitmarkParser.OPHASH, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_group_born; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterGroup_born) {
			listener.enterGroup_born(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitGroup_born) {
			listener.exitGroup_born(this);
		}
	}
}


export class Group_diedContext extends ParserRuleContext {
	public BitGroupt(): TerminalNode { return this.getToken(bitmarkParser.BitGroupt, 0); }
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public lines(): LinesContext[];
	public lines(i: number): LinesContext;
	public lines(i?: number): LinesContext | LinesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LinesContext);
		} else {
			return this.getRuleContext(i, LinesContext);
		}
	}
	public OPR(): TerminalNode[];
	public OPR(i: number): TerminalNode;
	public OPR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.OPR);
		} else {
			return this.getToken(bitmarkParser.OPR, i);
		}
	}
	public OPHASH(): TerminalNode[];
	public OPHASH(i: number): TerminalNode;
	public OPHASH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.OPHASH);
		} else {
			return this.getToken(bitmarkParser.OPHASH, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_group_died; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterGroup_died) {
			listener.enterGroup_died(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitGroup_died) {
			listener.exitGroup_died(this);
		}
	}
}


export class Learning_path_ltiContext extends ParserRuleContext {
	public BitLearningPathLti(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathLti, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_lti; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_lti) {
			listener.enterLearning_path_lti(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_lti) {
			listener.exitLearning_path_lti(this);
		}
	}
}


export class Learning_path_stepContext extends ParserRuleContext {
	public BitLearningPathStep(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathStep, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_step; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_step) {
			listener.enterLearning_path_step(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_step) {
			listener.exitLearning_path_step(this);
		}
	}
}


export class Learning_path_bookContext extends ParserRuleContext {
	public BitLearningPathBook(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathBook, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_book; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_book) {
			listener.enterLearning_path_book(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_book) {
			listener.exitLearning_path_book(this);
		}
	}
}


export class Learning_path_signContext extends ParserRuleContext {
	public BitLearningPathSign(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathSign, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_sign; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_sign) {
			listener.enterLearning_path_sign(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_sign) {
			listener.exitLearning_path_sign(this);
		}
	}
}


export class Learning_path_video_callContext extends ParserRuleContext {
	public BitLearningPathVideoCall(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathVideoCall, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_video_call; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_video_call) {
			listener.enterLearning_path_video_call(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_video_call) {
			listener.exitLearning_path_video_call(this);
		}
	}
}


export class Learning_path_learning_goalContext extends ParserRuleContext {
	public BitLearningPathLearningGoal(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathLearningGoal, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_learning_goal; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_learning_goal) {
			listener.enterLearning_path_learning_goal(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_learning_goal) {
			listener.exitLearning_path_learning_goal(this);
		}
	}
}


export class Learning_path_closingContext extends ParserRuleContext {
	public BitLearningPathClosing(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathClosing, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_closing; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_closing) {
			listener.enterLearning_path_closing(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_closing) {
			listener.exitLearning_path_closing(this);
		}
	}
}


export class Learning_path_feedbackContext extends ParserRuleContext {
	public BitLearningPathFeedback(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathFeedback, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_feedback; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_feedback) {
			listener.enterLearning_path_feedback(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_feedback) {
			listener.exitLearning_path_feedback(this);
		}
	}
}


export class Learning_path_bot_trainingContext extends ParserRuleContext {
	public BitLearningPathBotTraining(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathBotTraining, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_bot_training; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_bot_training) {
			listener.enterLearning_path_bot_training(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_bot_training) {
			listener.exitLearning_path_bot_training(this);
		}
	}
}


export class Learning_path_external_linkContext extends ParserRuleContext {
	public BitLearningPathExternalLink(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathExternalLink, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_external_link; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_external_link) {
			listener.enterLearning_path_external_link(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_external_link) {
			listener.exitLearning_path_external_link(this);
		}
	}
}


export class Learning_path_classroom_trainingContext extends ParserRuleContext {
	public BitLearningPathClassroomTraining(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathClassroomTraining, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_classroom_training; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_classroom_training) {
			listener.enterLearning_path_classroom_training(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_classroom_training) {
			listener.exitLearning_path_classroom_training(this);
		}
	}
}


export class Learning_path_classroom_eventContext extends ParserRuleContext {
	public BitLearningPathClassroomEvent(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathClassroomEvent, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learning_path_classroom_event; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearning_path_classroom_event) {
			listener.enterLearning_path_classroom_event(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearning_path_classroom_event) {
			listener.exitLearning_path_classroom_event(this);
		}
	}
}


export class Bot_action_sendContext extends ParserRuleContext {
	public BitBotActionSend(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionSend, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_send; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_send) {
			listener.enterBot_action_send(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_send) {
			listener.exitBot_action_send(this);
		}
	}
}


export class Bot_action_announceContext extends ParserRuleContext {
	public BitBotActionAnnounce(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionAnnounce, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_announce; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_announce) {
			listener.enterBot_action_announce(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_announce) {
			listener.exitBot_action_announce(this);
		}
	}
}


export class Bot_action_saveContext extends ParserRuleContext {
	public BitBotActionSave(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionSave, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_save; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_save) {
			listener.enterBot_action_save(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_save) {
			listener.exitBot_action_save(this);
		}
	}
}


export class Bot_action_remindContext extends ParserRuleContext {
	public BitBotActionRemind(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionRemind, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_remind; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_remind) {
			listener.enterBot_action_remind(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_remind) {
			listener.exitBot_action_remind(this);
		}
	}
}


export class Bot_action_responseContext extends ParserRuleContext {
	public BitBotActionResponse(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionResponse, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode { return this.getToken(bitmarkParser.HSPL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public bot_action(): Bot_actionContext[];
	public bot_action(i: number): Bot_actionContext;
	public bot_action(i?: number): Bot_actionContext | Bot_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bot_actionContext);
		} else {
			return this.getRuleContext(i, Bot_actionContext);
		}
	}
	public footer(): FooterContext | undefined {
		return this.tryGetRuleContext(0, FooterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_response; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_response) {
			listener.enterBot_action_response(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_response) {
			listener.exitBot_action_response(this);
		}
	}
}


export class Bot_action_true_falseContext extends ParserRuleContext {
	public BitBotActionTrueFalse(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionTrueFalse, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode { return this.getToken(bitmarkParser.HSPL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public bot_action(): Bot_actionContext[];
	public bot_action(i: number): Bot_actionContext;
	public bot_action(i?: number): Bot_actionContext | Bot_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bot_actionContext);
		} else {
			return this.getRuleContext(i, Bot_actionContext);
		}
	}
	public footer(): FooterContext | undefined {
		return this.tryGetRuleContext(0, FooterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_true_false; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_true_false) {
			listener.enterBot_action_true_false(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_true_false) {
			listener.exitBot_action_true_false(this);
		}
	}
}


export class Bot_action_rating_numberContext extends ParserRuleContext {
	public BitBotActionRatingNumber(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionRatingNumber, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode { return this.getToken(bitmarkParser.HSPL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public bot_action(): Bot_actionContext[];
	public bot_action(i: number): Bot_actionContext;
	public bot_action(i?: number): Bot_actionContext | Bot_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bot_actionContext);
		} else {
			return this.getRuleContext(i, Bot_actionContext);
		}
	}
	public footer(): FooterContext | undefined {
		return this.tryGetRuleContext(0, FooterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_rating_number; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_rating_number) {
			listener.enterBot_action_rating_number(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_rating_number) {
			listener.exitBot_action_rating_number(this);
		}
	}
}


export class Bot_action_rating_starsContext extends ParserRuleContext {
	public BitBotActionRatingStars(): TerminalNode { return this.getToken(bitmarkParser.BitBotActionRatingStars, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action_rating_stars; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action_rating_stars) {
			listener.enterBot_action_rating_stars(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action_rating_stars) {
			listener.exitBot_action_rating_stars(this);
		}
	}
}


export class Bot_actionContext extends ParserRuleContext {
	public HSPL(): TerminalNode { return this.getToken(bitmarkParser.HSPL, 0); }
	public bo_actions(): Bo_actionsContext {
		return this.getRuleContext(0, Bo_actionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_action; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_action) {
			listener.enterBot_action(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_action) {
			listener.exitBot_action(this);
		}
	}
}


export class Bo_actionsContext extends ParserRuleContext {
	public boacts(): BoactsContext[];
	public boacts(i: number): BoactsContext;
	public boacts(i?: number): BoactsContext | BoactsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BoactsContext);
		} else {
			return this.getRuleContext(i, BoactsContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bo_actions; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBo_actions) {
			listener.enterBo_actions(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBo_actions) {
			listener.exitBo_actions(this);
		}
	}
}


export class BoactsContext extends ParserRuleContext {
	public instruction(): InstructionContext | undefined {
		return this.tryGetRuleContext(0, InstructionContext);
	}
	public item(): ItemContext | undefined {
		return this.tryGetRuleContext(0, ItemContext);
	}
	public atdef(): AtdefContext | undefined {
		return this.tryGetRuleContext(0, AtdefContext);
	}
	public hint(): HintContext | undefined {
		return this.tryGetRuleContext(0, HintContext);
	}
	public choice_minus(): Choice_minusContext | undefined {
		return this.tryGetRuleContext(0, Choice_minusContext);
	}
	public choice_plus(): Choice_plusContext | undefined {
		return this.tryGetRuleContext(0, Choice_plusContext);
	}
	public feedback(): FeedbackContext | undefined {
		return this.tryGetRuleContext(0, FeedbackContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_boacts; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBoacts) {
			listener.enterBoacts(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBoacts) {
			listener.exitBoacts(this);
		}
	}
}


export class FeedbackContext extends ParserRuleContext {
	public ENCLBARS(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ENCLBARS, 0); }
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_feedback; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFeedback) {
			listener.enterFeedback(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFeedback) {
			listener.exitFeedback(this);
		}
	}
}


export class FooterContext extends ParserRuleContext {
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_footer; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFooter) {
			listener.enterFooter(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFooter) {
			listener.exitFooter(this);
		}
	}
}


export class BitElemContext extends ParserRuleContext {
	public LIST_LINE(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.LIST_LINE, 0); }
	public NOTBITMARK(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NOTBITMARK, 0); }
	public dclines(): DclinesContext | undefined {
		return this.tryGetRuleContext(0, DclinesContext);
	}
	public gap(): GapContext | undefined {
		return this.tryGetRuleContext(0, GapContext);
	}
	public reference(): ReferenceContext | undefined {
		return this.tryGetRuleContext(0, ReferenceContext);
	}
	public dateprop(): DatepropContext | undefined {
		return this.tryGetRuleContext(0, DatepropContext);
	}
	public progress(): ProgressContext | undefined {
		return this.tryGetRuleContext(0, ProgressContext);
	}
	public atdef(): AtdefContext | undefined {
		return this.tryGetRuleContext(0, AtdefContext);
	}
	public dollarans(): DollaransContext | undefined {
		return this.tryGetRuleContext(0, DollaransContext);
	}
	public partans(): PartansContext | undefined {
		return this.tryGetRuleContext(0, PartansContext);
	}
	public item(): ItemContext | undefined {
		return this.tryGetRuleContext(0, ItemContext);
	}
	public title(): TitleContext | undefined {
		return this.tryGetRuleContext(0, TitleContext);
	}
	public instruction(): InstructionContext | undefined {
		return this.tryGetRuleContext(0, InstructionContext);
	}
	public hint(): HintContext | undefined {
		return this.tryGetRuleContext(0, HintContext);
	}
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	public example(): ExampleContext | undefined {
		return this.tryGetRuleContext(0, ExampleContext);
	}
	public bool_label(): Bool_labelContext | undefined {
		return this.tryGetRuleContext(0, Bool_labelContext);
	}
	public progress_points(): Progress_pointsContext | undefined {
		return this.tryGetRuleContext(0, Progress_pointsContext);
	}
	public istracked(): IstrackedContext | undefined {
		return this.tryGetRuleContext(0, IstrackedContext);
	}
	public isinfoonly(): IsinfoonlyContext | undefined {
		return this.tryGetRuleContext(0, IsinfoonlyContext);
	}
	public imagebit(): ImagebitContext | undefined {
		return this.tryGetRuleContext(0, ImagebitContext);
	}
	public audiobit(): AudiobitContext | undefined {
		return this.tryGetRuleContext(0, AudiobitContext);
	}
	public videobit(): VideobitContext | undefined {
		return this.tryGetRuleContext(0, VideobitContext);
	}
	public articlebit(): ArticlebitContext | undefined {
		return this.tryGetRuleContext(0, ArticlebitContext);
	}
	public documentbit(): DocumentbitContext | undefined {
		return this.tryGetRuleContext(0, DocumentbitContext);
	}
	public appbit(): AppbitContext | undefined {
		return this.tryGetRuleContext(0, AppbitContext);
	}
	public websitebit(): WebsitebitContext | undefined {
		return this.tryGetRuleContext(0, WebsitebitContext);
	}
	public stillimagefilmbit(): StillimagefilmbitContext | undefined {
		return this.tryGetRuleContext(0, StillimagefilmbitContext);
	}
	public angleref(): AnglerefContext | undefined {
		return this.tryGetRuleContext(0, AnglerefContext);
	}
	public anchor(): AnchorContext | undefined {
		return this.tryGetRuleContext(0, AnchorContext);
	}
	public bracketed_text(): Bracketed_textContext | undefined {
		return this.tryGetRuleContext(0, Bracketed_textContext);
	}
	public sp(): SpContext | undefined {
		return this.tryGetRuleContext(0, SpContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bitElem; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBitElem) {
			listener.enterBitElem(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBitElem) {
			listener.exitBitElem(this);
		}
	}
}


export class GapContext extends ParserRuleContext {
	public single_gap(): Single_gapContext[];
	public single_gap(i: number): Single_gapContext;
	public single_gap(i?: number): Single_gapContext | Single_gapContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Single_gapContext);
		} else {
			return this.getRuleContext(i, Single_gapContext);
		}
	}
	public instruction(): InstructionContext[];
	public instruction(i: number): InstructionContext;
	public instruction(i?: number): InstructionContext | InstructionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InstructionContext);
		} else {
			return this.getRuleContext(i, InstructionContext);
		}
	}
	public hint(): HintContext[];
	public hint(i: number): HintContext;
	public hint(i?: number): HintContext | HintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HintContext);
		} else {
			return this.getRuleContext(i, HintContext);
		}
	}
	public item(): ItemContext[];
	public item(i: number): ItemContext;
	public item(i?: number): ItemContext | ItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ItemContext);
		} else {
			return this.getRuleContext(i, ItemContext);
		}
	}
	public example(): ExampleContext[];
	public example(i: number): ExampleContext;
	public example(i?: number): ExampleContext | ExampleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExampleContext);
		} else {
			return this.getRuleContext(i, ExampleContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_gap; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterGap) {
			listener.enterGap(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitGap) {
			listener.exitGap(this);
		}
	}
}


export class Single_gapContext extends ParserRuleContext {
	public OPU(): TerminalNode { return this.getToken(bitmarkParser.OPU, 0); }
	public clnsp(): ClnspContext {
		return this.getRuleContext(0, ClnspContext);
	}
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.STRING, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_single_gap; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSingle_gap) {
			listener.enterSingle_gap(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSingle_gap) {
			listener.exitSingle_gap(this);
		}
	}
}


export class Choice_plusContext extends ParserRuleContext {
	public OPP(): TerminalNode { return this.getToken(bitmarkParser.OPP, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public item(): ItemContext | undefined {
		return this.tryGetRuleContext(0, ItemContext);
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_choice_plus; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChoice_plus) {
			listener.enterChoice_plus(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChoice_plus) {
			listener.exitChoice_plus(this);
		}
	}
}


export class Choice_minusContext extends ParserRuleContext {
	public OPM(): TerminalNode { return this.getToken(bitmarkParser.OPM, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public item(): ItemContext | undefined {
		return this.tryGetRuleContext(0, ItemContext);
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_choice_minus; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChoice_minus) {
			listener.enterChoice_minus(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChoice_minus) {
			listener.exitChoice_minus(this);
		}
	}
}


export class Choice_starContext extends ParserRuleContext {
	public OPR(): TerminalNode { return this.getToken(bitmarkParser.OPR, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public item(): ItemContext | undefined {
		return this.tryGetRuleContext(0, ItemContext);
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_choice_star; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChoice_star) {
			listener.enterChoice_star(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChoice_star) {
			listener.exitChoice_star(this);
		}
	}
}


export class EssayContext extends ParserRuleContext {
	public BitEssay(): TerminalNode { return this.getToken(bitmarkParser.BitEssay, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public ml_example(): Ml_exampleContext[];
	public ml_example(i: number): Ml_exampleContext;
	public ml_example(i?: number): Ml_exampleContext | Ml_exampleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ml_exampleContext);
		} else {
			return this.getRuleContext(i, Ml_exampleContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_essay; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterEssay) {
			listener.enterEssay(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitEssay) {
			listener.exitEssay(this);
		}
	}
}


export class Ml_exampleContext extends ParserRuleContext {
	public AtExamplecol(): TerminalNode { return this.getToken(bitmarkParser.AtExamplecol, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public lines(): LinesContext | undefined {
		return this.tryGetRuleContext(0, LinesContext);
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_ml_example; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterMl_example) {
			listener.enterMl_example(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitMl_example) {
			listener.exitMl_example(this);
		}
	}
}


export class PartansContext extends ParserRuleContext {
	public AtPartialAnswerS(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtPartialAnswerS, 0); }
	public AtPartialAnswer(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtPartialAnswer, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_partans; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterPartans) {
			listener.enterPartans(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitPartans) {
			listener.exitPartans(this);
		}
	}
}


export class ResourceContext extends ParserRuleContext {
	public bitElem(): BitElemContext {
		return this.getRuleContext(0, BitElemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_resource; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterResource) {
			listener.enterResource(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitResource) {
			listener.exitResource(this);
		}
	}
}


export class CorrectionContext extends ParserRuleContext {
	public BitCorrection(): TerminalNode { return this.getToken(bitmarkParser.BitCorrection, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public corrs(): CorrsContext[];
	public corrs(i: number): CorrsContext;
	public corrs(i?: number): CorrsContext | CorrsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CorrsContext);
		} else {
			return this.getRuleContext(i, CorrsContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_correction; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCorrection) {
			listener.enterCorrection(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCorrection) {
			listener.exitCorrection(this);
		}
	}
}


export class CorrsContext extends ParserRuleContext {
	public OPM(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPM, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode { return this.getToken(bitmarkParser.NL, 0); }
	public OPP(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_corrs; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCorrs) {
			listener.enterCorrs(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCorrs) {
			listener.exitCorrs(this);
		}
	}
}


export class Mark_Context extends ParserRuleContext {
	public BitMark(): TerminalNode { return this.getToken(bitmarkParser.BitMark, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public mark_text(): Mark_textContext[];
	public mark_text(i: number): Mark_textContext;
	public mark_text(i?: number): Mark_textContext | Mark_textContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Mark_textContext);
		} else {
			return this.getRuleContext(i, Mark_textContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_mark_; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterMark_) {
			listener.enterMark_(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitMark_) {
			listener.exitMark_(this);
		}
	}
}


export class Mark_textContext extends ParserRuleContext {
	public OPS(): TerminalNode { return this.getToken(bitmarkParser.OPS, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public mark_color(): Mark_colorContext | undefined {
		return this.tryGetRuleContext(0, Mark_colorContext);
	}
	public hint(): HintContext[];
	public hint(i: number): HintContext;
	public hint(i?: number): HintContext | HintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HintContext);
		} else {
			return this.getRuleContext(i, HintContext);
		}
	}
	public item(): ItemContext[];
	public item(i: number): ItemContext;
	public item(i?: number): ItemContext | ItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ItemContext);
		} else {
			return this.getRuleContext(i, ItemContext);
		}
	}
	public instruction(): InstructionContext[];
	public instruction(i: number): InstructionContext;
	public instruction(i?: number): InstructionContext | InstructionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InstructionContext);
		} else {
			return this.getRuleContext(i, InstructionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_mark_text; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterMark_text) {
			listener.enterMark_text(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitMark_text) {
			listener.exitMark_text(this);
		}
	}
}


export class Mark_colorContext extends ParserRuleContext {
	public OPAMARK(): TerminalNode { return this.getToken(bitmarkParser.OPAMARK, 0); }
	public STRING(): TerminalNode { return this.getToken(bitmarkParser.STRING, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_mark_color; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterMark_color) {
			listener.enterMark_color(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitMark_color) {
			listener.exitMark_color(this);
		}
	}
}


export class Document_uploadContext extends ParserRuleContext {
	public BitDocup(): TerminalNode { return this.getToken(bitmarkParser.BitDocup, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public Video_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Video_type, 0); }
	public Audio_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
	public Image_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Image_type, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_document_upload; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDocument_upload) {
			listener.enterDocument_upload(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDocument_upload) {
			listener.exitDocument_upload(this);
		}
	}
}


export class Take_audioContext extends ParserRuleContext {
	public BitTakeAudio(): TerminalNode { return this.getToken(bitmarkParser.BitTakeAudio, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_take_audio; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterTake_audio) {
			listener.enterTake_audio(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitTake_audio) {
			listener.exitTake_audio(this);
		}
	}
}


export class Take_pictureContext extends ParserRuleContext {
	public BitTakepic(): TerminalNode { return this.getToken(bitmarkParser.BitTakepic, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_take_picture; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterTake_picture) {
			listener.enterTake_picture(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitTake_picture) {
			listener.exitTake_picture(this);
		}
	}
}


export class Record_audioContext extends ParserRuleContext {
	public BitRecaud(): TerminalNode { return this.getToken(bitmarkParser.BitRecaud, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_record_audio; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterRecord_audio) {
			listener.enterRecord_audio(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitRecord_audio) {
			listener.exitRecord_audio(this);
		}
	}
}


export class Preparation_noteContext extends ParserRuleContext {
	public BitPrepnote(): TerminalNode { return this.getToken(bitmarkParser.BitPrepnote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public lines(): LinesContext | undefined {
		return this.tryGetRuleContext(0, LinesContext);
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_preparation_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterPreparation_note) {
			listener.enterPreparation_note(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitPreparation_note) {
			listener.exitPreparation_note(this);
		}
	}
}


export class AssignmentContext extends ParserRuleContext {
	public BitAssign(): TerminalNode { return this.getToken(bitmarkParser.BitAssign, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public lines(): LinesContext | undefined {
		return this.tryGetRuleContext(0, LinesContext);
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_assignment; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAssignment) {
			listener.enterAssignment(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAssignment) {
			listener.exitAssignment(this);
		}
	}
}


export class ArticleContext extends ParserRuleContext {
	public BitArticle(): TerminalNode { return this.getToken(bitmarkParser.BitArticle, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_article; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterArticle) {
			listener.enterArticle(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitArticle) {
			listener.exitArticle(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public BitStatement(): TerminalNode { return this.getToken(bitmarkParser.BitStatement, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_statement; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
}


export class DetailsContext extends ParserRuleContext {
	public BitDetails(): TerminalNode { return this.getToken(bitmarkParser.BitDetails, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_details; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDetails) {
			listener.enterDetails(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDetails) {
			listener.exitDetails(this);
		}
	}
}


export class Sample_solutionContext extends ParserRuleContext {
	public BitSampleSolution(): TerminalNode { return this.getToken(bitmarkParser.BitSampleSolution, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_sample_solution; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSample_solution) {
			listener.enterSample_solution(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSample_solution) {
			listener.exitSample_solution(this);
		}
	}
}


export class ButtoncopytextContext extends ParserRuleContext {
	public BitButtonCopytext(): TerminalNode { return this.getToken(bitmarkParser.BitButtonCopytext, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_buttoncopytext; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterButtoncopytext) {
			listener.enterButtoncopytext(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitButtoncopytext) {
			listener.exitButtoncopytext(this);
		}
	}
}


export class WbtcontinueContext extends ParserRuleContext {
	public BitWbtContinue(): TerminalNode { return this.getToken(bitmarkParser.BitWbtContinue, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_wbtcontinue; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWbtcontinue) {
			listener.enterWbtcontinue(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWbtcontinue) {
			listener.exitWbtcontinue(this);
		}
	}
}


export class LearningpathdetailsContext extends ParserRuleContext {
	public BitLearningPathDetails(): TerminalNode { return this.getToken(bitmarkParser.BitLearningPathDetails, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_learningpathdetails; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLearningpathdetails) {
			listener.enterLearningpathdetails(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLearningpathdetails) {
			listener.exitLearningpathdetails(this);
		}
	}
}


export class PageContext extends ParserRuleContext {
	public BitPage(): TerminalNode { return this.getToken(bitmarkParser.BitPage, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_page; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterPage) {
			listener.enterPage(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitPage) {
			listener.exitPage(this);
		}
	}
}


export class NoteContext extends ParserRuleContext {
	public BitNote(): TerminalNode { return this.getToken(bitmarkParser.BitNote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterNote) {
			listener.enterNote(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitNote) {
			listener.exitNote(this);
		}
	}
}


export class InfoContext extends ParserRuleContext {
	public BitInfo(): TerminalNode { return this.getToken(bitmarkParser.BitInfo, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_info; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterInfo) {
			listener.enterInfo(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitInfo) {
			listener.exitInfo(this);
		}
	}
}


export class WarningContext extends ParserRuleContext {
	public BitWarning(): TerminalNode { return this.getToken(bitmarkParser.BitWarning, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_warning; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWarning) {
			listener.enterWarning(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWarning) {
			listener.exitWarning(this);
		}
	}
}


export class RemarkContext extends ParserRuleContext {
	public BitRemark(): TerminalNode { return this.getToken(bitmarkParser.BitRemark, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_remark; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterRemark) {
			listener.enterRemark(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitRemark) {
			listener.exitRemark(this);
		}
	}
}


export class HelpContext extends ParserRuleContext {
	public BitHelp(): TerminalNode { return this.getToken(bitmarkParser.BitHelp, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_help; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterHelp) {
			listener.enterHelp(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitHelp) {
			listener.exitHelp(this);
		}
	}
}


export class DangerContext extends ParserRuleContext {
	public BitDanger(): TerminalNode { return this.getToken(bitmarkParser.BitDanger, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_danger; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDanger) {
			listener.enterDanger(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDanger) {
			listener.exitDanger(this);
		}
	}
}


export class BugContext extends ParserRuleContext {
	public BitBug(): TerminalNode { return this.getToken(bitmarkParser.BitBug, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bug; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBug) {
			listener.enterBug(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBug) {
			listener.exitBug(this);
		}
	}
}


export class SidenoteContext extends ParserRuleContext {
	public BitSidenote(): TerminalNode { return this.getToken(bitmarkParser.BitSidenote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_sidenote; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSidenote) {
			listener.enterSidenote(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSidenote) {
			listener.exitSidenote(this);
		}
	}
}


export class StickynoteContext extends ParserRuleContext {
	public BitStickynote(): TerminalNode { return this.getToken(bitmarkParser.BitStickynote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_stickynote; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterStickynote) {
			listener.enterStickynote(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitStickynote) {
			listener.exitStickynote(this);
		}
	}
}


export class QuoteContext extends ParserRuleContext {
	public BitQuote(): TerminalNode { return this.getToken(bitmarkParser.BitQuote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_quote; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterQuote) {
			listener.enterQuote(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitQuote) {
			listener.exitQuote(this);
		}
	}
}


export class FootnoteContext extends ParserRuleContext {
	public BitFootnote(): TerminalNode { return this.getToken(bitmarkParser.BitFootnote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_footnote; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFootnote) {
			listener.enterFootnote(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFootnote) {
			listener.exitFootnote(this);
		}
	}
}


export class HintbitContext extends ParserRuleContext {
	public BitHint(): TerminalNode { return this.getToken(bitmarkParser.BitHint, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_hintbit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterHintbit) {
			listener.enterHintbit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitHintbit) {
			listener.exitHintbit(this);
		}
	}
}


export class ExamplebitContext extends ParserRuleContext {
	public BitExample(): TerminalNode { return this.getToken(bitmarkParser.BitExample, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_examplebit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterExamplebit) {
			listener.enterExamplebit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitExamplebit) {
			listener.exitExamplebit(this);
		}
	}
}


export class Vendor_padlet_embedContext extends ParserRuleContext {
	public BitVendorPadletEmbed(): TerminalNode { return this.getToken(bitmarkParser.BitVendorPadletEmbed, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_vendor_padlet_embed; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVendor_padlet_embed) {
			listener.enterVendor_padlet_embed(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVendor_padlet_embed) {
			listener.exitVendor_padlet_embed(this);
		}
	}
}


export class ScormContext extends ParserRuleContext {
	public BitScorm(): TerminalNode { return this.getToken(bitmarkParser.BitScorm, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_scorm; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterScorm) {
			listener.enterScorm(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitScorm) {
			listener.exitScorm(this);
		}
	}
}


export class Bit_imageContext extends ParserRuleContext {
	public BitImage(): TerminalNode { return this.getToken(bitmarkParser.BitImage, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_image; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_image) {
			listener.enterBit_image(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_image) {
			listener.exitBit_image(this);
		}
	}
}


export class Bit_imageLinkContext extends ParserRuleContext {
	public BitImageLink(): TerminalNode { return this.getToken(bitmarkParser.BitImageLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_imageLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_imageLink) {
			listener.enterBit_imageLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_imageLink) {
			listener.exitBit_imageLink(this);
		}
	}
}


export class Bit_imageZoomContext extends ParserRuleContext {
	public BitImageZoom(): TerminalNode { return this.getToken(bitmarkParser.BitImageZoom, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_imageZoom; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_imageZoom) {
			listener.enterBit_imageZoom(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_imageZoom) {
			listener.exitBit_imageZoom(this);
		}
	}
}


export class Bit_imagePrototypeContext extends ParserRuleContext {
	public BitImagePrototype(): TerminalNode { return this.getToken(bitmarkParser.BitImagePrototype, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_imagePrototype; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_imagePrototype) {
			listener.enterBit_imagePrototype(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_imagePrototype) {
			listener.exitBit_imagePrototype(this);
		}
	}
}


export class Bit_imageSuperWideContext extends ParserRuleContext {
	public BitImageSuperWide(): TerminalNode { return this.getToken(bitmarkParser.BitImageSuperWide, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_imageSuperWide; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_imageSuperWide) {
			listener.enterBit_imageSuperWide(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_imageSuperWide) {
			listener.exitBit_imageSuperWide(this);
		}
	}
}


export class Bit_audioContext extends ParserRuleContext {
	public BitAudio(): TerminalNode { return this.getToken(bitmarkParser.BitAudio, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_audio; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_audio) {
			listener.enterBit_audio(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_audio) {
			listener.exitBit_audio(this);
		}
	}
}


export class Bit_audioLinkContext extends ParserRuleContext {
	public BitAudioLink(): TerminalNode { return this.getToken(bitmarkParser.BitAudioLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_audioLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_audioLink) {
			listener.enterBit_audioLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_audioLink) {
			listener.exitBit_audioLink(this);
		}
	}
}


export class Bit_audioEmbedContext extends ParserRuleContext {
	public BitAudioEmbed(): TerminalNode { return this.getToken(bitmarkParser.BitAudioEmbed, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_audioEmbed; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_audioEmbed) {
			listener.enterBit_audioEmbed(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_audioEmbed) {
			listener.exitBit_audioEmbed(this);
		}
	}
}


export class Bit_videoContext extends ParserRuleContext {
	public BitVideo(): TerminalNode { return this.getToken(bitmarkParser.BitVideo, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_video; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_video) {
			listener.enterBit_video(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_video) {
			listener.exitBit_video(this);
		}
	}
}


export class Bit_videoLinkContext extends ParserRuleContext {
	public BitVideoLink(): TerminalNode { return this.getToken(bitmarkParser.BitVideoLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_videoLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_videoLink) {
			listener.enterBit_videoLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_videoLink) {
			listener.exitBit_videoLink(this);
		}
	}
}


export class Bit_videoEmbedContext extends ParserRuleContext {
	public BitVideoEmbed(): TerminalNode { return this.getToken(bitmarkParser.BitVideoEmbed, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_videoEmbed; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_videoEmbed) {
			listener.enterBit_videoEmbed(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_videoEmbed) {
			listener.exitBit_videoEmbed(this);
		}
	}
}


export class Bit_videoPortraitContext extends ParserRuleContext {
	public BitVideoPortrait(): TerminalNode { return this.getToken(bitmarkParser.BitVideoPortrait, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_videoPortrait; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_videoPortrait) {
			listener.enterBit_videoPortrait(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_videoPortrait) {
			listener.exitBit_videoPortrait(this);
		}
	}
}


export class Bit_videoLandscapeContext extends ParserRuleContext {
	public BitVideoLandscape(): TerminalNode { return this.getToken(bitmarkParser.BitVideoLandscape, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_videoLandscape; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_videoLandscape) {
			listener.enterBit_videoLandscape(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_videoLandscape) {
			listener.exitBit_videoLandscape(this);
		}
	}
}


export class Bit_stillImageFilmContext extends ParserRuleContext {
	public BitStillImageFilm(): TerminalNode { return this.getToken(bitmarkParser.BitStillImageFilm, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_stillImageFilm; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_stillImageFilm) {
			listener.enterBit_stillImageFilm(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_stillImageFilm) {
			listener.exitBit_stillImageFilm(this);
		}
	}
}


export class Bit_stillImageFilmLinkContext extends ParserRuleContext {
	public BitStillImageFilmLink(): TerminalNode { return this.getToken(bitmarkParser.BitStillImageFilmLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_stillImageFilmLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_stillImageFilmLink) {
			listener.enterBit_stillImageFilmLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_stillImageFilmLink) {
			listener.exitBit_stillImageFilmLink(this);
		}
	}
}


export class Bit_stillImageFilmEmbedContext extends ParserRuleContext {
	public BitStillImageFilmEmbed(): TerminalNode { return this.getToken(bitmarkParser.BitStillImageFilmEmbed, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_stillImageFilmEmbed; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_stillImageFilmEmbed) {
			listener.enterBit_stillImageFilmEmbed(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_stillImageFilmEmbed) {
			listener.exitBit_stillImageFilmEmbed(this);
		}
	}
}


export class Bit_websiteLinkContext extends ParserRuleContext {
	public BitWebsiteLink(): TerminalNode { return this.getToken(bitmarkParser.BitWebsiteLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_websiteLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_websiteLink) {
			listener.enterBit_websiteLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_websiteLink) {
			listener.exitBit_websiteLink(this);
		}
	}
}


export class Bit_documentContext extends ParserRuleContext {
	public BitDocument(): TerminalNode { return this.getToken(bitmarkParser.BitDocument, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_document; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_document) {
			listener.enterBit_document(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_document) {
			listener.exitBit_document(this);
		}
	}
}


export class Bit_documentLinkContext extends ParserRuleContext {
	public BitDocumentLink(): TerminalNode { return this.getToken(bitmarkParser.BitDocumentLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_documentLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_documentLink) {
			listener.enterBit_documentLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_documentLink) {
			listener.exitBit_documentLink(this);
		}
	}
}


export class Bit_documentEmbedContext extends ParserRuleContext {
	public BitDocumentEmbed(): TerminalNode { return this.getToken(bitmarkParser.BitDocumentEmbed, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_documentEmbed; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_documentEmbed) {
			listener.enterBit_documentEmbed(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_documentEmbed) {
			listener.exitBit_documentEmbed(this);
		}
	}
}


export class Bit_documentDownloadContext extends ParserRuleContext {
	public BitDocumentDownload(): TerminalNode { return this.getToken(bitmarkParser.BitDocumentDownload, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_documentDownload; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_documentDownload) {
			listener.enterBit_documentDownload(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_documentDownload) {
			listener.exitBit_documentDownload(this);
		}
	}
}


export class Bit_appLinkContext extends ParserRuleContext {
	public BitAppLink(): TerminalNode { return this.getToken(bitmarkParser.BitAppLink, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_appLink; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_appLink) {
			listener.enterBit_appLink(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_appLink) {
			listener.exitBit_appLink(this);
		}
	}
}


export class Bit_editorialContext extends ParserRuleContext {
	public BitEditorial(): TerminalNode { return this.getToken(bitmarkParser.BitEditorial, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bit_editorial; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBit_editorial) {
			listener.enterBit_editorial(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBit_editorial) {
			listener.exitBit_editorial(this);
		}
	}
}


export class Book_frontispieceContext extends ParserRuleContext {
	public BitBookFrontispiece(): TerminalNode { return this.getToken(bitmarkParser.BitBookFrontispiece, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_frontispiece; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_frontispiece) {
			listener.enterBook_frontispiece(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_frontispiece) {
			listener.exitBook_frontispiece(this);
		}
	}
}


export class Book_titleContext extends ParserRuleContext {
	public BitBookTitle(): TerminalNode { return this.getToken(bitmarkParser.BitBookTitle, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_title; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_title) {
			listener.enterBook_title(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_title) {
			listener.exitBook_title(this);
		}
	}
}


export class Book_copyrightContext extends ParserRuleContext {
	public BitBookCopyright(): TerminalNode { return this.getToken(bitmarkParser.BitBookCopyright, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_copyright; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_copyright) {
			listener.enterBook_copyright(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_copyright) {
			listener.exitBook_copyright(this);
		}
	}
}


export class Book_dedicationContext extends ParserRuleContext {
	public BitBookDedication(): TerminalNode { return this.getToken(bitmarkParser.BitBookDedication, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_dedication; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_dedication) {
			listener.enterBook_dedication(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_dedication) {
			listener.exitBook_dedication(this);
		}
	}
}


export class Book_forwordContext extends ParserRuleContext {
	public BitBookForword(): TerminalNode { return this.getToken(bitmarkParser.BitBookForword, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_forword; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_forword) {
			listener.enterBook_forword(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_forword) {
			listener.exitBook_forword(this);
		}
	}
}


export class Book_prefaceContext extends ParserRuleContext {
	public BitBookPreface(): TerminalNode { return this.getToken(bitmarkParser.BitBookPreface, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_preface; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_preface) {
			listener.enterBook_preface(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_preface) {
			listener.exitBook_preface(this);
		}
	}
}


export class Book_prologueContext extends ParserRuleContext {
	public BitBookPrologue(): TerminalNode { return this.getToken(bitmarkParser.BitBookPrologue, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_prologue; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_prologue) {
			listener.enterBook_prologue(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_prologue) {
			listener.exitBook_prologue(this);
		}
	}
}


export class Book_epilogueContext extends ParserRuleContext {
	public BitBookEpilogue(): TerminalNode { return this.getToken(bitmarkParser.BitBookEpilogue, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_epilogue; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_epilogue) {
			listener.enterBook_epilogue(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_epilogue) {
			listener.exitBook_epilogue(this);
		}
	}
}


export class Book_introductionContext extends ParserRuleContext {
	public BitBookIntroduction(): TerminalNode { return this.getToken(bitmarkParser.BitBookIntroduction, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_introduction; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_introduction) {
			listener.enterBook_introduction(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_introduction) {
			listener.exitBook_introduction(this);
		}
	}
}


export class Book_inciting_incidentContext extends ParserRuleContext {
	public BitBookIncitingIncident(): TerminalNode { return this.getToken(bitmarkParser.BitBookIncitingIncident, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_inciting_incident; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_inciting_incident) {
			listener.enterBook_inciting_incident(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_inciting_incident) {
			listener.exitBook_inciting_incident(this);
		}
	}
}


export class Book_conclusionContext extends ParserRuleContext {
	public BitBookConclusion(): TerminalNode { return this.getToken(bitmarkParser.BitBookConclusion, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_conclusion; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_conclusion) {
			listener.enterBook_conclusion(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_conclusion) {
			listener.exitBook_conclusion(this);
		}
	}
}


export class Book_afterwordContext extends ParserRuleContext {
	public BitBookAfterword(): TerminalNode { return this.getToken(bitmarkParser.BitBookAfterword, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_afterword; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_afterword) {
			listener.enterBook_afterword(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_afterword) {
			listener.exitBook_afterword(this);
		}
	}
}


export class Book_postscriptContext extends ParserRuleContext {
	public BitBookPostscript(): TerminalNode { return this.getToken(bitmarkParser.BitBookPostscript, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_postscript; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_postscript) {
			listener.enterBook_postscript(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_postscript) {
			listener.exitBook_postscript(this);
		}
	}
}


export class Book_appendixContext extends ParserRuleContext {
	public BitBookappendix(): TerminalNode { return this.getToken(bitmarkParser.BitBookappendix, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_appendix; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_appendix) {
			listener.enterBook_appendix(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_appendix) {
			listener.exitBook_appendix(this);
		}
	}
}


export class Book_addendumContext extends ParserRuleContext {
	public BitBookAddendum(): TerminalNode { return this.getToken(bitmarkParser.BitBookAddendum, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_addendum; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_addendum) {
			listener.enterBook_addendum(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_addendum) {
			listener.exitBook_addendum(this);
		}
	}
}


export class Book_acknowledgmentsContext extends ParserRuleContext {
	public BitBookAcknowledgments(): TerminalNode { return this.getToken(bitmarkParser.BitBookAcknowledgments, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_acknowledgments; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_acknowledgments) {
			listener.enterBook_acknowledgments(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_acknowledgments) {
			listener.exitBook_acknowledgments(this);
		}
	}
}


export class Book_list_of_contributorsContext extends ParserRuleContext {
	public BitBookListOfContributors(): TerminalNode { return this.getToken(bitmarkParser.BitBookListOfContributors, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_list_of_contributors; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_list_of_contributors) {
			listener.enterBook_list_of_contributors(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_list_of_contributors) {
			listener.exitBook_list_of_contributors(this);
		}
	}
}


export class Book_bibliographyContext extends ParserRuleContext {
	public BitBookBibliography(): TerminalNode { return this.getToken(bitmarkParser.BitBookBibliography, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_bibliography; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_bibliography) {
			listener.enterBook_bibliography(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_bibliography) {
			listener.exitBook_bibliography(this);
		}
	}
}


export class Book_reference_listContext extends ParserRuleContext {
	public BitBookReferenceList(): TerminalNode { return this.getToken(bitmarkParser.BitBookReferenceList, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_reference_list; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_reference_list) {
			listener.enterBook_reference_list(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_reference_list) {
			listener.exitBook_reference_list(this);
		}
	}
}


export class Book_endnotesContext extends ParserRuleContext {
	public BitBookEndnotes(): TerminalNode { return this.getToken(bitmarkParser.BitBookEndnotes, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_endnotes; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_endnotes) {
			listener.enterBook_endnotes(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_endnotes) {
			listener.exitBook_endnotes(this);
		}
	}
}


export class Book_notesContext extends ParserRuleContext {
	public BitBookNotes(): TerminalNode { return this.getToken(bitmarkParser.BitBookNotes, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_notes; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_notes) {
			listener.enterBook_notes(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_notes) {
			listener.exitBook_notes(this);
		}
	}
}


export class Book_copyright_permissionsContext extends ParserRuleContext {
	public BitBookCopyrightPermissions(): TerminalNode { return this.getToken(bitmarkParser.BitBookCopyrightPermissions, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_copyright_permissions; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_copyright_permissions) {
			listener.enterBook_copyright_permissions(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_copyright_permissions) {
			listener.exitBook_copyright_permissions(this);
		}
	}
}


export class Book_teaserContext extends ParserRuleContext {
	public BitBookTeaser(): TerminalNode { return this.getToken(bitmarkParser.BitBookTeaser, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_teaser; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_teaser) {
			listener.enterBook_teaser(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_teaser) {
			listener.exitBook_teaser(this);
		}
	}
}


export class Book_auther_bioContext extends ParserRuleContext {
	public BitBookAutherBio(): TerminalNode { return this.getToken(bitmarkParser.BitBookAutherBio, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_auther_bio; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_auther_bio) {
			listener.enterBook_auther_bio(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_auther_bio) {
			listener.exitBook_auther_bio(this);
		}
	}
}


export class Book_request_for_a_book_reviewContext extends ParserRuleContext {
	public BitBookRequestForABookReview(): TerminalNode { return this.getToken(bitmarkParser.BitBookRequestForABookReview, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_request_for_a_book_review; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_request_for_a_book_review) {
			listener.enterBook_request_for_a_book_review(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_request_for_a_book_review) {
			listener.exitBook_request_for_a_book_review(this);
		}
	}
}


export class Book_coming_soonContext extends ParserRuleContext {
	public BitBookComingSoon(): TerminalNode { return this.getToken(bitmarkParser.BitBookComingSoon, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_coming_soon; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_coming_soon) {
			listener.enterBook_coming_soon(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_coming_soon) {
			listener.exitBook_coming_soon(this);
		}
	}
}


export class Book_read_moreContext extends ParserRuleContext {
	public BitBookReadMore(): TerminalNode { return this.getToken(bitmarkParser.BitBookReadMore, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_read_more; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_read_more) {
			listener.enterBook_read_more(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_read_more) {
			listener.exitBook_read_more(this);
		}
	}
}


export class Book_summaryContext extends ParserRuleContext {
	public BitBookSummary(): TerminalNode { return this.getToken(bitmarkParser.BitBookSummary, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_summary; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_summary) {
			listener.enterBook_summary(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_summary) {
			listener.exitBook_summary(this);
		}
	}
}


export class Book_epigraphContext extends ParserRuleContext {
	public BitBookEpigraph(): TerminalNode { return this.getToken(bitmarkParser.BitBookEpigraph, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_book_epigraph; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBook_epigraph) {
			listener.enterBook_epigraph(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBook_epigraph) {
			listener.exitBook_epigraph(this);
		}
	}
}


export class CodeContext extends ParserRuleContext {
	public BitCode(): TerminalNode { return this.getToken(bitmarkParser.BitCode, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_code; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCode) {
			listener.enterCode(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCode) {
			listener.exitCode(this);
		}
	}
}


export class Card1Context extends ParserRuleContext {
	public BitCard1(): TerminalNode { return this.getToken(bitmarkParser.BitCard1, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_card1; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterCard1) {
			listener.enterCard1(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitCard1) {
			listener.exitCard1(this);
		}
	}
}


export class Question1Context extends ParserRuleContext {
	public BitQuestion1(): TerminalNode { return this.getToken(bitmarkParser.BitQuestion1, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_question1; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterQuestion1) {
			listener.enterQuestion1(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitQuestion1) {
			listener.exitQuestion1(this);
		}
	}
}


export class ScreenshotContext extends ParserRuleContext {
	public BitScreenshot(): TerminalNode { return this.getToken(bitmarkParser.BitScreenshot, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_screenshot; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterScreenshot) {
			listener.enterScreenshot(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitScreenshot) {
			listener.exitScreenshot(this);
		}
	}
}


export class Focus_imageContext extends ParserRuleContext {
	public BitFocusImage(): TerminalNode { return this.getToken(bitmarkParser.BitFocusImage, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_focus_image; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFocus_image) {
			listener.enterFocus_image(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFocus_image) {
			listener.exitFocus_image(this);
		}
	}
}


export class PhotoContext extends ParserRuleContext {
	public BitPhoto(): TerminalNode { return this.getToken(bitmarkParser.BitPhoto, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_photo; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterPhoto) {
			listener.enterPhoto(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitPhoto) {
			listener.exitPhoto(this);
		}
	}
}


export class Browser_imageContext extends ParserRuleContext {
	public BitBrowserImage(): TerminalNode { return this.getToken(bitmarkParser.BitBrowserImage, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_browser_image; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBrowser_image) {
			listener.enterBrowser_image(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBrowser_image) {
			listener.exitBrowser_image(this);
		}
	}
}


export class Chapter_subject_matterContext extends ParserRuleContext {
	public BitChapterSubjectMatter(): TerminalNode { return this.getToken(bitmarkParser.BitChapterSubjectMatter, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_chapter_subject_matter; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterChapter_subject_matter) {
			listener.enterChapter_subject_matter(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitChapter_subject_matter) {
			listener.exitChapter_subject_matter(this);
		}
	}
}


export class Release_noteContext extends ParserRuleContext {
	public BitReleaseNote(): TerminalNode { return this.getToken(bitmarkParser.BitReleaseNote, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_release_note; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterRelease_note) {
			listener.enterRelease_note(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitRelease_note) {
			listener.exitRelease_note(this);
		}
	}
}


export class ConclusionContext extends ParserRuleContext {
	public BitConclusion(): TerminalNode { return this.getToken(bitmarkParser.BitConclusion, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_conclusion; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterConclusion) {
			listener.enterConclusion(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitConclusion) {
			listener.exitConclusion(this);
		}
	}
}


export class FeaturedContext extends ParserRuleContext {
	public BitFeatured(): TerminalNode { return this.getToken(bitmarkParser.BitFeatured, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_featured; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFeatured) {
			listener.enterFeatured(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFeatured) {
			listener.exitFeatured(this);
		}
	}
}


export class Vendor_amcharts_5_chartContext extends ParserRuleContext {
	public BitVendorAmcharts5Chart(): TerminalNode { return this.getToken(bitmarkParser.BitVendorAmcharts5Chart, 0); }
	public format2(): Format2Context {
		return this.getRuleContext(0, Format2Context);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_vendor_amcharts_5_chart; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVendor_amcharts_5_chart) {
			listener.enterVendor_amcharts_5_chart(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVendor_amcharts_5_chart) {
			listener.exitVendor_amcharts_5_chart(this);
		}
	}
}


export class MessageContext extends ParserRuleContext {
	public BitMessage(): TerminalNode { return this.getToken(bitmarkParser.BitMessage, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_message; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterMessage) {
			listener.enterMessage(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitMessage) {
			listener.exitMessage(this);
		}
	}
}


export class Bot_interviewContext extends ParserRuleContext {
	public BitBotint(): TerminalNode { return this.getToken(bitmarkParser.BitBotint, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public bot_choice(): Bot_choiceContext[];
	public bot_choice(i: number): Bot_choiceContext;
	public bot_choice(i?: number): Bot_choiceContext | Bot_choiceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bot_choiceContext);
		} else {
			return this.getRuleContext(i, Bot_choiceContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public sspl(): SsplContext[];
	public sspl(i: number): SsplContext;
	public sspl(i?: number): SsplContext | SsplContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SsplContext);
		} else {
			return this.getRuleContext(i, SsplContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_interview; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_interview) {
			listener.enterBot_interview(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_interview) {
			listener.exitBot_interview(this);
		}
	}
}


export class Bot_choiceContext extends ParserRuleContext {
	public words(): WordsContext[];
	public words(i: number): WordsContext;
	public words(i?: number): WordsContext | WordsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WordsContext);
		} else {
			return this.getRuleContext(i, WordsContext);
		}
	}
	public instruction(): InstructionContext[];
	public instruction(i: number): InstructionContext;
	public instruction(i?: number): InstructionContext | InstructionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InstructionContext);
		} else {
			return this.getRuleContext(i, InstructionContext);
		}
	}
	public audiobit(): AudiobitContext[];
	public audiobit(i: number): AudiobitContext;
	public audiobit(i?: number): AudiobitContext | AudiobitContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AudiobitContext);
		} else {
			return this.getRuleContext(i, AudiobitContext);
		}
	}
	public gap(): GapContext[];
	public gap(i: number): GapContext;
	public gap(i?: number): GapContext | GapContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GapContext);
		} else {
			return this.getRuleContext(i, GapContext);
		}
	}
	public choice_plus(): Choice_plusContext[];
	public choice_plus(i: number): Choice_plusContext;
	public choice_plus(i?: number): Choice_plusContext | Choice_plusContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Choice_plusContext);
		} else {
			return this.getRuleContext(i, Choice_plusContext);
		}
	}
	public choice_minus(): Choice_minusContext[];
	public choice_minus(i: number): Choice_minusContext;
	public choice_minus(i?: number): Choice_minusContext | Choice_minusContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Choice_minusContext);
		} else {
			return this.getRuleContext(i, Choice_minusContext);
		}
	}
	public choice_star(): Choice_starContext[];
	public choice_star(i: number): Choice_starContext;
	public choice_star(i?: number): Choice_starContext | Choice_starContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Choice_starContext);
		} else {
			return this.getRuleContext(i, Choice_starContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bot_choice; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBot_choice) {
			listener.enterBot_choice(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBot_choice) {
			listener.exitBot_choice(this);
		}
	}
}


export class RatingContext extends ParserRuleContext {
	public BitRating(): TerminalNode { return this.getToken(bitmarkParser.BitRating, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_rating; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterRating) {
			listener.enterRating(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitRating) {
			listener.exitRating(this);
		}
	}
}


export class Bullet_itemContext extends ParserRuleContext {
	public OPBUL(): TerminalNode { return this.getToken(bitmarkParser.OPBUL, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public atpoint(): AtpointContext | undefined {
		return this.tryGetRuleContext(0, AtpointContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bullet_item; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBullet_item) {
			listener.enterBullet_item(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBullet_item) {
			listener.exitBullet_item(this);
		}
	}
}


export class SurveyContext extends ParserRuleContext {
	public BitSurvey(): TerminalNode { return this.getToken(bitmarkParser.BitSurvey, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_survey; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSurvey) {
			listener.enterSurvey(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSurvey) {
			listener.exitSurvey(this);
		}
	}
}


export class Survey_1Context extends ParserRuleContext {
	public BitSurvey1(): TerminalNode { return this.getToken(bitmarkParser.BitSurvey1, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_survey_1; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSurvey_1) {
			listener.enterSurvey_1(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSurvey_1) {
			listener.exitSurvey_1(this);
		}
	}
}


export class Survey_anonymousContext extends ParserRuleContext {
	public BitSurveyanon(): TerminalNode { return this.getToken(bitmarkParser.BitSurveyanon, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_survey_anonymous; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSurvey_anonymous) {
			listener.enterSurvey_anonymous(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSurvey_anonymous) {
			listener.exitSurvey_anonymous(this);
		}
	}
}


export class Survey_anonymous_1Context extends ParserRuleContext {
	public BitSurveyanon1(): TerminalNode { return this.getToken(bitmarkParser.BitSurveyanon1, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_survey_anonymous_1; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSurvey_anonymous_1) {
			listener.enterSurvey_anonymous_1(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSurvey_anonymous_1) {
			listener.exitSurvey_anonymous_1(this);
		}
	}
}


export class Self_assessmentContext extends ParserRuleContext {
	public BitSelfassess(): TerminalNode { return this.getToken(bitmarkParser.BitSelfassess, 0); }
	public format(): FormatContext {
		return this.getRuleContext(0, FormatContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public HSPL(): TerminalNode[];
	public HSPL(i: number): TerminalNode;
	public HSPL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL);
		} else {
			return this.getToken(bitmarkParser.HSPL, i);
		}
	}
	public HSPL2(): TerminalNode[];
	public HSPL2(i: number): TerminalNode;
	public HSPL2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.HSPL2);
		} else {
			return this.getToken(bitmarkParser.HSPL2, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public bitElem(): BitElemContext[];
	public bitElem(i: number): BitElemContext;
	public bitElem(i?: number): BitElemContext | BitElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BitElemContext);
		} else {
			return this.getRuleContext(i, BitElemContext);
		}
	}
	public self_assess_s_and_w(): Self_assess_s_and_wContext[];
	public self_assess_s_and_w(i: number): Self_assess_s_and_wContext;
	public self_assess_s_and_w(i?: number): Self_assess_s_and_wContext | Self_assess_s_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Self_assess_s_and_wContext);
		} else {
			return this.getRuleContext(i, Self_assess_s_and_wContext);
		}
	}
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public bullet_item(): Bullet_itemContext[];
	public bullet_item(i: number): Bullet_itemContext;
	public bullet_item(i?: number): Bullet_itemContext | Bullet_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bullet_itemContext);
		} else {
			return this.getRuleContext(i, Bullet_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_self_assessment; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSelf_assessment) {
			listener.enterSelf_assessment(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSelf_assessment) {
			listener.exitSelf_assessment(this);
		}
	}
}


export class Self_assess_s_and_wContext extends ParserRuleContext {
	public OPBUL(): TerminalNode[];
	public OPBUL(i: number): TerminalNode;
	public OPBUL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.OPBUL);
		} else {
			return this.getToken(bitmarkParser.OPBUL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_self_assess_s_and_w; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSelf_assess_s_and_w) {
			listener.enterSelf_assess_s_and_w(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSelf_assess_s_and_w) {
			listener.exitSelf_assess_s_and_w(this);
		}
	}
}


export class AtpointContext extends ParserRuleContext {
	public AtPoints(): TerminalNode { return this.getToken(bitmarkParser.AtPoints, 0); }
	public NUMERIC(): TerminalNode { return this.getToken(bitmarkParser.NUMERIC, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_atpoint; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAtpoint) {
			listener.enterAtpoint(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAtpoint) {
			listener.exitAtpoint(this);
		}
	}
}


export class FormatContext extends ParserRuleContext {
	public resource_format(): Resource_formatContext[];
	public resource_format(i: number): Resource_formatContext;
	public resource_format(i?: number): Resource_formatContext | Resource_formatContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Resource_formatContext);
		} else {
			return this.getRuleContext(i, Resource_formatContext);
		}
	}
	public ColonText(): TerminalNode[];
	public ColonText(i: number): TerminalNode;
	public ColonText(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.ColonText);
		} else {
			return this.getToken(bitmarkParser.ColonText, i);
		}
	}
	public ColonJson(): TerminalNode[];
	public ColonJson(i: number): TerminalNode;
	public ColonJson(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.ColonJson);
		} else {
			return this.getToken(bitmarkParser.ColonJson, i);
		}
	}
	public resource_format_extra(): Resource_format_extraContext[];
	public resource_format_extra(i: number): Resource_format_extraContext;
	public resource_format_extra(i?: number): Resource_format_extraContext | Resource_format_extraContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Resource_format_extraContext);
		} else {
			return this.getRuleContext(i, Resource_format_extraContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFormat) {
			listener.enterFormat(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFormat) {
			listener.exitFormat(this);
		}
	}
}


export class Resource_formatContext extends ParserRuleContext {
	public BitmarkMinus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
	public BitmarkPlus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
	public Prosemirror(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Prosemirror, 0); }
	public Placeholder(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Placeholder, 0); }
	public ColonJson(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ColonJson, 0); }
	public AmpArticle(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
	public AmpDocument(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
	public AmpWebsite(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
	public AmpStillImageFilm(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
	public AmpAudioLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
	public AmpImageLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
	public AmpVideoLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
	public AmpArticleLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
	public AmpDocumentLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
	public AmpAppLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
	public AmpWebsiteLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
	public AmpStillImageFilmLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
	public AmpVideoEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpVideoEmbed, 0); }
	public AmpAudioEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAudioEmbed, 0); }
	public AmpDocumentEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocumentEmbed, 0); }
	public AmpStillImageFilmEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilmEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_resource_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterResource_format) {
			listener.enterResource_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitResource_format) {
			listener.exitResource_format(this);
		}
	}
}


export class Resource_format_extraContext extends ParserRuleContext {
	public image_format(): Image_formatContext | undefined {
		return this.tryGetRuleContext(0, Image_formatContext);
	}
	public audio_format(): Audio_formatContext | undefined {
		return this.tryGetRuleContext(0, Audio_formatContext);
	}
	public video_format(): Video_formatContext | undefined {
		return this.tryGetRuleContext(0, Video_formatContext);
	}
	public article_format(): Article_formatContext | undefined {
		return this.tryGetRuleContext(0, Article_formatContext);
	}
	public document_format(): Document_formatContext | undefined {
		return this.tryGetRuleContext(0, Document_formatContext);
	}
	public app_format(): App_formatContext | undefined {
		return this.tryGetRuleContext(0, App_formatContext);
	}
	public website_format(): Website_formatContext | undefined {
		return this.tryGetRuleContext(0, Website_formatContext);
	}
	public stillimagefilm_format(): Stillimagefilm_formatContext | undefined {
		return this.tryGetRuleContext(0, Stillimagefilm_formatContext);
	}
	public AmpPdf(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpPdf, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_resource_format_extra; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterResource_format_extra) {
			listener.enterResource_format_extra(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitResource_format_extra) {
			listener.exitResource_format_extra(this);
		}
	}
}


export class Format2Context extends ParserRuleContext {
	public BitmarkMinus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
	public BitmarkPlus(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
	public ColonText(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ColonText, 0); }
	public ColonJson(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ColonJson, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_format2; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterFormat2) {
			listener.enterFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitFormat2) {
			listener.exitFormat2(this);
		}
	}
}


export class Image_formatContext extends ParserRuleContext {
	public AmpImage(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpImage, 0); }
	public Image_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Image_type, 0); }
	public DotArticleAtt(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
	public AmpImageLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
	public AmpImageZoom(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpImageZoom, 0); }
	public AmpImageWAudio(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpImageWAudio, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_format) {
			listener.enterImage_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_format) {
			listener.exitImage_format(this);
		}
	}
}


export class Video_formatContext extends ParserRuleContext {
	public AmpVideo(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpVideo, 0); }
	public AmpVideoLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
	public AmpVideoEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpVideoEmbed, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public Video_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Video_type, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_video_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVideo_format) {
			listener.enterVideo_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVideo_format) {
			listener.exitVideo_format(this);
		}
	}
}


export class Article_formatContext extends ParserRuleContext {
	public AmpArticle(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
	public AmpArticleLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_article_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterArticle_format) {
			listener.enterArticle_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitArticle_format) {
			listener.exitArticle_format(this);
		}
	}
}


export class Document_formatContext extends ParserRuleContext {
	public AmpDocument(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
	public AmpDocumentLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
	public AmpDocumentEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpDocumentEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_document_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDocument_format) {
			listener.enterDocument_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDocument_format) {
			listener.exitDocument_format(this);
		}
	}
}


export class App_formatContext extends ParserRuleContext {
	public AmpApp(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpApp, 0); }
	public AmpAppLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_app_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterApp_format) {
			listener.enterApp_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitApp_format) {
			listener.exitApp_format(this);
		}
	}
}


export class Website_formatContext extends ParserRuleContext {
	public AmpWebsite(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
	public AmpWebsiteLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_website_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWebsite_format) {
			listener.enterWebsite_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWebsite_format) {
			listener.exitWebsite_format(this);
		}
	}
}


export class Stillimagefilm_formatContext extends ParserRuleContext {
	public AmpStillImageFilm(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
	public AmpStillImageFilmLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
	public AmpStillImageFilmEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpStillImageFilmEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_stillimagefilm_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterStillimagefilm_format) {
			listener.enterStillimagefilm_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitStillimagefilm_format) {
			listener.exitStillimagefilm_format(this);
		}
	}
}


export class Op_article_formatContext extends ParserRuleContext {
	public OpAmpArticleLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpArticleLink, 0); }
	public OpAmpArticle(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpArticle, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_article_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_article_format) {
			listener.enterOp_article_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_article_format) {
			listener.exitOp_article_format(this);
		}
	}
}


export class Op_document_formatContext extends ParserRuleContext {
	public OpAmpDocumentLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpDocumentLink, 0); }
	public OpAmpDocument(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpDocument, 0); }
	public OpAmpDocumentEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpDocumentEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_document_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_document_format) {
			listener.enterOp_document_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_document_format) {
			listener.exitOp_document_format(this);
		}
	}
}


export class Op_app_formatContext extends ParserRuleContext {
	public OpAmpApp(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpApp, 0); }
	public OpAmpAppLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpAppLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_app_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_app_format) {
			listener.enterOp_app_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_app_format) {
			listener.exitOp_app_format(this);
		}
	}
}


export class Op_website_formatContext extends ParserRuleContext {
	public OpAmpWebsite(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpWebsite, 0); }
	public OpAmpWebsiteLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpWebsiteLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_website_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_website_format) {
			listener.enterOp_website_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_website_format) {
			listener.exitOp_website_format(this);
		}
	}
}


export class Op_video_formatContext extends ParserRuleContext {
	public OpAmpVideo(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpVideo, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public Video_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Video_type, 0); }
	public OpAmpVideoLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpVideoLink, 0); }
	public OpAmpVideoEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpVideoEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_video_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_video_format) {
			listener.enterOp_video_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_video_format) {
			listener.exitOp_video_format(this);
		}
	}
}


export class Op_stillimagefilm_formatContext extends ParserRuleContext {
	public OpAmpStillImageFilm(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilm, 0); }
	public OpAmpStillImageFilmLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmLink, 0); }
	public OpAmpStillImageFilmEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_stillimagefilm_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_stillimagefilm_format) {
			listener.enterOp_stillimagefilm_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_stillimagefilm_format) {
			listener.exitOp_stillimagefilm_format(this);
		}
	}
}


export class ArticlebitContext extends ParserRuleContext {
	public op_article_format(): Op_article_formatContext | undefined {
		return this.tryGetRuleContext(0, Op_article_formatContext);
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext | undefined {
		return this.tryGetRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public ArticleText(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ArticleText, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_articlebit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterArticlebit) {
			listener.enterArticlebit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitArticlebit) {
			listener.exitArticlebit(this);
		}
	}
}


export class DocumentbitContext extends ParserRuleContext {
	public op_document_format(): Op_document_formatContext {
		return this.getRuleContext(0, Op_document_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_documentbit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDocumentbit) {
			listener.enterDocumentbit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDocumentbit) {
			listener.exitDocumentbit(this);
		}
	}
}


export class WebsitebitContext extends ParserRuleContext {
	public op_website_format(): Op_website_formatContext {
		return this.getRuleContext(0, Op_website_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_websitebit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWebsitebit) {
			listener.enterWebsitebit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWebsitebit) {
			listener.exitWebsitebit(this);
		}
	}
}


export class AppbitContext extends ParserRuleContext {
	public op_app_format(): Op_app_formatContext {
		return this.getRuleContext(0, Op_app_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public url(): UrlContext | undefined {
		return this.tryGetRuleContext(0, UrlContext);
	}
	public telephone(): TelephoneContext | undefined {
		return this.tryGetRuleContext(0, TelephoneContext);
	}
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_appbit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAppbit) {
			listener.enterAppbit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAppbit) {
			listener.exitAppbit(this);
		}
	}
}


export class StillimagefilmbitContext extends ParserRuleContext {
	public stillimg_one(): Stillimg_oneContext {
		return this.getRuleContext(0, Stillimg_oneContext);
	}
	public resource_chained(): Resource_chainedContext[];
	public resource_chained(i: number): Resource_chainedContext;
	public resource_chained(i?: number): Resource_chainedContext | Resource_chainedContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Resource_chainedContext);
		} else {
			return this.getRuleContext(i, Resource_chainedContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_stillimagefilmbit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterStillimagefilmbit) {
			listener.enterStillimagefilmbit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitStillimagefilmbit) {
			listener.exitStillimagefilmbit(this);
		}
	}
}


export class Stillimg_oneContext extends ParserRuleContext {
	public op_stillimagefilm_format(): Op_stillimagefilm_formatContext {
		return this.getRuleContext(0, Op_stillimagefilm_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_stillimg_one; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterStillimg_one) {
			listener.enterStillimg_one(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitStillimg_one) {
			listener.exitStillimg_one(this);
		}
	}
}


export class VideobitContext extends ParserRuleContext {
	public video_one(): Video_oneContext {
		return this.getRuleContext(0, Video_oneContext);
	}
	public resource_chained(): Resource_chainedContext[];
	public resource_chained(i: number): Resource_chainedContext;
	public resource_chained(i?: number): Resource_chainedContext | Resource_chainedContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Resource_chainedContext);
		} else {
			return this.getRuleContext(i, Resource_chainedContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_videobit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVideobit) {
			listener.enterVideobit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVideobit) {
			listener.exitVideobit(this);
		}
	}
}


export class Video_oneContext extends ParserRuleContext {
	public op_video_format(): Op_video_formatContext {
		return this.getRuleContext(0, Op_video_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_video_one; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterVideo_one) {
			listener.enterVideo_one(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitVideo_one) {
			listener.exitVideo_one(this);
		}
	}
}


export class ImagebitContext extends ParserRuleContext {
	public image_one(): Image_oneContext {
		return this.getRuleContext(0, Image_oneContext);
	}
	public image_chained(): Image_chainedContext[];
	public image_chained(i: number): Image_chainedContext;
	public image_chained(i?: number): Image_chainedContext | Image_chainedContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Image_chainedContext);
		} else {
			return this.getRuleContext(i, Image_chainedContext);
		}
	}
	public NL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NL, 0); }
	public ShowInIndex(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.ShowInIndex, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_imagebit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImagebit) {
			listener.enterImagebit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImagebit) {
			listener.exitImagebit(this);
		}
	}
}


export class Image_oneContext extends ParserRuleContext {
	public op_image_format(): Op_image_formatContext {
		return this.getRuleContext(0, Op_image_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_one; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_one) {
			listener.enterImage_one(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_one) {
			listener.exitImage_one(this);
		}
	}
}


export class Op_image_formatContext extends ParserRuleContext {
	public OpAmpImage(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpImage, 0); }
	public Image_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Image_type, 0); }
	public DotArticleAtt(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
	public OpAmpImageLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpImageLink, 0); }
	public OpAmpImageZoom(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpImageZoom, 0); }
	public OpAmpImageWAudio(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpImageWAudio, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_image_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_image_format) {
			listener.enterOp_image_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_image_format) {
			listener.exitOp_image_format(this);
		}
	}
}


export class Image_chainedContext extends ParserRuleContext {
	public AtSrc(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext | undefined {
		return this.tryGetRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public AtWidth(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
	public AtHeight(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public OpAtCaption(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
	public OpAtSearch(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
	public OpAtLicense(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
	public OpAtCopyright(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_chained; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_chained) {
			listener.enterImage_chained(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_chained) {
			listener.exitImage_chained(this);
		}
	}
}


export class Image_chained4matchContext extends ParserRuleContext {
	public AtSrc(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext | undefined {
		return this.tryGetRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public AtWidth(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
	public AtHeight(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public OpAtCaption(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
	public OpAtSearch(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
	public OpAtLicense(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
	public OpAtCopyright(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_image_chained4match; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterImage_chained4match) {
			listener.enterImage_chained4match(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitImage_chained4match) {
			listener.exitImage_chained4match(this);
		}
	}
}


export class AudiobitContext extends ParserRuleContext {
	public audio_one(): Audio_oneContext {
		return this.getRuleContext(0, Audio_oneContext);
	}
	public resource_chained(): Resource_chainedContext[];
	public resource_chained(i: number): Resource_chainedContext;
	public resource_chained(i?: number): Resource_chainedContext | Resource_chainedContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Resource_chainedContext);
		} else {
			return this.getRuleContext(i, Resource_chainedContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_audiobit; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAudiobit) {
			listener.enterAudiobit(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAudiobit) {
			listener.exitAudiobit(this);
		}
	}
}


export class Audio_oneContext extends ParserRuleContext {
	public op_audio_format(): Op_audio_formatContext {
		return this.getRuleContext(0, Op_audio_formatContext);
	}
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public url(): UrlContext {
		return this.getRuleContext(0, UrlContext);
	}
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_audio_one; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAudio_one) {
			listener.enterAudio_one(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAudio_one) {
			listener.exitAudio_one(this);
		}
	}
}


export class Audio_formatContext extends ParserRuleContext {
	public AmpAudio(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAudio, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public Audio_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
	public AmpAudioLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_audio_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAudio_format) {
			listener.enterAudio_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAudio_format) {
			listener.exitAudio_format(this);
		}
	}
}


export class Op_audio_formatContext extends ParserRuleContext {
	public OpAmpAudio(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpAudio, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public Audio_type(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
	public OpAmpAudioLink(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpAudioLink, 0); }
	public OpAmpAudioEmbed(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAmpAudioEmbed, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_op_audio_format; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterOp_audio_format) {
			listener.enterOp_audio_format(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitOp_audio_format) {
			listener.exitOp_audio_format(this);
		}
	}
}


export class Resource_chainedContext extends ParserRuleContext {
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public OPA(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPA, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public AtSrc(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public AtWidth(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
	public AtHeight(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
	public OPATALT(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
	public OpAtCaption(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
	public OpAtSearch(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
	public OpAtLicense(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
	public OpAtCopyright(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_resource_chained; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterResource_chained) {
			listener.enterResource_chained(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitResource_chained) {
			listener.exitResource_chained(this);
		}
	}
}


export class TelephoneContext extends ParserRuleContext {
	public TEL(): TerminalNode { return this.getToken(bitmarkParser.TEL, 0); }
	public PLUS(): TerminalNode { return this.getToken(bitmarkParser.PLUS, 0); }
	public NUMERIC(): TerminalNode { return this.getToken(bitmarkParser.NUMERIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_telephone; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterTelephone) {
			listener.enterTelephone(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitTelephone) {
			listener.exitTelephone(this);
		}
	}
}


export class UrlContext extends ParserRuleContext {
	public URL(): TerminalNode { return this.getToken(bitmarkParser.URL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_url; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterUrl) {
			listener.enterUrl(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitUrl) {
			listener.exitUrl(this);
		}
	}
}


export class ItemContext extends ParserRuleContext {
	public OPC(): TerminalNode { return this.getToken(bitmarkParser.OPC, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public lead(): LeadContext | undefined {
		return this.tryGetRuleContext(0, LeadContext);
	}
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public words(): WordsContext[];
	public words(i: number): WordsContext;
	public words(i?: number): WordsContext | WordsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WordsContext);
		} else {
			return this.getRuleContext(i, WordsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_item; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterItem) {
			listener.enterItem(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitItem) {
			listener.exitItem(this);
		}
	}
}


export class LeadContext extends ParserRuleContext {
	public OPC(): TerminalNode { return this.getToken(bitmarkParser.OPC, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public words(): WordsContext[];
	public words(i: number): WordsContext;
	public words(i?: number): WordsContext | WordsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WordsContext);
		} else {
			return this.getRuleContext(i, WordsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lead; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLead) {
			listener.enterLead(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLead) {
			listener.exitLead(this);
		}
	}
}


export class AnglerefContext extends ParserRuleContext {
	public OPRANGLES(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPRANGLES, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	public OPRANGLEL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPRANGLEL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_angleref; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAngleref) {
			listener.enterAngleref(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAngleref) {
			listener.exitAngleref(this);
		}
	}
}


export class ExampleContext extends ParserRuleContext {
	public AtExamplecl(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtExamplecl, 0); }
	public AtExampleWithStr(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtExampleWithStr, 0); }
	public AtExamplecol(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtExamplecol, 0); }
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	public SENTENCE(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.SENTENCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_example; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterExample) {
			listener.enterExample(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitExample) {
			listener.exitExample(this);
		}
	}
}


export class Bracketed_textContext extends ParserRuleContext {
	public BracEnclose(): TerminalNode { return this.getToken(bitmarkParser.BracEnclose, 0); }
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bracketed_text; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBracketed_text) {
			listener.enterBracketed_text(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBracketed_text) {
			listener.exitBracketed_text(this);
		}
	}
}


export class ReferenceContext extends ParserRuleContext {
	public AtReference(): TerminalNode { return this.getToken(bitmarkParser.AtReference, 0); }
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public URL(): TerminalNode[];
	public URL(i: number): TerminalNode;
	public URL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.URL);
		} else {
			return this.getToken(bitmarkParser.URL, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_reference; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterReference) {
			listener.enterReference(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitReference) {
			listener.exitReference(this);
		}
	}
}


export class ProgressContext extends ParserRuleContext {
	public AtProgress(): TerminalNode { return this.getToken(bitmarkParser.AtProgress, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_progress; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterProgress) {
			listener.enterProgress(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitProgress) {
			listener.exitProgress(this);
		}
	}
}


export class DatepropContext extends ParserRuleContext {
	public AtDate(): TerminalNode { return this.getToken(bitmarkParser.AtDate, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public dateprop_chained(): Dateprop_chainedContext | undefined {
		return this.tryGetRuleContext(0, Dateprop_chainedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_dateprop; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDateprop) {
			listener.enterDateprop(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDateprop) {
			listener.exitDateprop(this);
		}
	}
}


export class Dateprop_chainedContext extends ParserRuleContext {
	public AtDate(): TerminalNode { return this.getToken(bitmarkParser.AtDate, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_dateprop_chained; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDateprop_chained) {
			listener.enterDateprop_chained(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDateprop_chained) {
			listener.exitDateprop_chained(this);
		}
	}
}


export class InstructionContext extends ParserRuleContext {
	public OPB(): TerminalNode { return this.getToken(bitmarkParser.OPB, 0); }
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_instruction; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterInstruction) {
			listener.enterInstruction(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitInstruction) {
			listener.exitInstruction(this);
		}
	}
}


export class HintContext extends ParserRuleContext {
	public OPQ(): TerminalNode { return this.getToken(bitmarkParser.OPQ, 0); }
	public CL(): TerminalNode[];
	public CL(i: number): TerminalNode;
	public CL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.CL);
		} else {
			return this.getToken(bitmarkParser.CL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_hint; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterHint) {
			listener.enterHint(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitHint) {
			listener.exitHint(this);
		}
	}
}


export class TitleContext extends ParserRuleContext {
	public OPHASH(): TerminalNode { return this.getToken(bitmarkParser.OPHASH, 0); }
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_title; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterTitle) {
			listener.enterTitle(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitTitle) {
			listener.exitTitle(this);
		}
	}
}


export class Bool_labelContext extends ParserRuleContext {
	public AtLabeltrue(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtLabeltrue, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public AtLabelfalse(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AtLabelfalse, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_bool_label; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterBool_label) {
			listener.enterBool_label(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitBool_label) {
			listener.exitBool_label(this);
		}
	}
}


export class Progress_pointsContext extends ParserRuleContext {
	public AtProgressPoints(): TerminalNode { return this.getToken(bitmarkParser.AtProgressPoints, 0); }
	public COLON(): TerminalNode { return this.getToken(bitmarkParser.COLON, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_progress_points; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterProgress_points) {
			listener.enterProgress_points(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitProgress_points) {
			listener.exitProgress_points(this);
		}
	}
}


export class IstrackedContext extends ParserRuleContext {
	public OpAtIsTracked(): TerminalNode { return this.getToken(bitmarkParser.OpAtIsTracked, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_istracked; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterIstracked) {
			listener.enterIstracked(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitIstracked) {
			listener.exitIstracked(this);
		}
	}
}


export class IsinfoonlyContext extends ParserRuleContext {
	public OpAtIsInfoOnly(): TerminalNode { return this.getToken(bitmarkParser.OpAtIsInfoOnly, 0); }
	public s_and_w(): S_and_wContext {
		return this.getRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_isinfoonly; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterIsinfoonly) {
			listener.enterIsinfoonly(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitIsinfoonly) {
			listener.exitIsinfoonly(this);
		}
	}
}


export class AtdefContext extends ParserRuleContext {
	public atdef_(): Atdef_Context[];
	public atdef_(i: number): Atdef_Context;
	public atdef_(i?: number): Atdef_Context | Atdef_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Atdef_Context);
		} else {
			return this.getRuleContext(i, Atdef_Context);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_atdef; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAtdef) {
			listener.enterAtdef(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAtdef) {
			listener.exitAtdef(this);
		}
	}
}


export class Atdef_Context extends ParserRuleContext {
	public OPA(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPA, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public DBLCOLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.DBLCOLON, 0); }
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public OpAtCopyright(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_atdef_; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAtdef_) {
			listener.enterAtdef_(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAtdef_) {
			listener.exitAtdef_(this);
		}
	}
}


export class DollaransContext extends ParserRuleContext {
	public OPDOLL(): TerminalNode { return this.getToken(bitmarkParser.OPDOLL, 0); }
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.COLON);
		} else {
			return this.getToken(bitmarkParser.COLON, i);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	public EOF(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_dollarans; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDollarans) {
			listener.enterDollarans(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDollarans) {
			listener.exitDollarans(this);
		}
	}
}


export class AnchorContext extends ParserRuleContext {
	public OPDANGLE(): TerminalNode { return this.getToken(bitmarkParser.OPDANGLE, 0); }
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_anchor; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterAnchor) {
			listener.enterAnchor(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitAnchor) {
			listener.exitAnchor(this);
		}
	}
}


export class LinesContext extends ParserRuleContext {
	public s_and_w(): S_and_wContext[];
	public s_and_w(i: number): S_and_wContext;
	public s_and_w(i?: number): S_and_wContext | S_and_wContext[] {
		if (i === undefined) {
			return this.getRuleContexts(S_and_wContext);
		} else {
			return this.getRuleContext(i, S_and_wContext);
		}
	}
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NL);
		} else {
			return this.getToken(bitmarkParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_lines; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterLines) {
			listener.enterLines(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitLines) {
			listener.exitLines(this);
		}
	}
}


export class S_and_wContext extends ParserRuleContext {
	public STRING(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.STRING, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
	public S(): TerminalNode[];
	public S(i: number): TerminalNode;
	public S(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.S);
		} else {
			return this.getToken(bitmarkParser.S, i);
		}
	}
	public words(): WordsContext | undefined {
		return this.tryGetRuleContext(0, WordsContext);
	}
	public OPS(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.OPS, 0); }
	public s_and_w(): S_and_wContext | undefined {
		return this.tryGetRuleContext(0, S_and_wContext);
	}
	public CL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.CL, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.COLON, 0); }
	public AMP(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.AMP, 0); }
	public DBLEQ(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.DBLEQ, 0); }
	public URL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.URL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_s_and_w; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterS_and_w) {
			listener.enterS_and_w(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitS_and_w) {
			listener.exitS_and_w(this);
		}
	}
}


export class DclinesContext extends ParserRuleContext {
	public DCANY(): TerminalNode { return this.getToken(bitmarkParser.DCANY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_dclines; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterDclines) {
			listener.enterDclines(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitDclines) {
			listener.exitDclines(this);
		}
	}
}


export class ClnspContext extends ParserRuleContext {
	public CL(): TerminalNode { return this.getToken(bitmarkParser.CL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_clnsp; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterClnsp) {
			listener.enterClnsp(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitClnsp) {
			listener.exitClnsp(this);
		}
	}
}


export class SsplContext extends ParserRuleContext {
	public SSPL(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.SSPL, 0); }
	public SSPL2(): TerminalNode | undefined { return this.tryGetToken(bitmarkParser.SSPL2, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_sspl; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSspl) {
			listener.enterSspl(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSspl) {
			listener.exitSspl(this);
		}
	}
}


export class WordsContext extends ParserRuleContext {
	public sentence(): SentenceContext[];
	public sentence(i: number): SentenceContext;
	public sentence(i?: number): SentenceContext | SentenceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenceContext);
		} else {
			return this.getRuleContext(i, SentenceContext);
		}
	}
	public NOTBITMARK(): TerminalNode[];
	public NOTBITMARK(i: number): TerminalNode;
	public NOTBITMARK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.NOTBITMARK);
		} else {
			return this.getToken(bitmarkParser.NOTBITMARK, i);
		}
	}
	public BARSTRING(): TerminalNode[];
	public BARSTRING(i: number): TerminalNode;
	public BARSTRING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.BARSTRING);
		} else {
			return this.getToken(bitmarkParser.BARSTRING, i);
		}
	}
	public AMP(): TerminalNode[];
	public AMP(i: number): TerminalNode;
	public AMP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AMP);
		} else {
			return this.getToken(bitmarkParser.AMP, i);
		}
	}
	public Greater(): TerminalNode[];
	public Greater(i: number): TerminalNode;
	public Greater(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.Greater);
		} else {
			return this.getToken(bitmarkParser.Greater, i);
		}
	}
	public Less(): TerminalNode[];
	public Less(i: number): TerminalNode;
	public Less(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.Less);
		} else {
			return this.getToken(bitmarkParser.Less, i);
		}
	}
	public RightArrow(): TerminalNode[];
	public RightArrow(i: number): TerminalNode;
	public RightArrow(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.RightArrow);
		} else {
			return this.getToken(bitmarkParser.RightArrow, i);
		}
	}
	public RightAngle(): TerminalNode[];
	public RightAngle(i: number): TerminalNode;
	public RightAngle(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.RightAngle);
		} else {
			return this.getToken(bitmarkParser.RightAngle, i);
		}
	}
	public AmpArticle(): TerminalNode[];
	public AmpArticle(i: number): TerminalNode;
	public AmpArticle(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpArticle);
		} else {
			return this.getToken(bitmarkParser.AmpArticle, i);
		}
	}
	public AmpArticleLink(): TerminalNode[];
	public AmpArticleLink(i: number): TerminalNode;
	public AmpArticleLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpArticleLink);
		} else {
			return this.getToken(bitmarkParser.AmpArticleLink, i);
		}
	}
	public AmpDocument(): TerminalNode[];
	public AmpDocument(i: number): TerminalNode;
	public AmpDocument(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpDocument);
		} else {
			return this.getToken(bitmarkParser.AmpDocument, i);
		}
	}
	public AmpDocumentLink(): TerminalNode[];
	public AmpDocumentLink(i: number): TerminalNode;
	public AmpDocumentLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpDocumentLink);
		} else {
			return this.getToken(bitmarkParser.AmpDocumentLink, i);
		}
	}
	public AmpWebsite(): TerminalNode[];
	public AmpWebsite(i: number): TerminalNode;
	public AmpWebsite(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpWebsite);
		} else {
			return this.getToken(bitmarkParser.AmpWebsite, i);
		}
	}
	public AmpWebsiteLink(): TerminalNode[];
	public AmpWebsiteLink(i: number): TerminalNode;
	public AmpWebsiteLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpWebsiteLink);
		} else {
			return this.getToken(bitmarkParser.AmpWebsiteLink, i);
		}
	}
	public AmpImage(): TerminalNode[];
	public AmpImage(i: number): TerminalNode;
	public AmpImage(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpImage);
		} else {
			return this.getToken(bitmarkParser.AmpImage, i);
		}
	}
	public AmpImageLink(): TerminalNode[];
	public AmpImageLink(i: number): TerminalNode;
	public AmpImageLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpImageLink);
		} else {
			return this.getToken(bitmarkParser.AmpImageLink, i);
		}
	}
	public AmpAudio(): TerminalNode[];
	public AmpAudio(i: number): TerminalNode;
	public AmpAudio(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpAudio);
		} else {
			return this.getToken(bitmarkParser.AmpAudio, i);
		}
	}
	public AmpAudioLink(): TerminalNode[];
	public AmpAudioLink(i: number): TerminalNode;
	public AmpAudioLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpAudioLink);
		} else {
			return this.getToken(bitmarkParser.AmpAudioLink, i);
		}
	}
	public AmpVideo(): TerminalNode[];
	public AmpVideo(i: number): TerminalNode;
	public AmpVideo(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpVideo);
		} else {
			return this.getToken(bitmarkParser.AmpVideo, i);
		}
	}
	public AmpVideoLink(): TerminalNode[];
	public AmpVideoLink(i: number): TerminalNode;
	public AmpVideoLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpVideoLink);
		} else {
			return this.getToken(bitmarkParser.AmpVideoLink, i);
		}
	}
	public AmpApp(): TerminalNode[];
	public AmpApp(i: number): TerminalNode;
	public AmpApp(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpApp);
		} else {
			return this.getToken(bitmarkParser.AmpApp, i);
		}
	}
	public AmpAppLink(): TerminalNode[];
	public AmpAppLink(i: number): TerminalNode;
	public AmpAppLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpAppLink);
		} else {
			return this.getToken(bitmarkParser.AmpAppLink, i);
		}
	}
	public AmpStillImageFilm(): TerminalNode[];
	public AmpStillImageFilm(i: number): TerminalNode;
	public AmpStillImageFilm(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpStillImageFilm);
		} else {
			return this.getToken(bitmarkParser.AmpStillImageFilm, i);
		}
	}
	public AmpStillImageFilmLink(): TerminalNode[];
	public AmpStillImageFilmLink(i: number): TerminalNode;
	public AmpStillImageFilmLink(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.AmpStillImageFilmLink);
		} else {
			return this.getToken(bitmarkParser.AmpStillImageFilmLink, i);
		}
	}
	public BitmarkMinus(): TerminalNode[];
	public BitmarkMinus(i: number): TerminalNode;
	public BitmarkMinus(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.BitmarkMinus);
		} else {
			return this.getToken(bitmarkParser.BitmarkMinus, i);
		}
	}
	public BitmarkPlus(): TerminalNode[];
	public BitmarkPlus(i: number): TerminalNode;
	public BitmarkPlus(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.BitmarkPlus);
		} else {
			return this.getToken(bitmarkParser.BitmarkPlus, i);
		}
	}
	public QUOTE_INDEX(): TerminalNode[];
	public QUOTE_INDEX(i: number): TerminalNode;
	public QUOTE_INDEX(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(bitmarkParser.QUOTE_INDEX);
		} else {
			return this.getToken(bitmarkParser.QUOTE_INDEX, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_words; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterWords) {
			listener.enterWords(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitWords) {
			listener.exitWords(this);
		}
	}
}


export class SpContext extends ParserRuleContext {
	public S(): TerminalNode { return this.getToken(bitmarkParser.S, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_sp; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSp) {
			listener.enterSp(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSp) {
			listener.exitSp(this);
		}
	}
}


export class SentenceContext extends ParserRuleContext {
	public SENTENCE(): TerminalNode { return this.getToken(bitmarkParser.SENTENCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return bitmarkParser.RULE_sentence; }
	// @Override
	public enterRule(listener: bitmarkParserListener): void {
		if (listener.enterSentence) {
			listener.enterSentence(this);
		}
	}
	// @Override
	public exitRule(listener: bitmarkParserListener): void {
		if (listener.exitSentence) {
			listener.exitSentence(this);
		}
	}
}


