"use strict";
// Generated from ./typescript//bitmarkParser.g4 by ANTLR 4.9.0-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
exports.SentenceContext = exports.SpContext = exports.WordsContext = exports.SsplContext = exports.ClnspContext = exports.DclinesContext = exports.S_and_wContext = exports.LinesContext = exports.AnchorContext = exports.DollaransContext = exports.Atdef_Context = exports.AtdefContext = exports.IsinfoonlyContext = exports.IstrackedContext = exports.Progress_pointsContext = exports.Bool_labelContext = exports.TitleContext = exports.HintContext = exports.InstructionContext = exports.Dateprop_chainedContext = exports.DatepropContext = exports.ProgressContext = exports.ReferenceContext = exports.Bracketed_textContext = exports.ExampleContext = exports.AnglerefContext = exports.LeadContext = exports.ItemContext = exports.UrlContext = exports.TelephoneContext = exports.Resource_chainedContext = exports.Op_audio_formatContext = exports.Audio_formatContext = exports.Audio_oneContext = exports.AudiobitContext = exports.Image_chained4matchContext = exports.Image_chainedContext = exports.Op_image_formatContext = exports.Image_oneContext = exports.ImagebitContext = exports.Video_oneContext = exports.VideobitContext = exports.Stillimg_oneContext = exports.StillimagefilmbitContext = exports.AppbitContext = exports.WebsitebitContext = exports.DocumentbitContext = exports.ArticlebitContext = exports.Op_stillimagefilm_formatContext = exports.Op_video_formatContext = exports.Op_website_formatContext = exports.Op_app_formatContext = exports.Op_document_formatContext = exports.Op_article_formatContext = exports.Stillimagefilm_formatContext = exports.Website_formatContext = exports.App_formatContext = exports.Document_formatContext = exports.Article_formatContext = exports.Video_formatContext = exports.Image_formatContext = exports.Format2Context = exports.Resource_format_extraContext = exports.Resource_formatContext = exports.FormatContext = exports.AtpointContext = exports.Self_assess_s_and_wContext = exports.Self_assessmentContext = exports.Survey_anonymous_1Context = exports.Survey_anonymousContext = exports.Survey_1Context = exports.SurveyContext = exports.Bullet_itemContext = exports.RatingContext = exports.Bot_choiceContext = exports.Bot_interviewContext = exports.MessageContext = exports.Workbook_articleContext = exports.Notebook_articleContext = exports.Book_articleContext = exports.Blog_articleContext = exports.Newspaper_articleContext = exports.Vendor_amcharts_5_chartContext = exports.FeaturedContext = exports.ConclusionContext = exports.Release_noteContext = exports.Chapter_subject_matterContext = exports.Browser_imageContext = exports.PhotoContext = exports.Focus_imageContext = exports.ScreenshotContext = exports.Question1Context = exports.Card1Context = exports.CodeContext = exports.Book_epigraphContext = exports.Book_summaryContext = exports.Book_read_moreContext = exports.Book_coming_soonContext = exports.Book_request_for_a_book_reviewContext = exports.Book_auther_bioContext = exports.Book_teaserContext = exports.Book_copyright_permissionsContext = exports.Book_notesContext = exports.Book_endnotesContext = exports.Book_reference_listContext = exports.Book_bibliographyContext = exports.Book_list_of_contributorsContext = exports.Book_acknowledgmentsContext = exports.Book_addendumContext = exports.Book_appendixContext = exports.Book_postscriptContext = exports.Book_afterwordContext = exports.Book_conclusionContext = exports.Book_inciting_incidentContext = exports.Book_introductionContext = exports.Book_epilogueContext = exports.Book_prologueContext = exports.Book_prefaceContext = exports.Book_forwordContext = exports.Book_dedicationContext = exports.Book_copyrightContext = exports.Book_titleContext = exports.Book_frontispieceContext = exports.Bit_editorialContext = exports.Bit_appLinkContext = exports.Bit_documentDownloadContext = exports.Bit_documentEmbedContext = exports.Bit_documentLinkContext = exports.Bit_documentContext = exports.Bit_websiteLinkContext = exports.Bit_stillImageFilmEmbedContext = exports.Bit_stillImageFilmLinkContext = exports.Bit_stillImageFilmContext = exports.Bit_videoLandscapeContext = exports.Bit_videoPortraitContext = exports.Bit_videoEmbedContext = exports.Bit_videoLinkContext = exports.Bit_videoContext = exports.Bit_audioEmbedContext = exports.Bit_audioLinkContext = exports.Bit_audioContext = exports.Bit_imageSuperWideContext = exports.Bit_imagePrototypeContext = exports.Bit_imageZoomContext = exports.Bit_imageLinkContext = exports.Bit_imageContext = exports.ScormContext = exports.Vendor_padlet_embedContext = exports.ExamplebitContext = exports.HintbitContext = exports.FootnoteContext = exports.QuoteContext = exports.StickynoteContext = exports.SidenoteContext = exports.BugContext = exports.DangerContext = exports.HelpContext = exports.RemarkContext = exports.WarningContext = exports.InfoContext = exports.NoteContext = exports.PageContext = exports.LearningpathdetailsContext = exports.WbtcontinueContext = exports.ButtoncopytextContext = exports.Sample_solutionContext = exports.DetailsContext = exports.StatementContext = exports.ArticleContext = exports.AssignmentContext = exports.Preparation_noteContext = exports.Record_audioContext = exports.Take_pictureContext = exports.Take_audioContext = exports.Mark_colorContext = exports.Mark_textContext = exports.Mark_Context = exports.CorrsContext = exports.CorrectionContext = exports.ResourceContext = exports.PartansContext = exports.Ml_exampleContext = exports.EssayContext = exports.Choice_starContext = exports.Choice_minusContext = exports.Choice_plusContext = exports.Single_gapContext = exports.GapContext = exports.BitElemContext = exports.FooterContext = exports.FeedbackContext = exports.BoactsContext = exports.Bo_actionsContext = exports.Bot_actionContext = exports.Bot_action_rating_starsContext = exports.Bot_action_rating_numberContext = exports.Bot_action_true_falseContext = exports.Bot_action_responseContext = exports.Bot_action_remindContext = exports.Bot_action_saveContext = exports.Bot_action_announceContext = exports.Bot_action_sendContext = exports.Learning_path_classroom_eventContext = exports.Learning_path_classroom_trainingContext = exports.Learning_path_external_linkContext = exports.Learning_path_bot_trainingContext = exports.Learning_path_feedbackContext = exports.Learning_path_closingContext = exports.Learning_path_learning_goalContext = exports.Learning_path_video_callContext = exports.Learning_path_signContext = exports.Learning_path_bookContext = exports.Learning_path_stepContext = exports.Learning_path_ltiContext = exports.Group_diedContext = exports.Group_bornContext = exports.Title_etcContext = exports.Bit_aliasContext = exports.Internal_linkContext = exports.SummaryContext = exports.TocContext = exports.ChapterContext = exports.BookContext = exports.BitContext = exports.Bitmark_Context = exports.BitmarkContext = exports.bitmarkParser = void 0;
const ATN_1 = require("antlr4ts/atn/ATN");
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const FailedPredicateException_1 = require("antlr4ts/FailedPredicateException");
const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
const Parser_1 = require("antlr4ts/Parser");
const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
const RecognitionException_1 = require("antlr4ts/RecognitionException");
const Token_1 = require("antlr4ts/Token");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = require("antlr4ts/misc/Utils");
class bitmarkParser extends Parser_1.Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator_1.ParserATNSimulator(bitmarkParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return bitmarkParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "bitmarkParser.g4"; }
    // @Override
    get ruleNames() { return bitmarkParser.ruleNames; }
    // @Override
    get serializedATN() { return bitmarkParser._serializedATN; }
    createFailedPredicateException(predicate, message) {
        return new FailedPredicateException_1.FailedPredicateException(this, predicate, message);
    }
    // @RuleVersion(0)
    bitmark() {
        let _localctx = new BitmarkContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, bitmarkParser.RULE_bitmark);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 465;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 452;
                            this.bitmark_();
                            this.state = 462;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 456;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.S) {
                                                {
                                                    {
                                                        this.state = 453;
                                                        this.match(bitmarkParser.S);
                                                    }
                                                }
                                                this.state = 458;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 459;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                }
                                this.state = 464;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
                            }
                        }
                    }
                    this.state = 467;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitBotint) | (1 << bitmarkParser.BitSelfassess) | (1 << bitmarkParser.BitRating))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)) | (1 << (bitmarkParser.BitLearningPathBotTraining - 32)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 32)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 32)) | (1 << (bitmarkParser.BitLearningPathClassroomEvent - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitImagePrototype - 64)) | (1 << (bitmarkParser.BitImageSuperWide - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitVideoPortrait - 64)) | (1 << (bitmarkParser.BitVideoLandscape - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)) | (1 << (bitmarkParser.BitEditorial - 64)) | (1 << (bitmarkParser.BitBookFrontispiece - 64)) | (1 << (bitmarkParser.BitBookTitle - 64)) | (1 << (bitmarkParser.BitBookCopyright - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitBookDedication - 96)) | (1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)) | (1 << (bitmarkParser.BitQuestion1 - 96)) | (1 << (bitmarkParser.BitScreenshot - 96)) | (1 << (bitmarkParser.BitFocusImage - 96)) | (1 << (bitmarkParser.BitPhoto - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.BitBrowserImage - 128)) | (1 << (bitmarkParser.BitBotActionResponse - 128)) | (1 << (bitmarkParser.BitBotActionTrueFalse - 128)) | (1 << (bitmarkParser.BitBotActionRatingNumber - 128)) | (1 << (bitmarkParser.BitBotActionRatingStars - 128)) | (1 << (bitmarkParser.BitChapterSubjectMatter - 128)) | (1 << (bitmarkParser.BitReleaseNote - 128)) | (1 << (bitmarkParser.BitConclusion - 128)) | (1 << (bitmarkParser.BitVendorAmcharts5Chart - 128)) | (1 << (bitmarkParser.BitFeatured - 128)) | (1 << (bitmarkParser.BitNewspaperArticle - 128)) | (1 << (bitmarkParser.BitBlogArticle - 128)) | (1 << (bitmarkParser.BitBookArticle - 128)) | (1 << (bitmarkParser.BitNotebookArticle - 128)) | (1 << (bitmarkParser.BitWorkbookArticle - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.COLON - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.AMP - 160)) | (1 << (bitmarkParser.Greater - 160)) | (1 << (bitmarkParser.Less - 160)) | (1 << (bitmarkParser.RightAngle - 160)) | (1 << (bitmarkParser.RightArrow - 160)) | (1 << (bitmarkParser.DBLEQ - 160)) | (1 << (bitmarkParser.QUOTE_INDEX - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.NOTBITMARK - 160)) | (1 << (bitmarkParser.ELIPSIS - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.BARSTRING - 160)))) !== 0) || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                this.state = 472;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 469;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 474;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 475;
                this.match(bitmarkParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bitmark_() {
        let _localctx = new Bitmark_Context(this._ctx, this.state);
        this.enterRule(_localctx, 2, bitmarkParser.RULE_bitmark_);
        try {
            this.state = 479;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.BitBook:
                case bitmarkParser.BitChapter:
                case bitmarkParser.BitToc:
                case bitmarkParser.BitSummary:
                case bitmarkParser.BitIntlink:
                case bitmarkParser.BitIntRef:
                case bitmarkParser.BitAlias:
                case bitmarkParser.BitGroups:
                case bitmarkParser.BitGroupt:
                case bitmarkParser.BitStatement:
                case bitmarkParser.BitDetails:
                case bitmarkParser.BitSampleSolution:
                case bitmarkParser.BitTakeAudio:
                case bitmarkParser.BitArticle:
                case bitmarkParser.BitPage:
                case bitmarkParser.BitEssay:
                case bitmarkParser.BitMessage:
                case bitmarkParser.BitCorrection:
                case bitmarkParser.BitMark:
                case bitmarkParser.BitTakepic:
                case bitmarkParser.BitRecaud:
                case bitmarkParser.BitPrepnote:
                case bitmarkParser.BitAssign:
                case bitmarkParser.BitBotint:
                case bitmarkParser.BitSelfassess:
                case bitmarkParser.BitRating:
                case bitmarkParser.BitSurvey:
                case bitmarkParser.BitSurvey1:
                case bitmarkParser.BitSurveyanon:
                case bitmarkParser.BitSurveyanon1:
                case bitmarkParser.BitNote:
                case bitmarkParser.BitInfo:
                case bitmarkParser.BitWarning:
                case bitmarkParser.BitRemark:
                case bitmarkParser.BitHint:
                case bitmarkParser.BitHelp:
                case bitmarkParser.BitDanger:
                case bitmarkParser.BitBug:
                case bitmarkParser.BitSidenote:
                case bitmarkParser.BitStickynote:
                case bitmarkParser.BitQuote:
                case bitmarkParser.BitFootnote:
                case bitmarkParser.BitExample:
                case bitmarkParser.BitButtonCopytext:
                case bitmarkParser.BitWbtContinue:
                case bitmarkParser.BitLearningPathDetails:
                case bitmarkParser.BitLearningPathLti:
                case bitmarkParser.BitLearningPathStep:
                case bitmarkParser.BitLearningPathBook:
                case bitmarkParser.BitLearningPathSign:
                case bitmarkParser.BitLearningPathVideoCall:
                case bitmarkParser.BitLearningPathLearningGoal:
                case bitmarkParser.BitLearningPathClosing:
                case bitmarkParser.BitLearningPathFeedback:
                case bitmarkParser.BitLearningPathBotTraining:
                case bitmarkParser.BitLearningPathExternalLink:
                case bitmarkParser.BitLearningPathClassroomTraining:
                case bitmarkParser.BitLearningPathClassroomEvent:
                case bitmarkParser.BitBotActionSend:
                case bitmarkParser.BitBotActionAnnounce:
                case bitmarkParser.BitBotActionSave:
                case bitmarkParser.BitBotActionRemind:
                case bitmarkParser.BitVendorPadletEmbed:
                case bitmarkParser.BitScorm:
                case bitmarkParser.BitImage:
                case bitmarkParser.BitImageLink:
                case bitmarkParser.BitImageZoom:
                case bitmarkParser.BitImagePrototype:
                case bitmarkParser.BitImageSuperWide:
                case bitmarkParser.BitAudio:
                case bitmarkParser.BitAudioLink:
                case bitmarkParser.BitAudioEmbed:
                case bitmarkParser.BitVideo:
                case bitmarkParser.BitVideoLink:
                case bitmarkParser.BitVideoEmbed:
                case bitmarkParser.BitVideoPortrait:
                case bitmarkParser.BitVideoLandscape:
                case bitmarkParser.BitStillImageFilm:
                case bitmarkParser.BitStillImageFilmLink:
                case bitmarkParser.BitStillImageFilmEmbed:
                case bitmarkParser.BitWebsiteLink:
                case bitmarkParser.BitDocument:
                case bitmarkParser.BitDocumentLink:
                case bitmarkParser.BitDocumentEmbed:
                case bitmarkParser.BitDocumentDownload:
                case bitmarkParser.BitAppLink:
                case bitmarkParser.BitEditorial:
                case bitmarkParser.BitBookFrontispiece:
                case bitmarkParser.BitBookTitle:
                case bitmarkParser.BitBookCopyright:
                case bitmarkParser.BitBookDedication:
                case bitmarkParser.BitBookForword:
                case bitmarkParser.BitBookPreface:
                case bitmarkParser.BitBookPrologue:
                case bitmarkParser.BitBookEpilogue:
                case bitmarkParser.BitBookIntroduction:
                case bitmarkParser.BitBookIncitingIncident:
                case bitmarkParser.BitBookConclusion:
                case bitmarkParser.BitBookAfterword:
                case bitmarkParser.BitBookPostscript:
                case bitmarkParser.BitBookappendix:
                case bitmarkParser.BitBookAddendum:
                case bitmarkParser.BitBookAcknowledgments:
                case bitmarkParser.BitBookListOfContributors:
                case bitmarkParser.BitBookBibliography:
                case bitmarkParser.BitBookReferenceList:
                case bitmarkParser.BitBookEndnotes:
                case bitmarkParser.BitBookNotes:
                case bitmarkParser.BitBookCopyrightPermissions:
                case bitmarkParser.BitBookTeaser:
                case bitmarkParser.BitBookAutherBio:
                case bitmarkParser.BitBookRequestForABookReview:
                case bitmarkParser.BitBookComingSoon:
                case bitmarkParser.BitBookReadMore:
                case bitmarkParser.BitBookSummary:
                case bitmarkParser.BitBookEpigraph:
                case bitmarkParser.BitCode:
                case bitmarkParser.BitCard1:
                case bitmarkParser.BitQuestion1:
                case bitmarkParser.BitScreenshot:
                case bitmarkParser.BitFocusImage:
                case bitmarkParser.BitPhoto:
                case bitmarkParser.BitBrowserImage:
                case bitmarkParser.BitBotActionResponse:
                case bitmarkParser.BitBotActionTrueFalse:
                case bitmarkParser.BitBotActionRatingNumber:
                case bitmarkParser.BitBotActionRatingStars:
                case bitmarkParser.BitChapterSubjectMatter:
                case bitmarkParser.BitReleaseNote:
                case bitmarkParser.BitConclusion:
                case bitmarkParser.BitVendorAmcharts5Chart:
                case bitmarkParser.BitFeatured:
                case bitmarkParser.BitNewspaperArticle:
                case bitmarkParser.BitBlogArticle:
                case bitmarkParser.BitBookArticle:
                case bitmarkParser.BitNotebookArticle:
                case bitmarkParser.BitWorkbookArticle:
                case bitmarkParser.OPDANGLE:
                case bitmarkParser.OPQ:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 477;
                        this.bit();
                    }
                    break;
                case bitmarkParser.S:
                case bitmarkParser.OPS:
                case bitmarkParser.COLON:
                case bitmarkParser.AMP:
                case bitmarkParser.Greater:
                case bitmarkParser.Less:
                case bitmarkParser.RightAngle:
                case bitmarkParser.RightArrow:
                case bitmarkParser.DBLEQ:
                case bitmarkParser.QUOTE_INDEX:
                case bitmarkParser.NUMERIC:
                case bitmarkParser.STRING:
                case bitmarkParser.NOTBITMARK:
                case bitmarkParser.ELIPSIS:
                case bitmarkParser.SENTENCE:
                case bitmarkParser.BARSTRING:
                case bitmarkParser.AmpAudio:
                case bitmarkParser.AmpImage:
                case bitmarkParser.AmpVideo:
                case bitmarkParser.AmpArticle:
                case bitmarkParser.AmpDocument:
                case bitmarkParser.AmpApp:
                case bitmarkParser.AmpWebsite:
                case bitmarkParser.AmpStillImageFilm:
                case bitmarkParser.AmpAudioLink:
                case bitmarkParser.AmpImageLink:
                case bitmarkParser.AmpVideoLink:
                case bitmarkParser.AmpArticleLink:
                case bitmarkParser.AmpDocumentLink:
                case bitmarkParser.AmpAppLink:
                case bitmarkParser.AmpWebsiteLink:
                case bitmarkParser.AmpStillImageFilmLink:
                case bitmarkParser.BitmarkMinus:
                case bitmarkParser.BitmarkPlus:
                case bitmarkParser.URL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 478;
                        this.lines();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit() {
        let _localctx = new BitContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, bitmarkParser.RULE_bit);
        try {
            this.state = 619;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.BitBook:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 481;
                        this.book();
                    }
                    break;
                case bitmarkParser.BitChapter:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 482;
                        this.chapter();
                    }
                    break;
                case bitmarkParser.BitSummary:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 483;
                        this.summary();
                    }
                    break;
                case bitmarkParser.BitToc:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 484;
                        this.toc();
                    }
                    break;
                case bitmarkParser.BitAlias:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 485;
                        this.bit_alias();
                    }
                    break;
                case bitmarkParser.BitIntlink:
                case bitmarkParser.BitIntRef:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 486;
                        this.internal_link();
                    }
                    break;
                case bitmarkParser.OPDANGLE:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 487;
                        this.anchor();
                    }
                    break;
                case bitmarkParser.BitGroups:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 488;
                        this.group_born();
                    }
                    break;
                case bitmarkParser.BitGroupt:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 489;
                        this.group_died();
                    }
                    break;
                case bitmarkParser.BitEssay:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 490;
                        this.essay();
                    }
                    break;
                case bitmarkParser.BitCorrection:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 491;
                        this.correction();
                    }
                    break;
                case bitmarkParser.BitMark:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 492;
                        this.mark_();
                    }
                    break;
                case bitmarkParser.BitTakepic:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 493;
                        this.take_picture();
                    }
                    break;
                case bitmarkParser.BitTakeAudio:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 494;
                        this.take_audio();
                    }
                    break;
                case bitmarkParser.BitRecaud:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 495;
                        this.record_audio();
                    }
                    break;
                case bitmarkParser.BitPrepnote:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 496;
                        this.preparation_note();
                    }
                    break;
                case bitmarkParser.BitAssign:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 497;
                        this.assignment();
                    }
                    break;
                case bitmarkParser.BitArticle:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 498;
                        this.article();
                    }
                    break;
                case bitmarkParser.BitStatement:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 499;
                        this.statement();
                    }
                    break;
                case bitmarkParser.BitDetails:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 500;
                        this.details();
                    }
                    break;
                case bitmarkParser.BitSampleSolution:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 501;
                        this.sample_solution();
                    }
                    break;
                case bitmarkParser.BitButtonCopytext:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 502;
                        this.buttoncopytext();
                    }
                    break;
                case bitmarkParser.BitWbtContinue:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 503;
                        this.wbtcontinue();
                    }
                    break;
                case bitmarkParser.BitLearningPathDetails:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 504;
                        this.learningpathdetails();
                    }
                    break;
                case bitmarkParser.BitNote:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 505;
                        this.note();
                    }
                    break;
                case bitmarkParser.BitInfo:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 506;
                        this.info();
                    }
                    break;
                case bitmarkParser.BitWarning:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 507;
                        this.warning();
                    }
                    break;
                case bitmarkParser.BitRemark:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 508;
                        this.remark();
                    }
                    break;
                case bitmarkParser.BitHint:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 509;
                        this.hintbit();
                    }
                    break;
                case bitmarkParser.BitHelp:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 510;
                        this.help();
                    }
                    break;
                case bitmarkParser.BitDanger:
                    this.enterOuterAlt(_localctx, 31);
                    {
                        this.state = 511;
                        this.danger();
                    }
                    break;
                case bitmarkParser.BitBug:
                    this.enterOuterAlt(_localctx, 32);
                    {
                        this.state = 512;
                        this.bug();
                    }
                    break;
                case bitmarkParser.BitSidenote:
                    this.enterOuterAlt(_localctx, 33);
                    {
                        this.state = 513;
                        this.sidenote();
                    }
                    break;
                case bitmarkParser.BitStickynote:
                    this.enterOuterAlt(_localctx, 34);
                    {
                        this.state = 514;
                        this.stickynote();
                    }
                    break;
                case bitmarkParser.BitQuote:
                    this.enterOuterAlt(_localctx, 35);
                    {
                        this.state = 515;
                        this.quote();
                    }
                    break;
                case bitmarkParser.BitFootnote:
                    this.enterOuterAlt(_localctx, 36);
                    {
                        this.state = 516;
                        this.footnote();
                    }
                    break;
                case bitmarkParser.BitExample:
                    this.enterOuterAlt(_localctx, 37);
                    {
                        this.state = 517;
                        this.examplebit();
                    }
                    break;
                case bitmarkParser.BitPage:
                    this.enterOuterAlt(_localctx, 38);
                    {
                        this.state = 518;
                        this.page();
                    }
                    break;
                case bitmarkParser.BitMessage:
                    this.enterOuterAlt(_localctx, 39);
                    {
                        this.state = 519;
                        this.message();
                    }
                    break;
                case bitmarkParser.BitBotint:
                    this.enterOuterAlt(_localctx, 40);
                    {
                        this.state = 520;
                        this.bot_interview();
                    }
                    break;
                case bitmarkParser.BitSelfassess:
                    this.enterOuterAlt(_localctx, 41);
                    {
                        this.state = 521;
                        this.self_assessment();
                    }
                    break;
                case bitmarkParser.BitRating:
                    this.enterOuterAlt(_localctx, 42);
                    {
                        this.state = 522;
                        this.rating();
                    }
                    break;
                case bitmarkParser.BitSurvey:
                    this.enterOuterAlt(_localctx, 43);
                    {
                        this.state = 523;
                        this.survey();
                    }
                    break;
                case bitmarkParser.BitSurvey1:
                    this.enterOuterAlt(_localctx, 44);
                    {
                        this.state = 524;
                        this.survey_1();
                    }
                    break;
                case bitmarkParser.BitSurveyanon:
                    this.enterOuterAlt(_localctx, 45);
                    {
                        this.state = 525;
                        this.survey_anonymous();
                    }
                    break;
                case bitmarkParser.BitSurveyanon1:
                    this.enterOuterAlt(_localctx, 46);
                    {
                        this.state = 526;
                        this.survey_anonymous_1();
                    }
                    break;
                case bitmarkParser.OPQ:
                    this.enterOuterAlt(_localctx, 47);
                    {
                        this.state = 527;
                        this.hint();
                    }
                    break;
                case bitmarkParser.BitVendorPadletEmbed:
                    this.enterOuterAlt(_localctx, 48);
                    {
                        this.state = 528;
                        this.vendor_padlet_embed();
                    }
                    break;
                case bitmarkParser.BitScorm:
                    this.enterOuterAlt(_localctx, 49);
                    {
                        this.state = 529;
                        this.scorm();
                    }
                    break;
                case bitmarkParser.BitLearningPathLti:
                    this.enterOuterAlt(_localctx, 50);
                    {
                        this.state = 530;
                        this.learning_path_lti();
                    }
                    break;
                case bitmarkParser.BitLearningPathStep:
                    this.enterOuterAlt(_localctx, 51);
                    {
                        this.state = 531;
                        this.learning_path_step();
                    }
                    break;
                case bitmarkParser.BitLearningPathBook:
                    this.enterOuterAlt(_localctx, 52);
                    {
                        this.state = 532;
                        this.learning_path_book();
                    }
                    break;
                case bitmarkParser.BitLearningPathSign:
                    this.enterOuterAlt(_localctx, 53);
                    {
                        this.state = 533;
                        this.learning_path_sign();
                    }
                    break;
                case bitmarkParser.BitLearningPathVideoCall:
                    this.enterOuterAlt(_localctx, 54);
                    {
                        this.state = 534;
                        this.learning_path_video_call();
                    }
                    break;
                case bitmarkParser.BitLearningPathLearningGoal:
                    this.enterOuterAlt(_localctx, 55);
                    {
                        this.state = 535;
                        this.learning_path_learning_goal();
                    }
                    break;
                case bitmarkParser.BitLearningPathClosing:
                    this.enterOuterAlt(_localctx, 56);
                    {
                        this.state = 536;
                        this.learning_path_closing();
                    }
                    break;
                case bitmarkParser.BitLearningPathFeedback:
                    this.enterOuterAlt(_localctx, 57);
                    {
                        this.state = 537;
                        this.learning_path_feedback();
                    }
                    break;
                case bitmarkParser.BitLearningPathBotTraining:
                    this.enterOuterAlt(_localctx, 58);
                    {
                        this.state = 538;
                        this.learning_path_bot_training();
                    }
                    break;
                case bitmarkParser.BitLearningPathExternalLink:
                    this.enterOuterAlt(_localctx, 59);
                    {
                        this.state = 539;
                        this.learning_path_external_link();
                    }
                    break;
                case bitmarkParser.BitLearningPathClassroomTraining:
                    this.enterOuterAlt(_localctx, 60);
                    {
                        this.state = 540;
                        this.learning_path_classroom_training();
                    }
                    break;
                case bitmarkParser.BitLearningPathClassroomEvent:
                    this.enterOuterAlt(_localctx, 61);
                    {
                        this.state = 541;
                        this.learning_path_classroom_event();
                    }
                    break;
                case bitmarkParser.BitBotActionSend:
                    this.enterOuterAlt(_localctx, 62);
                    {
                        this.state = 542;
                        this.bot_action_send();
                    }
                    break;
                case bitmarkParser.BitBotActionAnnounce:
                    this.enterOuterAlt(_localctx, 63);
                    {
                        this.state = 543;
                        this.bot_action_announce();
                    }
                    break;
                case bitmarkParser.BitBotActionSave:
                    this.enterOuterAlt(_localctx, 64);
                    {
                        this.state = 544;
                        this.bot_action_save();
                    }
                    break;
                case bitmarkParser.BitBotActionRemind:
                    this.enterOuterAlt(_localctx, 65);
                    {
                        this.state = 545;
                        this.bot_action_remind();
                    }
                    break;
                case bitmarkParser.BitBotActionResponse:
                    this.enterOuterAlt(_localctx, 66);
                    {
                        this.state = 546;
                        this.bot_action_response();
                    }
                    break;
                case bitmarkParser.BitBotActionTrueFalse:
                    this.enterOuterAlt(_localctx, 67);
                    {
                        this.state = 547;
                        this.bot_action_true_false();
                    }
                    break;
                case bitmarkParser.BitBotActionRatingNumber:
                    this.enterOuterAlt(_localctx, 68);
                    {
                        this.state = 548;
                        this.bot_action_rating_number();
                    }
                    break;
                case bitmarkParser.BitBotActionRatingStars:
                    this.enterOuterAlt(_localctx, 69);
                    {
                        this.state = 549;
                        this.bot_action_rating_stars();
                    }
                    break;
                case bitmarkParser.BitImage:
                    this.enterOuterAlt(_localctx, 70);
                    {
                        this.state = 550;
                        this.bit_image();
                    }
                    break;
                case bitmarkParser.BitImageLink:
                    this.enterOuterAlt(_localctx, 71);
                    {
                        this.state = 551;
                        this.bit_imageLink();
                    }
                    break;
                case bitmarkParser.BitImageZoom:
                    this.enterOuterAlt(_localctx, 72);
                    {
                        this.state = 552;
                        this.bit_imageZoom();
                    }
                    break;
                case bitmarkParser.BitImagePrototype:
                    this.enterOuterAlt(_localctx, 73);
                    {
                        this.state = 553;
                        this.bit_imagePrototype();
                    }
                    break;
                case bitmarkParser.BitImageSuperWide:
                    this.enterOuterAlt(_localctx, 74);
                    {
                        this.state = 554;
                        this.bit_imageSuperWide();
                    }
                    break;
                case bitmarkParser.BitAudio:
                    this.enterOuterAlt(_localctx, 75);
                    {
                        this.state = 555;
                        this.bit_audio();
                    }
                    break;
                case bitmarkParser.BitAudioLink:
                    this.enterOuterAlt(_localctx, 76);
                    {
                        this.state = 556;
                        this.bit_audioLink();
                    }
                    break;
                case bitmarkParser.BitAudioEmbed:
                    this.enterOuterAlt(_localctx, 77);
                    {
                        this.state = 557;
                        this.bit_audioEmbed();
                    }
                    break;
                case bitmarkParser.BitVideo:
                    this.enterOuterAlt(_localctx, 78);
                    {
                        this.state = 558;
                        this.bit_video();
                    }
                    break;
                case bitmarkParser.BitVideoLink:
                    this.enterOuterAlt(_localctx, 79);
                    {
                        this.state = 559;
                        this.bit_videoLink();
                    }
                    break;
                case bitmarkParser.BitVideoEmbed:
                    this.enterOuterAlt(_localctx, 80);
                    {
                        this.state = 560;
                        this.bit_videoEmbed();
                    }
                    break;
                case bitmarkParser.BitVideoPortrait:
                    this.enterOuterAlt(_localctx, 81);
                    {
                        this.state = 561;
                        this.bit_videoPortrait();
                    }
                    break;
                case bitmarkParser.BitVideoLandscape:
                    this.enterOuterAlt(_localctx, 82);
                    {
                        this.state = 562;
                        this.bit_videoLandscape();
                    }
                    break;
                case bitmarkParser.BitStillImageFilm:
                    this.enterOuterAlt(_localctx, 83);
                    {
                        this.state = 563;
                        this.bit_stillImageFilm();
                    }
                    break;
                case bitmarkParser.BitStillImageFilmLink:
                    this.enterOuterAlt(_localctx, 84);
                    {
                        this.state = 564;
                        this.bit_stillImageFilmLink();
                    }
                    break;
                case bitmarkParser.BitStillImageFilmEmbed:
                    this.enterOuterAlt(_localctx, 85);
                    {
                        this.state = 565;
                        this.bit_stillImageFilmEmbed();
                    }
                    break;
                case bitmarkParser.BitDocument:
                    this.enterOuterAlt(_localctx, 86);
                    {
                        this.state = 566;
                        this.bit_document();
                    }
                    break;
                case bitmarkParser.BitDocumentLink:
                    this.enterOuterAlt(_localctx, 87);
                    {
                        this.state = 567;
                        this.bit_documentLink();
                    }
                    break;
                case bitmarkParser.BitDocumentEmbed:
                    this.enterOuterAlt(_localctx, 88);
                    {
                        this.state = 568;
                        this.bit_documentEmbed();
                    }
                    break;
                case bitmarkParser.BitDocumentDownload:
                    this.enterOuterAlt(_localctx, 89);
                    {
                        this.state = 569;
                        this.bit_documentDownload();
                    }
                    break;
                case bitmarkParser.BitWebsiteLink:
                    this.enterOuterAlt(_localctx, 90);
                    {
                        this.state = 570;
                        this.bit_websiteLink();
                    }
                    break;
                case bitmarkParser.BitAppLink:
                    this.enterOuterAlt(_localctx, 91);
                    {
                        this.state = 571;
                        this.bit_appLink();
                    }
                    break;
                case bitmarkParser.BitEditorial:
                    this.enterOuterAlt(_localctx, 92);
                    {
                        this.state = 572;
                        this.bit_editorial();
                    }
                    break;
                case bitmarkParser.BitBookFrontispiece:
                    this.enterOuterAlt(_localctx, 93);
                    {
                        this.state = 573;
                        this.book_frontispiece();
                    }
                    break;
                case bitmarkParser.BitBookTitle:
                    this.enterOuterAlt(_localctx, 94);
                    {
                        this.state = 574;
                        this.book_title();
                    }
                    break;
                case bitmarkParser.BitBookCopyright:
                    this.enterOuterAlt(_localctx, 95);
                    {
                        this.state = 575;
                        this.book_copyright();
                    }
                    break;
                case bitmarkParser.BitBookDedication:
                    this.enterOuterAlt(_localctx, 96);
                    {
                        this.state = 576;
                        this.book_dedication();
                    }
                    break;
                case bitmarkParser.BitBookForword:
                    this.enterOuterAlt(_localctx, 97);
                    {
                        this.state = 577;
                        this.book_forword();
                    }
                    break;
                case bitmarkParser.BitBookPreface:
                    this.enterOuterAlt(_localctx, 98);
                    {
                        this.state = 578;
                        this.book_preface();
                    }
                    break;
                case bitmarkParser.BitBookPrologue:
                    this.enterOuterAlt(_localctx, 99);
                    {
                        this.state = 579;
                        this.book_prologue();
                    }
                    break;
                case bitmarkParser.BitBookEpilogue:
                    this.enterOuterAlt(_localctx, 100);
                    {
                        this.state = 580;
                        this.book_epilogue();
                    }
                    break;
                case bitmarkParser.BitBookIntroduction:
                    this.enterOuterAlt(_localctx, 101);
                    {
                        this.state = 581;
                        this.book_introduction();
                    }
                    break;
                case bitmarkParser.BitBookIncitingIncident:
                    this.enterOuterAlt(_localctx, 102);
                    {
                        this.state = 582;
                        this.book_inciting_incident();
                    }
                    break;
                case bitmarkParser.BitBookConclusion:
                    this.enterOuterAlt(_localctx, 103);
                    {
                        this.state = 583;
                        this.book_conclusion();
                    }
                    break;
                case bitmarkParser.BitBookAfterword:
                    this.enterOuterAlt(_localctx, 104);
                    {
                        this.state = 584;
                        this.book_afterword();
                    }
                    break;
                case bitmarkParser.BitBookPostscript:
                    this.enterOuterAlt(_localctx, 105);
                    {
                        this.state = 585;
                        this.book_postscript();
                    }
                    break;
                case bitmarkParser.BitBookappendix:
                    this.enterOuterAlt(_localctx, 106);
                    {
                        this.state = 586;
                        this.book_appendix();
                    }
                    break;
                case bitmarkParser.BitBookAddendum:
                    this.enterOuterAlt(_localctx, 107);
                    {
                        this.state = 587;
                        this.book_addendum();
                    }
                    break;
                case bitmarkParser.BitBookAcknowledgments:
                    this.enterOuterAlt(_localctx, 108);
                    {
                        this.state = 588;
                        this.book_acknowledgments();
                    }
                    break;
                case bitmarkParser.BitBookListOfContributors:
                    this.enterOuterAlt(_localctx, 109);
                    {
                        this.state = 589;
                        this.book_list_of_contributors();
                    }
                    break;
                case bitmarkParser.BitBookBibliography:
                    this.enterOuterAlt(_localctx, 110);
                    {
                        this.state = 590;
                        this.book_bibliography();
                    }
                    break;
                case bitmarkParser.BitBookReferenceList:
                    this.enterOuterAlt(_localctx, 111);
                    {
                        this.state = 591;
                        this.book_reference_list();
                    }
                    break;
                case bitmarkParser.BitBookEndnotes:
                    this.enterOuterAlt(_localctx, 112);
                    {
                        this.state = 592;
                        this.book_endnotes();
                    }
                    break;
                case bitmarkParser.BitBookNotes:
                    this.enterOuterAlt(_localctx, 113);
                    {
                        this.state = 593;
                        this.book_notes();
                    }
                    break;
                case bitmarkParser.BitBookCopyrightPermissions:
                    this.enterOuterAlt(_localctx, 114);
                    {
                        this.state = 594;
                        this.book_copyright_permissions();
                    }
                    break;
                case bitmarkParser.BitBookTeaser:
                    this.enterOuterAlt(_localctx, 115);
                    {
                        this.state = 595;
                        this.book_teaser();
                    }
                    break;
                case bitmarkParser.BitBookAutherBio:
                    this.enterOuterAlt(_localctx, 116);
                    {
                        this.state = 596;
                        this.book_auther_bio();
                    }
                    break;
                case bitmarkParser.BitBookRequestForABookReview:
                    this.enterOuterAlt(_localctx, 117);
                    {
                        this.state = 597;
                        this.book_request_for_a_book_review();
                    }
                    break;
                case bitmarkParser.BitBookComingSoon:
                    this.enterOuterAlt(_localctx, 118);
                    {
                        this.state = 598;
                        this.book_coming_soon();
                    }
                    break;
                case bitmarkParser.BitBookReadMore:
                    this.enterOuterAlt(_localctx, 119);
                    {
                        this.state = 599;
                        this.book_read_more();
                    }
                    break;
                case bitmarkParser.BitBookSummary:
                    this.enterOuterAlt(_localctx, 120);
                    {
                        this.state = 600;
                        this.book_summary();
                    }
                    break;
                case bitmarkParser.BitBookEpigraph:
                    this.enterOuterAlt(_localctx, 121);
                    {
                        this.state = 601;
                        this.book_epigraph();
                    }
                    break;
                case bitmarkParser.BitCode:
                    this.enterOuterAlt(_localctx, 122);
                    {
                        this.state = 602;
                        this.code();
                    }
                    break;
                case bitmarkParser.BitCard1:
                    this.enterOuterAlt(_localctx, 123);
                    {
                        this.state = 603;
                        this.card1();
                    }
                    break;
                case bitmarkParser.BitQuestion1:
                    this.enterOuterAlt(_localctx, 124);
                    {
                        this.state = 604;
                        this.question1();
                    }
                    break;
                case bitmarkParser.BitScreenshot:
                    this.enterOuterAlt(_localctx, 125);
                    {
                        this.state = 605;
                        this.screenshot();
                    }
                    break;
                case bitmarkParser.BitFocusImage:
                    this.enterOuterAlt(_localctx, 126);
                    {
                        this.state = 606;
                        this.focus_image();
                    }
                    break;
                case bitmarkParser.BitPhoto:
                    this.enterOuterAlt(_localctx, 127);
                    {
                        this.state = 607;
                        this.photo();
                    }
                    break;
                case bitmarkParser.BitBrowserImage:
                    this.enterOuterAlt(_localctx, 128);
                    {
                        this.state = 608;
                        this.browser_image();
                    }
                    break;
                case bitmarkParser.BitChapterSubjectMatter:
                    this.enterOuterAlt(_localctx, 129);
                    {
                        this.state = 609;
                        this.chapter_subject_matter();
                    }
                    break;
                case bitmarkParser.BitReleaseNote:
                    this.enterOuterAlt(_localctx, 130);
                    {
                        this.state = 610;
                        this.release_note();
                    }
                    break;
                case bitmarkParser.BitConclusion:
                    this.enterOuterAlt(_localctx, 131);
                    {
                        this.state = 611;
                        this.conclusion();
                    }
                    break;
                case bitmarkParser.BitFeatured:
                    this.enterOuterAlt(_localctx, 132);
                    {
                        this.state = 612;
                        this.featured();
                    }
                    break;
                case bitmarkParser.BitVendorAmcharts5Chart:
                    this.enterOuterAlt(_localctx, 133);
                    {
                        this.state = 613;
                        this.vendor_amcharts_5_chart();
                    }
                    break;
                case bitmarkParser.BitNewspaperArticle:
                    this.enterOuterAlt(_localctx, 134);
                    {
                        this.state = 614;
                        this.newspaper_article();
                    }
                    break;
                case bitmarkParser.BitBlogArticle:
                    this.enterOuterAlt(_localctx, 135);
                    {
                        this.state = 615;
                        this.blog_article();
                    }
                    break;
                case bitmarkParser.BitBookArticle:
                    this.enterOuterAlt(_localctx, 136);
                    {
                        this.state = 616;
                        this.book_article();
                    }
                    break;
                case bitmarkParser.BitNotebookArticle:
                    this.enterOuterAlt(_localctx, 137);
                    {
                        this.state = 617;
                        this.notebook_article();
                    }
                    break;
                case bitmarkParser.BitWorkbookArticle:
                    this.enterOuterAlt(_localctx, 138);
                    {
                        this.state = 618;
                        this.workbook_article();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book() {
        let _localctx = new BookContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, bitmarkParser.RULE_book);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 621;
                this.match(bitmarkParser.BitBook);
                this.state = 623;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
                    case 1:
                        {
                            this.state = 622;
                            this.format();
                        }
                        break;
                }
                this.state = 625;
                this.match(bitmarkParser.CL);
                this.state = 633;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 629;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 626;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 631;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 632;
                                    this.bitElem();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 635;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    chapter() {
        let _localctx = new ChapterContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, bitmarkParser.RULE_chapter);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 637;
                this.match(bitmarkParser.BitChapter);
                this.state = 639;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 9, this._ctx)) {
                    case 1:
                        {
                            this.state = 638;
                            this.format();
                        }
                        break;
                }
                this.state = 641;
                this.match(bitmarkParser.CL);
                this.state = 645;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 642;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 647;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 651;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 11, this._ctx)) {
                    case 1:
                        {
                            this.state = 648;
                            this.anchor();
                            this.state = 649;
                            this.match(bitmarkParser.NL);
                        }
                        break;
                }
                this.state = 653;
                this.resource();
                this.state = 663;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 657;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 654;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 659;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 660;
                                this.resource();
                            }
                        }
                    }
                    this.state = 665;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    toc() {
        let _localctx = new TocContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, bitmarkParser.RULE_toc);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 666;
                this.match(bitmarkParser.BitToc);
                this.state = 668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                    {
                        this.state = 667;
                        this.s_and_w();
                    }
                }
                this.state = 670;
                this.match(bitmarkParser.CL);
                this.state = 671;
                this.match(bitmarkParser.NL);
                this.state = 675;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPA || _la === bitmarkParser.OpAtCopyright) {
                    {
                        this.state = 672;
                        this.atdef();
                        this.state = 673;
                        this.match(bitmarkParser.NL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    summary() {
        let _localctx = new SummaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, bitmarkParser.RULE_summary);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 677;
                this.match(bitmarkParser.BitSummary);
                this.state = 678;
                this.match(bitmarkParser.CL);
                this.state = 682;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 679;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 684;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
                }
                this.state = 685;
                this.title_etc();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    internal_link() {
        let _localctx = new Internal_linkContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, bitmarkParser.RULE_internal_link);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 687;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.BitIntlink || _la === bitmarkParser.BitIntRef)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 689;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
                    {
                        this.state = 688;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 691;
                this.match(bitmarkParser.CL);
                this.state = 701;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 695;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 692;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 697;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 698;
                                this.bitElem();
                            }
                        }
                    }
                    this.state = 703;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_alias() {
        let _localctx = new Bit_aliasContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, bitmarkParser.RULE_bit_alias);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 704;
                this.match(bitmarkParser.BitAlias);
                this.state = 705;
                this.match(bitmarkParser.CL);
                this.state = 706;
                this.angleref();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    title_etc() {
        let _localctx = new Title_etcContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, bitmarkParser.RULE_title_etc);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 722;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 709;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === bitmarkParser.NL) {
                                    {
                                        this.state = 708;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 718;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.OPHASH:
                                        {
                                            this.state = 711;
                                            this.title();
                                        }
                                        break;
                                    case bitmarkParser.OPA:
                                    case bitmarkParser.OpAtCopyright:
                                        {
                                            this.state = 712;
                                            this.atdef();
                                        }
                                        break;
                                    case bitmarkParser.OPC:
                                        {
                                            this.state = 713;
                                            this.item();
                                        }
                                        break;
                                    case bitmarkParser.OPB:
                                        {
                                            this.state = 714;
                                            this.instruction();
                                        }
                                        break;
                                    case bitmarkParser.OPRANGLES:
                                    case bitmarkParser.OPRANGLEL:
                                        {
                                            this.state = 715;
                                            this.angleref();
                                        }
                                        break;
                                    case bitmarkParser.OPDANGLE:
                                        {
                                            this.state = 716;
                                            this.anchor();
                                        }
                                        break;
                                    case bitmarkParser.AtProgress:
                                        {
                                            this.state = 717;
                                            this.progress();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                        }
                    }
                    this.state = 724;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    group_born() {
        let _localctx = new Group_bornContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, bitmarkParser.RULE_group_born);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 725;
                this.match(bitmarkParser.BitGroups);
                this.state = 726;
                this.match(bitmarkParser.CL);
                this.state = 736;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 727;
                                    this.match(bitmarkParser.NL);
                                    this.state = 728;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 731;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            this.state = 731;
                                            this._errHandler.sync(this);
                                            switch (this.interpreter.adaptivePredict(this._input, 23, this._ctx)) {
                                                case 1:
                                                    {
                                                        this.state = 729;
                                                        this.s_and_w();
                                                    }
                                                    break;
                                                case 2:
                                                    {
                                                        this.state = 730;
                                                        this.match(bitmarkParser.COLON);
                                                    }
                                                    break;
                                            }
                                        }
                                        this.state = 733;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                                    this.state = 735;
                                    this.match(bitmarkParser.CL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 738;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 740;
                this.match(bitmarkParser.NL);
                this.state = 744;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 26, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 741;
                                this.lines();
                            }
                        }
                    }
                    this.state = 746;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 26, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    group_died() {
        let _localctx = new Group_diedContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, bitmarkParser.RULE_group_died);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 747;
                this.match(bitmarkParser.BitGroupt);
                this.state = 748;
                this.match(bitmarkParser.CL);
                this.state = 758;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 749;
                                    this.match(bitmarkParser.NL);
                                    this.state = 750;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.OPR || _la === bitmarkParser.OPHASH)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 753;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            this.state = 753;
                                            this._errHandler.sync(this);
                                            switch (this.interpreter.adaptivePredict(this._input, 27, this._ctx)) {
                                                case 1:
                                                    {
                                                        this.state = 751;
                                                        this.s_and_w();
                                                    }
                                                    break;
                                                case 2:
                                                    {
                                                        this.state = 752;
                                                        this.match(bitmarkParser.COLON);
                                                    }
                                                    break;
                                            }
                                        }
                                        this.state = 755;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                                    this.state = 757;
                                    this.match(bitmarkParser.CL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 760;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 29, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 762;
                this.match(bitmarkParser.NL);
                this.state = 766;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 763;
                                this.lines();
                            }
                        }
                    }
                    this.state = 768;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_lti() {
        let _localctx = new Learning_path_ltiContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, bitmarkParser.RULE_learning_path_lti);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 769;
                this.match(bitmarkParser.BitLearningPathLti);
                this.state = 770;
                this.format();
                this.state = 771;
                this.match(bitmarkParser.CL);
                this.state = 775;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 772;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 777;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 785;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 778;
                                    this.bitElem();
                                    this.state = 782;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 779;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 784;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 787;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_step() {
        let _localctx = new Learning_path_stepContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, bitmarkParser.RULE_learning_path_step);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 789;
                this.match(bitmarkParser.BitLearningPathStep);
                this.state = 790;
                this.format();
                this.state = 791;
                this.match(bitmarkParser.CL);
                this.state = 795;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 792;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 797;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 805;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 798;
                                    this.bitElem();
                                    this.state = 802;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 799;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 804;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 807;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_book() {
        let _localctx = new Learning_path_bookContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, bitmarkParser.RULE_learning_path_book);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 809;
                this.match(bitmarkParser.BitLearningPathBook);
                this.state = 810;
                this.format();
                this.state = 811;
                this.match(bitmarkParser.CL);
                this.state = 815;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 812;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 817;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 825;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 818;
                                    this.bitElem();
                                    this.state = 822;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 819;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 824;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 827;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 39, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_sign() {
        let _localctx = new Learning_path_signContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, bitmarkParser.RULE_learning_path_sign);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 829;
                this.match(bitmarkParser.BitLearningPathSign);
                this.state = 830;
                this.format();
                this.state = 831;
                this.match(bitmarkParser.CL);
                this.state = 835;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 832;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 837;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 845;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 838;
                                    this.bitElem();
                                    this.state = 842;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 839;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 844;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 847;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_video_call() {
        let _localctx = new Learning_path_video_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, bitmarkParser.RULE_learning_path_video_call);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 849;
                this.match(bitmarkParser.BitLearningPathVideoCall);
                this.state = 850;
                this.format();
                this.state = 851;
                this.match(bitmarkParser.CL);
                this.state = 855;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 852;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 857;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 865;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 858;
                                    this.bitElem();
                                    this.state = 862;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 859;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 864;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 867;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 45, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_learning_goal() {
        let _localctx = new Learning_path_learning_goalContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, bitmarkParser.RULE_learning_path_learning_goal);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 869;
                this.match(bitmarkParser.BitLearningPathLearningGoal);
                this.state = 870;
                this.format();
                this.state = 871;
                this.match(bitmarkParser.CL);
                this.state = 875;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 872;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 877;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 885;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 878;
                                    this.bitElem();
                                    this.state = 882;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 879;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 884;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 887;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_closing() {
        let _localctx = new Learning_path_closingContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, bitmarkParser.RULE_learning_path_closing);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 889;
                this.match(bitmarkParser.BitLearningPathClosing);
                this.state = 890;
                this.format();
                this.state = 891;
                this.match(bitmarkParser.CL);
                this.state = 895;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 892;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 897;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 905;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 898;
                                    this.bitElem();
                                    this.state = 902;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 899;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 904;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 907;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 51, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_feedback() {
        let _localctx = new Learning_path_feedbackContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, bitmarkParser.RULE_learning_path_feedback);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 909;
                this.match(bitmarkParser.BitLearningPathFeedback);
                this.state = 910;
                this.format();
                this.state = 911;
                this.match(bitmarkParser.CL);
                this.state = 915;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 912;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 917;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 925;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 918;
                                    this.bitElem();
                                    this.state = 922;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 919;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 924;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 927;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 54, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_bot_training() {
        let _localctx = new Learning_path_bot_trainingContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, bitmarkParser.RULE_learning_path_bot_training);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 929;
                this.match(bitmarkParser.BitLearningPathBotTraining);
                this.state = 930;
                this.format();
                this.state = 931;
                this.match(bitmarkParser.CL);
                this.state = 935;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 932;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 937;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 945;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 938;
                                    this.bitElem();
                                    this.state = 942;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 939;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 944;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 947;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 57, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_external_link() {
        let _localctx = new Learning_path_external_linkContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, bitmarkParser.RULE_learning_path_external_link);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 949;
                this.match(bitmarkParser.BitLearningPathExternalLink);
                this.state = 950;
                this.format();
                this.state = 951;
                this.match(bitmarkParser.CL);
                this.state = 955;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 952;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 957;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 965;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 958;
                                    this.bitElem();
                                    this.state = 962;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 959;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 964;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 967;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_classroom_training() {
        let _localctx = new Learning_path_classroom_trainingContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, bitmarkParser.RULE_learning_path_classroom_training);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 969;
                this.match(bitmarkParser.BitLearningPathClassroomTraining);
                this.state = 970;
                this.format();
                this.state = 971;
                this.match(bitmarkParser.CL);
                this.state = 975;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 972;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 977;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 985;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 978;
                                    this.bitElem();
                                    this.state = 982;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 979;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 984;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 987;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learning_path_classroom_event() {
        let _localctx = new Learning_path_classroom_eventContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, bitmarkParser.RULE_learning_path_classroom_event);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 989;
                this.match(bitmarkParser.BitLearningPathClassroomEvent);
                this.state = 990;
                this.format();
                this.state = 991;
                this.match(bitmarkParser.CL);
                this.state = 995;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 992;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 997;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1005;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 998;
                                    this.bitElem();
                                    this.state = 1002;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 999;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1004;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1007;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 66, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_send() {
        let _localctx = new Bot_action_sendContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, bitmarkParser.RULE_bot_action_send);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1009;
                this.match(bitmarkParser.BitBotActionSend);
                this.state = 1010;
                this.format();
                this.state = 1011;
                this.match(bitmarkParser.CL);
                this.state = 1015;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1012;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1017;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1025;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1018;
                                    this.bitElem();
                                    this.state = 1022;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1019;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1024;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1027;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 69, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_announce() {
        let _localctx = new Bot_action_announceContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, bitmarkParser.RULE_bot_action_announce);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1029;
                this.match(bitmarkParser.BitBotActionAnnounce);
                this.state = 1030;
                this.format();
                this.state = 1031;
                this.match(bitmarkParser.CL);
                this.state = 1035;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1032;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1037;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1045;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1038;
                                    this.bitElem();
                                    this.state = 1042;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1039;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1044;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1047;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 72, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_save() {
        let _localctx = new Bot_action_saveContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, bitmarkParser.RULE_bot_action_save);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1049;
                this.match(bitmarkParser.BitBotActionSave);
                this.state = 1050;
                this.format();
                this.state = 1051;
                this.match(bitmarkParser.CL);
                this.state = 1055;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1052;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1057;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1065;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1058;
                                    this.bitElem();
                                    this.state = 1062;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1059;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1064;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1067;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 75, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_remind() {
        let _localctx = new Bot_action_remindContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, bitmarkParser.RULE_bot_action_remind);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1069;
                this.match(bitmarkParser.BitBotActionRemind);
                this.state = 1070;
                this.format();
                this.state = 1071;
                this.match(bitmarkParser.CL);
                this.state = 1075;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1072;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1077;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1085;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1078;
                                    this.bitElem();
                                    this.state = 1082;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1079;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1084;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1087;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 78, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_response() {
        let _localctx = new Bot_action_responseContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, bitmarkParser.RULE_bot_action_response);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1089;
                this.match(bitmarkParser.BitBotActionResponse);
                this.state = 1090;
                this.format();
                this.state = 1091;
                this.match(bitmarkParser.CL);
                this.state = 1095;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1092;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1097;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1107;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (bitmarkParser.OPDOLL - 143)) | (1 << (bitmarkParser.OPRANGLES - 143)) | (1 << (bitmarkParser.OPRANGLEL - 143)) | (1 << (bitmarkParser.OPDANGLE - 143)) | (1 << (bitmarkParser.OPU - 143)) | (1 << (bitmarkParser.OPB - 143)) | (1 << (bitmarkParser.OPQ - 143)) | (1 << (bitmarkParser.OPA - 143)) | (1 << (bitmarkParser.OPS - 143)) | (1 << (bitmarkParser.OPHASH - 143)) | (1 << (bitmarkParser.OPC - 143)) | (1 << (bitmarkParser.COLON - 143)) | (1 << (bitmarkParser.AMP - 143)) | (1 << (bitmarkParser.Greater - 143)) | (1 << (bitmarkParser.Less - 143)) | (1 << (bitmarkParser.RightAngle - 143)) | (1 << (bitmarkParser.RightArrow - 143)) | (1 << (bitmarkParser.DBLEQ - 143)) | (1 << (bitmarkParser.QUOTE_INDEX - 143)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (bitmarkParser.DCANY - 175)) | (1 << (bitmarkParser.ArticleText - 175)) | (1 << (bitmarkParser.NUMERIC - 175)) | (1 << (bitmarkParser.STRING - 175)) | (1 << (bitmarkParser.NOTBITMARK - 175)) | (1 << (bitmarkParser.ELIPSIS - 175)) | (1 << (bitmarkParser.SENTENCE - 175)) | (1 << (bitmarkParser.BARSTRING - 175)) | (1 << (bitmarkParser.AtProgress - 175)) | (1 << (bitmarkParser.AtReference - 175)) | (1 << (bitmarkParser.AtProgressPoints - 175)) | (1 << (bitmarkParser.AtExampleWithStr - 175)) | (1 << (bitmarkParser.AtExamplecol - 175)) | (1 << (bitmarkParser.AtExamplecl - 175)) | (1 << (bitmarkParser.AtPartialAnswerS - 175)) | (1 << (bitmarkParser.AtPartialAnswer - 175)) | (1 << (bitmarkParser.AtLabeltrue - 175)) | (1 << (bitmarkParser.AtLabelfalse - 175)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (bitmarkParser.OpAtCopyright - 212)) | (1 << (bitmarkParser.OpAtIsTracked - 212)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 212)) | (1 << (bitmarkParser.AtDate - 212)) | (1 << (bitmarkParser.AmpAudio - 212)) | (1 << (bitmarkParser.AmpImage - 212)) | (1 << (bitmarkParser.AmpVideo - 212)) | (1 << (bitmarkParser.AmpArticle - 212)) | (1 << (bitmarkParser.AmpDocument - 212)) | (1 << (bitmarkParser.AmpApp - 212)) | (1 << (bitmarkParser.AmpWebsite - 212)) | (1 << (bitmarkParser.AmpStillImageFilm - 212)) | (1 << (bitmarkParser.OpAmpAudio - 212)) | (1 << (bitmarkParser.OpAmpImage - 212)) | (1 << (bitmarkParser.OpAmpImageZoom - 212)) | (1 << (bitmarkParser.OpAmpImageWAudio - 212)) | (1 << (bitmarkParser.OpAmpVideo - 212)) | (1 << (bitmarkParser.OpAmpArticle - 212)) | (1 << (bitmarkParser.OpAmpDocument - 212)) | (1 << (bitmarkParser.OpAmpApp - 212)) | (1 << (bitmarkParser.OpAmpWebsite - 212)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 212)) | (1 << (bitmarkParser.BracEnclose - 212)) | (1 << (bitmarkParser.AmpAudioLink - 212)) | (1 << (bitmarkParser.AmpImageLink - 212)))) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & ((1 << (bitmarkParser.AmpVideoLink - 244)) | (1 << (bitmarkParser.AmpArticleLink - 244)) | (1 << (bitmarkParser.AmpDocumentLink - 244)) | (1 << (bitmarkParser.AmpAppLink - 244)) | (1 << (bitmarkParser.AmpWebsiteLink - 244)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpAudioLink - 244)) | (1 << (bitmarkParser.OpAmpImageLink - 244)) | (1 << (bitmarkParser.OpAmpVideoLink - 244)) | (1 << (bitmarkParser.OpAmpArticleLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 244)) | (1 << (bitmarkParser.OpAmpAppLink - 244)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 244)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 244)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 244)) | (1 << (bitmarkParser.BitmarkMinus - 244)) | (1 << (bitmarkParser.BitmarkPlus - 244)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 1098;
                            this.bitElem();
                            this.state = 1102;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1099;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1104;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 1109;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1111;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1110;
                                    this.bot_action();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1113;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 82, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 1115;
                this.match(bitmarkParser.HSPL);
                this.state = 1117;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 83, this._ctx)) {
                    case 1:
                        {
                            this.state = 1116;
                            this.footer();
                        }
                        break;
                }
                this.state = 1122;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 84, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1119;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1124;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 84, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_true_false() {
        let _localctx = new Bot_action_true_falseContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, bitmarkParser.RULE_bot_action_true_false);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1125;
                this.match(bitmarkParser.BitBotActionTrueFalse);
                this.state = 1126;
                this.format();
                this.state = 1127;
                this.match(bitmarkParser.CL);
                this.state = 1131;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1128;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1133;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1143;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (bitmarkParser.OPDOLL - 143)) | (1 << (bitmarkParser.OPRANGLES - 143)) | (1 << (bitmarkParser.OPRANGLEL - 143)) | (1 << (bitmarkParser.OPDANGLE - 143)) | (1 << (bitmarkParser.OPU - 143)) | (1 << (bitmarkParser.OPB - 143)) | (1 << (bitmarkParser.OPQ - 143)) | (1 << (bitmarkParser.OPA - 143)) | (1 << (bitmarkParser.OPS - 143)) | (1 << (bitmarkParser.OPHASH - 143)) | (1 << (bitmarkParser.OPC - 143)) | (1 << (bitmarkParser.COLON - 143)) | (1 << (bitmarkParser.AMP - 143)) | (1 << (bitmarkParser.Greater - 143)) | (1 << (bitmarkParser.Less - 143)) | (1 << (bitmarkParser.RightAngle - 143)) | (1 << (bitmarkParser.RightArrow - 143)) | (1 << (bitmarkParser.DBLEQ - 143)) | (1 << (bitmarkParser.QUOTE_INDEX - 143)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (bitmarkParser.DCANY - 175)) | (1 << (bitmarkParser.ArticleText - 175)) | (1 << (bitmarkParser.NUMERIC - 175)) | (1 << (bitmarkParser.STRING - 175)) | (1 << (bitmarkParser.NOTBITMARK - 175)) | (1 << (bitmarkParser.ELIPSIS - 175)) | (1 << (bitmarkParser.SENTENCE - 175)) | (1 << (bitmarkParser.BARSTRING - 175)) | (1 << (bitmarkParser.AtProgress - 175)) | (1 << (bitmarkParser.AtReference - 175)) | (1 << (bitmarkParser.AtProgressPoints - 175)) | (1 << (bitmarkParser.AtExampleWithStr - 175)) | (1 << (bitmarkParser.AtExamplecol - 175)) | (1 << (bitmarkParser.AtExamplecl - 175)) | (1 << (bitmarkParser.AtPartialAnswerS - 175)) | (1 << (bitmarkParser.AtPartialAnswer - 175)) | (1 << (bitmarkParser.AtLabeltrue - 175)) | (1 << (bitmarkParser.AtLabelfalse - 175)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (bitmarkParser.OpAtCopyright - 212)) | (1 << (bitmarkParser.OpAtIsTracked - 212)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 212)) | (1 << (bitmarkParser.AtDate - 212)) | (1 << (bitmarkParser.AmpAudio - 212)) | (1 << (bitmarkParser.AmpImage - 212)) | (1 << (bitmarkParser.AmpVideo - 212)) | (1 << (bitmarkParser.AmpArticle - 212)) | (1 << (bitmarkParser.AmpDocument - 212)) | (1 << (bitmarkParser.AmpApp - 212)) | (1 << (bitmarkParser.AmpWebsite - 212)) | (1 << (bitmarkParser.AmpStillImageFilm - 212)) | (1 << (bitmarkParser.OpAmpAudio - 212)) | (1 << (bitmarkParser.OpAmpImage - 212)) | (1 << (bitmarkParser.OpAmpImageZoom - 212)) | (1 << (bitmarkParser.OpAmpImageWAudio - 212)) | (1 << (bitmarkParser.OpAmpVideo - 212)) | (1 << (bitmarkParser.OpAmpArticle - 212)) | (1 << (bitmarkParser.OpAmpDocument - 212)) | (1 << (bitmarkParser.OpAmpApp - 212)) | (1 << (bitmarkParser.OpAmpWebsite - 212)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 212)) | (1 << (bitmarkParser.BracEnclose - 212)) | (1 << (bitmarkParser.AmpAudioLink - 212)) | (1 << (bitmarkParser.AmpImageLink - 212)))) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & ((1 << (bitmarkParser.AmpVideoLink - 244)) | (1 << (bitmarkParser.AmpArticleLink - 244)) | (1 << (bitmarkParser.AmpDocumentLink - 244)) | (1 << (bitmarkParser.AmpAppLink - 244)) | (1 << (bitmarkParser.AmpWebsiteLink - 244)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpAudioLink - 244)) | (1 << (bitmarkParser.OpAmpImageLink - 244)) | (1 << (bitmarkParser.OpAmpVideoLink - 244)) | (1 << (bitmarkParser.OpAmpArticleLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 244)) | (1 << (bitmarkParser.OpAmpAppLink - 244)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 244)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 244)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 244)) | (1 << (bitmarkParser.BitmarkMinus - 244)) | (1 << (bitmarkParser.BitmarkPlus - 244)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 1134;
                            this.bitElem();
                            this.state = 1138;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1135;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1140;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 1145;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1147;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1146;
                                    this.bot_action();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1149;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 1151;
                this.match(bitmarkParser.HSPL);
                this.state = 1153;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 89, this._ctx)) {
                    case 1:
                        {
                            this.state = 1152;
                            this.footer();
                        }
                        break;
                }
                this.state = 1158;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 90, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1155;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1160;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 90, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_rating_number() {
        let _localctx = new Bot_action_rating_numberContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, bitmarkParser.RULE_bot_action_rating_number);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1161;
                this.match(bitmarkParser.BitBotActionRatingNumber);
                this.state = 1162;
                this.format();
                this.state = 1163;
                this.match(bitmarkParser.CL);
                this.state = 1167;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1164;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1169;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1179;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (bitmarkParser.OPDOLL - 143)) | (1 << (bitmarkParser.OPRANGLES - 143)) | (1 << (bitmarkParser.OPRANGLEL - 143)) | (1 << (bitmarkParser.OPDANGLE - 143)) | (1 << (bitmarkParser.OPU - 143)) | (1 << (bitmarkParser.OPB - 143)) | (1 << (bitmarkParser.OPQ - 143)) | (1 << (bitmarkParser.OPA - 143)) | (1 << (bitmarkParser.OPS - 143)) | (1 << (bitmarkParser.OPHASH - 143)) | (1 << (bitmarkParser.OPC - 143)) | (1 << (bitmarkParser.COLON - 143)) | (1 << (bitmarkParser.AMP - 143)) | (1 << (bitmarkParser.Greater - 143)) | (1 << (bitmarkParser.Less - 143)) | (1 << (bitmarkParser.RightAngle - 143)) | (1 << (bitmarkParser.RightArrow - 143)) | (1 << (bitmarkParser.DBLEQ - 143)) | (1 << (bitmarkParser.QUOTE_INDEX - 143)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (bitmarkParser.DCANY - 175)) | (1 << (bitmarkParser.ArticleText - 175)) | (1 << (bitmarkParser.NUMERIC - 175)) | (1 << (bitmarkParser.STRING - 175)) | (1 << (bitmarkParser.NOTBITMARK - 175)) | (1 << (bitmarkParser.ELIPSIS - 175)) | (1 << (bitmarkParser.SENTENCE - 175)) | (1 << (bitmarkParser.BARSTRING - 175)) | (1 << (bitmarkParser.AtProgress - 175)) | (1 << (bitmarkParser.AtReference - 175)) | (1 << (bitmarkParser.AtProgressPoints - 175)) | (1 << (bitmarkParser.AtExampleWithStr - 175)) | (1 << (bitmarkParser.AtExamplecol - 175)) | (1 << (bitmarkParser.AtExamplecl - 175)) | (1 << (bitmarkParser.AtPartialAnswerS - 175)) | (1 << (bitmarkParser.AtPartialAnswer - 175)) | (1 << (bitmarkParser.AtLabeltrue - 175)) | (1 << (bitmarkParser.AtLabelfalse - 175)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (bitmarkParser.OpAtCopyright - 212)) | (1 << (bitmarkParser.OpAtIsTracked - 212)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 212)) | (1 << (bitmarkParser.AtDate - 212)) | (1 << (bitmarkParser.AmpAudio - 212)) | (1 << (bitmarkParser.AmpImage - 212)) | (1 << (bitmarkParser.AmpVideo - 212)) | (1 << (bitmarkParser.AmpArticle - 212)) | (1 << (bitmarkParser.AmpDocument - 212)) | (1 << (bitmarkParser.AmpApp - 212)) | (1 << (bitmarkParser.AmpWebsite - 212)) | (1 << (bitmarkParser.AmpStillImageFilm - 212)) | (1 << (bitmarkParser.OpAmpAudio - 212)) | (1 << (bitmarkParser.OpAmpImage - 212)) | (1 << (bitmarkParser.OpAmpImageZoom - 212)) | (1 << (bitmarkParser.OpAmpImageWAudio - 212)) | (1 << (bitmarkParser.OpAmpVideo - 212)) | (1 << (bitmarkParser.OpAmpArticle - 212)) | (1 << (bitmarkParser.OpAmpDocument - 212)) | (1 << (bitmarkParser.OpAmpApp - 212)) | (1 << (bitmarkParser.OpAmpWebsite - 212)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 212)) | (1 << (bitmarkParser.BracEnclose - 212)) | (1 << (bitmarkParser.AmpAudioLink - 212)) | (1 << (bitmarkParser.AmpImageLink - 212)))) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & ((1 << (bitmarkParser.AmpVideoLink - 244)) | (1 << (bitmarkParser.AmpArticleLink - 244)) | (1 << (bitmarkParser.AmpDocumentLink - 244)) | (1 << (bitmarkParser.AmpAppLink - 244)) | (1 << (bitmarkParser.AmpWebsiteLink - 244)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpAudioLink - 244)) | (1 << (bitmarkParser.OpAmpImageLink - 244)) | (1 << (bitmarkParser.OpAmpVideoLink - 244)) | (1 << (bitmarkParser.OpAmpArticleLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 244)) | (1 << (bitmarkParser.OpAmpAppLink - 244)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 244)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 244)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 244)) | (1 << (bitmarkParser.BitmarkMinus - 244)) | (1 << (bitmarkParser.BitmarkPlus - 244)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 1170;
                            this.bitElem();
                            this.state = 1174;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1171;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1176;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 1181;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1183;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1182;
                                    this.bot_action();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1185;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 1187;
                this.match(bitmarkParser.HSPL);
                this.state = 1189;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 95, this._ctx)) {
                    case 1:
                        {
                            this.state = 1188;
                            this.footer();
                        }
                        break;
                }
                this.state = 1194;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 96, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1191;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1196;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 96, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action_rating_stars() {
        let _localctx = new Bot_action_rating_starsContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, bitmarkParser.RULE_bot_action_rating_stars);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1197;
                this.match(bitmarkParser.BitBotActionRatingStars);
                this.state = 1198;
                this.format();
                this.state = 1199;
                this.match(bitmarkParser.CL);
                this.state = 1203;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 97, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1200;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1205;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 97, this._ctx);
                }
                this.state = 1215;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 99, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1206;
                                this.bitElem();
                                this.state = 1210;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 98, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1207;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1212;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 98, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1217;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 99, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_action() {
        let _localctx = new Bot_actionContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, bitmarkParser.RULE_bot_action);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1218;
                this.match(bitmarkParser.HSPL);
                this.state = 1219;
                this.bo_actions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bo_actions() {
        let _localctx = new Bo_actionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, bitmarkParser.RULE_bo_actions);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1234;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1224;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 1221;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 1226;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1227;
                            this.boacts();
                            this.state = 1231;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1228;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                }
                                this.state = 1233;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
                            }
                        }
                    }
                    this.state = 1236;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 149)) & ~0x1F) === 0 && ((1 << (_la - 149)) & ((1 << (bitmarkParser.OPB - 149)) | (1 << (bitmarkParser.OPQ - 149)) | (1 << (bitmarkParser.OPA - 149)) | (1 << (bitmarkParser.OPP - 149)) | (1 << (bitmarkParser.OPM - 149)) | (1 << (bitmarkParser.OPS - 149)) | (1 << (bitmarkParser.OPC - 149)) | (1 << (bitmarkParser.COLON - 149)) | (1 << (bitmarkParser.AMP - 149)) | (1 << (bitmarkParser.Greater - 149)) | (1 << (bitmarkParser.Less - 149)) | (1 << (bitmarkParser.RightAngle - 149)) | (1 << (bitmarkParser.RightArrow - 149)) | (1 << (bitmarkParser.DBLEQ - 149)) | (1 << (bitmarkParser.QUOTE_INDEX - 149)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (bitmarkParser.NUMERIC - 181)) | (1 << (bitmarkParser.STRING - 181)) | (1 << (bitmarkParser.NL - 181)) | (1 << (bitmarkParser.NOTBITMARK - 181)) | (1 << (bitmarkParser.ELIPSIS - 181)) | (1 << (bitmarkParser.SENTENCE - 181)) | (1 << (bitmarkParser.BARSTRING - 181)) | (1 << (bitmarkParser.OpAtCopyright - 181)))) !== 0) || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)) | (1 << (bitmarkParser.ENCLBARS - 270)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    boacts() {
        let _localctx = new BoactsContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, bitmarkParser.RULE_boacts);
        try {
            this.state = 1245;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 103, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1238;
                        this.instruction();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1239;
                        this.item();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1240;
                        this.atdef();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1241;
                        this.hint();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1242;
                        this.choice_minus();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1243;
                        this.choice_plus();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1244;
                        this.feedback();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    feedback() {
        let _localctx = new FeedbackContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, bitmarkParser.RULE_feedback);
        try {
            this.state = 1249;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.ENCLBARS:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1247;
                        this.match(bitmarkParser.ENCLBARS);
                    }
                    break;
                case bitmarkParser.S:
                case bitmarkParser.OPS:
                case bitmarkParser.COLON:
                case bitmarkParser.AMP:
                case bitmarkParser.Greater:
                case bitmarkParser.Less:
                case bitmarkParser.RightAngle:
                case bitmarkParser.RightArrow:
                case bitmarkParser.DBLEQ:
                case bitmarkParser.QUOTE_INDEX:
                case bitmarkParser.NUMERIC:
                case bitmarkParser.STRING:
                case bitmarkParser.NOTBITMARK:
                case bitmarkParser.ELIPSIS:
                case bitmarkParser.SENTENCE:
                case bitmarkParser.BARSTRING:
                case bitmarkParser.AmpAudio:
                case bitmarkParser.AmpImage:
                case bitmarkParser.AmpVideo:
                case bitmarkParser.AmpArticle:
                case bitmarkParser.AmpDocument:
                case bitmarkParser.AmpApp:
                case bitmarkParser.AmpWebsite:
                case bitmarkParser.AmpStillImageFilm:
                case bitmarkParser.AmpAudioLink:
                case bitmarkParser.AmpImageLink:
                case bitmarkParser.AmpVideoLink:
                case bitmarkParser.AmpArticleLink:
                case bitmarkParser.AmpDocumentLink:
                case bitmarkParser.AmpAppLink:
                case bitmarkParser.AmpWebsiteLink:
                case bitmarkParser.AmpStillImageFilmLink:
                case bitmarkParser.BitmarkMinus:
                case bitmarkParser.BitmarkPlus:
                case bitmarkParser.URL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1248;
                        this.s_and_w();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    footer() {
        let _localctx = new FooterContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, bitmarkParser.RULE_footer);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1258;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1254;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 1251;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 1256;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 1257;
                                    this.s_and_w();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1260;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 106, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bitElem() {
        let _localctx = new BitElemContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, bitmarkParser.RULE_bitElem);
        try {
            this.state = 1294;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 107, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1262;
                        this.match(bitmarkParser.LIST_LINE);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1263;
                        this.match(bitmarkParser.NOTBITMARK);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1264;
                        this.dclines();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1265;
                        this.gap();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1266;
                        this.reference();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1267;
                        this.dateprop();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1268;
                        this.progress();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1269;
                        this.atdef();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1270;
                        this.dollarans();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1271;
                        this.partans();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1272;
                        this.item();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1273;
                        this.title();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 1274;
                        this.instruction();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 1275;
                        this.hint();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 1276;
                        this.s_and_w();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 1277;
                        this.example();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 1278;
                        this.bool_label();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 1279;
                        this.progress_points();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 1280;
                        this.istracked();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 1281;
                        this.isinfoonly();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 1282;
                        this.imagebit();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 1283;
                        this.audiobit();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 1284;
                        this.videobit();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 1285;
                        this.articlebit();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 1286;
                        this.documentbit();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 1287;
                        this.appbit();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 1288;
                        this.websitebit();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 1289;
                        this.stillimagefilmbit();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 1290;
                        this.angleref();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 1291;
                        this.anchor();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(_localctx, 31);
                    {
                        this.state = 1292;
                        this.bracketed_text();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(_localctx, 32);
                    {
                        this.state = 1293;
                        this.sp();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    gap() {
        let _localctx = new GapContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, bitmarkParser.RULE_gap);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1296;
                this.single_gap();
                this.state = 1304;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 1302;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.OPU:
                                    {
                                        this.state = 1297;
                                        this.single_gap();
                                    }
                                    break;
                                case bitmarkParser.OPB:
                                    {
                                        this.state = 1298;
                                        this.instruction();
                                    }
                                    break;
                                case bitmarkParser.OPQ:
                                    {
                                        this.state = 1299;
                                        this.hint();
                                    }
                                    break;
                                case bitmarkParser.OPC:
                                    {
                                        this.state = 1300;
                                        this.item();
                                    }
                                    break;
                                case bitmarkParser.AtExampleWithStr:
                                case bitmarkParser.AtExamplecol:
                                case bitmarkParser.AtExamplecl:
                                    {
                                        this.state = 1301;
                                        this.example();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                    }
                    this.state = 1306;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 109, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    single_gap() {
        let _localctx = new Single_gapContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, bitmarkParser.RULE_single_gap);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1307;
                this.match(bitmarkParser.OPU);
                this.state = 1311;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 110, this._ctx)) {
                    case 1:
                        {
                            this.state = 1308;
                            this.match(bitmarkParser.NUMERIC);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1309;
                            this.match(bitmarkParser.STRING);
                        }
                        break;
                    case 3:
                        // tslint:disable-next-line:no-empty
                        {
                        }
                        break;
                }
                this.state = 1316;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                    {
                        {
                            this.state = 1313;
                            this.s_and_w();
                        }
                    }
                    this.state = 1318;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1319;
                this.clnsp();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    choice_plus() {
        let _localctx = new Choice_plusContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, bitmarkParser.RULE_choice_plus);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1322;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPC) {
                    {
                        this.state = 1321;
                        this.item();
                    }
                }
                this.state = 1324;
                this.match(bitmarkParser.OPP);
                this.state = 1326;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1325;
                            this.s_and_w();
                        }
                    }
                    this.state = 1328;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                this.state = 1330;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    choice_minus() {
        let _localctx = new Choice_minusContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, bitmarkParser.RULE_choice_minus);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1333;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPC) {
                    {
                        this.state = 1332;
                        this.item();
                    }
                }
                this.state = 1335;
                this.match(bitmarkParser.OPM);
                this.state = 1337;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1336;
                            this.s_and_w();
                        }
                    }
                    this.state = 1339;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                this.state = 1341;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    choice_star() {
        let _localctx = new Choice_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, bitmarkParser.RULE_choice_star);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1344;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPC) {
                    {
                        this.state = 1343;
                        this.item();
                    }
                }
                this.state = 1346;
                this.match(bitmarkParser.OPR);
                this.state = 1348;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1347;
                            this.s_and_w();
                        }
                    }
                    this.state = 1350;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                this.state = 1352;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    essay() {
        let _localctx = new EssayContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, bitmarkParser.RULE_essay);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1354;
                this.match(bitmarkParser.BitEssay);
                this.state = 1355;
                this.format();
                this.state = 1356;
                this.match(bitmarkParser.CL);
                this.state = 1357;
                this.match(bitmarkParser.NL);
                this.state = 1367;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 119, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                {
                                    this.state = 1358;
                                    this.bitElem();
                                }
                                this.state = 1362;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 118, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1359;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1364;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 118, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1369;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 119, this._ctx);
                }
                this.state = 1379;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 121, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1373;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 1370;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 1375;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                {
                                    this.state = 1376;
                                    this.ml_example();
                                }
                            }
                        }
                    }
                    this.state = 1381;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 121, this._ctx);
                }
                this.state = 1385;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 122, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1382;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1387;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 122, this._ctx);
                }
                this.state = 1401;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 125, this._ctx)) {
                    case 1:
                        {
                            this.state = 1388;
                            this.resource();
                            this.state = 1398;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 124, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1392;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1389;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1394;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1395;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1400;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 124, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ml_example() {
        let _localctx = new Ml_exampleContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, bitmarkParser.RULE_ml_example);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1403;
                this.match(bitmarkParser.AtExamplecol);
                this.state = 1411;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                    {
                        this.state = 1405;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.NL) {
                            {
                                this.state = 1404;
                                this.match(bitmarkParser.NL);
                            }
                        }
                        this.state = 1407;
                        this.lines();
                        this.state = 1409;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.NL) {
                            {
                                this.state = 1408;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                }
                this.state = 1413;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partans() {
        let _localctx = new PartansContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, bitmarkParser.RULE_partans);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1415;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AtPartialAnswerS || _la === bitmarkParser.AtPartialAnswer)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource() {
        let _localctx = new ResourceContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, bitmarkParser.RULE_resource);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1417;
                this.bitElem();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    correction() {
        let _localctx = new CorrectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, bitmarkParser.RULE_correction);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1419;
                this.match(bitmarkParser.BitCorrection);
                this.state = 1420;
                this.format();
                this.state = 1421;
                this.match(bitmarkParser.CL);
                this.state = 1422;
                this.match(bitmarkParser.NL);
                this.state = 1432;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1423;
                                this.bitElem();
                                this.state = 1427;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1424;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1429;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1434;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 130, this._ctx);
                }
                this.state = 1438;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.OPP || _la === bitmarkParser.OPM) {
                    {
                        {
                            this.state = 1435;
                            this.corrs();
                        }
                    }
                    this.state = 1440;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1444;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1441;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1446;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
                }
                this.state = 1460;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 135, this._ctx)) {
                    case 1:
                        {
                            this.state = 1447;
                            this.resource();
                            this.state = 1457;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1451;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1448;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1453;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1454;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1459;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    corrs() {
        let _localctx = new CorrsContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, bitmarkParser.RULE_corrs);
        try {
            let _alt;
            this.state = 1480;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPM:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1462;
                        this.match(bitmarkParser.OPM);
                        this.state = 1466;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 136, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 1463;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 1468;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 136, this._ctx);
                        }
                        this.state = 1469;
                        this.match(bitmarkParser.CL);
                        this.state = 1470;
                        this.match(bitmarkParser.NL);
                    }
                    break;
                case bitmarkParser.OPP:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1471;
                        this.match(bitmarkParser.OPP);
                        this.state = 1475;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 137, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 1472;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 1477;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 137, this._ctx);
                        }
                        this.state = 1478;
                        this.match(bitmarkParser.CL);
                        this.state = 1479;
                        this.match(bitmarkParser.NL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mark_() {
        let _localctx = new Mark_Context(this._ctx, this.state);
        this.enterRule(_localctx, 98, bitmarkParser.RULE_mark_);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1482;
                this.match(bitmarkParser.BitMark);
                this.state = 1483;
                this.format();
                this.state = 1484;
                this.match(bitmarkParser.CL);
                this.state = 1485;
                this.match(bitmarkParser.NL);
                this.state = 1498;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1488;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 139, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 1486;
                                            this.bitElem();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 1487;
                                            this.mark_text();
                                        }
                                        break;
                                }
                                this.state = 1493;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1490;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1495;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1500;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
                }
                this.state = 1504;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1501;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1506;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
                }
                this.state = 1520;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 145, this._ctx)) {
                    case 1:
                        {
                            this.state = 1507;
                            this.resource();
                            this.state = 1517;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1511;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1508;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1513;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1514;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1519;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mark_text() {
        let _localctx = new Mark_textContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, bitmarkParser.RULE_mark_text);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1522;
                this.match(bitmarkParser.OPS);
                this.state = 1523;
                this.s_and_w();
                this.state = 1524;
                this.match(bitmarkParser.CL);
                this.state = 1526;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPAMARK) {
                    {
                        this.state = 1525;
                        this.mark_color();
                    }
                }
                this.state = 1533;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 1531;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case bitmarkParser.OPQ:
                                    {
                                        this.state = 1528;
                                        this.hint();
                                    }
                                    break;
                                case bitmarkParser.OPC:
                                    {
                                        this.state = 1529;
                                        this.item();
                                    }
                                    break;
                                case bitmarkParser.OPB:
                                    {
                                        this.state = 1530;
                                        this.instruction();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                    }
                    this.state = 1535;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mark_color() {
        let _localctx = new Mark_colorContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, bitmarkParser.RULE_mark_color);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1536;
                this.match(bitmarkParser.OPAMARK);
                this.state = 1540;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 1537;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 1542;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1543;
                this.match(bitmarkParser.STRING);
                this.state = 1547;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 1544;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 1549;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1550;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    take_audio() {
        let _localctx = new Take_audioContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, bitmarkParser.RULE_take_audio);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1552;
                this.match(bitmarkParser.BitTakeAudio);
                this.state = 1553;
                this.format();
                this.state = 1554;
                this.match(bitmarkParser.CL);
                this.state = 1555;
                this.match(bitmarkParser.NL);
                this.state = 1565;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1556;
                                this.bitElem();
                                this.state = 1560;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1557;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1562;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1567;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
                }
                this.state = 1571;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 153, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1568;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1573;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 153, this._ctx);
                }
                this.state = 1587;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 156, this._ctx)) {
                    case 1:
                        {
                            this.state = 1574;
                            this.resource();
                            this.state = 1584;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 155, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1578;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1575;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1580;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1581;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1586;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 155, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    take_picture() {
        let _localctx = new Take_pictureContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, bitmarkParser.RULE_take_picture);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1589;
                this.match(bitmarkParser.BitTakepic);
                this.state = 1590;
                this.format();
                this.state = 1591;
                this.match(bitmarkParser.CL);
                this.state = 1592;
                this.match(bitmarkParser.NL);
                this.state = 1602;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 158, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1593;
                                this.bitElem();
                                this.state = 1597;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 157, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1594;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1599;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 157, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1604;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 158, this._ctx);
                }
                this.state = 1608;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1605;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1610;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
                }
                this.state = 1624;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 162, this._ctx)) {
                    case 1:
                        {
                            this.state = 1611;
                            this.resource();
                            this.state = 1621;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 161, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1615;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1612;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1617;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1618;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1623;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 161, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    record_audio() {
        let _localctx = new Record_audioContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, bitmarkParser.RULE_record_audio);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1626;
                this.match(bitmarkParser.BitRecaud);
                this.state = 1627;
                this.format();
                this.state = 1628;
                this.match(bitmarkParser.CL);
                this.state = 1629;
                this.match(bitmarkParser.NL);
                this.state = 1639;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1630;
                                this.bitElem();
                                this.state = 1634;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1631;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1636;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1641;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
                }
                this.state = 1645;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1642;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1647;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
                }
                this.state = 1661;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 168, this._ctx)) {
                    case 1:
                        {
                            this.state = 1648;
                            this.resource();
                            this.state = 1658;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 167, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1652;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1649;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1654;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1655;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1660;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 167, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    preparation_note() {
        let _localctx = new Preparation_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, bitmarkParser.RULE_preparation_note);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1663;
                this.match(bitmarkParser.BitPrepnote);
                this.state = 1664;
                this.format();
                this.state = 1665;
                this.match(bitmarkParser.CL);
                this.state = 1669;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1666;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1671;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
                }
                this.state = 1681;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1672;
                                this.bitElem();
                                this.state = 1676;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1673;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1678;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1683;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
                }
                this.state = 1685;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 172, this._ctx)) {
                    case 1:
                        {
                            this.state = 1684;
                            this.lines();
                        }
                        break;
                }
                this.state = 1690;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 173, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1687;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1692;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 173, this._ctx);
                }
                this.state = 1706;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 176, this._ctx)) {
                    case 1:
                        {
                            this.state = 1693;
                            this.resource();
                            this.state = 1703;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1697;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1694;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1699;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1700;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1705;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    assignment() {
        let _localctx = new AssignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, bitmarkParser.RULE_assignment);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1708;
                this.match(bitmarkParser.BitAssign);
                this.state = 1709;
                this.format();
                this.state = 1710;
                this.match(bitmarkParser.CL);
                this.state = 1712;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1711;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1714;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 177, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 1725;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 179, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1716;
                                this.bitElem();
                                this.state = 1720;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
                                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                    if (_alt === 1) {
                                        {
                                            {
                                                this.state = 1717;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                    }
                                    this.state = 1722;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
                                }
                            }
                        }
                    }
                    this.state = 1727;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 179, this._ctx);
                }
                this.state = 1729;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 180, this._ctx)) {
                    case 1:
                        {
                            this.state = 1728;
                            this.lines();
                        }
                        break;
                }
                this.state = 1734;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1731;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 1736;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
                }
                this.state = 1750;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 184, this._ctx)) {
                    case 1:
                        {
                            this.state = 1737;
                            this.resource();
                            this.state = 1747;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 183, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1741;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 1738;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 1743;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 1744;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 1749;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 183, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    article() {
        let _localctx = new ArticleContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, bitmarkParser.RULE_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1752;
                this.match(bitmarkParser.BitArticle);
                this.state = 1753;
                this.format();
                this.state = 1754;
                this.match(bitmarkParser.CL);
                this.state = 1758;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1755;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1760;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1768;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1761;
                                    this.bitElem();
                                    this.state = 1765;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1762;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1767;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1770;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 187, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    statement() {
        let _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, bitmarkParser.RULE_statement);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1772;
                this.match(bitmarkParser.BitStatement);
                this.state = 1773;
                this.format();
                this.state = 1774;
                this.match(bitmarkParser.CL);
                this.state = 1778;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1775;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1780;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1788;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1781;
                                    this.bitElem();
                                    this.state = 1785;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1782;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1787;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1790;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    details() {
        let _localctx = new DetailsContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, bitmarkParser.RULE_details);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1792;
                this.match(bitmarkParser.BitDetails);
                this.state = 1793;
                this.format();
                this.state = 1794;
                this.match(bitmarkParser.CL);
                this.state = 1798;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1795;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1800;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1808;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1801;
                                    this.bitElem();
                                    this.state = 1805;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1802;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1807;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1810;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 193, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sample_solution() {
        let _localctx = new Sample_solutionContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, bitmarkParser.RULE_sample_solution);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1812;
                this.match(bitmarkParser.BitSampleSolution);
                this.state = 1813;
                this.format();
                this.state = 1814;
                this.match(bitmarkParser.CL);
                this.state = 1818;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1815;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1820;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1828;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1821;
                                    this.bitElem();
                                    this.state = 1825;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1822;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1827;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1830;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 196, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    buttoncopytext() {
        let _localctx = new ButtoncopytextContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, bitmarkParser.RULE_buttoncopytext);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1832;
                this.match(bitmarkParser.BitButtonCopytext);
                this.state = 1833;
                this.format();
                this.state = 1834;
                this.match(bitmarkParser.CL);
                this.state = 1838;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1835;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1840;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1848;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1841;
                                    this.bitElem();
                                    this.state = 1845;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1842;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1847;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1850;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 199, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    wbtcontinue() {
        let _localctx = new WbtcontinueContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, bitmarkParser.RULE_wbtcontinue);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1852;
                this.match(bitmarkParser.BitWbtContinue);
                this.state = 1853;
                this.format();
                this.state = 1854;
                this.match(bitmarkParser.CL);
                this.state = 1858;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1855;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1860;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1868;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1861;
                                    this.bitElem();
                                    this.state = 1865;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1862;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1867;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 201, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1870;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    learningpathdetails() {
        let _localctx = new LearningpathdetailsContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, bitmarkParser.RULE_learningpathdetails);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1872;
                this.match(bitmarkParser.BitLearningPathDetails);
                this.state = 1873;
                this.format();
                this.state = 1874;
                this.match(bitmarkParser.CL);
                this.state = 1878;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1875;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1880;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1888;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1881;
                                    this.bitElem();
                                    this.state = 1885;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1882;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1887;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1890;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 205, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    page() {
        let _localctx = new PageContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, bitmarkParser.RULE_page);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1892;
                this.match(bitmarkParser.BitPage);
                this.state = 1893;
                this.format();
                this.state = 1894;
                this.match(bitmarkParser.CL);
                this.state = 1898;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1895;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1900;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1908;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1901;
                                    this.bitElem();
                                    this.state = 1905;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1902;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1907;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1910;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 208, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    note() {
        let _localctx = new NoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, bitmarkParser.RULE_note);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1912;
                this.match(bitmarkParser.BitNote);
                this.state = 1913;
                this.format();
                this.state = 1914;
                this.match(bitmarkParser.CL);
                this.state = 1918;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1915;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1920;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1928;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1921;
                                    this.bitElem();
                                    this.state = 1925;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 210, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1922;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1927;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 210, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1930;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    info() {
        let _localctx = new InfoContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, bitmarkParser.RULE_info);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1932;
                this.match(bitmarkParser.BitInfo);
                this.state = 1933;
                this.format();
                this.state = 1934;
                this.match(bitmarkParser.CL);
                this.state = 1938;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1935;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1940;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1948;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1941;
                                    this.bitElem();
                                    this.state = 1945;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1942;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1947;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1950;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 214, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    warning() {
        let _localctx = new WarningContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, bitmarkParser.RULE_warning);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1952;
                this.match(bitmarkParser.BitWarning);
                this.state = 1953;
                this.format();
                this.state = 1954;
                this.match(bitmarkParser.CL);
                this.state = 1958;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1955;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1960;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1968;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1961;
                                    this.bitElem();
                                    this.state = 1965;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1962;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1967;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1970;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 217, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    remark() {
        let _localctx = new RemarkContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, bitmarkParser.RULE_remark);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1972;
                this.match(bitmarkParser.BitRemark);
                this.state = 1973;
                this.format();
                this.state = 1974;
                this.match(bitmarkParser.CL);
                this.state = 1978;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1975;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 1980;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1988;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1981;
                                    this.bitElem();
                                    this.state = 1985;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 1982;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 1987;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1990;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 220, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    help() {
        let _localctx = new HelpContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, bitmarkParser.RULE_help);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1992;
                this.match(bitmarkParser.BitHelp);
                this.state = 1993;
                this.format();
                this.state = 1994;
                this.match(bitmarkParser.CL);
                this.state = 1998;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 1995;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2000;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2008;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2001;
                                    this.bitElem();
                                    this.state = 2005;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2002;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2007;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2010;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 223, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    danger() {
        let _localctx = new DangerContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, bitmarkParser.RULE_danger);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2012;
                this.match(bitmarkParser.BitDanger);
                this.state = 2013;
                this.format();
                this.state = 2014;
                this.match(bitmarkParser.CL);
                this.state = 2018;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2015;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2020;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2028;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2021;
                                    this.bitElem();
                                    this.state = 2025;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2022;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2027;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2030;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bug() {
        let _localctx = new BugContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, bitmarkParser.RULE_bug);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2032;
                this.match(bitmarkParser.BitBug);
                this.state = 2033;
                this.format();
                this.state = 2034;
                this.match(bitmarkParser.CL);
                this.state = 2038;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2035;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2040;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2048;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2041;
                                    this.bitElem();
                                    this.state = 2045;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2042;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2047;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2050;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sidenote() {
        let _localctx = new SidenoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, bitmarkParser.RULE_sidenote);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2052;
                this.match(bitmarkParser.BitSidenote);
                this.state = 2053;
                this.format();
                this.state = 2054;
                this.match(bitmarkParser.CL);
                this.state = 2058;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2055;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2060;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2068;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2061;
                                    this.bitElem();
                                    this.state = 2065;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2062;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2067;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2070;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stickynote() {
        let _localctx = new StickynoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, bitmarkParser.RULE_stickynote);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2072;
                this.match(bitmarkParser.BitStickynote);
                this.state = 2073;
                this.format();
                this.state = 2074;
                this.match(bitmarkParser.CL);
                this.state = 2078;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2075;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2080;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2088;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2081;
                                    this.bitElem();
                                    this.state = 2085;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2082;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2087;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 234, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2090;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    quote() {
        let _localctx = new QuoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, bitmarkParser.RULE_quote);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2092;
                this.match(bitmarkParser.BitQuote);
                this.state = 2093;
                this.format();
                this.state = 2094;
                this.match(bitmarkParser.CL);
                this.state = 2098;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2095;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2100;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2108;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2101;
                                    this.bitElem();
                                    this.state = 2105;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2102;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2107;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2110;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 238, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    footnote() {
        let _localctx = new FootnoteContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, bitmarkParser.RULE_footnote);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2112;
                this.match(bitmarkParser.BitFootnote);
                this.state = 2113;
                this.format();
                this.state = 2114;
                this.match(bitmarkParser.CL);
                this.state = 2118;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2115;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2120;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2128;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2121;
                                    this.bitElem();
                                    this.state = 2125;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 240, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2122;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2127;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 240, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2130;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    hintbit() {
        let _localctx = new HintbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, bitmarkParser.RULE_hintbit);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2132;
                this.match(bitmarkParser.BitHint);
                this.state = 2133;
                this.format();
                this.state = 2134;
                this.match(bitmarkParser.CL);
                this.state = 2138;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2135;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2140;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2148;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2141;
                                    this.bitElem();
                                    this.state = 2145;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2142;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2147;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2150;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    examplebit() {
        let _localctx = new ExamplebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, bitmarkParser.RULE_examplebit);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2152;
                this.match(bitmarkParser.BitExample);
                this.state = 2153;
                this.format();
                this.state = 2154;
                this.match(bitmarkParser.CL);
                this.state = 2158;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2155;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2160;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2168;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2161;
                                    this.bitElem();
                                    this.state = 2165;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2162;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2167;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2170;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 247, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_padlet_embed() {
        let _localctx = new Vendor_padlet_embedContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, bitmarkParser.RULE_vendor_padlet_embed);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2172;
                this.match(bitmarkParser.BitVendorPadletEmbed);
                this.state = 2173;
                this.format();
                this.state = 2174;
                this.match(bitmarkParser.CL);
                this.state = 2178;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2175;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2180;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2188;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2181;
                                    this.bitElem();
                                    this.state = 2185;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2182;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2187;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2190;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 250, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    scorm() {
        let _localctx = new ScormContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, bitmarkParser.RULE_scorm);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2192;
                this.match(bitmarkParser.BitScorm);
                this.state = 2193;
                this.format();
                this.state = 2194;
                this.match(bitmarkParser.CL);
                this.state = 2198;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2195;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2200;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2208;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2201;
                                    this.bitElem();
                                    this.state = 2205;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2202;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2207;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2210;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 253, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_image() {
        let _localctx = new Bit_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, bitmarkParser.RULE_bit_image);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2212;
                this.match(bitmarkParser.BitImage);
                this.state = 2213;
                this.format2();
                this.state = 2214;
                this.match(bitmarkParser.CL);
                this.state = 2218;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2215;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2220;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2228;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2221;
                                    this.bitElem();
                                    this.state = 2225;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2222;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2227;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 255, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2230;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imageLink() {
        let _localctx = new Bit_imageLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, bitmarkParser.RULE_bit_imageLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2232;
                this.match(bitmarkParser.BitImageLink);
                this.state = 2233;
                this.format2();
                this.state = 2234;
                this.match(bitmarkParser.CL);
                this.state = 2238;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2235;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2240;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2248;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2241;
                                    this.bitElem();
                                    this.state = 2245;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2242;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2247;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2250;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imageZoom() {
        let _localctx = new Bit_imageZoomContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, bitmarkParser.RULE_bit_imageZoom);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2252;
                this.match(bitmarkParser.BitImageZoom);
                this.state = 2253;
                this.format2();
                this.state = 2254;
                this.match(bitmarkParser.CL);
                this.state = 2258;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2255;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2260;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2268;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2261;
                                    this.bitElem();
                                    this.state = 2265;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2262;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2267;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2270;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imagePrototype() {
        let _localctx = new Bit_imagePrototypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, bitmarkParser.RULE_bit_imagePrototype);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2272;
                this.match(bitmarkParser.BitImagePrototype);
                this.state = 2273;
                this.format2();
                this.state = 2274;
                this.match(bitmarkParser.CL);
                this.state = 2278;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2275;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2280;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2288;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2281;
                                    this.bitElem();
                                    this.state = 2285;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2282;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2287;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2290;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 265, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_imageSuperWide() {
        let _localctx = new Bit_imageSuperWideContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, bitmarkParser.RULE_bit_imageSuperWide);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2292;
                this.match(bitmarkParser.BitImageSuperWide);
                this.state = 2293;
                this.format2();
                this.state = 2294;
                this.match(bitmarkParser.CL);
                this.state = 2298;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2295;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2300;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2308;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2301;
                                    this.bitElem();
                                    this.state = 2305;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 267, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2302;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2307;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 267, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2310;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_audio() {
        let _localctx = new Bit_audioContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, bitmarkParser.RULE_bit_audio);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2312;
                this.match(bitmarkParser.BitAudio);
                this.state = 2313;
                this.format2();
                this.state = 2314;
                this.match(bitmarkParser.CL);
                this.state = 2318;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2315;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2320;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2328;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2321;
                                    this.bitElem();
                                    this.state = 2325;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 270, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2322;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2327;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 270, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2330;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_audioLink() {
        let _localctx = new Bit_audioLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, bitmarkParser.RULE_bit_audioLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2332;
                this.match(bitmarkParser.BitAudioLink);
                this.state = 2333;
                this.format2();
                this.state = 2334;
                this.match(bitmarkParser.CL);
                this.state = 2338;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2335;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2340;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2348;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2341;
                                    this.bitElem();
                                    this.state = 2345;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 273, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2342;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2347;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 273, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2350;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_audioEmbed() {
        let _localctx = new Bit_audioEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, bitmarkParser.RULE_bit_audioEmbed);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2352;
                this.match(bitmarkParser.BitAudioEmbed);
                this.state = 2353;
                this.format2();
                this.state = 2354;
                this.match(bitmarkParser.CL);
                this.state = 2358;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2355;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2360;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2368;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2361;
                                    this.bitElem();
                                    this.state = 2365;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 276, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2362;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2367;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 276, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2370;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_video() {
        let _localctx = new Bit_videoContext(this._ctx, this.state);
        this.enterRule(_localctx, 176, bitmarkParser.RULE_bit_video);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2372;
                this.match(bitmarkParser.BitVideo);
                this.state = 2373;
                this.format2();
                this.state = 2374;
                this.match(bitmarkParser.CL);
                this.state = 2378;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2375;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2380;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2388;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2381;
                                    this.bitElem();
                                    this.state = 2385;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 279, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2382;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2387;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 279, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2390;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 280, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoLink() {
        let _localctx = new Bit_videoLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 178, bitmarkParser.RULE_bit_videoLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2392;
                this.match(bitmarkParser.BitVideoLink);
                this.state = 2393;
                this.format2();
                this.state = 2394;
                this.match(bitmarkParser.CL);
                this.state = 2398;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2395;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2400;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2408;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2401;
                                    this.bitElem();
                                    this.state = 2405;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 282, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2402;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2407;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 282, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2410;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoEmbed() {
        let _localctx = new Bit_videoEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, bitmarkParser.RULE_bit_videoEmbed);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2412;
                this.match(bitmarkParser.BitVideoEmbed);
                this.state = 2413;
                this.format2();
                this.state = 2414;
                this.match(bitmarkParser.CL);
                this.state = 2418;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2415;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2420;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2428;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2421;
                                    this.bitElem();
                                    this.state = 2425;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2422;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2427;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2430;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoPortrait() {
        let _localctx = new Bit_videoPortraitContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, bitmarkParser.RULE_bit_videoPortrait);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2432;
                this.match(bitmarkParser.BitVideoPortrait);
                this.state = 2433;
                this.format2();
                this.state = 2434;
                this.match(bitmarkParser.CL);
                this.state = 2438;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2435;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2440;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2448;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2441;
                                    this.bitElem();
                                    this.state = 2445;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 288, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2442;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2447;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 288, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2450;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_videoLandscape() {
        let _localctx = new Bit_videoLandscapeContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, bitmarkParser.RULE_bit_videoLandscape);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2452;
                this.match(bitmarkParser.BitVideoLandscape);
                this.state = 2453;
                this.format2();
                this.state = 2454;
                this.match(bitmarkParser.CL);
                this.state = 2458;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2455;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2460;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2468;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2461;
                                    this.bitElem();
                                    this.state = 2465;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2462;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2467;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2470;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 292, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_stillImageFilm() {
        let _localctx = new Bit_stillImageFilmContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, bitmarkParser.RULE_bit_stillImageFilm);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2472;
                this.match(bitmarkParser.BitStillImageFilm);
                this.state = 2473;
                this.format2();
                this.state = 2474;
                this.match(bitmarkParser.CL);
                this.state = 2478;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2475;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2480;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2488;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2481;
                                    this.bitElem();
                                    this.state = 2485;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2482;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2487;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2490;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_stillImageFilmLink() {
        let _localctx = new Bit_stillImageFilmLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, bitmarkParser.RULE_bit_stillImageFilmLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2492;
                this.match(bitmarkParser.BitStillImageFilmLink);
                this.state = 2493;
                this.format2();
                this.state = 2494;
                this.match(bitmarkParser.CL);
                this.state = 2498;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2495;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2500;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2508;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2501;
                                    this.bitElem();
                                    this.state = 2505;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2502;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2507;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2510;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_stillImageFilmEmbed() {
        let _localctx = new Bit_stillImageFilmEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, bitmarkParser.RULE_bit_stillImageFilmEmbed);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2512;
                this.match(bitmarkParser.BitStillImageFilmEmbed);
                this.state = 2513;
                this.format2();
                this.state = 2514;
                this.match(bitmarkParser.CL);
                this.state = 2518;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2515;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2520;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2528;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2521;
                                    this.bitElem();
                                    this.state = 2525;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2522;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2527;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2530;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_websiteLink() {
        let _localctx = new Bit_websiteLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, bitmarkParser.RULE_bit_websiteLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2532;
                this.match(bitmarkParser.BitWebsiteLink);
                this.state = 2533;
                this.format2();
                this.state = 2534;
                this.match(bitmarkParser.CL);
                this.state = 2538;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2535;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2540;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2548;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2541;
                                    this.bitElem();
                                    this.state = 2545;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2542;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2547;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2550;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 304, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_document() {
        let _localctx = new Bit_documentContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, bitmarkParser.RULE_bit_document);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2552;
                this.match(bitmarkParser.BitDocument);
                this.state = 2553;
                this.format2();
                this.state = 2554;
                this.match(bitmarkParser.CL);
                this.state = 2558;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2555;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2560;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2568;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2561;
                                    this.bitElem();
                                    this.state = 2565;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2562;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2567;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2570;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_documentLink() {
        let _localctx = new Bit_documentLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, bitmarkParser.RULE_bit_documentLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2572;
                this.match(bitmarkParser.BitDocumentLink);
                this.state = 2573;
                this.format2();
                this.state = 2574;
                this.match(bitmarkParser.CL);
                this.state = 2578;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2575;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2580;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2588;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2581;
                                    this.bitElem();
                                    this.state = 2585;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2582;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2587;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2590;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 310, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_documentEmbed() {
        let _localctx = new Bit_documentEmbedContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, bitmarkParser.RULE_bit_documentEmbed);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2592;
                this.match(bitmarkParser.BitDocumentEmbed);
                this.state = 2593;
                this.format2();
                this.state = 2594;
                this.match(bitmarkParser.CL);
                this.state = 2598;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2595;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2600;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2608;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2601;
                                    this.bitElem();
                                    this.state = 2605;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2602;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2607;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2610;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_documentDownload() {
        let _localctx = new Bit_documentDownloadContext(this._ctx, this.state);
        this.enterRule(_localctx, 200, bitmarkParser.RULE_bit_documentDownload);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2612;
                this.match(bitmarkParser.BitDocumentDownload);
                this.state = 2613;
                this.format2();
                this.state = 2614;
                this.match(bitmarkParser.CL);
                this.state = 2618;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2615;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2620;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2628;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2621;
                                    this.bitElem();
                                    this.state = 2625;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2622;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2627;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2630;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_appLink() {
        let _localctx = new Bit_appLinkContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, bitmarkParser.RULE_bit_appLink);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2632;
                this.match(bitmarkParser.BitAppLink);
                this.state = 2633;
                this.format2();
                this.state = 2634;
                this.match(bitmarkParser.CL);
                this.state = 2638;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2635;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2640;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2648;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2641;
                                    this.bitElem();
                                    this.state = 2645;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2642;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2647;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2650;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bit_editorial() {
        let _localctx = new Bit_editorialContext(this._ctx, this.state);
        this.enterRule(_localctx, 204, bitmarkParser.RULE_bit_editorial);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2652;
                this.match(bitmarkParser.BitEditorial);
                this.state = 2653;
                this.format2();
                this.state = 2654;
                this.match(bitmarkParser.CL);
                this.state = 2658;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2655;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2660;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2668;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2661;
                                    this.bitElem();
                                    this.state = 2665;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2662;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2667;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2670;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_frontispiece() {
        let _localctx = new Book_frontispieceContext(this._ctx, this.state);
        this.enterRule(_localctx, 206, bitmarkParser.RULE_book_frontispiece);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2672;
                this.match(bitmarkParser.BitBookFrontispiece);
                this.state = 2673;
                this.format();
                this.state = 2674;
                this.match(bitmarkParser.CL);
                this.state = 2678;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2675;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2680;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2688;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2681;
                                    this.bitElem();
                                    this.state = 2685;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2682;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2687;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2690;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 325, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_title() {
        let _localctx = new Book_titleContext(this._ctx, this.state);
        this.enterRule(_localctx, 208, bitmarkParser.RULE_book_title);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2692;
                this.match(bitmarkParser.BitBookTitle);
                this.state = 2693;
                this.format();
                this.state = 2694;
                this.match(bitmarkParser.CL);
                this.state = 2698;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2695;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2700;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2708;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2701;
                                    this.bitElem();
                                    this.state = 2705;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2702;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2707;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2710;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_copyright() {
        let _localctx = new Book_copyrightContext(this._ctx, this.state);
        this.enterRule(_localctx, 210, bitmarkParser.RULE_book_copyright);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2712;
                this.match(bitmarkParser.BitBookCopyright);
                this.state = 2713;
                this.format();
                this.state = 2714;
                this.match(bitmarkParser.CL);
                this.state = 2718;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2715;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2720;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2728;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2721;
                                    this.bitElem();
                                    this.state = 2725;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2722;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2727;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2730;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 331, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_dedication() {
        let _localctx = new Book_dedicationContext(this._ctx, this.state);
        this.enterRule(_localctx, 212, bitmarkParser.RULE_book_dedication);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2732;
                this.match(bitmarkParser.BitBookDedication);
                this.state = 2733;
                this.format();
                this.state = 2734;
                this.match(bitmarkParser.CL);
                this.state = 2738;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2735;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2740;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2748;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2741;
                                    this.bitElem();
                                    this.state = 2745;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2742;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2747;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2750;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 334, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_forword() {
        let _localctx = new Book_forwordContext(this._ctx, this.state);
        this.enterRule(_localctx, 214, bitmarkParser.RULE_book_forword);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2752;
                this.match(bitmarkParser.BitBookForword);
                this.state = 2753;
                this.format();
                this.state = 2754;
                this.match(bitmarkParser.CL);
                this.state = 2758;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2755;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2760;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2768;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2761;
                                    this.bitElem();
                                    this.state = 2765;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 336, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2762;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2767;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 336, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2770;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_preface() {
        let _localctx = new Book_prefaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, bitmarkParser.RULE_book_preface);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2772;
                this.match(bitmarkParser.BitBookPreface);
                this.state = 2773;
                this.format();
                this.state = 2774;
                this.match(bitmarkParser.CL);
                this.state = 2778;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2775;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2780;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2788;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2781;
                                    this.bitElem();
                                    this.state = 2785;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2782;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2787;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2790;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 340, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_prologue() {
        let _localctx = new Book_prologueContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, bitmarkParser.RULE_book_prologue);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2792;
                this.match(bitmarkParser.BitBookPrologue);
                this.state = 2793;
                this.format();
                this.state = 2794;
                this.match(bitmarkParser.CL);
                this.state = 2798;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2795;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2800;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2808;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2801;
                                    this.bitElem();
                                    this.state = 2805;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2802;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2807;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2810;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_epilogue() {
        let _localctx = new Book_epilogueContext(this._ctx, this.state);
        this.enterRule(_localctx, 220, bitmarkParser.RULE_book_epilogue);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2812;
                this.match(bitmarkParser.BitBookEpilogue);
                this.state = 2813;
                this.format();
                this.state = 2814;
                this.match(bitmarkParser.CL);
                this.state = 2818;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2815;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2820;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2828;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2821;
                                    this.bitElem();
                                    this.state = 2825;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2822;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2827;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 345, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2830;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_introduction() {
        let _localctx = new Book_introductionContext(this._ctx, this.state);
        this.enterRule(_localctx, 222, bitmarkParser.RULE_book_introduction);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2832;
                this.match(bitmarkParser.BitBookIntroduction);
                this.state = 2833;
                this.format();
                this.state = 2834;
                this.match(bitmarkParser.CL);
                this.state = 2838;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2835;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2840;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2848;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2841;
                                    this.bitElem();
                                    this.state = 2845;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2842;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2847;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2850;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 349, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_inciting_incident() {
        let _localctx = new Book_inciting_incidentContext(this._ctx, this.state);
        this.enterRule(_localctx, 224, bitmarkParser.RULE_book_inciting_incident);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2852;
                this.match(bitmarkParser.BitBookIncitingIncident);
                this.state = 2853;
                this.format();
                this.state = 2854;
                this.match(bitmarkParser.CL);
                this.state = 2858;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2855;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2860;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2868;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2861;
                                    this.bitElem();
                                    this.state = 2865;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 351, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2862;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2867;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 351, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2870;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_conclusion() {
        let _localctx = new Book_conclusionContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, bitmarkParser.RULE_book_conclusion);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2872;
                this.match(bitmarkParser.BitBookConclusion);
                this.state = 2873;
                this.format();
                this.state = 2874;
                this.match(bitmarkParser.CL);
                this.state = 2878;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2875;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2880;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2888;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2881;
                                    this.bitElem();
                                    this.state = 2885;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2882;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2887;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2890;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 355, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_afterword() {
        let _localctx = new Book_afterwordContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, bitmarkParser.RULE_book_afterword);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2892;
                this.match(bitmarkParser.BitBookAfterword);
                this.state = 2893;
                this.format();
                this.state = 2894;
                this.match(bitmarkParser.CL);
                this.state = 2898;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2895;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2900;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2908;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2901;
                                    this.bitElem();
                                    this.state = 2905;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2902;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2907;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 357, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2910;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_postscript() {
        let _localctx = new Book_postscriptContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, bitmarkParser.RULE_book_postscript);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2912;
                this.match(bitmarkParser.BitBookPostscript);
                this.state = 2913;
                this.format();
                this.state = 2914;
                this.match(bitmarkParser.CL);
                this.state = 2918;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2915;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2920;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2928;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2921;
                                    this.bitElem();
                                    this.state = 2925;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 360, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2922;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2927;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 360, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2930;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_appendix() {
        let _localctx = new Book_appendixContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, bitmarkParser.RULE_book_appendix);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2932;
                this.match(bitmarkParser.BitBookappendix);
                this.state = 2933;
                this.format();
                this.state = 2934;
                this.match(bitmarkParser.CL);
                this.state = 2938;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2935;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2940;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2948;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2941;
                                    this.bitElem();
                                    this.state = 2945;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2942;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2947;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2950;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_addendum() {
        let _localctx = new Book_addendumContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, bitmarkParser.RULE_book_addendum);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2952;
                this.match(bitmarkParser.BitBookAddendum);
                this.state = 2953;
                this.format();
                this.state = 2954;
                this.match(bitmarkParser.CL);
                this.state = 2958;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2955;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2960;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2968;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2961;
                                    this.bitElem();
                                    this.state = 2965;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 366, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2962;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2967;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 366, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2970;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_acknowledgments() {
        let _localctx = new Book_acknowledgmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, bitmarkParser.RULE_book_acknowledgments);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2972;
                this.match(bitmarkParser.BitBookAcknowledgments);
                this.state = 2973;
                this.format();
                this.state = 2974;
                this.match(bitmarkParser.CL);
                this.state = 2978;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2975;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 2980;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2988;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2981;
                                    this.bitElem();
                                    this.state = 2985;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 2982;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 2987;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2990;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_list_of_contributors() {
        let _localctx = new Book_list_of_contributorsContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, bitmarkParser.RULE_book_list_of_contributors);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2992;
                this.match(bitmarkParser.BitBookListOfContributors);
                this.state = 2993;
                this.format();
                this.state = 2994;
                this.match(bitmarkParser.CL);
                this.state = 2998;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 2995;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3000;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3008;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3001;
                                    this.bitElem();
                                    this.state = 3005;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3002;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3007;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3010;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 373, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_bibliography() {
        let _localctx = new Book_bibliographyContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, bitmarkParser.RULE_book_bibliography);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3012;
                this.match(bitmarkParser.BitBookBibliography);
                this.state = 3013;
                this.format();
                this.state = 3014;
                this.match(bitmarkParser.CL);
                this.state = 3018;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3015;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3020;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3028;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3021;
                                    this.bitElem();
                                    this.state = 3025;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 375, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3022;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3027;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 375, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3030;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 376, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_reference_list() {
        let _localctx = new Book_reference_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, bitmarkParser.RULE_book_reference_list);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3032;
                this.match(bitmarkParser.BitBookReferenceList);
                this.state = 3033;
                this.format();
                this.state = 3034;
                this.match(bitmarkParser.CL);
                this.state = 3038;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3035;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3040;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3048;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3041;
                                    this.bitElem();
                                    this.state = 3045;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3042;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3047;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3050;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 379, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_endnotes() {
        let _localctx = new Book_endnotesContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, bitmarkParser.RULE_book_endnotes);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3052;
                this.match(bitmarkParser.BitBookEndnotes);
                this.state = 3053;
                this.format();
                this.state = 3054;
                this.match(bitmarkParser.CL);
                this.state = 3058;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3055;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3060;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3068;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3061;
                                    this.bitElem();
                                    this.state = 3065;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3062;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3067;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3070;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_notes() {
        let _localctx = new Book_notesContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, bitmarkParser.RULE_book_notes);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3072;
                this.match(bitmarkParser.BitBookNotes);
                this.state = 3073;
                this.format();
                this.state = 3074;
                this.match(bitmarkParser.CL);
                this.state = 3078;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3075;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3080;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3088;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3081;
                                    this.bitElem();
                                    this.state = 3085;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3082;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3087;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3090;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_copyright_permissions() {
        let _localctx = new Book_copyright_permissionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, bitmarkParser.RULE_book_copyright_permissions);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3092;
                this.match(bitmarkParser.BitBookCopyrightPermissions);
                this.state = 3093;
                this.format();
                this.state = 3094;
                this.match(bitmarkParser.CL);
                this.state = 3098;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3095;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3100;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3108;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3101;
                                    this.bitElem();
                                    this.state = 3105;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3102;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3107;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3110;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_teaser() {
        let _localctx = new Book_teaserContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, bitmarkParser.RULE_book_teaser);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3112;
                this.match(bitmarkParser.BitBookTeaser);
                this.state = 3113;
                this.format();
                this.state = 3114;
                this.match(bitmarkParser.CL);
                this.state = 3118;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3115;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3120;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3128;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3121;
                                    this.bitElem();
                                    this.state = 3125;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 390, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3122;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3127;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 390, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3130;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_auther_bio() {
        let _localctx = new Book_auther_bioContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, bitmarkParser.RULE_book_auther_bio);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3132;
                this.match(bitmarkParser.BitBookAutherBio);
                this.state = 3133;
                this.format();
                this.state = 3134;
                this.match(bitmarkParser.CL);
                this.state = 3138;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3135;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3140;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3148;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3141;
                                    this.bitElem();
                                    this.state = 3145;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3142;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3147;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3150;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_request_for_a_book_review() {
        let _localctx = new Book_request_for_a_book_reviewContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, bitmarkParser.RULE_book_request_for_a_book_review);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3152;
                this.match(bitmarkParser.BitBookRequestForABookReview);
                this.state = 3153;
                this.format();
                this.state = 3154;
                this.match(bitmarkParser.CL);
                this.state = 3158;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3155;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3160;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3168;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3161;
                                    this.bitElem();
                                    this.state = 3165;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3162;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3167;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3170;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_coming_soon() {
        let _localctx = new Book_coming_soonContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, bitmarkParser.RULE_book_coming_soon);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3172;
                this.match(bitmarkParser.BitBookComingSoon);
                this.state = 3173;
                this.format();
                this.state = 3174;
                this.match(bitmarkParser.CL);
                this.state = 3178;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3175;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3180;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3188;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3181;
                                    this.bitElem();
                                    this.state = 3185;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3182;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3187;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3190;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_read_more() {
        let _localctx = new Book_read_moreContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, bitmarkParser.RULE_book_read_more);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3192;
                this.match(bitmarkParser.BitBookReadMore);
                this.state = 3193;
                this.format();
                this.state = 3194;
                this.match(bitmarkParser.CL);
                this.state = 3198;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3195;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3200;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3208;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3201;
                                    this.bitElem();
                                    this.state = 3205;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3202;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3207;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3210;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_summary() {
        let _localctx = new Book_summaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 260, bitmarkParser.RULE_book_summary);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3212;
                this.match(bitmarkParser.BitBookSummary);
                this.state = 3213;
                this.format();
                this.state = 3214;
                this.match(bitmarkParser.CL);
                this.state = 3218;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3215;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3220;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3228;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3221;
                                    this.bitElem();
                                    this.state = 3225;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3222;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3227;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3230;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_epigraph() {
        let _localctx = new Book_epigraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, bitmarkParser.RULE_book_epigraph);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3232;
                this.match(bitmarkParser.BitBookEpigraph);
                this.state = 3233;
                this.format();
                this.state = 3234;
                this.match(bitmarkParser.CL);
                this.state = 3238;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3235;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3240;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3248;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3241;
                                    this.bitElem();
                                    this.state = 3245;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3242;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3247;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3250;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 409, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    code() {
        let _localctx = new CodeContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, bitmarkParser.RULE_code);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3252;
                this.match(bitmarkParser.BitCode);
                this.state = 3253;
                this.format();
                this.state = 3254;
                this.match(bitmarkParser.CL);
                this.state = 3258;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3255;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3260;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3268;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3261;
                                    this.bitElem();
                                    this.state = 3265;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3262;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3267;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3270;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 412, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    card1() {
        let _localctx = new Card1Context(this._ctx, this.state);
        this.enterRule(_localctx, 266, bitmarkParser.RULE_card1);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3272;
                this.match(bitmarkParser.BitCard1);
                this.state = 3273;
                this.format();
                this.state = 3274;
                this.match(bitmarkParser.CL);
                this.state = 3278;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3275;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3280;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3288;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3281;
                                    this.bitElem();
                                    this.state = 3285;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 414, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3282;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3287;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 414, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3290;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    question1() {
        let _localctx = new Question1Context(this._ctx, this.state);
        this.enterRule(_localctx, 268, bitmarkParser.RULE_question1);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3292;
                this.match(bitmarkParser.BitQuestion1);
                this.state = 3293;
                this.format();
                this.state = 3294;
                this.match(bitmarkParser.CL);
                this.state = 3298;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3295;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3300;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3308;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3301;
                                    this.bitElem();
                                    this.state = 3305;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3302;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3307;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3310;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    screenshot() {
        let _localctx = new ScreenshotContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, bitmarkParser.RULE_screenshot);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3312;
                this.match(bitmarkParser.BitScreenshot);
                this.state = 3313;
                this.format2();
                this.state = 3314;
                this.match(bitmarkParser.CL);
                this.state = 3318;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3315;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3320;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3328;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3321;
                                    this.bitElem();
                                    this.state = 3325;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3322;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3327;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3330;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    focus_image() {
        let _localctx = new Focus_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, bitmarkParser.RULE_focus_image);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3332;
                this.match(bitmarkParser.BitFocusImage);
                this.state = 3333;
                this.format2();
                this.state = 3334;
                this.match(bitmarkParser.CL);
                this.state = 3338;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3335;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3340;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3348;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3341;
                                    this.bitElem();
                                    this.state = 3345;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3342;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3347;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3350;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    photo() {
        let _localctx = new PhotoContext(this._ctx, this.state);
        this.enterRule(_localctx, 274, bitmarkParser.RULE_photo);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3352;
                this.match(bitmarkParser.BitPhoto);
                this.state = 3353;
                this.format2();
                this.state = 3354;
                this.match(bitmarkParser.CL);
                this.state = 3358;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3355;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3360;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3368;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3361;
                                    this.bitElem();
                                    this.state = 3365;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3362;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3367;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3370;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 427, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    browser_image() {
        let _localctx = new Browser_imageContext(this._ctx, this.state);
        this.enterRule(_localctx, 276, bitmarkParser.RULE_browser_image);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3372;
                this.match(bitmarkParser.BitBrowserImage);
                this.state = 3373;
                this.format2();
                this.state = 3374;
                this.match(bitmarkParser.CL);
                this.state = 3378;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3375;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3380;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3388;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3381;
                                    this.bitElem();
                                    this.state = 3385;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 429, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3382;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3387;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 429, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3390;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    chapter_subject_matter() {
        let _localctx = new Chapter_subject_matterContext(this._ctx, this.state);
        this.enterRule(_localctx, 278, bitmarkParser.RULE_chapter_subject_matter);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3392;
                this.match(bitmarkParser.BitChapterSubjectMatter);
                this.state = 3393;
                this.format();
                this.state = 3394;
                this.match(bitmarkParser.CL);
                this.state = 3398;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3395;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3400;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3408;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3401;
                                    this.bitElem();
                                    this.state = 3405;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3402;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3407;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3410;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    release_note() {
        let _localctx = new Release_noteContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, bitmarkParser.RULE_release_note);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3412;
                this.match(bitmarkParser.BitReleaseNote);
                this.state = 3413;
                this.format();
                this.state = 3414;
                this.match(bitmarkParser.CL);
                this.state = 3418;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3415;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3420;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3428;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3421;
                                    this.bitElem();
                                    this.state = 3425;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3422;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3427;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3430;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 436, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    conclusion() {
        let _localctx = new ConclusionContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, bitmarkParser.RULE_conclusion);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3432;
                this.match(bitmarkParser.BitConclusion);
                this.state = 3433;
                this.format();
                this.state = 3434;
                this.match(bitmarkParser.CL);
                this.state = 3438;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3435;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3440;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3448;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3441;
                                    this.bitElem();
                                    this.state = 3445;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3442;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3447;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3450;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 439, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    featured() {
        let _localctx = new FeaturedContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, bitmarkParser.RULE_featured);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3452;
                this.match(bitmarkParser.BitFeatured);
                this.state = 3453;
                this.format();
                this.state = 3454;
                this.match(bitmarkParser.CL);
                this.state = 3458;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3455;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3460;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3468;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3461;
                                    this.bitElem();
                                    this.state = 3465;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3462;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3467;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3470;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 442, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vendor_amcharts_5_chart() {
        let _localctx = new Vendor_amcharts_5_chartContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, bitmarkParser.RULE_vendor_amcharts_5_chart);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3472;
                this.match(bitmarkParser.BitVendorAmcharts5Chart);
                this.state = 3473;
                this.format2();
                this.state = 3474;
                this.match(bitmarkParser.CL);
                this.state = 3478;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3475;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3480;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3488;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3481;
                                    this.bitElem();
                                    this.state = 3485;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 444, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3482;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3487;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 444, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3490;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 445, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    newspaper_article() {
        let _localctx = new Newspaper_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, bitmarkParser.RULE_newspaper_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3492;
                this.match(bitmarkParser.BitNewspaperArticle);
                this.state = 3493;
                this.format();
                this.state = 3494;
                this.match(bitmarkParser.CL);
                this.state = 3498;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3495;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3500;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3508;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3501;
                                    this.bitElem();
                                    this.state = 3505;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 447, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3502;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3507;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 447, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3510;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    blog_article() {
        let _localctx = new Blog_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, bitmarkParser.RULE_blog_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3512;
                this.match(bitmarkParser.BitBlogArticle);
                this.state = 3513;
                this.format();
                this.state = 3514;
                this.match(bitmarkParser.CL);
                this.state = 3518;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3515;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3520;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3528;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3521;
                                    this.bitElem();
                                    this.state = 3525;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 450, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3522;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3527;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 450, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3530;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 451, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    book_article() {
        let _localctx = new Book_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, bitmarkParser.RULE_book_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3532;
                this.match(bitmarkParser.BitBookArticle);
                this.state = 3533;
                this.format();
                this.state = 3534;
                this.match(bitmarkParser.CL);
                this.state = 3538;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3535;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3540;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3548;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3541;
                                    this.bitElem();
                                    this.state = 3545;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 453, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3542;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3547;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 453, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3550;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    notebook_article() {
        let _localctx = new Notebook_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 294, bitmarkParser.RULE_notebook_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3552;
                this.match(bitmarkParser.BitNotebookArticle);
                this.state = 3553;
                this.format();
                this.state = 3554;
                this.match(bitmarkParser.CL);
                this.state = 3558;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3555;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3560;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3568;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3561;
                                    this.bitElem();
                                    this.state = 3565;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3562;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3567;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 456, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3570;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 457, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    workbook_article() {
        let _localctx = new Workbook_articleContext(this._ctx, this.state);
        this.enterRule(_localctx, 296, bitmarkParser.RULE_workbook_article);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3572;
                this.match(bitmarkParser.BitWorkbookArticle);
                this.state = 3573;
                this.format();
                this.state = 3574;
                this.match(bitmarkParser.CL);
                this.state = 3578;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3575;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3580;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3588;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3581;
                                    this.bitElem();
                                    this.state = 3585;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 459, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3582;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3587;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 459, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3590;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    message() {
        let _localctx = new MessageContext(this._ctx, this.state);
        this.enterRule(_localctx, 298, bitmarkParser.RULE_message);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3592;
                this.match(bitmarkParser.BitMessage);
                this.state = 3593;
                this.format();
                this.state = 3594;
                this.match(bitmarkParser.CL);
                this.state = 3598;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3595;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3600;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3608;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3601;
                                    this.bitElem();
                                    this.state = 3605;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 462, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 3602;
                                                    this.match(bitmarkParser.NL);
                                                }
                                            }
                                        }
                                        this.state = 3607;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 462, this._ctx);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3610;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 463, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_interview() {
        let _localctx = new Bot_interviewContext(this._ctx, this.state);
        this.enterRule(_localctx, 300, bitmarkParser.RULE_bot_interview);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3612;
                this.match(bitmarkParser.BitBotint);
                this.state = 3613;
                this.format();
                this.state = 3614;
                this.match(bitmarkParser.CL);
                this.state = 3625;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3615;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3616;
                                    this.bot_choice();
                                    this.state = 3622;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.SSPL || _la === bitmarkParser.SSPL2) {
                                        {
                                            {
                                                this.state = 3617;
                                                this.sspl();
                                                this.state = 3618;
                                                this.bot_choice();
                                            }
                                        }
                                        this.state = 3624;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3627;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 465, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 3629;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3633;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 466, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3630;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3635;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 466, this._ctx);
                }
                this.state = 3649;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 469, this._ctx)) {
                    case 1:
                        {
                            this.state = 3636;
                            this.resource();
                            this.state = 3646;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 3640;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 3637;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 3642;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 3643;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 3648;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bot_choice() {
        let _localctx = new Bot_choiceContext(this._ctx, this.state);
        this.enterRule(_localctx, 302, bitmarkParser.RULE_bot_choice);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3658;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 3658;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 470, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3651;
                                    this.words();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 3652;
                                    this.instruction();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 3653;
                                    this.audiobit();
                                }
                                break;
                            case 4:
                                {
                                    this.state = 3654;
                                    this.gap();
                                }
                                break;
                            case 5:
                                {
                                    this.state = 3655;
                                    this.choice_plus();
                                }
                                break;
                            case 6:
                                {
                                    this.state = 3656;
                                    this.choice_minus();
                                }
                                break;
                            case 7:
                                {
                                    this.state = 3657;
                                    this.choice_star();
                                }
                                break;
                        }
                    }
                    this.state = 3660;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & ((1 << (bitmarkParser.OPU - 148)) | (1 << (bitmarkParser.OPB - 148)) | (1 << (bitmarkParser.OPP - 148)) | (1 << (bitmarkParser.OPM - 148)) | (1 << (bitmarkParser.OPR - 148)) | (1 << (bitmarkParser.OPC - 148)) | (1 << (bitmarkParser.AMP - 148)) | (1 << (bitmarkParser.Greater - 148)) | (1 << (bitmarkParser.Less - 148)) | (1 << (bitmarkParser.RightAngle - 148)) | (1 << (bitmarkParser.RightArrow - 148)) | (1 << (bitmarkParser.QUOTE_INDEX - 148)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (bitmarkParser.NOTBITMARK - 184)) | (1 << (bitmarkParser.ELIPSIS - 184)) | (1 << (bitmarkParser.SENTENCE - 184)) | (1 << (bitmarkParser.BARSTRING - 184)))) !== 0) || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.OpAmpAudio - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (bitmarkParser.OpAmpAudioLink - 251)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 251)) | (1 << (bitmarkParser.BitmarkMinus - 251)) | (1 << (bitmarkParser.BitmarkPlus - 251)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    rating() {
        let _localctx = new RatingContext(this._ctx, this.state);
        this.enterRule(_localctx, 304, bitmarkParser.RULE_rating);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3662;
                this.match(bitmarkParser.BitRating);
                this.state = 3663;
                this.format();
                this.state = 3664;
                this.match(bitmarkParser.CL);
                this.state = 3668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3665;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3670;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3680;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (bitmarkParser.OPDOLL - 143)) | (1 << (bitmarkParser.OPRANGLES - 143)) | (1 << (bitmarkParser.OPRANGLEL - 143)) | (1 << (bitmarkParser.OPDANGLE - 143)) | (1 << (bitmarkParser.OPU - 143)) | (1 << (bitmarkParser.OPB - 143)) | (1 << (bitmarkParser.OPQ - 143)) | (1 << (bitmarkParser.OPA - 143)) | (1 << (bitmarkParser.OPS - 143)) | (1 << (bitmarkParser.OPHASH - 143)) | (1 << (bitmarkParser.OPC - 143)) | (1 << (bitmarkParser.COLON - 143)) | (1 << (bitmarkParser.AMP - 143)) | (1 << (bitmarkParser.Greater - 143)) | (1 << (bitmarkParser.Less - 143)) | (1 << (bitmarkParser.RightAngle - 143)) | (1 << (bitmarkParser.RightArrow - 143)) | (1 << (bitmarkParser.DBLEQ - 143)) | (1 << (bitmarkParser.QUOTE_INDEX - 143)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (bitmarkParser.DCANY - 175)) | (1 << (bitmarkParser.ArticleText - 175)) | (1 << (bitmarkParser.NUMERIC - 175)) | (1 << (bitmarkParser.STRING - 175)) | (1 << (bitmarkParser.NOTBITMARK - 175)) | (1 << (bitmarkParser.ELIPSIS - 175)) | (1 << (bitmarkParser.SENTENCE - 175)) | (1 << (bitmarkParser.BARSTRING - 175)) | (1 << (bitmarkParser.AtProgress - 175)) | (1 << (bitmarkParser.AtReference - 175)) | (1 << (bitmarkParser.AtProgressPoints - 175)) | (1 << (bitmarkParser.AtExampleWithStr - 175)) | (1 << (bitmarkParser.AtExamplecol - 175)) | (1 << (bitmarkParser.AtExamplecl - 175)) | (1 << (bitmarkParser.AtPartialAnswerS - 175)) | (1 << (bitmarkParser.AtPartialAnswer - 175)) | (1 << (bitmarkParser.AtLabeltrue - 175)) | (1 << (bitmarkParser.AtLabelfalse - 175)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (bitmarkParser.OpAtCopyright - 212)) | (1 << (bitmarkParser.OpAtIsTracked - 212)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 212)) | (1 << (bitmarkParser.AtDate - 212)) | (1 << (bitmarkParser.AmpAudio - 212)) | (1 << (bitmarkParser.AmpImage - 212)) | (1 << (bitmarkParser.AmpVideo - 212)) | (1 << (bitmarkParser.AmpArticle - 212)) | (1 << (bitmarkParser.AmpDocument - 212)) | (1 << (bitmarkParser.AmpApp - 212)) | (1 << (bitmarkParser.AmpWebsite - 212)) | (1 << (bitmarkParser.AmpStillImageFilm - 212)) | (1 << (bitmarkParser.OpAmpAudio - 212)) | (1 << (bitmarkParser.OpAmpImage - 212)) | (1 << (bitmarkParser.OpAmpImageZoom - 212)) | (1 << (bitmarkParser.OpAmpImageWAudio - 212)) | (1 << (bitmarkParser.OpAmpVideo - 212)) | (1 << (bitmarkParser.OpAmpArticle - 212)) | (1 << (bitmarkParser.OpAmpDocument - 212)) | (1 << (bitmarkParser.OpAmpApp - 212)) | (1 << (bitmarkParser.OpAmpWebsite - 212)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 212)) | (1 << (bitmarkParser.BracEnclose - 212)) | (1 << (bitmarkParser.AmpAudioLink - 212)) | (1 << (bitmarkParser.AmpImageLink - 212)))) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & ((1 << (bitmarkParser.AmpVideoLink - 244)) | (1 << (bitmarkParser.AmpArticleLink - 244)) | (1 << (bitmarkParser.AmpDocumentLink - 244)) | (1 << (bitmarkParser.AmpAppLink - 244)) | (1 << (bitmarkParser.AmpWebsiteLink - 244)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpAudioLink - 244)) | (1 << (bitmarkParser.OpAmpImageLink - 244)) | (1 << (bitmarkParser.OpAmpVideoLink - 244)) | (1 << (bitmarkParser.OpAmpArticleLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 244)) | (1 << (bitmarkParser.OpAmpAppLink - 244)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 244)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 244)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 244)) | (1 << (bitmarkParser.BitmarkMinus - 244)) | (1 << (bitmarkParser.BitmarkPlus - 244)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3671;
                            this.bitElem();
                            this.state = 3675;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3672;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3677;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3682;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3691;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3683;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3684;
                                    this.s_and_w();
                                    this.state = 3687;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3685;
                                                this.match(bitmarkParser.NL);
                                                this.state = 3686;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3689;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3693;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 476, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 3695;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3699;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3696;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3701;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
                }
                this.state = 3715;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 480, this._ctx)) {
                    case 1:
                        {
                            this.state = 3702;
                            this.resource();
                            this.state = 3712;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 479, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 3706;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 3703;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 3708;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 3709;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 3714;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 479, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bullet_item() {
        let _localctx = new Bullet_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 306, bitmarkParser.RULE_bullet_item);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3717;
                this.match(bitmarkParser.OPBUL);
                this.state = 3718;
                this.s_and_w();
                this.state = 3719;
                this.match(bitmarkParser.CL);
                this.state = 3721;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.AtPoints) {
                    {
                        this.state = 3720;
                        this.atpoint();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey() {
        let _localctx = new SurveyContext(this._ctx, this.state);
        this.enterRule(_localctx, 308, bitmarkParser.RULE_survey);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3723;
                this.match(bitmarkParser.BitSurvey);
                this.state = 3724;
                this.format();
                this.state = 3725;
                this.match(bitmarkParser.CL);
                this.state = 3729;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3726;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3731;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3741;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (bitmarkParser.OPDOLL - 143)) | (1 << (bitmarkParser.OPRANGLES - 143)) | (1 << (bitmarkParser.OPRANGLEL - 143)) | (1 << (bitmarkParser.OPDANGLE - 143)) | (1 << (bitmarkParser.OPU - 143)) | (1 << (bitmarkParser.OPB - 143)) | (1 << (bitmarkParser.OPQ - 143)) | (1 << (bitmarkParser.OPA - 143)) | (1 << (bitmarkParser.OPS - 143)) | (1 << (bitmarkParser.OPHASH - 143)) | (1 << (bitmarkParser.OPC - 143)) | (1 << (bitmarkParser.COLON - 143)) | (1 << (bitmarkParser.AMP - 143)) | (1 << (bitmarkParser.Greater - 143)) | (1 << (bitmarkParser.Less - 143)) | (1 << (bitmarkParser.RightAngle - 143)) | (1 << (bitmarkParser.RightArrow - 143)) | (1 << (bitmarkParser.DBLEQ - 143)) | (1 << (bitmarkParser.QUOTE_INDEX - 143)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (bitmarkParser.DCANY - 175)) | (1 << (bitmarkParser.ArticleText - 175)) | (1 << (bitmarkParser.NUMERIC - 175)) | (1 << (bitmarkParser.STRING - 175)) | (1 << (bitmarkParser.NOTBITMARK - 175)) | (1 << (bitmarkParser.ELIPSIS - 175)) | (1 << (bitmarkParser.SENTENCE - 175)) | (1 << (bitmarkParser.BARSTRING - 175)) | (1 << (bitmarkParser.AtProgress - 175)) | (1 << (bitmarkParser.AtReference - 175)) | (1 << (bitmarkParser.AtProgressPoints - 175)) | (1 << (bitmarkParser.AtExampleWithStr - 175)) | (1 << (bitmarkParser.AtExamplecol - 175)) | (1 << (bitmarkParser.AtExamplecl - 175)) | (1 << (bitmarkParser.AtPartialAnswerS - 175)) | (1 << (bitmarkParser.AtPartialAnswer - 175)) | (1 << (bitmarkParser.AtLabeltrue - 175)) | (1 << (bitmarkParser.AtLabelfalse - 175)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (bitmarkParser.OpAtCopyright - 212)) | (1 << (bitmarkParser.OpAtIsTracked - 212)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 212)) | (1 << (bitmarkParser.AtDate - 212)) | (1 << (bitmarkParser.AmpAudio - 212)) | (1 << (bitmarkParser.AmpImage - 212)) | (1 << (bitmarkParser.AmpVideo - 212)) | (1 << (bitmarkParser.AmpArticle - 212)) | (1 << (bitmarkParser.AmpDocument - 212)) | (1 << (bitmarkParser.AmpApp - 212)) | (1 << (bitmarkParser.AmpWebsite - 212)) | (1 << (bitmarkParser.AmpStillImageFilm - 212)) | (1 << (bitmarkParser.OpAmpAudio - 212)) | (1 << (bitmarkParser.OpAmpImage - 212)) | (1 << (bitmarkParser.OpAmpImageZoom - 212)) | (1 << (bitmarkParser.OpAmpImageWAudio - 212)) | (1 << (bitmarkParser.OpAmpVideo - 212)) | (1 << (bitmarkParser.OpAmpArticle - 212)) | (1 << (bitmarkParser.OpAmpDocument - 212)) | (1 << (bitmarkParser.OpAmpApp - 212)) | (1 << (bitmarkParser.OpAmpWebsite - 212)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 212)) | (1 << (bitmarkParser.BracEnclose - 212)) | (1 << (bitmarkParser.AmpAudioLink - 212)) | (1 << (bitmarkParser.AmpImageLink - 212)))) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & ((1 << (bitmarkParser.AmpVideoLink - 244)) | (1 << (bitmarkParser.AmpArticleLink - 244)) | (1 << (bitmarkParser.AmpDocumentLink - 244)) | (1 << (bitmarkParser.AmpAppLink - 244)) | (1 << (bitmarkParser.AmpWebsiteLink - 244)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpAudioLink - 244)) | (1 << (bitmarkParser.OpAmpImageLink - 244)) | (1 << (bitmarkParser.OpAmpVideoLink - 244)) | (1 << (bitmarkParser.OpAmpArticleLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 244)) | (1 << (bitmarkParser.OpAmpAppLink - 244)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 244)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 244)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 244)) | (1 << (bitmarkParser.BitmarkMinus - 244)) | (1 << (bitmarkParser.BitmarkPlus - 244)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3732;
                            this.bitElem();
                            this.state = 3736;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3733;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3738;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3743;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3759;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3744;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3746;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                                        {
                                            this.state = 3745;
                                            this.s_and_w();
                                        }
                                    }
                                    this.state = 3755;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3751;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 3748;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 3753;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 3754;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3757;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3761;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 3763;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey_1() {
        let _localctx = new Survey_1Context(this._ctx, this.state);
        this.enterRule(_localctx, 310, bitmarkParser.RULE_survey_1);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3765;
                this.match(bitmarkParser.BitSurvey1);
                this.state = 3766;
                this.format();
                this.state = 3767;
                this.match(bitmarkParser.CL);
                this.state = 3771;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3768;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3773;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3783;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (bitmarkParser.OPDOLL - 143)) | (1 << (bitmarkParser.OPRANGLES - 143)) | (1 << (bitmarkParser.OPRANGLEL - 143)) | (1 << (bitmarkParser.OPDANGLE - 143)) | (1 << (bitmarkParser.OPU - 143)) | (1 << (bitmarkParser.OPB - 143)) | (1 << (bitmarkParser.OPQ - 143)) | (1 << (bitmarkParser.OPA - 143)) | (1 << (bitmarkParser.OPS - 143)) | (1 << (bitmarkParser.OPHASH - 143)) | (1 << (bitmarkParser.OPC - 143)) | (1 << (bitmarkParser.COLON - 143)) | (1 << (bitmarkParser.AMP - 143)) | (1 << (bitmarkParser.Greater - 143)) | (1 << (bitmarkParser.Less - 143)) | (1 << (bitmarkParser.RightAngle - 143)) | (1 << (bitmarkParser.RightArrow - 143)) | (1 << (bitmarkParser.DBLEQ - 143)) | (1 << (bitmarkParser.QUOTE_INDEX - 143)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (bitmarkParser.DCANY - 175)) | (1 << (bitmarkParser.ArticleText - 175)) | (1 << (bitmarkParser.NUMERIC - 175)) | (1 << (bitmarkParser.STRING - 175)) | (1 << (bitmarkParser.NOTBITMARK - 175)) | (1 << (bitmarkParser.ELIPSIS - 175)) | (1 << (bitmarkParser.SENTENCE - 175)) | (1 << (bitmarkParser.BARSTRING - 175)) | (1 << (bitmarkParser.AtProgress - 175)) | (1 << (bitmarkParser.AtReference - 175)) | (1 << (bitmarkParser.AtProgressPoints - 175)) | (1 << (bitmarkParser.AtExampleWithStr - 175)) | (1 << (bitmarkParser.AtExamplecol - 175)) | (1 << (bitmarkParser.AtExamplecl - 175)) | (1 << (bitmarkParser.AtPartialAnswerS - 175)) | (1 << (bitmarkParser.AtPartialAnswer - 175)) | (1 << (bitmarkParser.AtLabeltrue - 175)) | (1 << (bitmarkParser.AtLabelfalse - 175)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (bitmarkParser.OpAtCopyright - 212)) | (1 << (bitmarkParser.OpAtIsTracked - 212)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 212)) | (1 << (bitmarkParser.AtDate - 212)) | (1 << (bitmarkParser.AmpAudio - 212)) | (1 << (bitmarkParser.AmpImage - 212)) | (1 << (bitmarkParser.AmpVideo - 212)) | (1 << (bitmarkParser.AmpArticle - 212)) | (1 << (bitmarkParser.AmpDocument - 212)) | (1 << (bitmarkParser.AmpApp - 212)) | (1 << (bitmarkParser.AmpWebsite - 212)) | (1 << (bitmarkParser.AmpStillImageFilm - 212)) | (1 << (bitmarkParser.OpAmpAudio - 212)) | (1 << (bitmarkParser.OpAmpImage - 212)) | (1 << (bitmarkParser.OpAmpImageZoom - 212)) | (1 << (bitmarkParser.OpAmpImageWAudio - 212)) | (1 << (bitmarkParser.OpAmpVideo - 212)) | (1 << (bitmarkParser.OpAmpArticle - 212)) | (1 << (bitmarkParser.OpAmpDocument - 212)) | (1 << (bitmarkParser.OpAmpApp - 212)) | (1 << (bitmarkParser.OpAmpWebsite - 212)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 212)) | (1 << (bitmarkParser.BracEnclose - 212)) | (1 << (bitmarkParser.AmpAudioLink - 212)) | (1 << (bitmarkParser.AmpImageLink - 212)))) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & ((1 << (bitmarkParser.AmpVideoLink - 244)) | (1 << (bitmarkParser.AmpArticleLink - 244)) | (1 << (bitmarkParser.AmpDocumentLink - 244)) | (1 << (bitmarkParser.AmpAppLink - 244)) | (1 << (bitmarkParser.AmpWebsiteLink - 244)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpAudioLink - 244)) | (1 << (bitmarkParser.OpAmpImageLink - 244)) | (1 << (bitmarkParser.OpAmpVideoLink - 244)) | (1 << (bitmarkParser.OpAmpArticleLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 244)) | (1 << (bitmarkParser.OpAmpAppLink - 244)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 244)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 244)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 244)) | (1 << (bitmarkParser.BitmarkMinus - 244)) | (1 << (bitmarkParser.BitmarkPlus - 244)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3774;
                            this.bitElem();
                            this.state = 3778;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3775;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3780;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3785;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3794;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3786;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3787;
                                    this.s_and_w();
                                    this.state = 3790;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3788;
                                                this.match(bitmarkParser.NL);
                                                this.state = 3789;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3792;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3796;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 493, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 3798;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey_anonymous() {
        let _localctx = new Survey_anonymousContext(this._ctx, this.state);
        this.enterRule(_localctx, 312, bitmarkParser.RULE_survey_anonymous);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3800;
                this.match(bitmarkParser.BitSurveyanon);
                this.state = 3801;
                this.format();
                this.state = 3802;
                this.match(bitmarkParser.CL);
                this.state = 3806;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3803;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3808;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3818;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (bitmarkParser.OPDOLL - 143)) | (1 << (bitmarkParser.OPRANGLES - 143)) | (1 << (bitmarkParser.OPRANGLEL - 143)) | (1 << (bitmarkParser.OPDANGLE - 143)) | (1 << (bitmarkParser.OPU - 143)) | (1 << (bitmarkParser.OPB - 143)) | (1 << (bitmarkParser.OPQ - 143)) | (1 << (bitmarkParser.OPA - 143)) | (1 << (bitmarkParser.OPS - 143)) | (1 << (bitmarkParser.OPHASH - 143)) | (1 << (bitmarkParser.OPC - 143)) | (1 << (bitmarkParser.COLON - 143)) | (1 << (bitmarkParser.AMP - 143)) | (1 << (bitmarkParser.Greater - 143)) | (1 << (bitmarkParser.Less - 143)) | (1 << (bitmarkParser.RightAngle - 143)) | (1 << (bitmarkParser.RightArrow - 143)) | (1 << (bitmarkParser.DBLEQ - 143)) | (1 << (bitmarkParser.QUOTE_INDEX - 143)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (bitmarkParser.DCANY - 175)) | (1 << (bitmarkParser.ArticleText - 175)) | (1 << (bitmarkParser.NUMERIC - 175)) | (1 << (bitmarkParser.STRING - 175)) | (1 << (bitmarkParser.NOTBITMARK - 175)) | (1 << (bitmarkParser.ELIPSIS - 175)) | (1 << (bitmarkParser.SENTENCE - 175)) | (1 << (bitmarkParser.BARSTRING - 175)) | (1 << (bitmarkParser.AtProgress - 175)) | (1 << (bitmarkParser.AtReference - 175)) | (1 << (bitmarkParser.AtProgressPoints - 175)) | (1 << (bitmarkParser.AtExampleWithStr - 175)) | (1 << (bitmarkParser.AtExamplecol - 175)) | (1 << (bitmarkParser.AtExamplecl - 175)) | (1 << (bitmarkParser.AtPartialAnswerS - 175)) | (1 << (bitmarkParser.AtPartialAnswer - 175)) | (1 << (bitmarkParser.AtLabeltrue - 175)) | (1 << (bitmarkParser.AtLabelfalse - 175)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (bitmarkParser.OpAtCopyright - 212)) | (1 << (bitmarkParser.OpAtIsTracked - 212)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 212)) | (1 << (bitmarkParser.AtDate - 212)) | (1 << (bitmarkParser.AmpAudio - 212)) | (1 << (bitmarkParser.AmpImage - 212)) | (1 << (bitmarkParser.AmpVideo - 212)) | (1 << (bitmarkParser.AmpArticle - 212)) | (1 << (bitmarkParser.AmpDocument - 212)) | (1 << (bitmarkParser.AmpApp - 212)) | (1 << (bitmarkParser.AmpWebsite - 212)) | (1 << (bitmarkParser.AmpStillImageFilm - 212)) | (1 << (bitmarkParser.OpAmpAudio - 212)) | (1 << (bitmarkParser.OpAmpImage - 212)) | (1 << (bitmarkParser.OpAmpImageZoom - 212)) | (1 << (bitmarkParser.OpAmpImageWAudio - 212)) | (1 << (bitmarkParser.OpAmpVideo - 212)) | (1 << (bitmarkParser.OpAmpArticle - 212)) | (1 << (bitmarkParser.OpAmpDocument - 212)) | (1 << (bitmarkParser.OpAmpApp - 212)) | (1 << (bitmarkParser.OpAmpWebsite - 212)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 212)) | (1 << (bitmarkParser.BracEnclose - 212)) | (1 << (bitmarkParser.AmpAudioLink - 212)) | (1 << (bitmarkParser.AmpImageLink - 212)))) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & ((1 << (bitmarkParser.AmpVideoLink - 244)) | (1 << (bitmarkParser.AmpArticleLink - 244)) | (1 << (bitmarkParser.AmpDocumentLink - 244)) | (1 << (bitmarkParser.AmpAppLink - 244)) | (1 << (bitmarkParser.AmpWebsiteLink - 244)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpAudioLink - 244)) | (1 << (bitmarkParser.OpAmpImageLink - 244)) | (1 << (bitmarkParser.OpAmpVideoLink - 244)) | (1 << (bitmarkParser.OpAmpArticleLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 244)) | (1 << (bitmarkParser.OpAmpAppLink - 244)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 244)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 244)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 244)) | (1 << (bitmarkParser.BitmarkMinus - 244)) | (1 << (bitmarkParser.BitmarkPlus - 244)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3809;
                            this.bitElem();
                            this.state = 3813;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3810;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3815;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3820;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3829;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3821;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3822;
                                    this.s_and_w();
                                    this.state = 3825;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3823;
                                                this.match(bitmarkParser.NL);
                                                this.state = 3824;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3827;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3831;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 498, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 3833;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    survey_anonymous_1() {
        let _localctx = new Survey_anonymous_1Context(this._ctx, this.state);
        this.enterRule(_localctx, 314, bitmarkParser.RULE_survey_anonymous_1);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3835;
                this.match(bitmarkParser.BitSurveyanon1);
                this.state = 3836;
                this.format();
                this.state = 3837;
                this.match(bitmarkParser.CL);
                this.state = 3841;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3838;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3843;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3853;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (bitmarkParser.OPDOLL - 143)) | (1 << (bitmarkParser.OPRANGLES - 143)) | (1 << (bitmarkParser.OPRANGLEL - 143)) | (1 << (bitmarkParser.OPDANGLE - 143)) | (1 << (bitmarkParser.OPU - 143)) | (1 << (bitmarkParser.OPB - 143)) | (1 << (bitmarkParser.OPQ - 143)) | (1 << (bitmarkParser.OPA - 143)) | (1 << (bitmarkParser.OPS - 143)) | (1 << (bitmarkParser.OPHASH - 143)) | (1 << (bitmarkParser.OPC - 143)) | (1 << (bitmarkParser.COLON - 143)) | (1 << (bitmarkParser.AMP - 143)) | (1 << (bitmarkParser.Greater - 143)) | (1 << (bitmarkParser.Less - 143)) | (1 << (bitmarkParser.RightAngle - 143)) | (1 << (bitmarkParser.RightArrow - 143)) | (1 << (bitmarkParser.DBLEQ - 143)) | (1 << (bitmarkParser.QUOTE_INDEX - 143)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (bitmarkParser.DCANY - 175)) | (1 << (bitmarkParser.ArticleText - 175)) | (1 << (bitmarkParser.NUMERIC - 175)) | (1 << (bitmarkParser.STRING - 175)) | (1 << (bitmarkParser.NOTBITMARK - 175)) | (1 << (bitmarkParser.ELIPSIS - 175)) | (1 << (bitmarkParser.SENTENCE - 175)) | (1 << (bitmarkParser.BARSTRING - 175)) | (1 << (bitmarkParser.AtProgress - 175)) | (1 << (bitmarkParser.AtReference - 175)) | (1 << (bitmarkParser.AtProgressPoints - 175)) | (1 << (bitmarkParser.AtExampleWithStr - 175)) | (1 << (bitmarkParser.AtExamplecol - 175)) | (1 << (bitmarkParser.AtExamplecl - 175)) | (1 << (bitmarkParser.AtPartialAnswerS - 175)) | (1 << (bitmarkParser.AtPartialAnswer - 175)) | (1 << (bitmarkParser.AtLabeltrue - 175)) | (1 << (bitmarkParser.AtLabelfalse - 175)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (bitmarkParser.OpAtCopyright - 212)) | (1 << (bitmarkParser.OpAtIsTracked - 212)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 212)) | (1 << (bitmarkParser.AtDate - 212)) | (1 << (bitmarkParser.AmpAudio - 212)) | (1 << (bitmarkParser.AmpImage - 212)) | (1 << (bitmarkParser.AmpVideo - 212)) | (1 << (bitmarkParser.AmpArticle - 212)) | (1 << (bitmarkParser.AmpDocument - 212)) | (1 << (bitmarkParser.AmpApp - 212)) | (1 << (bitmarkParser.AmpWebsite - 212)) | (1 << (bitmarkParser.AmpStillImageFilm - 212)) | (1 << (bitmarkParser.OpAmpAudio - 212)) | (1 << (bitmarkParser.OpAmpImage - 212)) | (1 << (bitmarkParser.OpAmpImageZoom - 212)) | (1 << (bitmarkParser.OpAmpImageWAudio - 212)) | (1 << (bitmarkParser.OpAmpVideo - 212)) | (1 << (bitmarkParser.OpAmpArticle - 212)) | (1 << (bitmarkParser.OpAmpDocument - 212)) | (1 << (bitmarkParser.OpAmpApp - 212)) | (1 << (bitmarkParser.OpAmpWebsite - 212)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 212)) | (1 << (bitmarkParser.BracEnclose - 212)) | (1 << (bitmarkParser.AmpAudioLink - 212)) | (1 << (bitmarkParser.AmpImageLink - 212)))) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & ((1 << (bitmarkParser.AmpVideoLink - 244)) | (1 << (bitmarkParser.AmpArticleLink - 244)) | (1 << (bitmarkParser.AmpDocumentLink - 244)) | (1 << (bitmarkParser.AmpAppLink - 244)) | (1 << (bitmarkParser.AmpWebsiteLink - 244)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpAudioLink - 244)) | (1 << (bitmarkParser.OpAmpImageLink - 244)) | (1 << (bitmarkParser.OpAmpVideoLink - 244)) | (1 << (bitmarkParser.OpAmpArticleLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 244)) | (1 << (bitmarkParser.OpAmpAppLink - 244)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 244)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 244)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 244)) | (1 << (bitmarkParser.BitmarkMinus - 244)) | (1 << (bitmarkParser.BitmarkPlus - 244)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3844;
                            this.bitElem();
                            this.state = 3848;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3845;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3850;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3855;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3864;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3856;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3857;
                                    this.s_and_w();
                                    this.state = 3860;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3858;
                                                this.match(bitmarkParser.NL);
                                                this.state = 3859;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3862;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3866;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 503, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 3868;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    self_assessment() {
        let _localctx = new Self_assessmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 316, bitmarkParser.RULE_self_assessment);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3870;
                this.match(bitmarkParser.BitSelfassess);
                this.state = 3871;
                this.format();
                this.state = 3872;
                this.match(bitmarkParser.CL);
                this.state = 3876;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.NL) {
                    {
                        {
                            this.state = 3873;
                            this.match(bitmarkParser.NL);
                        }
                    }
                    this.state = 3878;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3888;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (bitmarkParser.OPDOLL - 143)) | (1 << (bitmarkParser.OPRANGLES - 143)) | (1 << (bitmarkParser.OPRANGLEL - 143)) | (1 << (bitmarkParser.OPDANGLE - 143)) | (1 << (bitmarkParser.OPU - 143)) | (1 << (bitmarkParser.OPB - 143)) | (1 << (bitmarkParser.OPQ - 143)) | (1 << (bitmarkParser.OPA - 143)) | (1 << (bitmarkParser.OPS - 143)) | (1 << (bitmarkParser.OPHASH - 143)) | (1 << (bitmarkParser.OPC - 143)) | (1 << (bitmarkParser.COLON - 143)) | (1 << (bitmarkParser.AMP - 143)) | (1 << (bitmarkParser.Greater - 143)) | (1 << (bitmarkParser.Less - 143)) | (1 << (bitmarkParser.RightAngle - 143)) | (1 << (bitmarkParser.RightArrow - 143)) | (1 << (bitmarkParser.DBLEQ - 143)) | (1 << (bitmarkParser.QUOTE_INDEX - 143)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (bitmarkParser.DCANY - 175)) | (1 << (bitmarkParser.ArticleText - 175)) | (1 << (bitmarkParser.NUMERIC - 175)) | (1 << (bitmarkParser.STRING - 175)) | (1 << (bitmarkParser.NOTBITMARK - 175)) | (1 << (bitmarkParser.ELIPSIS - 175)) | (1 << (bitmarkParser.SENTENCE - 175)) | (1 << (bitmarkParser.BARSTRING - 175)) | (1 << (bitmarkParser.AtProgress - 175)) | (1 << (bitmarkParser.AtReference - 175)) | (1 << (bitmarkParser.AtProgressPoints - 175)) | (1 << (bitmarkParser.AtExampleWithStr - 175)) | (1 << (bitmarkParser.AtExamplecol - 175)) | (1 << (bitmarkParser.AtExamplecl - 175)) | (1 << (bitmarkParser.AtPartialAnswerS - 175)) | (1 << (bitmarkParser.AtPartialAnswer - 175)) | (1 << (bitmarkParser.AtLabeltrue - 175)) | (1 << (bitmarkParser.AtLabelfalse - 175)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (bitmarkParser.OpAtCopyright - 212)) | (1 << (bitmarkParser.OpAtIsTracked - 212)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 212)) | (1 << (bitmarkParser.AtDate - 212)) | (1 << (bitmarkParser.AmpAudio - 212)) | (1 << (bitmarkParser.AmpImage - 212)) | (1 << (bitmarkParser.AmpVideo - 212)) | (1 << (bitmarkParser.AmpArticle - 212)) | (1 << (bitmarkParser.AmpDocument - 212)) | (1 << (bitmarkParser.AmpApp - 212)) | (1 << (bitmarkParser.AmpWebsite - 212)) | (1 << (bitmarkParser.AmpStillImageFilm - 212)) | (1 << (bitmarkParser.OpAmpAudio - 212)) | (1 << (bitmarkParser.OpAmpImage - 212)) | (1 << (bitmarkParser.OpAmpImageZoom - 212)) | (1 << (bitmarkParser.OpAmpImageWAudio - 212)) | (1 << (bitmarkParser.OpAmpVideo - 212)) | (1 << (bitmarkParser.OpAmpArticle - 212)) | (1 << (bitmarkParser.OpAmpDocument - 212)) | (1 << (bitmarkParser.OpAmpApp - 212)) | (1 << (bitmarkParser.OpAmpWebsite - 212)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 212)) | (1 << (bitmarkParser.BracEnclose - 212)) | (1 << (bitmarkParser.AmpAudioLink - 212)) | (1 << (bitmarkParser.AmpImageLink - 212)))) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & ((1 << (bitmarkParser.AmpVideoLink - 244)) | (1 << (bitmarkParser.AmpArticleLink - 244)) | (1 << (bitmarkParser.AmpDocumentLink - 244)) | (1 << (bitmarkParser.AmpAppLink - 244)) | (1 << (bitmarkParser.AmpWebsiteLink - 244)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpAudioLink - 244)) | (1 << (bitmarkParser.OpAmpImageLink - 244)) | (1 << (bitmarkParser.OpAmpVideoLink - 244)) | (1 << (bitmarkParser.OpAmpArticleLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentLink - 244)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 244)) | (1 << (bitmarkParser.OpAmpAppLink - 244)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 244)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 244)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 244)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 244)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 244)) | (1 << (bitmarkParser.BitmarkMinus - 244)) | (1 << (bitmarkParser.BitmarkPlus - 244)))) !== 0) || _la === bitmarkParser.URL || _la === bitmarkParser.LIST_LINE) {
                    {
                        {
                            this.state = 3879;
                            this.bitElem();
                            this.state = 3883;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === bitmarkParser.NL) {
                                {
                                    {
                                        this.state = 3880;
                                        this.match(bitmarkParser.NL);
                                    }
                                }
                                this.state = 3885;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    this.state = 3890;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3904;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3891;
                                    _la = this._input.LA(1);
                                    if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 3892;
                                    this.self_assess_s_and_w();
                                    this.state = 3900;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 3896;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === bitmarkParser.NL) {
                                                    {
                                                        {
                                                            this.state = 3893;
                                                            this.match(bitmarkParser.NL);
                                                        }
                                                    }
                                                    this.state = 3898;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                                this.state = 3899;
                                                this.bullet_item();
                                            }
                                        }
                                        this.state = 3902;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.OPBUL || _la === bitmarkParser.NL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3906;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 509, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 3908;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.HSPL || _la === bitmarkParser.HSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3912;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 510, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3909;
                                this.match(bitmarkParser.NL);
                            }
                        }
                    }
                    this.state = 3914;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 510, this._ctx);
                }
                this.state = 3928;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 513, this._ctx)) {
                    case 1:
                        {
                            this.state = 3915;
                            this.resource();
                            this.state = 3925;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 512, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 3919;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === bitmarkParser.NL) {
                                                {
                                                    {
                                                        this.state = 3916;
                                                        this.match(bitmarkParser.NL);
                                                    }
                                                }
                                                this.state = 3921;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 3922;
                                            this.resource();
                                        }
                                    }
                                }
                                this.state = 3927;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 512, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    self_assess_s_and_w() {
        let _localctx = new Self_assess_s_and_wContext(this._ctx, this.state);
        this.enterRule(_localctx, 318, bitmarkParser.RULE_self_assess_s_and_w);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3931;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3930;
                                    _la = this._input.LA(1);
                                    if (_la <= 0 || (_la === bitmarkParser.OPBUL)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3933;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 514, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    atpoint() {
        let _localctx = new AtpointContext(this._ctx, this.state);
        this.enterRule(_localctx, 320, bitmarkParser.RULE_atpoint);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3935;
                this.match(bitmarkParser.AtPoints);
                this.state = 3936;
                this.match(bitmarkParser.NUMERIC);
                this.state = 3937;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    format() {
        let _localctx = new FormatContext(this._ctx, this.state);
        this.enterRule(_localctx, 322, bitmarkParser.RULE_format);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3942;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 515, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3939;
                                this.resource_format();
                            }
                        }
                    }
                    this.state = 3944;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 515, this._ctx);
                }
                this.state = 3950;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpImageZoom - 219)) | (1 << (bitmarkParser.AmpImageWAudio - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpPdf - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpDocumentDownload - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (bitmarkParser.AmpVideoEmbed - 261)) | (1 << (bitmarkParser.AmpDocumentEmbed - 261)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 261)) | (1 << (bitmarkParser.ColonText - 261)) | (1 << (bitmarkParser.ColonJson - 261)))) !== 0)) {
                    {
                        this.state = 3948;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.ColonText:
                                {
                                    this.state = 3945;
                                    this.match(bitmarkParser.ColonText);
                                }
                                break;
                            case bitmarkParser.ColonJson:
                                {
                                    this.state = 3946;
                                    this.match(bitmarkParser.ColonJson);
                                }
                                break;
                            case bitmarkParser.AmpAudio:
                            case bitmarkParser.AmpImage:
                            case bitmarkParser.AmpImageZoom:
                            case bitmarkParser.AmpImageWAudio:
                            case bitmarkParser.AmpVideo:
                            case bitmarkParser.AmpArticle:
                            case bitmarkParser.AmpDocument:
                            case bitmarkParser.AmpApp:
                            case bitmarkParser.AmpWebsite:
                            case bitmarkParser.AmpStillImageFilm:
                            case bitmarkParser.AmpPdf:
                            case bitmarkParser.AmpAudioLink:
                            case bitmarkParser.AmpImageLink:
                            case bitmarkParser.AmpVideoLink:
                            case bitmarkParser.AmpArticleLink:
                            case bitmarkParser.AmpDocumentLink:
                            case bitmarkParser.AmpDocumentDownload:
                            case bitmarkParser.AmpAppLink:
                            case bitmarkParser.AmpWebsiteLink:
                            case bitmarkParser.AmpStillImageFilmLink:
                            case bitmarkParser.AmpVideoEmbed:
                            case bitmarkParser.AmpDocumentEmbed:
                            case bitmarkParser.AmpStillImageFilmEmbed:
                                {
                                    this.state = 3947;
                                    this.resource_format_extra();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 3952;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource_format() {
        let _localctx = new Resource_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 324, bitmarkParser.RULE_resource_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3953;
                _la = this._input.LA(1);
                if (!(((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.AmpArticle - 224)) | (1 << (bitmarkParser.AmpDocument - 224)) | (1 << (bitmarkParser.AmpWebsite - 224)) | (1 << (bitmarkParser.AmpStillImageFilm - 224)) | (1 << (bitmarkParser.AmpAudioLink - 224)) | (1 << (bitmarkParser.AmpImageLink - 224)) | (1 << (bitmarkParser.AmpVideoLink - 224)) | (1 << (bitmarkParser.AmpArticleLink - 224)) | (1 << (bitmarkParser.AmpDocumentLink - 224)) | (1 << (bitmarkParser.AmpDocumentDownload - 224)) | (1 << (bitmarkParser.AmpAppLink - 224)) | (1 << (bitmarkParser.AmpWebsiteLink - 224)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 224)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (bitmarkParser.AmpVideoEmbed - 261)) | (1 << (bitmarkParser.AmpAudioEmbed - 261)) | (1 << (bitmarkParser.AmpDocumentEmbed - 261)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 261)) | (1 << (bitmarkParser.BitmarkMinus - 261)) | (1 << (bitmarkParser.BitmarkPlus - 261)) | (1 << (bitmarkParser.ColonJson - 261)) | (1 << (bitmarkParser.Prosemirror - 261)) | (1 << (bitmarkParser.Placeholder - 261)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource_format_extra() {
        let _localctx = new Resource_format_extraContext(this._ctx, this.state);
        this.enterRule(_localctx, 326, bitmarkParser.RULE_resource_format_extra);
        try {
            this.state = 3964;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AmpImage:
                case bitmarkParser.AmpImageZoom:
                case bitmarkParser.AmpImageWAudio:
                case bitmarkParser.AmpImageLink:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3955;
                        this.image_format();
                    }
                    break;
                case bitmarkParser.AmpAudio:
                case bitmarkParser.AmpAudioLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3956;
                        this.audio_format();
                    }
                    break;
                case bitmarkParser.AmpVideo:
                case bitmarkParser.AmpVideoLink:
                case bitmarkParser.AmpVideoEmbed:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3957;
                        this.video_format();
                    }
                    break;
                case bitmarkParser.AmpArticle:
                case bitmarkParser.AmpArticleLink:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3958;
                        this.article_format();
                    }
                    break;
                case bitmarkParser.AmpDocument:
                case bitmarkParser.AmpDocumentLink:
                case bitmarkParser.AmpDocumentDownload:
                case bitmarkParser.AmpDocumentEmbed:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3959;
                        this.document_format();
                    }
                    break;
                case bitmarkParser.AmpApp:
                case bitmarkParser.AmpAppLink:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 3960;
                        this.app_format();
                    }
                    break;
                case bitmarkParser.AmpWebsite:
                case bitmarkParser.AmpWebsiteLink:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 3961;
                        this.website_format();
                    }
                    break;
                case bitmarkParser.AmpStillImageFilm:
                case bitmarkParser.AmpStillImageFilmLink:
                case bitmarkParser.AmpStillImageFilmEmbed:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 3962;
                        this.stillimagefilm_format();
                    }
                    break;
                case bitmarkParser.AmpPdf:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 3963;
                        this.match(bitmarkParser.AmpPdf);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    format2() {
        let _localctx = new Format2Context(this._ctx, this.state);
        this.enterRule(_localctx, 328, bitmarkParser.RULE_format2);
        try {
            this.state = 3971;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.BitmarkMinus:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3966;
                        this.match(bitmarkParser.BitmarkMinus);
                    }
                    break;
                case bitmarkParser.BitmarkPlus:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3967;
                        this.match(bitmarkParser.BitmarkPlus);
                    }
                    break;
                case bitmarkParser.ColonText:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3968;
                        this.match(bitmarkParser.ColonText);
                    }
                    break;
                case bitmarkParser.ColonJson:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3969;
                        this.match(bitmarkParser.ColonJson);
                    }
                    break;
                case bitmarkParser.CL:
                    this.enterOuterAlt(_localctx, 5);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_format() {
        let _localctx = new Image_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 330, bitmarkParser.RULE_image_format);
        let _la;
        try {
            this.state = 3987;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AmpImage:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3973;
                        this.match(bitmarkParser.AmpImage);
                        this.state = 3976;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.Image_type:
                                {
                                    {
                                        this.state = 3974;
                                        this.match(bitmarkParser.Image_type);
                                    }
                                }
                                break;
                            case bitmarkParser.DotArticleAtt:
                                {
                                    {
                                        this.state = 3975;
                                        this.match(bitmarkParser.DotArticleAtt);
                                    }
                                }
                                break;
                            case bitmarkParser.CL:
                            case bitmarkParser.AmpAudio:
                            case bitmarkParser.AmpImage:
                            case bitmarkParser.AmpImageZoom:
                            case bitmarkParser.AmpImageWAudio:
                            case bitmarkParser.AmpVideo:
                            case bitmarkParser.AmpArticle:
                            case bitmarkParser.AmpDocument:
                            case bitmarkParser.AmpApp:
                            case bitmarkParser.AmpWebsite:
                            case bitmarkParser.AmpStillImageFilm:
                            case bitmarkParser.AmpPdf:
                            case bitmarkParser.AmpAudioLink:
                            case bitmarkParser.AmpImageLink:
                            case bitmarkParser.AmpVideoLink:
                            case bitmarkParser.AmpArticleLink:
                            case bitmarkParser.AmpDocumentLink:
                            case bitmarkParser.AmpDocumentDownload:
                            case bitmarkParser.AmpAppLink:
                            case bitmarkParser.AmpWebsiteLink:
                            case bitmarkParser.AmpStillImageFilmLink:
                            case bitmarkParser.AmpVideoEmbed:
                            case bitmarkParser.AmpDocumentEmbed:
                            case bitmarkParser.AmpStillImageFilmEmbed:
                            case bitmarkParser.ColonText:
                            case bitmarkParser.ColonJson:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case bitmarkParser.AmpImageLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3978;
                        this.match(bitmarkParser.AmpImageLink);
                        this.state = 3980;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 3979;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.AmpImageZoom:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3982;
                        this.match(bitmarkParser.AmpImageZoom);
                        this.state = 3984;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 3983;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.AmpImageWAudio:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3986;
                        this.match(bitmarkParser.AmpImageWAudio);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    video_format() {
        let _localctx = new Video_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 332, bitmarkParser.RULE_video_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3989;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpVideo || _la === bitmarkParser.AmpVideoLink || _la === bitmarkParser.AmpVideoEmbed)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3992;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.COLON) {
                    {
                        this.state = 3990;
                        this.match(bitmarkParser.COLON);
                        this.state = 3991;
                        this.match(bitmarkParser.Video_type);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    article_format() {
        let _localctx = new Article_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 334, bitmarkParser.RULE_article_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3994;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpArticle || _la === bitmarkParser.AmpArticleLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    document_format() {
        let _localctx = new Document_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 336, bitmarkParser.RULE_document_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3996;
                _la = this._input.LA(1);
                if (!(((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (bitmarkParser.AmpDocument - 225)) | (1 << (bitmarkParser.AmpDocumentLink - 225)) | (1 << (bitmarkParser.AmpDocumentDownload - 225)))) !== 0) || _la === bitmarkParser.AmpDocumentEmbed)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    app_format() {
        let _localctx = new App_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 338, bitmarkParser.RULE_app_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3998;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpApp || _la === bitmarkParser.AmpAppLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    website_format() {
        let _localctx = new Website_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 340, bitmarkParser.RULE_website_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4000;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpWebsite || _la === bitmarkParser.AmpWebsiteLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stillimagefilm_format() {
        let _localctx = new Stillimagefilm_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 342, bitmarkParser.RULE_stillimagefilm_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4002;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.AmpStillImageFilm || _la === bitmarkParser.AmpStillImageFilmLink || _la === bitmarkParser.AmpStillImageFilmEmbed)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_article_format() {
        let _localctx = new Op_article_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 344, bitmarkParser.RULE_op_article_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4004;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.OpAmpArticle || _la === bitmarkParser.OpAmpArticleLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_document_format() {
        let _localctx = new Op_document_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 346, bitmarkParser.RULE_op_document_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4006;
                _la = this._input.LA(1);
                if (!(((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (bitmarkParser.OpAmpDocument - 237)) | (1 << (bitmarkParser.OpAmpDocumentLink - 237)) | (1 << (bitmarkParser.OpAmpDocumentDownload - 237)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 237)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_app_format() {
        let _localctx = new Op_app_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 348, bitmarkParser.RULE_op_app_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4008;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.OpAmpApp || _la === bitmarkParser.OpAmpAppLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_website_format() {
        let _localctx = new Op_website_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 350, bitmarkParser.RULE_op_website_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4010;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.OpAmpWebsite || _la === bitmarkParser.OpAmpWebsiteLink)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_video_format() {
        let _localctx = new Op_video_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 352, bitmarkParser.RULE_op_video_format);
        try {
            this.state = 4027;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpVideo:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4012;
                        this.match(bitmarkParser.OpAmpVideo);
                        this.state = 4015;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 525, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4013;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4014;
                                    this.match(bitmarkParser.Video_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpVideoLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4017;
                        this.match(bitmarkParser.OpAmpVideoLink);
                        this.state = 4020;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 526, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4018;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4019;
                                    this.match(bitmarkParser.Video_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpVideoEmbed:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4022;
                        this.match(bitmarkParser.OpAmpVideoEmbed);
                        this.state = 4025;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 527, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4023;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4024;
                                    this.match(bitmarkParser.Video_type);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_stillimagefilm_format() {
        let _localctx = new Op_stillimagefilm_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 354, bitmarkParser.RULE_op_stillimagefilm_format);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4029;
                _la = this._input.LA(1);
                if (!(((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (bitmarkParser.OpAmpStillImageFilm - 240)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 240)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 240)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    articlebit() {
        let _localctx = new ArticlebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 356, bitmarkParser.RULE_articlebit);
        try {
            this.state = 4037;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpArticle:
                case bitmarkParser.OpAmpArticleLink:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4031;
                        this.op_article_format();
                        this.state = 4032;
                        this.match(bitmarkParser.COLON);
                        this.state = 4033;
                        this.url();
                        this.state = 4034;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.ArticleText:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4036;
                        this.match(bitmarkParser.ArticleText);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    documentbit() {
        let _localctx = new DocumentbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 358, bitmarkParser.RULE_documentbit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4039;
                this.op_document_format();
                this.state = 4040;
                this.match(bitmarkParser.COLON);
                this.state = 4041;
                this.url();
                this.state = 4042;
                this.match(bitmarkParser.CL);
                this.state = 4047;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPATALT) {
                    {
                        this.state = 4043;
                        this.match(bitmarkParser.OPATALT);
                        this.state = 4044;
                        this.words();
                        this.state = 4045;
                        this.match(bitmarkParser.CL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    websitebit() {
        let _localctx = new WebsitebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 360, bitmarkParser.RULE_websitebit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4049;
                this.op_website_format();
                this.state = 4050;
                this.match(bitmarkParser.COLON);
                this.state = 4051;
                this.url();
                this.state = 4052;
                this.match(bitmarkParser.CL);
                this.state = 4057;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPATALT) {
                    {
                        this.state = 4053;
                        this.match(bitmarkParser.OPATALT);
                        this.state = 4054;
                        this.words();
                        this.state = 4055;
                        this.match(bitmarkParser.CL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    appbit() {
        let _localctx = new AppbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 362, bitmarkParser.RULE_appbit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4059;
                this.op_app_format();
                this.state = 4060;
                this.match(bitmarkParser.COLON);
                this.state = 4063;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case bitmarkParser.URL:
                        {
                            this.state = 4061;
                            this.url();
                        }
                        break;
                    case bitmarkParser.TEL:
                        {
                            this.state = 4062;
                            this.telephone();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 4065;
                this.match(bitmarkParser.CL);
                this.state = 4070;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.OPATALT) {
                    {
                        this.state = 4066;
                        this.match(bitmarkParser.OPATALT);
                        this.state = 4067;
                        this.words();
                        this.state = 4068;
                        this.match(bitmarkParser.CL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stillimagefilmbit() {
        let _localctx = new StillimagefilmbitContext(this._ctx, this.state);
        this.enterRule(_localctx, 364, bitmarkParser.RULE_stillimagefilmbit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4072;
                this.stillimg_one();
                this.state = 4076;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 534, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4073;
                                this.resource_chained();
                            }
                        }
                    }
                    this.state = 4078;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 534, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stillimg_one() {
        let _localctx = new Stillimg_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 366, bitmarkParser.RULE_stillimg_one);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4079;
                this.op_stillimagefilm_format();
                this.state = 4080;
                this.match(bitmarkParser.COLON);
                this.state = 4084;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 4081;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 4086;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4087;
                this.url();
                this.state = 4088;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    videobit() {
        let _localctx = new VideobitContext(this._ctx, this.state);
        this.enterRule(_localctx, 368, bitmarkParser.RULE_videobit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4090;
                this.video_one();
                this.state = 4094;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 536, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4091;
                                this.resource_chained();
                            }
                        }
                    }
                    this.state = 4096;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 536, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    video_one() {
        let _localctx = new Video_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 370, bitmarkParser.RULE_video_one);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4097;
                this.op_video_format();
                this.state = 4098;
                this.match(bitmarkParser.COLON);
                this.state = 4099;
                this.url();
                this.state = 4100;
                this.match(bitmarkParser.CL);
                this.state = 4105;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 537, this._ctx)) {
                    case 1:
                        {
                            this.state = 4101;
                            this.match(bitmarkParser.OPATALT);
                            this.state = 4102;
                            this.words();
                            this.state = 4103;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    imagebit() {
        let _localctx = new ImagebitContext(this._ctx, this.state);
        this.enterRule(_localctx, 372, bitmarkParser.RULE_imagebit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4107;
                this.image_one();
                this.state = 4111;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4108;
                                this.image_chained();
                            }
                        }
                    }
                    this.state = 4113;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
                }
                this.state = 4116;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 539, this._ctx)) {
                    case 1:
                        {
                            this.state = 4114;
                            this.match(bitmarkParser.NL);
                            this.state = 4115;
                            this.match(bitmarkParser.ShowInIndex);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_one() {
        let _localctx = new Image_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 374, bitmarkParser.RULE_image_one);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4118;
                this.op_image_format();
                this.state = 4119;
                this.match(bitmarkParser.COLON);
                this.state = 4123;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === bitmarkParser.S) {
                    {
                        {
                            this.state = 4120;
                            this.match(bitmarkParser.S);
                        }
                    }
                    this.state = 4125;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4126;
                this.url();
                this.state = 4127;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_image_format() {
        let _localctx = new Op_image_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 376, bitmarkParser.RULE_op_image_format);
        let _la;
        try {
            this.state = 4143;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpImage:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4129;
                        this.match(bitmarkParser.OpAmpImage);
                        this.state = 4132;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.Image_type:
                                {
                                    {
                                        this.state = 4130;
                                        this.match(bitmarkParser.Image_type);
                                    }
                                }
                                break;
                            case bitmarkParser.DotArticleAtt:
                                {
                                    {
                                        this.state = 4131;
                                        this.match(bitmarkParser.DotArticleAtt);
                                    }
                                }
                                break;
                            case bitmarkParser.COLON:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpImageLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4134;
                        this.match(bitmarkParser.OpAmpImageLink);
                        this.state = 4136;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 4135;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.OpAmpImageZoom:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4138;
                        this.match(bitmarkParser.OpAmpImageZoom);
                        this.state = 4140;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.Image_type) {
                            {
                                this.state = 4139;
                                this.match(bitmarkParser.Image_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.OpAmpImageWAudio:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4142;
                        this.match(bitmarkParser.OpAmpImageWAudio);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_chained() {
        let _localctx = new Image_chainedContext(this._ctx, this.state);
        this.enterRule(_localctx, 378, bitmarkParser.RULE_image_chained);
        let _la;
        try {
            let _alt;
            this.state = 4162;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtSrc:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4145;
                        this.match(bitmarkParser.AtSrc);
                        this.state = 4146;
                        this.match(bitmarkParser.COLON);
                        this.state = 4147;
                        this.url();
                        this.state = 4148;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtWidth:
                case bitmarkParser.AtHeight:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4150;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4151;
                        this.match(bitmarkParser.COLON);
                        this.state = 4152;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 4153;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPATALT:
                case bitmarkParser.OpAtCaption:
                case bitmarkParser.OpAtLicense:
                case bitmarkParser.OpAtCopyright:
                case bitmarkParser.OpAtSearch:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4154;
                        _la = this._input.LA(1);
                        if (!(((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & ((1 << (bitmarkParser.OPATALT - 207)) | (1 << (bitmarkParser.OpAtCaption - 207)) | (1 << (bitmarkParser.OpAtLicense - 207)) | (1 << (bitmarkParser.OpAtCopyright - 207)) | (1 << (bitmarkParser.OpAtSearch - 207)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4158;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 4155;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 4160;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
                        }
                        this.state = 4161;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    image_chained4match() {
        let _localctx = new Image_chained4matchContext(this._ctx, this.state);
        this.enterRule(_localctx, 380, bitmarkParser.RULE_image_chained4match);
        let _la;
        try {
            let _alt;
            this.state = 4181;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtSrc:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4164;
                        this.match(bitmarkParser.AtSrc);
                        this.state = 4165;
                        this.match(bitmarkParser.COLON);
                        this.state = 4166;
                        this.url();
                        this.state = 4167;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtWidth:
                case bitmarkParser.AtHeight:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4169;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4170;
                        this.match(bitmarkParser.COLON);
                        this.state = 4171;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 4172;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPATALT:
                case bitmarkParser.OpAtCaption:
                case bitmarkParser.OpAtLicense:
                case bitmarkParser.OpAtCopyright:
                case bitmarkParser.OpAtSearch:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4173;
                        _la = this._input.LA(1);
                        if (!(((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & ((1 << (bitmarkParser.OPATALT - 207)) | (1 << (bitmarkParser.OpAtCaption - 207)) | (1 << (bitmarkParser.OpAtLicense - 207)) | (1 << (bitmarkParser.OpAtCopyright - 207)) | (1 << (bitmarkParser.OpAtSearch - 207)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4177;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 547, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 4174;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 4179;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 547, this._ctx);
                        }
                        this.state = 4180;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    audiobit() {
        let _localctx = new AudiobitContext(this._ctx, this.state);
        this.enterRule(_localctx, 382, bitmarkParser.RULE_audiobit);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4183;
                this.audio_one();
                this.state = 4187;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 549, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4184;
                                this.resource_chained();
                            }
                        }
                    }
                    this.state = 4189;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 549, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    audio_one() {
        let _localctx = new Audio_oneContext(this._ctx, this.state);
        this.enterRule(_localctx, 384, bitmarkParser.RULE_audio_one);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4190;
                this.op_audio_format();
                this.state = 4191;
                this.match(bitmarkParser.COLON);
                this.state = 4192;
                this.url();
                this.state = 4193;
                this.match(bitmarkParser.CL);
                this.state = 4198;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 550, this._ctx)) {
                    case 1:
                        {
                            this.state = 4194;
                            this.match(bitmarkParser.OPATALT);
                            this.state = 4195;
                            this.words();
                            this.state = 4196;
                            this.match(bitmarkParser.CL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    audio_format() {
        let _localctx = new Audio_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 386, bitmarkParser.RULE_audio_format);
        let _la;
        try {
            this.state = 4210;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AmpAudio:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4200;
                        this.match(bitmarkParser.AmpAudio);
                        this.state = 4203;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.COLON) {
                            {
                                this.state = 4201;
                                this.match(bitmarkParser.COLON);
                                this.state = 4202;
                                this.match(bitmarkParser.Audio_type);
                            }
                        }
                    }
                    break;
                case bitmarkParser.AmpAudioLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4205;
                        this.match(bitmarkParser.AmpAudioLink);
                        this.state = 4208;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.COLON) {
                            {
                                this.state = 4206;
                                this.match(bitmarkParser.COLON);
                                this.state = 4207;
                                this.match(bitmarkParser.Audio_type);
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    op_audio_format() {
        let _localctx = new Op_audio_formatContext(this._ctx, this.state);
        this.enterRule(_localctx, 388, bitmarkParser.RULE_op_audio_format);
        try {
            this.state = 4227;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OpAmpAudio:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4212;
                        this.match(bitmarkParser.OpAmpAudio);
                        this.state = 4215;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 554, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4213;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4214;
                                    this.match(bitmarkParser.Audio_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpAudioLink:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4217;
                        this.match(bitmarkParser.OpAmpAudioLink);
                        this.state = 4220;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 555, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4218;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4219;
                                    this.match(bitmarkParser.Audio_type);
                                }
                                break;
                        }
                    }
                    break;
                case bitmarkParser.OpAmpAudioEmbed:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4222;
                        this.match(bitmarkParser.OpAmpAudioEmbed);
                        this.state = 4225;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 556, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4223;
                                    this.match(bitmarkParser.COLON);
                                    this.state = 4224;
                                    this.match(bitmarkParser.Audio_type);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resource_chained() {
        let _localctx = new Resource_chainedContext(this._ctx, this.state);
        this.enterRule(_localctx, 390, bitmarkParser.RULE_resource_chained);
        let _la;
        try {
            let _alt;
            this.state = 4260;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPA:
                case bitmarkParser.AtSrc:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4232;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.OPA:
                                {
                                    this.state = 4229;
                                    this.match(bitmarkParser.OPA);
                                    this.state = 4230;
                                    this.s_and_w();
                                }
                                break;
                            case bitmarkParser.AtSrc:
                                {
                                    this.state = 4231;
                                    this.match(bitmarkParser.AtSrc);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                        this.state = 4234;
                        this.match(bitmarkParser.COLON);
                        this.state = 4238;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 559, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 4235;
                                        this.match(bitmarkParser.S);
                                    }
                                }
                            }
                            this.state = 4240;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 559, this._ctx);
                        }
                        this.state = 4243;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 4243;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.S:
                                    case bitmarkParser.OPS:
                                    case bitmarkParser.COLON:
                                    case bitmarkParser.AMP:
                                    case bitmarkParser.Greater:
                                    case bitmarkParser.Less:
                                    case bitmarkParser.RightAngle:
                                    case bitmarkParser.RightArrow:
                                    case bitmarkParser.DBLEQ:
                                    case bitmarkParser.QUOTE_INDEX:
                                    case bitmarkParser.NUMERIC:
                                    case bitmarkParser.STRING:
                                    case bitmarkParser.NOTBITMARK:
                                    case bitmarkParser.ELIPSIS:
                                    case bitmarkParser.SENTENCE:
                                    case bitmarkParser.BARSTRING:
                                    case bitmarkParser.AmpAudio:
                                    case bitmarkParser.AmpImage:
                                    case bitmarkParser.AmpVideo:
                                    case bitmarkParser.AmpArticle:
                                    case bitmarkParser.AmpDocument:
                                    case bitmarkParser.AmpApp:
                                    case bitmarkParser.AmpWebsite:
                                    case bitmarkParser.AmpStillImageFilm:
                                    case bitmarkParser.AmpAudioLink:
                                    case bitmarkParser.AmpImageLink:
                                    case bitmarkParser.AmpVideoLink:
                                    case bitmarkParser.AmpArticleLink:
                                    case bitmarkParser.AmpDocumentLink:
                                    case bitmarkParser.AmpAppLink:
                                    case bitmarkParser.AmpWebsiteLink:
                                    case bitmarkParser.AmpStillImageFilmLink:
                                    case bitmarkParser.BitmarkMinus:
                                    case bitmarkParser.BitmarkPlus:
                                    case bitmarkParser.URL:
                                        {
                                            this.state = 4241;
                                            this.s_and_w();
                                        }
                                        break;
                                    case bitmarkParser.NL:
                                        {
                                            this.state = 4242;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                            this.state = 4245;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                        this.state = 4247;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtWidth:
                case bitmarkParser.AtHeight:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4248;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.AtWidth || _la === bitmarkParser.AtHeight)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4249;
                        this.match(bitmarkParser.COLON);
                        this.state = 4250;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 4251;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPATALT:
                case bitmarkParser.OpAtCaption:
                case bitmarkParser.OpAtLicense:
                case bitmarkParser.OpAtCopyright:
                case bitmarkParser.OpAtSearch:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4252;
                        _la = this._input.LA(1);
                        if (!(((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & ((1 << (bitmarkParser.OPATALT - 207)) | (1 << (bitmarkParser.OpAtCaption - 207)) | (1 << (bitmarkParser.OpAtLicense - 207)) | (1 << (bitmarkParser.OpAtCopyright - 207)) | (1 << (bitmarkParser.OpAtSearch - 207)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4256;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 4253;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 4258;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
                        }
                        this.state = 4259;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    telephone() {
        let _localctx = new TelephoneContext(this._ctx, this.state);
        this.enterRule(_localctx, 392, bitmarkParser.RULE_telephone);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4262;
                this.match(bitmarkParser.TEL);
                this.state = 4263;
                this.match(bitmarkParser.PLUS);
                this.state = 4264;
                this.match(bitmarkParser.NUMERIC);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    url() {
        let _localctx = new UrlContext(this._ctx, this.state);
        this.enterRule(_localctx, 394, bitmarkParser.RULE_url);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4266;
                this.match(bitmarkParser.URL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    item() {
        let _localctx = new ItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 396, bitmarkParser.RULE_item);
        let _la;
        try {
            this.state = 4298;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 570, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4268;
                        this.match(bitmarkParser.OPC);
                        this.state = 4269;
                        this.match(bitmarkParser.CL);
                        this.state = 4277;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 565, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4273;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.S) {
                                        {
                                            {
                                                this.state = 4270;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 4275;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 4276;
                                    this.lead();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4279;
                        this.match(bitmarkParser.OPC);
                        this.state = 4280;
                        this.s_and_w();
                        this.state = 4285;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (((((_la - 159)) & ~0x1F) === 0 && ((1 << (_la - 159)) & ((1 << (bitmarkParser.COLON - 159)) | (1 << (bitmarkParser.AMP - 159)) | (1 << (bitmarkParser.Greater - 159)) | (1 << (bitmarkParser.Less - 159)) | (1 << (bitmarkParser.RightAngle - 159)) | (1 << (bitmarkParser.RightArrow - 159)) | (1 << (bitmarkParser.QUOTE_INDEX - 159)) | (1 << (bitmarkParser.NOTBITMARK - 159)) | (1 << (bitmarkParser.ELIPSIS - 159)) | (1 << (bitmarkParser.SENTENCE - 159)) | (1 << (bitmarkParser.BARSTRING - 159)))) !== 0) || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || _la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
                            {
                                this.state = 4283;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.COLON:
                                        {
                                            this.state = 4281;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case bitmarkParser.AMP:
                                    case bitmarkParser.Greater:
                                    case bitmarkParser.Less:
                                    case bitmarkParser.RightAngle:
                                    case bitmarkParser.RightArrow:
                                    case bitmarkParser.QUOTE_INDEX:
                                    case bitmarkParser.NOTBITMARK:
                                    case bitmarkParser.ELIPSIS:
                                    case bitmarkParser.SENTENCE:
                                    case bitmarkParser.BARSTRING:
                                    case bitmarkParser.AmpAudio:
                                    case bitmarkParser.AmpImage:
                                    case bitmarkParser.AmpVideo:
                                    case bitmarkParser.AmpArticle:
                                    case bitmarkParser.AmpDocument:
                                    case bitmarkParser.AmpApp:
                                    case bitmarkParser.AmpWebsite:
                                    case bitmarkParser.AmpStillImageFilm:
                                    case bitmarkParser.AmpAudioLink:
                                    case bitmarkParser.AmpImageLink:
                                    case bitmarkParser.AmpVideoLink:
                                    case bitmarkParser.AmpArticleLink:
                                    case bitmarkParser.AmpDocumentLink:
                                    case bitmarkParser.AmpAppLink:
                                    case bitmarkParser.AmpWebsiteLink:
                                    case bitmarkParser.AmpStillImageFilmLink:
                                    case bitmarkParser.BitmarkMinus:
                                    case bitmarkParser.BitmarkPlus:
                                        {
                                            this.state = 4282;
                                            this.words();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                            this.state = 4287;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4288;
                        this.match(bitmarkParser.CL);
                        this.state = 4296;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 569, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4292;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.S) {
                                        {
                                            {
                                                this.state = 4289;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 4294;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 4295;
                                    this.lead();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lead() {
        let _localctx = new LeadContext(this._ctx, this.state);
        this.enterRule(_localctx, 398, bitmarkParser.RULE_lead);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4300;
                this.match(bitmarkParser.OPC);
                this.state = 4301;
                this.s_and_w();
                this.state = 4306;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 159)) & ~0x1F) === 0 && ((1 << (_la - 159)) & ((1 << (bitmarkParser.COLON - 159)) | (1 << (bitmarkParser.AMP - 159)) | (1 << (bitmarkParser.Greater - 159)) | (1 << (bitmarkParser.Less - 159)) | (1 << (bitmarkParser.RightAngle - 159)) | (1 << (bitmarkParser.RightArrow - 159)) | (1 << (bitmarkParser.QUOTE_INDEX - 159)) | (1 << (bitmarkParser.NOTBITMARK - 159)) | (1 << (bitmarkParser.ELIPSIS - 159)) | (1 << (bitmarkParser.SENTENCE - 159)) | (1 << (bitmarkParser.BARSTRING - 159)))) !== 0) || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || _la === bitmarkParser.BitmarkMinus || _la === bitmarkParser.BitmarkPlus) {
                    {
                        this.state = 4304;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case bitmarkParser.COLON:
                                {
                                    this.state = 4302;
                                    this.match(bitmarkParser.COLON);
                                }
                                break;
                            case bitmarkParser.AMP:
                            case bitmarkParser.Greater:
                            case bitmarkParser.Less:
                            case bitmarkParser.RightAngle:
                            case bitmarkParser.RightArrow:
                            case bitmarkParser.QUOTE_INDEX:
                            case bitmarkParser.NOTBITMARK:
                            case bitmarkParser.ELIPSIS:
                            case bitmarkParser.SENTENCE:
                            case bitmarkParser.BARSTRING:
                            case bitmarkParser.AmpAudio:
                            case bitmarkParser.AmpImage:
                            case bitmarkParser.AmpVideo:
                            case bitmarkParser.AmpArticle:
                            case bitmarkParser.AmpDocument:
                            case bitmarkParser.AmpApp:
                            case bitmarkParser.AmpWebsite:
                            case bitmarkParser.AmpStillImageFilm:
                            case bitmarkParser.AmpAudioLink:
                            case bitmarkParser.AmpImageLink:
                            case bitmarkParser.AmpVideoLink:
                            case bitmarkParser.AmpArticleLink:
                            case bitmarkParser.AmpDocumentLink:
                            case bitmarkParser.AmpAppLink:
                            case bitmarkParser.AmpWebsiteLink:
                            case bitmarkParser.AmpStillImageFilmLink:
                            case bitmarkParser.BitmarkMinus:
                            case bitmarkParser.BitmarkPlus:
                                {
                                    this.state = 4303;
                                    this.words();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 4308;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4309;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    angleref() {
        let _localctx = new AnglerefContext(this._ctx, this.state);
        this.enterRule(_localctx, 400, bitmarkParser.RULE_angleref);
        let _la;
        try {
            this.state = 4321;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPRANGLES:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4311;
                        this.match(bitmarkParser.OPRANGLES);
                        this.state = 4313;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                            {
                                this.state = 4312;
                                this.s_and_w();
                            }
                        }
                        this.state = 4315;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OPRANGLEL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4316;
                        this.match(bitmarkParser.OPRANGLEL);
                        this.state = 4318;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                            {
                                this.state = 4317;
                                this.s_and_w();
                            }
                        }
                        this.state = 4320;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    example() {
        let _localctx = new ExampleContext(this._ctx, this.state);
        this.enterRule(_localctx, 402, bitmarkParser.RULE_example);
        let _la;
        try {
            this.state = 4330;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtExamplecl:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4323;
                        this.match(bitmarkParser.AtExamplecl);
                    }
                    break;
                case bitmarkParser.AtExampleWithStr:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4324;
                        this.match(bitmarkParser.AtExampleWithStr);
                    }
                    break;
                case bitmarkParser.AtExamplecol:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4325;
                        this.match(bitmarkParser.AtExamplecol);
                        this.state = 4327;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.SENTENCE) {
                            {
                                this.state = 4326;
                                this.match(bitmarkParser.SENTENCE);
                            }
                        }
                        this.state = 4329;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bracketed_text() {
        let _localctx = new Bracketed_textContext(this._ctx, this.state);
        this.enterRule(_localctx, 404, bitmarkParser.RULE_bracketed_text);
        let _la;
        try {
            let _alt;
            this.state = 4371;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 585, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4332;
                        this.match(bitmarkParser.BracEnclose);
                        this.state = 4334;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 578, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4333;
                                    this.s_and_w();
                                }
                                break;
                        }
                        this.state = 4357;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                            {
                                {
                                    this.state = 4336;
                                    this.s_and_w();
                                    this.state = 4346;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 580, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 4337;
                                                    this.match(bitmarkParser.NL);
                                                    this.state = 4341;
                                                    this._errHandler.sync(this);
                                                    _alt = this.interpreter.adaptivePredict(this._input, 579, this._ctx);
                                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                                        if (_alt === 1) {
                                                            {
                                                                {
                                                                    this.state = 4338;
                                                                    this.match(bitmarkParser.S);
                                                                }
                                                            }
                                                        }
                                                        this.state = 4343;
                                                        this._errHandler.sync(this);
                                                        _alt = this.interpreter.adaptivePredict(this._input, 579, this._ctx);
                                                    }
                                                }
                                            }
                                        }
                                        this.state = 4348;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 580, this._ctx);
                                    }
                                    this.state = 4352;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 4349;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 4354;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            this.state = 4359;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4360;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4361;
                        this.match(bitmarkParser.BracEnclose);
                        this.state = 4367;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                            {
                                this.state = 4365;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 583, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4362;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4363;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4364;
                                            this.match(bitmarkParser.S);
                                        }
                                        break;
                                }
                            }
                            this.state = 4369;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4370;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    reference() {
        let _localctx = new ReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 406, bitmarkParser.RULE_reference);
        let _la;
        try {
            this.state = 4395;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 590, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4373;
                        this.match(bitmarkParser.AtReference);
                        this.state = 4378;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 4378;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 586, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4374;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4375;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4376;
                                            this.match(bitmarkParser.URL);
                                        }
                                        break;
                                    case 4:
                                        {
                                            this.state = 4377;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                }
                            }
                            this.state = 4380;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                        this.state = 4382;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4383;
                        this.match(bitmarkParser.AtReference);
                        this.state = 4391;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                            {
                                this.state = 4389;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 588, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4384;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4385;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4386;
                                            this.match(bitmarkParser.URL);
                                        }
                                        break;
                                    case 4:
                                        {
                                            this.state = 4387;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    case 5:
                                        {
                                            this.state = 4388;
                                            this.match(bitmarkParser.S);
                                        }
                                        break;
                                }
                            }
                            this.state = 4393;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4394;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    progress() {
        let _localctx = new ProgressContext(this._ctx, this.state);
        this.enterRule(_localctx, 408, bitmarkParser.RULE_progress);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4397;
                this.match(bitmarkParser.AtProgress);
                this.state = 4398;
                this.s_and_w();
                this.state = 4399;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dateprop() {
        let _localctx = new DatepropContext(this._ctx, this.state);
        this.enterRule(_localctx, 410, bitmarkParser.RULE_dateprop);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4401;
                this.match(bitmarkParser.AtDate);
                this.state = 4405;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 4405;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 591, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4402;
                                    this.s_and_w();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4403;
                                    this.match(bitmarkParser.COLON);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 4404;
                                    this.match(bitmarkParser.NL);
                                }
                                break;
                        }
                    }
                    this.state = 4407;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                this.state = 4409;
                this.match(bitmarkParser.CL);
                this.state = 4411;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 593, this._ctx)) {
                    case 1:
                        {
                            this.state = 4410;
                            this.dateprop_chained();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dateprop_chained() {
        let _localctx = new Dateprop_chainedContext(this._ctx, this.state);
        this.enterRule(_localctx, 412, bitmarkParser.RULE_dateprop_chained);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4413;
                this.match(bitmarkParser.AtDate);
                this.state = 4417;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 4417;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 594, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4414;
                                    this.s_and_w();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4415;
                                    this.match(bitmarkParser.COLON);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 4416;
                                    this.match(bitmarkParser.NL);
                                }
                                break;
                        }
                    }
                    this.state = 4419;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                this.state = 4421;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    instruction() {
        let _localctx = new InstructionContext(this._ctx, this.state);
        this.enterRule(_localctx, 414, bitmarkParser.RULE_instruction);
        let _la;
        try {
            let _alt;
            this.state = 4469;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 604, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4423;
                        this.match(bitmarkParser.OPB);
                        this.state = 4427;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.NL) {
                            {
                                {
                                    this.state = 4424;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            this.state = 4429;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4431;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 597, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4430;
                                    this.s_and_w();
                                }
                                break;
                        }
                        this.state = 4454;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                            {
                                {
                                    this.state = 4433;
                                    this.s_and_w();
                                    this.state = 4443;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 599, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 4434;
                                                    this.match(bitmarkParser.NL);
                                                    this.state = 4438;
                                                    this._errHandler.sync(this);
                                                    _alt = this.interpreter.adaptivePredict(this._input, 598, this._ctx);
                                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                                        if (_alt === 1) {
                                                            {
                                                                {
                                                                    this.state = 4435;
                                                                    this.match(bitmarkParser.S);
                                                                }
                                                            }
                                                        }
                                                        this.state = 4440;
                                                        this._errHandler.sync(this);
                                                        _alt = this.interpreter.adaptivePredict(this._input, 598, this._ctx);
                                                    }
                                                }
                                            }
                                        }
                                        this.state = 4445;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 599, this._ctx);
                                    }
                                    this.state = 4449;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === bitmarkParser.NL) {
                                        {
                                            {
                                                this.state = 4446;
                                                this.match(bitmarkParser.NL);
                                            }
                                        }
                                        this.state = 4451;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            this.state = 4456;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4457;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4458;
                        this.match(bitmarkParser.OPB);
                        this.state = 4462;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.NL) {
                            {
                                {
                                    this.state = 4459;
                                    this.match(bitmarkParser.NL);
                                }
                            }
                            this.state = 4464;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4466;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                            {
                                this.state = 4465;
                                this.s_and_w();
                            }
                        }
                        this.state = 4468;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    hint() {
        let _localctx = new HintContext(this._ctx, this.state);
        this.enterRule(_localctx, 416, bitmarkParser.RULE_hint);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4471;
                this.match(bitmarkParser.OPQ);
                this.state = 4473;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4472;
                            _la = this._input.LA(1);
                            if (_la <= 0 || (_la === bitmarkParser.CL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    this.state = 4475;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << bitmarkParser.OPDOT) | (1 << bitmarkParser.S) | (1 << bitmarkParser.BitBook) | (1 << bitmarkParser.BitChapter) | (1 << bitmarkParser.BitToc) | (1 << bitmarkParser.BitSummary) | (1 << bitmarkParser.BitIntlink) | (1 << bitmarkParser.BitIntRef) | (1 << bitmarkParser.BitAlias) | (1 << bitmarkParser.BitGroups) | (1 << bitmarkParser.BitGroupt) | (1 << bitmarkParser.BitPlaceholder) | (1 << bitmarkParser.BitStatement) | (1 << bitmarkParser.BitDetails) | (1 << bitmarkParser.BitSampleSolution) | (1 << bitmarkParser.BitTakeAudio) | (1 << bitmarkParser.CLOZE) | (1 << bitmarkParser.MATCH) | (1 << bitmarkParser.BitArticle) | (1 << bitmarkParser.BitPage) | (1 << bitmarkParser.BitEssay) | (1 << bitmarkParser.BitMessage) | (1 << bitmarkParser.BitCorrection) | (1 << bitmarkParser.BitMark) | (1 << bitmarkParser.BitTakepic) | (1 << bitmarkParser.BitRecaud) | (1 << bitmarkParser.BitPrepnote) | (1 << bitmarkParser.BitAssign) | (1 << bitmarkParser.BitBotint) | (1 << bitmarkParser.BitSelfassess) | (1 << bitmarkParser.BitRating))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (bitmarkParser.BitSurvey - 32)) | (1 << (bitmarkParser.BitSurvey1 - 32)) | (1 << (bitmarkParser.BitSurveyanon - 32)) | (1 << (bitmarkParser.BitSurveyanon1 - 32)) | (1 << (bitmarkParser.BitNote - 32)) | (1 << (bitmarkParser.BitInfo - 32)) | (1 << (bitmarkParser.BitWarning - 32)) | (1 << (bitmarkParser.BitRemark - 32)) | (1 << (bitmarkParser.BitHint - 32)) | (1 << (bitmarkParser.BitHelp - 32)) | (1 << (bitmarkParser.BitDanger - 32)) | (1 << (bitmarkParser.BitBug - 32)) | (1 << (bitmarkParser.BitSidenote - 32)) | (1 << (bitmarkParser.BitStickynote - 32)) | (1 << (bitmarkParser.BitQuote - 32)) | (1 << (bitmarkParser.BitFootnote - 32)) | (1 << (bitmarkParser.BitExample - 32)) | (1 << (bitmarkParser.BitButtonCopytext - 32)) | (1 << (bitmarkParser.BitWbtContinue - 32)) | (1 << (bitmarkParser.BitLearningPathDetails - 32)) | (1 << (bitmarkParser.BitLearningPathLti - 32)) | (1 << (bitmarkParser.BitLearningPathStep - 32)) | (1 << (bitmarkParser.BitLearningPathBook - 32)) | (1 << (bitmarkParser.BitLearningPathSign - 32)) | (1 << (bitmarkParser.BitLearningPathVideoCall - 32)) | (1 << (bitmarkParser.BitLearningPathLearningGoal - 32)) | (1 << (bitmarkParser.BitLearningPathClosing - 32)) | (1 << (bitmarkParser.BitLearningPathFeedback - 32)) | (1 << (bitmarkParser.BitLearningPathBotTraining - 32)) | (1 << (bitmarkParser.BitLearningPathExternalLink - 32)) | (1 << (bitmarkParser.BitLearningPathClassroomTraining - 32)) | (1 << (bitmarkParser.BitLearningPathClassroomEvent - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (bitmarkParser.BitBotActionSend - 64)) | (1 << (bitmarkParser.BitBotActionAnnounce - 64)) | (1 << (bitmarkParser.BitBotActionSave - 64)) | (1 << (bitmarkParser.BitBotActionRemind - 64)) | (1 << (bitmarkParser.BitVendorPadletEmbed - 64)) | (1 << (bitmarkParser.BitScorm - 64)) | (1 << (bitmarkParser.BitImage - 64)) | (1 << (bitmarkParser.BitImageLink - 64)) | (1 << (bitmarkParser.BitImageZoom - 64)) | (1 << (bitmarkParser.BitImagePrototype - 64)) | (1 << (bitmarkParser.BitImageSuperWide - 64)) | (1 << (bitmarkParser.BitAudio - 64)) | (1 << (bitmarkParser.BitAudioLink - 64)) | (1 << (bitmarkParser.BitAudioEmbed - 64)) | (1 << (bitmarkParser.BitVideo - 64)) | (1 << (bitmarkParser.BitVideoLink - 64)) | (1 << (bitmarkParser.BitVideoEmbed - 64)) | (1 << (bitmarkParser.BitVideoPortrait - 64)) | (1 << (bitmarkParser.BitVideoLandscape - 64)) | (1 << (bitmarkParser.BitStillImageFilm - 64)) | (1 << (bitmarkParser.BitStillImageFilmLink - 64)) | (1 << (bitmarkParser.BitStillImageFilmEmbed - 64)) | (1 << (bitmarkParser.BitWebsiteLink - 64)) | (1 << (bitmarkParser.BitDocument - 64)) | (1 << (bitmarkParser.BitDocumentLink - 64)) | (1 << (bitmarkParser.BitDocumentEmbed - 64)) | (1 << (bitmarkParser.BitDocumentDownload - 64)) | (1 << (bitmarkParser.BitAppLink - 64)) | (1 << (bitmarkParser.BitEditorial - 64)) | (1 << (bitmarkParser.BitBookFrontispiece - 64)) | (1 << (bitmarkParser.BitBookTitle - 64)) | (1 << (bitmarkParser.BitBookCopyright - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (bitmarkParser.BitBookDedication - 96)) | (1 << (bitmarkParser.BitBookForword - 96)) | (1 << (bitmarkParser.BitBookPreface - 96)) | (1 << (bitmarkParser.BitBookPrologue - 96)) | (1 << (bitmarkParser.BitBookEpilogue - 96)) | (1 << (bitmarkParser.BitBookIntroduction - 96)) | (1 << (bitmarkParser.BitBookIncitingIncident - 96)) | (1 << (bitmarkParser.BitBookConclusion - 96)) | (1 << (bitmarkParser.BitBookAfterword - 96)) | (1 << (bitmarkParser.BitBookPostscript - 96)) | (1 << (bitmarkParser.BitBookappendix - 96)) | (1 << (bitmarkParser.BitBookAddendum - 96)) | (1 << (bitmarkParser.BitBookAcknowledgments - 96)) | (1 << (bitmarkParser.BitBookListOfContributors - 96)) | (1 << (bitmarkParser.BitBookBibliography - 96)) | (1 << (bitmarkParser.BitBookReferenceList - 96)) | (1 << (bitmarkParser.BitBookEndnotes - 96)) | (1 << (bitmarkParser.BitBookNotes - 96)) | (1 << (bitmarkParser.BitBookCopyrightPermissions - 96)) | (1 << (bitmarkParser.BitBookTeaser - 96)) | (1 << (bitmarkParser.BitBookAutherBio - 96)) | (1 << (bitmarkParser.BitBookRequestForABookReview - 96)) | (1 << (bitmarkParser.BitBookComingSoon - 96)) | (1 << (bitmarkParser.BitBookReadMore - 96)) | (1 << (bitmarkParser.BitBookSummary - 96)) | (1 << (bitmarkParser.BitBookEpigraph - 96)) | (1 << (bitmarkParser.BitCode - 96)) | (1 << (bitmarkParser.BitCard1 - 96)) | (1 << (bitmarkParser.BitQuestion1 - 96)) | (1 << (bitmarkParser.BitScreenshot - 96)) | (1 << (bitmarkParser.BitFocusImage - 96)) | (1 << (bitmarkParser.BitPhoto - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (bitmarkParser.BitBrowserImage - 128)) | (1 << (bitmarkParser.BitBotActionResponse - 128)) | (1 << (bitmarkParser.BitBotActionTrueFalse - 128)) | (1 << (bitmarkParser.BitBotActionRatingNumber - 128)) | (1 << (bitmarkParser.BitBotActionRatingStars - 128)) | (1 << (bitmarkParser.BitChapterSubjectMatter - 128)) | (1 << (bitmarkParser.BitReleaseNote - 128)) | (1 << (bitmarkParser.BitConclusion - 128)) | (1 << (bitmarkParser.BitVendorAmcharts5Chart - 128)) | (1 << (bitmarkParser.BitFeatured - 128)) | (1 << (bitmarkParser.BitNewspaperArticle - 128)) | (1 << (bitmarkParser.BitBlogArticle - 128)) | (1 << (bitmarkParser.BitBookArticle - 128)) | (1 << (bitmarkParser.BitNotebookArticle - 128)) | (1 << (bitmarkParser.BitWorkbookArticle - 128)) | (1 << (bitmarkParser.OPDOLL - 128)) | (1 << (bitmarkParser.OPBUL - 128)) | (1 << (bitmarkParser.OPRANGLES - 128)) | (1 << (bitmarkParser.OPRANGLEL - 128)) | (1 << (bitmarkParser.OPDANGLE - 128)) | (1 << (bitmarkParser.OPU - 128)) | (1 << (bitmarkParser.OPB - 128)) | (1 << (bitmarkParser.OPQ - 128)) | (1 << (bitmarkParser.OPA - 128)) | (1 << (bitmarkParser.OPP - 128)) | (1 << (bitmarkParser.OPM - 128)) | (1 << (bitmarkParser.OPS - 128)) | (1 << (bitmarkParser.OPR - 128)) | (1 << (bitmarkParser.OPHASH - 128)) | (1 << (bitmarkParser.OPC - 128)) | (1 << (bitmarkParser.COLON - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (bitmarkParser.AMP - 160)) | (1 << (bitmarkParser.DBLCOLON - 160)) | (1 << (bitmarkParser.PLUS - 160)) | (1 << (bitmarkParser.DotAt - 160)) | (1 << (bitmarkParser.Greater - 160)) | (1 << (bitmarkParser.Less - 160)) | (1 << (bitmarkParser.RightAngle - 160)) | (1 << (bitmarkParser.RightArrow - 160)) | (1 << (bitmarkParser.DBLEQ - 160)) | (1 << (bitmarkParser.HSPL - 160)) | (1 << (bitmarkParser.HSPL2 - 160)) | (1 << (bitmarkParser.SSPL - 160)) | (1 << (bitmarkParser.SSPL2 - 160)) | (1 << (bitmarkParser.QUOTE_INDEX - 160)) | (1 << (bitmarkParser.COMMENT - 160)) | (1 << (bitmarkParser.DCANY - 160)) | (1 << (bitmarkParser.Image_type - 160)) | (1 << (bitmarkParser.Audio_type - 160)) | (1 << (bitmarkParser.Video_type - 160)) | (1 << (bitmarkParser.ArticleText - 160)) | (1 << (bitmarkParser.NOTCL - 160)) | (1 << (bitmarkParser.NUMERIC - 160)) | (1 << (bitmarkParser.STRING - 160)) | (1 << (bitmarkParser.NL - 160)) | (1 << (bitmarkParser.NOTBITMARK - 160)) | (1 << (bitmarkParser.ELIPSIS - 160)) | (1 << (bitmarkParser.SENTENCE - 160)) | (1 << (bitmarkParser.BARSTRING - 160)) | (1 << (bitmarkParser.OPAT - 160)) | (1 << (bitmarkParser.AtProgress - 160)) | (1 << (bitmarkParser.AtReference - 160)) | (1 << (bitmarkParser.AtWidth - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (bitmarkParser.AtHeight - 192)) | (1 << (bitmarkParser.AtProgressPoints - 192)) | (1 << (bitmarkParser.AtShortanswer - 192)) | (1 << (bitmarkParser.AtLonganswer - 192)) | (1 << (bitmarkParser.AtExampleWithStr - 192)) | (1 << (bitmarkParser.AtExamplecol - 192)) | (1 << (bitmarkParser.AtExamplecl - 192)) | (1 << (bitmarkParser.AtSampleSolution - 192)) | (1 << (bitmarkParser.AtPartialAnswerS - 192)) | (1 << (bitmarkParser.AtPartialAnswer - 192)) | (1 << (bitmarkParser.AtLabeltrue - 192)) | (1 << (bitmarkParser.AtLabelfalse - 192)) | (1 << (bitmarkParser.AtPoints - 192)) | (1 << (bitmarkParser.AtSrc - 192)) | (1 << (bitmarkParser.AtPartner - 192)) | (1 << (bitmarkParser.OPATALT - 192)) | (1 << (bitmarkParser.OPAMARK - 192)) | (1 << (bitmarkParser.ShowInIndex - 192)) | (1 << (bitmarkParser.OpAtCaption - 192)) | (1 << (bitmarkParser.OpAtLicense - 192)) | (1 << (bitmarkParser.OpAtCopyright - 192)) | (1 << (bitmarkParser.OpAtSearch - 192)) | (1 << (bitmarkParser.OpAtIsTracked - 192)) | (1 << (bitmarkParser.OpAtIsInfoOnly - 192)) | (1 << (bitmarkParser.AtDate - 192)) | (1 << (bitmarkParser.Http - 192)) | (1 << (bitmarkParser.Https - 192)) | (1 << (bitmarkParser.AmpAudio - 192)) | (1 << (bitmarkParser.AmpImage - 192)) | (1 << (bitmarkParser.AmpImageZoom - 192)) | (1 << (bitmarkParser.AmpImageWAudio - 192)) | (1 << (bitmarkParser.AmpVideo - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (bitmarkParser.AmpArticle - 224)) | (1 << (bitmarkParser.AmpDocument - 224)) | (1 << (bitmarkParser.AmpApp - 224)) | (1 << (bitmarkParser.AmpWebsite - 224)) | (1 << (bitmarkParser.AmpStillImageFilm - 224)) | (1 << (bitmarkParser.AmpPdf - 224)) | (1 << (bitmarkParser.OpAmpAudio - 224)) | (1 << (bitmarkParser.OpAmpImage - 224)) | (1 << (bitmarkParser.OpAmpImageZoom - 224)) | (1 << (bitmarkParser.OpAmpImageWAudio - 224)) | (1 << (bitmarkParser.OpAmpVideo - 224)) | (1 << (bitmarkParser.OpAmpArticle - 224)) | (1 << (bitmarkParser.OpAmpArticleAtt - 224)) | (1 << (bitmarkParser.OpAmpDocument - 224)) | (1 << (bitmarkParser.OpAmpApp - 224)) | (1 << (bitmarkParser.OpAmpWebsite - 224)) | (1 << (bitmarkParser.OpAmpStillImageFilm - 224)) | (1 << (bitmarkParser.BracEnclose - 224)) | (1 << (bitmarkParser.AmpAudioLink - 224)) | (1 << (bitmarkParser.AmpImageLink - 224)) | (1 << (bitmarkParser.AmpVideoLink - 224)) | (1 << (bitmarkParser.AmpArticleLink - 224)) | (1 << (bitmarkParser.AmpDocumentLink - 224)) | (1 << (bitmarkParser.AmpDocumentDownload - 224)) | (1 << (bitmarkParser.AmpAppLink - 224)) | (1 << (bitmarkParser.AmpWebsiteLink - 224)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 224)) | (1 << (bitmarkParser.OpAmpAudioLink - 224)) | (1 << (bitmarkParser.OpAmpImageLink - 224)) | (1 << (bitmarkParser.OpAmpVideoLink - 224)) | (1 << (bitmarkParser.OpAmpArticleLink - 224)) | (1 << (bitmarkParser.OpAmpDocumentLink - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (bitmarkParser.OpAmpDocumentDownload - 256)) | (1 << (bitmarkParser.OpAmpAppLink - 256)) | (1 << (bitmarkParser.OpAmpWebsiteLink - 256)) | (1 << (bitmarkParser.OpAmpStillImageFilmLink - 256)) | (1 << (bitmarkParser.AmpImageEmbed - 256)) | (1 << (bitmarkParser.AmpVideoEmbed - 256)) | (1 << (bitmarkParser.AmpAudioEmbed - 256)) | (1 << (bitmarkParser.AmpDocumentEmbed - 256)) | (1 << (bitmarkParser.AmpStillImageFilmEmbed - 256)) | (1 << (bitmarkParser.OpAmpImageEmbed - 256)) | (1 << (bitmarkParser.OpAmpVideoEmbed - 256)) | (1 << (bitmarkParser.OpAmpAudioEmbed - 256)) | (1 << (bitmarkParser.OpAmpDocumentEmbed - 256)) | (1 << (bitmarkParser.OpAmpStillImageFilmEmbed - 256)) | (1 << (bitmarkParser.BitmarkMinus - 256)) | (1 << (bitmarkParser.BitmarkPlus - 256)) | (1 << (bitmarkParser.ColonText - 256)) | (1 << (bitmarkParser.ColonJson - 256)) | (1 << (bitmarkParser.Prosemirror - 256)) | (1 << (bitmarkParser.Placeholder - 256)) | (1 << (bitmarkParser.BASIC - 256)) | (1 << (bitmarkParser.JPG - 256)) | (1 << (bitmarkParser.PNG - 256)) | (1 << (bitmarkParser.GIF - 256)) | (1 << (bitmarkParser.SVG - 256)) | (1 << (bitmarkParser.MP2 - 256)) | (1 << (bitmarkParser.MP3 - 256)) | (1 << (bitmarkParser.MP4 - 256)) | (1 << (bitmarkParser.FLV - 256)) | (1 << (bitmarkParser.WMV - 256)) | (1 << (bitmarkParser.MPEG - 256)) | (1 << (bitmarkParser.MPG - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (bitmarkParser.TEL - 288)) | (1 << (bitmarkParser.DotArticleAtt - 288)) | (1 << (bitmarkParser.STAR - 288)) | (1 << (bitmarkParser.URL - 288)) | (1 << (bitmarkParser.LIST_LINE - 288)) | (1 << (bitmarkParser.ENCLBARS - 288)))) !== 0));
                this.state = 4477;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    title() {
        let _localctx = new TitleContext(this._ctx, this.state);
        this.enterRule(_localctx, 418, bitmarkParser.RULE_title);
        let _la;
        try {
            this.state = 4491;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 608, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4479;
                        this.match(bitmarkParser.OPHASH);
                        this.state = 4482;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 4482;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.S:
                                    case bitmarkParser.OPS:
                                    case bitmarkParser.COLON:
                                    case bitmarkParser.AMP:
                                    case bitmarkParser.Greater:
                                    case bitmarkParser.Less:
                                    case bitmarkParser.RightAngle:
                                    case bitmarkParser.RightArrow:
                                    case bitmarkParser.DBLEQ:
                                    case bitmarkParser.QUOTE_INDEX:
                                    case bitmarkParser.NUMERIC:
                                    case bitmarkParser.STRING:
                                    case bitmarkParser.NOTBITMARK:
                                    case bitmarkParser.ELIPSIS:
                                    case bitmarkParser.SENTENCE:
                                    case bitmarkParser.BARSTRING:
                                    case bitmarkParser.AmpAudio:
                                    case bitmarkParser.AmpImage:
                                    case bitmarkParser.AmpVideo:
                                    case bitmarkParser.AmpArticle:
                                    case bitmarkParser.AmpDocument:
                                    case bitmarkParser.AmpApp:
                                    case bitmarkParser.AmpWebsite:
                                    case bitmarkParser.AmpStillImageFilm:
                                    case bitmarkParser.AmpAudioLink:
                                    case bitmarkParser.AmpImageLink:
                                    case bitmarkParser.AmpVideoLink:
                                    case bitmarkParser.AmpArticleLink:
                                    case bitmarkParser.AmpDocumentLink:
                                    case bitmarkParser.AmpAppLink:
                                    case bitmarkParser.AmpWebsiteLink:
                                    case bitmarkParser.AmpStillImageFilmLink:
                                    case bitmarkParser.BitmarkMinus:
                                    case bitmarkParser.BitmarkPlus:
                                    case bitmarkParser.URL:
                                        {
                                            this.state = 4480;
                                            this.s_and_w();
                                        }
                                        break;
                                    case bitmarkParser.NL:
                                        {
                                            this.state = 4481;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                            this.state = 4484;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                        this.state = 4486;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4487;
                        this.match(bitmarkParser.OPHASH);
                        this.state = 4488;
                        this.s_and_w();
                        this.state = 4489;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bool_label() {
        let _localctx = new Bool_labelContext(this._ctx, this.state);
        this.enterRule(_localctx, 420, bitmarkParser.RULE_bool_label);
        try {
            this.state = 4501;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.AtLabeltrue:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4493;
                        this.match(bitmarkParser.AtLabeltrue);
                        this.state = 4494;
                        this.s_and_w();
                        this.state = 4495;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.AtLabelfalse:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4497;
                        this.match(bitmarkParser.AtLabelfalse);
                        this.state = 4498;
                        this.s_and_w();
                        this.state = 4499;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    progress_points() {
        let _localctx = new Progress_pointsContext(this._ctx, this.state);
        this.enterRule(_localctx, 422, bitmarkParser.RULE_progress_points);
        try {
            this.state = 4512;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 610, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4503;
                        this.match(bitmarkParser.AtProgressPoints);
                        this.state = 4504;
                        this.match(bitmarkParser.COLON);
                        this.state = 4505;
                        this.match(bitmarkParser.NUMERIC);
                        this.state = 4506;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4507;
                        this.match(bitmarkParser.AtProgressPoints);
                        this.state = 4508;
                        this.match(bitmarkParser.COLON);
                        this.state = 4509;
                        this.s_and_w();
                        this.state = 4510;
                        this.match(bitmarkParser.CL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    istracked() {
        let _localctx = new IstrackedContext(this._ctx, this.state);
        this.enterRule(_localctx, 424, bitmarkParser.RULE_istracked);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4514;
                this.match(bitmarkParser.OpAtIsTracked);
                this.state = 4515;
                this.s_and_w();
                this.state = 4516;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    isinfoonly() {
        let _localctx = new IsinfoonlyContext(this._ctx, this.state);
        this.enterRule(_localctx, 426, bitmarkParser.RULE_isinfoonly);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4518;
                this.match(bitmarkParser.OpAtIsInfoOnly);
                this.state = 4519;
                this.s_and_w();
                this.state = 4520;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    atdef() {
        let _localctx = new AtdefContext(this._ctx, this.state);
        this.enterRule(_localctx, 428, bitmarkParser.RULE_atdef);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4522;
                this.atdef_();
                this.state = 4532;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 612, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4526;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === bitmarkParser.NL) {
                                    {
                                        {
                                            this.state = 4523;
                                            this.match(bitmarkParser.NL);
                                        }
                                    }
                                    this.state = 4528;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 4529;
                                this.atdef_();
                            }
                        }
                    }
                    this.state = 4534;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 612, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    atdef_() {
        let _localctx = new Atdef_Context(this._ctx, this.state);
        this.enterRule(_localctx, 430, bitmarkParser.RULE_atdef_);
        let _la;
        try {
            let _alt;
            this.state = 4557;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case bitmarkParser.OPA:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4535;
                        this.match(bitmarkParser.OPA);
                        this.state = 4536;
                        this.s_and_w();
                        this.state = 4537;
                        _la = this._input.LA(1);
                        if (!(_la === bitmarkParser.COLON || _la === bitmarkParser.DBLCOLON)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4538;
                        this.s_and_w();
                        this.state = 4544;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                            {
                                this.state = 4542;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 613, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4539;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4540;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4541;
                                            this.s_and_w();
                                        }
                                        break;
                                }
                            }
                            this.state = 4546;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4547;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case bitmarkParser.OpAtCopyright:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4549;
                        this.match(bitmarkParser.OpAtCopyright);
                        this.state = 4553;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 615, this._ctx);
                        while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                {
                                    {
                                        this.state = 4550;
                                        this.matchWildcard();
                                    }
                                }
                            }
                            this.state = 4555;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 615, this._ctx);
                        }
                        this.state = 4556;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dollarans() {
        let _localctx = new DollaransContext(this._ctx, this.state);
        this.enterRule(_localctx, 432, bitmarkParser.RULE_dollarans);
        let _la;
        try {
            this.state = 4578;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 621, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4559;
                        this.match(bitmarkParser.OPDOLL);
                        this.state = 4563;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 4563;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 617, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4560;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4561;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4562;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                }
                            }
                            this.state = 4565;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0));
                        this.state = 4567;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4568;
                        this.match(bitmarkParser.OPDOLL);
                        this.state = 4574;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NL - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                            {
                                this.state = 4572;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 619, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4569;
                                            this.s_and_w();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 4570;
                                            this.match(bitmarkParser.COLON);
                                        }
                                        break;
                                    case 3:
                                        {
                                            this.state = 4571;
                                            this.match(bitmarkParser.NL);
                                        }
                                        break;
                                }
                            }
                            this.state = 4576;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4577;
                        this.match(bitmarkParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    anchor() {
        let _localctx = new AnchorContext(this._ctx, this.state);
        this.enterRule(_localctx, 434, bitmarkParser.RULE_anchor);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4580;
                this.match(bitmarkParser.OPDANGLE);
                this.state = 4582;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === bitmarkParser.S || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (bitmarkParser.OPS - 154)) | (1 << (bitmarkParser.COLON - 154)) | (1 << (bitmarkParser.AMP - 154)) | (1 << (bitmarkParser.Greater - 154)) | (1 << (bitmarkParser.Less - 154)) | (1 << (bitmarkParser.RightAngle - 154)) | (1 << (bitmarkParser.RightArrow - 154)) | (1 << (bitmarkParser.DBLEQ - 154)) | (1 << (bitmarkParser.QUOTE_INDEX - 154)) | (1 << (bitmarkParser.NUMERIC - 154)) | (1 << (bitmarkParser.STRING - 154)) | (1 << (bitmarkParser.NOTBITMARK - 154)) | (1 << (bitmarkParser.ELIPSIS - 154)))) !== 0) || _la === bitmarkParser.SENTENCE || _la === bitmarkParser.BARSTRING || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (bitmarkParser.AmpAudio - 219)) | (1 << (bitmarkParser.AmpImage - 219)) | (1 << (bitmarkParser.AmpVideo - 219)) | (1 << (bitmarkParser.AmpArticle - 219)) | (1 << (bitmarkParser.AmpDocument - 219)) | (1 << (bitmarkParser.AmpApp - 219)) | (1 << (bitmarkParser.AmpWebsite - 219)) | (1 << (bitmarkParser.AmpStillImageFilm - 219)) | (1 << (bitmarkParser.AmpAudioLink - 219)) | (1 << (bitmarkParser.AmpImageLink - 219)) | (1 << (bitmarkParser.AmpVideoLink - 219)) | (1 << (bitmarkParser.AmpArticleLink - 219)) | (1 << (bitmarkParser.AmpDocumentLink - 219)) | (1 << (bitmarkParser.AmpAppLink - 219)) | (1 << (bitmarkParser.AmpWebsiteLink - 219)) | (1 << (bitmarkParser.AmpStillImageFilmLink - 219)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (bitmarkParser.BitmarkMinus - 270)) | (1 << (bitmarkParser.BitmarkPlus - 270)) | (1 << (bitmarkParser.URL - 270)))) !== 0)) {
                    {
                        this.state = 4581;
                        this.s_and_w();
                    }
                }
                this.state = 4584;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lines() {
        let _localctx = new LinesContext(this._ctx, this.state);
        this.enterRule(_localctx, 436, bitmarkParser.RULE_lines);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4590;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4586;
                                    this.s_and_w();
                                    this.state = 4588;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 623, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 4587;
                                                this.match(bitmarkParser.NL);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4592;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 624, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    s_and_w() {
        let _localctx = new S_and_wContext(this._ctx, this.state);
        this.enterRule(_localctx, 438, bitmarkParser.RULE_s_and_w);
        let _la;
        try {
            let _alt;
            this.state = 4639;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 632, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4594;
                        this.match(bitmarkParser.STRING);
                        this.state = 4601;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 626, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4596;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 4595;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 4598;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S);
                                    this.state = 4600;
                                    this.match(bitmarkParser.NUMERIC);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4603;
                        this.words();
                        this.state = 4610;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 628, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4605;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 4604;
                                                this.match(bitmarkParser.S);
                                            }
                                        }
                                        this.state = 4607;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === bitmarkParser.S);
                                    this.state = 4609;
                                    this.match(bitmarkParser.NUMERIC);
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4612;
                        this.match(bitmarkParser.NUMERIC);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4613;
                        this.match(bitmarkParser.OPS);
                        this.state = 4614;
                        this.s_and_w();
                        this.state = 4615;
                        this.match(bitmarkParser.CL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 4620;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === bitmarkParser.S) {
                            {
                                {
                                    this.state = 4617;
                                    this.match(bitmarkParser.S);
                                }
                            }
                            this.state = 4622;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4623;
                        this.match(bitmarkParser.COLON);
                        this.state = 4627;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 630, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 4624;
                                        this.match(bitmarkParser.S);
                                    }
                                }
                            }
                            this.state = 4629;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 630, this._ctx);
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 4630;
                        this.match(bitmarkParser.AMP);
                        this.state = 4634;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 631, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 4631;
                                        this.match(bitmarkParser.S);
                                    }
                                }
                            }
                            this.state = 4636;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 631, this._ctx);
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 4637;
                        this.match(bitmarkParser.DBLEQ);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 4638;
                        this.match(bitmarkParser.URL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dclines() {
        let _localctx = new DclinesContext(this._ctx, this.state);
        this.enterRule(_localctx, 440, bitmarkParser.RULE_dclines);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4641;
                this.match(bitmarkParser.DCANY);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    clnsp() {
        let _localctx = new ClnspContext(this._ctx, this.state);
        this.enterRule(_localctx, 442, bitmarkParser.RULE_clnsp);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4643;
                this.match(bitmarkParser.CL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sspl() {
        let _localctx = new SsplContext(this._ctx, this.state);
        this.enterRule(_localctx, 444, bitmarkParser.RULE_sspl);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4645;
                _la = this._input.LA(1);
                if (!(_la === bitmarkParser.SSPL || _la === bitmarkParser.SSPL2)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    words() {
        let _localctx = new WordsContext(this._ctx, this.state);
        this.enterRule(_localctx, 446, bitmarkParser.RULE_words);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4677;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                this.state = 4677;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case bitmarkParser.SENTENCE:
                                        {
                                            this.state = 4647;
                                            this.sentence();
                                        }
                                        break;
                                    case bitmarkParser.NOTBITMARK:
                                        {
                                            this.state = 4648;
                                            this.match(bitmarkParser.NOTBITMARK);
                                        }
                                        break;
                                    case bitmarkParser.BARSTRING:
                                        {
                                            this.state = 4649;
                                            this.match(bitmarkParser.BARSTRING);
                                        }
                                        break;
                                    case bitmarkParser.ELIPSIS:
                                        {
                                            this.state = 4650;
                                            this.match(bitmarkParser.ELIPSIS);
                                        }
                                        break;
                                    case bitmarkParser.AMP:
                                        {
                                            this.state = 4651;
                                            this.match(bitmarkParser.AMP);
                                        }
                                        break;
                                    case bitmarkParser.Greater:
                                        {
                                            this.state = 4652;
                                            this.match(bitmarkParser.Greater);
                                            this.state = 4653;
                                            _la = this._input.LA(1);
                                            if (_la <= 0 || (_la === bitmarkParser.Greater)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                        }
                                        break;
                                    case bitmarkParser.Less:
                                        {
                                            this.state = 4654;
                                            this.match(bitmarkParser.Less);
                                            this.state = 4655;
                                            _la = this._input.LA(1);
                                            if (_la <= 0 || (_la === bitmarkParser.Less)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                        }
                                        break;
                                    case bitmarkParser.RightArrow:
                                        {
                                            this.state = 4656;
                                            this.match(bitmarkParser.RightArrow);
                                        }
                                        break;
                                    case bitmarkParser.RightAngle:
                                        {
                                            this.state = 4657;
                                            this.match(bitmarkParser.RightAngle);
                                        }
                                        break;
                                    case bitmarkParser.AmpArticle:
                                        {
                                            this.state = 4658;
                                            this.match(bitmarkParser.AmpArticle);
                                        }
                                        break;
                                    case bitmarkParser.AmpArticleLink:
                                        {
                                            this.state = 4659;
                                            this.match(bitmarkParser.AmpArticleLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpDocument:
                                        {
                                            this.state = 4660;
                                            this.match(bitmarkParser.AmpDocument);
                                        }
                                        break;
                                    case bitmarkParser.AmpDocumentLink:
                                        {
                                            this.state = 4661;
                                            this.match(bitmarkParser.AmpDocumentLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpWebsite:
                                        {
                                            this.state = 4662;
                                            this.match(bitmarkParser.AmpWebsite);
                                        }
                                        break;
                                    case bitmarkParser.AmpWebsiteLink:
                                        {
                                            this.state = 4663;
                                            this.match(bitmarkParser.AmpWebsiteLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpImage:
                                        {
                                            this.state = 4664;
                                            this.match(bitmarkParser.AmpImage);
                                        }
                                        break;
                                    case bitmarkParser.AmpImageLink:
                                        {
                                            this.state = 4665;
                                            this.match(bitmarkParser.AmpImageLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpAudio:
                                        {
                                            this.state = 4666;
                                            this.match(bitmarkParser.AmpAudio);
                                        }
                                        break;
                                    case bitmarkParser.AmpAudioLink:
                                        {
                                            this.state = 4667;
                                            this.match(bitmarkParser.AmpAudioLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpVideo:
                                        {
                                            this.state = 4668;
                                            this.match(bitmarkParser.AmpVideo);
                                        }
                                        break;
                                    case bitmarkParser.AmpVideoLink:
                                        {
                                            this.state = 4669;
                                            this.match(bitmarkParser.AmpVideoLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpApp:
                                        {
                                            this.state = 4670;
                                            this.match(bitmarkParser.AmpApp);
                                        }
                                        break;
                                    case bitmarkParser.AmpAppLink:
                                        {
                                            this.state = 4671;
                                            this.match(bitmarkParser.AmpAppLink);
                                        }
                                        break;
                                    case bitmarkParser.AmpStillImageFilm:
                                        {
                                            this.state = 4672;
                                            this.match(bitmarkParser.AmpStillImageFilm);
                                        }
                                        break;
                                    case bitmarkParser.AmpStillImageFilmLink:
                                        {
                                            this.state = 4673;
                                            this.match(bitmarkParser.AmpStillImageFilmLink);
                                        }
                                        break;
                                    case bitmarkParser.BitmarkMinus:
                                        {
                                            this.state = 4674;
                                            this.match(bitmarkParser.BitmarkMinus);
                                        }
                                        break;
                                    case bitmarkParser.BitmarkPlus:
                                        {
                                            this.state = 4675;
                                            this.match(bitmarkParser.BitmarkPlus);
                                        }
                                        break;
                                    case bitmarkParser.QUOTE_INDEX:
                                        {
                                            this.state = 4676;
                                            this.match(bitmarkParser.QUOTE_INDEX);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4679;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 634, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sp() {
        let _localctx = new SpContext(this._ctx, this.state);
        this.enterRule(_localctx, 448, bitmarkParser.RULE_sp);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4681;
                this.match(bitmarkParser.S);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sentence() {
        let _localctx = new SentenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 450, bitmarkParser.RULE_sentence);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4683;
                this.match(bitmarkParser.SENTENCE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    static get _ATN() {
        if (!bitmarkParser.__ATN) {
            bitmarkParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(bitmarkParser._serializedATN));
        }
        return bitmarkParser.__ATN;
    }
}
exports.bitmarkParser = bitmarkParser;
bitmarkParser.OPDOT = 1;
bitmarkParser.S = 2;
bitmarkParser.BitBook = 3;
bitmarkParser.BitChapter = 4;
bitmarkParser.BitToc = 5;
bitmarkParser.BitSummary = 6;
bitmarkParser.BitIntlink = 7;
bitmarkParser.BitIntRef = 8;
bitmarkParser.BitAlias = 9;
bitmarkParser.BitGroups = 10;
bitmarkParser.BitGroupt = 11;
bitmarkParser.BitPlaceholder = 12;
bitmarkParser.BitStatement = 13;
bitmarkParser.BitDetails = 14;
bitmarkParser.BitSampleSolution = 15;
bitmarkParser.BitTakeAudio = 16;
bitmarkParser.CLOZE = 17;
bitmarkParser.MATCH = 18;
bitmarkParser.BitArticle = 19;
bitmarkParser.BitPage = 20;
bitmarkParser.BitEssay = 21;
bitmarkParser.BitMessage = 22;
bitmarkParser.BitCorrection = 23;
bitmarkParser.BitMark = 24;
bitmarkParser.BitTakepic = 25;
bitmarkParser.BitRecaud = 26;
bitmarkParser.BitPrepnote = 27;
bitmarkParser.BitAssign = 28;
bitmarkParser.BitBotint = 29;
bitmarkParser.BitSelfassess = 30;
bitmarkParser.BitRating = 31;
bitmarkParser.BitSurvey = 32;
bitmarkParser.BitSurvey1 = 33;
bitmarkParser.BitSurveyanon = 34;
bitmarkParser.BitSurveyanon1 = 35;
bitmarkParser.BitNote = 36;
bitmarkParser.BitInfo = 37;
bitmarkParser.BitWarning = 38;
bitmarkParser.BitRemark = 39;
bitmarkParser.BitHint = 40;
bitmarkParser.BitHelp = 41;
bitmarkParser.BitDanger = 42;
bitmarkParser.BitBug = 43;
bitmarkParser.BitSidenote = 44;
bitmarkParser.BitStickynote = 45;
bitmarkParser.BitQuote = 46;
bitmarkParser.BitFootnote = 47;
bitmarkParser.BitExample = 48;
bitmarkParser.BitButtonCopytext = 49;
bitmarkParser.BitWbtContinue = 50;
bitmarkParser.BitLearningPathDetails = 51;
bitmarkParser.BitLearningPathLti = 52;
bitmarkParser.BitLearningPathStep = 53;
bitmarkParser.BitLearningPathBook = 54;
bitmarkParser.BitLearningPathSign = 55;
bitmarkParser.BitLearningPathVideoCall = 56;
bitmarkParser.BitLearningPathLearningGoal = 57;
bitmarkParser.BitLearningPathClosing = 58;
bitmarkParser.BitLearningPathFeedback = 59;
bitmarkParser.BitLearningPathBotTraining = 60;
bitmarkParser.BitLearningPathExternalLink = 61;
bitmarkParser.BitLearningPathClassroomTraining = 62;
bitmarkParser.BitLearningPathClassroomEvent = 63;
bitmarkParser.BitBotActionSend = 64;
bitmarkParser.BitBotActionAnnounce = 65;
bitmarkParser.BitBotActionSave = 66;
bitmarkParser.BitBotActionRemind = 67;
bitmarkParser.BitVendorPadletEmbed = 68;
bitmarkParser.BitScorm = 69;
bitmarkParser.BitImage = 70;
bitmarkParser.BitImageLink = 71;
bitmarkParser.BitImageZoom = 72;
bitmarkParser.BitImagePrototype = 73;
bitmarkParser.BitImageSuperWide = 74;
bitmarkParser.BitAudio = 75;
bitmarkParser.BitAudioLink = 76;
bitmarkParser.BitAudioEmbed = 77;
bitmarkParser.BitVideo = 78;
bitmarkParser.BitVideoLink = 79;
bitmarkParser.BitVideoEmbed = 80;
bitmarkParser.BitVideoPortrait = 81;
bitmarkParser.BitVideoLandscape = 82;
bitmarkParser.BitStillImageFilm = 83;
bitmarkParser.BitStillImageFilmLink = 84;
bitmarkParser.BitStillImageFilmEmbed = 85;
bitmarkParser.BitWebsiteLink = 86;
bitmarkParser.BitDocument = 87;
bitmarkParser.BitDocumentLink = 88;
bitmarkParser.BitDocumentEmbed = 89;
bitmarkParser.BitDocumentDownload = 90;
bitmarkParser.BitAppLink = 91;
bitmarkParser.BitEditorial = 92;
bitmarkParser.BitBookFrontispiece = 93;
bitmarkParser.BitBookTitle = 94;
bitmarkParser.BitBookCopyright = 95;
bitmarkParser.BitBookDedication = 96;
bitmarkParser.BitBookForword = 97;
bitmarkParser.BitBookPreface = 98;
bitmarkParser.BitBookPrologue = 99;
bitmarkParser.BitBookEpilogue = 100;
bitmarkParser.BitBookIntroduction = 101;
bitmarkParser.BitBookIncitingIncident = 102;
bitmarkParser.BitBookConclusion = 103;
bitmarkParser.BitBookAfterword = 104;
bitmarkParser.BitBookPostscript = 105;
bitmarkParser.BitBookappendix = 106;
bitmarkParser.BitBookAddendum = 107;
bitmarkParser.BitBookAcknowledgments = 108;
bitmarkParser.BitBookListOfContributors = 109;
bitmarkParser.BitBookBibliography = 110;
bitmarkParser.BitBookReferenceList = 111;
bitmarkParser.BitBookEndnotes = 112;
bitmarkParser.BitBookNotes = 113;
bitmarkParser.BitBookCopyrightPermissions = 114;
bitmarkParser.BitBookTeaser = 115;
bitmarkParser.BitBookAutherBio = 116;
bitmarkParser.BitBookRequestForABookReview = 117;
bitmarkParser.BitBookComingSoon = 118;
bitmarkParser.BitBookReadMore = 119;
bitmarkParser.BitBookSummary = 120;
bitmarkParser.BitBookEpigraph = 121;
bitmarkParser.BitCode = 122;
bitmarkParser.BitCard1 = 123;
bitmarkParser.BitQuestion1 = 124;
bitmarkParser.BitScreenshot = 125;
bitmarkParser.BitFocusImage = 126;
bitmarkParser.BitPhoto = 127;
bitmarkParser.BitBrowserImage = 128;
bitmarkParser.BitBotActionResponse = 129;
bitmarkParser.BitBotActionTrueFalse = 130;
bitmarkParser.BitBotActionRatingNumber = 131;
bitmarkParser.BitBotActionRatingStars = 132;
bitmarkParser.BitChapterSubjectMatter = 133;
bitmarkParser.BitReleaseNote = 134;
bitmarkParser.BitConclusion = 135;
bitmarkParser.BitVendorAmcharts5Chart = 136;
bitmarkParser.BitFeatured = 137;
bitmarkParser.BitNewspaperArticle = 138;
bitmarkParser.BitBlogArticle = 139;
bitmarkParser.BitBookArticle = 140;
bitmarkParser.BitNotebookArticle = 141;
bitmarkParser.BitWorkbookArticle = 142;
bitmarkParser.OPDOLL = 143;
bitmarkParser.OPBUL = 144;
bitmarkParser.OPRANGLES = 145;
bitmarkParser.OPRANGLEL = 146;
bitmarkParser.OPDANGLE = 147;
bitmarkParser.OPU = 148;
bitmarkParser.OPB = 149;
bitmarkParser.OPQ = 150;
bitmarkParser.OPA = 151;
bitmarkParser.OPP = 152;
bitmarkParser.OPM = 153;
bitmarkParser.OPS = 154;
bitmarkParser.OPR = 155;
bitmarkParser.OPHASH = 156;
bitmarkParser.OPC = 157;
bitmarkParser.CL = 158;
bitmarkParser.COLON = 159;
bitmarkParser.AMP = 160;
bitmarkParser.DBLCOLON = 161;
bitmarkParser.PLUS = 162;
bitmarkParser.DotAt = 163;
bitmarkParser.Greater = 164;
bitmarkParser.Less = 165;
bitmarkParser.RightAngle = 166;
bitmarkParser.RightArrow = 167;
bitmarkParser.DBLEQ = 168;
bitmarkParser.HSPL = 169;
bitmarkParser.HSPL2 = 170;
bitmarkParser.SSPL = 171;
bitmarkParser.SSPL2 = 172;
bitmarkParser.QUOTE_INDEX = 173;
bitmarkParser.COMMENT = 174;
bitmarkParser.DCANY = 175;
bitmarkParser.Image_type = 176;
bitmarkParser.Audio_type = 177;
bitmarkParser.Video_type = 178;
bitmarkParser.ArticleText = 179;
bitmarkParser.NOTCL = 180;
bitmarkParser.NUMERIC = 181;
bitmarkParser.STRING = 182;
bitmarkParser.NL = 183;
bitmarkParser.NOTBITMARK = 184;
bitmarkParser.ELIPSIS = 185;
bitmarkParser.SENTENCE = 186;
bitmarkParser.BARSTRING = 187;
bitmarkParser.OPAT = 188;
bitmarkParser.AtProgress = 189;
bitmarkParser.AtReference = 190;
bitmarkParser.AtWidth = 191;
bitmarkParser.AtHeight = 192;
bitmarkParser.AtProgressPoints = 193;
bitmarkParser.AtShortanswer = 194;
bitmarkParser.AtLonganswer = 195;
bitmarkParser.AtExampleWithStr = 196;
bitmarkParser.AtExamplecol = 197;
bitmarkParser.AtExamplecl = 198;
bitmarkParser.AtSampleSolution = 199;
bitmarkParser.AtPartialAnswerS = 200;
bitmarkParser.AtPartialAnswer = 201;
bitmarkParser.AtLabeltrue = 202;
bitmarkParser.AtLabelfalse = 203;
bitmarkParser.AtPoints = 204;
bitmarkParser.AtSrc = 205;
bitmarkParser.AtPartner = 206;
bitmarkParser.OPATALT = 207;
bitmarkParser.OPAMARK = 208;
bitmarkParser.ShowInIndex = 209;
bitmarkParser.OpAtCaption = 210;
bitmarkParser.OpAtLicense = 211;
bitmarkParser.OpAtCopyright = 212;
bitmarkParser.OpAtSearch = 213;
bitmarkParser.OpAtIsTracked = 214;
bitmarkParser.OpAtIsInfoOnly = 215;
bitmarkParser.AtDate = 216;
bitmarkParser.Http = 217;
bitmarkParser.Https = 218;
bitmarkParser.AmpAudio = 219;
bitmarkParser.AmpImage = 220;
bitmarkParser.AmpImageZoom = 221;
bitmarkParser.AmpImageWAudio = 222;
bitmarkParser.AmpVideo = 223;
bitmarkParser.AmpArticle = 224;
bitmarkParser.AmpDocument = 225;
bitmarkParser.AmpApp = 226;
bitmarkParser.AmpWebsite = 227;
bitmarkParser.AmpStillImageFilm = 228;
bitmarkParser.AmpPdf = 229;
bitmarkParser.OpAmpAudio = 230;
bitmarkParser.OpAmpImage = 231;
bitmarkParser.OpAmpImageZoom = 232;
bitmarkParser.OpAmpImageWAudio = 233;
bitmarkParser.OpAmpVideo = 234;
bitmarkParser.OpAmpArticle = 235;
bitmarkParser.OpAmpArticleAtt = 236;
bitmarkParser.OpAmpDocument = 237;
bitmarkParser.OpAmpApp = 238;
bitmarkParser.OpAmpWebsite = 239;
bitmarkParser.OpAmpStillImageFilm = 240;
bitmarkParser.BracEnclose = 241;
bitmarkParser.AmpAudioLink = 242;
bitmarkParser.AmpImageLink = 243;
bitmarkParser.AmpVideoLink = 244;
bitmarkParser.AmpArticleLink = 245;
bitmarkParser.AmpDocumentLink = 246;
bitmarkParser.AmpDocumentDownload = 247;
bitmarkParser.AmpAppLink = 248;
bitmarkParser.AmpWebsiteLink = 249;
bitmarkParser.AmpStillImageFilmLink = 250;
bitmarkParser.OpAmpAudioLink = 251;
bitmarkParser.OpAmpImageLink = 252;
bitmarkParser.OpAmpVideoLink = 253;
bitmarkParser.OpAmpArticleLink = 254;
bitmarkParser.OpAmpDocumentLink = 255;
bitmarkParser.OpAmpDocumentDownload = 256;
bitmarkParser.OpAmpAppLink = 257;
bitmarkParser.OpAmpWebsiteLink = 258;
bitmarkParser.OpAmpStillImageFilmLink = 259;
bitmarkParser.AmpImageEmbed = 260;
bitmarkParser.AmpVideoEmbed = 261;
bitmarkParser.AmpAudioEmbed = 262;
bitmarkParser.AmpDocumentEmbed = 263;
bitmarkParser.AmpStillImageFilmEmbed = 264;
bitmarkParser.OpAmpImageEmbed = 265;
bitmarkParser.OpAmpVideoEmbed = 266;
bitmarkParser.OpAmpAudioEmbed = 267;
bitmarkParser.OpAmpDocumentEmbed = 268;
bitmarkParser.OpAmpStillImageFilmEmbed = 269;
bitmarkParser.BitmarkMinus = 270;
bitmarkParser.BitmarkPlus = 271;
bitmarkParser.ColonText = 272;
bitmarkParser.ColonJson = 273;
bitmarkParser.Prosemirror = 274;
bitmarkParser.Placeholder = 275;
bitmarkParser.BASIC = 276;
bitmarkParser.JPG = 277;
bitmarkParser.PNG = 278;
bitmarkParser.GIF = 279;
bitmarkParser.SVG = 280;
bitmarkParser.MP2 = 281;
bitmarkParser.MP3 = 282;
bitmarkParser.MP4 = 283;
bitmarkParser.FLV = 284;
bitmarkParser.WMV = 285;
bitmarkParser.MPEG = 286;
bitmarkParser.MPG = 287;
bitmarkParser.TEL = 288;
bitmarkParser.DotArticleAtt = 289;
bitmarkParser.STAR = 290;
bitmarkParser.URL = 291;
bitmarkParser.LIST_LINE = 292;
bitmarkParser.ENCLBARS = 293;
bitmarkParser.RULE_bitmark = 0;
bitmarkParser.RULE_bitmark_ = 1;
bitmarkParser.RULE_bit = 2;
bitmarkParser.RULE_book = 3;
bitmarkParser.RULE_chapter = 4;
bitmarkParser.RULE_toc = 5;
bitmarkParser.RULE_summary = 6;
bitmarkParser.RULE_internal_link = 7;
bitmarkParser.RULE_bit_alias = 8;
bitmarkParser.RULE_title_etc = 9;
bitmarkParser.RULE_group_born = 10;
bitmarkParser.RULE_group_died = 11;
bitmarkParser.RULE_learning_path_lti = 12;
bitmarkParser.RULE_learning_path_step = 13;
bitmarkParser.RULE_learning_path_book = 14;
bitmarkParser.RULE_learning_path_sign = 15;
bitmarkParser.RULE_learning_path_video_call = 16;
bitmarkParser.RULE_learning_path_learning_goal = 17;
bitmarkParser.RULE_learning_path_closing = 18;
bitmarkParser.RULE_learning_path_feedback = 19;
bitmarkParser.RULE_learning_path_bot_training = 20;
bitmarkParser.RULE_learning_path_external_link = 21;
bitmarkParser.RULE_learning_path_classroom_training = 22;
bitmarkParser.RULE_learning_path_classroom_event = 23;
bitmarkParser.RULE_bot_action_send = 24;
bitmarkParser.RULE_bot_action_announce = 25;
bitmarkParser.RULE_bot_action_save = 26;
bitmarkParser.RULE_bot_action_remind = 27;
bitmarkParser.RULE_bot_action_response = 28;
bitmarkParser.RULE_bot_action_true_false = 29;
bitmarkParser.RULE_bot_action_rating_number = 30;
bitmarkParser.RULE_bot_action_rating_stars = 31;
bitmarkParser.RULE_bot_action = 32;
bitmarkParser.RULE_bo_actions = 33;
bitmarkParser.RULE_boacts = 34;
bitmarkParser.RULE_feedback = 35;
bitmarkParser.RULE_footer = 36;
bitmarkParser.RULE_bitElem = 37;
bitmarkParser.RULE_gap = 38;
bitmarkParser.RULE_single_gap = 39;
bitmarkParser.RULE_choice_plus = 40;
bitmarkParser.RULE_choice_minus = 41;
bitmarkParser.RULE_choice_star = 42;
bitmarkParser.RULE_essay = 43;
bitmarkParser.RULE_ml_example = 44;
bitmarkParser.RULE_partans = 45;
bitmarkParser.RULE_resource = 46;
bitmarkParser.RULE_correction = 47;
bitmarkParser.RULE_corrs = 48;
bitmarkParser.RULE_mark_ = 49;
bitmarkParser.RULE_mark_text = 50;
bitmarkParser.RULE_mark_color = 51;
bitmarkParser.RULE_take_audio = 52;
bitmarkParser.RULE_take_picture = 53;
bitmarkParser.RULE_record_audio = 54;
bitmarkParser.RULE_preparation_note = 55;
bitmarkParser.RULE_assignment = 56;
bitmarkParser.RULE_article = 57;
bitmarkParser.RULE_statement = 58;
bitmarkParser.RULE_details = 59;
bitmarkParser.RULE_sample_solution = 60;
bitmarkParser.RULE_buttoncopytext = 61;
bitmarkParser.RULE_wbtcontinue = 62;
bitmarkParser.RULE_learningpathdetails = 63;
bitmarkParser.RULE_page = 64;
bitmarkParser.RULE_note = 65;
bitmarkParser.RULE_info = 66;
bitmarkParser.RULE_warning = 67;
bitmarkParser.RULE_remark = 68;
bitmarkParser.RULE_help = 69;
bitmarkParser.RULE_danger = 70;
bitmarkParser.RULE_bug = 71;
bitmarkParser.RULE_sidenote = 72;
bitmarkParser.RULE_stickynote = 73;
bitmarkParser.RULE_quote = 74;
bitmarkParser.RULE_footnote = 75;
bitmarkParser.RULE_hintbit = 76;
bitmarkParser.RULE_examplebit = 77;
bitmarkParser.RULE_vendor_padlet_embed = 78;
bitmarkParser.RULE_scorm = 79;
bitmarkParser.RULE_bit_image = 80;
bitmarkParser.RULE_bit_imageLink = 81;
bitmarkParser.RULE_bit_imageZoom = 82;
bitmarkParser.RULE_bit_imagePrototype = 83;
bitmarkParser.RULE_bit_imageSuperWide = 84;
bitmarkParser.RULE_bit_audio = 85;
bitmarkParser.RULE_bit_audioLink = 86;
bitmarkParser.RULE_bit_audioEmbed = 87;
bitmarkParser.RULE_bit_video = 88;
bitmarkParser.RULE_bit_videoLink = 89;
bitmarkParser.RULE_bit_videoEmbed = 90;
bitmarkParser.RULE_bit_videoPortrait = 91;
bitmarkParser.RULE_bit_videoLandscape = 92;
bitmarkParser.RULE_bit_stillImageFilm = 93;
bitmarkParser.RULE_bit_stillImageFilmLink = 94;
bitmarkParser.RULE_bit_stillImageFilmEmbed = 95;
bitmarkParser.RULE_bit_websiteLink = 96;
bitmarkParser.RULE_bit_document = 97;
bitmarkParser.RULE_bit_documentLink = 98;
bitmarkParser.RULE_bit_documentEmbed = 99;
bitmarkParser.RULE_bit_documentDownload = 100;
bitmarkParser.RULE_bit_appLink = 101;
bitmarkParser.RULE_bit_editorial = 102;
bitmarkParser.RULE_book_frontispiece = 103;
bitmarkParser.RULE_book_title = 104;
bitmarkParser.RULE_book_copyright = 105;
bitmarkParser.RULE_book_dedication = 106;
bitmarkParser.RULE_book_forword = 107;
bitmarkParser.RULE_book_preface = 108;
bitmarkParser.RULE_book_prologue = 109;
bitmarkParser.RULE_book_epilogue = 110;
bitmarkParser.RULE_book_introduction = 111;
bitmarkParser.RULE_book_inciting_incident = 112;
bitmarkParser.RULE_book_conclusion = 113;
bitmarkParser.RULE_book_afterword = 114;
bitmarkParser.RULE_book_postscript = 115;
bitmarkParser.RULE_book_appendix = 116;
bitmarkParser.RULE_book_addendum = 117;
bitmarkParser.RULE_book_acknowledgments = 118;
bitmarkParser.RULE_book_list_of_contributors = 119;
bitmarkParser.RULE_book_bibliography = 120;
bitmarkParser.RULE_book_reference_list = 121;
bitmarkParser.RULE_book_endnotes = 122;
bitmarkParser.RULE_book_notes = 123;
bitmarkParser.RULE_book_copyright_permissions = 124;
bitmarkParser.RULE_book_teaser = 125;
bitmarkParser.RULE_book_auther_bio = 126;
bitmarkParser.RULE_book_request_for_a_book_review = 127;
bitmarkParser.RULE_book_coming_soon = 128;
bitmarkParser.RULE_book_read_more = 129;
bitmarkParser.RULE_book_summary = 130;
bitmarkParser.RULE_book_epigraph = 131;
bitmarkParser.RULE_code = 132;
bitmarkParser.RULE_card1 = 133;
bitmarkParser.RULE_question1 = 134;
bitmarkParser.RULE_screenshot = 135;
bitmarkParser.RULE_focus_image = 136;
bitmarkParser.RULE_photo = 137;
bitmarkParser.RULE_browser_image = 138;
bitmarkParser.RULE_chapter_subject_matter = 139;
bitmarkParser.RULE_release_note = 140;
bitmarkParser.RULE_conclusion = 141;
bitmarkParser.RULE_featured = 142;
bitmarkParser.RULE_vendor_amcharts_5_chart = 143;
bitmarkParser.RULE_newspaper_article = 144;
bitmarkParser.RULE_blog_article = 145;
bitmarkParser.RULE_book_article = 146;
bitmarkParser.RULE_notebook_article = 147;
bitmarkParser.RULE_workbook_article = 148;
bitmarkParser.RULE_message = 149;
bitmarkParser.RULE_bot_interview = 150;
bitmarkParser.RULE_bot_choice = 151;
bitmarkParser.RULE_rating = 152;
bitmarkParser.RULE_bullet_item = 153;
bitmarkParser.RULE_survey = 154;
bitmarkParser.RULE_survey_1 = 155;
bitmarkParser.RULE_survey_anonymous = 156;
bitmarkParser.RULE_survey_anonymous_1 = 157;
bitmarkParser.RULE_self_assessment = 158;
bitmarkParser.RULE_self_assess_s_and_w = 159;
bitmarkParser.RULE_atpoint = 160;
bitmarkParser.RULE_format = 161;
bitmarkParser.RULE_resource_format = 162;
bitmarkParser.RULE_resource_format_extra = 163;
bitmarkParser.RULE_format2 = 164;
bitmarkParser.RULE_image_format = 165;
bitmarkParser.RULE_video_format = 166;
bitmarkParser.RULE_article_format = 167;
bitmarkParser.RULE_document_format = 168;
bitmarkParser.RULE_app_format = 169;
bitmarkParser.RULE_website_format = 170;
bitmarkParser.RULE_stillimagefilm_format = 171;
bitmarkParser.RULE_op_article_format = 172;
bitmarkParser.RULE_op_document_format = 173;
bitmarkParser.RULE_op_app_format = 174;
bitmarkParser.RULE_op_website_format = 175;
bitmarkParser.RULE_op_video_format = 176;
bitmarkParser.RULE_op_stillimagefilm_format = 177;
bitmarkParser.RULE_articlebit = 178;
bitmarkParser.RULE_documentbit = 179;
bitmarkParser.RULE_websitebit = 180;
bitmarkParser.RULE_appbit = 181;
bitmarkParser.RULE_stillimagefilmbit = 182;
bitmarkParser.RULE_stillimg_one = 183;
bitmarkParser.RULE_videobit = 184;
bitmarkParser.RULE_video_one = 185;
bitmarkParser.RULE_imagebit = 186;
bitmarkParser.RULE_image_one = 187;
bitmarkParser.RULE_op_image_format = 188;
bitmarkParser.RULE_image_chained = 189;
bitmarkParser.RULE_image_chained4match = 190;
bitmarkParser.RULE_audiobit = 191;
bitmarkParser.RULE_audio_one = 192;
bitmarkParser.RULE_audio_format = 193;
bitmarkParser.RULE_op_audio_format = 194;
bitmarkParser.RULE_resource_chained = 195;
bitmarkParser.RULE_telephone = 196;
bitmarkParser.RULE_url = 197;
bitmarkParser.RULE_item = 198;
bitmarkParser.RULE_lead = 199;
bitmarkParser.RULE_angleref = 200;
bitmarkParser.RULE_example = 201;
bitmarkParser.RULE_bracketed_text = 202;
bitmarkParser.RULE_reference = 203;
bitmarkParser.RULE_progress = 204;
bitmarkParser.RULE_dateprop = 205;
bitmarkParser.RULE_dateprop_chained = 206;
bitmarkParser.RULE_instruction = 207;
bitmarkParser.RULE_hint = 208;
bitmarkParser.RULE_title = 209;
bitmarkParser.RULE_bool_label = 210;
bitmarkParser.RULE_progress_points = 211;
bitmarkParser.RULE_istracked = 212;
bitmarkParser.RULE_isinfoonly = 213;
bitmarkParser.RULE_atdef = 214;
bitmarkParser.RULE_atdef_ = 215;
bitmarkParser.RULE_dollarans = 216;
bitmarkParser.RULE_anchor = 217;
bitmarkParser.RULE_lines = 218;
bitmarkParser.RULE_s_and_w = 219;
bitmarkParser.RULE_dclines = 220;
bitmarkParser.RULE_clnsp = 221;
bitmarkParser.RULE_sspl = 222;
bitmarkParser.RULE_words = 223;
bitmarkParser.RULE_sp = 224;
bitmarkParser.RULE_sentence = 225;
// tslint:disable:no-trailing-whitespace
bitmarkParser.ruleNames = [
    "bitmark", "bitmark_", "bit", "book", "chapter", "toc", "summary", "internal_link",
    "bit_alias", "title_etc", "group_born", "group_died", "learning_path_lti",
    "learning_path_step", "learning_path_book", "learning_path_sign", "learning_path_video_call",
    "learning_path_learning_goal", "learning_path_closing", "learning_path_feedback",
    "learning_path_bot_training", "learning_path_external_link", "learning_path_classroom_training",
    "learning_path_classroom_event", "bot_action_send", "bot_action_announce",
    "bot_action_save", "bot_action_remind", "bot_action_response", "bot_action_true_false",
    "bot_action_rating_number", "bot_action_rating_stars", "bot_action", "bo_actions",
    "boacts", "feedback", "footer", "bitElem", "gap", "single_gap", "choice_plus",
    "choice_minus", "choice_star", "essay", "ml_example", "partans", "resource",
    "correction", "corrs", "mark_", "mark_text", "mark_color", "take_audio",
    "take_picture", "record_audio", "preparation_note", "assignment", "article",
    "statement", "details", "sample_solution", "buttoncopytext", "wbtcontinue",
    "learningpathdetails", "page", "note", "info", "warning", "remark", "help",
    "danger", "bug", "sidenote", "stickynote", "quote", "footnote", "hintbit",
    "examplebit", "vendor_padlet_embed", "scorm", "bit_image", "bit_imageLink",
    "bit_imageZoom", "bit_imagePrototype", "bit_imageSuperWide", "bit_audio",
    "bit_audioLink", "bit_audioEmbed", "bit_video", "bit_videoLink", "bit_videoEmbed",
    "bit_videoPortrait", "bit_videoLandscape", "bit_stillImageFilm", "bit_stillImageFilmLink",
    "bit_stillImageFilmEmbed", "bit_websiteLink", "bit_document", "bit_documentLink",
    "bit_documentEmbed", "bit_documentDownload", "bit_appLink", "bit_editorial",
    "book_frontispiece", "book_title", "book_copyright", "book_dedication",
    "book_forword", "book_preface", "book_prologue", "book_epilogue", "book_introduction",
    "book_inciting_incident", "book_conclusion", "book_afterword", "book_postscript",
    "book_appendix", "book_addendum", "book_acknowledgments", "book_list_of_contributors",
    "book_bibliography", "book_reference_list", "book_endnotes", "book_notes",
    "book_copyright_permissions", "book_teaser", "book_auther_bio", "book_request_for_a_book_review",
    "book_coming_soon", "book_read_more", "book_summary", "book_epigraph",
    "code", "card1", "question1", "screenshot", "focus_image", "photo", "browser_image",
    "chapter_subject_matter", "release_note", "conclusion", "featured", "vendor_amcharts_5_chart",
    "newspaper_article", "blog_article", "book_article", "notebook_article",
    "workbook_article", "message", "bot_interview", "bot_choice", "rating",
    "bullet_item", "survey", "survey_1", "survey_anonymous", "survey_anonymous_1",
    "self_assessment", "self_assess_s_and_w", "atpoint", "format", "resource_format",
    "resource_format_extra", "format2", "image_format", "video_format", "article_format",
    "document_format", "app_format", "website_format", "stillimagefilm_format",
    "op_article_format", "op_document_format", "op_app_format", "op_website_format",
    "op_video_format", "op_stillimagefilm_format", "articlebit", "documentbit",
    "websitebit", "appbit", "stillimagefilmbit", "stillimg_one", "videobit",
    "video_one", "imagebit", "image_one", "op_image_format", "image_chained",
    "image_chained4match", "audiobit", "audio_one", "audio_format", "op_audio_format",
    "resource_chained", "telephone", "url", "item", "lead", "angleref", "example",
    "bracketed_text", "reference", "progress", "dateprop", "dateprop_chained",
    "instruction", "hint", "title", "bool_label", "progress_points", "istracked",
    "isinfoonly", "atdef", "atdef_", "dollarans", "anchor", "lines", "s_and_w",
    "dclines", "clnsp", "sspl", "words", "sp", "sentence",
];
bitmarkParser._LITERAL_NAMES = [
    undefined, "'[.'", undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'CLOZE'", "'MATCH'", undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, "':'", "'&'", "'::'",
    "'+'", "'.@'", "'>'", "'<'", "'\u25BA'", "'\u2192'", "'=='", undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, "'[@'", undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, "'http://'", "'https://'",
    "'&audio'", "'&image'", "'&image-zoom'", "'&image-with-audio'", "'&video'",
    "'&article'", "'&document'", "'&app'", "'&website'", "'&still-image-film'",
    "'&pdf'", undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, "'&audio-link'",
    "'&image-link'", "'&video-link'", "'&article-link'", "'&document-link'",
    "'&document-download'", "'&app-link'", "'&website-link'", "'&still-image-film-link'",
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, "'&image-embed'", "'&video-embed'", "'&daudio-embed'",
    "'&document-embed'", "'&still-image-film-embed'", undefined, undefined,
    undefined, undefined, undefined, "':bitmark--'", "':bitmark++'", "':text'",
    "':json'", "':prosemirror'", "':placeholder'", "':basic'", "':jpg'", "':png'",
    "':gif'", "':svg'", "':mp2'", "':mp3'", "':mp4'", "':flv'", "':wmv'",
    "':mpeg'", "':mpg'", "'tel:'", "'.article-attachment'", "'*'",
];
bitmarkParser._SYMBOLIC_NAMES = [
    undefined, "OPDOT", "S", "BitBook", "BitChapter", "BitToc", "BitSummary",
    "BitIntlink", "BitIntRef", "BitAlias", "BitGroups", "BitGroupt", "BitPlaceholder",
    "BitStatement", "BitDetails", "BitSampleSolution", "BitTakeAudio", "CLOZE",
    "MATCH", "BitArticle", "BitPage", "BitEssay", "BitMessage", "BitCorrection",
    "BitMark", "BitTakepic", "BitRecaud", "BitPrepnote", "BitAssign", "BitBotint",
    "BitSelfassess", "BitRating", "BitSurvey", "BitSurvey1", "BitSurveyanon",
    "BitSurveyanon1", "BitNote", "BitInfo", "BitWarning", "BitRemark", "BitHint",
    "BitHelp", "BitDanger", "BitBug", "BitSidenote", "BitStickynote", "BitQuote",
    "BitFootnote", "BitExample", "BitButtonCopytext", "BitWbtContinue", "BitLearningPathDetails",
    "BitLearningPathLti", "BitLearningPathStep", "BitLearningPathBook", "BitLearningPathSign",
    "BitLearningPathVideoCall", "BitLearningPathLearningGoal", "BitLearningPathClosing",
    "BitLearningPathFeedback", "BitLearningPathBotTraining", "BitLearningPathExternalLink",
    "BitLearningPathClassroomTraining", "BitLearningPathClassroomEvent", "BitBotActionSend",
    "BitBotActionAnnounce", "BitBotActionSave", "BitBotActionRemind", "BitVendorPadletEmbed",
    "BitScorm", "BitImage", "BitImageLink", "BitImageZoom", "BitImagePrototype",
    "BitImageSuperWide", "BitAudio", "BitAudioLink", "BitAudioEmbed", "BitVideo",
    "BitVideoLink", "BitVideoEmbed", "BitVideoPortrait", "BitVideoLandscape",
    "BitStillImageFilm", "BitStillImageFilmLink", "BitStillImageFilmEmbed",
    "BitWebsiteLink", "BitDocument", "BitDocumentLink", "BitDocumentEmbed",
    "BitDocumentDownload", "BitAppLink", "BitEditorial", "BitBookFrontispiece",
    "BitBookTitle", "BitBookCopyright", "BitBookDedication", "BitBookForword",
    "BitBookPreface", "BitBookPrologue", "BitBookEpilogue", "BitBookIntroduction",
    "BitBookIncitingIncident", "BitBookConclusion", "BitBookAfterword", "BitBookPostscript",
    "BitBookappendix", "BitBookAddendum", "BitBookAcknowledgments", "BitBookListOfContributors",
    "BitBookBibliography", "BitBookReferenceList", "BitBookEndnotes", "BitBookNotes",
    "BitBookCopyrightPermissions", "BitBookTeaser", "BitBookAutherBio", "BitBookRequestForABookReview",
    "BitBookComingSoon", "BitBookReadMore", "BitBookSummary", "BitBookEpigraph",
    "BitCode", "BitCard1", "BitQuestion1", "BitScreenshot", "BitFocusImage",
    "BitPhoto", "BitBrowserImage", "BitBotActionResponse", "BitBotActionTrueFalse",
    "BitBotActionRatingNumber", "BitBotActionRatingStars", "BitChapterSubjectMatter",
    "BitReleaseNote", "BitConclusion", "BitVendorAmcharts5Chart", "BitFeatured",
    "BitNewspaperArticle", "BitBlogArticle", "BitBookArticle", "BitNotebookArticle",
    "BitWorkbookArticle", "OPDOLL", "OPBUL", "OPRANGLES", "OPRANGLEL", "OPDANGLE",
    "OPU", "OPB", "OPQ", "OPA", "OPP", "OPM", "OPS", "OPR", "OPHASH", "OPC",
    "CL", "COLON", "AMP", "DBLCOLON", "PLUS", "DotAt", "Greater", "Less",
    "RightAngle", "RightArrow", "DBLEQ", "HSPL", "HSPL2", "SSPL", "SSPL2",
    "QUOTE_INDEX", "COMMENT", "DCANY", "Image_type", "Audio_type", "Video_type",
    "ArticleText", "NOTCL", "NUMERIC", "STRING", "NL", "NOTBITMARK", "ELIPSIS",
    "SENTENCE", "BARSTRING", "OPAT", "AtProgress", "AtReference", "AtWidth",
    "AtHeight", "AtProgressPoints", "AtShortanswer", "AtLonganswer", "AtExampleWithStr",
    "AtExamplecol", "AtExamplecl", "AtSampleSolution", "AtPartialAnswerS",
    "AtPartialAnswer", "AtLabeltrue", "AtLabelfalse", "AtPoints", "AtSrc",
    "AtPartner", "OPATALT", "OPAMARK", "ShowInIndex", "OpAtCaption", "OpAtLicense",
    "OpAtCopyright", "OpAtSearch", "OpAtIsTracked", "OpAtIsInfoOnly", "AtDate",
    "Http", "Https", "AmpAudio", "AmpImage", "AmpImageZoom", "AmpImageWAudio",
    "AmpVideo", "AmpArticle", "AmpDocument", "AmpApp", "AmpWebsite", "AmpStillImageFilm",
    "AmpPdf", "OpAmpAudio", "OpAmpImage", "OpAmpImageZoom", "OpAmpImageWAudio",
    "OpAmpVideo", "OpAmpArticle", "OpAmpArticleAtt", "OpAmpDocument", "OpAmpApp",
    "OpAmpWebsite", "OpAmpStillImageFilm", "BracEnclose", "AmpAudioLink",
    "AmpImageLink", "AmpVideoLink", "AmpArticleLink", "AmpDocumentLink", "AmpDocumentDownload",
    "AmpAppLink", "AmpWebsiteLink", "AmpStillImageFilmLink", "OpAmpAudioLink",
    "OpAmpImageLink", "OpAmpVideoLink", "OpAmpArticleLink", "OpAmpDocumentLink",
    "OpAmpDocumentDownload", "OpAmpAppLink", "OpAmpWebsiteLink", "OpAmpStillImageFilmLink",
    "AmpImageEmbed", "AmpVideoEmbed", "AmpAudioEmbed", "AmpDocumentEmbed",
    "AmpStillImageFilmEmbed", "OpAmpImageEmbed", "OpAmpVideoEmbed", "OpAmpAudioEmbed",
    "OpAmpDocumentEmbed", "OpAmpStillImageFilmEmbed", "BitmarkMinus", "BitmarkPlus",
    "ColonText", "ColonJson", "Prosemirror", "Placeholder", "BASIC", "JPG",
    "PNG", "GIF", "SVG", "MP2", "MP3", "MP4", "FLV", "WMV", "MPEG", "MPG",
    "TEL", "DotArticleAtt", "STAR", "URL", "LIST_LINE", "ENCLBARS",
];
bitmarkParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(bitmarkParser._LITERAL_NAMES, bitmarkParser._SYMBOLIC_NAMES, []);
bitmarkParser._serializedATNSegments = 9;
bitmarkParser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0127\u1250\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
    "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
    "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
    "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
    "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
    "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
    "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
    "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
    "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
    "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
    "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
    "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
    "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
    "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
    "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
    "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
    "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
    "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
    "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
    "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
    "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
    "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
    "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
    "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
    "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
    "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
    "\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
    "\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
    "\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
    "\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
    "\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
    "\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
    "\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
    "\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x03\x02\x03\x02\x07\x02\u01C9" +
    "\n\x02\f\x02\x0E\x02\u01CC\v\x02\x03\x02\x07\x02\u01CF\n\x02\f\x02\x0E" +
    "\x02\u01D2\v\x02\x06\x02\u01D4\n\x02\r\x02\x0E\x02\u01D5\x03\x02\x07\x02" +
    "\u01D9\n\x02\f\x02\x0E\x02\u01DC\v\x02\x03\x02\x03\x02\x03\x03\x03\x03" +
    "\x05\x03\u01E2\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u026E\n\x04\x03\x05" +
    "\x03\x05\x05\x05\u0272\n\x05\x03\x05\x03\x05\x07\x05\u0276\n\x05\f\x05" +
    "\x0E\x05\u0279\v\x05\x03\x05\x06\x05\u027C\n\x05\r\x05\x0E\x05\u027D\x03" +
    "\x06\x03\x06\x05\x06\u0282\n\x06\x03\x06\x03\x06\x07\x06\u0286\n\x06\f" +
    "\x06\x0E\x06\u0289\v\x06\x03\x06\x03\x06\x03\x06\x05\x06\u028E\n\x06\x03" +
    "\x06\x03\x06\x07\x06\u0292\n\x06\f\x06\x0E\x06\u0295\v\x06\x03\x06\x07" +
    "\x06\u0298\n\x06\f\x06\x0E\x06\u029B\v\x06\x03\x07\x03\x07\x05\x07\u029F" +
    "\n\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u02A6\n\x07\x03" +
    "\b\x03\b\x03\b\x07\b\u02AB\n\b\f\b\x0E\b\u02AE\v\b\x03\b\x03\b\x03\t\x03" +
    "\t\x05\t\u02B4\n\t\x03\t\x03\t\x07\t\u02B8\n\t\f\t\x0E\t\u02BB\v\t\x03" +
    "\t\x07\t\u02BE\n\t\f\t\x0E\t\u02C1\v\t\x03\n\x03\n\x03\n\x03\n\x03\v\x05" +
    "\v\u02C8\n\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v\u02D1\n\v" +
    "\x07\v\u02D3\n\v\f\v\x0E\v\u02D6\v\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x06\f\u02DE\n\f\r\f\x0E\f\u02DF\x03\f\x06\f\u02E3\n\f\r\f\x0E\f\u02E4" +
    "\x03\f\x03\f\x07\f\u02E9\n\f\f\f\x0E\f\u02EC\v\f\x03\r\x03\r\x03\r\x03" +
    "\r\x03\r\x03\r\x06\r\u02F4\n\r\r\r\x0E\r\u02F5\x03\r\x06\r\u02F9\n\r\r" +
    "\r\x0E\r\u02FA\x03\r\x03\r\x07\r\u02FF\n\r\f\r\x0E\r\u0302\v\r\x03\x0E" +
    "\x03\x0E\x03\x0E\x03\x0E\x07\x0E\u0308\n\x0E\f\x0E\x0E\x0E\u030B\v\x0E" +
    "\x03\x0E\x03\x0E\x07\x0E\u030F\n\x0E\f\x0E\x0E\x0E\u0312\v\x0E\x06\x0E" +
    "\u0314\n\x0E\r\x0E\x0E\x0E\u0315\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F" +
    "\u031C\n\x0F\f\x0F\x0E\x0F\u031F\v\x0F\x03\x0F\x03\x0F\x07\x0F\u0323\n" +
    "\x0F\f\x0F\x0E\x0F\u0326\v\x0F\x06\x0F\u0328\n\x0F\r\x0F\x0E\x0F\u0329" +
    "\x03\x10\x03\x10\x03\x10\x03\x10\x07\x10\u0330\n\x10\f\x10\x0E\x10\u0333" +
    "\v\x10\x03\x10\x03\x10\x07\x10\u0337\n\x10\f\x10\x0E\x10\u033A\v\x10\x06" +
    "\x10\u033C\n\x10\r\x10\x0E\x10\u033D\x03\x11\x03\x11\x03\x11\x03\x11\x07" +
    "\x11\u0344\n\x11\f\x11\x0E\x11\u0347\v\x11\x03\x11\x03\x11\x07\x11\u034B" +
    "\n\x11\f\x11\x0E\x11\u034E\v\x11\x06\x11\u0350\n\x11\r\x11\x0E\x11\u0351" +
    "\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12\u0358\n\x12\f\x12\x0E\x12\u035B" +
    "\v\x12\x03\x12\x03\x12\x07\x12\u035F\n\x12\f\x12\x0E\x12\u0362\v\x12\x06" +
    "\x12\u0364\n\x12\r\x12\x0E\x12\u0365\x03\x13\x03\x13\x03\x13\x03\x13\x07" +
    "\x13\u036C\n\x13\f\x13\x0E\x13\u036F\v\x13\x03\x13\x03\x13\x07\x13\u0373" +
    "\n\x13\f\x13\x0E\x13\u0376\v\x13\x06\x13\u0378\n\x13\r\x13\x0E\x13\u0379" +
    "\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\u0380\n\x14\f\x14\x0E\x14\u0383" +
    "\v\x14\x03\x14\x03\x14\x07\x14\u0387\n\x14\f\x14\x0E\x14\u038A\v\x14\x06" +
    "\x14\u038C\n\x14\r\x14\x0E\x14\u038D\x03\x15\x03\x15\x03\x15\x03\x15\x07" +
    "\x15\u0394\n\x15\f\x15\x0E\x15\u0397\v\x15\x03\x15\x03\x15\x07\x15\u039B" +
    "\n\x15\f\x15\x0E\x15\u039E\v\x15\x06\x15\u03A0\n\x15\r\x15\x0E\x15\u03A1" +
    "\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16\u03A8\n\x16\f\x16\x0E\x16\u03AB" +
    "\v\x16\x03\x16\x03\x16\x07\x16\u03AF\n\x16\f\x16\x0E\x16\u03B2\v\x16\x06" +
    "\x16\u03B4\n\x16\r\x16\x0E\x16\u03B5\x03\x17\x03\x17\x03\x17\x03\x17\x07" +
    "\x17\u03BC\n\x17\f\x17\x0E\x17\u03BF\v\x17\x03\x17\x03\x17\x07\x17\u03C3" +
    "\n\x17\f\x17\x0E\x17\u03C6\v\x17\x06\x17\u03C8\n\x17\r\x17\x0E\x17\u03C9" +
    "\x03\x18\x03\x18\x03\x18\x03\x18\x07\x18\u03D0\n\x18\f\x18\x0E\x18\u03D3" +
    "\v\x18\x03\x18\x03\x18\x07\x18\u03D7\n\x18\f\x18\x0E\x18\u03DA\v\x18\x06" +
    "\x18\u03DC\n\x18\r\x18\x0E\x18\u03DD\x03\x19\x03\x19\x03\x19\x03\x19\x07" +
    "\x19\u03E4\n\x19\f\x19\x0E\x19\u03E7\v\x19\x03\x19\x03\x19\x07\x19\u03EB" +
    "\n\x19\f\x19\x0E\x19\u03EE\v\x19\x06\x19\u03F0\n\x19\r\x19\x0E\x19\u03F1" +
    "\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A\u03F8\n\x1A\f\x1A\x0E\x1A\u03FB" +
    "\v\x1A\x03\x1A\x03\x1A\x07\x1A\u03FF\n\x1A\f\x1A\x0E\x1A\u0402\v\x1A\x06" +
    "\x1A\u0404\n\x1A\r\x1A\x0E\x1A\u0405\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x07" +
    "\x1B\u040C\n\x1B\f\x1B\x0E\x1B\u040F\v\x1B\x03\x1B\x03\x1B\x07\x1B\u0413" +
    "\n\x1B\f\x1B\x0E\x1B\u0416\v\x1B\x06\x1B\u0418\n\x1B\r\x1B\x0E\x1B\u0419" +
    "\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x07\x1C\u0420\n\x1C\f\x1C\x0E\x1C\u0423" +
    "\v\x1C\x03\x1C\x03\x1C\x07\x1C\u0427\n\x1C\f\x1C\x0E\x1C\u042A\v\x1C\x06" +
    "\x1C\u042C\n\x1C\r\x1C\x0E\x1C\u042D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07" +
    "\x1D\u0434\n\x1D\f\x1D\x0E\x1D\u0437\v\x1D\x03\x1D\x03\x1D\x07\x1D\u043B" +
    "\n\x1D\f\x1D\x0E\x1D\u043E\v\x1D\x06\x1D\u0440\n\x1D\r\x1D\x0E\x1D\u0441" +
    "\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\u0448\n\x1E\f\x1E\x0E\x1E\u044B" +
    "\v\x1E\x03\x1E\x03\x1E\x07\x1E\u044F\n\x1E\f\x1E\x0E\x1E\u0452\v\x1E\x07" +
    "\x1E\u0454\n\x1E\f\x1E\x0E\x1E\u0457\v\x1E\x03\x1E\x06\x1E\u045A\n\x1E" +
    "\r\x1E\x0E\x1E\u045B\x03\x1E\x03\x1E\x05\x1E\u0460\n\x1E\x03\x1E\x07\x1E" +
    "\u0463\n\x1E\f\x1E\x0E\x1E\u0466\v\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F" +
    "\x07\x1F\u046C\n\x1F\f\x1F\x0E\x1F\u046F\v\x1F\x03\x1F\x03\x1F\x07\x1F" +
    "\u0473\n\x1F\f\x1F\x0E\x1F\u0476\v\x1F\x07\x1F\u0478\n\x1F\f\x1F\x0E\x1F" +
    "\u047B\v\x1F\x03\x1F\x06\x1F\u047E\n\x1F\r\x1F\x0E\x1F\u047F\x03\x1F\x03" +
    "\x1F\x05\x1F\u0484\n\x1F\x03\x1F\x07\x1F\u0487\n\x1F\f\x1F\x0E\x1F\u048A" +
    "\v\x1F\x03 \x03 \x03 \x03 \x07 \u0490\n \f \x0E \u0493\v \x03 \x03 \x07" +
    " \u0497\n \f \x0E \u049A\v \x07 \u049C\n \f \x0E \u049F\v \x03 \x06 \u04A2" +
    "\n \r \x0E \u04A3\x03 \x03 \x05 \u04A8\n \x03 \x07 \u04AB\n \f \x0E \u04AE" +
    "\v \x03!\x03!\x03!\x03!\x07!\u04B4\n!\f!\x0E!\u04B7\v!\x03!\x03!\x07!" +
    "\u04BB\n!\f!\x0E!\u04BE\v!\x07!\u04C0\n!\f!\x0E!\u04C3\v!\x03\"\x03\"" +
    "\x03\"\x03#\x07#\u04C9\n#\f#\x0E#\u04CC\v#\x03#\x03#\x07#\u04D0\n#\f#" +
    "\x0E#\u04D3\v#\x06#\u04D5\n#\r#\x0E#\u04D6\x03$\x03$\x03$\x03$\x03$\x03" +
    "$\x03$\x05$\u04E0\n$\x03%\x03%\x05%\u04E4\n%\x03&\x07&\u04E7\n&\f&\x0E" +
    "&\u04EA\v&\x03&\x06&\u04ED\n&\r&\x0E&\u04EE\x03\'\x03\'\x03\'\x03\'\x03" +
    "\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
    "\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
    "\'\x03\'\x03\'\x03\'\x05\'\u0511\n\'\x03(\x03(\x03(\x03(\x03(\x03(\x07" +
    "(\u0519\n(\f(\x0E(\u051C\v(\x03)\x03)\x03)\x03)\x05)\u0522\n)\x03)\x07" +
    ")\u0525\n)\f)\x0E)\u0528\v)\x03)\x03)\x03*\x05*\u052D\n*\x03*\x03*\x06" +
    "*\u0531\n*\r*\x0E*\u0532\x03*\x03*\x03+\x05+\u0538\n+\x03+\x03+\x06+\u053C" +
    "\n+\r+\x0E+\u053D\x03+\x03+\x03,\x05,\u0543\n,\x03,\x03,\x06,\u0547\n" +
    ",\r,\x0E,\u0548\x03,\x03,\x03-\x03-\x03-\x03-\x03-\x03-\x07-\u0553\n-" +
    "\f-\x0E-\u0556\v-\x07-\u0558\n-\f-\x0E-\u055B\v-\x03-\x07-\u055E\n-\f" +
    "-\x0E-\u0561\v-\x03-\x07-\u0564\n-\f-\x0E-\u0567\v-\x03-\x07-\u056A\n" +
    "-\f-\x0E-\u056D\v-\x03-\x03-\x07-\u0571\n-\f-\x0E-\u0574\v-\x03-\x07-" +
    "\u0577\n-\f-\x0E-\u057A\v-\x05-\u057C\n-\x03.\x03.\x05.\u0580\n.\x03." +
    "\x03.\x05.\u0584\n.\x05.\u0586\n.\x03.\x03.\x03/\x03/\x030\x030\x031\x03" +
    "1\x031\x031\x031\x031\x071\u0594\n1\f1\x0E1\u0597\v1\x071\u0599\n1\f1" +
    "\x0E1\u059C\v1\x031\x071\u059F\n1\f1\x0E1\u05A2\v1\x031\x071\u05A5\n1" +
    "\f1\x0E1\u05A8\v1\x031\x031\x071\u05AC\n1\f1\x0E1\u05AF\v1\x031\x071\u05B2" +
    "\n1\f1\x0E1\u05B5\v1\x051\u05B7\n1\x032\x032\x072\u05BB\n2\f2\x0E2\u05BE" +
    "\v2\x032\x032\x032\x032\x072\u05C4\n2\f2\x0E2\u05C7\v2\x032\x032\x052" +
    "\u05CB\n2\x033\x033\x033\x033\x033\x033\x053\u05D3\n3\x033\x073\u05D6" +
    "\n3\f3\x0E3\u05D9\v3\x073\u05DB\n3\f3\x0E3\u05DE\v3\x033\x073\u05E1\n" +
    "3\f3\x0E3\u05E4\v3\x033\x033\x073\u05E8\n3\f3\x0E3\u05EB\v3\x033\x073" +
    "\u05EE\n3\f3\x0E3\u05F1\v3\x053\u05F3\n3\x034\x034\x034\x034\x054\u05F9" +
    "\n4\x034\x034\x034\x074\u05FE\n4\f4\x0E4\u0601\v4\x035\x035\x075\u0605" +
    "\n5\f5\x0E5\u0608\v5\x035\x035\x075\u060C\n5\f5\x0E5\u060F\v5\x035\x03" +
    "5\x036\x036\x036\x036\x036\x036\x076\u0619\n6\f6\x0E6\u061C\v6\x076\u061E" +
    "\n6\f6\x0E6\u0621\v6\x036\x076\u0624\n6\f6\x0E6\u0627\v6\x036\x036\x07" +
    "6\u062B\n6\f6\x0E6\u062E\v6\x036\x076\u0631\n6\f6\x0E6\u0634\v6\x056\u0636" +
    "\n6\x037\x037\x037\x037\x037\x037\x077\u063E\n7\f7\x0E7\u0641\v7\x077" +
    "\u0643\n7\f7\x0E7\u0646\v7\x037\x077\u0649\n7\f7\x0E7\u064C\v7\x037\x03" +
    "7\x077\u0650\n7\f7\x0E7\u0653\v7\x037\x077\u0656\n7\f7\x0E7\u0659\v7\x05" +
    "7\u065B\n7\x038\x038\x038\x038\x038\x038\x078\u0663\n8\f8\x0E8\u0666\v" +
    "8\x078\u0668\n8\f8\x0E8\u066B\v8\x038\x078\u066E\n8\f8\x0E8\u0671\v8\x03" +
    "8\x038\x078\u0675\n8\f8\x0E8\u0678\v8\x038\x078\u067B\n8\f8\x0E8\u067E" +
    "\v8\x058\u0680\n8\x039\x039\x039\x039\x079\u0686\n9\f9\x0E9\u0689\v9\x03" +
    "9\x039\x079\u068D\n9\f9\x0E9\u0690\v9\x079\u0692\n9\f9\x0E9\u0695\v9\x03" +
    "9\x059\u0698\n9\x039\x079\u069B\n9\f9\x0E9\u069E\v9\x039\x039\x079\u06A2" +
    "\n9\f9\x0E9\u06A5\v9\x039\x079\u06A8\n9\f9\x0E9\u06AB\v9\x059\u06AD\n" +
    "9\x03:\x03:\x03:\x03:\x06:\u06B3\n:\r:\x0E:\u06B4\x03:\x03:\x07:\u06B9" +
    "\n:\f:\x0E:\u06BC\v:\x07:\u06BE\n:\f:\x0E:\u06C1\v:\x03:\x05:\u06C4\n" +
    ":\x03:\x07:\u06C7\n:\f:\x0E:\u06CA\v:\x03:\x03:\x07:\u06CE\n:\f:\x0E:" +
    "\u06D1\v:\x03:\x07:\u06D4\n:\f:\x0E:\u06D7\v:\x05:\u06D9\n:\x03;\x03;" +
    "\x03;\x03;\x07;\u06DF\n;\f;\x0E;\u06E2\v;\x03;\x03;\x07;\u06E6\n;\f;\x0E" +
    ";\u06E9\v;\x06;\u06EB\n;\r;\x0E;\u06EC\x03<\x03<\x03<\x03<\x07<\u06F3" +
    "\n<\f<\x0E<\u06F6\v<\x03<\x03<\x07<\u06FA\n<\f<\x0E<\u06FD\v<\x06<\u06FF" +
    "\n<\r<\x0E<\u0700\x03=\x03=\x03=\x03=\x07=\u0707\n=\f=\x0E=\u070A\v=\x03" +
    "=\x03=\x07=\u070E\n=\f=\x0E=\u0711\v=\x06=\u0713\n=\r=\x0E=\u0714\x03" +
    ">\x03>\x03>\x03>\x07>\u071B\n>\f>\x0E>\u071E\v>\x03>\x03>\x07>\u0722\n" +
    ">\f>\x0E>\u0725\v>\x06>\u0727\n>\r>\x0E>\u0728\x03?\x03?\x03?\x03?\x07" +
    "?\u072F\n?\f?\x0E?\u0732\v?\x03?\x03?\x07?\u0736\n?\f?\x0E?\u0739\v?\x06" +
    "?\u073B\n?\r?\x0E?\u073C\x03@\x03@\x03@\x03@\x07@\u0743\n@\f@\x0E@\u0746" +
    "\v@\x03@\x03@\x07@\u074A\n@\f@\x0E@\u074D\v@\x06@\u074F\n@\r@\x0E@\u0750" +
    "\x03A\x03A\x03A\x03A\x07A\u0757\nA\fA\x0EA\u075A\vA\x03A\x03A\x07A\u075E" +
    "\nA\fA\x0EA\u0761\vA\x06A\u0763\nA\rA\x0EA\u0764\x03B\x03B\x03B\x03B\x07" +
    "B\u076B\nB\fB\x0EB\u076E\vB\x03B\x03B\x07B\u0772\nB\fB\x0EB\u0775\vB\x06" +
    "B\u0777\nB\rB\x0EB\u0778\x03C\x03C\x03C\x03C\x07C\u077F\nC\fC\x0EC\u0782" +
    "\vC\x03C\x03C\x07C\u0786\nC\fC\x0EC\u0789\vC\x06C\u078B\nC\rC\x0EC\u078C" +
    "\x03D\x03D\x03D\x03D\x07D\u0793\nD\fD\x0ED\u0796\vD\x03D\x03D\x07D\u079A" +
    "\nD\fD\x0ED\u079D\vD\x06D\u079F\nD\rD\x0ED\u07A0\x03E\x03E\x03E\x03E\x07" +
    "E\u07A7\nE\fE\x0EE\u07AA\vE\x03E\x03E\x07E\u07AE\nE\fE\x0EE\u07B1\vE\x06" +
    "E\u07B3\nE\rE\x0EE\u07B4\x03F\x03F\x03F\x03F\x07F\u07BB\nF\fF\x0EF\u07BE" +
    "\vF\x03F\x03F\x07F\u07C2\nF\fF\x0EF\u07C5\vF\x06F\u07C7\nF\rF\x0EF\u07C8" +
    "\x03G\x03G\x03G\x03G\x07G\u07CF\nG\fG\x0EG\u07D2\vG\x03G\x03G\x07G\u07D6" +
    "\nG\fG\x0EG\u07D9\vG\x06G\u07DB\nG\rG\x0EG\u07DC\x03H\x03H\x03H\x03H\x07" +
    "H\u07E3\nH\fH\x0EH\u07E6\vH\x03H\x03H\x07H\u07EA\nH\fH\x0EH\u07ED\vH\x06" +
    "H\u07EF\nH\rH\x0EH\u07F0\x03I\x03I\x03I\x03I\x07I\u07F7\nI\fI\x0EI\u07FA" +
    "\vI\x03I\x03I\x07I\u07FE\nI\fI\x0EI\u0801\vI\x06I\u0803\nI\rI\x0EI\u0804" +
    "\x03J\x03J\x03J\x03J\x07J\u080B\nJ\fJ\x0EJ\u080E\vJ\x03J\x03J\x07J\u0812" +
    "\nJ\fJ\x0EJ\u0815\vJ\x06J\u0817\nJ\rJ\x0EJ\u0818\x03K\x03K\x03K\x03K\x07" +
    "K\u081F\nK\fK\x0EK\u0822\vK\x03K\x03K\x07K\u0826\nK\fK\x0EK\u0829\vK\x06" +
    "K\u082B\nK\rK\x0EK\u082C\x03L\x03L\x03L\x03L\x07L\u0833\nL\fL\x0EL\u0836" +
    "\vL\x03L\x03L\x07L\u083A\nL\fL\x0EL\u083D\vL\x06L\u083F\nL\rL\x0EL\u0840" +
    "\x03M\x03M\x03M\x03M\x07M\u0847\nM\fM\x0EM\u084A\vM\x03M\x03M\x07M\u084E" +
    "\nM\fM\x0EM\u0851\vM\x06M\u0853\nM\rM\x0EM\u0854\x03N\x03N\x03N\x03N\x07" +
    "N\u085B\nN\fN\x0EN\u085E\vN\x03N\x03N\x07N\u0862\nN\fN\x0EN\u0865\vN\x06" +
    "N\u0867\nN\rN\x0EN\u0868\x03O\x03O\x03O\x03O\x07O\u086F\nO\fO\x0EO\u0872" +
    "\vO\x03O\x03O\x07O\u0876\nO\fO\x0EO\u0879\vO\x06O\u087B\nO\rO\x0EO\u087C" +
    "\x03P\x03P\x03P\x03P\x07P\u0883\nP\fP\x0EP\u0886\vP\x03P\x03P\x07P\u088A" +
    "\nP\fP\x0EP\u088D\vP\x06P\u088F\nP\rP\x0EP\u0890\x03Q\x03Q\x03Q\x03Q\x07" +
    "Q\u0897\nQ\fQ\x0EQ\u089A\vQ\x03Q\x03Q\x07Q\u089E\nQ\fQ\x0EQ\u08A1\vQ\x06" +
    "Q\u08A3\nQ\rQ\x0EQ\u08A4\x03R\x03R\x03R\x03R\x07R\u08AB\nR\fR\x0ER\u08AE" +
    "\vR\x03R\x03R\x07R\u08B2\nR\fR\x0ER\u08B5\vR\x06R\u08B7\nR\rR\x0ER\u08B8" +
    "\x03S\x03S\x03S\x03S\x07S\u08BF\nS\fS\x0ES\u08C2\vS\x03S\x03S\x07S\u08C6" +
    "\nS\fS\x0ES\u08C9\vS\x06S\u08CB\nS\rS\x0ES\u08CC\x03T\x03T\x03T\x03T";
bitmarkParser._serializedATNSegment1 = "\x07T\u08D3\nT\fT\x0ET\u08D6\vT\x03T\x03T\x07T\u08DA\nT\fT\x0ET\u08DD" +
    "\vT\x06T\u08DF\nT\rT\x0ET\u08E0\x03U\x03U\x03U\x03U\x07U\u08E7\nU\fU\x0E" +
    "U\u08EA\vU\x03U\x03U\x07U\u08EE\nU\fU\x0EU\u08F1\vU\x06U\u08F3\nU\rU\x0E" +
    "U\u08F4\x03V\x03V\x03V\x03V\x07V\u08FB\nV\fV\x0EV\u08FE\vV\x03V\x03V\x07" +
    "V\u0902\nV\fV\x0EV\u0905\vV\x06V\u0907\nV\rV\x0EV\u0908\x03W\x03W\x03" +
    "W\x03W\x07W\u090F\nW\fW\x0EW\u0912\vW\x03W\x03W\x07W\u0916\nW\fW\x0EW" +
    "\u0919\vW\x06W\u091B\nW\rW\x0EW\u091C\x03X\x03X\x03X\x03X\x07X\u0923\n" +
    "X\fX\x0EX\u0926\vX\x03X\x03X\x07X\u092A\nX\fX\x0EX\u092D\vX\x06X\u092F" +
    "\nX\rX\x0EX\u0930\x03Y\x03Y\x03Y\x03Y\x07Y\u0937\nY\fY\x0EY\u093A\vY\x03" +
    "Y\x03Y\x07Y\u093E\nY\fY\x0EY\u0941\vY\x06Y\u0943\nY\rY\x0EY\u0944\x03" +
    "Z\x03Z\x03Z\x03Z\x07Z\u094B\nZ\fZ\x0EZ\u094E\vZ\x03Z\x03Z\x07Z\u0952\n" +
    "Z\fZ\x0EZ\u0955\vZ\x06Z\u0957\nZ\rZ\x0EZ\u0958\x03[\x03[\x03[\x03[\x07" +
    "[\u095F\n[\f[\x0E[\u0962\v[\x03[\x03[\x07[\u0966\n[\f[\x0E[\u0969\v[\x06" +
    "[\u096B\n[\r[\x0E[\u096C\x03\\\x03\\\x03\\\x03\\\x07\\\u0973\n\\\f\\\x0E" +
    "\\\u0976\v\\\x03\\\x03\\\x07\\\u097A\n\\\f\\\x0E\\\u097D\v\\\x06\\\u097F" +
    "\n\\\r\\\x0E\\\u0980\x03]\x03]\x03]\x03]\x07]\u0987\n]\f]\x0E]\u098A\v" +
    "]\x03]\x03]\x07]\u098E\n]\f]\x0E]\u0991\v]\x06]\u0993\n]\r]\x0E]\u0994" +
    "\x03^\x03^\x03^\x03^\x07^\u099B\n^\f^\x0E^\u099E\v^\x03^\x03^\x07^\u09A2" +
    "\n^\f^\x0E^\u09A5\v^\x06^\u09A7\n^\r^\x0E^\u09A8\x03_\x03_\x03_\x03_\x07" +
    "_\u09AF\n_\f_\x0E_\u09B2\v_\x03_\x03_\x07_\u09B6\n_\f_\x0E_\u09B9\v_\x06" +
    "_\u09BB\n_\r_\x0E_\u09BC\x03`\x03`\x03`\x03`\x07`\u09C3\n`\f`\x0E`\u09C6" +
    "\v`\x03`\x03`\x07`\u09CA\n`\f`\x0E`\u09CD\v`\x06`\u09CF\n`\r`\x0E`\u09D0" +
    "\x03a\x03a\x03a\x03a\x07a\u09D7\na\fa\x0Ea\u09DA\va\x03a\x03a\x07a\u09DE" +
    "\na\fa\x0Ea\u09E1\va\x06a\u09E3\na\ra\x0Ea\u09E4\x03b\x03b\x03b\x03b\x07" +
    "b\u09EB\nb\fb\x0Eb\u09EE\vb\x03b\x03b\x07b\u09F2\nb\fb\x0Eb\u09F5\vb\x06" +
    "b\u09F7\nb\rb\x0Eb\u09F8\x03c\x03c\x03c\x03c\x07c\u09FF\nc\fc\x0Ec\u0A02" +
    "\vc\x03c\x03c\x07c\u0A06\nc\fc\x0Ec\u0A09\vc\x06c\u0A0B\nc\rc\x0Ec\u0A0C" +
    "\x03d\x03d\x03d\x03d\x07d\u0A13\nd\fd\x0Ed\u0A16\vd\x03d\x03d\x07d\u0A1A" +
    "\nd\fd\x0Ed\u0A1D\vd\x06d\u0A1F\nd\rd\x0Ed\u0A20\x03e\x03e\x03e\x03e\x07" +
    "e\u0A27\ne\fe\x0Ee\u0A2A\ve\x03e\x03e\x07e\u0A2E\ne\fe\x0Ee\u0A31\ve\x06" +
    "e\u0A33\ne\re\x0Ee\u0A34\x03f\x03f\x03f\x03f\x07f\u0A3B\nf\ff\x0Ef\u0A3E" +
    "\vf\x03f\x03f\x07f\u0A42\nf\ff\x0Ef\u0A45\vf\x06f\u0A47\nf\rf\x0Ef\u0A48" +
    "\x03g\x03g\x03g\x03g\x07g\u0A4F\ng\fg\x0Eg\u0A52\vg\x03g\x03g\x07g\u0A56" +
    "\ng\fg\x0Eg\u0A59\vg\x06g\u0A5B\ng\rg\x0Eg\u0A5C\x03h\x03h\x03h\x03h\x07" +
    "h\u0A63\nh\fh\x0Eh\u0A66\vh\x03h\x03h\x07h\u0A6A\nh\fh\x0Eh\u0A6D\vh\x06" +
    "h\u0A6F\nh\rh\x0Eh\u0A70\x03i\x03i\x03i\x03i\x07i\u0A77\ni\fi\x0Ei\u0A7A" +
    "\vi\x03i\x03i\x07i\u0A7E\ni\fi\x0Ei\u0A81\vi\x06i\u0A83\ni\ri\x0Ei\u0A84" +
    "\x03j\x03j\x03j\x03j\x07j\u0A8B\nj\fj\x0Ej\u0A8E\vj\x03j\x03j\x07j\u0A92" +
    "\nj\fj\x0Ej\u0A95\vj\x06j\u0A97\nj\rj\x0Ej\u0A98\x03k\x03k\x03k\x03k\x07" +
    "k\u0A9F\nk\fk\x0Ek\u0AA2\vk\x03k\x03k\x07k\u0AA6\nk\fk\x0Ek\u0AA9\vk\x06" +
    "k\u0AAB\nk\rk\x0Ek\u0AAC\x03l\x03l\x03l\x03l\x07l\u0AB3\nl\fl\x0El\u0AB6" +
    "\vl\x03l\x03l\x07l\u0ABA\nl\fl\x0El\u0ABD\vl\x06l\u0ABF\nl\rl\x0El\u0AC0" +
    "\x03m\x03m\x03m\x03m\x07m\u0AC7\nm\fm\x0Em\u0ACA\vm\x03m\x03m\x07m\u0ACE" +
    "\nm\fm\x0Em\u0AD1\vm\x06m\u0AD3\nm\rm\x0Em\u0AD4\x03n\x03n\x03n\x03n\x07" +
    "n\u0ADB\nn\fn\x0En\u0ADE\vn\x03n\x03n\x07n\u0AE2\nn\fn\x0En\u0AE5\vn\x06" +
    "n\u0AE7\nn\rn\x0En\u0AE8\x03o\x03o\x03o\x03o\x07o\u0AEF\no\fo\x0Eo\u0AF2" +
    "\vo\x03o\x03o\x07o\u0AF6\no\fo\x0Eo\u0AF9\vo\x06o\u0AFB\no\ro\x0Eo\u0AFC" +
    "\x03p\x03p\x03p\x03p\x07p\u0B03\np\fp\x0Ep\u0B06\vp\x03p\x03p\x07p\u0B0A" +
    "\np\fp\x0Ep\u0B0D\vp\x06p\u0B0F\np\rp\x0Ep\u0B10\x03q\x03q\x03q\x03q\x07" +
    "q\u0B17\nq\fq\x0Eq\u0B1A\vq\x03q\x03q\x07q\u0B1E\nq\fq\x0Eq\u0B21\vq\x06" +
    "q\u0B23\nq\rq\x0Eq\u0B24\x03r\x03r\x03r\x03r\x07r\u0B2B\nr\fr\x0Er\u0B2E" +
    "\vr\x03r\x03r\x07r\u0B32\nr\fr\x0Er\u0B35\vr\x06r\u0B37\nr\rr\x0Er\u0B38" +
    "\x03s\x03s\x03s\x03s\x07s\u0B3F\ns\fs\x0Es\u0B42\vs\x03s\x03s\x07s\u0B46" +
    "\ns\fs\x0Es\u0B49\vs\x06s\u0B4B\ns\rs\x0Es\u0B4C\x03t\x03t\x03t\x03t\x07" +
    "t\u0B53\nt\ft\x0Et\u0B56\vt\x03t\x03t\x07t\u0B5A\nt\ft\x0Et\u0B5D\vt\x06" +
    "t\u0B5F\nt\rt\x0Et\u0B60\x03u\x03u\x03u\x03u\x07u\u0B67\nu\fu\x0Eu\u0B6A" +
    "\vu\x03u\x03u\x07u\u0B6E\nu\fu\x0Eu\u0B71\vu\x06u\u0B73\nu\ru\x0Eu\u0B74" +
    "\x03v\x03v\x03v\x03v\x07v\u0B7B\nv\fv\x0Ev\u0B7E\vv\x03v\x03v\x07v\u0B82" +
    "\nv\fv\x0Ev\u0B85\vv\x06v\u0B87\nv\rv\x0Ev\u0B88\x03w\x03w\x03w\x03w\x07" +
    "w\u0B8F\nw\fw\x0Ew\u0B92\vw\x03w\x03w\x07w\u0B96\nw\fw\x0Ew\u0B99\vw\x06" +
    "w\u0B9B\nw\rw\x0Ew\u0B9C\x03x\x03x\x03x\x03x\x07x\u0BA3\nx\fx\x0Ex\u0BA6" +
    "\vx\x03x\x03x\x07x\u0BAA\nx\fx\x0Ex\u0BAD\vx\x06x\u0BAF\nx\rx\x0Ex\u0BB0" +
    "\x03y\x03y\x03y\x03y\x07y\u0BB7\ny\fy\x0Ey\u0BBA\vy\x03y\x03y\x07y\u0BBE" +
    "\ny\fy\x0Ey\u0BC1\vy\x06y\u0BC3\ny\ry\x0Ey\u0BC4\x03z\x03z\x03z\x03z\x07" +
    "z\u0BCB\nz\fz\x0Ez\u0BCE\vz\x03z\x03z\x07z\u0BD2\nz\fz\x0Ez\u0BD5\vz\x06" +
    "z\u0BD7\nz\rz\x0Ez\u0BD8\x03{\x03{\x03{\x03{\x07{\u0BDF\n{\f{\x0E{\u0BE2" +
    "\v{\x03{\x03{\x07{\u0BE6\n{\f{\x0E{\u0BE9\v{\x06{\u0BEB\n{\r{\x0E{\u0BEC" +
    "\x03|\x03|\x03|\x03|\x07|\u0BF3\n|\f|\x0E|\u0BF6\v|\x03|\x03|\x07|\u0BFA" +
    "\n|\f|\x0E|\u0BFD\v|\x06|\u0BFF\n|\r|\x0E|\u0C00\x03}\x03}\x03}\x03}\x07" +
    "}\u0C07\n}\f}\x0E}\u0C0A\v}\x03}\x03}\x07}\u0C0E\n}\f}\x0E}\u0C11\v}\x06" +
    "}\u0C13\n}\r}\x0E}\u0C14\x03~\x03~\x03~\x03~\x07~\u0C1B\n~\f~\x0E~\u0C1E" +
    "\v~\x03~\x03~\x07~\u0C22\n~\f~\x0E~\u0C25\v~\x06~\u0C27\n~\r~\x0E~\u0C28" +
    "\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x07\x7F\u0C2F\n\x7F\f\x7F\x0E\x7F\u0C32" +
    "\v\x7F\x03\x7F\x03\x7F\x07\x7F\u0C36\n\x7F\f\x7F\x0E\x7F\u0C39\v\x7F\x06" +
    "\x7F\u0C3B\n\x7F\r\x7F\x0E\x7F\u0C3C\x03\x80\x03\x80\x03\x80\x03\x80\x07" +
    "\x80\u0C43\n\x80\f\x80\x0E\x80\u0C46\v\x80\x03\x80\x03\x80\x07\x80\u0C4A" +
    "\n\x80\f\x80\x0E\x80\u0C4D\v\x80\x06\x80\u0C4F\n\x80\r\x80\x0E\x80\u0C50" +
    "\x03\x81\x03\x81\x03\x81\x03\x81\x07\x81\u0C57\n\x81\f\x81\x0E\x81\u0C5A" +
    "\v\x81\x03\x81\x03\x81\x07\x81\u0C5E\n\x81\f\x81\x0E\x81\u0C61\v\x81\x06" +
    "\x81\u0C63\n\x81\r\x81\x0E\x81\u0C64\x03\x82\x03\x82\x03\x82\x03\x82\x07" +
    "\x82\u0C6B\n\x82\f\x82\x0E\x82\u0C6E\v\x82\x03\x82\x03\x82\x07\x82\u0C72" +
    "\n\x82\f\x82\x0E\x82\u0C75\v\x82\x06\x82\u0C77\n\x82\r\x82\x0E\x82\u0C78" +
    "\x03\x83\x03\x83\x03\x83\x03\x83\x07\x83\u0C7F\n\x83\f\x83\x0E\x83\u0C82" +
    "\v\x83\x03\x83\x03\x83\x07\x83\u0C86\n\x83\f\x83\x0E\x83\u0C89\v\x83\x06" +
    "\x83\u0C8B\n\x83\r\x83\x0E\x83\u0C8C\x03\x84\x03\x84\x03\x84\x03\x84\x07" +
    "\x84\u0C93\n\x84\f\x84\x0E\x84\u0C96\v\x84\x03\x84\x03\x84\x07\x84\u0C9A" +
    "\n\x84\f\x84\x0E\x84\u0C9D\v\x84\x06\x84\u0C9F\n\x84\r\x84\x0E\x84\u0CA0" +
    "\x03\x85\x03\x85\x03\x85\x03\x85\x07\x85\u0CA7\n\x85\f\x85\x0E\x85\u0CAA" +
    "\v\x85\x03\x85\x03\x85\x07\x85\u0CAE\n\x85\f\x85\x0E\x85\u0CB1\v\x85\x06" +
    "\x85\u0CB3\n\x85\r\x85\x0E\x85\u0CB4\x03\x86\x03\x86\x03\x86\x03\x86\x07" +
    "\x86\u0CBB\n\x86\f\x86\x0E\x86\u0CBE\v\x86\x03\x86\x03\x86\x07\x86\u0CC2" +
    "\n\x86\f\x86\x0E\x86\u0CC5\v\x86\x06\x86\u0CC7\n\x86\r\x86\x0E\x86\u0CC8" +
    "\x03\x87\x03\x87\x03\x87\x03\x87\x07\x87\u0CCF\n\x87\f\x87\x0E\x87\u0CD2" +
    "\v\x87\x03\x87\x03\x87\x07\x87\u0CD6\n\x87\f\x87\x0E\x87\u0CD9\v\x87\x06" +
    "\x87\u0CDB\n\x87\r\x87\x0E\x87\u0CDC\x03\x88\x03\x88\x03\x88\x03\x88\x07" +
    "\x88\u0CE3\n\x88\f\x88\x0E\x88\u0CE6\v\x88\x03\x88\x03\x88\x07\x88\u0CEA" +
    "\n\x88\f\x88\x0E\x88\u0CED\v\x88\x06\x88\u0CEF\n\x88\r\x88\x0E\x88\u0CF0" +
    "\x03\x89\x03\x89\x03\x89\x03\x89\x07\x89\u0CF7\n\x89\f\x89\x0E\x89\u0CFA" +
    "\v\x89\x03\x89\x03\x89\x07\x89\u0CFE\n\x89\f\x89\x0E\x89\u0D01\v\x89\x06" +
    "\x89\u0D03\n\x89\r\x89\x0E\x89\u0D04\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x07" +
    "\x8A\u0D0B\n\x8A\f\x8A\x0E\x8A\u0D0E\v\x8A\x03\x8A\x03\x8A\x07\x8A\u0D12" +
    "\n\x8A\f\x8A\x0E\x8A\u0D15\v\x8A\x06\x8A\u0D17\n\x8A\r\x8A\x0E\x8A\u0D18" +
    "\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x07\x8B\u0D1F\n\x8B\f\x8B\x0E\x8B\u0D22" +
    "\v\x8B\x03\x8B\x03\x8B\x07\x8B\u0D26\n\x8B\f\x8B\x0E\x8B\u0D29\v\x8B\x06" +
    "\x8B\u0D2B\n\x8B\r\x8B\x0E\x8B\u0D2C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x07" +
    "\x8C\u0D33\n\x8C\f\x8C\x0E\x8C\u0D36\v\x8C\x03\x8C\x03\x8C\x07\x8C\u0D3A" +
    "\n\x8C\f\x8C\x0E\x8C\u0D3D\v\x8C\x06\x8C\u0D3F\n\x8C\r\x8C\x0E\x8C\u0D40" +
    "\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x07\x8D\u0D47\n\x8D\f\x8D\x0E\x8D\u0D4A" +
    "\v\x8D\x03\x8D\x03\x8D\x07\x8D\u0D4E\n\x8D\f\x8D\x0E\x8D\u0D51\v\x8D\x06" +
    "\x8D\u0D53\n\x8D\r\x8D\x0E\x8D\u0D54\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x07" +
    "\x8E\u0D5B\n\x8E\f\x8E\x0E\x8E\u0D5E\v\x8E\x03\x8E\x03\x8E\x07\x8E\u0D62" +
    "\n\x8E\f\x8E\x0E\x8E\u0D65\v\x8E\x06\x8E\u0D67\n\x8E\r\x8E\x0E\x8E\u0D68" +
    "\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x07\x8F\u0D6F\n\x8F\f\x8F\x0E\x8F\u0D72" +
    "\v\x8F\x03\x8F\x03\x8F\x07\x8F\u0D76\n\x8F\f\x8F\x0E\x8F\u0D79\v\x8F\x06" +
    "\x8F\u0D7B\n\x8F\r\x8F\x0E\x8F\u0D7C\x03\x90\x03\x90\x03\x90\x03\x90\x07" +
    "\x90\u0D83\n\x90\f\x90\x0E\x90\u0D86\v\x90\x03\x90\x03\x90\x07\x90\u0D8A" +
    "\n\x90\f\x90\x0E\x90\u0D8D\v\x90\x06\x90\u0D8F\n\x90\r\x90\x0E\x90\u0D90" +
    "\x03\x91\x03\x91\x03\x91\x03\x91\x07\x91\u0D97\n\x91\f\x91\x0E\x91\u0D9A" +
    "\v\x91\x03\x91\x03\x91\x07\x91\u0D9E\n\x91\f\x91\x0E\x91\u0DA1\v\x91\x06" +
    "\x91\u0DA3\n\x91\r\x91\x0E\x91\u0DA4\x03\x92\x03\x92\x03\x92\x03\x92\x07" +
    "\x92\u0DAB\n\x92\f\x92\x0E\x92\u0DAE\v\x92\x03\x92\x03\x92\x07\x92\u0DB2" +
    "\n\x92\f\x92\x0E\x92\u0DB5\v\x92\x06\x92\u0DB7\n\x92\r\x92\x0E\x92\u0DB8" +
    "\x03\x93\x03\x93\x03\x93\x03\x93\x07\x93\u0DBF\n\x93\f\x93\x0E\x93\u0DC2" +
    "\v\x93\x03\x93\x03\x93\x07\x93\u0DC6\n\x93\f\x93\x0E\x93\u0DC9\v\x93\x06" +
    "\x93\u0DCB\n\x93\r\x93\x0E\x93\u0DCC\x03\x94\x03\x94\x03\x94\x03\x94\x07" +
    "\x94\u0DD3\n\x94\f\x94\x0E\x94\u0DD6\v\x94\x03\x94\x03\x94\x07\x94\u0DDA" +
    "\n\x94\f\x94\x0E\x94\u0DDD\v\x94\x06\x94\u0DDF\n\x94\r\x94\x0E\x94\u0DE0" +
    "\x03\x95\x03\x95\x03\x95\x03\x95\x07\x95\u0DE7\n\x95\f\x95\x0E\x95\u0DEA" +
    "\v\x95\x03\x95\x03\x95\x07\x95\u0DEE\n\x95\f\x95\x0E\x95\u0DF1\v\x95\x06" +
    "\x95\u0DF3\n\x95\r\x95\x0E\x95\u0DF4\x03\x96\x03\x96\x03\x96\x03\x96\x07" +
    "\x96\u0DFB\n\x96\f\x96\x0E\x96\u0DFE\v\x96\x03\x96\x03\x96\x07\x96\u0E02" +
    "\n\x96\f\x96\x0E\x96\u0E05\v\x96\x06\x96\u0E07\n\x96\r\x96\x0E\x96\u0E08" +
    "\x03\x97\x03\x97\x03\x97\x03\x97\x07\x97\u0E0F\n\x97\f\x97\x0E\x97\u0E12" +
    "\v\x97\x03\x97\x03\x97\x07\x97\u0E16\n\x97\f\x97\x0E\x97\u0E19\v\x97\x06" +
    "\x97\u0E1B\n\x97\r\x97\x0E\x97\u0E1C\x03\x98\x03\x98\x03\x98\x03\x98\x03" +
    "\x98\x03\x98\x03\x98\x03\x98\x07\x98\u0E27\n\x98\f\x98\x0E\x98\u0E2A\v" +
    "\x98\x06\x98\u0E2C\n\x98\r\x98\x0E\x98\u0E2D\x03\x98\x03\x98\x07\x98\u0E32" +
    "\n\x98\f\x98\x0E\x98\u0E35\v\x98\x03\x98\x03\x98\x07\x98\u0E39\n\x98\f" +
    "\x98\x0E\x98\u0E3C\v\x98\x03\x98\x07\x98\u0E3F\n\x98\f\x98\x0E\x98\u0E42" +
    "\v\x98\x05\x98\u0E44\n\x98\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99\x03" +
    "\x99\x03\x99\x06\x99\u0E4D\n\x99\r\x99\x0E\x99\u0E4E\x03\x9A\x03\x9A\x03" +
    "\x9A\x03\x9A\x07\x9A\u0E55\n\x9A\f\x9A\x0E\x9A\u0E58\v\x9A\x03\x9A\x03" +
    "\x9A\x07\x9A\u0E5C\n\x9A\f\x9A\x0E\x9A\u0E5F\v\x9A\x07\x9A\u0E61\n\x9A" +
    "\f\x9A\x0E\x9A\u0E64\v\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x06\x9A\u0E6A" +
    "\n\x9A\r\x9A\x0E\x9A\u0E6B\x06\x9A\u0E6E\n\x9A\r\x9A\x0E\x9A\u0E6F\x03" +
    "\x9A\x03\x9A\x07\x9A\u0E74\n\x9A\f\x9A\x0E\x9A\u0E77\v\x9A\x03\x9A\x03" +
    "\x9A\x07\x9A\u0E7B\n\x9A\f\x9A\x0E\x9A\u0E7E\v\x9A\x03\x9A\x07\x9A\u0E81" +
    "\n\x9A\f\x9A\x0E\x9A\u0E84\v\x9A\x05\x9A\u0E86\n\x9A\x03\x9B\x03\x9B\x03" +
    "\x9B\x03\x9B\x05\x9B\u0E8C\n\x9B\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x07\x9C" +
    "\u0E92\n\x9C\f\x9C\x0E\x9C\u0E95\v\x9C\x03\x9C\x03\x9C\x07\x9C\u0E99\n" +
    "\x9C\f\x9C\x0E\x9C\u0E9C\v\x9C\x07\x9C\u0E9E\n\x9C\f\x9C\x0E\x9C\u0EA1" +
    "\v\x9C\x03\x9C\x03\x9C\x05\x9C\u0EA5\n\x9C\x03\x9C\x07\x9C\u0EA8\n\x9C" +
    "\f\x9C\x0E\x9C\u0EAB\v\x9C\x03\x9C\x06\x9C\u0EAE\n\x9C\r\x9C\x0E\x9C\u0EAF" +
    "\x06\x9C\u0EB2\n\x9C\r\x9C\x0E\x9C\u0EB3\x03\x9C\x03\x9C\x03\x9D\x03\x9D" +
    "\x03\x9D\x03\x9D\x07\x9D\u0EBC\n\x9D\f\x9D\x0E\x9D\u0EBF\v\x9D\x03\x9D" +
    "\x03\x9D\x07\x9D\u0EC3\n\x9D\f\x9D\x0E\x9D\u0EC6\v\x9D\x07\x9D\u0EC8\n" +
    "\x9D\f\x9D\x0E\x9D\u0ECB\v\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x06\x9D" +
    "\u0ED1\n\x9D\r\x9D\x0E\x9D\u0ED2\x06\x9D\u0ED5\n\x9D\r\x9D\x0E\x9D\u0ED6" +
    "\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x07\x9E\u0EDF\n\x9E\f" +
    "\x9E\x0E\x9E\u0EE2\v\x9E\x03\x9E\x03\x9E\x07\x9E\u0EE6\n\x9E\f\x9E\x0E" +
    "\x9E\u0EE9\v\x9E\x07\x9E\u0EEB\n\x9E\f\x9E\x0E\x9E\u0EEE\v\x9E\x03\x9E" +
    "\x03\x9E\x03\x9E\x03\x9E\x06\x9E\u0EF4\n\x9E\r\x9E\x0E\x9E\u0EF5\x06\x9E" +
    "\u0EF8\n\x9E\r\x9E\x0E\x9E\u0EF9\x03\x9E\x03\x9E\x03\x9F\x03\x9F\x03\x9F" +
    "\x03\x9F\x07\x9F\u0F02\n\x9F\f\x9F\x0E\x9F\u0F05\v\x9F\x03\x9F\x03\x9F" +
    "\x07\x9F\u0F09\n\x9F\f\x9F\x0E\x9F\u0F0C\v\x9F\x07\x9F\u0F0E\n\x9F\f\x9F" +
    "\x0E\x9F\u0F11\v\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x06\x9F\u0F17\n\x9F" +
    "\r\x9F\x0E\x9F\u0F18\x06\x9F\u0F1B\n\x9F\r\x9F\x0E\x9F\u0F1C\x03\x9F\x03" +
    "\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x07\xA0\u0F25\n\xA0\f\xA0\x0E\xA0" +
    "\u0F28\v\xA0\x03\xA0\x03\xA0\x07\xA0\u0F2C\n\xA0\f\xA0\x0E\xA0\u0F2F\v" +
    "\xA0\x07\xA0\u0F31\n\xA0\f\xA0\x0E\xA0\u0F34\v\xA0\x03\xA0\x03\xA0\x03" +
    "\xA0\x07\xA0\u0F39\n\xA0\f\xA0\x0E\xA0\u0F3C\v\xA0\x03\xA0\x06\xA0\u0F3F" +
    "\n\xA0\r\xA0\x0E\xA0\u0F40\x06\xA0\u0F43\n\xA0\r\xA0\x0E\xA0\u0F44\x03" +
    "\xA0\x03\xA0\x07\xA0\u0F49\n\xA0\f\xA0\x0E\xA0\u0F4C\v\xA0\x03\xA0\x03" +
    "\xA0\x07\xA0\u0F50\n\xA0\f\xA0\x0E\xA0\u0F53\v\xA0\x03\xA0\x07\xA0\u0F56" +
    "\n\xA0\f\xA0\x0E\xA0\u0F59\v\xA0\x05\xA0\u0F5B\n\xA0\x03\xA1\x06\xA1\u0F5E" +
    "\n\xA1\r\xA1\x0E\xA1\u0F5F\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA3\x07" +
    "\xA3\u0F67\n\xA3\f\xA3\x0E\xA3\u0F6A\v\xA3\x03\xA3\x03\xA3\x03\xA3\x07" +
    "\xA3\u0F6F\n\xA3\f\xA3\x0E\xA3\u0F72\v\xA3\x03\xA4\x03\xA4\x03\xA5\x03" +
    "\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u0F7F" +
    "\n\xA5\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u0F86\n\xA6\x03" +
    "\xA7\x03\xA7\x03\xA7\x05\xA7\u0F8B\n\xA7\x03\xA7\x03\xA7\x05\xA7\u0F8F" +
    "\n\xA7\x03\xA7\x03\xA7\x05\xA7\u0F93\n\xA7\x03\xA7\x05\xA7\u0F96\n\xA7" +
    "\x03\xA8\x03\xA8\x03\xA8\x05\xA8\u0F9B\n\xA8\x03\xA9\x03\xA9\x03\xAA\x03" +
    "\xAA\x03\xAB\x03\xAB\x03\xAC\x03\xAC\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03" +
    "\xAF\x03\xAF\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x03\xB2\x05" +
    "\xB2\u0FB2\n\xB2\x03\xB2\x03\xB2\x03\xB2\x05\xB2\u0FB7\n\xB2\x03\xB2\x03" +
    "\xB2\x03\xB2\x05\xB2\u0FBC\n\xB2\x05\xB2\u0FBE\n\xB2\x03\xB3\x03\xB3\x03" +
    "\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u0FC8\n\xB4\x03\xB5" +
    "\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0FD2" +
    "\n\xB5\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6" +
    "\x05\xB6\u0FDC\n\xB6\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x05\xB7\u0FE2\n\xB7" +
    "\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x05\xB7\u0FE9\n\xB7\x03\xB8\x03" +
    "\xB8\x07\xB8\u0FED\n\xB8\f\xB8\x0E\xB8\u0FF0\v\xB8\x03\xB9\x03\xB9\x03" +
    "\xB9\x07\xB9\u0FF5\n\xB9\f\xB9\x0E\xB9\u0FF8\v\xB9\x03\xB9\x03\xB9\x03" +
    "\xB9\x03\xBA\x03\xBA\x07\xBA\u0FFF\n\xBA\f\xBA\x0E\xBA\u1002\v\xBA\x03" +
    "\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u100C" +
    "\n\xBB\x03\xBC\x03\xBC\x07\xBC\u1010\n\xBC\f\xBC\x0E\xBC\u1013\v\xBC\x03" +
    "\xBC\x03\xBC\x05\xBC\u1017\n\xBC\x03\xBD\x03\xBD\x03\xBD\x07\xBD\u101C" +
    "\n\xBD\f\xBD\x0E\xBD\u101F\v\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBE\x03\xBE" +
    "\x03\xBE\x05\xBE\u1027\n\xBE\x03\xBE\x03\xBE\x05\xBE\u102B\n\xBE\x03\xBE" +
    "\x03\xBE\x05\xBE\u102F\n\xBE\x03\xBE\x05\xBE\u1032\n\xBE\x03\xBF\x03\xBF" +
    "\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF" +
    "\x07\xBF\u103F\n\xBF\f\xBF\x0E\xBF\u1042\v\xBF\x03\xBF\x05\xBF\u1045\n" +
    "\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03" +
    "\xC0\x03\xC0\x03\xC0\x07\xC0\u1052\n\xC0\f\xC0\x0E\xC0\u1055\v\xC0\x03" +
    "\xC0\x05\xC0\u1058\n\xC0\x03\xC1\x03\xC1\x07\xC1\u105C\n\xC1\f\xC1\x0E" +
    "\xC1\u105F\v\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2" +
    "\x03\xC2\x05\xC2\u1069\n\xC2\x03\xC3\x03\xC3\x03\xC3\x05\xC3\u106E\n\xC3" +
    "\x03\xC3\x03\xC3\x03\xC3\x05\xC3\u1073\n\xC3\x05\xC3\u1075\n\xC3\x03\xC4" +
    "\x03\xC4\x03\xC4\x05\xC4\u107A\n\xC4\x03\xC4\x03\xC4\x03\xC4\x05\xC4\u107F" +
    "\n\xC4\x03\xC4\x03\xC4\x03\xC4\x05\xC4\u1084\n\xC4\x05\xC4\u1086\n\xC4" +
    "\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u108B\n\xC5\x03\xC5\x03\xC5\x07\xC5\u108F" +
    "\n\xC5\f\xC5\x0E\xC5\u1092\v\xC5\x03\xC5\x03\xC5\x06\xC5\u1096\n\xC5\r" +
    "\xC5\x0E\xC5\u1097\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03" +
    "\xC5\x07\xC5\u10A1\n\xC5\f\xC5\x0E\xC5\u10A4\v\xC5\x03\xC5\x05\xC5\u10A7" +
    "\n\xC5\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC7\x03\xC7\x03\xC8\x03\xC8" +
    "\x03\xC8\x07\xC8\u10B2\n\xC8\f\xC8\x0E\xC8\u10B5\v\xC8\x03\xC8\x05\xC8" +
    "\u10B8\n\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x07\xC8\u10BE\n\xC8\f\xC8" +
    "\x0E\xC8\u10C1\v\xC8\x03\xC8\x03\xC8\x07\xC8\u10C5\n\xC8\f\xC8\x0E\xC8" +
    "\u10C8\v\xC8\x03\xC8\x05\xC8\u10CB\n\xC8\x05\xC8\u10CD\n\xC8\x03\xC9\x03" +
    "\xC9\x03\xC9\x03\xC9\x07\xC9\u10D3\n\xC9\f\xC9\x0E\xC9\u10D6\v\xC9\x03" +
    "\xC9\x03\xC9\x03\xCA\x03\xCA\x05\xCA\u10DC\n\xCA\x03\xCA\x03\xCA\x03\xCA" +
    "\x05\xCA\u10E1\n\xCA\x03\xCA\x05\xCA\u10E4\n\xCA\x03\xCB\x03\xCB\x03\xCB" +
    "\x03\xCB\x05\xCB\u10EA\n\xCB\x03\xCB\x05\xCB\u10ED\n\xCB\x03\xCC\x03\xCC" +
    "\x05\xCC\u10F1\n\xCC\x03\xCC\x03\xCC\x03\xCC\x07\xCC\u10F6\n\xCC\f\xCC" +
    "\x0E\xCC\u10F9\v\xCC\x07\xCC\u10FB\n\xCC\f\xCC\x0E\xCC\u10FE\v\xCC\x03" +
    "\xCC\x07\xCC\u1101\n\xCC\f\xCC\x0E\xCC\u1104\v\xCC\x07\xCC\u1106\n\xCC" +
    "\f\xCC\x0E\xCC\u1109\v\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x07" +
    "\xCC\u1110\n\xCC\f\xCC\x0E\xCC\u1113\v\xCC\x03\xCC\x05\xCC\u1116\n\xCC" +
    "\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x06\xCD\u111D\n\xCD\r\xCD\x0E" +
    "\xCD\u111E\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x07" +
    "\xCD\u1128\n\xCD\f\xCD\x0E\xCD\u112B\v\xCD\x03\xCD\x05\xCD\u112E\n\xCD" +
    "\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x06\xCF" +
    "\u1138\n\xCF\r\xCF\x0E\xCF\u1139\x03\xCF\x03\xCF\x05\xCF\u113E\n\xCF\x03" +
    "\xD0\x03\xD0\x03\xD0\x03\xD0\x06\xD0\u1144\n\xD0\r\xD0\x0E\xD0\u1145\x03" +
    "\xD0\x03\xD0\x03\xD1\x03\xD1\x07\xD1\u114C\n\xD1\f\xD1\x0E\xD1\u114F\v" +
    "\xD1\x03\xD1\x05\xD1\u1152\n\xD1\x03\xD1\x03\xD1\x03\xD1\x07\xD1\u1157" +
    "\n\xD1\f\xD1\x0E\xD1\u115A\v\xD1\x07\xD1\u115C\n\xD1\f\xD1\x0E\xD1\u115F" +
    "\v\xD1\x03\xD1\x07\xD1\u1162\n\xD1\f\xD1\x0E\xD1\u1165";
bitmarkParser._serializedATNSegment2 = "\v\xD1\x07\xD1\u1167\n\xD1\f\xD1\x0E\xD1\u116A\v\xD1\x03\xD1\x03\xD1\x03" +
    "\xD1\x07\xD1\u116F\n\xD1\f\xD1\x0E\xD1\u1172\v\xD1\x03\xD1\x05\xD1\u1175" +
    "\n\xD1\x03\xD1\x05\xD1\u1178\n\xD1\x03\xD2\x03\xD2\x06\xD2\u117C\n\xD2" +
    "\r\xD2\x0E\xD2\u117D\x03\xD2\x03\xD2\x03\xD3\x03\xD3\x03\xD3\x06\xD3\u1185" +
    "\n\xD3\r\xD3\x0E\xD3\u1186\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x05" +
    "\xD3\u118E\n\xD3\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4" +
    "\x03\xD4\x05\xD4\u1198\n\xD4\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03" +
    "\xD5\x03\xD5\x03\xD5\x03\xD5\x05\xD5\u11A3\n\xD5\x03\xD6\x03\xD6\x03\xD6" +
    "\x03\xD6\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD8\x03\xD8\x07\xD8\u11AF" +
    "\n\xD8\f\xD8\x0E\xD8\u11B2\v\xD8\x03\xD8\x07\xD8\u11B5\n\xD8\f\xD8\x0E" +
    "\xD8\u11B8\v\xD8\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9" +
    "\x07\xD9\u11C1\n\xD9\f\xD9\x0E\xD9\u11C4\v\xD9\x03\xD9\x03\xD9\x03\xD9" +
    "\x03\xD9\x07\xD9\u11CA\n\xD9\f\xD9\x0E\xD9\u11CD\v\xD9\x03\xD9\x05\xD9" +
    "\u11D0\n\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x06\xDA\u11D6\n\xDA\r\xDA" +
    "\x0E\xDA\u11D7\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x07\xDA\u11DF\n" +
    "\xDA\f\xDA\x0E\xDA\u11E2\v\xDA\x03\xDA\x05\xDA\u11E5\n\xDA\x03\xDB\x03" +
    "\xDB\x05\xDB\u11E9\n\xDB\x03\xDB\x03\xDB\x03\xDC\x03\xDC\x05\xDC\u11EF" +
    "\n\xDC\x06\xDC\u11F1\n\xDC\r\xDC\x0E\xDC\u11F2\x03\xDD\x03\xDD\x06\xDD" +
    "\u11F7\n\xDD\r\xDD\x0E\xDD\u11F8\x03\xDD\x05\xDD\u11FC\n\xDD\x03\xDD\x03" +
    "\xDD\x06\xDD\u1200\n\xDD\r\xDD\x0E\xDD\u1201\x03\xDD\x05\xDD\u1205\n\xDD" +
    "\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x07\xDD\u120D\n\xDD\f" +
    "\xDD\x0E\xDD\u1210\v\xDD\x03\xDD\x03\xDD\x07\xDD\u1214\n\xDD\f\xDD\x0E" +
    "\xDD\u1217\v\xDD\x03\xDD\x03\xDD\x07\xDD\u121B\n\xDD\f\xDD\x0E\xDD\u121E" +
    "\v\xDD\x03\xDD\x03\xDD\x05\xDD\u1222\n\xDD\x03\xDE\x03\xDE\x03\xDF\x03" +
    "\xDF\x03\xE0\x03\xE0\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03" +
    "\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03" +
    "\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03" +
    "\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x06\xE1\u1248\n\xE1\r\xE1" +
    "\x0E\xE1\u1249\x03\xE2\x03\xE2\x03\xE3\x03\xE3\x03\xE3\b\u05BC\u05C5\u1040" +
    "\u1053\u10A2\u11CB\x02\x02\xE4\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02" +
    "\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02" +
    " \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02" +
    "<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02" +
    "X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02" +
    "t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02" +
    "\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02" +
    "\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02" +
    "\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02" +
    "\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02" +
    "\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02" +
    "\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02" +
    "\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02" +
    "\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02" +
    "\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02" +
    "\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02" +
    "\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02" +
    "\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02" +
    "\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02" +
    "\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02" +
    "\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02" +
    "\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02" +
    "\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02" +
    "\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02" +
    "\u01A0\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02" +
    "\u01AE\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02" +
    "\u01BC\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\x02\x1B\x03\x02\t\n" +
    "\x03\x02\u0110\u0111\x03\x02\x9D\x9E\x03\x02\xCA\xCB\x03\x02\xAB\xAC\x03" +
    "\x02\x92\x92\b\x02\xE2\xE3\xE5\xE6\xF4\xFC\u0107\u010A\u0110\u0111\u0113" +
    "\u0115\x05\x02\xE1\xE1\xF6\xF6\u0107\u0107\x04\x02\xE2\xE2\xF7\xF7\x05" +
    "\x02\xE3\xE3\xF8\xF9\u0109\u0109\x04\x02\xE4\xE4\xFA\xFA\x04\x02\xE5\xE5" +
    "\xFB\xFB\x05\x02\xE6\xE6\xFC\xFC\u010A\u010A\x04\x02\xED\xED\u0100\u0100" +
    "\x05\x02\xEF\xEF\u0101\u0102\u010E\u010E\x04\x02\xF0\xF0\u0103\u0103\x04" +
    "\x02\xF1\xF1\u0104\u0104\x05\x02\xF2\xF2\u0105\u0105\u010F\u010F\x03\x02" +
    "\xC1\xC2\x04\x02\xD1\xD1\xD4\xD7\x03\x02\xA0\xA0\x04\x02\xA1\xA1\xA3\xA3" +
    "\x03\x02\xAD\xAE\x03\x02\xA6\xA6\x03\x02\xA7\xA7\x02\u14E4\x02\u01D3\x03" +
    "\x02\x02\x02\x04\u01E1\x03\x02\x02\x02\x06\u026D\x03\x02\x02\x02\b\u026F" +
    "\x03\x02\x02\x02\n\u027F\x03\x02\x02\x02\f\u029C\x03\x02\x02\x02\x0E\u02A7" +
    "\x03\x02\x02\x02\x10\u02B1\x03\x02\x02\x02\x12\u02C2\x03\x02\x02\x02\x14" +
    "\u02D4\x03\x02\x02\x02\x16\u02D7\x03\x02\x02\x02\x18\u02ED\x03\x02\x02" +
    "\x02\x1A\u0303\x03\x02\x02\x02\x1C\u0317\x03\x02\x02\x02\x1E\u032B\x03" +
    "\x02\x02\x02 \u033F\x03\x02\x02\x02\"\u0353\x03\x02\x02\x02$\u0367\x03" +
    "\x02\x02\x02&\u037B\x03\x02\x02\x02(\u038F\x03\x02\x02\x02*\u03A3\x03" +
    "\x02\x02\x02,\u03B7\x03\x02\x02\x02.\u03CB\x03\x02\x02\x020\u03DF\x03" +
    "\x02\x02\x022\u03F3\x03\x02\x02\x024\u0407\x03\x02\x02\x026\u041B\x03" +
    "\x02\x02\x028\u042F\x03\x02\x02\x02:\u0443\x03\x02\x02\x02<\u0467\x03" +
    "\x02\x02\x02>\u048B\x03\x02\x02\x02@\u04AF\x03\x02\x02\x02B\u04C4\x03" +
    "\x02\x02\x02D\u04D4\x03\x02\x02\x02F\u04DF\x03\x02\x02\x02H\u04E3\x03" +
    "\x02\x02\x02J\u04EC\x03\x02\x02\x02L\u0510\x03\x02\x02\x02N\u0512\x03" +
    "\x02\x02\x02P\u051D\x03\x02\x02\x02R\u052C\x03\x02\x02\x02T\u0537\x03" +
    "\x02\x02\x02V\u0542\x03\x02\x02\x02X\u054C\x03\x02\x02\x02Z\u057D\x03" +
    "\x02\x02\x02\\\u0589\x03\x02\x02\x02^\u058B\x03\x02\x02\x02`\u058D\x03" +
    "\x02\x02\x02b\u05CA\x03\x02\x02\x02d\u05CC\x03\x02\x02\x02f\u05F4\x03" +
    "\x02\x02\x02h\u0602\x03\x02\x02\x02j\u0612\x03\x02\x02\x02l\u0637\x03" +
    "\x02\x02\x02n\u065C\x03\x02\x02\x02p\u0681\x03\x02\x02\x02r\u06AE\x03" +
    "\x02\x02\x02t\u06DA\x03\x02\x02\x02v\u06EE\x03\x02\x02\x02x\u0702\x03" +
    "\x02\x02\x02z\u0716\x03\x02\x02\x02|\u072A\x03\x02\x02\x02~\u073E\x03" +
    "\x02\x02\x02\x80\u0752\x03\x02\x02\x02\x82\u0766\x03\x02\x02\x02\x84\u077A" +
    "\x03\x02\x02\x02\x86\u078E\x03\x02\x02\x02\x88\u07A2\x03\x02\x02\x02\x8A" +
    "\u07B6\x03\x02\x02\x02\x8C\u07CA\x03\x02\x02\x02\x8E\u07DE\x03\x02\x02" +
    "\x02\x90\u07F2\x03\x02\x02\x02\x92\u0806\x03\x02\x02\x02\x94\u081A\x03" +
    "\x02\x02\x02\x96\u082E\x03\x02\x02\x02\x98\u0842\x03\x02\x02\x02\x9A\u0856" +
    "\x03\x02\x02\x02\x9C\u086A\x03\x02\x02\x02\x9E\u087E\x03\x02\x02\x02\xA0" +
    "\u0892\x03\x02\x02\x02\xA2\u08A6\x03\x02\x02\x02\xA4\u08BA\x03\x02\x02" +
    "\x02\xA6\u08CE\x03\x02\x02\x02\xA8\u08E2\x03\x02\x02\x02\xAA\u08F6\x03" +
    "\x02\x02\x02\xAC\u090A\x03\x02\x02\x02\xAE\u091E\x03\x02\x02\x02\xB0\u0932" +
    "\x03\x02\x02\x02\xB2\u0946\x03\x02\x02\x02\xB4\u095A\x03\x02\x02\x02\xB6" +
    "\u096E\x03\x02\x02\x02\xB8\u0982\x03\x02\x02\x02\xBA\u0996\x03\x02\x02" +
    "\x02\xBC\u09AA\x03\x02\x02\x02\xBE\u09BE\x03\x02\x02\x02\xC0\u09D2\x03" +
    "\x02\x02\x02\xC2\u09E6\x03\x02\x02\x02\xC4\u09FA\x03\x02\x02\x02\xC6\u0A0E" +
    "\x03\x02\x02\x02\xC8\u0A22\x03\x02\x02\x02\xCA\u0A36\x03\x02\x02\x02\xCC" +
    "\u0A4A\x03\x02\x02\x02\xCE\u0A5E\x03\x02\x02\x02\xD0\u0A72\x03\x02\x02" +
    "\x02\xD2\u0A86\x03\x02\x02\x02\xD4\u0A9A\x03\x02\x02\x02\xD6\u0AAE\x03" +
    "\x02\x02\x02\xD8\u0AC2\x03\x02\x02\x02\xDA\u0AD6\x03\x02\x02\x02\xDC\u0AEA" +
    "\x03\x02\x02\x02\xDE\u0AFE\x03\x02\x02\x02\xE0\u0B12\x03\x02\x02\x02\xE2" +
    "\u0B26\x03\x02\x02\x02\xE4\u0B3A\x03\x02\x02\x02\xE6\u0B4E\x03\x02\x02" +
    "\x02\xE8\u0B62\x03\x02\x02\x02\xEA\u0B76\x03\x02\x02\x02\xEC\u0B8A\x03" +
    "\x02\x02\x02\xEE\u0B9E\x03\x02\x02\x02\xF0\u0BB2\x03\x02\x02\x02\xF2\u0BC6" +
    "\x03\x02\x02\x02\xF4\u0BDA\x03\x02\x02\x02\xF6\u0BEE\x03\x02\x02\x02\xF8" +
    "\u0C02\x03\x02\x02\x02\xFA\u0C16\x03\x02\x02\x02\xFC\u0C2A\x03\x02\x02" +
    "\x02\xFE\u0C3E\x03\x02\x02\x02\u0100\u0C52\x03\x02\x02\x02\u0102\u0C66" +
    "\x03\x02\x02\x02\u0104\u0C7A\x03\x02\x02\x02\u0106\u0C8E\x03\x02\x02\x02" +
    "\u0108\u0CA2\x03\x02\x02\x02\u010A\u0CB6\x03\x02\x02\x02\u010C\u0CCA\x03" +
    "\x02\x02\x02\u010E\u0CDE\x03\x02\x02\x02\u0110\u0CF2\x03\x02\x02\x02\u0112" +
    "\u0D06\x03\x02\x02\x02\u0114\u0D1A\x03\x02\x02\x02\u0116\u0D2E\x03\x02" +
    "\x02\x02\u0118\u0D42\x03\x02\x02\x02\u011A\u0D56\x03\x02\x02\x02\u011C" +
    "\u0D6A\x03\x02\x02\x02\u011E\u0D7E\x03\x02\x02\x02\u0120\u0D92\x03\x02" +
    "\x02\x02\u0122\u0DA6\x03\x02\x02\x02\u0124\u0DBA\x03\x02\x02\x02\u0126" +
    "\u0DCE\x03\x02\x02\x02\u0128\u0DE2\x03\x02\x02\x02\u012A\u0DF6\x03\x02" +
    "\x02\x02\u012C\u0E0A\x03\x02\x02\x02\u012E\u0E1E\x03\x02\x02\x02\u0130" +
    "\u0E4C\x03\x02\x02\x02\u0132\u0E50\x03\x02\x02\x02\u0134\u0E87\x03\x02" +
    "\x02\x02\u0136\u0E8D\x03\x02\x02\x02\u0138\u0EB7\x03\x02\x02\x02\u013A" +
    "\u0EDA\x03\x02\x02\x02\u013C\u0EFD\x03\x02\x02\x02\u013E\u0F20\x03\x02" +
    "\x02\x02\u0140\u0F5D\x03\x02\x02\x02\u0142\u0F61\x03\x02\x02\x02\u0144" +
    "\u0F68\x03\x02\x02\x02\u0146\u0F73\x03\x02\x02\x02\u0148\u0F7E\x03\x02" +
    "\x02\x02\u014A\u0F85\x03\x02\x02\x02\u014C\u0F95\x03\x02\x02\x02\u014E" +
    "\u0F97\x03\x02\x02\x02\u0150\u0F9C\x03\x02\x02\x02\u0152\u0F9E\x03\x02" +
    "\x02\x02\u0154\u0FA0\x03\x02\x02\x02\u0156\u0FA2\x03\x02\x02\x02\u0158" +
    "\u0FA4\x03\x02\x02\x02\u015A\u0FA6\x03\x02\x02\x02\u015C\u0FA8\x03\x02" +
    "\x02\x02\u015E\u0FAA\x03\x02\x02\x02\u0160\u0FAC\x03\x02\x02\x02\u0162" +
    "\u0FBD\x03\x02\x02\x02\u0164\u0FBF\x03\x02\x02\x02\u0166\u0FC7\x03\x02" +
    "\x02\x02\u0168\u0FC9\x03\x02\x02\x02\u016A\u0FD3\x03\x02\x02\x02\u016C" +
    "\u0FDD\x03\x02\x02\x02\u016E\u0FEA\x03\x02\x02\x02\u0170\u0FF1\x03\x02" +
    "\x02\x02\u0172\u0FFC\x03\x02\x02\x02\u0174\u1003\x03\x02\x02\x02\u0176" +
    "\u100D\x03\x02\x02\x02\u0178\u1018\x03\x02\x02\x02\u017A\u1031\x03\x02" +
    "\x02\x02\u017C\u1044\x03\x02\x02\x02\u017E\u1057\x03\x02\x02\x02\u0180" +
    "\u1059\x03\x02\x02\x02\u0182\u1060\x03\x02\x02\x02\u0184\u1074\x03\x02" +
    "\x02\x02\u0186\u1085\x03\x02\x02\x02\u0188\u10A6\x03\x02\x02\x02\u018A" +
    "\u10A8\x03\x02\x02\x02\u018C\u10AC\x03\x02\x02\x02\u018E\u10CC\x03\x02" +
    "\x02\x02\u0190\u10CE\x03\x02\x02\x02\u0192\u10E3\x03\x02\x02\x02\u0194" +
    "\u10EC\x03\x02\x02\x02\u0196\u1115\x03\x02\x02\x02\u0198\u112D\x03\x02" +
    "\x02\x02\u019A\u112F\x03\x02\x02\x02\u019C\u1133\x03\x02\x02\x02\u019E" +
    "\u113F\x03\x02\x02\x02\u01A0\u1177\x03\x02\x02\x02\u01A2\u1179\x03\x02" +
    "\x02\x02\u01A4\u118D\x03\x02\x02\x02\u01A6\u1197\x03\x02\x02\x02\u01A8" +
    "\u11A2\x03\x02\x02\x02\u01AA\u11A4\x03\x02\x02\x02\u01AC\u11A8\x03\x02" +
    "\x02\x02\u01AE\u11AC\x03\x02\x02\x02\u01B0\u11CF\x03\x02\x02\x02\u01B2" +
    "\u11E4\x03\x02\x02\x02\u01B4\u11E6\x03\x02\x02\x02\u01B6\u11F0\x03\x02" +
    "\x02\x02\u01B8\u1221\x03\x02\x02\x02\u01BA\u1223\x03\x02\x02\x02\u01BC" +
    "\u1225\x03\x02\x02\x02\u01BE\u1227\x03\x02\x02\x02\u01C0\u1247\x03\x02" +
    "\x02\x02\u01C2\u124B\x03\x02\x02\x02\u01C4\u124D\x03\x02\x02\x02\u01C6" +
    "\u01D0\x05\x04\x03\x02\u01C7\u01C9\x07\x04\x02\x02\u01C8\u01C7\x03\x02" +
    "\x02\x02\u01C9\u01CC\x03\x02\x02\x02\u01CA\u01C8\x03\x02\x02\x02\u01CA" +
    "\u01CB\x03\x02\x02\x02\u01CB\u01CD\x03\x02\x02\x02\u01CC\u01CA\x03\x02" +
    "\x02\x02\u01CD\u01CF\x07\xB9\x02\x02\u01CE\u01CA\x03\x02\x02\x02\u01CF" +
    "\u01D2\x03\x02\x02\x02\u01D0\u01CE\x03\x02\x02\x02\u01D0\u01D1\x03\x02" +
    "\x02\x02\u01D1\u01D4\x03\x02\x02\x02\u01D2\u01D0\x03\x02\x02\x02\u01D3" +
    "\u01C6\x03\x02\x02\x02\u01D4\u01D5\x03\x02\x02\x02\u01D5\u01D3\x03\x02" +
    "\x02\x02\u01D5\u01D6\x03\x02\x02\x02\u01D6\u01DA\x03\x02\x02\x02\u01D7" +
    "\u01D9\x07\xB9\x02\x02\u01D8\u01D7\x03\x02\x02\x02\u01D9\u01DC\x03\x02" +
    "\x02\x02\u01DA\u01D8\x03\x02\x02\x02\u01DA\u01DB\x03\x02\x02\x02\u01DB" +
    "\u01DD\x03\x02\x02\x02\u01DC\u01DA\x03\x02\x02\x02\u01DD\u01DE\x07\x02" +
    "\x02\x03\u01DE\x03\x03\x02\x02\x02\u01DF\u01E2\x05\x06\x04\x02\u01E0\u01E2" +
    "\x05\u01B6\xDC\x02\u01E1\u01DF\x03\x02\x02\x02\u01E1\u01E0\x03\x02\x02" +
    "\x02\u01E2\x05\x03\x02\x02\x02\u01E3\u026E\x05\b\x05\x02\u01E4\u026E\x05" +
    "\n\x06\x02\u01E5\u026E\x05\x0E\b\x02\u01E6\u026E\x05\f\x07\x02\u01E7\u026E" +
    "\x05\x12\n\x02\u01E8\u026E\x05\x10\t\x02\u01E9\u026E\x05\u01B4\xDB\x02" +
    "\u01EA\u026E\x05\x16\f\x02\u01EB\u026E\x05\x18\r\x02\u01EC\u026E\x05X" +
    "-\x02\u01ED\u026E\x05`1\x02\u01EE\u026E\x05d3\x02\u01EF\u026E\x05l7\x02" +
    "\u01F0\u026E\x05j6\x02\u01F1\u026E\x05n8\x02\u01F2\u026E\x05p9\x02\u01F3" +
    "\u026E\x05r:\x02\u01F4\u026E\x05t;\x02\u01F5\u026E\x05v<\x02\u01F6\u026E" +
    "\x05x=\x02\u01F7\u026E\x05z>\x02\u01F8\u026E\x05|?\x02\u01F9\u026E\x05" +
    "~@\x02\u01FA\u026E\x05\x80A\x02\u01FB\u026E\x05\x84C\x02\u01FC\u026E\x05" +
    "\x86D\x02\u01FD\u026E\x05\x88E\x02\u01FE\u026E\x05\x8AF\x02\u01FF\u026E" +
    "\x05\x9AN\x02\u0200\u026E\x05\x8CG\x02\u0201\u026E\x05\x8EH\x02\u0202" +
    "\u026E\x05\x90I\x02\u0203\u026E\x05\x92J\x02\u0204\u026E\x05\x94K\x02" +
    "\u0205\u026E\x05\x96L\x02\u0206\u026E\x05\x98M\x02\u0207\u026E\x05\x9C" +
    "O\x02\u0208\u026E\x05\x82B\x02\u0209\u026E\x05\u012C\x97\x02\u020A\u026E" +
    "\x05\u012E\x98\x02\u020B\u026E\x05\u013E\xA0\x02\u020C\u026E\x05\u0132" +
    "\x9A\x02\u020D\u026E\x05\u0136\x9C\x02\u020E\u026E\x05\u0138\x9D\x02\u020F" +
    "\u026E\x05\u013A\x9E\x02\u0210\u026E\x05\u013C\x9F\x02\u0211\u026E\x05" +
    "\u01A2\xD2\x02\u0212\u026E\x05\x9EP\x02\u0213\u026E\x05\xA0Q\x02\u0214" +
    "\u026E\x05\x1A\x0E\x02\u0215\u026E\x05\x1C\x0F\x02\u0216\u026E\x05\x1E" +
    "\x10\x02\u0217\u026E\x05 \x11\x02\u0218\u026E\x05\"\x12\x02\u0219\u026E" +
    "\x05$\x13\x02\u021A\u026E\x05&\x14\x02\u021B\u026E\x05(\x15\x02\u021C" +
    "\u026E\x05*\x16\x02\u021D\u026E\x05,\x17\x02\u021E\u026E\x05.\x18\x02" +
    "\u021F\u026E\x050\x19\x02\u0220\u026E\x052\x1A\x02\u0221\u026E\x054\x1B" +
    "\x02\u0222\u026E\x056\x1C\x02\u0223\u026E\x058\x1D\x02\u0224\u026E\x05" +
    ":\x1E\x02\u0225\u026E\x05<\x1F\x02\u0226\u026E\x05> \x02\u0227\u026E\x05" +
    "@!\x02\u0228\u026E\x05\xA2R\x02\u0229\u026E\x05\xA4S\x02\u022A\u026E\x05" +
    "\xA6T\x02\u022B\u026E\x05\xA8U\x02\u022C\u026E\x05\xAAV\x02\u022D\u026E" +
    "\x05\xACW\x02\u022E\u026E\x05\xAEX\x02\u022F\u026E\x05\xB0Y\x02\u0230" +
    "\u026E\x05\xB2Z\x02\u0231\u026E\x05\xB4[\x02\u0232\u026E\x05\xB6\\\x02" +
    "\u0233\u026E\x05\xB8]\x02\u0234\u026E\x05\xBA^\x02\u0235\u026E\x05\xBC" +
    "_\x02\u0236\u026E\x05\xBE`\x02\u0237\u026E\x05\xC0a\x02\u0238\u026E\x05" +
    "\xC4c\x02\u0239\u026E\x05\xC6d\x02\u023A\u026E\x05\xC8e\x02\u023B\u026E" +
    "\x05\xCAf\x02\u023C\u026E\x05\xC2b\x02\u023D\u026E\x05\xCCg\x02\u023E" +
    "\u026E\x05\xCEh\x02\u023F\u026E\x05\xD0i\x02\u0240\u026E\x05\xD2j\x02" +
    "\u0241\u026E\x05\xD4k\x02\u0242\u026E\x05\xD6l\x02\u0243\u026E\x05\xD8" +
    "m\x02\u0244\u026E\x05\xDAn\x02\u0245\u026E\x05\xDCo\x02\u0246\u026E\x05" +
    "\xDEp\x02\u0247\u026E\x05\xE0q\x02\u0248\u026E\x05\xE2r\x02\u0249\u026E" +
    "\x05\xE4s\x02\u024A\u026E\x05\xE6t\x02\u024B\u026E\x05\xE8u\x02\u024C" +
    "\u026E\x05\xEAv\x02\u024D\u026E\x05\xECw\x02\u024E\u026E\x05\xEEx\x02" +
    "\u024F\u026E\x05\xF0y\x02\u0250\u026E\x05\xF2z\x02\u0251\u026E\x05\xF4" +
    "{\x02\u0252\u026E\x05\xF6|\x02\u0253\u026E\x05\xF8}\x02\u0254\u026E\x05" +
    "\xFA~\x02\u0255\u026E\x05\xFC\x7F\x02\u0256\u026E\x05\xFE\x80\x02\u0257" +
    "\u026E\x05\u0100\x81\x02\u0258\u026E\x05\u0102\x82\x02\u0259\u026E\x05" +
    "\u0104\x83\x02\u025A\u026E\x05\u0106\x84\x02\u025B\u026E\x05\u0108\x85" +
    "\x02\u025C\u026E\x05\u010A\x86\x02\u025D\u026E\x05\u010C\x87\x02\u025E" +
    "\u026E\x05\u010E\x88\x02\u025F\u026E\x05\u0110\x89\x02\u0260\u026E\x05" +
    "\u0112\x8A\x02\u0261\u026E\x05\u0114\x8B\x02\u0262\u026E\x05\u0116\x8C" +
    "\x02\u0263\u026E\x05\u0118\x8D\x02\u0264\u026E\x05\u011A\x8E\x02\u0265" +
    "\u026E\x05\u011C\x8F\x02\u0266\u026E\x05\u011E\x90\x02\u0267\u026E\x05" +
    "\u0120\x91\x02\u0268\u026E\x05\u0122\x92\x02\u0269\u026E\x05\u0124\x93" +
    "\x02\u026A\u026E\x05\u0126\x94\x02\u026B\u026E\x05\u0128\x95\x02\u026C" +
    "\u026E\x05\u012A\x96\x02\u026D\u01E3\x03\x02\x02\x02\u026D\u01E4\x03\x02" +
    "\x02\x02\u026D\u01E5\x03\x02\x02\x02\u026D\u01E6\x03\x02\x02\x02\u026D" +
    "\u01E7\x03\x02\x02\x02\u026D\u01E8\x03\x02\x02\x02\u026D\u01E9\x03\x02" +
    "\x02\x02\u026D\u01EA\x03\x02\x02\x02\u026D\u01EB\x03\x02\x02\x02\u026D" +
    "\u01EC\x03\x02\x02\x02\u026D\u01ED\x03\x02\x02\x02\u026D\u01EE\x03\x02" +
    "\x02\x02\u026D\u01EF\x03\x02\x02\x02\u026D\u01F0\x03\x02\x02\x02\u026D" +
    "\u01F1\x03\x02\x02\x02\u026D\u01F2\x03\x02\x02\x02\u026D\u01F3\x03\x02" +
    "\x02\x02\u026D\u01F4\x03\x02\x02\x02\u026D\u01F5\x03\x02\x02\x02\u026D" +
    "\u01F6\x03\x02\x02\x02\u026D\u01F7\x03\x02\x02\x02\u026D\u01F8\x03\x02" +
    "\x02\x02\u026D\u01F9\x03\x02\x02\x02\u026D\u01FA\x03\x02\x02\x02\u026D" +
    "\u01FB\x03\x02\x02\x02\u026D\u01FC\x03\x02\x02\x02\u026D\u01FD\x03\x02" +
    "\x02\x02\u026D\u01FE\x03\x02\x02\x02\u026D\u01FF\x03\x02\x02\x02\u026D" +
    "\u0200\x03\x02\x02\x02\u026D\u0201\x03\x02\x02\x02\u026D\u0202\x03\x02" +
    "\x02\x02\u026D\u0203\x03\x02\x02\x02\u026D\u0204\x03\x02\x02\x02\u026D" +
    "\u0205\x03\x02\x02\x02\u026D\u0206\x03\x02\x02\x02\u026D\u0207\x03\x02" +
    "\x02\x02\u026D\u0208\x03\x02\x02\x02\u026D\u0209\x03\x02\x02\x02\u026D" +
    "\u020A\x03\x02\x02\x02\u026D\u020B\x03\x02\x02\x02\u026D\u020C\x03\x02" +
    "\x02\x02\u026D\u020D\x03\x02\x02\x02\u026D\u020E\x03\x02\x02\x02\u026D" +
    "\u020F\x03\x02\x02\x02\u026D\u0210\x03\x02\x02\x02\u026D\u0211\x03\x02" +
    "\x02\x02\u026D\u0212\x03\x02\x02\x02\u026D\u0213\x03\x02\x02\x02\u026D" +
    "\u0214\x03\x02\x02\x02\u026D\u0215\x03\x02\x02\x02\u026D\u0216\x03\x02" +
    "\x02\x02\u026D\u0217\x03\x02\x02\x02\u026D\u0218\x03\x02\x02\x02\u026D" +
    "\u0219\x03\x02\x02\x02\u026D\u021A\x03\x02\x02\x02\u026D\u021B\x03\x02" +
    "\x02\x02\u026D\u021C\x03\x02\x02\x02\u026D\u021D\x03\x02\x02\x02\u026D" +
    "\u021E\x03\x02\x02\x02\u026D\u021F\x03\x02\x02\x02\u026D\u0220\x03\x02" +
    "\x02\x02\u026D\u0221\x03\x02\x02\x02\u026D\u0222\x03\x02\x02\x02\u026D" +
    "\u0223\x03\x02\x02\x02\u026D\u0224\x03\x02\x02\x02\u026D\u0225\x03\x02" +
    "\x02\x02\u026D\u0226\x03\x02\x02\x02\u026D\u0227\x03\x02\x02\x02\u026D" +
    "\u0228\x03\x02\x02\x02\u026D\u0229\x03\x02\x02\x02\u026D\u022A\x03\x02" +
    "\x02\x02\u026D\u022B\x03\x02\x02\x02\u026D\u022C\x03\x02\x02\x02\u026D" +
    "\u022D\x03\x02\x02\x02\u026D\u022E\x03\x02\x02\x02\u026D\u022F\x03\x02" +
    "\x02\x02\u026D\u0230\x03\x02\x02\x02\u026D\u0231\x03\x02\x02\x02\u026D" +
    "\u0232\x03\x02\x02\x02\u026D\u0233\x03\x02\x02\x02\u026D\u0234\x03\x02" +
    "\x02\x02\u026D\u0235\x03\x02\x02\x02\u026D\u0236\x03\x02\x02\x02\u026D" +
    "\u0237\x03\x02\x02\x02\u026D\u0238\x03\x02\x02\x02\u026D\u0239\x03\x02" +
    "\x02\x02\u026D\u023A\x03\x02\x02\x02\u026D\u023B\x03\x02\x02\x02\u026D" +
    "\u023C\x03\x02\x02\x02\u026D\u023D\x03\x02\x02\x02\u026D\u023E\x03\x02" +
    "\x02\x02\u026D\u023F\x03\x02\x02\x02\u026D\u0240\x03\x02\x02\x02\u026D" +
    "\u0241\x03\x02\x02\x02\u026D\u0242\x03\x02\x02\x02\u026D\u0243\x03\x02" +
    "\x02\x02\u026D\u0244\x03\x02\x02\x02\u026D\u0245\x03\x02\x02\x02\u026D" +
    "\u0246\x03\x02\x02\x02\u026D\u0247\x03\x02\x02\x02\u026D\u0248\x03\x02" +
    "\x02\x02\u026D\u0249\x03\x02\x02\x02\u026D\u024A\x03\x02\x02\x02\u026D" +
    "\u024B\x03\x02\x02\x02\u026D\u024C\x03\x02\x02\x02\u026D\u024D\x03\x02" +
    "\x02\x02\u026D\u024E\x03\x02\x02\x02\u026D\u024F\x03\x02\x02\x02\u026D" +
    "\u0250\x03\x02\x02\x02\u026D\u0251\x03\x02\x02\x02\u026D\u0252\x03\x02" +
    "\x02\x02\u026D\u0253\x03\x02\x02\x02\u026D\u0254\x03\x02\x02\x02\u026D" +
    "\u0255\x03\x02\x02\x02\u026D\u0256\x03\x02\x02\x02\u026D\u0257\x03\x02" +
    "\x02\x02\u026D\u0258\x03\x02\x02\x02\u026D\u0259\x03\x02\x02\x02\u026D" +
    "\u025A\x03\x02\x02\x02\u026D\u025B\x03\x02\x02\x02\u026D\u025C\x03\x02" +
    "\x02\x02\u026D\u025D\x03\x02\x02\x02\u026D\u025E\x03\x02\x02\x02\u026D" +
    "\u025F\x03\x02\x02\x02\u026D\u0260\x03\x02\x02\x02\u026D\u0261\x03\x02" +
    "\x02\x02\u026D\u0262\x03\x02\x02\x02\u026D\u0263\x03\x02\x02\x02\u026D" +
    "\u0264\x03\x02\x02\x02\u026D\u0265\x03\x02\x02\x02\u026D\u0266\x03\x02" +
    "\x02\x02\u026D\u0267\x03\x02\x02\x02\u026D\u0268\x03\x02\x02\x02\u026D" +
    "\u0269\x03\x02\x02\x02\u026D\u026A\x03\x02\x02\x02\u026D\u026B\x03\x02" +
    "\x02\x02\u026D\u026C\x03\x02\x02\x02\u026E\x07\x03\x02\x02\x02\u026F\u0271" +
    "\x07\x05\x02\x02\u0270\u0272\x05\u0144\xA3\x02\u0271\u0270\x03\x02\x02" +
    "\x02\u0271\u0272\x03\x02\x02\x02\u0272\u0273\x03\x02\x02\x02\u0273\u027B" +
    "\x07\xA0\x02\x02\u0274\u0276\x07\xB9\x02\x02\u0275\u0274\x03\x02\x02\x02" +
    "\u0276\u0279\x03\x02\x02\x02\u0277\u0275\x03\x02\x02\x02\u0277\u0278\x03" +
    "\x02\x02\x02\u0278\u027A\x03\x02\x02\x02\u0279\u0277\x03\x02\x02\x02\u027A" +
    "\u027C\x05L\'\x02\u027B\u0277\x03\x02\x02\x02\u027C\u027D\x03\x02\x02" +
    "\x02\u027D\u027B\x03\x02\x02\x02\u027D\u027E\x03\x02\x02\x02\u027E\t\x03" +
    "\x02\x02\x02\u027F\u0281\x07\x06\x02\x02\u0280\u0282\x05\u0144\xA3\x02" +
    "\u0281\u0280\x03\x02\x02\x02\u0281\u0282\x03\x02\x02\x02\u0282\u0283\x03" +
    "\x02\x02\x02\u0283\u0287\x07\xA0\x02\x02\u0284\u0286\x07\xB9\x02\x02\u0285" +
    "\u0284\x03\x02\x02\x02\u0286\u0289\x03\x02\x02\x02\u0287\u0285\x03\x02" +
    "\x02\x02\u0287\u0288\x03\x02\x02\x02\u0288\u028D\x03\x02\x02\x02\u0289" +
    "\u0287\x03\x02\x02\x02\u028A\u028B\x05\u01B4\xDB\x02\u028B\u028C\x07\xB9" +
    "\x02\x02\u028C\u028E\x03\x02\x02\x02\u028D\u028A\x03\x02\x02\x02\u028D" +
    "\u028E\x03\x02\x02\x02\u028E\u028F\x03\x02\x02\x02\u028F\u0299\x05^0\x02" +
    "\u0290\u0292\x07\xB9\x02\x02\u0291\u0290\x03\x02\x02\x02\u0292\u0295\x03" +
    "\x02\x02\x02\u0293\u0291\x03\x02\x02\x02\u0293\u0294\x03\x02\x02\x02\u0294" +
    "\u0296\x03\x02\x02\x02\u0295\u0293\x03\x02\x02\x02\u0296\u0298\x05^0\x02" +
    "\u0297\u0293\x03\x02\x02\x02\u0298\u029B\x03\x02\x02\x02\u0299\u0297\x03" +
    "\x02\x02\x02\u0299\u029A\x03\x02\x02\x02\u029A\v\x03\x02\x02\x02\u029B" +
    "\u0299\x03\x02\x02\x02\u029C\u029E\x07\x07\x02\x02\u029D\u029F\x05\u01B8" +
    "\xDD\x02\u029E\u029D\x03\x02\x02\x02\u029E\u029F\x03\x02\x02\x02\u029F" +
    "\u02A0\x03\x02\x02\x02\u02A0\u02A1\x07\xA0\x02\x02\u02A1\u02A5\x07\xB9" +
    "\x02\x02\u02A2\u02A3\x05\u01AE\xD8\x02\u02A3\u02A4\x07\xB9\x02\x02\u02A4" +
    "\u02A6\x03\x02\x02\x02\u02A5\u02A2\x03\x02\x02\x02\u02A5\u02A6\x03\x02" +
    "\x02\x02\u02A6\r\x03\x02\x02\x02\u02A7\u02A8\x07\b\x02\x02\u02A8\u02AC" +
    "\x07\xA0\x02\x02\u02A9\u02AB\x07\xB9\x02\x02\u02AA\u02A9\x03\x02\x02\x02" +
    "\u02AB\u02AE\x03\x02\x02\x02\u02AC\u02AA\x03\x02\x02\x02\u02AC\u02AD\x03" +
    "\x02\x02\x02\u02AD\u02AF\x03\x02\x02\x02\u02AE\u02AC\x03\x02\x02\x02\u02AF" +
    "\u02B0\x05\x14\v\x02\u02B0\x0F\x03\x02\x02\x02\u02B1\u02B3\t\x02\x02\x02" +
    "\u02B2\u02B4\t\x03\x02\x02\u02B3\u02B2\x03\x02\x02\x02\u02B3\u02B4\x03" +
    "\x02\x02\x02\u02B4\u02B5\x03\x02\x02\x02\u02B5\u02BF\x07\xA0\x02\x02\u02B6" +
    "\u02B8\x07\xB9\x02\x02\u02B7\u02B6\x03\x02\x02\x02\u02B8\u02BB\x03\x02" +
    "\x02\x02\u02B9\u02B7\x03\x02\x02\x02\u02B9\u02BA\x03\x02\x02\x02\u02BA" +
    "\u02BC\x03\x02\x02\x02\u02BB\u02B9\x03\x02\x02\x02\u02BC\u02BE\x05L\'" +
    "\x02\u02BD\u02B9\x03\x02\x02\x02\u02BE\u02C1\x03\x02\x02\x02\u02BF\u02BD" +
    "\x03\x02\x02\x02\u02BF\u02C0\x03\x02\x02\x02\u02C0\x11\x03\x02\x02\x02" +
    "\u02C1\u02BF\x03\x02\x02\x02\u02C2\u02C3\x07\v\x02\x02\u02C3\u02C4\x07" +
    "\xA0\x02\x02\u02C4\u02C5\x05\u0192\xCA\x02\u02C5\x13\x03\x02\x02\x02\u02C6" +
    "\u02C8\x07\xB9\x02\x02\u02C7\u02C6\x03\x02\x02\x02\u02C7\u02C8\x03\x02" +
    "\x02\x02\u02C8\u02D0\x03\x02\x02\x02\u02C9\u02D1\x05\u01A4\xD3\x02\u02CA" +
    "\u02D1\x05\u01AE\xD8\x02\u02CB\u02D1\x05\u018E\xC8\x02\u02CC\u02D1";
bitmarkParser._serializedATNSegment3 = "\x05\u01A0\xD1\x02\u02CD\u02D1\x05\u0192\xCA\x02\u02CE\u02D1\x05\u01B4" +
    "\xDB\x02\u02CF\u02D1\x05\u019A\xCE\x02\u02D0\u02C9\x03\x02\x02\x02\u02D0" +
    "\u02CA\x03\x02\x02\x02\u02D0\u02CB\x03\x02\x02\x02\u02D0\u02CC\x03\x02" +
    "\x02\x02\u02D0\u02CD\x03\x02\x02\x02\u02D0\u02CE\x03\x02\x02\x02\u02D0" +
    "\u02CF\x03\x02\x02\x02\u02D1\u02D3\x03\x02\x02\x02\u02D2\u02C7\x03\x02" +
    "\x02\x02\u02D3\u02D6\x03\x02\x02\x02\u02D4\u02D2\x03\x02\x02\x02\u02D4" +
    "\u02D5\x03\x02\x02\x02\u02D5\x15\x03\x02\x02\x02\u02D6\u02D4\x03\x02\x02" +
    "\x02\u02D7\u02D8\x07\f\x02\x02\u02D8\u02E2\x07\xA0\x02\x02\u02D9\u02DA" +
    "\x07\xB9\x02\x02\u02DA\u02DD\t\x04\x02\x02\u02DB\u02DE\x05\u01B8\xDD\x02" +
    "\u02DC\u02DE\x07\xA1\x02\x02\u02DD\u02DB\x03\x02\x02\x02\u02DD\u02DC\x03" +
    "\x02\x02\x02\u02DE\u02DF\x03\x02\x02\x02\u02DF\u02DD\x03\x02\x02\x02\u02DF" +
    "\u02E0\x03\x02\x02\x02\u02E0\u02E1\x03\x02\x02\x02\u02E1\u02E3\x07\xA0" +
    "\x02\x02\u02E2\u02D9\x03\x02\x02\x02\u02E3\u02E4\x03\x02\x02\x02\u02E4" +
    "\u02E2\x03\x02\x02\x02\u02E4\u02E5\x03\x02\x02\x02\u02E5\u02E6\x03\x02" +
    "\x02\x02\u02E6\u02EA\x07\xB9\x02\x02\u02E7\u02E9\x05\u01B6\xDC\x02\u02E8" +
    "\u02E7\x03\x02\x02\x02\u02E9\u02EC\x03\x02\x02\x02\u02EA\u02E8\x03\x02" +
    "\x02\x02\u02EA\u02EB\x03\x02\x02\x02\u02EB\x17\x03\x02\x02\x02\u02EC\u02EA" +
    "\x03\x02\x02\x02\u02ED\u02EE\x07\r\x02\x02\u02EE\u02F8\x07\xA0\x02\x02" +
    "\u02EF\u02F0\x07\xB9\x02\x02\u02F0\u02F3\t\x04\x02\x02\u02F1\u02F4\x05" +
    "\u01B8\xDD\x02\u02F2\u02F4\x07\xA1\x02\x02\u02F3\u02F1\x03\x02\x02\x02" +
    "\u02F3\u02F2\x03\x02\x02\x02\u02F4\u02F5\x03\x02\x02\x02\u02F5\u02F3\x03" +
    "\x02\x02\x02\u02F5\u02F6\x03\x02\x02\x02\u02F6\u02F7\x03\x02\x02\x02\u02F7" +
    "\u02F9\x07\xA0\x02\x02\u02F8\u02EF\x03\x02\x02\x02\u02F9\u02FA\x03\x02" +
    "\x02\x02\u02FA\u02F8\x03\x02\x02\x02\u02FA\u02FB\x03\x02\x02\x02\u02FB" +
    "\u02FC\x03\x02\x02\x02\u02FC\u0300\x07\xB9\x02\x02\u02FD\u02FF\x05\u01B6" +
    "\xDC\x02\u02FE\u02FD\x03\x02\x02\x02\u02FF\u0302\x03\x02\x02\x02\u0300" +
    "\u02FE\x03\x02\x02\x02\u0300\u0301\x03\x02\x02\x02\u0301\x19\x03\x02\x02" +
    "\x02\u0302\u0300\x03\x02\x02\x02\u0303\u0304\x076\x02\x02\u0304\u0305" +
    "\x05\u0144\xA3\x02\u0305\u0309\x07\xA0\x02\x02\u0306\u0308\x07\xB9\x02" +
    "\x02\u0307\u0306\x03\x02\x02\x02\u0308\u030B\x03\x02\x02\x02\u0309\u0307" +
    "\x03\x02\x02\x02\u0309\u030A\x03\x02\x02\x02\u030A\u0313\x03\x02\x02\x02" +
    "\u030B\u0309\x03\x02\x02\x02\u030C\u0310\x05L\'\x02\u030D\u030F\x07\xB9" +
    "\x02\x02\u030E\u030D\x03\x02\x02\x02\u030F\u0312\x03\x02\x02\x02\u0310" +
    "\u030E\x03\x02\x02\x02\u0310\u0311\x03\x02\x02\x02\u0311\u0314\x03\x02" +
    "\x02\x02\u0312\u0310\x03\x02\x02\x02\u0313\u030C\x03\x02\x02\x02\u0314" +
    "\u0315\x03\x02\x02\x02\u0315\u0313\x03\x02\x02\x02\u0315\u0316\x03\x02" +
    "\x02\x02\u0316\x1B\x03\x02\x02\x02\u0317\u0318\x077\x02\x02\u0318\u0319" +
    "\x05\u0144\xA3\x02\u0319\u031D\x07\xA0\x02\x02\u031A\u031C\x07\xB9\x02" +
    "\x02\u031B\u031A\x03\x02\x02\x02\u031C\u031F\x03\x02\x02\x02\u031D\u031B" +
    "\x03\x02\x02\x02\u031D\u031E\x03\x02\x02\x02\u031E\u0327\x03\x02\x02\x02" +
    "\u031F\u031D\x03\x02\x02\x02\u0320\u0324\x05L\'\x02\u0321\u0323\x07\xB9" +
    "\x02\x02\u0322\u0321\x03\x02\x02\x02\u0323\u0326\x03\x02\x02\x02\u0324" +
    "\u0322\x03\x02\x02\x02\u0324\u0325\x03\x02\x02\x02\u0325\u0328\x03\x02" +
    "\x02\x02\u0326\u0324\x03\x02\x02\x02\u0327\u0320\x03\x02\x02\x02\u0328" +
    "\u0329\x03\x02\x02\x02\u0329\u0327\x03\x02\x02\x02\u0329\u032A\x03\x02" +
    "\x02\x02\u032A\x1D\x03\x02\x02\x02\u032B\u032C\x078\x02\x02\u032C\u032D" +
    "\x05\u0144\xA3\x02\u032D\u0331\x07\xA0\x02\x02\u032E\u0330\x07\xB9\x02" +
    "\x02\u032F\u032E\x03\x02\x02\x02\u0330\u0333\x03\x02\x02\x02\u0331\u032F" +
    "\x03\x02\x02\x02\u0331\u0332\x03\x02\x02\x02\u0332\u033B\x03\x02\x02\x02" +
    "\u0333\u0331\x03\x02\x02\x02\u0334\u0338\x05L\'\x02\u0335\u0337\x07\xB9" +
    "\x02\x02\u0336\u0335\x03\x02\x02\x02\u0337\u033A\x03\x02\x02\x02\u0338" +
    "\u0336\x03\x02\x02\x02\u0338\u0339\x03\x02\x02\x02\u0339\u033C\x03\x02" +
    "\x02\x02\u033A\u0338\x03\x02\x02\x02\u033B\u0334\x03\x02\x02\x02\u033C" +
    "\u033D\x03\x02\x02\x02\u033D\u033B\x03\x02\x02\x02\u033D\u033E\x03\x02" +
    "\x02\x02\u033E\x1F\x03\x02\x02\x02\u033F\u0340\x079\x02\x02\u0340\u0341" +
    "\x05\u0144\xA3\x02\u0341\u0345\x07\xA0\x02\x02\u0342\u0344\x07\xB9\x02" +
    "\x02\u0343\u0342\x03\x02\x02\x02\u0344\u0347\x03\x02\x02\x02\u0345\u0343" +
    "\x03\x02\x02\x02\u0345\u0346\x03\x02\x02\x02\u0346\u034F\x03\x02\x02\x02" +
    "\u0347\u0345\x03\x02\x02\x02\u0348\u034C\x05L\'\x02\u0349\u034B\x07\xB9" +
    "\x02\x02\u034A\u0349\x03\x02\x02\x02\u034B\u034E\x03\x02\x02\x02\u034C" +
    "\u034A\x03\x02\x02\x02\u034C\u034D\x03\x02\x02\x02\u034D\u0350\x03\x02" +
    "\x02\x02\u034E\u034C\x03\x02\x02\x02\u034F\u0348\x03\x02\x02\x02\u0350" +
    "\u0351\x03\x02\x02\x02\u0351\u034F\x03\x02\x02\x02\u0351\u0352\x03\x02" +
    "\x02\x02\u0352!\x03\x02\x02\x02\u0353\u0354\x07:\x02\x02\u0354\u0355\x05" +
    "\u0144\xA3\x02\u0355\u0359\x07\xA0\x02\x02\u0356\u0358\x07\xB9\x02\x02" +
    "\u0357\u0356\x03\x02\x02\x02\u0358\u035B\x03\x02\x02\x02\u0359\u0357\x03" +
    "\x02\x02\x02\u0359\u035A\x03\x02\x02\x02\u035A\u0363\x03\x02\x02\x02\u035B" +
    "\u0359\x03\x02\x02\x02\u035C\u0360\x05L\'\x02\u035D\u035F\x07\xB9\x02" +
    "\x02\u035E\u035D\x03\x02\x02\x02\u035F\u0362\x03\x02\x02\x02\u0360\u035E" +
    "\x03\x02\x02\x02\u0360\u0361\x03\x02\x02\x02\u0361\u0364\x03\x02\x02\x02" +
    "\u0362\u0360\x03\x02\x02\x02\u0363\u035C\x03\x02\x02\x02\u0364\u0365\x03" +
    "\x02\x02\x02\u0365\u0363\x03\x02\x02\x02\u0365\u0366\x03\x02\x02\x02\u0366" +
    "#\x03\x02\x02\x02\u0367\u0368\x07;\x02\x02\u0368\u0369\x05\u0144\xA3\x02" +
    "\u0369\u036D\x07\xA0\x02\x02\u036A\u036C\x07\xB9\x02\x02\u036B\u036A\x03" +
    "\x02\x02\x02\u036C\u036F\x03\x02\x02\x02\u036D\u036B\x03\x02\x02\x02\u036D" +
    "\u036E\x03\x02\x02\x02\u036E\u0377\x03\x02\x02\x02\u036F\u036D\x03\x02" +
    "\x02\x02\u0370\u0374\x05L\'\x02\u0371\u0373\x07\xB9\x02\x02\u0372\u0371" +
    "\x03\x02\x02\x02\u0373\u0376\x03\x02\x02\x02\u0374\u0372\x03\x02\x02\x02" +
    "\u0374\u0375\x03\x02\x02\x02\u0375\u0378\x03\x02\x02\x02\u0376\u0374\x03" +
    "\x02\x02\x02\u0377\u0370\x03\x02\x02\x02\u0378\u0379\x03\x02\x02\x02\u0379" +
    "\u0377\x03\x02\x02\x02\u0379\u037A\x03\x02\x02\x02\u037A%\x03\x02\x02" +
    "\x02\u037B\u037C\x07<\x02\x02\u037C\u037D\x05\u0144\xA3\x02\u037D\u0381" +
    "\x07\xA0\x02\x02\u037E\u0380\x07\xB9\x02\x02\u037F\u037E\x03\x02\x02\x02" +
    "\u0380\u0383\x03\x02\x02\x02\u0381\u037F\x03\x02\x02\x02\u0381\u0382\x03" +
    "\x02\x02\x02\u0382\u038B\x03\x02\x02\x02\u0383\u0381\x03\x02\x02\x02\u0384" +
    "\u0388\x05L\'\x02\u0385\u0387\x07\xB9\x02\x02\u0386\u0385\x03\x02\x02" +
    "\x02\u0387\u038A\x03\x02\x02\x02\u0388\u0386\x03\x02\x02\x02\u0388\u0389" +
    "\x03\x02\x02\x02\u0389\u038C\x03\x02\x02\x02\u038A\u0388\x03\x02\x02\x02" +
    "\u038B\u0384\x03\x02\x02\x02\u038C\u038D\x03\x02\x02\x02\u038D\u038B\x03" +
    "\x02\x02\x02\u038D\u038E\x03\x02\x02\x02\u038E\'\x03\x02\x02\x02\u038F" +
    "\u0390\x07=\x02\x02\u0390\u0391\x05\u0144\xA3\x02\u0391\u0395\x07\xA0" +
    "\x02\x02\u0392\u0394\x07\xB9\x02\x02\u0393\u0392\x03\x02\x02\x02\u0394" +
    "\u0397\x03\x02\x02\x02\u0395\u0393\x03\x02\x02\x02\u0395\u0396\x03\x02" +
    "\x02\x02\u0396\u039F\x03\x02\x02\x02\u0397\u0395\x03\x02\x02\x02\u0398" +
    "\u039C\x05L\'\x02\u0399\u039B\x07\xB9\x02\x02\u039A\u0399\x03\x02\x02" +
    "\x02\u039B\u039E\x03\x02\x02\x02\u039C\u039A\x03\x02\x02\x02\u039C\u039D" +
    "\x03\x02\x02\x02\u039D\u03A0\x03\x02\x02\x02\u039E\u039C\x03\x02\x02\x02" +
    "\u039F\u0398\x03\x02\x02\x02\u03A0\u03A1\x03\x02\x02\x02\u03A1\u039F\x03" +
    "\x02\x02\x02\u03A1\u03A2\x03\x02\x02\x02\u03A2)\x03\x02\x02\x02\u03A3" +
    "\u03A4\x07>\x02\x02\u03A4\u03A5\x05\u0144\xA3\x02\u03A5\u03A9\x07\xA0" +
    "\x02\x02\u03A6\u03A8\x07\xB9\x02\x02\u03A7\u03A6\x03\x02\x02\x02\u03A8" +
    "\u03AB\x03\x02\x02\x02\u03A9\u03A7\x03\x02\x02\x02\u03A9\u03AA\x03\x02" +
    "\x02\x02\u03AA\u03B3\x03\x02\x02\x02\u03AB\u03A9\x03\x02\x02\x02\u03AC" +
    "\u03B0\x05L\'\x02\u03AD\u03AF\x07\xB9\x02\x02\u03AE\u03AD\x03\x02\x02" +
    "\x02\u03AF\u03B2\x03\x02\x02\x02\u03B0\u03AE\x03\x02\x02\x02\u03B0\u03B1" +
    "\x03\x02\x02\x02\u03B1\u03B4\x03\x02\x02\x02\u03B2\u03B0\x03\x02\x02\x02" +
    "\u03B3\u03AC\x03\x02\x02\x02\u03B4\u03B5\x03\x02\x02\x02\u03B5\u03B3\x03" +
    "\x02\x02\x02\u03B5\u03B6\x03\x02\x02\x02\u03B6+\x03\x02\x02\x02\u03B7" +
    "\u03B8\x07?\x02\x02\u03B8\u03B9\x05\u0144\xA3\x02\u03B9\u03BD\x07\xA0" +
    "\x02\x02\u03BA\u03BC\x07\xB9\x02\x02\u03BB\u03BA\x03\x02\x02\x02\u03BC" +
    "\u03BF\x03\x02\x02\x02\u03BD\u03BB\x03\x02\x02\x02\u03BD\u03BE\x03\x02" +
    "\x02\x02\u03BE\u03C7\x03\x02\x02\x02\u03BF\u03BD\x03\x02\x02\x02\u03C0" +
    "\u03C4\x05L\'\x02\u03C1\u03C3\x07\xB9\x02\x02\u03C2\u03C1\x03\x02\x02" +
    "\x02\u03C3\u03C6\x03\x02\x02\x02\u03C4\u03C2\x03\x02\x02\x02\u03C4\u03C5" +
    "\x03\x02\x02\x02\u03C5\u03C8\x03\x02\x02\x02\u03C6\u03C4\x03\x02\x02\x02" +
    "\u03C7\u03C0\x03\x02\x02\x02\u03C8\u03C9\x03\x02\x02\x02\u03C9\u03C7\x03" +
    "\x02\x02\x02\u03C9\u03CA\x03\x02\x02\x02\u03CA-\x03\x02\x02\x02\u03CB" +
    "\u03CC\x07@\x02\x02\u03CC\u03CD\x05\u0144\xA3\x02\u03CD\u03D1\x07\xA0" +
    "\x02\x02\u03CE\u03D0\x07\xB9\x02\x02\u03CF\u03CE\x03\x02\x02\x02\u03D0" +
    "\u03D3\x03\x02\x02\x02\u03D1\u03CF\x03\x02\x02\x02\u03D1\u03D2\x03\x02" +
    "\x02\x02\u03D2\u03DB\x03\x02\x02\x02\u03D3\u03D1\x03\x02\x02\x02\u03D4" +
    "\u03D8\x05L\'\x02\u03D5\u03D7\x07\xB9\x02\x02\u03D6\u03D5\x03\x02\x02" +
    "\x02\u03D7\u03DA\x03\x02\x02\x02\u03D8\u03D6\x03\x02\x02\x02\u03D8\u03D9" +
    "\x03\x02\x02\x02\u03D9\u03DC\x03\x02\x02\x02\u03DA\u03D8\x03\x02\x02\x02" +
    "\u03DB\u03D4\x03\x02\x02\x02\u03DC\u03DD\x03\x02\x02\x02\u03DD\u03DB\x03" +
    "\x02\x02\x02\u03DD\u03DE\x03\x02\x02\x02\u03DE/\x03\x02\x02\x02\u03DF" +
    "\u03E0\x07A\x02\x02\u03E0\u03E1\x05\u0144\xA3\x02\u03E1\u03E5\x07\xA0" +
    "\x02\x02\u03E2\u03E4\x07\xB9\x02\x02\u03E3\u03E2\x03\x02\x02\x02\u03E4" +
    "\u03E7\x03\x02\x02\x02\u03E5\u03E3\x03\x02\x02\x02\u03E5\u03E6\x03\x02" +
    "\x02\x02\u03E6\u03EF\x03\x02\x02\x02\u03E7\u03E5\x03\x02\x02\x02\u03E8" +
    "\u03EC\x05L\'\x02\u03E9\u03EB\x07\xB9\x02\x02\u03EA\u03E9\x03\x02\x02" +
    "\x02\u03EB\u03EE\x03\x02\x02\x02\u03EC\u03EA\x03\x02\x02\x02\u03EC\u03ED" +
    "\x03\x02\x02\x02\u03ED\u03F0\x03\x02\x02\x02\u03EE\u03EC\x03\x02\x02\x02" +
    "\u03EF\u03E8\x03\x02\x02\x02\u03F0\u03F1\x03\x02\x02\x02\u03F1\u03EF\x03" +
    "\x02\x02\x02\u03F1\u03F2\x03\x02\x02\x02\u03F21\x03\x02\x02\x02\u03F3" +
    "\u03F4\x07B\x02\x02\u03F4\u03F5\x05\u0144\xA3\x02\u03F5\u03F9\x07\xA0" +
    "\x02\x02\u03F6\u03F8\x07\xB9\x02\x02\u03F7\u03F6\x03\x02\x02\x02\u03F8" +
    "\u03FB\x03\x02\x02\x02\u03F9\u03F7\x03\x02\x02\x02\u03F9\u03FA\x03\x02" +
    "\x02\x02\u03FA\u0403\x03\x02\x02\x02\u03FB\u03F9\x03\x02\x02\x02\u03FC" +
    "\u0400\x05L\'\x02\u03FD\u03FF\x07\xB9\x02\x02\u03FE\u03FD\x03\x02\x02" +
    "\x02\u03FF\u0402\x03\x02\x02\x02\u0400\u03FE\x03\x02\x02\x02\u0400\u0401" +
    "\x03\x02\x02\x02\u0401\u0404\x03\x02\x02\x02\u0402\u0400\x03\x02\x02\x02" +
    "\u0403\u03FC\x03\x02\x02\x02\u0404\u0405\x03\x02\x02\x02\u0405\u0403\x03" +
    "\x02\x02\x02\u0405\u0406\x03\x02\x02\x02\u04063\x03\x02\x02\x02\u0407" +
    "\u0408\x07C\x02\x02\u0408\u0409\x05\u0144\xA3\x02\u0409\u040D\x07\xA0" +
    "\x02\x02\u040A\u040C\x07\xB9\x02\x02\u040B\u040A\x03\x02\x02\x02\u040C" +
    "\u040F\x03\x02\x02\x02\u040D\u040B\x03\x02\x02\x02\u040D\u040E\x03\x02" +
    "\x02\x02\u040E\u0417\x03\x02\x02\x02\u040F\u040D\x03\x02\x02\x02\u0410" +
    "\u0414\x05L\'\x02\u0411\u0413\x07\xB9\x02\x02\u0412\u0411\x03\x02\x02" +
    "\x02\u0413\u0416\x03\x02\x02\x02\u0414\u0412\x03\x02\x02\x02\u0414\u0415" +
    "\x03\x02\x02\x02\u0415\u0418\x03\x02\x02\x02\u0416\u0414\x03\x02\x02\x02" +
    "\u0417\u0410\x03\x02\x02\x02\u0418\u0419\x03\x02\x02\x02\u0419\u0417\x03" +
    "\x02\x02\x02\u0419\u041A\x03\x02\x02\x02\u041A5\x03\x02\x02\x02\u041B" +
    "\u041C\x07D\x02\x02\u041C\u041D\x05\u0144\xA3\x02\u041D\u0421\x07\xA0" +
    "\x02\x02\u041E\u0420\x07\xB9\x02\x02\u041F\u041E\x03\x02\x02\x02\u0420" +
    "\u0423\x03\x02\x02\x02\u0421\u041F\x03\x02\x02\x02\u0421\u0422\x03\x02" +
    "\x02\x02\u0422\u042B\x03\x02\x02\x02\u0423\u0421\x03\x02\x02\x02\u0424" +
    "\u0428\x05L\'\x02\u0425\u0427\x07\xB9\x02\x02\u0426\u0425\x03\x02\x02" +
    "\x02\u0427\u042A\x03\x02\x02\x02\u0428\u0426\x03\x02\x02\x02\u0428\u0429" +
    "\x03\x02\x02\x02\u0429\u042C\x03\x02\x02\x02\u042A\u0428\x03\x02\x02\x02" +
    "\u042B\u0424\x03\x02\x02\x02\u042C\u042D\x03\x02\x02\x02\u042D\u042B\x03" +
    "\x02\x02\x02\u042D\u042E\x03\x02\x02\x02\u042E7\x03\x02\x02\x02\u042F" +
    "\u0430\x07E\x02\x02\u0430\u0431\x05\u0144\xA3\x02\u0431\u0435\x07\xA0" +
    "\x02\x02\u0432\u0434\x07\xB9\x02\x02\u0433\u0432\x03\x02\x02\x02\u0434" +
    "\u0437\x03\x02\x02\x02\u0435\u0433\x03\x02\x02\x02\u0435\u0436\x03\x02" +
    "\x02\x02\u0436\u043F\x03\x02\x02\x02\u0437\u0435\x03\x02\x02\x02\u0438" +
    "\u043C\x05L\'\x02\u0439\u043B\x07\xB9\x02\x02\u043A\u0439\x03\x02\x02" +
    "\x02\u043B\u043E\x03\x02\x02\x02\u043C\u043A\x03\x02\x02\x02\u043C\u043D" +
    "\x03\x02\x02\x02\u043D\u0440\x03\x02\x02\x02\u043E\u043C\x03\x02\x02\x02" +
    "\u043F\u0438\x03\x02\x02\x02\u0440\u0441\x03\x02\x02\x02\u0441\u043F\x03" +
    "\x02\x02\x02\u0441\u0442\x03\x02\x02\x02\u04429\x03\x02\x02\x02\u0443" +
    "\u0444\x07\x83\x02\x02\u0444\u0445\x05\u0144\xA3\x02\u0445\u0449\x07\xA0" +
    "\x02\x02\u0446\u0448\x07\xB9\x02\x02\u0447\u0446\x03\x02\x02\x02\u0448" +
    "\u044B\x03\x02\x02\x02\u0449\u0447\x03\x02\x02\x02\u0449\u044A\x03\x02" +
    "\x02\x02\u044A\u0455\x03\x02\x02\x02\u044B\u0449\x03\x02\x02\x02\u044C" +
    "\u0450\x05L\'\x02\u044D\u044F\x07\xB9\x02\x02\u044E\u044D\x03\x02\x02" +
    "\x02\u044F\u0452\x03\x02\x02\x02\u0450\u044E\x03\x02\x02\x02\u0450\u0451" +
    "\x03\x02\x02\x02\u0451\u0454\x03\x02\x02\x02\u0452\u0450\x03\x02\x02\x02" +
    "\u0453\u044C\x03\x02\x02\x02\u0454\u0457\x03\x02\x02\x02\u0455\u0453\x03" +
    "\x02\x02\x02\u0455\u0456\x03\x02\x02\x02\u0456\u0459\x03\x02\x02\x02\u0457" +
    "\u0455\x03\x02\x02\x02\u0458\u045A\x05B\"\x02\u0459\u0458\x03\x02\x02" +
    "\x02\u045A\u045B\x03\x02\x02\x02\u045B\u0459\x03\x02\x02\x02\u045B\u045C" +
    "\x03\x02\x02\x02\u045C\u045D\x03\x02\x02\x02\u045D\u045F\x07\xAB\x02\x02" +
    "\u045E\u0460\x05J&\x02\u045F\u045E\x03\x02\x02\x02\u045F\u0460\x03\x02" +
    "\x02\x02\u0460\u0464\x03\x02\x02\x02\u0461\u0463\x07\xB9\x02\x02\u0462" +
    "\u0461\x03\x02\x02\x02\u0463\u0466\x03\x02\x02\x02\u0464\u0462\x03\x02" +
    "\x02\x02\u0464\u0465\x03\x02\x02\x02\u0465;\x03\x02\x02\x02\u0466\u0464" +
    "\x03\x02\x02\x02\u0467\u0468\x07\x84\x02\x02\u0468\u0469\x05\u0144\xA3" +
    "\x02\u0469\u046D\x07\xA0\x02\x02\u046A\u046C\x07\xB9\x02\x02\u046B\u046A" +
    "\x03\x02\x02\x02\u046C\u046F\x03\x02\x02\x02\u046D\u046B\x03\x02\x02\x02" +
    "\u046D\u046E\x03\x02\x02\x02\u046E\u0479\x03\x02\x02\x02\u046F\u046D\x03" +
    "\x02\x02\x02\u0470\u0474\x05L\'\x02\u0471\u0473\x07\xB9\x02\x02\u0472" +
    "\u0471\x03\x02\x02\x02\u0473\u0476\x03\x02\x02\x02\u0474\u0472\x03\x02" +
    "\x02\x02\u0474\u0475\x03\x02\x02\x02\u0475\u0478\x03\x02\x02\x02\u0476" +
    "\u0474\x03\x02\x02\x02\u0477\u0470\x03\x02\x02\x02\u0478\u047B\x03\x02" +
    "\x02\x02\u0479\u0477\x03\x02\x02\x02\u0479\u047A\x03\x02\x02\x02\u047A" +
    "\u047D\x03\x02\x02\x02\u047B\u0479\x03\x02\x02\x02\u047C\u047E\x05B\"" +
    "\x02\u047D\u047C\x03\x02\x02\x02\u047E\u047F\x03\x02\x02\x02\u047F\u047D" +
    "\x03\x02\x02\x02\u047F\u0480\x03\x02\x02\x02\u0480\u0481\x03\x02\x02\x02" +
    "\u0481\u0483\x07\xAB\x02\x02\u0482\u0484\x05J&\x02\u0483\u0482\x03\x02" +
    "\x02\x02\u0483\u0484\x03\x02\x02\x02\u0484\u0488\x03\x02\x02\x02\u0485" +
    "\u0487\x07\xB9\x02\x02\u0486\u0485\x03\x02\x02\x02\u0487\u048A\x03\x02" +
    "\x02\x02\u0488\u0486\x03\x02\x02\x02\u0488\u0489\x03\x02\x02\x02\u0489" +
    "=\x03\x02\x02\x02\u048A\u0488\x03\x02\x02\x02\u048B\u048C\x07\x85\x02" +
    "\x02\u048C\u048D\x05\u0144\xA3\x02\u048D\u0491\x07\xA0\x02\x02\u048E\u0490" +
    "\x07\xB9\x02\x02\u048F\u048E\x03\x02\x02\x02\u0490\u0493\x03\x02\x02\x02" +
    "\u0491\u048F\x03\x02\x02\x02\u0491\u0492\x03\x02\x02\x02\u0492\u049D\x03" +
    "\x02\x02\x02\u0493\u0491\x03\x02\x02\x02\u0494\u0498\x05L\'\x02\u0495" +
    "\u0497\x07\xB9\x02\x02\u0496\u0495\x03\x02\x02\x02\u0497\u049A\x03\x02" +
    "\x02\x02\u0498\u0496\x03\x02\x02\x02\u0498\u0499\x03\x02\x02\x02\u0499" +
    "\u049C\x03\x02\x02\x02\u049A\u0498\x03\x02\x02\x02\u049B\u0494\x03\x02" +
    "\x02\x02\u049C\u049F\x03\x02\x02\x02\u049D\u049B\x03\x02\x02\x02\u049D" +
    "\u049E\x03\x02\x02\x02\u049E\u04A1\x03\x02\x02\x02\u049F\u049D\x03\x02" +
    "\x02\x02\u04A0\u04A2\x05B\"\x02\u04A1\u04A0\x03\x02\x02\x02\u04A2\u04A3" +
    "\x03\x02\x02\x02\u04A3\u04A1\x03\x02\x02\x02\u04A3\u04A4\x03\x02\x02\x02" +
    "\u04A4\u04A5\x03\x02\x02\x02\u04A5\u04A7\x07\xAB\x02\x02\u04A6\u04A8\x05" +
    "J&\x02\u04A7\u04A6\x03\x02\x02\x02\u04A7\u04A8\x03\x02\x02\x02\u04A8\u04AC" +
    "\x03\x02\x02\x02\u04A9\u04AB\x07\xB9\x02\x02\u04AA\u04A9\x03\x02\x02\x02" +
    "\u04AB\u04AE\x03\x02\x02\x02\u04AC\u04AA\x03\x02\x02\x02\u04AC\u04AD\x03" +
    "\x02\x02\x02\u04AD?\x03\x02\x02\x02\u04AE\u04AC\x03\x02\x02\x02\u04AF" +
    "\u04B0\x07\x86\x02\x02\u04B0\u04B1\x05\u0144\xA3\x02\u04B1\u04B5\x07\xA0" +
    "\x02\x02\u04B2\u04B4\x07\xB9\x02\x02\u04B3\u04B2\x03\x02\x02\x02\u04B4" +
    "\u04B7\x03\x02\x02\x02\u04B5\u04B3\x03\x02\x02\x02\u04B5\u04B6\x03\x02" +
    "\x02\x02\u04B6\u04C1\x03\x02\x02\x02\u04B7\u04B5\x03\x02\x02\x02\u04B8" +
    "\u04BC\x05L\'\x02\u04B9\u04BB\x07\xB9\x02\x02\u04BA\u04B9\x03\x02\x02" +
    "\x02\u04BB\u04BE\x03\x02\x02\x02\u04BC\u04BA\x03\x02\x02\x02\u04BC\u04BD" +
    "\x03\x02\x02\x02\u04BD\u04C0\x03\x02\x02\x02\u04BE\u04BC\x03\x02\x02\x02" +
    "\u04BF\u04B8\x03\x02\x02\x02\u04C0\u04C3\x03\x02\x02\x02\u04C1\u04BF\x03" +
    "\x02\x02\x02\u04C1\u04C2\x03\x02\x02\x02\u04C2A\x03\x02\x02\x02\u04C3" +
    "\u04C1\x03\x02\x02\x02\u04C4\u04C5\x07\xAB\x02\x02\u04C5\u04C6\x05D#\x02" +
    "\u04C6C\x03\x02\x02\x02\u04C7\u04C9\x07\xB9\x02\x02\u04C8\u04C7\x03\x02" +
    "\x02\x02\u04C9\u04CC\x03\x02\x02\x02\u04CA\u04C8\x03\x02\x02\x02\u04CA" +
    "\u04CB\x03\x02\x02\x02\u04CB\u04CD\x03\x02\x02\x02\u04CC\u04CA\x03\x02" +
    "\x02\x02\u04CD\u04D1\x05F$\x02\u04CE\u04D0\x07\xB9\x02\x02\u04CF\u04CE" +
    "\x03\x02\x02\x02\u04D0\u04D3\x03\x02\x02\x02\u04D1\u04CF\x03\x02\x02\x02" +
    "\u04D1\u04D2\x03\x02\x02\x02\u04D2\u04D5\x03\x02\x02\x02\u04D3\u04D1\x03" +
    "\x02\x02\x02\u04D4\u04CA\x03\x02\x02\x02\u04D5\u04D6\x03\x02\x02\x02\u04D6" +
    "\u04D4\x03\x02\x02\x02\u04D6\u04D7\x03\x02\x02\x02\u04D7E\x03\x02\x02" +
    "\x02\u04D8\u04E0\x05\u01A0\xD1\x02\u04D9\u04E0\x05\u018E\xC8\x02\u04DA" +
    "\u04E0\x05\u01AE\xD8\x02\u04DB\u04E0\x05\u01A2\xD2\x02\u04DC\u04E0\x05" +
    "T+\x02\u04DD\u04E0\x05R*\x02\u04DE\u04E0\x05H%\x02\u04DF\u04D8\x03\x02" +
    "\x02\x02\u04DF\u04D9\x03\x02\x02\x02\u04DF\u04DA\x03\x02\x02\x02\u04DF" +
    "\u04DB\x03\x02\x02\x02\u04DF\u04DC\x03\x02\x02\x02\u04DF\u04DD\x03\x02" +
    "\x02\x02\u04DF\u04DE\x03\x02\x02\x02\u04E0G\x03\x02\x02\x02\u04E1\u04E4" +
    "\x07\u0127\x02\x02\u04E2\u04E4\x05\u01B8\xDD\x02\u04E3\u04E1\x03\x02\x02" +
    "\x02\u04E3\u04E2\x03\x02\x02\x02\u04E4I\x03\x02\x02\x02\u04E5\u04E7\x07" +
    "\xB9\x02\x02\u04E6\u04E5\x03\x02\x02\x02\u04E7\u04EA\x03\x02\x02\x02\u04E8" +
    "\u04E6\x03\x02\x02\x02\u04E8\u04E9\x03\x02\x02\x02\u04E9\u04EB\x03\x02" +
    "\x02\x02\u04EA\u04E8\x03\x02\x02\x02\u04EB\u04ED\x05\u01B8\xDD\x02\u04EC" +
    "\u04E8\x03\x02\x02\x02\u04ED\u04EE\x03\x02\x02\x02\u04EE\u04EC\x03\x02" +
    "\x02\x02\u04EE\u04EF\x03\x02\x02\x02\u04EFK\x03\x02\x02\x02\u04F0\u0511" +
    "\x07\u0126\x02\x02\u04F1\u0511\x07\xBA\x02\x02\u04F2\u0511\x05\u01BA\xDE" +
    "\x02\u04F3\u0511\x05N(\x02\u04F4\u0511\x05\u0198\xCD\x02\u04F5\u0511\x05" +
    "\u019C\xCF\x02\u04F6\u0511\x05\u019A\xCE\x02\u04F7\u0511\x05\u01AE\xD8" +
    "\x02\u04F8\u0511\x05\u01B2\xDA\x02\u04F9\u0511\x05\\/\x02\u04FA\u0511" +
    "\x05\u018E\xC8\x02\u04FB\u0511\x05\u01A4\xD3\x02\u04FC\u0511\x05\u01A0" +
    "\xD1\x02\u04FD\u0511\x05\u01A2\xD2\x02\u04FE\u0511\x05\u01B8\xDD\x02\u04FF" +
    "\u0511\x05\u0194\xCB\x02\u0500\u0511\x05\u01A6\xD4\x02\u0501\u0511\x05" +
    "\u01A8\xD5\x02\u0502\u0511\x05\u01AA\xD6\x02\u0503\u0511\x05\u01AC\xD7" +
    "\x02\u0504\u0511\x05\u0176\xBC\x02\u0505\u0511\x05\u0180\xC1\x02\u0506" +
    "\u0511\x05\u0172\xBA\x02\u0507\u0511\x05\u0166\xB4\x02\u0508\u0511\x05" +
    "\u0168\xB5\x02\u0509\u0511\x05\u016C\xB7\x02\u050A\u0511\x05\u016A\xB6" +
    "\x02\u050B\u0511\x05\u016E\xB8\x02\u050C\u0511\x05\u0192\xCA\x02\u050D" +
    "\u0511\x05\u01B4\xDB\x02\u050E\u0511\x05\u0196\xCC\x02\u050F\u0511\x05" +
    "\u01C2\xE2\x02\u0510\u04F0\x03\x02\x02\x02\u0510\u04F1\x03\x02\x02\x02" +
    "\u0510\u04F2\x03\x02\x02\x02\u0510\u04F3\x03\x02\x02\x02\u0510\u04F4\x03" +
    "\x02\x02\x02\u0510\u04F5\x03\x02\x02\x02\u0510\u04F6\x03\x02\x02\x02\u0510" +
    "\u04F7\x03\x02\x02\x02\u0510\u04F8\x03\x02\x02\x02\u0510\u04F9\x03\x02" +
    "\x02\x02\u0510\u04FA\x03\x02\x02\x02\u0510\u04FB\x03\x02\x02\x02\u0510" +
    "\u04FC\x03\x02\x02\x02\u0510\u04FD\x03\x02\x02\x02\u0510\u04FE\x03\x02" +
    "\x02\x02\u0510\u04FF\x03\x02\x02\x02\u0510\u0500\x03\x02\x02\x02\u0510" +
    "\u0501\x03\x02\x02\x02\u0510\u0502\x03\x02\x02\x02\u0510\u0503\x03\x02" +
    "\x02\x02\u0510\u0504\x03\x02\x02\x02\u0510\u0505\x03\x02\x02\x02\u0510" +
    "\u0506\x03\x02\x02\x02\u0510\u0507\x03\x02\x02\x02\u0510\u0508\x03\x02" +
    "\x02\x02\u0510\u0509\x03\x02\x02\x02\u0510\u050A\x03\x02\x02\x02\u0510" +
    "\u050B\x03\x02\x02\x02\u0510\u050C\x03\x02\x02\x02\u0510\u050D\x03\x02" +
    "\x02\x02\u0510\u050E\x03\x02\x02\x02\u0510\u050F\x03\x02\x02\x02\u0511" +
    "M\x03\x02\x02\x02\u0512\u051A\x05P)\x02\u0513\u0519\x05P)\x02\u0514\u0519" +
    "\x05\u01A0\xD1\x02\u0515\u0519\x05\u01A2\xD2\x02\u0516\u0519\x05\u018E" +
    "\xC8\x02\u0517\u0519\x05\u0194\xCB\x02\u0518\u0513\x03\x02\x02\x02\u0518" +
    "\u0514\x03\x02\x02\x02\u0518\u0515\x03\x02\x02\x02\u0518\u0516\x03\x02" +
    "\x02\x02\u0518\u0517\x03\x02\x02\x02\u0519\u051C\x03\x02\x02\x02\u051A" +
    "\u0518\x03\x02\x02\x02\u051A\u051B\x03\x02\x02\x02\u051BO\x03\x02\x02" +
    "\x02\u051C\u051A\x03\x02\x02\x02\u051D\u0521\x07\x96\x02\x02\u051E\u0522" +
    "\x07\xB7\x02\x02\u051F\u0522\x07\xB8\x02\x02\u0520\u0522\x03\x02\x02\x02" +
    "\u0521\u051E\x03\x02\x02\x02\u0521\u051F\x03\x02\x02\x02\u0521\u0520\x03" +
    "\x02\x02\x02\u0522\u0526\x03\x02\x02\x02\u0523\u0525\x05\u01B8\xDD\x02" +
    "\u0524\u0523\x03\x02\x02\x02\u0525\u0528\x03\x02\x02\x02\u0526\u0524\x03" +
    "\x02\x02\x02\u0526\u0527\x03\x02\x02\x02\u0527\u0529\x03\x02\x02\x02\u0528" +
    "\u0526\x03\x02\x02\x02\u0529\u052A\x05\u01BC\xDF\x02\u052AQ\x03\x02\x02" +
    "\x02\u052B\u052D\x05\u018E\xC8\x02\u052C\u052B\x03\x02\x02\x02\u052C\u052D" +
    "\x03\x02\x02\x02\u052D\u052E\x03\x02\x02\x02\u052E\u0530\x07\x9A\x02\x02" +
    "\u052F\u0531\x05\u01B8\xDD\x02\u0530\u052F\x03\x02\x02\x02\u0531\u0532" +
    "\x03\x02\x02\x02\u0532\u0530\x03\x02\x02\x02\u0532\u0533\x03\x02\x02\x02" +
    "\u0533\u0534\x03\x02\x02\x02\u0534\u0535\x07\xA0\x02\x02\u0535S\x03\x02" +
    "\x02\x02\u0536\u0538\x05\u018E\xC8\x02\u0537\u0536\x03\x02\x02\x02\u0537" +
    "\u0538\x03\x02\x02\x02\u0538\u0539\x03\x02\x02\x02\u0539\u053B\x07\x9B" +
    "\x02\x02\u053A\u053C\x05\u01B8\xDD\x02\u053B\u053A\x03\x02\x02\x02\u053C" +
    "\u053D\x03\x02\x02\x02\u053D\u053B\x03\x02\x02\x02\u053D\u053E\x03\x02" +
    "\x02\x02\u053E\u053F\x03\x02\x02\x02\u053F\u0540\x07\xA0\x02\x02\u0540" +
    "U\x03\x02\x02\x02\u0541\u0543\x05\u018E\xC8\x02\u0542\u0541\x03\x02\x02" +
    "\x02\u0542\u0543\x03\x02\x02\x02\u0543\u0544\x03\x02\x02\x02\u0544\u0546" +
    "\x07\x9D\x02\x02\u0545\u0547\x05\u01B8\xDD\x02\u0546\u0545\x03\x02\x02" +
    "\x02\u0547\u0548\x03\x02\x02\x02\u0548\u0546\x03\x02\x02\x02\u0548\u0549" +
    "\x03\x02\x02\x02\u0549\u054A\x03\x02\x02\x02\u054A\u054B\x07\xA0\x02\x02" +
    "\u054BW\x03\x02\x02\x02\u054C\u054D\x07\x17\x02\x02\u054D\u054E\x05\u0144" +
    "\xA3\x02\u054E\u054F\x07\xA0\x02\x02\u054F\u0559\x07\xB9\x02\x02\u0550" +
    "\u0554\x05L\'\x02\u0551\u0553\x07\xB9\x02\x02\u0552\u0551\x03\x02\x02" +
    "\x02\u0553\u0556\x03\x02\x02\x02\u0554\u0552\x03\x02\x02\x02\u0554\u0555" +
    "\x03\x02\x02\x02\u0555\u0558\x03\x02\x02\x02\u0556\u0554\x03\x02\x02\x02" +
    "\u0557\u0550\x03\x02\x02\x02\u0558\u055B\x03\x02\x02\x02\u0559\u0557\x03" +
    "\x02\x02\x02\u0559\u055A\x03\x02\x02\x02\u055A\u0565\x03\x02\x02\x02\u055B" +
    "\u0559\x03\x02\x02\x02\u055C\u055E\x07\xB9\x02\x02\u055D\u055C\x03\x02" +
    "\x02\x02\u055E\u0561\x03\x02\x02\x02\u055F\u055D\x03\x02\x02\x02\u055F" +
    "\u0560\x03\x02\x02\x02\u0560\u0562\x03\x02\x02\x02\u0561\u055F\x03\x02" +
    "\x02\x02\u0562\u0564\x05Z.\x02\u0563\u055F\x03\x02\x02\x02\u0564\u0567" +
    "\x03\x02\x02\x02\u0565\u0563\x03\x02\x02\x02\u0565\u0566\x03\x02\x02\x02" +
    "\u0566\u056B\x03\x02\x02\x02\u0567\u0565\x03\x02\x02\x02\u0568\u056A\x07" +
    "\xB9\x02\x02\u0569\u0568\x03\x02\x02\x02\u056A\u056D\x03\x02\x02\x02\u056B" +
    "\u0569\x03\x02\x02\x02\u056B\u056C\x03\x02\x02\x02\u056C\u057B\x03\x02" +
    "\x02\x02\u056D\u056B\x03\x02\x02\x02\u056E\u0578\x05^0\x02\u056F\u0571" +
    "\x07\xB9\x02\x02\u0570\u056F\x03\x02\x02\x02\u0571\u0574\x03\x02\x02\x02" +
    "\u0572\u0570\x03\x02\x02\x02\u0572\u0573\x03\x02\x02\x02\u0573\u0575\x03" +
    "\x02\x02\x02\u0574\u0572\x03\x02\x02\x02\u0575\u0577\x05^0\x02\u0576\u0572" +
    "\x03\x02\x02\x02\u0577\u057A\x03\x02\x02\x02\u0578\u0576\x03\x02\x02\x02" +
    "\u0578\u0579\x03\x02\x02\x02\u0579\u057C\x03\x02";
bitmarkParser._serializedATNSegment4 = "\x02\x02\u057A\u0578\x03\x02\x02\x02\u057B\u056E\x03\x02\x02\x02\u057B" +
    "\u057C\x03\x02\x02\x02\u057CY\x03\x02\x02\x02\u057D\u0585\x07\xC7\x02" +
    "\x02\u057E\u0580\x07\xB9\x02\x02\u057F\u057E\x03\x02\x02\x02\u057F\u0580" +
    "\x03\x02\x02\x02\u0580\u0581\x03\x02\x02\x02\u0581\u0583\x05\u01B6\xDC" +
    "\x02\u0582\u0584\x07\xB9\x02\x02\u0583\u0582\x03\x02\x02\x02\u0583\u0584" +
    "\x03\x02\x02\x02\u0584\u0586\x03\x02\x02\x02\u0585\u057F\x03\x02\x02\x02" +
    "\u0585\u0586\x03\x02\x02\x02\u0586\u0587\x03\x02\x02\x02\u0587\u0588\x07" +
    "\xA0\x02\x02\u0588[\x03\x02\x02\x02\u0589\u058A\t\x05\x02\x02\u058A]\x03" +
    "\x02\x02\x02\u058B\u058C\x05L\'\x02\u058C_\x03\x02\x02\x02\u058D\u058E" +
    "\x07\x19\x02\x02\u058E\u058F\x05\u0144\xA3\x02\u058F\u0590\x07\xA0\x02" +
    "\x02\u0590\u059A\x07\xB9\x02\x02\u0591\u0595\x05L\'\x02\u0592\u0594\x07" +
    "\xB9\x02\x02\u0593\u0592\x03\x02\x02\x02\u0594\u0597\x03\x02\x02\x02\u0595" +
    "\u0593\x03\x02\x02\x02\u0595\u0596\x03\x02\x02\x02\u0596\u0599\x03\x02" +
    "\x02\x02\u0597\u0595\x03\x02\x02\x02\u0598\u0591\x03\x02\x02\x02\u0599" +
    "\u059C\x03\x02\x02\x02\u059A\u0598\x03\x02\x02\x02\u059A\u059B\x03\x02" +
    "\x02\x02\u059B\u05A0\x03\x02\x02\x02\u059C\u059A\x03\x02\x02\x02\u059D" +
    "\u059F\x05b2\x02\u059E\u059D\x03\x02\x02\x02\u059F\u05A2\x03\x02\x02\x02" +
    "\u05A0\u059E\x03\x02\x02\x02\u05A0\u05A1\x03\x02\x02\x02\u05A1\u05A6\x03" +
    "\x02\x02\x02\u05A2\u05A0\x03\x02\x02\x02\u05A3\u05A5\x07\xB9\x02\x02\u05A4" +
    "\u05A3\x03\x02\x02\x02\u05A5\u05A8\x03\x02\x02\x02\u05A6\u05A4\x03\x02" +
    "\x02\x02\u05A6\u05A7\x03\x02\x02\x02\u05A7\u05B6\x03\x02\x02\x02\u05A8" +
    "\u05A6\x03\x02\x02\x02\u05A9\u05B3\x05^0\x02\u05AA\u05AC\x07\xB9\x02\x02" +
    "\u05AB\u05AA\x03\x02\x02\x02\u05AC\u05AF\x03\x02\x02\x02\u05AD\u05AB\x03" +
    "\x02\x02\x02\u05AD\u05AE\x03\x02\x02\x02\u05AE\u05B0\x03\x02\x02\x02\u05AF" +
    "\u05AD\x03\x02\x02\x02\u05B0\u05B2\x05^0\x02\u05B1\u05AD\x03\x02\x02\x02" +
    "\u05B2\u05B5\x03\x02\x02\x02\u05B3\u05B1\x03\x02\x02\x02\u05B3\u05B4\x03" +
    "\x02\x02\x02\u05B4\u05B7\x03\x02\x02\x02\u05B5\u05B3\x03\x02\x02\x02\u05B6" +
    "\u05A9\x03\x02\x02\x02\u05B6\u05B7\x03\x02\x02\x02\u05B7a\x03\x02\x02" +
    "\x02\u05B8\u05BC\x07\x9B\x02\x02\u05B9\u05BB\v\x02\x02\x02\u05BA\u05B9" +
    "\x03\x02\x02\x02\u05BB\u05BE\x03\x02\x02\x02\u05BC\u05BD\x03\x02\x02\x02" +
    "\u05BC\u05BA\x03\x02\x02\x02\u05BD\u05BF\x03\x02\x02\x02\u05BE\u05BC\x03" +
    "\x02\x02\x02\u05BF\u05C0\x07\xA0\x02\x02\u05C0\u05CB\x07\xB9\x02\x02\u05C1" +
    "\u05C5\x07\x9A\x02\x02\u05C2\u05C4\v\x02\x02\x02\u05C3\u05C2\x03\x02\x02" +
    "\x02\u05C4\u05C7\x03\x02\x02\x02\u05C5\u05C6\x03\x02\x02\x02\u05C5\u05C3" +
    "\x03\x02\x02\x02\u05C6\u05C8\x03\x02\x02\x02\u05C7\u05C5\x03\x02\x02\x02" +
    "\u05C8\u05C9\x07\xA0\x02\x02\u05C9\u05CB\x07\xB9\x02\x02\u05CA\u05B8\x03" +
    "\x02\x02\x02\u05CA\u05C1\x03\x02\x02\x02\u05CBc\x03\x02\x02\x02\u05CC" +
    "\u05CD\x07\x1A\x02\x02\u05CD\u05CE\x05\u0144\xA3\x02\u05CE\u05CF\x07\xA0" +
    "\x02\x02\u05CF\u05DC\x07\xB9\x02\x02\u05D0\u05D3\x05L\'\x02\u05D1\u05D3" +
    "\x05f4\x02\u05D2\u05D0\x03\x02\x02\x02\u05D2\u05D1\x03\x02\x02\x02\u05D3" +
    "\u05D7\x03\x02\x02\x02\u05D4\u05D6\x07\xB9\x02\x02\u05D5\u05D4\x03\x02" +
    "\x02\x02\u05D6\u05D9\x03\x02\x02\x02\u05D7\u05D5\x03\x02\x02\x02\u05D7" +
    "\u05D8\x03\x02\x02\x02\u05D8\u05DB\x03\x02\x02\x02\u05D9\u05D7\x03\x02" +
    "\x02\x02\u05DA\u05D2\x03\x02\x02\x02\u05DB\u05DE\x03\x02\x02\x02\u05DC" +
    "\u05DA\x03\x02\x02\x02\u05DC\u05DD\x03\x02\x02\x02\u05DD\u05E2\x03\x02" +
    "\x02\x02\u05DE\u05DC\x03\x02\x02\x02\u05DF\u05E1\x07\xB9\x02\x02\u05E0" +
    "\u05DF\x03\x02\x02\x02\u05E1\u05E4\x03\x02\x02\x02\u05E2\u05E0\x03\x02" +
    "\x02\x02\u05E2\u05E3\x03\x02\x02\x02\u05E3\u05F2\x03\x02\x02\x02\u05E4" +
    "\u05E2\x03\x02\x02\x02\u05E5\u05EF\x05^0\x02\u05E6\u05E8\x07\xB9\x02\x02" +
    "\u05E7\u05E6\x03\x02\x02\x02\u05E8\u05EB\x03\x02\x02\x02\u05E9\u05E7\x03" +
    "\x02\x02\x02\u05E9\u05EA\x03\x02\x02\x02\u05EA\u05EC\x03\x02\x02\x02\u05EB" +
    "\u05E9\x03\x02\x02\x02\u05EC\u05EE\x05^0\x02\u05ED\u05E9\x03\x02\x02\x02" +
    "\u05EE\u05F1\x03\x02\x02\x02\u05EF\u05ED\x03\x02\x02\x02\u05EF\u05F0\x03" +
    "\x02\x02\x02\u05F0\u05F3\x03\x02\x02\x02\u05F1\u05EF\x03\x02\x02\x02\u05F2" +
    "\u05E5\x03\x02\x02\x02\u05F2\u05F3\x03\x02\x02\x02\u05F3e\x03\x02\x02" +
    "\x02\u05F4\u05F5\x07\x9C\x02\x02\u05F5\u05F6\x05\u01B8\xDD\x02\u05F6\u05F8" +
    "\x07\xA0\x02\x02\u05F7\u05F9\x05h5\x02\u05F8\u05F7\x03\x02\x02\x02\u05F8" +
    "\u05F9\x03\x02\x02\x02\u05F9\u05FF\x03\x02\x02\x02\u05FA\u05FE\x05\u01A2" +
    "\xD2\x02\u05FB\u05FE\x05\u018E\xC8\x02\u05FC\u05FE\x05\u01A0\xD1\x02\u05FD" +
    "\u05FA\x03\x02\x02\x02\u05FD\u05FB\x03\x02\x02\x02\u05FD\u05FC\x03\x02" +
    "\x02\x02\u05FE\u0601\x03\x02\x02\x02\u05FF\u05FD\x03\x02\x02\x02\u05FF" +
    "\u0600\x03\x02\x02\x02\u0600g\x03\x02\x02\x02\u0601\u05FF\x03\x02\x02" +
    "\x02\u0602\u0606\x07\xD2\x02\x02\u0603\u0605\x07\x04\x02\x02\u0604\u0603" +
    "\x03\x02\x02\x02\u0605\u0608\x03\x02\x02\x02\u0606\u0604\x03\x02\x02\x02" +
    "\u0606\u0607\x03\x02\x02\x02\u0607\u0609\x03\x02\x02\x02\u0608\u0606\x03" +
    "\x02\x02\x02\u0609\u060D\x07\xB8\x02\x02\u060A\u060C\x07\x04\x02\x02\u060B" +
    "\u060A\x03\x02\x02\x02\u060C\u060F\x03\x02\x02\x02\u060D\u060B\x03\x02" +
    "\x02\x02\u060D\u060E\x03\x02\x02\x02\u060E\u0610\x03\x02\x02\x02\u060F" +
    "\u060D\x03\x02\x02\x02\u0610\u0611\x07\xA0\x02\x02\u0611i\x03\x02\x02" +
    "\x02\u0612\u0613\x07\x12\x02\x02\u0613\u0614\x05\u0144\xA3\x02\u0614\u0615" +
    "\x07\xA0\x02\x02\u0615\u061F\x07\xB9\x02\x02\u0616\u061A\x05L\'\x02\u0617" +
    "\u0619\x07\xB9\x02\x02\u0618\u0617\x03\x02\x02\x02\u0619\u061C\x03\x02" +
    "\x02\x02\u061A\u0618\x03\x02\x02\x02\u061A\u061B\x03\x02\x02\x02\u061B" +
    "\u061E\x03\x02\x02\x02\u061C\u061A\x03\x02\x02\x02\u061D\u0616\x03\x02" +
    "\x02\x02\u061E\u0621\x03\x02\x02\x02\u061F\u061D\x03\x02\x02\x02\u061F" +
    "\u0620\x03\x02\x02\x02\u0620\u0625\x03\x02\x02\x02\u0621\u061F\x03\x02" +
    "\x02\x02\u0622\u0624\x07\xB9\x02\x02\u0623\u0622\x03\x02\x02\x02\u0624" +
    "\u0627\x03\x02\x02\x02\u0625\u0623\x03\x02\x02\x02\u0625\u0626\x03\x02" +
    "\x02\x02\u0626\u0635\x03\x02\x02\x02\u0627\u0625\x03\x02\x02\x02\u0628" +
    "\u0632\x05^0\x02\u0629\u062B\x07\xB9\x02\x02\u062A\u0629\x03\x02\x02\x02" +
    "\u062B\u062E\x03\x02\x02\x02\u062C\u062A\x03\x02\x02\x02\u062C\u062D\x03" +
    "\x02\x02\x02\u062D\u062F\x03\x02\x02\x02\u062E\u062C\x03\x02\x02\x02\u062F" +
    "\u0631\x05^0\x02\u0630\u062C\x03\x02\x02\x02\u0631\u0634\x03\x02\x02\x02" +
    "\u0632\u0630\x03\x02\x02\x02\u0632\u0633\x03\x02\x02\x02\u0633\u0636\x03" +
    "\x02\x02\x02\u0634\u0632\x03\x02\x02\x02\u0635\u0628\x03\x02\x02\x02\u0635" +
    "\u0636\x03\x02\x02\x02\u0636k\x03\x02\x02\x02\u0637\u0638\x07\x1B\x02" +
    "\x02\u0638\u0639\x05\u0144\xA3\x02\u0639\u063A\x07\xA0\x02\x02\u063A\u0644" +
    "\x07\xB9\x02\x02\u063B\u063F\x05L\'\x02\u063C\u063E\x07\xB9\x02\x02\u063D" +
    "\u063C\x03\x02\x02\x02\u063E\u0641\x03\x02\x02\x02\u063F\u063D\x03\x02" +
    "\x02\x02\u063F\u0640\x03\x02\x02\x02\u0640\u0643\x03\x02\x02\x02\u0641" +
    "\u063F\x03\x02\x02\x02\u0642\u063B\x03\x02\x02\x02\u0643\u0646\x03\x02" +
    "\x02\x02\u0644\u0642\x03\x02\x02\x02\u0644\u0645\x03\x02\x02\x02\u0645" +
    "\u064A\x03\x02\x02\x02\u0646\u0644\x03\x02\x02\x02\u0647\u0649\x07\xB9" +
    "\x02\x02\u0648\u0647\x03\x02\x02\x02\u0649\u064C\x03\x02\x02\x02\u064A" +
    "\u0648\x03\x02\x02\x02\u064A\u064B\x03\x02\x02\x02\u064B\u065A\x03\x02" +
    "\x02\x02\u064C\u064A\x03\x02\x02\x02\u064D\u0657\x05^0\x02\u064E\u0650" +
    "\x07\xB9\x02\x02\u064F\u064E\x03\x02\x02\x02\u0650\u0653\x03\x02\x02\x02" +
    "\u0651\u064F\x03\x02\x02\x02\u0651\u0652\x03\x02\x02\x02\u0652\u0654\x03" +
    "\x02\x02\x02\u0653\u0651\x03\x02\x02\x02\u0654\u0656\x05^0\x02\u0655\u0651" +
    "\x03\x02\x02\x02\u0656\u0659\x03\x02\x02\x02\u0657\u0655\x03\x02\x02\x02" +
    "\u0657\u0658\x03\x02\x02\x02\u0658\u065B\x03\x02\x02\x02\u0659\u0657\x03" +
    "\x02\x02\x02\u065A\u064D\x03\x02\x02\x02\u065A\u065B\x03\x02\x02\x02\u065B" +
    "m\x03\x02\x02\x02\u065C\u065D\x07\x1C\x02\x02\u065D\u065E\x05\u0144\xA3" +
    "\x02\u065E\u065F\x07\xA0\x02\x02\u065F\u0669\x07\xB9\x02\x02\u0660\u0664" +
    "\x05L\'\x02\u0661\u0663\x07\xB9\x02\x02\u0662\u0661\x03\x02\x02\x02\u0663" +
    "\u0666\x03\x02\x02\x02\u0664\u0662\x03\x02\x02\x02\u0664\u0665\x03\x02" +
    "\x02\x02\u0665\u0668\x03\x02\x02\x02\u0666\u0664\x03\x02\x02\x02\u0667" +
    "\u0660\x03\x02\x02\x02\u0668\u066B\x03\x02\x02\x02\u0669\u0667\x03\x02" +
    "\x02\x02\u0669\u066A\x03\x02\x02\x02\u066A\u066F\x03\x02\x02\x02\u066B" +
    "\u0669\x03\x02\x02\x02\u066C\u066E\x07\xB9\x02\x02\u066D\u066C\x03\x02" +
    "\x02\x02\u066E\u0671\x03\x02\x02\x02\u066F\u066D\x03\x02\x02\x02\u066F" +
    "\u0670\x03\x02\x02\x02\u0670\u067F\x03\x02\x02\x02\u0671\u066F\x03\x02" +
    "\x02\x02\u0672\u067C\x05^0\x02\u0673\u0675\x07\xB9\x02\x02\u0674\u0673" +
    "\x03\x02\x02\x02\u0675\u0678\x03\x02\x02\x02\u0676\u0674\x03\x02\x02\x02" +
    "\u0676\u0677\x03\x02\x02\x02\u0677\u0679\x03\x02\x02\x02\u0678\u0676\x03" +
    "\x02\x02\x02\u0679\u067B\x05^0\x02\u067A\u0676\x03\x02\x02\x02\u067B\u067E" +
    "\x03\x02\x02\x02\u067C\u067A\x03\x02\x02\x02\u067C\u067D\x03\x02\x02\x02" +
    "\u067D\u0680\x03\x02\x02\x02\u067E\u067C\x03\x02\x02\x02\u067F\u0672\x03" +
    "\x02\x02\x02\u067F\u0680\x03\x02\x02\x02\u0680o\x03\x02\x02\x02\u0681" +
    "\u0682\x07\x1D\x02\x02\u0682\u0683\x05\u0144\xA3\x02\u0683\u0687\x07\xA0" +
    "\x02\x02\u0684\u0686\x07\xB9\x02\x02\u0685\u0684\x03\x02\x02\x02\u0686" +
    "\u0689\x03\x02\x02\x02\u0687\u0685\x03\x02\x02\x02\u0687\u0688\x03\x02" +
    "\x02\x02\u0688\u0693\x03\x02\x02\x02\u0689\u0687\x03\x02\x02\x02\u068A" +
    "\u068E\x05L\'\x02\u068B\u068D\x07\xB9\x02\x02\u068C\u068B\x03\x02\x02" +
    "\x02\u068D\u0690\x03\x02\x02\x02\u068E\u068C\x03\x02\x02\x02\u068E\u068F" +
    "\x03\x02\x02\x02\u068F\u0692\x03\x02\x02\x02\u0690\u068E\x03\x02\x02\x02" +
    "\u0691\u068A\x03\x02\x02\x02\u0692\u0695\x03\x02\x02\x02\u0693\u0691\x03" +
    "\x02\x02\x02\u0693\u0694\x03\x02\x02\x02\u0694\u0697\x03\x02\x02\x02\u0695" +
    "\u0693\x03\x02\x02\x02\u0696\u0698\x05\u01B6\xDC\x02\u0697\u0696\x03\x02" +
    "\x02\x02\u0697\u0698\x03\x02\x02\x02\u0698\u069C\x03\x02\x02\x02\u0699" +
    "\u069B\x07\xB9\x02\x02\u069A\u0699\x03\x02\x02\x02\u069B\u069E\x03\x02" +
    "\x02\x02\u069C\u069A\x03\x02\x02\x02\u069C\u069D\x03\x02\x02\x02\u069D" +
    "\u06AC\x03\x02\x02\x02\u069E\u069C\x03\x02\x02\x02\u069F\u06A9\x05^0\x02" +
    "\u06A0\u06A2\x07\xB9\x02\x02\u06A1\u06A0\x03\x02\x02\x02\u06A2\u06A5\x03" +
    "\x02\x02\x02\u06A3\u06A1\x03\x02\x02\x02\u06A3\u06A4\x03\x02\x02\x02\u06A4" +
    "\u06A6\x03\x02\x02\x02\u06A5\u06A3\x03\x02\x02\x02\u06A6\u06A8\x05^0\x02" +
    "\u06A7\u06A3\x03\x02\x02\x02\u06A8\u06AB\x03\x02\x02\x02\u06A9\u06A7\x03" +
    "\x02\x02\x02\u06A9\u06AA\x03\x02\x02\x02\u06AA\u06AD\x03\x02\x02\x02\u06AB" +
    "\u06A9\x03\x02\x02\x02\u06AC\u069F\x03\x02\x02\x02\u06AC\u06AD\x03\x02" +
    "\x02\x02\u06ADq\x03\x02\x02\x02\u06AE\u06AF\x07\x1E\x02\x02\u06AF\u06B0" +
    "\x05\u0144\xA3\x02\u06B0\u06B2\x07\xA0\x02\x02\u06B1\u06B3\x07\xB9\x02" +
    "\x02\u06B2\u06B1\x03\x02\x02\x02\u06B3\u06B4\x03\x02\x02\x02\u06B4\u06B2" +
    "\x03\x02\x02\x02\u06B4\u06B5\x03\x02\x02\x02\u06B5\u06BF\x03\x02\x02\x02" +
    "\u06B6\u06BA\x05L\'\x02\u06B7\u06B9\x07\xB9\x02\x02\u06B8\u06B7\x03\x02" +
    "\x02\x02\u06B9\u06BC\x03\x02\x02\x02\u06BA\u06B8\x03\x02\x02\x02\u06BA" +
    "\u06BB\x03\x02\x02\x02\u06BB\u06BE\x03\x02\x02\x02\u06BC\u06BA\x03\x02" +
    "\x02\x02\u06BD\u06B6\x03\x02\x02\x02\u06BE\u06C1\x03\x02\x02\x02\u06BF" +
    "\u06BD\x03\x02\x02\x02\u06BF\u06C0\x03\x02\x02\x02\u06C0\u06C3\x03\x02" +
    "\x02\x02\u06C1\u06BF\x03\x02\x02\x02\u06C2\u06C4\x05\u01B6\xDC\x02\u06C3" +
    "\u06C2\x03\x02\x02\x02\u06C3\u06C4\x03\x02\x02\x02\u06C4\u06C8\x03\x02" +
    "\x02\x02\u06C5\u06C7\x07\xB9\x02\x02\u06C6\u06C5\x03\x02\x02\x02\u06C7" +
    "\u06CA\x03\x02\x02\x02\u06C8\u06C6\x03\x02\x02\x02\u06C8\u06C9\x03\x02" +
    "\x02\x02\u06C9\u06D8\x03\x02\x02\x02\u06CA\u06C8\x03\x02\x02\x02\u06CB" +
    "\u06D5\x05^0\x02\u06CC\u06CE\x07\xB9\x02\x02\u06CD\u06CC\x03\x02\x02\x02" +
    "\u06CE\u06D1\x03\x02\x02\x02\u06CF\u06CD\x03\x02\x02\x02\u06CF\u06D0\x03" +
    "\x02\x02\x02\u06D0\u06D2\x03\x02\x02\x02\u06D1\u06CF\x03\x02\x02\x02\u06D2" +
    "\u06D4\x05^0\x02\u06D3\u06CF\x03\x02\x02\x02\u06D4\u06D7\x03\x02\x02\x02" +
    "\u06D5\u06D3\x03\x02\x02\x02\u06D5\u06D6\x03\x02\x02\x02\u06D6\u06D9\x03" +
    "\x02\x02\x02\u06D7\u06D5\x03\x02\x02\x02\u06D8\u06CB\x03\x02\x02\x02\u06D8" +
    "\u06D9\x03\x02\x02\x02\u06D9s\x03\x02\x02\x02\u06DA\u06DB\x07\x15\x02" +
    "\x02\u06DB\u06DC\x05\u0144\xA3\x02\u06DC\u06E0\x07\xA0\x02\x02\u06DD\u06DF" +
    "\x07\xB9\x02\x02\u06DE\u06DD\x03\x02\x02\x02\u06DF\u06E2\x03\x02\x02\x02" +
    "\u06E0\u06DE\x03\x02\x02\x02\u06E0\u06E1\x03\x02\x02\x02\u06E1\u06EA\x03" +
    "\x02\x02\x02\u06E2\u06E0\x03\x02\x02\x02\u06E3\u06E7\x05L\'\x02\u06E4" +
    "\u06E6\x07\xB9\x02\x02\u06E5\u06E4\x03\x02\x02\x02\u06E6\u06E9\x03\x02" +
    "\x02\x02\u06E7\u06E5\x03\x02\x02\x02\u06E7\u06E8\x03\x02\x02\x02\u06E8" +
    "\u06EB\x03\x02\x02\x02\u06E9\u06E7\x03\x02\x02\x02\u06EA\u06E3\x03\x02" +
    "\x02\x02\u06EB\u06EC\x03\x02\x02\x02\u06EC\u06EA\x03\x02\x02\x02\u06EC" +
    "\u06ED\x03\x02\x02\x02\u06EDu\x03\x02\x02\x02\u06EE\u06EF\x07\x0F\x02" +
    "\x02\u06EF\u06F0\x05\u0144\xA3\x02\u06F0\u06F4\x07\xA0\x02\x02\u06F1\u06F3" +
    "\x07\xB9\x02\x02\u06F2\u06F1\x03\x02\x02\x02\u06F3\u06F6\x03\x02\x02\x02" +
    "\u06F4\u06F2\x03\x02\x02\x02\u06F4\u06F5\x03\x02\x02\x02\u06F5\u06FE\x03" +
    "\x02\x02\x02\u06F6\u06F4\x03\x02\x02\x02\u06F7\u06FB\x05L\'\x02\u06F8" +
    "\u06FA\x07\xB9\x02\x02\u06F9\u06F8\x03\x02\x02\x02\u06FA\u06FD\x03\x02" +
    "\x02\x02\u06FB\u06F9\x03\x02\x02\x02\u06FB\u06FC\x03\x02\x02\x02\u06FC" +
    "\u06FF\x03\x02\x02\x02\u06FD\u06FB\x03\x02\x02\x02\u06FE\u06F7\x03\x02" +
    "\x02\x02\u06FF\u0700\x03\x02\x02\x02\u0700\u06FE\x03\x02\x02\x02\u0700" +
    "\u0701\x03\x02\x02\x02\u0701w\x03\x02\x02\x02\u0702\u0703\x07\x10\x02" +
    "\x02\u0703\u0704\x05\u0144\xA3\x02\u0704\u0708\x07\xA0\x02\x02\u0705\u0707" +
    "\x07\xB9\x02\x02\u0706\u0705\x03\x02\x02\x02\u0707\u070A\x03\x02\x02\x02" +
    "\u0708\u0706\x03\x02\x02\x02\u0708\u0709\x03\x02\x02\x02\u0709\u0712\x03" +
    "\x02\x02\x02\u070A\u0708\x03\x02\x02\x02\u070B\u070F\x05L\'\x02\u070C" +
    "\u070E\x07\xB9\x02\x02\u070D\u070C\x03\x02\x02\x02\u070E\u0711\x03\x02" +
    "\x02\x02\u070F\u070D\x03\x02\x02\x02\u070F\u0710\x03\x02\x02\x02\u0710" +
    "\u0713\x03\x02\x02\x02\u0711\u070F\x03\x02\x02\x02\u0712\u070B\x03\x02" +
    "\x02\x02\u0713\u0714\x03\x02\x02\x02\u0714\u0712\x03\x02\x02\x02\u0714" +
    "\u0715\x03\x02\x02\x02\u0715y\x03\x02\x02\x02\u0716\u0717\x07\x11\x02" +
    "\x02\u0717\u0718\x05\u0144\xA3\x02\u0718\u071C\x07\xA0\x02\x02\u0719\u071B" +
    "\x07\xB9\x02\x02\u071A\u0719\x03\x02\x02\x02\u071B\u071E\x03\x02\x02\x02" +
    "\u071C\u071A\x03\x02\x02\x02\u071C\u071D\x03\x02\x02\x02\u071D\u0726\x03" +
    "\x02\x02\x02\u071E\u071C\x03\x02\x02\x02\u071F\u0723\x05L\'\x02\u0720" +
    "\u0722\x07\xB9\x02\x02\u0721\u0720\x03\x02\x02\x02\u0722\u0725\x03\x02" +
    "\x02\x02\u0723\u0721\x03\x02\x02\x02\u0723\u0724\x03\x02\x02\x02\u0724" +
    "\u0727\x03\x02\x02\x02\u0725\u0723\x03\x02\x02\x02\u0726\u071F\x03\x02" +
    "\x02\x02\u0727\u0728\x03\x02\x02\x02\u0728\u0726\x03\x02\x02\x02\u0728" +
    "\u0729\x03\x02\x02\x02\u0729{\x03\x02\x02\x02\u072A\u072B\x073\x02\x02" +
    "\u072B\u072C\x05\u0144\xA3\x02\u072C\u0730\x07\xA0\x02\x02\u072D\u072F" +
    "\x07\xB9\x02\x02\u072E\u072D\x03\x02\x02\x02\u072F\u0732\x03\x02\x02\x02" +
    "\u0730\u072E\x03\x02\x02\x02\u0730\u0731\x03\x02\x02\x02\u0731\u073A\x03" +
    "\x02\x02\x02\u0732\u0730\x03\x02\x02\x02\u0733\u0737\x05L\'\x02\u0734" +
    "\u0736\x07\xB9\x02\x02\u0735\u0734\x03\x02\x02\x02\u0736\u0739\x03\x02" +
    "\x02\x02\u0737\u0735\x03\x02\x02\x02\u0737\u0738\x03\x02\x02\x02\u0738" +
    "\u073B\x03\x02\x02\x02\u0739\u0737\x03\x02\x02\x02\u073A\u0733\x03\x02" +
    "\x02\x02\u073B\u073C\x03\x02\x02\x02\u073C\u073A\x03\x02\x02\x02\u073C" +
    "\u073D\x03\x02\x02\x02\u073D}\x03\x02\x02\x02\u073E\u073F\x074\x02\x02" +
    "\u073F\u0740\x05\u0144\xA3\x02\u0740\u0744\x07\xA0\x02\x02\u0741\u0743" +
    "\x07\xB9\x02\x02\u0742\u0741\x03\x02\x02\x02\u0743\u0746\x03\x02\x02\x02" +
    "\u0744\u0742\x03\x02\x02\x02\u0744\u0745\x03\x02\x02\x02\u0745\u074E\x03" +
    "\x02\x02\x02\u0746\u0744\x03\x02\x02\x02\u0747\u074B\x05L\'\x02\u0748" +
    "\u074A\x07\xB9\x02\x02\u0749\u0748\x03\x02\x02\x02\u074A\u074D\x03\x02" +
    "\x02\x02\u074B\u0749\x03\x02\x02\x02\u074B\u074C\x03\x02\x02\x02\u074C" +
    "\u074F\x03\x02\x02\x02\u074D\u074B\x03\x02\x02\x02\u074E\u0747\x03\x02" +
    "\x02\x02\u074F\u0750\x03\x02\x02\x02\u0750\u074E\x03\x02\x02\x02\u0750" +
    "\u0751\x03\x02\x02\x02\u0751\x7F\x03\x02\x02\x02\u0752\u0753\x075\x02" +
    "\x02\u0753\u0754\x05\u0144\xA3\x02\u0754\u0758\x07\xA0\x02\x02\u0755\u0757" +
    "\x07\xB9\x02\x02\u0756\u0755\x03\x02\x02\x02\u0757\u075A\x03\x02\x02\x02" +
    "\u0758\u0756\x03\x02\x02\x02\u0758\u0759\x03\x02\x02\x02\u0759\u0762\x03" +
    "\x02\x02\x02\u075A\u0758\x03\x02\x02\x02\u075B\u075F\x05L\'\x02\u075C" +
    "\u075E\x07\xB9\x02\x02\u075D\u075C\x03\x02\x02\x02\u075E\u0761\x03\x02" +
    "\x02\x02\u075F\u075D\x03\x02\x02\x02\u075F\u0760\x03\x02\x02\x02\u0760" +
    "\u0763\x03\x02\x02\x02\u0761\u075F\x03\x02\x02\x02\u0762\u075B\x03\x02" +
    "\x02\x02\u0763\u0764\x03\x02\x02\x02\u0764\u0762\x03\x02\x02\x02\u0764" +
    "\u0765\x03\x02\x02\x02\u0765\x81\x03\x02\x02\x02\u0766\u0767\x07\x16\x02" +
    "\x02\u0767\u0768\x05\u0144\xA3\x02\u0768\u076C\x07\xA0\x02\x02\u0769\u076B" +
    "\x07\xB9\x02\x02\u076A\u0769\x03\x02\x02\x02\u076B\u076E\x03\x02\x02\x02" +
    "\u076C\u076A\x03\x02\x02\x02\u076C\u076D\x03\x02\x02\x02\u076D\u0776\x03" +
    "\x02\x02\x02\u076E\u076C\x03\x02\x02\x02\u076F\u0773\x05L\'\x02\u0770" +
    "\u0772\x07\xB9\x02\x02\u0771\u0770\x03\x02\x02\x02\u0772\u0775\x03\x02" +
    "\x02\x02\u0773\u0771\x03\x02\x02\x02\u0773\u0774\x03\x02\x02\x02\u0774" +
    "\u0777\x03\x02\x02\x02\u0775\u0773\x03\x02\x02\x02\u0776\u076F\x03\x02" +
    "\x02\x02\u0777\u0778\x03\x02\x02\x02\u0778\u0776\x03\x02\x02\x02\u0778" +
    "\u0779\x03\x02\x02\x02\u0779\x83\x03\x02\x02\x02\u077A\u077B\x07&\x02" +
    "\x02\u077B\u077C\x05\u0144\xA3\x02\u077C\u0780\x07\xA0\x02\x02\u077D\u077F" +
    "\x07\xB9\x02\x02\u077E\u077D\x03\x02\x02\x02\u077F\u0782\x03\x02\x02\x02" +
    "\u0780\u077E\x03\x02\x02\x02\u0780\u0781\x03\x02\x02\x02\u0781\u078A\x03" +
    "\x02\x02\x02\u0782\u0780\x03\x02\x02\x02\u0783\u0787\x05L\'\x02\u0784" +
    "\u0786\x07\xB9\x02\x02\u0785\u0784\x03\x02\x02\x02\u0786\u0789\x03\x02" +
    "\x02\x02\u0787\u0785\x03\x02\x02\x02\u0787\u0788\x03\x02\x02\x02\u0788" +
    "\u078B\x03\x02\x02\x02\u0789\u0787\x03\x02\x02\x02\u078A\u0783\x03\x02" +
    "\x02\x02\u078B\u078C\x03\x02\x02\x02\u078C\u078A\x03\x02\x02\x02\u078C" +
    "\u078D\x03\x02\x02\x02\u078D\x85\x03\x02\x02\x02\u078E\u078F\x07\'\x02" +
    "\x02\u078F\u0790\x05\u0144\xA3\x02\u0790\u0794\x07\xA0\x02\x02\u0791\u0793" +
    "\x07\xB9\x02\x02\u0792\u0791\x03\x02\x02\x02\u0793\u0796\x03\x02\x02\x02" +
    "\u0794\u0792\x03\x02\x02\x02\u0794\u0795\x03\x02\x02\x02\u0795\u079E\x03" +
    "\x02\x02\x02\u0796\u0794\x03\x02\x02\x02\u0797\u079B\x05L\'\x02\u0798" +
    "\u079A\x07\xB9\x02\x02\u0799\u0798\x03\x02\x02\x02\u079A\u079D\x03\x02" +
    "\x02\x02\u079B\u0799\x03\x02\x02\x02\u079B\u079C\x03\x02\x02\x02\u079C" +
    "\u079F\x03\x02\x02\x02\u079D\u079B\x03\x02\x02\x02\u079E\u0797\x03\x02" +
    "\x02\x02\u079F\u07A0\x03\x02\x02\x02\u07A0\u079E\x03\x02\x02\x02\u07A0" +
    "\u07A1\x03\x02\x02\x02\u07A1\x87\x03\x02\x02\x02\u07A2\u07A3\x07(\x02" +
    "\x02\u07A3\u07A4\x05\u0144\xA3\x02\u07A4\u07A8\x07\xA0\x02\x02\u07A5\u07A7" +
    "\x07\xB9\x02\x02\u07A6\u07A5\x03\x02\x02\x02\u07A7\u07AA\x03\x02\x02\x02" +
    "\u07A8\u07A6\x03\x02\x02\x02\u07A8\u07A9\x03\x02\x02\x02\u07A9\u07B2\x03" +
    "\x02\x02\x02\u07AA\u07A8\x03\x02\x02\x02\u07AB\u07AF\x05L\'\x02\u07AC" +
    "\u07AE\x07\xB9\x02\x02\u07AD\u07AC\x03\x02\x02\x02\u07AE\u07B1\x03\x02" +
    "\x02\x02\u07AF\u07AD\x03\x02\x02\x02\u07AF\u07B0\x03\x02\x02\x02\u07B0" +
    "\u07B3\x03\x02\x02\x02\u07B1\u07AF\x03\x02\x02\x02\u07B2\u07AB\x03\x02" +
    "\x02\x02\u07B3\u07B4\x03\x02\x02\x02\u07B4\u07B2\x03\x02\x02\x02\u07B4" +
    "\u07B5\x03\x02\x02\x02\u07B5\x89\x03\x02\x02\x02\u07B6\u07B7\x07)\x02" +
    "\x02\u07B7\u07B8\x05\u0144\xA3\x02\u07B8\u07BC\x07\xA0\x02\x02\u07B9\u07BB" +
    "\x07\xB9\x02\x02\u07BA\u07B9\x03\x02\x02\x02\u07BB\u07BE\x03\x02\x02\x02" +
    "\u07BC\u07BA\x03\x02\x02\x02\u07BC\u07BD\x03\x02\x02\x02\u07BD\u07C6\x03" +
    "\x02\x02\x02\u07BE\u07BC\x03\x02\x02\x02\u07BF\u07C3\x05L\'\x02\u07C0" +
    "\u07C2\x07\xB9\x02\x02\u07C1\u07C0\x03\x02\x02\x02\u07C2\u07C5\x03\x02" +
    "\x02\x02\u07C3\u07C1\x03\x02\x02\x02\u07C3\u07C4\x03\x02\x02\x02\u07C4" +
    "\u07C7\x03\x02\x02\x02\u07C5\u07C3\x03\x02\x02\x02\u07C6\u07BF\x03\x02" +
    "\x02\x02\u07C7\u07C8\x03\x02\x02\x02\u07C8\u07C6\x03\x02\x02\x02\u07C8" +
    "\u07C9\x03\x02\x02\x02\u07C9\x8B\x03\x02\x02\x02\u07CA\u07CB\x07+\x02" +
    "\x02\u07CB\u07CC\x05\u0144\xA3\x02\u07CC\u07D0\x07\xA0\x02\x02\u07CD\u07CF" +
    "\x07\xB9\x02\x02\u07CE\u07CD\x03\x02\x02\x02\u07CF\u07D2\x03\x02\x02\x02" +
    "\u07D0\u07CE\x03\x02\x02\x02\u07D0\u07D1\x03\x02\x02\x02\u07D1\u07DA\x03" +
    "\x02\x02\x02\u07D2\u07D0\x03\x02\x02\x02\u07D3\u07D7\x05L\'\x02\u07D4" +
    "\u07D6\x07\xB9\x02\x02\u07D5\u07D4\x03\x02\x02\x02\u07D6\u07D9\x03\x02" +
    "\x02\x02\u07D7\u07D5\x03\x02\x02\x02\u07D7\u07D8\x03\x02\x02\x02\u07D8" +
    "\u07DB\x03\x02\x02\x02\u07D9\u07D7\x03\x02\x02\x02\u07DA\u07D3\x03\x02" +
    "\x02\x02\u07DB\u07DC\x03\x02\x02\x02\u07DC\u07DA\x03\x02\x02\x02\u07DC" +
    "\u07DD\x03\x02\x02\x02\u07DD\x8D\x03\x02\x02\x02\u07DE\u07DF\x07,\x02" +
    "\x02\u07DF\u07E0\x05\u0144\xA3\x02\u07E0\u07E4\x07\xA0\x02\x02\u07E1\u07E3" +
    "\x07\xB9\x02\x02\u07E2\u07E1\x03\x02\x02\x02\u07E3\u07E6\x03\x02\x02\x02" +
    "\u07E4\u07E2\x03\x02\x02\x02\u07E4\u07E5\x03\x02\x02\x02\u07E5\u07EE\x03" +
    "\x02\x02\x02\u07E6\u07E4\x03\x02\x02\x02\u07E7\u07EB\x05L\'\x02\u07E8" +
    "\u07EA\x07\xB9\x02\x02\u07E9\u07E8\x03\x02\x02\x02\u07EA\u07ED\x03\x02" +
    "\x02\x02\u07EB\u07E9\x03\x02\x02\x02\u07EB\u07EC\x03\x02\x02\x02\u07EC" +
    "\u07EF\x03\x02\x02\x02\u07ED\u07EB\x03\x02\x02\x02\u07EE\u07E7\x03\x02" +
    "\x02\x02\u07EF\u07F0\x03\x02\x02\x02\u07F0\u07EE\x03\x02\x02\x02\u07F0" +
    "\u07F1\x03\x02\x02\x02\u07F1\x8F\x03\x02\x02\x02\u07F2\u07F3\x07-\x02" +
    "\x02\u07F3\u07F4\x05\u0144\xA3\x02\u07F4\u07F8\x07\xA0\x02\x02\u07F5\u07F7" +
    "\x07\xB9\x02\x02\u07F6\u07F5\x03\x02\x02\x02\u07F7\u07FA\x03\x02\x02\x02" +
    "\u07F8\u07F6\x03\x02\x02\x02\u07F8\u07F9\x03\x02\x02\x02\u07F9\u0802\x03" +
    "\x02\x02\x02\u07FA\u07F8\x03\x02\x02\x02\u07FB\u07FF\x05L\'\x02\u07FC" +
    "\u07FE\x07\xB9\x02\x02\u07FD\u07FC\x03\x02\x02\x02\u07FE\u0801\x03\x02" +
    "\x02\x02\u07FF\u07FD\x03\x02\x02\x02\u07FF\u0800\x03\x02\x02\x02\u0800" +
    "\u0803\x03\x02\x02\x02\u0801\u07FF\x03\x02\x02\x02\u0802\u07FB\x03\x02" +
    "\x02\x02\u0803\u0804\x03\x02\x02\x02\u0804\u0802\x03\x02\x02\x02\u0804" +
    "\u0805\x03\x02\x02\x02\u0805\x91\x03\x02\x02\x02\u0806\u0807\x07.\x02" +
    "\x02\u0807\u0808\x05\u0144\xA3\x02\u0808\u080C\x07\xA0\x02\x02\u0809\u080B" +
    "\x07\xB9\x02\x02\u080A\u0809\x03\x02\x02\x02\u080B\u080E\x03\x02\x02\x02" +
    "\u080C\u080A\x03\x02\x02\x02\u080C\u080D\x03\x02\x02\x02\u080D\u0816\x03" +
    "\x02\x02\x02\u080E\u080C\x03\x02\x02\x02\u080F\u0813\x05L\'\x02\u0810" +
    "\u0812\x07\xB9\x02\x02\u0811\u0810\x03\x02\x02\x02\u0812\u0815\x03\x02" +
    "\x02\x02\u0813\u0811\x03\x02\x02\x02\u0813\u0814\x03\x02\x02\x02\u0814" +
    "\u0817\x03\x02\x02\x02\u0815\u0813\x03\x02\x02\x02\u0816\u080F\x03\x02" +
    "\x02\x02\u0817\u0818\x03\x02\x02\x02\u0818\u0816\x03\x02\x02\x02\u0818" +
    "\u0819\x03\x02\x02\x02\u0819\x93\x03\x02\x02\x02\u081A\u081B\x07/\x02" +
    "\x02\u081B\u081C\x05\u0144\xA3\x02\u081C\u0820\x07\xA0\x02\x02\u081D\u081F" +
    "\x07\xB9\x02\x02\u081E\u081D\x03\x02\x02\x02\u081F\u0822\x03\x02\x02\x02" +
    "\u0820\u081E\x03\x02\x02\x02\u0820\u0821\x03\x02\x02\x02\u0821\u082A\x03" +
    "\x02\x02\x02\u0822\u0820\x03\x02\x02\x02\u0823\u0827\x05L\'\x02\u0824" +
    "\u0826\x07\xB9\x02\x02\u0825\u0824\x03\x02\x02\x02\u0826\u0829\x03\x02" +
    "\x02\x02\u0827\u0825\x03\x02\x02\x02\u0827\u0828\x03\x02\x02\x02\u0828" +
    "\u082B\x03\x02\x02\x02\u0829\u0827\x03\x02\x02\x02\u082A\u0823\x03\x02" +
    "\x02\x02\u082B\u082C\x03\x02\x02\x02\u082C\u082A\x03\x02\x02\x02\u082C" +
    "\u082D\x03\x02\x02\x02\u082D\x95\x03\x02\x02\x02\u082E\u082F\x070\x02" +
    "\x02\u082F\u0830\x05\u0144\xA3\x02\u0830\u0834\x07\xA0\x02\x02\u0831\u0833" +
    "\x07\xB9\x02\x02\u0832\u0831\x03\x02\x02\x02\u0833\u0836\x03\x02\x02\x02" +
    "\u0834\u0832\x03\x02\x02\x02\u0834\u0835\x03\x02\x02\x02\u0835\u083E\x03" +
    "\x02\x02\x02\u0836\u0834\x03\x02\x02\x02\u0837\u083B\x05L\'\x02\u0838" +
    "\u083A\x07\xB9\x02\x02\u0839\u0838\x03\x02\x02\x02\u083A\u083D\x03\x02" +
    "\x02\x02\u083B\u0839\x03\x02\x02\x02\u083B\u083C\x03\x02\x02\x02\u083C" +
    "\u083F\x03\x02\x02\x02\u083D\u083B\x03\x02\x02\x02\u083E\u0837\x03\x02" +
    "\x02\x02\u083F\u0840\x03\x02\x02\x02\u0840\u083E\x03\x02\x02\x02\u0840" +
    "\u0841\x03\x02\x02\x02\u0841\x97\x03\x02\x02\x02\u0842\u0843\x071\x02" +
    "\x02\u0843\u0844\x05\u0144\xA3\x02\u0844\u0848\x07\xA0\x02\x02\u0845\u0847" +
    "\x07\xB9\x02\x02\u0846\u0845\x03\x02\x02\x02\u0847\u084A\x03\x02\x02\x02";
bitmarkParser._serializedATNSegment5 = "\u0848\u0846\x03\x02\x02\x02\u0848\u0849\x03\x02\x02\x02\u0849\u0852\x03" +
    "\x02\x02\x02\u084A\u0848\x03\x02\x02\x02\u084B\u084F\x05L\'\x02\u084C" +
    "\u084E\x07\xB9\x02\x02\u084D\u084C\x03\x02\x02\x02\u084E\u0851\x03\x02" +
    "\x02\x02\u084F\u084D\x03\x02\x02\x02\u084F\u0850\x03\x02\x02\x02\u0850" +
    "\u0853\x03\x02\x02\x02\u0851\u084F\x03\x02\x02\x02\u0852\u084B\x03\x02" +
    "\x02\x02\u0853\u0854\x03\x02\x02\x02\u0854\u0852\x03\x02\x02\x02\u0854" +
    "\u0855\x03\x02\x02\x02\u0855\x99\x03\x02\x02\x02\u0856\u0857\x07*\x02" +
    "\x02\u0857\u0858\x05\u0144\xA3\x02\u0858\u085C\x07\xA0\x02\x02\u0859\u085B" +
    "\x07\xB9\x02\x02\u085A\u0859\x03\x02\x02\x02\u085B\u085E\x03\x02\x02\x02" +
    "\u085C\u085A\x03\x02\x02\x02\u085C\u085D\x03\x02\x02\x02\u085D\u0866\x03" +
    "\x02\x02\x02\u085E\u085C\x03\x02\x02\x02\u085F\u0863\x05L\'\x02\u0860" +
    "\u0862\x07\xB9\x02\x02\u0861\u0860\x03\x02\x02\x02\u0862\u0865\x03\x02" +
    "\x02\x02\u0863\u0861\x03\x02\x02\x02\u0863\u0864\x03\x02\x02\x02\u0864" +
    "\u0867\x03\x02\x02\x02\u0865\u0863\x03\x02\x02\x02\u0866\u085F\x03\x02" +
    "\x02\x02\u0867\u0868\x03\x02\x02\x02\u0868\u0866\x03\x02\x02\x02\u0868" +
    "\u0869\x03\x02\x02\x02\u0869\x9B\x03\x02\x02\x02\u086A\u086B\x072\x02" +
    "\x02\u086B\u086C\x05\u0144\xA3\x02\u086C\u0870\x07\xA0\x02\x02\u086D\u086F" +
    "\x07\xB9\x02\x02\u086E\u086D\x03\x02\x02\x02\u086F\u0872\x03\x02\x02\x02" +
    "\u0870\u086E\x03\x02\x02\x02\u0870\u0871\x03\x02\x02\x02\u0871\u087A\x03" +
    "\x02\x02\x02\u0872\u0870\x03\x02\x02\x02\u0873\u0877\x05L\'\x02\u0874" +
    "\u0876\x07\xB9\x02\x02\u0875\u0874\x03\x02\x02\x02\u0876\u0879\x03\x02" +
    "\x02\x02\u0877\u0875\x03\x02\x02\x02\u0877\u0878\x03\x02\x02\x02\u0878" +
    "\u087B\x03\x02\x02\x02\u0879\u0877\x03\x02\x02\x02\u087A\u0873\x03\x02" +
    "\x02\x02\u087B\u087C\x03\x02\x02\x02\u087C\u087A\x03\x02\x02\x02\u087C" +
    "\u087D\x03\x02\x02\x02\u087D\x9D\x03\x02\x02\x02\u087E\u087F\x07F\x02" +
    "\x02\u087F\u0880\x05\u0144\xA3\x02\u0880\u0884\x07\xA0\x02\x02\u0881\u0883" +
    "\x07\xB9\x02\x02\u0882\u0881\x03\x02\x02\x02\u0883\u0886\x03\x02\x02\x02" +
    "\u0884\u0882\x03\x02\x02\x02\u0884\u0885\x03\x02\x02\x02\u0885\u088E\x03" +
    "\x02\x02\x02\u0886\u0884\x03\x02\x02\x02\u0887\u088B\x05L\'\x02\u0888" +
    "\u088A\x07\xB9\x02\x02\u0889\u0888\x03\x02\x02\x02\u088A\u088D\x03\x02" +
    "\x02\x02\u088B\u0889\x03\x02\x02\x02\u088B\u088C\x03\x02\x02\x02\u088C" +
    "\u088F\x03\x02\x02\x02\u088D\u088B\x03\x02\x02\x02\u088E\u0887\x03\x02" +
    "\x02\x02\u088F\u0890\x03\x02\x02\x02\u0890\u088E\x03\x02\x02\x02\u0890" +
    "\u0891\x03\x02\x02\x02\u0891\x9F\x03\x02\x02\x02\u0892\u0893\x07G\x02" +
    "\x02\u0893\u0894\x05\u0144\xA3\x02\u0894\u0898\x07\xA0\x02\x02\u0895\u0897" +
    "\x07\xB9\x02\x02\u0896\u0895\x03\x02\x02\x02\u0897\u089A\x03\x02\x02\x02" +
    "\u0898\u0896\x03\x02\x02\x02\u0898\u0899\x03\x02\x02\x02\u0899\u08A2\x03" +
    "\x02\x02\x02\u089A\u0898\x03\x02\x02\x02\u089B\u089F\x05L\'\x02\u089C" +
    "\u089E\x07\xB9\x02\x02\u089D\u089C\x03\x02\x02\x02\u089E\u08A1\x03\x02" +
    "\x02\x02\u089F\u089D\x03\x02\x02\x02\u089F\u08A0\x03\x02\x02\x02\u08A0" +
    "\u08A3\x03\x02\x02\x02\u08A1\u089F\x03\x02\x02\x02\u08A2\u089B\x03\x02" +
    "\x02\x02\u08A3\u08A4\x03\x02\x02\x02\u08A4\u08A2\x03\x02\x02\x02\u08A4" +
    "\u08A5\x03\x02\x02\x02\u08A5\xA1\x03\x02\x02\x02\u08A6\u08A7\x07H\x02" +
    "\x02\u08A7\u08A8\x05\u014A\xA6\x02\u08A8\u08AC\x07\xA0\x02\x02\u08A9\u08AB" +
    "\x07\xB9\x02\x02\u08AA\u08A9\x03\x02\x02\x02\u08AB\u08AE\x03\x02\x02\x02" +
    "\u08AC\u08AA\x03\x02\x02\x02\u08AC\u08AD\x03\x02\x02\x02\u08AD\u08B6\x03" +
    "\x02\x02\x02\u08AE\u08AC\x03\x02\x02\x02\u08AF\u08B3\x05L\'\x02\u08B0" +
    "\u08B2\x07\xB9\x02\x02\u08B1\u08B0\x03\x02\x02\x02\u08B2\u08B5\x03\x02" +
    "\x02\x02\u08B3\u08B1\x03\x02\x02\x02\u08B3\u08B4\x03\x02\x02\x02\u08B4" +
    "\u08B7\x03\x02\x02\x02\u08B5\u08B3\x03\x02\x02\x02\u08B6\u08AF\x03\x02" +
    "\x02\x02\u08B7\u08B8\x03\x02\x02\x02\u08B8\u08B6\x03\x02\x02\x02\u08B8" +
    "\u08B9\x03\x02\x02\x02\u08B9\xA3\x03\x02\x02\x02\u08BA\u08BB\x07I\x02" +
    "\x02\u08BB\u08BC\x05\u014A\xA6\x02\u08BC\u08C0\x07\xA0\x02\x02\u08BD\u08BF" +
    "\x07\xB9\x02\x02\u08BE\u08BD\x03\x02\x02\x02\u08BF\u08C2\x03\x02\x02\x02" +
    "\u08C0\u08BE\x03\x02\x02\x02\u08C0\u08C1\x03\x02\x02\x02\u08C1\u08CA\x03" +
    "\x02\x02\x02\u08C2\u08C0\x03\x02\x02\x02\u08C3\u08C7\x05L\'\x02\u08C4" +
    "\u08C6\x07\xB9\x02\x02\u08C5\u08C4\x03\x02\x02\x02\u08C6\u08C9\x03\x02" +
    "\x02\x02\u08C7\u08C5\x03\x02\x02\x02\u08C7\u08C8\x03\x02\x02\x02\u08C8" +
    "\u08CB\x03\x02\x02\x02\u08C9\u08C7\x03\x02\x02\x02\u08CA\u08C3\x03\x02" +
    "\x02\x02\u08CB\u08CC\x03\x02\x02\x02\u08CC\u08CA\x03\x02\x02\x02\u08CC" +
    "\u08CD\x03\x02\x02\x02\u08CD\xA5\x03\x02\x02\x02\u08CE\u08CF\x07J\x02" +
    "\x02\u08CF\u08D0\x05\u014A\xA6\x02\u08D0\u08D4\x07\xA0\x02\x02\u08D1\u08D3" +
    "\x07\xB9\x02\x02\u08D2\u08D1\x03\x02\x02\x02\u08D3\u08D6\x03\x02\x02\x02" +
    "\u08D4\u08D2\x03\x02\x02\x02\u08D4\u08D5\x03\x02\x02\x02\u08D5\u08DE\x03" +
    "\x02\x02\x02\u08D6\u08D4\x03\x02\x02\x02\u08D7\u08DB\x05L\'\x02\u08D8" +
    "\u08DA\x07\xB9\x02\x02\u08D9\u08D8\x03\x02\x02\x02\u08DA\u08DD\x03\x02" +
    "\x02\x02\u08DB\u08D9\x03\x02\x02\x02\u08DB\u08DC\x03\x02\x02\x02\u08DC" +
    "\u08DF\x03\x02\x02\x02\u08DD\u08DB\x03\x02\x02\x02\u08DE\u08D7\x03\x02" +
    "\x02\x02\u08DF\u08E0\x03\x02\x02\x02\u08E0\u08DE\x03\x02\x02\x02\u08E0" +
    "\u08E1\x03\x02\x02\x02\u08E1\xA7\x03\x02\x02\x02\u08E2\u08E3\x07K\x02" +
    "\x02\u08E3\u08E4\x05\u014A\xA6\x02\u08E4\u08E8\x07\xA0\x02\x02\u08E5\u08E7" +
    "\x07\xB9\x02\x02\u08E6\u08E5\x03\x02\x02\x02\u08E7\u08EA\x03\x02\x02\x02" +
    "\u08E8\u08E6\x03\x02\x02\x02\u08E8\u08E9\x03\x02\x02\x02\u08E9\u08F2\x03" +
    "\x02\x02\x02\u08EA\u08E8\x03\x02\x02\x02\u08EB\u08EF\x05L\'\x02\u08EC" +
    "\u08EE\x07\xB9\x02\x02\u08ED\u08EC\x03\x02\x02\x02\u08EE\u08F1\x03\x02" +
    "\x02\x02\u08EF\u08ED\x03\x02\x02\x02\u08EF\u08F0\x03\x02\x02\x02\u08F0" +
    "\u08F3\x03\x02\x02\x02\u08F1\u08EF\x03\x02\x02\x02\u08F2\u08EB\x03\x02" +
    "\x02\x02\u08F3\u08F4\x03\x02\x02\x02\u08F4\u08F2\x03\x02\x02\x02\u08F4" +
    "\u08F5\x03\x02\x02\x02\u08F5\xA9\x03\x02\x02\x02\u08F6\u08F7\x07L\x02" +
    "\x02\u08F7\u08F8\x05\u014A\xA6\x02\u08F8\u08FC\x07\xA0\x02\x02\u08F9\u08FB" +
    "\x07\xB9\x02\x02\u08FA\u08F9\x03\x02\x02\x02\u08FB\u08FE\x03\x02\x02\x02" +
    "\u08FC\u08FA\x03\x02\x02\x02\u08FC\u08FD\x03\x02\x02\x02\u08FD\u0906\x03" +
    "\x02\x02\x02\u08FE\u08FC\x03\x02\x02\x02\u08FF\u0903\x05L\'\x02\u0900" +
    "\u0902\x07\xB9\x02\x02\u0901\u0900\x03\x02\x02\x02\u0902\u0905\x03\x02" +
    "\x02\x02\u0903\u0901\x03\x02\x02\x02\u0903\u0904\x03\x02\x02\x02\u0904" +
    "\u0907\x03\x02\x02\x02\u0905\u0903\x03\x02\x02\x02\u0906\u08FF\x03\x02" +
    "\x02\x02\u0907\u0908\x03\x02\x02\x02\u0908\u0906\x03\x02\x02\x02\u0908" +
    "\u0909\x03\x02\x02\x02\u0909\xAB\x03\x02\x02\x02\u090A\u090B\x07M\x02" +
    "\x02\u090B\u090C\x05\u014A\xA6\x02\u090C\u0910\x07\xA0\x02\x02\u090D\u090F" +
    "\x07\xB9\x02\x02\u090E\u090D\x03\x02\x02\x02\u090F\u0912\x03\x02\x02\x02" +
    "\u0910\u090E\x03\x02\x02\x02\u0910\u0911\x03\x02\x02\x02\u0911\u091A\x03" +
    "\x02\x02\x02\u0912\u0910\x03\x02\x02\x02\u0913\u0917\x05L\'\x02\u0914" +
    "\u0916\x07\xB9\x02\x02\u0915\u0914\x03\x02\x02\x02\u0916\u0919\x03\x02" +
    "\x02\x02\u0917\u0915\x03\x02\x02\x02\u0917\u0918\x03\x02\x02\x02\u0918" +
    "\u091B\x03\x02\x02\x02\u0919\u0917\x03\x02\x02\x02\u091A\u0913\x03\x02" +
    "\x02\x02\u091B\u091C\x03\x02\x02\x02\u091C\u091A\x03\x02\x02\x02\u091C" +
    "\u091D\x03\x02\x02\x02\u091D\xAD\x03\x02\x02\x02\u091E\u091F\x07N\x02" +
    "\x02\u091F\u0920\x05\u014A\xA6\x02\u0920\u0924\x07\xA0\x02\x02\u0921\u0923" +
    "\x07\xB9\x02\x02\u0922\u0921\x03\x02\x02\x02\u0923\u0926\x03\x02\x02\x02" +
    "\u0924\u0922\x03\x02\x02\x02\u0924\u0925\x03\x02\x02\x02\u0925\u092E\x03" +
    "\x02\x02\x02\u0926\u0924\x03\x02\x02\x02\u0927\u092B\x05L\'\x02\u0928" +
    "\u092A\x07\xB9\x02\x02\u0929\u0928\x03\x02\x02\x02\u092A\u092D\x03\x02" +
    "\x02\x02\u092B\u0929\x03\x02\x02\x02\u092B\u092C\x03\x02\x02\x02\u092C" +
    "\u092F\x03\x02\x02\x02\u092D\u092B\x03\x02\x02\x02\u092E\u0927\x03\x02" +
    "\x02\x02\u092F\u0930\x03\x02\x02\x02\u0930\u092E\x03\x02\x02\x02\u0930" +
    "\u0931\x03\x02\x02\x02\u0931\xAF\x03\x02\x02\x02\u0932\u0933\x07O\x02" +
    "\x02\u0933\u0934\x05\u014A\xA6\x02\u0934\u0938\x07\xA0\x02\x02\u0935\u0937" +
    "\x07\xB9\x02\x02\u0936\u0935\x03\x02\x02\x02\u0937\u093A\x03\x02\x02\x02" +
    "\u0938\u0936\x03\x02\x02\x02\u0938\u0939\x03\x02\x02\x02\u0939\u0942\x03" +
    "\x02\x02\x02\u093A\u0938\x03\x02\x02\x02\u093B\u093F\x05L\'\x02\u093C" +
    "\u093E\x07\xB9\x02\x02\u093D\u093C\x03\x02\x02\x02\u093E\u0941\x03\x02" +
    "\x02\x02\u093F\u093D\x03\x02\x02\x02\u093F\u0940\x03\x02\x02\x02\u0940" +
    "\u0943\x03\x02\x02\x02\u0941\u093F\x03\x02\x02\x02\u0942\u093B\x03\x02" +
    "\x02\x02\u0943\u0944\x03\x02\x02\x02\u0944\u0942\x03\x02\x02\x02\u0944" +
    "\u0945\x03\x02\x02\x02\u0945\xB1\x03\x02\x02\x02\u0946\u0947\x07P\x02" +
    "\x02\u0947\u0948\x05\u014A\xA6\x02\u0948\u094C\x07\xA0\x02\x02\u0949\u094B" +
    "\x07\xB9\x02\x02\u094A\u0949\x03\x02\x02\x02\u094B\u094E\x03\x02\x02\x02" +
    "\u094C\u094A\x03\x02\x02\x02\u094C\u094D\x03\x02\x02\x02\u094D\u0956\x03" +
    "\x02\x02\x02\u094E\u094C\x03\x02\x02\x02\u094F\u0953\x05L\'\x02\u0950" +
    "\u0952\x07\xB9\x02\x02\u0951\u0950\x03\x02\x02\x02\u0952\u0955\x03\x02" +
    "\x02\x02\u0953\u0951\x03\x02\x02\x02\u0953\u0954\x03\x02\x02\x02\u0954" +
    "\u0957\x03\x02\x02\x02\u0955\u0953\x03\x02\x02\x02\u0956\u094F\x03\x02" +
    "\x02\x02\u0957\u0958\x03\x02\x02\x02\u0958\u0956\x03\x02\x02\x02\u0958" +
    "\u0959\x03\x02\x02\x02\u0959\xB3\x03\x02\x02\x02\u095A\u095B\x07Q\x02" +
    "\x02\u095B\u095C\x05\u014A\xA6\x02\u095C\u0960\x07\xA0\x02\x02\u095D\u095F" +
    "\x07\xB9\x02\x02\u095E\u095D\x03\x02\x02\x02\u095F\u0962\x03\x02\x02\x02" +
    "\u0960\u095E\x03\x02\x02\x02\u0960\u0961\x03\x02\x02\x02\u0961\u096A\x03" +
    "\x02\x02\x02\u0962\u0960\x03\x02\x02\x02\u0963\u0967\x05L\'\x02\u0964" +
    "\u0966\x07\xB9\x02\x02\u0965\u0964\x03\x02\x02\x02\u0966\u0969\x03\x02" +
    "\x02\x02\u0967\u0965\x03\x02\x02\x02\u0967\u0968\x03\x02\x02\x02\u0968" +
    "\u096B\x03\x02\x02\x02\u0969\u0967\x03\x02\x02\x02\u096A\u0963\x03\x02" +
    "\x02\x02\u096B\u096C\x03\x02\x02\x02\u096C\u096A\x03\x02\x02\x02\u096C" +
    "\u096D\x03\x02\x02\x02\u096D\xB5\x03\x02\x02\x02\u096E\u096F\x07R\x02" +
    "\x02\u096F\u0970\x05\u014A\xA6\x02\u0970\u0974\x07\xA0\x02\x02\u0971\u0973" +
    "\x07\xB9\x02\x02\u0972\u0971\x03\x02\x02\x02\u0973\u0976\x03\x02\x02\x02" +
    "\u0974\u0972\x03\x02\x02\x02\u0974\u0975\x03\x02\x02\x02\u0975\u097E\x03" +
    "\x02\x02\x02\u0976\u0974\x03\x02\x02\x02\u0977\u097B\x05L\'\x02\u0978" +
    "\u097A\x07\xB9\x02\x02\u0979\u0978\x03\x02\x02\x02\u097A\u097D\x03\x02" +
    "\x02\x02\u097B\u0979\x03\x02\x02\x02\u097B\u097C\x03\x02\x02\x02\u097C" +
    "\u097F\x03\x02\x02\x02\u097D\u097B\x03\x02\x02\x02\u097E\u0977\x03\x02" +
    "\x02\x02\u097F\u0980\x03\x02\x02\x02\u0980\u097E\x03\x02\x02\x02\u0980" +
    "\u0981\x03\x02\x02\x02\u0981\xB7\x03\x02\x02\x02\u0982\u0983\x07S\x02" +
    "\x02\u0983\u0984\x05\u014A\xA6\x02\u0984\u0988\x07\xA0\x02\x02\u0985\u0987" +
    "\x07\xB9\x02\x02\u0986\u0985\x03\x02\x02\x02\u0987\u098A\x03\x02\x02\x02" +
    "\u0988\u0986\x03\x02\x02\x02\u0988\u0989\x03\x02\x02\x02\u0989\u0992\x03" +
    "\x02\x02\x02\u098A\u0988\x03\x02\x02\x02\u098B\u098F\x05L\'\x02\u098C" +
    "\u098E\x07\xB9\x02\x02\u098D\u098C\x03\x02\x02\x02\u098E\u0991\x03\x02" +
    "\x02\x02\u098F\u098D\x03\x02\x02\x02\u098F\u0990\x03\x02\x02\x02\u0990" +
    "\u0993\x03\x02\x02\x02\u0991\u098F\x03\x02\x02\x02\u0992\u098B\x03\x02" +
    "\x02\x02\u0993\u0994\x03\x02\x02\x02\u0994\u0992\x03\x02\x02\x02\u0994" +
    "\u0995\x03\x02\x02\x02\u0995\xB9\x03\x02\x02\x02\u0996\u0997\x07T\x02" +
    "\x02\u0997\u0998\x05\u014A\xA6\x02\u0998\u099C\x07\xA0\x02\x02\u0999\u099B" +
    "\x07\xB9\x02\x02\u099A\u0999\x03\x02\x02\x02\u099B\u099E\x03\x02\x02\x02" +
    "\u099C\u099A\x03\x02\x02\x02\u099C\u099D\x03\x02\x02\x02\u099D\u09A6\x03" +
    "\x02\x02\x02\u099E\u099C\x03\x02\x02\x02\u099F\u09A3\x05L\'\x02\u09A0" +
    "\u09A2\x07\xB9\x02\x02\u09A1\u09A0\x03\x02\x02\x02\u09A2\u09A5\x03\x02" +
    "\x02\x02\u09A3\u09A1\x03\x02\x02\x02\u09A3\u09A4\x03\x02\x02\x02\u09A4" +
    "\u09A7\x03\x02\x02\x02\u09A5\u09A3\x03\x02\x02\x02\u09A6\u099F\x03\x02" +
    "\x02\x02\u09A7\u09A8\x03\x02\x02\x02\u09A8\u09A6\x03\x02\x02\x02\u09A8" +
    "\u09A9\x03\x02\x02\x02\u09A9\xBB\x03\x02\x02\x02\u09AA\u09AB\x07U\x02" +
    "\x02\u09AB\u09AC\x05\u014A\xA6\x02\u09AC\u09B0\x07\xA0\x02\x02\u09AD\u09AF" +
    "\x07\xB9\x02\x02\u09AE\u09AD\x03\x02\x02\x02\u09AF\u09B2\x03\x02\x02\x02" +
    "\u09B0\u09AE\x03\x02\x02\x02\u09B0\u09B1\x03\x02\x02\x02\u09B1\u09BA\x03" +
    "\x02\x02\x02\u09B2\u09B0\x03\x02\x02\x02\u09B3\u09B7\x05L\'\x02\u09B4" +
    "\u09B6\x07\xB9\x02\x02\u09B5\u09B4\x03\x02\x02\x02\u09B6\u09B9\x03\x02" +
    "\x02\x02\u09B7\u09B5\x03\x02\x02\x02\u09B7\u09B8\x03\x02\x02\x02\u09B8" +
    "\u09BB\x03\x02\x02\x02\u09B9\u09B7\x03\x02\x02\x02\u09BA\u09B3\x03\x02" +
    "\x02\x02\u09BB\u09BC\x03\x02\x02\x02\u09BC\u09BA\x03\x02\x02\x02\u09BC" +
    "\u09BD\x03\x02\x02\x02\u09BD\xBD\x03\x02\x02\x02\u09BE\u09BF\x07V\x02" +
    "\x02\u09BF\u09C0\x05\u014A\xA6\x02\u09C0\u09C4\x07\xA0\x02\x02\u09C1\u09C3" +
    "\x07\xB9\x02\x02\u09C2\u09C1\x03\x02\x02\x02\u09C3\u09C6\x03\x02\x02\x02" +
    "\u09C4\u09C2\x03\x02\x02\x02\u09C4\u09C5\x03\x02\x02\x02\u09C5\u09CE\x03" +
    "\x02\x02\x02\u09C6\u09C4\x03\x02\x02\x02\u09C7\u09CB\x05L\'\x02\u09C8" +
    "\u09CA\x07\xB9\x02\x02\u09C9\u09C8\x03\x02\x02\x02\u09CA\u09CD\x03\x02" +
    "\x02\x02\u09CB\u09C9\x03\x02\x02\x02\u09CB\u09CC\x03\x02\x02\x02\u09CC" +
    "\u09CF\x03\x02\x02\x02\u09CD\u09CB\x03\x02\x02\x02\u09CE\u09C7\x03\x02" +
    "\x02\x02\u09CF\u09D0\x03\x02\x02\x02\u09D0\u09CE\x03\x02\x02\x02\u09D0" +
    "\u09D1\x03\x02\x02\x02\u09D1\xBF\x03\x02\x02\x02\u09D2\u09D3\x07W\x02" +
    "\x02\u09D3\u09D4\x05\u014A\xA6\x02\u09D4\u09D8\x07\xA0\x02\x02\u09D5\u09D7" +
    "\x07\xB9\x02\x02\u09D6\u09D5\x03\x02\x02\x02\u09D7\u09DA\x03\x02\x02\x02" +
    "\u09D8\u09D6\x03\x02\x02\x02\u09D8\u09D9\x03\x02\x02\x02\u09D9\u09E2\x03" +
    "\x02\x02\x02\u09DA\u09D8\x03\x02\x02\x02\u09DB\u09DF\x05L\'\x02\u09DC" +
    "\u09DE\x07\xB9\x02\x02\u09DD\u09DC\x03\x02\x02\x02\u09DE\u09E1\x03\x02" +
    "\x02\x02\u09DF\u09DD\x03\x02\x02\x02\u09DF\u09E0\x03\x02\x02\x02\u09E0" +
    "\u09E3\x03\x02\x02\x02\u09E1\u09DF\x03\x02\x02\x02\u09E2\u09DB\x03\x02" +
    "\x02\x02\u09E3\u09E4\x03\x02\x02\x02\u09E4\u09E2\x03\x02\x02\x02\u09E4" +
    "\u09E5\x03\x02\x02\x02\u09E5\xC1\x03\x02\x02\x02\u09E6\u09E7\x07X\x02" +
    "\x02\u09E7\u09E8\x05\u014A\xA6\x02\u09E8\u09EC\x07\xA0\x02\x02\u09E9\u09EB" +
    "\x07\xB9\x02\x02\u09EA\u09E9\x03\x02\x02\x02\u09EB\u09EE\x03\x02\x02\x02" +
    "\u09EC\u09EA\x03\x02\x02\x02\u09EC\u09ED\x03\x02\x02\x02\u09ED\u09F6\x03" +
    "\x02\x02\x02\u09EE\u09EC\x03\x02\x02\x02\u09EF\u09F3\x05L\'\x02\u09F0" +
    "\u09F2\x07\xB9\x02\x02\u09F1\u09F0\x03\x02\x02\x02\u09F2\u09F5\x03\x02" +
    "\x02\x02\u09F3\u09F1\x03\x02\x02\x02\u09F3\u09F4\x03\x02\x02\x02\u09F4" +
    "\u09F7\x03\x02\x02\x02\u09F5\u09F3\x03\x02\x02\x02\u09F6\u09EF\x03\x02" +
    "\x02\x02\u09F7\u09F8\x03\x02\x02\x02\u09F8\u09F6\x03\x02\x02\x02\u09F8" +
    "\u09F9\x03\x02\x02\x02\u09F9\xC3\x03\x02\x02\x02\u09FA\u09FB\x07Y\x02" +
    "\x02\u09FB\u09FC\x05\u014A\xA6\x02\u09FC\u0A00\x07\xA0\x02\x02\u09FD\u09FF" +
    "\x07\xB9\x02\x02\u09FE\u09FD\x03\x02\x02\x02\u09FF\u0A02\x03\x02\x02\x02" +
    "\u0A00\u09FE\x03\x02\x02\x02\u0A00\u0A01\x03\x02\x02\x02\u0A01\u0A0A\x03" +
    "\x02\x02\x02\u0A02\u0A00\x03\x02\x02\x02\u0A03\u0A07\x05L\'\x02\u0A04" +
    "\u0A06\x07\xB9\x02\x02\u0A05\u0A04\x03\x02\x02\x02\u0A06\u0A09\x03\x02" +
    "\x02\x02\u0A07\u0A05\x03\x02\x02\x02\u0A07\u0A08\x03\x02\x02\x02\u0A08" +
    "\u0A0B\x03\x02\x02\x02\u0A09\u0A07\x03\x02\x02\x02\u0A0A\u0A03\x03\x02" +
    "\x02\x02\u0A0B\u0A0C\x03\x02\x02\x02\u0A0C\u0A0A\x03\x02\x02\x02\u0A0C" +
    "\u0A0D\x03\x02\x02\x02\u0A0D\xC5\x03\x02\x02\x02\u0A0E\u0A0F\x07Z\x02" +
    "\x02\u0A0F\u0A10\x05\u014A\xA6\x02\u0A10\u0A14\x07\xA0\x02\x02\u0A11\u0A13" +
    "\x07\xB9\x02\x02\u0A12\u0A11\x03\x02\x02\x02\u0A13\u0A16\x03\x02\x02\x02" +
    "\u0A14\u0A12\x03\x02\x02\x02\u0A14\u0A15\x03\x02\x02\x02\u0A15\u0A1E\x03" +
    "\x02\x02\x02\u0A16\u0A14\x03\x02\x02\x02\u0A17\u0A1B\x05L\'\x02\u0A18" +
    "\u0A1A\x07\xB9\x02\x02\u0A19\u0A18\x03\x02\x02\x02\u0A1A\u0A1D\x03\x02" +
    "\x02\x02\u0A1B\u0A19\x03\x02\x02\x02\u0A1B\u0A1C\x03\x02\x02\x02\u0A1C" +
    "\u0A1F\x03\x02\x02\x02\u0A1D\u0A1B\x03\x02\x02\x02\u0A1E\u0A17\x03\x02" +
    "\x02\x02\u0A1F\u0A20\x03\x02\x02\x02\u0A20\u0A1E\x03\x02\x02\x02\u0A20" +
    "\u0A21\x03\x02\x02\x02\u0A21\xC7\x03\x02\x02\x02\u0A22\u0A23\x07[\x02" +
    "\x02\u0A23\u0A24\x05\u014A\xA6\x02\u0A24\u0A28\x07\xA0\x02\x02\u0A25\u0A27" +
    "\x07\xB9\x02\x02\u0A26\u0A25\x03\x02\x02\x02\u0A27\u0A2A\x03\x02\x02\x02" +
    "\u0A28\u0A26\x03\x02\x02\x02\u0A28\u0A29\x03\x02\x02\x02\u0A29\u0A32\x03" +
    "\x02\x02\x02\u0A2A\u0A28\x03\x02\x02\x02\u0A2B\u0A2F\x05L\'\x02\u0A2C" +
    "\u0A2E\x07\xB9\x02\x02\u0A2D\u0A2C\x03\x02\x02\x02\u0A2E\u0A31\x03\x02" +
    "\x02\x02\u0A2F\u0A2D\x03\x02\x02\x02\u0A2F\u0A30\x03\x02\x02\x02\u0A30" +
    "\u0A33\x03\x02\x02\x02\u0A31\u0A2F\x03\x02\x02\x02\u0A32\u0A2B\x03\x02" +
    "\x02\x02\u0A33\u0A34\x03\x02\x02\x02\u0A34\u0A32\x03\x02\x02\x02\u0A34" +
    "\u0A35\x03\x02\x02\x02\u0A35\xC9\x03\x02\x02\x02\u0A36\u0A37\x07\\\x02" +
    "\x02\u0A37\u0A38\x05\u014A\xA6\x02\u0A38\u0A3C\x07\xA0\x02\x02\u0A39\u0A3B" +
    "\x07\xB9\x02\x02\u0A3A\u0A39\x03\x02\x02\x02\u0A3B\u0A3E\x03\x02\x02\x02" +
    "\u0A3C\u0A3A\x03\x02\x02\x02\u0A3C\u0A3D\x03\x02\x02\x02\u0A3D\u0A46\x03" +
    "\x02\x02\x02\u0A3E\u0A3C\x03\x02\x02\x02\u0A3F\u0A43\x05L\'\x02\u0A40" +
    "\u0A42\x07\xB9\x02\x02\u0A41\u0A40\x03\x02\x02\x02\u0A42\u0A45\x03\x02" +
    "\x02\x02\u0A43\u0A41\x03\x02\x02\x02\u0A43\u0A44\x03\x02\x02\x02\u0A44" +
    "\u0A47\x03\x02\x02\x02\u0A45\u0A43\x03\x02\x02\x02\u0A46\u0A3F\x03\x02" +
    "\x02\x02\u0A47\u0A48\x03\x02\x02\x02\u0A48\u0A46\x03\x02\x02\x02\u0A48" +
    "\u0A49\x03\x02\x02\x02\u0A49\xCB\x03\x02\x02\x02\u0A4A\u0A4B\x07]\x02" +
    "\x02\u0A4B\u0A4C\x05\u014A\xA6\x02\u0A4C\u0A50\x07\xA0\x02\x02\u0A4D\u0A4F" +
    "\x07\xB9\x02\x02\u0A4E\u0A4D\x03\x02\x02\x02\u0A4F\u0A52\x03\x02\x02\x02" +
    "\u0A50\u0A4E\x03\x02\x02\x02\u0A50\u0A51\x03\x02\x02\x02\u0A51\u0A5A\x03" +
    "\x02\x02\x02\u0A52\u0A50\x03\x02\x02\x02\u0A53\u0A57\x05L\'\x02\u0A54" +
    "\u0A56\x07\xB9\x02\x02\u0A55\u0A54\x03\x02\x02\x02\u0A56\u0A59\x03\x02" +
    "\x02\x02\u0A57\u0A55\x03\x02\x02\x02\u0A57\u0A58\x03\x02\x02\x02\u0A58" +
    "\u0A5B\x03\x02\x02\x02\u0A59\u0A57\x03\x02\x02\x02\u0A5A\u0A53\x03\x02" +
    "\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5A\x03\x02\x02\x02\u0A5C" +
    "\u0A5D\x03\x02\x02\x02\u0A5D\xCD\x03\x02\x02\x02\u0A5E\u0A5F\x07^\x02" +
    "\x02\u0A5F\u0A60\x05\u014A\xA6\x02\u0A60\u0A64\x07\xA0\x02\x02\u0A61\u0A63" +
    "\x07\xB9\x02\x02\u0A62\u0A61\x03\x02\x02\x02\u0A63\u0A66\x03\x02\x02\x02" +
    "\u0A64\u0A62\x03\x02\x02\x02\u0A64\u0A65\x03\x02\x02\x02\u0A65\u0A6E\x03" +
    "\x02\x02\x02\u0A66\u0A64\x03\x02\x02\x02\u0A67\u0A6B\x05L\'\x02\u0A68" +
    "\u0A6A\x07\xB9\x02\x02\u0A69\u0A68\x03\x02\x02\x02\u0A6A\u0A6D\x03\x02" +
    "\x02\x02\u0A6B\u0A69\x03\x02\x02\x02\u0A6B\u0A6C\x03\x02\x02\x02\u0A6C" +
    "\u0A6F\x03\x02\x02\x02\u0A6D\u0A6B\x03\x02\x02\x02\u0A6E\u0A67\x03\x02" +
    "\x02\x02\u0A6F\u0A70\x03\x02\x02\x02\u0A70\u0A6E\x03\x02\x02\x02\u0A70" +
    "\u0A71\x03\x02\x02\x02\u0A71\xCF\x03\x02\x02\x02\u0A72\u0A73\x07_\x02" +
    "\x02\u0A73\u0A74\x05\u0144\xA3\x02\u0A74\u0A78\x07\xA0\x02\x02\u0A75\u0A77" +
    "\x07\xB9\x02\x02\u0A76\u0A75\x03\x02\x02\x02\u0A77\u0A7A\x03\x02\x02\x02" +
    "\u0A78\u0A76\x03\x02\x02\x02\u0A78\u0A79\x03\x02\x02\x02\u0A79\u0A82\x03" +
    "\x02\x02\x02\u0A7A\u0A78\x03\x02\x02\x02\u0A7B\u0A7F\x05L\'\x02\u0A7C" +
    "\u0A7E\x07\xB9\x02\x02\u0A7D\u0A7C\x03\x02\x02\x02\u0A7E\u0A81\x03\x02" +
    "\x02\x02\u0A7F\u0A7D\x03\x02\x02\x02\u0A7F\u0A80\x03\x02\x02\x02\u0A80" +
    "\u0A83\x03\x02\x02\x02\u0A81\u0A7F\x03\x02\x02\x02\u0A82\u0A7B\x03\x02" +
    "\x02\x02\u0A83\u0A84\x03\x02\x02\x02\u0A84\u0A82\x03\x02\x02\x02\u0A84" +
    "\u0A85\x03\x02\x02\x02\u0A85\xD1\x03\x02\x02\x02\u0A86\u0A87\x07`\x02" +
    "\x02\u0A87\u0A88\x05\u0144\xA3\x02\u0A88\u0A8C\x07\xA0\x02\x02\u0A89\u0A8B" +
    "\x07\xB9\x02\x02\u0A8A\u0A89\x03\x02\x02\x02\u0A8B\u0A8E\x03\x02\x02\x02" +
    "\u0A8C\u0A8A\x03\x02\x02\x02\u0A8C\u0A8D\x03\x02\x02\x02\u0A8D\u0A96\x03" +
    "\x02\x02\x02\u0A8E\u0A8C\x03\x02\x02\x02\u0A8F\u0A93\x05L\'\x02\u0A90" +
    "\u0A92\x07\xB9\x02\x02\u0A91\u0A90\x03\x02\x02\x02\u0A92\u0A95\x03\x02" +
    "\x02\x02\u0A93\u0A91\x03\x02\x02\x02\u0A93\u0A94\x03\x02\x02\x02\u0A94" +
    "\u0A97\x03\x02\x02\x02\u0A95\u0A93\x03\x02\x02\x02\u0A96\u0A8F\x03\x02" +
    "\x02\x02\u0A97\u0A98\x03\x02\x02\x02\u0A98\u0A96\x03\x02\x02\x02\u0A98" +
    "\u0A99\x03\x02\x02\x02\u0A99\xD3\x03\x02\x02\x02\u0A9A\u0A9B\x07a\x02" +
    "\x02\u0A9B\u0A9C\x05\u0144\xA3\x02\u0A9C\u0AA0\x07\xA0\x02\x02\u0A9D\u0A9F" +
    "\x07\xB9\x02\x02\u0A9E\u0A9D\x03\x02\x02\x02\u0A9F\u0AA2\x03\x02\x02\x02" +
    "\u0AA0\u0A9E\x03\x02\x02\x02\u0AA0\u0AA1\x03\x02\x02\x02\u0AA1\u0AAA\x03" +
    "\x02\x02\x02\u0AA2\u0AA0\x03\x02\x02\x02\u0AA3\u0AA7\x05L\'\x02\u0AA4" +
    "\u0AA6\x07\xB9\x02\x02\u0AA5\u0AA4\x03\x02\x02\x02\u0AA6\u0AA9\x03\x02" +
    "\x02\x02\u0AA7\u0AA5\x03\x02\x02\x02\u0AA7\u0AA8\x03\x02\x02\x02\u0AA8" +
    "\u0AAB\x03\x02\x02\x02\u0AA9\u0AA7\x03\x02\x02\x02\u0AAA\u0AA3\x03\x02" +
    "\x02\x02\u0AAB\u0AAC\x03\x02\x02\x02\u0AAC\u0AAA\x03\x02\x02\x02\u0AAC" +
    "\u0AAD\x03\x02\x02\x02\u0AAD\xD5\x03\x02\x02\x02\u0AAE\u0AAF\x07b\x02" +
    "\x02\u0AAF\u0AB0\x05\u0144\xA3\x02\u0AB0\u0AB4\x07\xA0\x02\x02\u0AB1\u0AB3" +
    "\x07\xB9\x02\x02\u0AB2\u0AB1\x03\x02\x02\x02\u0AB3\u0AB6\x03\x02\x02\x02" +
    "\u0AB4\u0AB2\x03\x02\x02\x02\u0AB4\u0AB5\x03\x02\x02\x02\u0AB5\u0ABE\x03" +
    "\x02\x02\x02\u0AB6\u0AB4\x03\x02\x02\x02\u0AB7\u0ABB\x05L\'\x02\u0AB8" +
    "\u0ABA\x07\xB9\x02\x02\u0AB9\u0AB8\x03\x02\x02\x02\u0ABA\u0ABD\x03\x02" +
    "\x02\x02\u0ABB\u0AB9\x03\x02\x02\x02\u0ABB\u0ABC\x03\x02\x02\x02\u0ABC" +
    "\u0ABF\x03\x02\x02\x02\u0ABD\u0ABB\x03\x02\x02\x02\u0ABE\u0AB7\x03\x02" +
    "\x02\x02\u0ABF\u0AC0\x03\x02\x02\x02\u0AC0\u0ABE\x03\x02\x02\x02\u0AC0" +
    "\u0AC1\x03\x02\x02\x02\u0AC1\xD7\x03\x02\x02\x02\u0AC2\u0AC3\x07c\x02" +
    "\x02\u0AC3\u0AC4\x05\u0144\xA3\x02\u0AC4\u0AC8\x07\xA0\x02\x02\u0AC5\u0AC7" +
    "\x07\xB9\x02\x02\u0AC6\u0AC5\x03\x02\x02\x02\u0AC7\u0ACA\x03\x02\x02\x02" +
    "\u0AC8\u0AC6\x03\x02\x02\x02\u0AC8\u0AC9\x03\x02\x02\x02\u0AC9\u0AD2\x03" +
    "\x02\x02\x02\u0ACA\u0AC8\x03\x02\x02\x02\u0ACB\u0ACF\x05L\'\x02\u0ACC" +
    "\u0ACE\x07\xB9\x02\x02\u0ACD\u0ACC\x03\x02\x02\x02\u0ACE\u0AD1\x03\x02" +
    "\x02\x02\u0ACF\u0ACD\x03\x02\x02\x02\u0ACF\u0AD0\x03\x02\x02\x02\u0AD0" +
    "\u0AD3\x03\x02\x02\x02\u0AD1\u0ACF\x03\x02\x02\x02\u0AD2\u0ACB\x03\x02" +
    "\x02\x02\u0AD3\u0AD4\x03\x02\x02\x02\u0AD4\u0AD2\x03\x02\x02\x02\u0AD4" +
    "\u0AD5\x03\x02\x02\x02\u0AD5\xD9\x03\x02\x02\x02\u0AD6\u0AD7\x07d\x02" +
    "\x02\u0AD7\u0AD8\x05\u0144\xA3\x02\u0AD8\u0ADC\x07\xA0\x02\x02\u0AD9\u0ADB" +
    "\x07\xB9\x02\x02\u0ADA\u0AD9\x03\x02\x02\x02\u0ADB\u0ADE\x03\x02\x02\x02" +
    "\u0ADC\u0ADA\x03\x02\x02\x02\u0ADC\u0ADD\x03\x02\x02\x02\u0ADD\u0AE6\x03" +
    "\x02\x02\x02\u0ADE\u0ADC\x03\x02\x02\x02\u0ADF\u0AE3\x05L\'\x02\u0AE0" +
    "\u0AE2\x07\xB9\x02\x02\u0AE1\u0AE0\x03\x02\x02\x02\u0AE2\u0AE5\x03\x02" +
    "\x02\x02\u0AE3\u0AE1\x03\x02\x02\x02\u0AE3\u0AE4\x03\x02\x02\x02\u0AE4" +
    "\u0AE7\x03\x02\x02\x02\u0AE5\u0AE3\x03\x02\x02\x02\u0AE6\u0ADF\x03\x02" +
    "\x02\x02\u0AE7\u0AE8\x03\x02\x02\x02\u0AE8\u0AE6\x03\x02\x02\x02\u0AE8" +
    "\u0AE9\x03\x02\x02\x02\u0AE9\xDB\x03\x02\x02\x02\u0AEA\u0AEB\x07e\x02" +
    "\x02\u0AEB\u0AEC\x05\u0144\xA3\x02\u0AEC\u0AF0\x07\xA0\x02\x02\u0AED\u0AEF" +
    "\x07\xB9\x02\x02\u0AEE\u0AED\x03\x02\x02\x02\u0AEF\u0AF2\x03\x02\x02\x02" +
    "\u0AF0\u0AEE\x03\x02\x02\x02\u0AF0\u0AF1\x03\x02\x02\x02\u0AF1\u0AFA\x03" +
    "\x02\x02\x02\u0AF2\u0AF0\x03\x02\x02\x02\u0AF3\u0AF7\x05L\'\x02\u0AF4" +
    "\u0AF6\x07\xB9\x02\x02\u0AF5\u0AF4\x03\x02\x02\x02\u0AF6\u0AF9\x03\x02" +
    "\x02\x02\u0AF7\u0AF5\x03\x02\x02\x02\u0AF7\u0AF8\x03\x02\x02\x02\u0AF8" +
    "\u0AFB\x03\x02\x02\x02\u0AF9\u0AF7\x03\x02\x02\x02\u0AFA\u0AF3\x03\x02" +
    "\x02\x02\u0AFB\u0AFC\x03\x02\x02\x02\u0AFC\u0AFA\x03\x02\x02\x02\u0AFC" +
    "\u0AFD\x03\x02\x02\x02\u0AFD\xDD\x03\x02\x02\x02\u0AFE\u0AFF\x07f\x02" +
    "\x02\u0AFF\u0B00\x05\u0144\xA3\x02\u0B00\u0B04\x07\xA0\x02\x02\u0B01\u0B03" +
    "\x07\xB9\x02\x02\u0B02\u0B01\x03\x02\x02\x02\u0B03\u0B06\x03\x02\x02\x02" +
    "\u0B04\u0B02\x03\x02\x02\x02\u0B04\u0B05\x03\x02\x02\x02\u0B05\u0B0E\x03" +
    "\x02\x02\x02\u0B06\u0B04\x03\x02\x02\x02\u0B07\u0B0B\x05L\'\x02\u0B08" +
    "\u0B0A\x07\xB9\x02\x02\u0B09\u0B08\x03\x02\x02\x02\u0B0A\u0B0D\x03\x02" +
    "\x02\x02\u0B0B\u0B09\x03\x02\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02\u0B0C" +
    "\u0B0F\x03\x02\x02\x02\u0B0D\u0B0B\x03\x02\x02\x02\u0B0E\u0B07\x03\x02" +
    "\x02\x02\u0B0F\u0B10\x03\x02\x02\x02\u0B10\u0B0E\x03\x02\x02\x02\u0B10" +
    "\u0B11\x03\x02\x02\x02\u0B11\xDF\x03\x02\x02\x02\u0B12\u0B13\x07g\x02" +
    "\x02\u0B13\u0B14\x05\u0144\xA3\x02\u0B14\u0B18\x07\xA0\x02\x02\u0B15\u0B17" +
    "\x07\xB9\x02\x02\u0B16\u0B15\x03\x02\x02\x02\u0B17\u0B1A\x03\x02\x02\x02" +
    "\u0B18\u0B16\x03\x02\x02\x02\u0B18\u0B19\x03\x02\x02\x02\u0B19\u0B22\x03" +
    "\x02\x02\x02\u0B1A\u0B18\x03\x02\x02\x02\u0B1B\u0B1F\x05L\'\x02\u0B1C" +
    "\u0B1E";
bitmarkParser._serializedATNSegment6 = "\x07\xB9\x02\x02\u0B1D\u0B1C\x03\x02\x02\x02\u0B1E\u0B21\x03\x02\x02\x02" +
    "\u0B1F\u0B1D\x03\x02\x02\x02\u0B1F\u0B20\x03\x02\x02\x02\u0B20\u0B23\x03" +
    "\x02\x02\x02\u0B21\u0B1F\x03\x02\x02\x02\u0B22\u0B1B\x03\x02\x02\x02\u0B23" +
    "\u0B24\x03\x02\x02\x02\u0B24\u0B22\x03\x02\x02\x02\u0B24\u0B25\x03\x02" +
    "\x02\x02\u0B25\xE1\x03\x02\x02\x02\u0B26\u0B27\x07h\x02\x02\u0B27\u0B28" +
    "\x05\u0144\xA3\x02\u0B28\u0B2C\x07\xA0\x02\x02\u0B29\u0B2B\x07\xB9\x02" +
    "\x02\u0B2A\u0B29\x03\x02\x02\x02\u0B2B\u0B2E\x03\x02\x02\x02\u0B2C\u0B2A" +
    "\x03\x02\x02\x02\u0B2C\u0B2D\x03\x02\x02\x02\u0B2D\u0B36\x03\x02\x02\x02" +
    "\u0B2E\u0B2C\x03\x02\x02\x02\u0B2F\u0B33\x05L\'\x02\u0B30\u0B32\x07\xB9" +
    "\x02\x02\u0B31\u0B30\x03\x02\x02\x02\u0B32\u0B35\x03\x02\x02\x02\u0B33" +
    "\u0B31\x03\x02\x02\x02\u0B33\u0B34\x03\x02\x02\x02\u0B34\u0B37\x03\x02" +
    "\x02\x02\u0B35\u0B33\x03\x02\x02\x02\u0B36\u0B2F\x03\x02\x02\x02\u0B37" +
    "\u0B38\x03\x02\x02\x02\u0B38\u0B36\x03\x02\x02\x02\u0B38\u0B39\x03\x02" +
    "\x02\x02\u0B39\xE3\x03\x02\x02\x02\u0B3A\u0B3B\x07i\x02\x02\u0B3B\u0B3C" +
    "\x05\u0144\xA3\x02\u0B3C\u0B40\x07\xA0\x02\x02\u0B3D\u0B3F\x07\xB9\x02" +
    "\x02\u0B3E\u0B3D\x03\x02\x02\x02\u0B3F\u0B42\x03\x02\x02\x02\u0B40\u0B3E" +
    "\x03\x02\x02\x02\u0B40\u0B41\x03\x02\x02\x02\u0B41\u0B4A\x03\x02\x02\x02" +
    "\u0B42\u0B40\x03\x02\x02\x02\u0B43\u0B47\x05L\'\x02\u0B44\u0B46\x07\xB9" +
    "\x02\x02\u0B45\u0B44\x03\x02\x02\x02\u0B46\u0B49\x03\x02\x02\x02\u0B47" +
    "\u0B45\x03\x02\x02\x02\u0B47\u0B48\x03\x02\x02\x02\u0B48\u0B4B\x03\x02" +
    "\x02\x02\u0B49\u0B47\x03\x02\x02\x02\u0B4A\u0B43\x03\x02\x02\x02\u0B4B" +
    "\u0B4C\x03\x02\x02\x02\u0B4C\u0B4A\x03\x02\x02\x02\u0B4C\u0B4D\x03\x02" +
    "\x02\x02\u0B4D\xE5\x03\x02\x02\x02\u0B4E\u0B4F\x07j\x02\x02\u0B4F\u0B50" +
    "\x05\u0144\xA3\x02\u0B50\u0B54\x07\xA0\x02\x02\u0B51\u0B53\x07\xB9\x02" +
    "\x02\u0B52\u0B51\x03\x02\x02\x02\u0B53\u0B56\x03\x02\x02\x02\u0B54\u0B52" +
    "\x03\x02\x02\x02\u0B54\u0B55\x03\x02\x02\x02\u0B55\u0B5E\x03\x02\x02\x02" +
    "\u0B56\u0B54\x03\x02\x02\x02\u0B57\u0B5B\x05L\'\x02\u0B58\u0B5A\x07\xB9" +
    "\x02\x02\u0B59\u0B58\x03\x02\x02\x02\u0B5A\u0B5D\x03\x02\x02\x02\u0B5B" +
    "\u0B59\x03\x02\x02\x02\u0B5B\u0B5C\x03\x02\x02\x02\u0B5C\u0B5F\x03\x02" +
    "\x02\x02\u0B5D\u0B5B\x03\x02\x02\x02\u0B5E\u0B57\x03\x02\x02\x02\u0B5F" +
    "\u0B60\x03\x02\x02\x02\u0B60\u0B5E\x03\x02\x02\x02\u0B60\u0B61\x03\x02" +
    "\x02\x02\u0B61\xE7\x03\x02\x02\x02\u0B62\u0B63\x07k\x02\x02\u0B63\u0B64" +
    "\x05\u0144\xA3\x02\u0B64\u0B68\x07\xA0\x02\x02\u0B65\u0B67\x07\xB9\x02" +
    "\x02\u0B66\u0B65\x03\x02\x02\x02\u0B67\u0B6A\x03\x02\x02\x02\u0B68\u0B66" +
    "\x03\x02\x02\x02\u0B68\u0B69\x03\x02\x02\x02\u0B69\u0B72\x03\x02\x02\x02" +
    "\u0B6A\u0B68\x03\x02\x02\x02\u0B6B\u0B6F\x05L\'\x02\u0B6C\u0B6E\x07\xB9" +
    "\x02\x02\u0B6D\u0B6C\x03\x02\x02\x02\u0B6E\u0B71\x03\x02\x02\x02\u0B6F" +
    "\u0B6D\x03\x02\x02\x02\u0B6F\u0B70\x03\x02\x02\x02\u0B70\u0B73\x03\x02" +
    "\x02\x02\u0B71\u0B6F\x03\x02\x02\x02\u0B72\u0B6B\x03\x02\x02\x02\u0B73" +
    "\u0B74\x03\x02\x02\x02\u0B74\u0B72\x03\x02\x02\x02\u0B74\u0B75\x03\x02" +
    "\x02\x02\u0B75\xE9\x03\x02\x02\x02\u0B76\u0B77\x07l\x02\x02\u0B77\u0B78" +
    "\x05\u0144\xA3\x02\u0B78\u0B7C\x07\xA0\x02\x02\u0B79\u0B7B\x07\xB9\x02" +
    "\x02\u0B7A\u0B79\x03\x02\x02\x02\u0B7B\u0B7E\x03\x02\x02\x02\u0B7C\u0B7A" +
    "\x03\x02\x02\x02\u0B7C\u0B7D\x03\x02\x02\x02\u0B7D\u0B86\x03\x02\x02\x02" +
    "\u0B7E\u0B7C\x03\x02\x02\x02\u0B7F\u0B83\x05L\'\x02\u0B80\u0B82\x07\xB9" +
    "\x02\x02\u0B81\u0B80\x03\x02\x02\x02\u0B82\u0B85\x03\x02\x02\x02\u0B83" +
    "\u0B81\x03\x02\x02\x02\u0B83\u0B84\x03\x02\x02\x02\u0B84\u0B87\x03\x02" +
    "\x02\x02\u0B85\u0B83\x03\x02\x02\x02\u0B86\u0B7F\x03\x02\x02\x02\u0B87" +
    "\u0B88\x03\x02\x02\x02\u0B88\u0B86\x03\x02\x02\x02\u0B88\u0B89\x03\x02" +
    "\x02\x02\u0B89\xEB\x03\x02\x02\x02\u0B8A\u0B8B\x07m\x02\x02\u0B8B\u0B8C" +
    "\x05\u0144\xA3\x02\u0B8C\u0B90\x07\xA0\x02\x02\u0B8D\u0B8F\x07\xB9\x02" +
    "\x02\u0B8E\u0B8D\x03\x02\x02\x02\u0B8F\u0B92\x03\x02\x02\x02\u0B90\u0B8E" +
    "\x03\x02\x02\x02\u0B90\u0B91\x03\x02\x02\x02\u0B91\u0B9A\x03\x02\x02\x02" +
    "\u0B92\u0B90\x03\x02\x02\x02\u0B93\u0B97\x05L\'\x02\u0B94\u0B96\x07\xB9" +
    "\x02\x02\u0B95\u0B94\x03\x02\x02\x02\u0B96\u0B99\x03\x02\x02\x02\u0B97" +
    "\u0B95\x03\x02\x02\x02\u0B97\u0B98\x03\x02\x02\x02\u0B98\u0B9B\x03\x02" +
    "\x02\x02\u0B99\u0B97\x03\x02\x02\x02\u0B9A\u0B93\x03\x02\x02\x02\u0B9B" +
    "\u0B9C\x03\x02\x02\x02\u0B9C\u0B9A\x03\x02\x02\x02\u0B9C\u0B9D\x03\x02" +
    "\x02\x02\u0B9D\xED\x03\x02\x02\x02\u0B9E\u0B9F\x07n\x02\x02\u0B9F\u0BA0" +
    "\x05\u0144\xA3\x02\u0BA0\u0BA4\x07\xA0\x02\x02\u0BA1\u0BA3\x07\xB9\x02" +
    "\x02\u0BA2\u0BA1\x03\x02\x02\x02\u0BA3\u0BA6\x03\x02\x02\x02\u0BA4\u0BA2" +
    "\x03\x02\x02\x02\u0BA4\u0BA5\x03\x02\x02\x02\u0BA5\u0BAE\x03\x02\x02\x02" +
    "\u0BA6\u0BA4\x03\x02\x02\x02\u0BA7\u0BAB\x05L\'\x02\u0BA8\u0BAA\x07\xB9" +
    "\x02\x02\u0BA9\u0BA8\x03\x02\x02\x02\u0BAA\u0BAD\x03\x02\x02\x02\u0BAB" +
    "\u0BA9\x03\x02\x02\x02\u0BAB\u0BAC\x03\x02\x02\x02\u0BAC\u0BAF\x03\x02" +
    "\x02\x02\u0BAD\u0BAB\x03\x02\x02\x02\u0BAE\u0BA7\x03\x02\x02\x02\u0BAF" +
    "\u0BB0\x03\x02\x02\x02\u0BB0\u0BAE\x03\x02\x02\x02\u0BB0\u0BB1\x03\x02" +
    "\x02\x02\u0BB1\xEF\x03\x02\x02\x02\u0BB2\u0BB3\x07o\x02\x02\u0BB3\u0BB4" +
    "\x05\u0144\xA3\x02\u0BB4\u0BB8\x07\xA0\x02\x02\u0BB5\u0BB7\x07\xB9\x02" +
    "\x02\u0BB6\u0BB5\x03\x02\x02\x02\u0BB7\u0BBA\x03\x02\x02\x02\u0BB8\u0BB6" +
    "\x03\x02\x02\x02\u0BB8\u0BB9\x03\x02\x02\x02\u0BB9\u0BC2\x03\x02\x02\x02" +
    "\u0BBA\u0BB8\x03\x02\x02\x02\u0BBB\u0BBF\x05L\'\x02\u0BBC\u0BBE\x07\xB9" +
    "\x02\x02\u0BBD\u0BBC\x03\x02\x02\x02\u0BBE\u0BC1\x03\x02\x02\x02\u0BBF" +
    "\u0BBD\x03\x02\x02\x02\u0BBF\u0BC0\x03\x02\x02\x02\u0BC0\u0BC3\x03\x02" +
    "\x02\x02\u0BC1\u0BBF\x03\x02\x02\x02\u0BC2\u0BBB\x03\x02\x02\x02\u0BC3" +
    "\u0BC4\x03\x02\x02\x02\u0BC4\u0BC2\x03\x02\x02\x02\u0BC4\u0BC5\x03\x02" +
    "\x02\x02\u0BC5\xF1\x03\x02\x02\x02\u0BC6\u0BC7\x07p\x02\x02\u0BC7\u0BC8" +
    "\x05\u0144\xA3\x02\u0BC8\u0BCC\x07\xA0\x02\x02\u0BC9\u0BCB\x07\xB9\x02" +
    "\x02\u0BCA\u0BC9\x03\x02\x02\x02\u0BCB\u0BCE\x03\x02\x02\x02\u0BCC\u0BCA" +
    "\x03\x02\x02\x02\u0BCC\u0BCD\x03\x02\x02\x02\u0BCD\u0BD6\x03\x02\x02\x02" +
    "\u0BCE\u0BCC\x03\x02\x02\x02\u0BCF\u0BD3\x05L\'\x02\u0BD0\u0BD2\x07\xB9" +
    "\x02\x02\u0BD1\u0BD0\x03\x02\x02\x02\u0BD2\u0BD5\x03\x02\x02\x02\u0BD3" +
    "\u0BD1\x03\x02\x02\x02\u0BD3\u0BD4\x03\x02\x02\x02\u0BD4\u0BD7\x03\x02" +
    "\x02\x02\u0BD5\u0BD3\x03\x02\x02\x02\u0BD6\u0BCF\x03\x02\x02\x02\u0BD7" +
    "\u0BD8\x03\x02\x02\x02\u0BD8\u0BD6\x03\x02\x02\x02\u0BD8\u0BD9\x03\x02" +
    "\x02\x02\u0BD9\xF3\x03\x02\x02\x02\u0BDA\u0BDB\x07q\x02\x02\u0BDB\u0BDC" +
    "\x05\u0144\xA3\x02\u0BDC\u0BE0\x07\xA0\x02\x02\u0BDD\u0BDF\x07\xB9\x02" +
    "\x02\u0BDE\u0BDD\x03\x02\x02\x02\u0BDF\u0BE2\x03\x02\x02\x02\u0BE0\u0BDE" +
    "\x03\x02\x02\x02\u0BE0\u0BE1\x03\x02\x02\x02\u0BE1\u0BEA\x03\x02\x02\x02" +
    "\u0BE2\u0BE0\x03\x02\x02\x02\u0BE3\u0BE7\x05L\'\x02\u0BE4\u0BE6\x07\xB9" +
    "\x02\x02\u0BE5\u0BE4\x03\x02\x02\x02\u0BE6\u0BE9\x03\x02\x02\x02\u0BE7" +
    "\u0BE5\x03\x02\x02\x02\u0BE7\u0BE8\x03\x02\x02\x02\u0BE8\u0BEB\x03\x02" +
    "\x02\x02\u0BE9\u0BE7\x03\x02\x02\x02\u0BEA\u0BE3\x03\x02\x02\x02\u0BEB" +
    "\u0BEC\x03\x02\x02\x02\u0BEC\u0BEA\x03\x02\x02\x02\u0BEC\u0BED\x03\x02" +
    "\x02\x02\u0BED\xF5\x03\x02\x02\x02\u0BEE\u0BEF\x07r\x02\x02\u0BEF\u0BF0" +
    "\x05\u0144\xA3\x02\u0BF0\u0BF4\x07\xA0\x02\x02\u0BF1\u0BF3\x07\xB9\x02" +
    "\x02\u0BF2\u0BF1\x03\x02\x02\x02\u0BF3\u0BF6\x03\x02\x02\x02\u0BF4\u0BF2" +
    "\x03\x02\x02\x02\u0BF4\u0BF5\x03\x02\x02\x02\u0BF5\u0BFE\x03\x02\x02\x02" +
    "\u0BF6\u0BF4\x03\x02\x02\x02\u0BF7\u0BFB\x05L\'\x02\u0BF8\u0BFA\x07\xB9" +
    "\x02\x02\u0BF9\u0BF8\x03\x02\x02\x02\u0BFA\u0BFD\x03\x02\x02\x02\u0BFB" +
    "\u0BF9\x03\x02\x02\x02\u0BFB\u0BFC\x03\x02\x02\x02\u0BFC\u0BFF\x03\x02" +
    "\x02\x02\u0BFD\u0BFB\x03\x02\x02\x02\u0BFE\u0BF7\x03\x02\x02\x02\u0BFF" +
    "\u0C00\x03\x02\x02\x02\u0C00\u0BFE\x03\x02\x02\x02\u0C00\u0C01\x03\x02" +
    "\x02\x02\u0C01\xF7\x03\x02\x02\x02\u0C02\u0C03\x07s\x02\x02\u0C03\u0C04" +
    "\x05\u0144\xA3\x02\u0C04\u0C08\x07\xA0\x02\x02\u0C05\u0C07\x07\xB9\x02" +
    "\x02\u0C06\u0C05\x03\x02\x02\x02\u0C07\u0C0A\x03\x02\x02\x02\u0C08\u0C06" +
    "\x03\x02\x02\x02\u0C08\u0C09\x03\x02\x02\x02\u0C09\u0C12\x03\x02\x02\x02" +
    "\u0C0A\u0C08\x03\x02\x02\x02\u0C0B\u0C0F\x05L\'\x02\u0C0C\u0C0E\x07\xB9" +
    "\x02\x02\u0C0D\u0C0C\x03\x02\x02\x02\u0C0E\u0C11\x03\x02\x02\x02\u0C0F" +
    "\u0C0D\x03\x02\x02\x02\u0C0F\u0C10\x03\x02\x02\x02\u0C10\u0C13\x03\x02" +
    "\x02\x02\u0C11\u0C0F\x03\x02\x02\x02\u0C12\u0C0B\x03\x02\x02\x02\u0C13" +
    "\u0C14\x03\x02\x02\x02\u0C14\u0C12\x03\x02\x02\x02\u0C14\u0C15\x03\x02" +
    "\x02\x02\u0C15\xF9\x03\x02\x02\x02\u0C16\u0C17\x07t\x02\x02\u0C17\u0C18" +
    "\x05\u0144\xA3\x02\u0C18\u0C1C\x07\xA0\x02\x02\u0C19\u0C1B\x07\xB9\x02" +
    "\x02\u0C1A\u0C19\x03\x02\x02\x02\u0C1B\u0C1E\x03\x02\x02\x02\u0C1C\u0C1A" +
    "\x03\x02\x02\x02\u0C1C\u0C1D\x03\x02\x02\x02\u0C1D\u0C26\x03\x02\x02\x02" +
    "\u0C1E\u0C1C\x03\x02\x02\x02\u0C1F\u0C23\x05L\'\x02\u0C20\u0C22\x07\xB9" +
    "\x02\x02\u0C21\u0C20\x03\x02\x02\x02\u0C22\u0C25\x03\x02\x02\x02\u0C23" +
    "\u0C21\x03\x02\x02\x02\u0C23\u0C24\x03\x02\x02\x02\u0C24\u0C27\x03\x02" +
    "\x02\x02\u0C25\u0C23\x03\x02\x02\x02\u0C26\u0C1F\x03\x02\x02\x02\u0C27" +
    "\u0C28\x03\x02\x02\x02\u0C28\u0C26\x03\x02\x02\x02\u0C28\u0C29\x03\x02" +
    "\x02\x02\u0C29\xFB\x03\x02\x02\x02\u0C2A\u0C2B\x07u\x02\x02\u0C2B\u0C2C" +
    "\x05\u0144\xA3\x02\u0C2C\u0C30\x07\xA0\x02\x02\u0C2D\u0C2F\x07\xB9\x02" +
    "\x02\u0C2E\u0C2D\x03\x02\x02\x02\u0C2F\u0C32\x03\x02\x02\x02\u0C30\u0C2E" +
    "\x03\x02\x02\x02\u0C30\u0C31\x03\x02\x02\x02\u0C31\u0C3A\x03\x02\x02\x02" +
    "\u0C32\u0C30\x03\x02\x02\x02\u0C33\u0C37\x05L\'\x02\u0C34\u0C36\x07\xB9" +
    "\x02\x02\u0C35\u0C34\x03\x02\x02\x02\u0C36\u0C39\x03\x02\x02\x02\u0C37" +
    "\u0C35\x03\x02\x02\x02\u0C37\u0C38\x03\x02\x02\x02\u0C38\u0C3B\x03\x02" +
    "\x02\x02\u0C39\u0C37\x03\x02\x02\x02\u0C3A\u0C33\x03\x02\x02\x02\u0C3B" +
    "\u0C3C\x03\x02\x02\x02\u0C3C\u0C3A\x03\x02\x02\x02\u0C3C\u0C3D\x03\x02" +
    "\x02\x02\u0C3D\xFD\x03\x02\x02\x02\u0C3E\u0C3F\x07v\x02\x02\u0C3F\u0C40" +
    "\x05\u0144\xA3\x02\u0C40\u0C44\x07\xA0\x02\x02\u0C41\u0C43\x07\xB9\x02" +
    "\x02\u0C42\u0C41\x03\x02\x02\x02\u0C43\u0C46\x03\x02\x02\x02\u0C44\u0C42" +
    "\x03\x02\x02\x02\u0C44\u0C45\x03\x02\x02\x02\u0C45\u0C4E\x03\x02\x02\x02" +
    "\u0C46\u0C44\x03\x02\x02\x02\u0C47\u0C4B\x05L\'\x02\u0C48\u0C4A\x07\xB9" +
    "\x02\x02\u0C49\u0C48\x03\x02\x02\x02\u0C4A\u0C4D\x03\x02\x02\x02\u0C4B" +
    "\u0C49\x03\x02\x02\x02\u0C4B\u0C4C\x03\x02\x02\x02\u0C4C\u0C4F\x03\x02" +
    "\x02\x02\u0C4D\u0C4B\x03\x02\x02\x02\u0C4E\u0C47\x03\x02\x02\x02\u0C4F" +
    "\u0C50\x03\x02\x02\x02\u0C50\u0C4E\x03\x02\x02\x02\u0C50\u0C51\x03\x02" +
    "\x02\x02\u0C51\xFF\x03\x02\x02\x02\u0C52\u0C53\x07w\x02\x02\u0C53\u0C54" +
    "\x05\u0144\xA3\x02\u0C54\u0C58\x07\xA0\x02\x02\u0C55\u0C57\x07\xB9\x02" +
    "\x02\u0C56\u0C55\x03\x02\x02\x02\u0C57\u0C5A\x03\x02\x02\x02\u0C58\u0C56" +
    "\x03\x02\x02\x02\u0C58\u0C59\x03\x02\x02\x02\u0C59\u0C62\x03\x02\x02\x02" +
    "\u0C5A\u0C58\x03\x02\x02\x02\u0C5B\u0C5F\x05L\'\x02\u0C5C\u0C5E\x07\xB9" +
    "\x02\x02\u0C5D\u0C5C\x03\x02\x02\x02\u0C5E\u0C61\x03\x02\x02\x02\u0C5F" +
    "\u0C5D\x03\x02\x02\x02\u0C5F\u0C60\x03\x02\x02\x02\u0C60\u0C63\x03\x02" +
    "\x02\x02\u0C61\u0C5F\x03\x02\x02\x02\u0C62\u0C5B\x03\x02\x02\x02\u0C63" +
    "\u0C64\x03\x02\x02\x02\u0C64\u0C62\x03\x02\x02\x02\u0C64\u0C65\x03\x02" +
    "\x02\x02\u0C65\u0101\x03\x02\x02\x02\u0C66\u0C67\x07x\x02\x02\u0C67\u0C68" +
    "\x05\u0144\xA3\x02\u0C68\u0C6C\x07\xA0\x02\x02\u0C69\u0C6B\x07\xB9\x02" +
    "\x02\u0C6A\u0C69\x03\x02\x02\x02\u0C6B\u0C6E\x03\x02\x02\x02\u0C6C\u0C6A" +
    "\x03\x02\x02\x02\u0C6C\u0C6D\x03\x02\x02\x02\u0C6D\u0C76\x03\x02\x02\x02" +
    "\u0C6E\u0C6C\x03\x02\x02\x02\u0C6F\u0C73\x05L\'\x02\u0C70\u0C72\x07\xB9" +
    "\x02\x02\u0C71\u0C70\x03\x02\x02\x02\u0C72\u0C75\x03\x02\x02\x02\u0C73" +
    "\u0C71\x03\x02\x02\x02\u0C73\u0C74\x03\x02\x02\x02\u0C74\u0C77\x03\x02" +
    "\x02\x02\u0C75\u0C73\x03\x02\x02\x02\u0C76\u0C6F\x03\x02\x02\x02\u0C77" +
    "\u0C78\x03\x02\x02\x02\u0C78\u0C76\x03\x02\x02\x02\u0C78\u0C79\x03\x02" +
    "\x02\x02\u0C79\u0103\x03\x02\x02\x02\u0C7A\u0C7B\x07y\x02\x02\u0C7B\u0C7C" +
    "\x05\u0144\xA3\x02\u0C7C\u0C80\x07\xA0\x02\x02\u0C7D\u0C7F\x07\xB9\x02" +
    "\x02\u0C7E\u0C7D\x03\x02\x02\x02\u0C7F\u0C82\x03\x02\x02\x02\u0C80\u0C7E" +
    "\x03\x02\x02\x02\u0C80\u0C81\x03\x02\x02\x02\u0C81\u0C8A\x03\x02\x02\x02" +
    "\u0C82\u0C80\x03\x02\x02\x02\u0C83\u0C87\x05L\'\x02\u0C84\u0C86\x07\xB9" +
    "\x02\x02\u0C85\u0C84\x03\x02\x02\x02\u0C86\u0C89\x03\x02\x02\x02\u0C87" +
    "\u0C85\x03\x02\x02\x02\u0C87\u0C88\x03\x02\x02\x02\u0C88\u0C8B\x03\x02" +
    "\x02\x02\u0C89\u0C87\x03\x02\x02\x02\u0C8A\u0C83\x03\x02\x02\x02\u0C8B" +
    "\u0C8C\x03\x02\x02\x02\u0C8C\u0C8A\x03\x02\x02\x02\u0C8C\u0C8D\x03\x02" +
    "\x02\x02\u0C8D\u0105\x03\x02\x02\x02\u0C8E\u0C8F\x07z\x02\x02\u0C8F\u0C90" +
    "\x05\u0144\xA3\x02\u0C90\u0C94\x07\xA0\x02\x02\u0C91\u0C93\x07\xB9\x02" +
    "\x02\u0C92\u0C91\x03\x02\x02\x02\u0C93\u0C96\x03\x02\x02\x02\u0C94\u0C92" +
    "\x03\x02\x02\x02\u0C94\u0C95\x03\x02\x02\x02\u0C95\u0C9E\x03\x02\x02\x02" +
    "\u0C96\u0C94\x03\x02\x02\x02\u0C97\u0C9B\x05L\'\x02\u0C98\u0C9A\x07\xB9" +
    "\x02\x02\u0C99\u0C98\x03\x02\x02\x02\u0C9A\u0C9D\x03\x02\x02\x02\u0C9B" +
    "\u0C99\x03\x02\x02\x02\u0C9B\u0C9C\x03\x02\x02\x02\u0C9C\u0C9F\x03\x02" +
    "\x02\x02\u0C9D\u0C9B\x03\x02\x02\x02\u0C9E\u0C97\x03\x02\x02\x02\u0C9F" +
    "\u0CA0\x03\x02\x02\x02\u0CA0\u0C9E\x03\x02\x02\x02\u0CA0\u0CA1\x03\x02" +
    "\x02\x02\u0CA1\u0107\x03\x02\x02\x02\u0CA2\u0CA3\x07{\x02\x02\u0CA3\u0CA4" +
    "\x05\u0144\xA3\x02\u0CA4\u0CA8\x07\xA0\x02\x02\u0CA5\u0CA7\x07\xB9\x02" +
    "\x02\u0CA6\u0CA5\x03\x02\x02\x02\u0CA7\u0CAA\x03\x02\x02\x02\u0CA8\u0CA6" +
    "\x03\x02\x02\x02\u0CA8\u0CA9\x03\x02\x02\x02\u0CA9\u0CB2\x03\x02\x02\x02" +
    "\u0CAA\u0CA8\x03\x02\x02\x02\u0CAB\u0CAF\x05L\'\x02\u0CAC\u0CAE\x07\xB9" +
    "\x02\x02\u0CAD\u0CAC\x03\x02\x02\x02\u0CAE\u0CB1\x03\x02\x02\x02\u0CAF" +
    "\u0CAD\x03\x02\x02\x02\u0CAF\u0CB0\x03\x02\x02\x02\u0CB0\u0CB3\x03\x02" +
    "\x02\x02\u0CB1\u0CAF\x03\x02\x02\x02\u0CB2\u0CAB\x03\x02\x02\x02\u0CB3" +
    "\u0CB4\x03\x02\x02\x02\u0CB4\u0CB2\x03\x02\x02\x02\u0CB4\u0CB5\x03\x02" +
    "\x02\x02\u0CB5\u0109\x03\x02\x02\x02\u0CB6\u0CB7\x07|\x02\x02\u0CB7\u0CB8" +
    "\x05\u0144\xA3\x02\u0CB8\u0CBC\x07\xA0\x02\x02\u0CB9\u0CBB\x07\xB9\x02" +
    "\x02\u0CBA\u0CB9\x03\x02\x02\x02\u0CBB\u0CBE\x03\x02\x02\x02\u0CBC\u0CBA" +
    "\x03\x02\x02\x02\u0CBC\u0CBD\x03\x02\x02\x02\u0CBD\u0CC6\x03\x02\x02\x02" +
    "\u0CBE\u0CBC\x03\x02\x02\x02\u0CBF\u0CC3\x05L\'\x02\u0CC0\u0CC2\x07\xB9" +
    "\x02\x02\u0CC1\u0CC0\x03\x02\x02\x02\u0CC2\u0CC5\x03\x02\x02\x02\u0CC3" +
    "\u0CC1\x03\x02\x02\x02\u0CC3\u0CC4\x03\x02\x02\x02\u0CC4\u0CC7\x03\x02" +
    "\x02\x02\u0CC5\u0CC3\x03\x02\x02\x02\u0CC6\u0CBF\x03\x02\x02\x02\u0CC7" +
    "\u0CC8\x03\x02\x02\x02\u0CC8\u0CC6\x03\x02\x02\x02\u0CC8\u0CC9\x03\x02" +
    "\x02\x02\u0CC9\u010B\x03\x02\x02\x02\u0CCA\u0CCB\x07}\x02\x02\u0CCB\u0CCC" +
    "\x05\u0144\xA3\x02\u0CCC\u0CD0\x07\xA0\x02\x02\u0CCD\u0CCF\x07\xB9\x02" +
    "\x02\u0CCE\u0CCD\x03\x02\x02\x02\u0CCF\u0CD2\x03\x02\x02\x02\u0CD0\u0CCE" +
    "\x03\x02\x02\x02\u0CD0\u0CD1\x03\x02\x02\x02\u0CD1\u0CDA\x03\x02\x02\x02" +
    "\u0CD2\u0CD0\x03\x02\x02\x02\u0CD3\u0CD7\x05L\'\x02\u0CD4\u0CD6\x07\xB9" +
    "\x02\x02\u0CD5\u0CD4\x03\x02\x02\x02\u0CD6\u0CD9\x03\x02\x02\x02\u0CD7" +
    "\u0CD5\x03\x02\x02\x02\u0CD7\u0CD8\x03\x02\x02\x02\u0CD8\u0CDB\x03\x02" +
    "\x02\x02\u0CD9\u0CD7\x03\x02\x02\x02\u0CDA\u0CD3\x03\x02\x02\x02\u0CDB" +
    "\u0CDC\x03\x02\x02\x02\u0CDC\u0CDA\x03\x02\x02\x02\u0CDC\u0CDD\x03\x02" +
    "\x02\x02\u0CDD\u010D\x03\x02\x02\x02\u0CDE\u0CDF\x07~\x02\x02\u0CDF\u0CE0" +
    "\x05\u0144\xA3\x02\u0CE0\u0CE4\x07\xA0\x02\x02\u0CE1\u0CE3\x07\xB9\x02" +
    "\x02\u0CE2\u0CE1\x03\x02\x02\x02\u0CE3\u0CE6\x03\x02\x02\x02\u0CE4\u0CE2" +
    "\x03\x02\x02\x02\u0CE4\u0CE5\x03\x02\x02\x02\u0CE5\u0CEE\x03\x02\x02\x02" +
    "\u0CE6\u0CE4\x03\x02\x02\x02\u0CE7\u0CEB\x05L\'\x02\u0CE8\u0CEA\x07\xB9" +
    "\x02\x02\u0CE9\u0CE8\x03\x02\x02\x02\u0CEA\u0CED\x03\x02\x02\x02\u0CEB" +
    "\u0CE9\x03\x02\x02\x02\u0CEB\u0CEC\x03\x02\x02\x02\u0CEC\u0CEF\x03\x02" +
    "\x02\x02\u0CED\u0CEB\x03\x02\x02\x02\u0CEE\u0CE7\x03\x02\x02\x02\u0CEF" +
    "\u0CF0\x03\x02\x02\x02\u0CF0\u0CEE\x03\x02\x02\x02\u0CF0\u0CF1\x03\x02" +
    "\x02\x02\u0CF1\u010F\x03\x02\x02\x02\u0CF2\u0CF3\x07\x7F\x02\x02\u0CF3" +
    "\u0CF4\x05\u014A\xA6\x02\u0CF4\u0CF8\x07\xA0\x02\x02\u0CF5\u0CF7\x07\xB9" +
    "\x02\x02\u0CF6\u0CF5\x03\x02\x02\x02\u0CF7\u0CFA\x03\x02\x02\x02\u0CF8" +
    "\u0CF6\x03\x02\x02\x02\u0CF8\u0CF9\x03\x02\x02\x02\u0CF9\u0D02\x03\x02" +
    "\x02\x02\u0CFA\u0CF8\x03\x02\x02\x02\u0CFB\u0CFF\x05L\'\x02\u0CFC\u0CFE" +
    "\x07\xB9\x02\x02\u0CFD\u0CFC\x03\x02\x02\x02\u0CFE\u0D01\x03\x02\x02\x02" +
    "\u0CFF\u0CFD\x03\x02\x02\x02\u0CFF\u0D00\x03\x02\x02\x02\u0D00\u0D03\x03" +
    "\x02\x02\x02\u0D01\u0CFF\x03\x02\x02\x02\u0D02\u0CFB\x03\x02\x02\x02\u0D03" +
    "\u0D04\x03\x02\x02\x02\u0D04\u0D02\x03\x02\x02\x02\u0D04\u0D05\x03\x02" +
    "\x02\x02\u0D05\u0111\x03\x02\x02\x02\u0D06\u0D07\x07\x80\x02\x02\u0D07" +
    "\u0D08\x05\u014A\xA6\x02\u0D08\u0D0C\x07\xA0\x02\x02\u0D09\u0D0B\x07\xB9" +
    "\x02\x02\u0D0A\u0D09\x03\x02\x02\x02\u0D0B\u0D0E\x03\x02\x02\x02\u0D0C" +
    "\u0D0A\x03\x02\x02\x02\u0D0C\u0D0D\x03\x02\x02\x02\u0D0D\u0D16\x03\x02" +
    "\x02\x02\u0D0E\u0D0C\x03\x02\x02\x02\u0D0F\u0D13\x05L\'\x02\u0D10\u0D12" +
    "\x07\xB9\x02\x02\u0D11\u0D10\x03\x02\x02\x02\u0D12\u0D15\x03\x02\x02\x02" +
    "\u0D13\u0D11\x03\x02\x02\x02\u0D13\u0D14\x03\x02\x02\x02\u0D14\u0D17\x03" +
    "\x02\x02\x02\u0D15\u0D13\x03\x02\x02\x02\u0D16\u0D0F\x03\x02\x02\x02\u0D17" +
    "\u0D18\x03\x02\x02\x02\u0D18\u0D16\x03\x02\x02\x02\u0D18\u0D19\x03\x02" +
    "\x02\x02\u0D19\u0113\x03\x02\x02\x02\u0D1A\u0D1B\x07\x81\x02\x02\u0D1B" +
    "\u0D1C\x05\u014A\xA6\x02\u0D1C\u0D20\x07\xA0\x02\x02\u0D1D\u0D1F\x07\xB9" +
    "\x02\x02\u0D1E\u0D1D\x03\x02\x02\x02\u0D1F\u0D22\x03\x02\x02\x02\u0D20" +
    "\u0D1E\x03\x02\x02\x02\u0D20\u0D21\x03\x02\x02\x02\u0D21\u0D2A\x03\x02" +
    "\x02\x02\u0D22\u0D20\x03\x02\x02\x02\u0D23\u0D27\x05L\'\x02\u0D24\u0D26" +
    "\x07\xB9\x02\x02\u0D25\u0D24\x03\x02\x02\x02\u0D26\u0D29\x03\x02\x02\x02" +
    "\u0D27\u0D25\x03\x02\x02\x02\u0D27\u0D28\x03\x02\x02\x02\u0D28\u0D2B\x03" +
    "\x02\x02\x02\u0D29\u0D27\x03\x02\x02\x02\u0D2A\u0D23\x03\x02\x02\x02\u0D2B" +
    "\u0D2C\x03\x02\x02\x02\u0D2C\u0D2A\x03\x02\x02\x02\u0D2C\u0D2D\x03\x02" +
    "\x02\x02\u0D2D\u0115\x03\x02\x02\x02\u0D2E\u0D2F\x07\x82\x02\x02\u0D2F" +
    "\u0D30\x05\u014A\xA6\x02\u0D30\u0D34\x07\xA0\x02\x02\u0D31\u0D33\x07\xB9" +
    "\x02\x02\u0D32\u0D31\x03\x02\x02\x02\u0D33\u0D36\x03\x02\x02\x02\u0D34" +
    "\u0D32\x03\x02\x02\x02\u0D34\u0D35\x03\x02\x02\x02\u0D35\u0D3E\x03\x02" +
    "\x02\x02\u0D36\u0D34\x03\x02\x02\x02\u0D37\u0D3B\x05L\'\x02\u0D38\u0D3A" +
    "\x07\xB9\x02\x02\u0D39\u0D38\x03\x02\x02\x02\u0D3A\u0D3D\x03\x02\x02\x02" +
    "\u0D3B\u0D39\x03\x02\x02\x02\u0D3B\u0D3C\x03\x02\x02\x02\u0D3C\u0D3F\x03" +
    "\x02\x02\x02\u0D3D\u0D3B\x03\x02\x02\x02\u0D3E\u0D37\x03\x02\x02\x02\u0D3F" +
    "\u0D40\x03\x02\x02\x02\u0D40\u0D3E\x03\x02\x02\x02\u0D40\u0D41\x03\x02" +
    "\x02\x02\u0D41\u0117\x03\x02\x02\x02\u0D42\u0D43\x07\x87\x02\x02\u0D43" +
    "\u0D44\x05\u0144\xA3\x02\u0D44\u0D48\x07\xA0\x02\x02\u0D45\u0D47\x07\xB9" +
    "\x02\x02\u0D46\u0D45\x03\x02\x02\x02\u0D47\u0D4A\x03\x02\x02\x02\u0D48" +
    "\u0D46\x03\x02\x02\x02\u0D48\u0D49\x03\x02\x02\x02\u0D49\u0D52\x03\x02" +
    "\x02\x02\u0D4A\u0D48\x03\x02\x02\x02\u0D4B\u0D4F\x05L\'\x02\u0D4C\u0D4E" +
    "\x07\xB9\x02\x02\u0D4D\u0D4C\x03\x02\x02\x02\u0D4E\u0D51\x03\x02\x02\x02" +
    "\u0D4F\u0D4D\x03\x02\x02\x02\u0D4F\u0D50\x03\x02\x02\x02\u0D50\u0D53\x03" +
    "\x02\x02\x02\u0D51\u0D4F\x03\x02\x02\x02\u0D52\u0D4B\x03\x02\x02\x02\u0D53" +
    "\u0D54\x03\x02\x02\x02\u0D54\u0D52\x03\x02\x02\x02\u0D54\u0D55\x03\x02" +
    "\x02\x02\u0D55\u0119\x03\x02\x02\x02\u0D56\u0D57\x07\x88\x02\x02\u0D57" +
    "\u0D58\x05\u0144\xA3\x02\u0D58\u0D5C\x07\xA0\x02\x02\u0D59\u0D5B\x07\xB9" +
    "\x02\x02\u0D5A\u0D59\x03\x02\x02\x02\u0D5B\u0D5E\x03\x02\x02\x02\u0D5C" +
    "\u0D5A\x03\x02\x02\x02\u0D5C\u0D5D\x03\x02\x02\x02\u0D5D\u0D66\x03\x02" +
    "\x02\x02\u0D5E\u0D5C\x03\x02\x02\x02\u0D5F\u0D63\x05L\'\x02\u0D60\u0D62" +
    "\x07\xB9\x02\x02\u0D61\u0D60\x03\x02\x02\x02\u0D62\u0D65\x03\x02\x02\x02" +
    "\u0D63\u0D61\x03\x02\x02\x02\u0D63\u0D64\x03\x02\x02\x02\u0D64\u0D67\x03" +
    "\x02\x02\x02\u0D65\u0D63\x03\x02\x02\x02\u0D66\u0D5F\x03\x02\x02\x02\u0D67" +
    "\u0D68\x03\x02\x02\x02\u0D68\u0D66\x03\x02\x02\x02\u0D68\u0D69\x03\x02" +
    "\x02\x02\u0D69\u011B\x03\x02\x02\x02\u0D6A\u0D6B\x07\x89\x02\x02\u0D6B" +
    "\u0D6C\x05\u0144\xA3\x02\u0D6C\u0D70\x07\xA0\x02\x02\u0D6D\u0D6F\x07\xB9" +
    "\x02\x02\u0D6E\u0D6D\x03\x02\x02\x02\u0D6F\u0D72\x03\x02\x02\x02\u0D70" +
    "\u0D6E\x03\x02\x02\x02\u0D70\u0D71\x03\x02\x02\x02\u0D71\u0D7A\x03\x02" +
    "\x02\x02\u0D72\u0D70\x03\x02\x02\x02\u0D73\u0D77\x05L\'\x02\u0D74\u0D76" +
    "\x07\xB9\x02\x02\u0D75\u0D74\x03\x02\x02\x02\u0D76\u0D79\x03\x02\x02\x02" +
    "\u0D77\u0D75\x03\x02\x02\x02\u0D77\u0D78\x03\x02\x02\x02\u0D78\u0D7B\x03" +
    "\x02\x02\x02\u0D79\u0D77\x03\x02\x02\x02\u0D7A\u0D73\x03\x02\x02\x02\u0D7B" +
    "\u0D7C\x03\x02\x02\x02\u0D7C\u0D7A\x03\x02\x02\x02\u0D7C\u0D7D\x03\x02" +
    "\x02\x02\u0D7D\u011D\x03\x02\x02\x02\u0D7E\u0D7F\x07\x8B\x02\x02\u0D7F" +
    "\u0D80\x05\u0144\xA3\x02\u0D80\u0D84\x07\xA0\x02\x02\u0D81\u0D83\x07\xB9" +
    "\x02\x02\u0D82\u0D81\x03\x02\x02\x02\u0D83\u0D86\x03\x02\x02\x02\u0D84" +
    "\u0D82\x03\x02\x02\x02\u0D84\u0D85\x03\x02\x02\x02\u0D85\u0D8E\x03\x02" +
    "\x02\x02\u0D86\u0D84\x03\x02\x02\x02\u0D87\u0D8B\x05L\'\x02\u0D88\u0D8A" +
    "\x07\xB9\x02\x02\u0D89\u0D88\x03\x02\x02\x02\u0D8A\u0D8D\x03\x02\x02\x02" +
    "\u0D8B\u0D89\x03\x02\x02\x02\u0D8B\u0D8C\x03\x02\x02\x02\u0D8C\u0D8F\x03" +
    "\x02\x02\x02\u0D8D\u0D8B\x03\x02\x02\x02\u0D8E\u0D87\x03\x02\x02\x02\u0D8F" +
    "\u0D90\x03\x02\x02\x02\u0D90\u0D8E\x03\x02\x02\x02\u0D90\u0D91\x03\x02" +
    "\x02\x02\u0D91\u011F\x03\x02\x02\x02\u0D92\u0D93\x07\x8A\x02\x02\u0D93" +
    "\u0D94\x05\u014A\xA6\x02\u0D94\u0D98\x07\xA0\x02\x02\u0D95\u0D97\x07\xB9" +
    "\x02\x02\u0D96\u0D95\x03\x02\x02\x02\u0D97\u0D9A\x03\x02\x02\x02\u0D98" +
    "\u0D96\x03\x02\x02\x02\u0D98\u0D99\x03\x02\x02\x02\u0D99\u0DA2\x03\x02" +
    "\x02\x02\u0D9A\u0D98\x03\x02\x02\x02\u0D9B\u0D9F\x05L\'\x02\u0D9C\u0D9E" +
    "\x07\xB9\x02\x02\u0D9D\u0D9C\x03\x02\x02\x02\u0D9E\u0DA1\x03\x02\x02\x02" +
    "\u0D9F\u0D9D\x03\x02\x02\x02\u0D9F\u0DA0\x03\x02\x02\x02\u0DA0\u0DA3\x03" +
    "\x02\x02\x02\u0DA1\u0D9F\x03\x02\x02\x02\u0DA2\u0D9B\x03\x02\x02\x02\u0DA3" +
    "\u0DA4\x03\x02\x02\x02\u0DA4\u0DA2\x03\x02\x02\x02\u0DA4\u0DA5\x03\x02" +
    "\x02\x02\u0DA5\u0121\x03\x02\x02\x02\u0DA6\u0DA7\x07\x8C\x02\x02\u0DA7" +
    "\u0DA8\x05\u0144\xA3\x02\u0DA8\u0DAC\x07\xA0\x02\x02\u0DA9\u0DAB\x07\xB9" +
    "\x02\x02\u0DAA\u0DA9\x03\x02\x02\x02\u0DAB\u0DAE\x03\x02\x02\x02\u0DAC" +
    "\u0DAA\x03\x02\x02\x02\u0DAC\u0DAD\x03\x02\x02\x02\u0DAD\u0DB6\x03\x02" +
    "\x02\x02\u0DAE\u0DAC\x03\x02\x02\x02\u0DAF\u0DB3\x05L\'\x02\u0DB0\u0DB2" +
    "\x07\xB9\x02\x02\u0DB1\u0DB0\x03\x02\x02\x02\u0DB2\u0DB5\x03\x02\x02\x02" +
    "\u0DB3\u0DB1\x03\x02\x02\x02\u0DB3\u0DB4\x03\x02\x02\x02\u0DB4\u0DB7\x03" +
    "\x02\x02\x02\u0DB5\u0DB3\x03\x02\x02\x02\u0DB6\u0DAF\x03\x02\x02\x02\u0DB7" +
    "\u0DB8\x03\x02\x02\x02\u0DB8\u0DB6\x03\x02\x02\x02\u0DB8\u0DB9\x03\x02" +
    "\x02\x02\u0DB9\u0123\x03\x02\x02\x02\u0DBA\u0DBB\x07\x8D\x02\x02\u0DBB" +
    "\u0DBC\x05\u0144\xA3\x02\u0DBC\u0DC0\x07\xA0\x02\x02\u0DBD\u0DBF\x07\xB9" +
    "\x02\x02\u0DBE\u0DBD\x03\x02\x02\x02\u0DBF\u0DC2\x03\x02\x02\x02\u0DC0" +
    "\u0DBE\x03\x02\x02\x02\u0DC0\u0DC1\x03\x02\x02\x02\u0DC1\u0DCA\x03\x02" +
    "\x02\x02\u0DC2\u0DC0\x03\x02\x02\x02\u0DC3\u0DC7\x05L\'\x02\u0DC4\u0DC6" +
    "\x07\xB9\x02\x02\u0DC5\u0DC4\x03\x02\x02\x02\u0DC6\u0DC9\x03\x02\x02\x02" +
    "\u0DC7\u0DC5\x03\x02\x02\x02\u0DC7\u0DC8\x03\x02\x02\x02\u0DC8\u0DCB\x03" +
    "\x02\x02\x02\u0DC9\u0DC7\x03\x02\x02\x02\u0DCA\u0DC3\x03\x02\x02\x02\u0DCB" +
    "\u0DCC\x03\x02\x02\x02\u0DCC\u0DCA\x03\x02\x02\x02\u0DCC\u0DCD\x03\x02" +
    "\x02\x02\u0DCD\u0125\x03\x02\x02\x02\u0DCE\u0DCF\x07\x8E\x02\x02\u0DCF" +
    "\u0DD0\x05\u0144\xA3\x02\u0DD0\u0DD4\x07\xA0\x02\x02\u0DD1\u0DD3\x07\xB9" +
    "\x02\x02\u0DD2\u0DD1\x03\x02\x02\x02\u0DD3\u0DD6\x03\x02\x02\x02\u0DD4" +
    "\u0DD2\x03\x02\x02\x02\u0DD4\u0DD5\x03\x02\x02\x02\u0DD5\u0DDE\x03\x02" +
    "\x02\x02\u0DD6\u0DD4\x03\x02\x02\x02\u0DD7\u0DDB\x05L\'\x02\u0DD8\u0DDA" +
    "\x07\xB9\x02\x02\u0DD9\u0DD8\x03\x02\x02\x02\u0DDA\u0DDD\x03\x02\x02\x02" +
    "\u0DDB\u0DD9\x03\x02\x02\x02\u0DDB\u0DDC\x03\x02\x02\x02\u0DDC\u0DDF\x03" +
    "\x02\x02\x02\u0DDD\u0DDB\x03\x02\x02\x02\u0DDE\u0DD7\x03\x02\x02\x02\u0DDF" +
    "\u0DE0\x03\x02\x02\x02\u0DE0\u0DDE\x03\x02\x02\x02\u0DE0\u0DE1\x03\x02" +
    "\x02\x02\u0DE1\u0127\x03\x02\x02\x02\u0DE2\u0DE3\x07\x8F\x02\x02\u0DE3" +
    "\u0DE4\x05\u0144\xA3\x02\u0DE4\u0DE8\x07\xA0\x02\x02\u0DE5\u0DE7\x07\xB9" +
    "\x02\x02\u0DE6\u0DE5\x03\x02\x02\x02\u0DE7\u0DEA\x03\x02\x02\x02\u0DE8" +
    "\u0DE6\x03\x02\x02\x02\u0DE8\u0DE9\x03\x02\x02\x02\u0DE9\u0DF2\x03\x02" +
    "\x02\x02\u0DEA\u0DE8\x03\x02\x02\x02\u0DEB\u0DEF\x05L\'\x02\u0DEC\u0DEE" +
    "\x07\xB9\x02\x02\u0DED\u0DEC\x03\x02\x02\x02\u0DEE\u0DF1\x03\x02\x02\x02" +
    "\u0DEF\u0DED\x03\x02\x02\x02\u0DEF\u0DF0\x03\x02\x02\x02\u0DF0\u0DF3\x03" +
    "\x02";
bitmarkParser._serializedATNSegment7 = "\x02\x02\u0DF1\u0DEF\x03\x02\x02\x02\u0DF2\u0DEB\x03\x02\x02\x02\u0DF3" +
    "\u0DF4\x03\x02\x02\x02\u0DF4\u0DF2\x03\x02\x02\x02\u0DF4\u0DF5\x03\x02" +
    "\x02\x02\u0DF5\u0129\x03\x02\x02\x02\u0DF6\u0DF7\x07\x90\x02\x02\u0DF7" +
    "\u0DF8\x05\u0144\xA3\x02\u0DF8\u0DFC\x07\xA0\x02\x02\u0DF9\u0DFB\x07\xB9" +
    "\x02\x02\u0DFA\u0DF9\x03\x02\x02\x02\u0DFB\u0DFE\x03\x02\x02\x02\u0DFC" +
    "\u0DFA\x03\x02\x02\x02\u0DFC\u0DFD\x03\x02\x02\x02\u0DFD\u0E06\x03\x02" +
    "\x02\x02\u0DFE\u0DFC\x03\x02\x02\x02\u0DFF\u0E03\x05L\'\x02\u0E00\u0E02" +
    "\x07\xB9\x02\x02\u0E01\u0E00\x03\x02\x02\x02\u0E02\u0E05\x03\x02\x02\x02" +
    "\u0E03\u0E01\x03\x02\x02\x02\u0E03\u0E04\x03\x02\x02\x02\u0E04\u0E07\x03" +
    "\x02\x02\x02\u0E05\u0E03\x03\x02\x02\x02\u0E06\u0DFF\x03\x02\x02\x02\u0E07" +
    "\u0E08\x03\x02\x02\x02\u0E08\u0E06\x03\x02\x02\x02\u0E08\u0E09\x03\x02" +
    "\x02\x02\u0E09\u012B\x03\x02\x02\x02\u0E0A\u0E0B\x07\x18\x02\x02\u0E0B" +
    "\u0E0C\x05\u0144\xA3\x02\u0E0C\u0E10\x07\xA0\x02\x02\u0E0D\u0E0F\x07\xB9" +
    "\x02\x02\u0E0E\u0E0D\x03\x02\x02\x02\u0E0F\u0E12\x03\x02\x02\x02\u0E10" +
    "\u0E0E\x03\x02\x02\x02\u0E10\u0E11\x03\x02\x02\x02\u0E11\u0E1A\x03\x02" +
    "\x02\x02\u0E12\u0E10\x03\x02\x02\x02\u0E13\u0E17\x05L\'\x02\u0E14\u0E16" +
    "\x07\xB9\x02\x02\u0E15\u0E14\x03\x02\x02\x02\u0E16\u0E19\x03\x02\x02\x02" +
    "\u0E17\u0E15\x03\x02\x02\x02\u0E17\u0E18\x03\x02\x02\x02\u0E18\u0E1B\x03" +
    "\x02\x02\x02\u0E19\u0E17\x03\x02\x02\x02\u0E1A\u0E13\x03\x02\x02\x02\u0E1B" +
    "\u0E1C\x03\x02\x02\x02\u0E1C\u0E1A\x03\x02\x02\x02\u0E1C\u0E1D\x03\x02" +
    "\x02\x02\u0E1D\u012D\x03\x02\x02\x02\u0E1E\u0E1F\x07\x1F\x02\x02\u0E1F" +
    "\u0E20\x05\u0144\xA3\x02\u0E20\u0E2B\x07\xA0\x02\x02\u0E21\u0E22\t\x06" +
    "\x02\x02\u0E22\u0E28\x05\u0130\x99\x02\u0E23\u0E24\x05\u01BE\xE0\x02\u0E24" +
    "\u0E25\x05\u0130\x99\x02\u0E25\u0E27\x03\x02\x02\x02\u0E26\u0E23\x03\x02" +
    "\x02\x02\u0E27\u0E2A\x03\x02\x02\x02\u0E28\u0E26\x03\x02\x02\x02\u0E28" +
    "\u0E29\x03\x02\x02\x02\u0E29\u0E2C\x03\x02\x02\x02\u0E2A\u0E28\x03\x02" +
    "\x02\x02\u0E2B\u0E21\x03\x02\x02\x02\u0E2C\u0E2D\x03\x02\x02\x02\u0E2D" +
    "\u0E2B\x03\x02\x02\x02\u0E2D\u0E2E\x03\x02\x02\x02\u0E2E\u0E2F\x03\x02" +
    "\x02\x02\u0E2F\u0E33\t\x06\x02\x02\u0E30\u0E32\x07\xB9\x02\x02\u0E31\u0E30" +
    "\x03\x02\x02\x02\u0E32\u0E35\x03\x02\x02\x02\u0E33\u0E31\x03\x02\x02\x02" +
    "\u0E33\u0E34\x03\x02\x02\x02\u0E34\u0E43\x03\x02\x02\x02\u0E35\u0E33\x03" +
    "\x02\x02\x02\u0E36\u0E40\x05^0\x02\u0E37\u0E39\x07\xB9\x02\x02\u0E38\u0E37" +
    "\x03\x02\x02\x02\u0E39\u0E3C\x03\x02\x02\x02\u0E3A\u0E38\x03\x02\x02\x02" +
    "\u0E3A\u0E3B\x03\x02\x02\x02\u0E3B\u0E3D\x03\x02\x02\x02\u0E3C\u0E3A\x03" +
    "\x02\x02\x02\u0E3D\u0E3F\x05^0\x02\u0E3E\u0E3A\x03\x02\x02\x02\u0E3F\u0E42" +
    "\x03\x02\x02\x02\u0E40\u0E3E\x03\x02\x02\x02\u0E40\u0E41\x03\x02\x02\x02" +
    "\u0E41\u0E44\x03\x02\x02\x02\u0E42\u0E40\x03\x02\x02\x02\u0E43\u0E36\x03" +
    "\x02\x02\x02\u0E43\u0E44\x03\x02\x02\x02\u0E44\u012F\x03\x02\x02\x02\u0E45" +
    "\u0E4D\x05\u01C0\xE1\x02\u0E46\u0E4D\x05\u01A0\xD1\x02\u0E47\u0E4D\x05" +
    "\u0180\xC1\x02\u0E48\u0E4D\x05N(\x02\u0E49\u0E4D\x05R*\x02\u0E4A\u0E4D" +
    "\x05T+\x02\u0E4B\u0E4D\x05V,\x02\u0E4C\u0E45\x03\x02\x02\x02\u0E4C\u0E46" +
    "\x03\x02\x02\x02\u0E4C\u0E47\x03\x02\x02\x02\u0E4C\u0E48\x03\x02\x02\x02" +
    "\u0E4C\u0E49\x03\x02\x02\x02\u0E4C\u0E4A\x03\x02\x02\x02\u0E4C\u0E4B\x03" +
    "\x02\x02\x02\u0E4D\u0E4E\x03\x02\x02\x02\u0E4E\u0E4C\x03\x02\x02\x02\u0E4E" +
    "\u0E4F\x03\x02\x02\x02\u0E4F\u0131\x03\x02\x02\x02\u0E50\u0E51\x07!\x02" +
    "\x02\u0E51\u0E52\x05\u0144\xA3\x02\u0E52\u0E56\x07\xA0\x02\x02\u0E53\u0E55" +
    "\x07\xB9\x02\x02\u0E54\u0E53\x03\x02\x02\x02\u0E55\u0E58\x03\x02\x02\x02" +
    "\u0E56\u0E54\x03\x02\x02\x02\u0E56\u0E57\x03\x02\x02\x02\u0E57\u0E62\x03" +
    "\x02\x02\x02\u0E58\u0E56\x03\x02\x02\x02\u0E59\u0E5D\x05L\'\x02\u0E5A" +
    "\u0E5C\x07\xB9\x02\x02\u0E5B\u0E5A\x03\x02\x02\x02\u0E5C\u0E5F\x03\x02" +
    "\x02\x02\u0E5D\u0E5B\x03\x02\x02\x02\u0E5D\u0E5E\x03\x02\x02\x02\u0E5E" +
    "\u0E61\x03\x02\x02\x02\u0E5F\u0E5D\x03\x02\x02\x02\u0E60\u0E59\x03\x02" +
    "\x02\x02\u0E61\u0E64\x03\x02\x02\x02\u0E62\u0E60\x03\x02\x02\x02\u0E62" +
    "\u0E63\x03\x02\x02\x02\u0E63\u0E6D\x03\x02\x02\x02\u0E64\u0E62\x03\x02" +
    "\x02\x02\u0E65\u0E66\t\x06\x02\x02\u0E66\u0E69\x05\u01B8\xDD\x02\u0E67" +
    "\u0E68\x07\xB9\x02\x02\u0E68\u0E6A\x05\u0134\x9B\x02\u0E69\u0E67\x03\x02" +
    "\x02\x02\u0E6A\u0E6B\x03\x02\x02\x02\u0E6B\u0E69\x03\x02\x02\x02\u0E6B" +
    "\u0E6C\x03\x02\x02\x02\u0E6C\u0E6E\x03\x02\x02\x02\u0E6D\u0E65\x03\x02" +
    "\x02\x02\u0E6E\u0E6F\x03\x02\x02\x02\u0E6F\u0E6D\x03\x02\x02\x02\u0E6F" +
    "\u0E70\x03\x02\x02\x02\u0E70\u0E71\x03\x02\x02\x02\u0E71\u0E75\t\x06\x02" +
    "\x02\u0E72\u0E74\x07\xB9\x02\x02\u0E73\u0E72\x03\x02\x02\x02\u0E74\u0E77" +
    "\x03\x02\x02\x02\u0E75\u0E73\x03\x02\x02\x02\u0E75\u0E76\x03\x02\x02\x02" +
    "\u0E76\u0E85\x03\x02\x02\x02\u0E77\u0E75\x03\x02\x02\x02\u0E78\u0E82\x05" +
    "^0\x02\u0E79\u0E7B\x07\xB9\x02\x02\u0E7A\u0E79\x03\x02\x02\x02\u0E7B\u0E7E" +
    "\x03\x02\x02\x02\u0E7C\u0E7A\x03\x02\x02\x02\u0E7C\u0E7D\x03\x02\x02\x02" +
    "\u0E7D\u0E7F\x03\x02\x02\x02\u0E7E\u0E7C\x03\x02\x02\x02\u0E7F\u0E81\x05" +
    "^0\x02\u0E80\u0E7C\x03\x02\x02\x02\u0E81\u0E84\x03\x02\x02\x02\u0E82\u0E80" +
    "\x03\x02\x02\x02\u0E82\u0E83\x03\x02\x02\x02\u0E83\u0E86\x03\x02\x02\x02" +
    "\u0E84\u0E82\x03\x02\x02\x02\u0E85\u0E78\x03\x02\x02\x02\u0E85\u0E86\x03" +
    "\x02\x02\x02\u0E86\u0133\x03\x02\x02\x02\u0E87\u0E88\x07\x92\x02\x02\u0E88" +
    "\u0E89\x05\u01B8\xDD\x02\u0E89\u0E8B\x07\xA0\x02\x02\u0E8A\u0E8C\x05\u0142" +
    "\xA2\x02\u0E8B\u0E8A\x03\x02\x02\x02\u0E8B\u0E8C\x03\x02\x02\x02\u0E8C" +
    "\u0135\x03\x02\x02\x02\u0E8D\u0E8E\x07\"\x02\x02\u0E8E\u0E8F\x05\u0144" +
    "\xA3\x02\u0E8F\u0E93\x07\xA0\x02\x02\u0E90\u0E92\x07\xB9\x02\x02\u0E91" +
    "\u0E90\x03\x02\x02\x02\u0E92\u0E95\x03\x02\x02\x02\u0E93\u0E91\x03\x02" +
    "\x02\x02\u0E93\u0E94\x03\x02\x02\x02\u0E94\u0E9F\x03\x02\x02\x02\u0E95" +
    "\u0E93\x03\x02\x02\x02\u0E96\u0E9A\x05L\'\x02\u0E97\u0E99\x07\xB9\x02" +
    "\x02\u0E98\u0E97\x03\x02\x02\x02\u0E99\u0E9C\x03\x02\x02\x02\u0E9A\u0E98" +
    "\x03\x02\x02\x02\u0E9A\u0E9B\x03\x02\x02\x02\u0E9B\u0E9E\x03\x02\x02\x02" +
    "\u0E9C\u0E9A\x03\x02\x02\x02\u0E9D\u0E96\x03\x02\x02\x02\u0E9E\u0EA1\x03" +
    "\x02\x02\x02\u0E9F\u0E9D\x03\x02\x02\x02\u0E9F\u0EA0\x03\x02\x02\x02\u0EA0" +
    "\u0EB1\x03\x02\x02\x02\u0EA1\u0E9F\x03\x02\x02\x02\u0EA2\u0EA4\t\x06\x02" +
    "\x02\u0EA3\u0EA5\x05\u01B8\xDD\x02\u0EA4\u0EA3\x03\x02\x02\x02\u0EA4\u0EA5" +
    "\x03\x02\x02\x02\u0EA5\u0EAD\x03\x02\x02\x02\u0EA6\u0EA8\x07\xB9\x02\x02" +
    "\u0EA7\u0EA6\x03\x02\x02\x02\u0EA8\u0EAB\x03\x02\x02\x02\u0EA9\u0EA7\x03" +
    "\x02\x02\x02\u0EA9\u0EAA\x03\x02\x02\x02\u0EAA\u0EAC\x03\x02\x02\x02\u0EAB" +
    "\u0EA9\x03\x02\x02\x02\u0EAC\u0EAE\x05\u0134\x9B\x02\u0EAD\u0EA9\x03\x02" +
    "\x02\x02\u0EAE\u0EAF\x03\x02\x02\x02\u0EAF\u0EAD\x03\x02\x02\x02\u0EAF" +
    "\u0EB0\x03\x02\x02\x02\u0EB0\u0EB2\x03\x02\x02\x02\u0EB1\u0EA2\x03\x02" +
    "\x02\x02\u0EB2\u0EB3\x03\x02\x02\x02\u0EB3\u0EB1\x03\x02\x02\x02\u0EB3" +
    "\u0EB4\x03\x02\x02\x02\u0EB4\u0EB5\x03\x02\x02\x02\u0EB5\u0EB6\t\x06\x02" +
    "\x02\u0EB6\u0137\x03\x02\x02\x02\u0EB7\u0EB8\x07#\x02\x02\u0EB8\u0EB9" +
    "\x05\u0144\xA3\x02\u0EB9\u0EBD\x07\xA0\x02\x02\u0EBA\u0EBC\x07\xB9\x02" +
    "\x02\u0EBB\u0EBA\x03\x02\x02\x02\u0EBC\u0EBF\x03\x02\x02\x02\u0EBD\u0EBB" +
    "\x03\x02\x02\x02\u0EBD\u0EBE\x03\x02\x02\x02\u0EBE\u0EC9\x03\x02\x02\x02" +
    "\u0EBF\u0EBD\x03\x02\x02\x02\u0EC0\u0EC4\x05L\'\x02\u0EC1\u0EC3\x07\xB9" +
    "\x02\x02\u0EC2\u0EC1\x03\x02\x02\x02\u0EC3\u0EC6\x03\x02\x02\x02\u0EC4" +
    "\u0EC2\x03\x02\x02\x02\u0EC4\u0EC5\x03\x02\x02\x02\u0EC5\u0EC8\x03\x02" +
    "\x02\x02\u0EC6\u0EC4\x03\x02\x02\x02\u0EC7\u0EC0\x03\x02\x02\x02\u0EC8" +
    "\u0ECB\x03\x02\x02\x02\u0EC9\u0EC7\x03\x02\x02\x02\u0EC9\u0ECA\x03\x02" +
    "\x02\x02\u0ECA\u0ED4\x03\x02\x02\x02\u0ECB\u0EC9\x03\x02\x02\x02\u0ECC" +
    "\u0ECD\t\x06\x02\x02\u0ECD\u0ED0\x05\u01B8\xDD\x02\u0ECE\u0ECF\x07\xB9" +
    "\x02\x02\u0ECF\u0ED1\x05\u0134\x9B\x02\u0ED0\u0ECE\x03\x02\x02\x02\u0ED1" +
    "\u0ED2\x03\x02\x02\x02\u0ED2\u0ED0\x03\x02\x02\x02\u0ED2\u0ED3\x03\x02" +
    "\x02\x02\u0ED3\u0ED5\x03\x02\x02\x02\u0ED4\u0ECC\x03\x02\x02\x02\u0ED5" +
    "\u0ED6\x03\x02\x02\x02\u0ED6\u0ED4\x03\x02\x02\x02\u0ED6\u0ED7\x03\x02" +
    "\x02\x02\u0ED7\u0ED8\x03\x02\x02\x02\u0ED8\u0ED9\t\x06\x02\x02\u0ED9\u0139" +
    "\x03\x02\x02\x02\u0EDA\u0EDB\x07$\x02\x02\u0EDB\u0EDC\x05\u0144\xA3\x02" +
    "\u0EDC\u0EE0\x07\xA0\x02\x02\u0EDD\u0EDF\x07\xB9\x02\x02\u0EDE\u0EDD\x03" +
    "\x02\x02\x02\u0EDF\u0EE2\x03\x02\x02\x02\u0EE0\u0EDE\x03\x02\x02\x02\u0EE0" +
    "\u0EE1\x03\x02\x02\x02\u0EE1\u0EEC\x03\x02\x02\x02\u0EE2\u0EE0\x03\x02" +
    "\x02\x02\u0EE3\u0EE7\x05L\'\x02\u0EE4\u0EE6\x07\xB9\x02\x02\u0EE5\u0EE4" +
    "\x03\x02\x02\x02\u0EE6\u0EE9\x03\x02\x02\x02\u0EE7\u0EE5\x03\x02\x02\x02" +
    "\u0EE7\u0EE8\x03\x02\x02\x02\u0EE8\u0EEB\x03\x02\x02\x02\u0EE9\u0EE7\x03" +
    "\x02\x02\x02\u0EEA\u0EE3\x03\x02\x02\x02\u0EEB\u0EEE\x03\x02\x02\x02\u0EEC" +
    "\u0EEA\x03\x02\x02\x02\u0EEC\u0EED\x03\x02\x02\x02\u0EED\u0EF7\x03\x02" +
    "\x02\x02\u0EEE\u0EEC\x03\x02\x02\x02\u0EEF\u0EF0\t\x06\x02\x02\u0EF0\u0EF3" +
    "\x05\u01B8\xDD\x02\u0EF1\u0EF2\x07\xB9\x02\x02\u0EF2\u0EF4\x05\u0134\x9B" +
    "\x02\u0EF3\u0EF1\x03\x02\x02\x02\u0EF4\u0EF5\x03\x02\x02\x02\u0EF5\u0EF3" +
    "\x03\x02\x02\x02\u0EF5\u0EF6\x03\x02\x02\x02\u0EF6\u0EF8\x03\x02\x02\x02" +
    "\u0EF7\u0EEF\x03\x02\x02\x02\u0EF8\u0EF9\x03\x02\x02\x02\u0EF9\u0EF7\x03" +
    "\x02\x02\x02\u0EF9\u0EFA\x03\x02\x02\x02\u0EFA\u0EFB\x03\x02\x02\x02\u0EFB" +
    "\u0EFC\t\x06\x02\x02\u0EFC\u013B\x03\x02\x02\x02\u0EFD\u0EFE\x07%\x02" +
    "\x02\u0EFE\u0EFF\x05\u0144\xA3\x02\u0EFF\u0F03\x07\xA0\x02\x02\u0F00\u0F02" +
    "\x07\xB9\x02\x02\u0F01\u0F00\x03\x02\x02\x02\u0F02\u0F05\x03\x02\x02\x02" +
    "\u0F03\u0F01\x03\x02\x02\x02\u0F03\u0F04\x03\x02\x02\x02\u0F04\u0F0F\x03" +
    "\x02\x02\x02\u0F05\u0F03\x03\x02\x02\x02\u0F06\u0F0A\x05L\'\x02\u0F07" +
    "\u0F09\x07\xB9\x02\x02\u0F08\u0F07\x03\x02\x02\x02\u0F09\u0F0C\x03\x02" +
    "\x02\x02\u0F0A\u0F08\x03\x02\x02\x02\u0F0A\u0F0B\x03\x02\x02\x02\u0F0B" +
    "\u0F0E\x03\x02\x02\x02\u0F0C\u0F0A\x03\x02\x02\x02\u0F0D\u0F06\x03\x02" +
    "\x02\x02\u0F0E\u0F11\x03\x02\x02\x02\u0F0F\u0F0D\x03\x02\x02\x02\u0F0F" +
    "\u0F10\x03\x02\x02\x02\u0F10\u0F1A\x03\x02\x02\x02\u0F11\u0F0F\x03\x02" +
    "\x02\x02\u0F12\u0F13\t\x06\x02\x02\u0F13\u0F16\x05\u01B8\xDD\x02\u0F14" +
    "\u0F15\x07\xB9\x02\x02\u0F15\u0F17\x05\u0134\x9B\x02\u0F16\u0F14\x03\x02" +
    "\x02\x02\u0F17\u0F18\x03\x02\x02\x02\u0F18\u0F16\x03\x02\x02\x02\u0F18" +
    "\u0F19\x03\x02\x02\x02\u0F19\u0F1B\x03\x02\x02\x02\u0F1A\u0F12\x03\x02" +
    "\x02\x02\u0F1B\u0F1C\x03\x02\x02\x02\u0F1C\u0F1A\x03\x02\x02\x02\u0F1C" +
    "\u0F1D\x03\x02\x02\x02\u0F1D\u0F1E\x03\x02\x02\x02\u0F1E\u0F1F\t\x06\x02" +
    "\x02\u0F1F\u013D\x03\x02\x02\x02\u0F20\u0F21\x07 \x02\x02\u0F21\u0F22" +
    "\x05\u0144\xA3\x02\u0F22\u0F26\x07\xA0\x02\x02\u0F23\u0F25\x07\xB9\x02" +
    "\x02\u0F24\u0F23\x03\x02\x02\x02\u0F25\u0F28\x03\x02\x02\x02\u0F26\u0F24" +
    "\x03\x02\x02\x02\u0F26\u0F27\x03\x02\x02\x02\u0F27\u0F32\x03\x02\x02\x02" +
    "\u0F28\u0F26\x03\x02\x02\x02\u0F29\u0F2D\x05L\'\x02\u0F2A\u0F2C\x07\xB9" +
    "\x02\x02\u0F2B\u0F2A\x03\x02\x02\x02\u0F2C\u0F2F\x03\x02\x02\x02\u0F2D" +
    "\u0F2B\x03\x02\x02\x02\u0F2D\u0F2E\x03\x02\x02\x02\u0F2E\u0F31\x03\x02" +
    "\x02\x02\u0F2F\u0F2D\x03\x02\x02\x02\u0F30\u0F29\x03\x02\x02\x02\u0F31" +
    "\u0F34\x03\x02\x02\x02\u0F32\u0F30\x03\x02\x02\x02\u0F32\u0F33\x03\x02" +
    "\x02\x02\u0F33\u0F42\x03\x02\x02\x02\u0F34\u0F32\x03\x02\x02\x02\u0F35" +
    "\u0F36\t\x06\x02\x02\u0F36\u0F3E\x05\u0140\xA1\x02\u0F37\u0F39\x07\xB9" +
    "\x02\x02\u0F38\u0F37\x03\x02\x02\x02\u0F39\u0F3C\x03\x02\x02\x02\u0F3A" +
    "\u0F38\x03\x02\x02\x02\u0F3A\u0F3B\x03\x02\x02\x02\u0F3B\u0F3D\x03\x02" +
    "\x02\x02\u0F3C\u0F3A\x03\x02\x02\x02\u0F3D\u0F3F\x05\u0134\x9B\x02\u0F3E" +
    "\u0F3A\x03\x02\x02\x02\u0F3F\u0F40\x03\x02\x02\x02\u0F40\u0F3E\x03\x02" +
    "\x02\x02\u0F40\u0F41\x03\x02\x02\x02\u0F41\u0F43\x03\x02\x02\x02\u0F42" +
    "\u0F35\x03\x02\x02\x02\u0F43\u0F44\x03\x02\x02\x02\u0F44\u0F42\x03\x02" +
    "\x02\x02\u0F44\u0F45\x03\x02\x02\x02\u0F45\u0F46\x03\x02\x02\x02\u0F46" +
    "\u0F4A\t\x06\x02\x02\u0F47\u0F49\x07\xB9\x02\x02\u0F48\u0F47\x03\x02\x02" +
    "\x02\u0F49\u0F4C\x03\x02\x02\x02\u0F4A\u0F48\x03\x02\x02\x02\u0F4A\u0F4B" +
    "\x03\x02\x02\x02\u0F4B\u0F5A\x03\x02\x02\x02\u0F4C\u0F4A\x03\x02\x02\x02" +
    "\u0F4D\u0F57\x05^0\x02\u0F4E\u0F50\x07\xB9\x02\x02\u0F4F\u0F4E\x03\x02" +
    "\x02\x02\u0F50\u0F53\x03\x02\x02\x02\u0F51\u0F4F\x03\x02\x02\x02\u0F51" +
    "\u0F52\x03\x02\x02\x02\u0F52\u0F54\x03\x02\x02\x02\u0F53\u0F51\x03\x02" +
    "\x02\x02\u0F54\u0F56\x05^0\x02\u0F55\u0F51\x03\x02\x02\x02\u0F56\u0F59" +
    "\x03\x02\x02\x02\u0F57\u0F55\x03\x02\x02\x02\u0F57\u0F58\x03\x02\x02\x02" +
    "\u0F58\u0F5B\x03\x02\x02\x02\u0F59\u0F57\x03\x02\x02\x02\u0F5A\u0F4D\x03" +
    "\x02\x02\x02\u0F5A\u0F5B\x03\x02\x02\x02\u0F5B\u013F\x03\x02\x02\x02\u0F5C" +
    "\u0F5E\n\x07\x02\x02\u0F5D\u0F5C\x03\x02\x02\x02\u0F5E\u0F5F\x03\x02\x02" +
    "\x02\u0F5F\u0F5D\x03\x02\x02\x02\u0F5F\u0F60\x03\x02\x02\x02\u0F60\u0141" +
    "\x03\x02\x02\x02\u0F61\u0F62\x07\xCE\x02\x02\u0F62\u0F63\x07\xB7\x02\x02" +
    "\u0F63\u0F64\x07\xA0\x02\x02\u0F64\u0143\x03\x02\x02\x02\u0F65\u0F67\x05" +
    "\u0146\xA4\x02\u0F66\u0F65\x03\x02\x02\x02\u0F67\u0F6A\x03\x02\x02\x02" +
    "\u0F68\u0F66\x03\x02\x02\x02\u0F68\u0F69\x03\x02\x02\x02\u0F69\u0F70\x03" +
    "\x02\x02\x02\u0F6A\u0F68\x03\x02\x02\x02\u0F6B\u0F6F\x07\u0112\x02\x02" +
    "\u0F6C\u0F6F\x07\u0113\x02\x02\u0F6D\u0F6F\x05\u0148\xA5\x02\u0F6E\u0F6B" +
    "\x03\x02\x02\x02\u0F6E\u0F6C\x03\x02\x02\x02\u0F6E\u0F6D\x03\x02\x02\x02" +
    "\u0F6F\u0F72\x03\x02\x02\x02\u0F70\u0F6E\x03\x02\x02\x02\u0F70\u0F71\x03" +
    "\x02\x02\x02\u0F71\u0145\x03\x02\x02\x02\u0F72\u0F70\x03\x02\x02\x02\u0F73" +
    "\u0F74\t\b\x02\x02\u0F74\u0147\x03\x02\x02\x02\u0F75\u0F7F\x05\u014C\xA7" +
    "\x02\u0F76\u0F7F\x05\u0184\xC3\x02\u0F77\u0F7F\x05\u014E\xA8\x02\u0F78" +
    "\u0F7F\x05\u0150\xA9\x02\u0F79\u0F7F\x05\u0152\xAA\x02\u0F7A\u0F7F\x05" +
    "\u0154\xAB\x02\u0F7B\u0F7F\x05\u0156\xAC\x02\u0F7C\u0F7F\x05\u0158\xAD" +
    "\x02\u0F7D\u0F7F\x07\xE7\x02\x02\u0F7E\u0F75\x03\x02\x02\x02\u0F7E\u0F76" +
    "\x03\x02\x02\x02\u0F7E\u0F77\x03\x02\x02\x02\u0F7E\u0F78\x03\x02\x02\x02" +
    "\u0F7E\u0F79\x03\x02\x02\x02\u0F7E\u0F7A\x03\x02\x02\x02\u0F7E\u0F7B\x03" +
    "\x02\x02\x02\u0F7E\u0F7C\x03\x02\x02\x02\u0F7E\u0F7D\x03\x02\x02\x02\u0F7F" +
    "\u0149\x03\x02\x02\x02\u0F80\u0F86\x07\u0110\x02\x02\u0F81\u0F86\x07\u0111" +
    "\x02\x02\u0F82\u0F86\x07\u0112\x02\x02\u0F83\u0F86\x07\u0113\x02\x02\u0F84" +
    "\u0F86\x03\x02\x02\x02\u0F85\u0F80\x03\x02\x02\x02\u0F85\u0F81\x03\x02" +
    "\x02\x02\u0F85\u0F82\x03\x02\x02\x02\u0F85\u0F83\x03\x02\x02\x02\u0F85" +
    "\u0F84\x03\x02\x02\x02\u0F86\u014B\x03\x02\x02\x02\u0F87\u0F8A\x07\xDE" +
    "\x02\x02\u0F88\u0F8B\x07\xB2\x02\x02\u0F89\u0F8B\x07\u0123\x02\x02\u0F8A" +
    "\u0F88\x03\x02\x02\x02\u0F8A\u0F89\x03\x02\x02\x02\u0F8A\u0F8B\x03\x02" +
    "\x02\x02\u0F8B\u0F96\x03\x02\x02\x02\u0F8C\u0F8E\x07\xF5\x02\x02\u0F8D" +
    "\u0F8F\x07\xB2\x02\x02\u0F8E\u0F8D\x03\x02\x02\x02\u0F8E\u0F8F\x03\x02" +
    "\x02\x02\u0F8F\u0F96\x03\x02\x02\x02\u0F90\u0F92\x07\xDF\x02\x02\u0F91" +
    "\u0F93\x07\xB2\x02\x02\u0F92\u0F91\x03\x02\x02\x02\u0F92\u0F93\x03\x02" +
    "\x02\x02\u0F93\u0F96\x03\x02\x02\x02\u0F94\u0F96\x07\xE0\x02\x02\u0F95" +
    "\u0F87\x03\x02\x02\x02\u0F95\u0F8C\x03\x02\x02\x02\u0F95\u0F90\x03\x02" +
    "\x02\x02\u0F95\u0F94\x03\x02\x02\x02\u0F96\u014D\x03\x02\x02\x02\u0F97" +
    "\u0F9A\t\t\x02\x02\u0F98\u0F99\x07\xA1\x02\x02\u0F99\u0F9B\x07\xB4\x02" +
    "\x02\u0F9A\u0F98\x03\x02\x02\x02\u0F9A\u0F9B\x03\x02\x02\x02\u0F9B\u014F" +
    "\x03\x02\x02\x02\u0F9C\u0F9D\t\n\x02\x02\u0F9D\u0151\x03\x02\x02\x02\u0F9E" +
    "\u0F9F\t\v\x02\x02\u0F9F\u0153\x03\x02\x02\x02\u0FA0\u0FA1\t\f\x02\x02" +
    "\u0FA1\u0155\x03\x02\x02\x02\u0FA2\u0FA3\t\r\x02\x02\u0FA3\u0157\x03\x02" +
    "\x02\x02\u0FA4\u0FA5\t\x0E\x02\x02\u0FA5\u0159\x03\x02\x02\x02\u0FA6\u0FA7" +
    "\t\x0F\x02\x02\u0FA7\u015B\x03\x02\x02\x02\u0FA8\u0FA9\t\x10\x02\x02\u0FA9" +
    "\u015D\x03\x02\x02\x02\u0FAA\u0FAB\t\x11\x02\x02\u0FAB\u015F\x03\x02\x02" +
    "\x02\u0FAC\u0FAD\t\x12\x02\x02\u0FAD\u0161\x03\x02\x02\x02\u0FAE\u0FB1" +
    "\x07\xEC\x02\x02\u0FAF\u0FB0\x07\xA1\x02\x02\u0FB0\u0FB2\x07\xB4\x02\x02" +
    "\u0FB1\u0FAF\x03\x02\x02\x02\u0FB1\u0FB2\x03\x02\x02\x02\u0FB2\u0FBE\x03" +
    "\x02\x02\x02\u0FB3\u0FB6\x07\xFF\x02\x02\u0FB4\u0FB5\x07\xA1\x02\x02\u0FB5" +
    "\u0FB7\x07\xB4\x02\x02\u0FB6\u0FB4\x03\x02\x02\x02\u0FB6\u0FB7\x03\x02" +
    "\x02\x02\u0FB7\u0FBE\x03\x02\x02\x02\u0FB8\u0FBB\x07\u010C\x02\x02\u0FB9" +
    "\u0FBA\x07\xA1\x02\x02\u0FBA\u0FBC\x07\xB4\x02\x02\u0FBB\u0FB9\x03\x02" +
    "\x02\x02\u0FBB\u0FBC\x03\x02\x02\x02\u0FBC\u0FBE\x03\x02\x02\x02\u0FBD" +
    "\u0FAE\x03\x02\x02\x02\u0FBD\u0FB3\x03\x02\x02\x02\u0FBD\u0FB8\x03\x02" +
    "\x02\x02\u0FBE\u0163\x03\x02\x02\x02\u0FBF\u0FC0\t\x13\x02\x02\u0FC0\u0165" +
    "\x03\x02\x02\x02\u0FC1\u0FC2\x05\u015A\xAE\x02\u0FC2\u0FC3\x07\xA1\x02" +
    "\x02\u0FC3\u0FC4\x05\u018C\xC7\x02\u0FC4\u0FC5\x07\xA0\x02\x02\u0FC5\u0FC8" +
    "\x03\x02\x02\x02\u0FC6\u0FC8\x07\xB5\x02\x02\u0FC7\u0FC1\x03\x02\x02\x02" +
    "\u0FC7\u0FC6\x03\x02\x02\x02\u0FC8\u0167\x03\x02\x02\x02\u0FC9\u0FCA\x05" +
    "\u015C\xAF\x02\u0FCA\u0FCB\x07\xA1\x02\x02\u0FCB\u0FCC\x05\u018C\xC7\x02" +
    "\u0FCC\u0FD1\x07\xA0\x02\x02\u0FCD\u0FCE\x07\xD1\x02\x02\u0FCE\u0FCF\x05" +
    "\u01C0\xE1\x02\u0FCF\u0FD0\x07\xA0\x02\x02\u0FD0\u0FD2\x03\x02\x02\x02" +
    "\u0FD1\u0FCD\x03\x02\x02\x02\u0FD1\u0FD2\x03\x02\x02\x02\u0FD2\u0169\x03" +
    "\x02\x02\x02\u0FD3\u0FD4\x05\u0160\xB1\x02\u0FD4\u0FD5\x07\xA1\x02\x02" +
    "\u0FD5\u0FD6\x05\u018C\xC7\x02\u0FD6\u0FDB\x07\xA0\x02\x02\u0FD7\u0FD8" +
    "\x07\xD1\x02\x02\u0FD8\u0FD9\x05\u01C0\xE1\x02\u0FD9\u0FDA\x07\xA0\x02" +
    "\x02\u0FDA\u0FDC\x03\x02\x02\x02\u0FDB\u0FD7\x03\x02\x02\x02\u0FDB\u0FDC" +
    "\x03\x02\x02\x02\u0FDC\u016B\x03\x02\x02\x02\u0FDD\u0FDE\x05\u015E\xB0" +
    "\x02\u0FDE\u0FE1\x07\xA1\x02\x02\u0FDF\u0FE2\x05\u018C\xC7\x02\u0FE0\u0FE2" +
    "\x05\u018A\xC6\x02\u0FE1\u0FDF\x03\x02\x02\x02\u0FE1\u0FE0\x03\x02\x02" +
    "\x02\u0FE2\u0FE3\x03\x02\x02\x02\u0FE3\u0FE8\x07\xA0\x02\x02\u0FE4\u0FE5" +
    "\x07\xD1\x02\x02\u0FE5\u0FE6\x05\u01C0\xE1\x02\u0FE6\u0FE7\x07\xA0\x02" +
    "\x02\u0FE7\u0FE9\x03\x02\x02\x02\u0FE8\u0FE4\x03\x02\x02\x02\u0FE8\u0FE9" +
    "\x03\x02\x02\x02\u0FE9\u016D\x03\x02\x02\x02\u0FEA\u0FEE\x05\u0170\xB9" +
    "\x02\u0FEB\u0FED\x05\u0188\xC5\x02\u0FEC\u0FEB\x03\x02\x02\x02\u0FED\u0FF0" +
    "\x03\x02\x02\x02\u0FEE\u0FEC\x03\x02\x02\x02\u0FEE\u0FEF\x03\x02\x02\x02" +
    "\u0FEF\u016F\x03\x02\x02\x02\u0FF0\u0FEE\x03\x02\x02\x02\u0FF1\u0FF2\x05" +
    "\u0164\xB3\x02\u0FF2\u0FF6\x07\xA1\x02\x02\u0FF3\u0FF5\x07\x04\x02\x02" +
    "\u0FF4\u0FF3\x03\x02\x02\x02\u0FF5\u0FF8\x03\x02\x02\x02\u0FF6\u0FF4\x03" +
    "\x02\x02\x02\u0FF6\u0FF7\x03\x02\x02\x02\u0FF7\u0FF9\x03\x02\x02\x02\u0FF8" +
    "\u0FF6\x03\x02\x02\x02\u0FF9\u0FFA\x05\u018C\xC7\x02\u0FFA\u0FFB\x07\xA0" +
    "\x02\x02\u0FFB\u0171\x03\x02\x02\x02\u0FFC\u1000\x05\u0174\xBB\x02\u0FFD" +
    "\u0FFF\x05\u0188\xC5\x02\u0FFE\u0FFD\x03\x02\x02\x02\u0FFF\u1002\x03\x02" +
    "\x02\x02\u1000\u0FFE\x03\x02\x02\x02\u1000\u1001\x03\x02\x02\x02\u1001" +
    "\u0173\x03\x02\x02\x02\u1002\u1000\x03\x02\x02\x02\u1003\u1004\x05\u0162" +
    "\xB2\x02\u1004\u1005\x07\xA1\x02\x02\u1005\u1006\x05\u018C\xC7\x02\u1006" +
    "\u100B\x07\xA0\x02\x02\u1007\u1008\x07\xD1\x02\x02\u1008\u1009\x05\u01C0" +
    "\xE1\x02\u1009\u100A\x07\xA0\x02\x02\u100A\u100C\x03\x02\x02\x02\u100B" +
    "\u1007\x03\x02\x02\x02\u100B\u100C\x03\x02\x02\x02\u100C\u0175\x03\x02" +
    "\x02\x02\u100D\u1011\x05\u0178\xBD\x02\u100E\u1010\x05\u017C\xBF\x02\u100F" +
    "\u100E\x03\x02\x02\x02\u1010\u1013\x03\x02\x02\x02\u1011\u100F\x03\x02" +
    "\x02\x02\u1011\u1012\x03\x02\x02\x02\u1012\u1016\x03\x02\x02\x02\u1013" +
    "\u1011\x03\x02\x02\x02\u1014\u1015\x07\xB9\x02\x02\u1015\u1017\x07\xD3" +
    "\x02\x02\u1016\u1014\x03\x02\x02\x02\u1016\u1017\x03\x02\x02\x02\u1017" +
    "\u0177\x03\x02\x02\x02\u1018\u1019\x05\u017A\xBE\x02\u1019\u101D\x07\xA1" +
    "\x02\x02\u101A\u101C\x07\x04\x02\x02\u101B\u101A\x03\x02\x02\x02\u101C" +
    "\u101F\x03\x02\x02\x02\u101D\u101B\x03\x02\x02\x02\u101D\u101E\x03\x02" +
    "\x02\x02\u101E\u1020\x03\x02\x02\x02\u101F\u101D\x03\x02\x02\x02\u1020" +
    "\u1021\x05\u018C\xC7\x02\u1021\u1022\x07\xA0\x02\x02\u1022\u0179\x03\x02" +
    "\x02\x02\u1023\u1026\x07\xE9\x02\x02\u1024\u1027\x07\xB2\x02\x02\u1025" +
    "\u1027\x07\u0123\x02\x02\u1026\u1024\x03\x02\x02\x02\u1026\u1025\x03\x02" +
    "\x02\x02\u1026\u1027\x03\x02\x02\x02\u1027\u1032\x03\x02\x02\x02\u1028" +
    "\u102A\x07\xFE\x02\x02\u1029\u102B\x07\xB2\x02\x02\u102A\u1029\x03\x02" +
    "\x02\x02\u102A\u102B\x03\x02\x02\x02\u102B\u1032\x03\x02\x02\x02\u102C" +
    "\u102E\x07\xEA\x02\x02\u102D\u102F\x07\xB2\x02\x02\u102E\u102D\x03\x02" +
    "\x02\x02\u102E\u102F\x03\x02\x02\x02\u102F\u1032\x03\x02\x02\x02\u1030" +
    "\u1032\x07\xEB\x02\x02\u1031\u1023\x03\x02\x02\x02\u1031\u1028\x03\x02" +
    "\x02\x02\u1031\u102C\x03\x02\x02\x02\u1031\u1030\x03\x02\x02\x02\u1032" +
    "\u017B\x03\x02\x02\x02\u1033\u1034\x07\xCF\x02\x02\u1034\u1035\x07\xA1" +
    "\x02\x02\u1035\u1036\x05\u018C\xC7\x02\u1036\u1037\x07\xA0\x02\x02\u1037" +
    "\u1045\x03\x02\x02\x02\u1038\u1039\t\x14\x02\x02\u1039\u103A\x07\xA1\x02" +
    "\x02\u103A\u103B\x07\xB7\x02\x02\u103B\u1045\x07\xA0\x02\x02\u103C\u1040" +
    "\t\x15\x02\x02\u103D\u103F\v\x02\x02\x02\u103E\u103D\x03\x02\x02\x02\u103F" +
    "\u1042\x03\x02\x02\x02\u1040\u1041\x03\x02\x02\x02\u1040\u103E\x03\x02" +
    "\x02\x02\u1041\u1043\x03\x02\x02\x02\u1042\u1040\x03\x02\x02\x02\u1043" +
    "\u1045\x07\xA0\x02\x02\u1044\u1033\x03\x02\x02\x02\u1044\u1038\x03\x02" +
    "\x02\x02\u1044\u103C\x03\x02\x02\x02\u1045\u017D\x03\x02\x02\x02\u1046" +
    "\u1047\x07\xCF\x02\x02\u1047\u1048\x07\xA1\x02\x02\u1048\u1049\x05\u018C" +
    "\xC7\x02\u1049\u104A\x07\xA0\x02\x02\u104A\u1058\x03\x02\x02\x02\u104B" +
    "\u104C\t\x14\x02\x02\u104C\u104D\x07\xA1\x02\x02\u104D\u104E\x07\xB7\x02" +
    "\x02\u104E\u1058\x07\xA0\x02\x02\u104F\u1053\t\x15\x02\x02\u1050\u1052" +
    "\v\x02\x02\x02\u1051\u1050\x03\x02\x02\x02\u1052\u1055\x03\x02\x02\x02" +
    "\u1053\u1054\x03\x02\x02\x02\u1053\u1051\x03\x02\x02\x02\u1054\u1056\x03" +
    "\x02\x02\x02\u1055\u1053\x03\x02\x02\x02\u1056\u1058\x07\xA0\x02\x02\u1057" +
    "\u1046\x03\x02\x02\x02\u1057\u104B\x03\x02\x02\x02\u1057\u104F\x03\x02" +
    "\x02\x02\u1058\u017F\x03\x02\x02\x02\u1059\u105D\x05\u0182\xC2\x02\u105A" +
    "\u105C\x05\u0188\xC5\x02\u105B\u105A\x03\x02\x02\x02\u105C\u105F\x03\x02" +
    "\x02\x02\u105D\u105B\x03\x02\x02\x02\u105D\u105E\x03\x02\x02\x02\u105E" +
    "\u0181\x03\x02\x02\x02\u105F\u105D\x03\x02\x02\x02\u1060\u1061\x05\u0186" +
    "\xC4\x02\u1061\u1062\x07\xA1\x02\x02\u1062\u1063\x05\u018C\xC7\x02\u1063" +
    "\u1068\x07\xA0\x02\x02\u1064\u1065\x07\xD1\x02\x02\u1065\u1066\x05\u01C0" +
    "\xE1\x02\u1066\u1067\x07\xA0\x02\x02\u1067\u1069\x03\x02\x02\x02\u1068" +
    "\u1064\x03\x02\x02\x02\u1068\u1069\x03\x02\x02\x02\u1069\u0183\x03\x02" +
    "\x02\x02\u106A\u106D\x07\xDD\x02\x02\u106B\u106C\x07\xA1\x02\x02\u106C" +
    "\u106E\x07\xB3\x02\x02\u106D\u106B\x03\x02\x02\x02\u106D\u106E\x03\x02" +
    "\x02\x02\u106E\u1075\x03\x02\x02\x02\u106F\u1072\x07\xF4\x02\x02\u1070" +
    "\u1071\x07\xA1\x02\x02\u1071\u1073\x07\xB3\x02\x02\u1072\u1070\x03\x02" +
    "\x02\x02\u1072\u1073\x03\x02\x02\x02\u1073\u1075\x03\x02\x02\x02\u1074" +
    "\u106A\x03\x02\x02\x02\u1074\u106F\x03\x02\x02\x02\u1075\u0185\x03\x02" +
    "\x02\x02\u1076\u1079\x07\xE8\x02\x02\u1077\u1078\x07\xA1\x02\x02\u1078" +
    "\u107A\x07\xB3\x02\x02\u1079\u1077\x03\x02\x02\x02\u1079\u107A\x03\x02" +
    "\x02\x02\u107A\u1086\x03\x02\x02\x02\u107B\u107E\x07\xFD\x02\x02\u107C" +
    "\u107D\x07\xA1\x02\x02\u107D\u107F\x07\xB3\x02\x02\u107E\u107C\x03\x02" +
    "\x02\x02\u107E\u107F\x03\x02\x02\x02\u107F\u1086\x03\x02\x02\x02\u1080" +
    "\u1083\x07\u010D\x02\x02\u1081\u1082\x07\xA1\x02\x02\u1082\u1084\x07\xB3" +
    "\x02\x02\u1083\u1081\x03\x02\x02\x02\u1083\u1084\x03\x02\x02\x02\u1084" +
    "\u1086\x03\x02\x02\x02\u1085\u1076\x03\x02\x02\x02\u1085\u107B\x03\x02" +
    "\x02\x02\u1085\u1080\x03\x02\x02\x02\u1086\u0187\x03\x02\x02\x02\u1087" +
    "\u1088\x07\x99\x02\x02\u1088\u108B\x05\u01B8\xDD\x02\u1089\u108B\x07\xCF" +
    "\x02\x02\u108A\u1087\x03\x02\x02\x02\u108A\u1089\x03\x02\x02\x02\u108B" +
    "\u108C\x03\x02\x02\x02\u108C\u1090\x07\xA1\x02\x02\u108D\u108F\x07\x04" +
    "\x02\x02\u108E\u108D\x03\x02\x02\x02\u108F\u1092\x03\x02\x02\x02\u1090" +
    "\u108E\x03\x02\x02\x02\u1090\u1091\x03\x02\x02\x02\u1091\u1095\x03\x02" +
    "\x02\x02\u1092\u1090\x03\x02\x02\x02\u1093\u1096\x05\u01B8\xDD\x02\u1094" +
    "\u1096\x07\xB9\x02\x02\u1095\u1093\x03\x02\x02\x02\u1095\u1094\x03\x02" +
    "\x02\x02\u1096\u1097\x03\x02\x02\x02\u1097\u1095\x03\x02\x02\x02\u1097" +
    "\u1098\x03\x02\x02\x02\u1098\u1099\x03\x02\x02\x02\u1099\u10A7\x07\xA0" +
    "\x02\x02\u109A\u109B\t\x14\x02\x02\u109B\u109C\x07\xA1\x02\x02\u109C\u109D" +
    "\x07\xB7\x02\x02\u109D\u10A7\x07\xA0\x02\x02\u109E\u10A2\t\x15\x02\x02" +
    "\u109F\u10A1\v\x02\x02\x02\u10A0\u109F\x03\x02\x02\x02\u10A1\u10A4\x03" +
    "\x02\x02\x02\u10A2\u10A3\x03\x02\x02\x02\u10A2\u10A0\x03\x02\x02\x02\u10A3" +
    "\u10A5\x03\x02\x02\x02\u10A4\u10A2\x03\x02\x02\x02\u10A5\u10A7\x07\xA0" +
    "\x02\x02\u10A6\u108A\x03\x02\x02\x02\u10A6\u109A\x03\x02\x02\x02\u10A6" +
    "\u109E\x03\x02\x02\x02\u10A7\u0189\x03\x02\x02\x02\u10A8\u10A9\x07\u0122" +
    "\x02\x02\u10A9\u10AA\x07\xA4\x02\x02\u10AA\u10AB\x07\xB7\x02\x02\u10AB" +
    "\u018B\x03\x02\x02\x02";
bitmarkParser._serializedATNSegment8 = "\u10AC\u10AD\x07\u0125\x02\x02\u10AD\u018D\x03\x02\x02\x02\u10AE\u10AF" +
    "\x07\x9F\x02\x02\u10AF\u10B7\x07\xA0\x02\x02\u10B0\u10B2\x07\x04\x02\x02" +
    "\u10B1\u10B0\x03\x02\x02\x02\u10B2\u10B5\x03\x02\x02\x02\u10B3\u10B1\x03" +
    "\x02\x02\x02\u10B3\u10B4\x03\x02\x02\x02\u10B4\u10B6\x03\x02\x02\x02\u10B5" +
    "\u10B3\x03\x02\x02\x02\u10B6\u10B8\x05\u0190\xC9\x02\u10B7\u10B3\x03\x02" +
    "\x02\x02\u10B7\u10B8\x03\x02\x02\x02\u10B8\u10CD\x03\x02\x02\x02\u10B9" +
    "\u10BA\x07\x9F\x02\x02\u10BA\u10BF\x05\u01B8\xDD\x02\u10BB\u10BE\x07\xA1" +
    "\x02\x02\u10BC\u10BE\x05\u01C0\xE1\x02\u10BD\u10BB\x03\x02\x02\x02\u10BD" +
    "\u10BC\x03\x02\x02\x02\u10BE\u10C1\x03\x02\x02\x02\u10BF\u10BD\x03\x02" +
    "\x02\x02\u10BF\u10C0\x03\x02\x02\x02\u10C0\u10C2\x03\x02\x02\x02\u10C1" +
    "\u10BF\x03\x02\x02\x02\u10C2\u10CA\x07\xA0\x02\x02\u10C3\u10C5\x07\x04" +
    "\x02\x02\u10C4\u10C3\x03\x02\x02\x02\u10C5\u10C8\x03\x02\x02\x02\u10C6" +
    "\u10C4\x03\x02\x02\x02\u10C6\u10C7\x03\x02\x02\x02\u10C7\u10C9\x03\x02" +
    "\x02\x02\u10C8\u10C6\x03\x02\x02\x02\u10C9\u10CB\x05\u0190\xC9\x02\u10CA" +
    "\u10C6\x03\x02\x02\x02\u10CA\u10CB\x03\x02\x02\x02\u10CB\u10CD\x03\x02" +
    "\x02\x02\u10CC\u10AE\x03\x02\x02\x02\u10CC\u10B9\x03\x02\x02\x02\u10CD" +
    "\u018F\x03\x02\x02\x02\u10CE\u10CF\x07\x9F\x02\x02\u10CF\u10D4\x05\u01B8" +
    "\xDD\x02\u10D0\u10D3\x07\xA1\x02\x02\u10D1\u10D3\x05\u01C0\xE1\x02\u10D2" +
    "\u10D0\x03\x02\x02\x02\u10D2\u10D1\x03\x02\x02\x02\u10D3\u10D6\x03\x02" +
    "\x02\x02\u10D4\u10D2\x03\x02\x02\x02\u10D4\u10D5\x03\x02\x02\x02\u10D5" +
    "\u10D7\x03\x02\x02\x02\u10D6\u10D4\x03\x02\x02\x02\u10D7\u10D8\x07\xA0" +
    "\x02\x02\u10D8\u0191\x03\x02\x02\x02\u10D9\u10DB\x07\x93\x02\x02\u10DA" +
    "\u10DC\x05\u01B8\xDD\x02\u10DB\u10DA\x03\x02\x02\x02\u10DB\u10DC\x03\x02" +
    "\x02\x02\u10DC\u10DD\x03\x02\x02\x02\u10DD\u10E4\x07\xA0\x02\x02\u10DE" +
    "\u10E0\x07\x94\x02\x02\u10DF\u10E1\x05\u01B8\xDD\x02\u10E0\u10DF\x03\x02" +
    "\x02\x02\u10E0\u10E1\x03\x02\x02\x02\u10E1\u10E2\x03\x02\x02\x02\u10E2" +
    "\u10E4\x07\xA0\x02\x02\u10E3\u10D9\x03\x02\x02\x02\u10E3\u10DE\x03\x02" +
    "\x02\x02\u10E4\u0193\x03\x02\x02\x02\u10E5\u10ED\x07\xC8\x02\x02\u10E6" +
    "\u10ED\x07\xC6\x02\x02\u10E7\u10E9\x07\xC7\x02\x02\u10E8\u10EA\x07\xBC" +
    "\x02\x02\u10E9\u10E8\x03\x02\x02\x02\u10E9\u10EA\x03\x02\x02\x02\u10EA" +
    "\u10EB\x03\x02\x02\x02\u10EB\u10ED\x07\x02\x02\x03\u10EC\u10E5\x03\x02" +
    "\x02\x02\u10EC\u10E6\x03\x02\x02\x02\u10EC\u10E7\x03\x02\x02\x02\u10ED" +
    "\u0195\x03\x02\x02\x02\u10EE\u10F0\x07\xF3\x02\x02\u10EF\u10F1\x05\u01B8" +
    "\xDD\x02\u10F0\u10EF\x03\x02\x02\x02\u10F0\u10F1\x03\x02\x02\x02\u10F1" +
    "\u1107\x03\x02\x02\x02\u10F2\u10FC\x05\u01B8\xDD\x02\u10F3\u10F7\x07\xB9" +
    "\x02\x02\u10F4\u10F6\x07\x04\x02\x02\u10F5\u10F4\x03\x02\x02\x02\u10F6" +
    "\u10F9\x03\x02\x02\x02\u10F7\u10F5\x03\x02\x02\x02\u10F7\u10F8\x03\x02" +
    "\x02\x02\u10F8\u10FB\x03\x02\x02\x02\u10F9\u10F7\x03\x02\x02\x02\u10FA" +
    "\u10F3\x03\x02\x02\x02\u10FB\u10FE\x03\x02\x02\x02\u10FC\u10FA\x03\x02" +
    "\x02\x02\u10FC\u10FD\x03\x02\x02\x02\u10FD\u1102\x03\x02\x02\x02\u10FE" +
    "\u10FC\x03\x02\x02\x02\u10FF\u1101\x07\xB9\x02\x02\u1100\u10FF\x03\x02" +
    "\x02\x02\u1101\u1104\x03\x02\x02\x02\u1102\u1100\x03\x02\x02\x02\u1102" +
    "\u1103\x03\x02\x02\x02\u1103\u1106\x03\x02\x02\x02\u1104\u1102\x03\x02" +
    "\x02\x02\u1105\u10F2\x03\x02\x02\x02\u1106\u1109\x03\x02\x02\x02\u1107" +
    "\u1105\x03\x02\x02\x02\u1107\u1108\x03\x02\x02\x02\u1108\u110A\x03\x02" +
    "\x02\x02\u1109\u1107\x03\x02\x02\x02\u110A\u1116\x07\xA0\x02\x02\u110B" +
    "\u1111\x07\xF3\x02\x02\u110C\u1110\x05\u01B8\xDD\x02\u110D\u1110\x07\xB9" +
    "\x02\x02\u110E\u1110\x07\x04\x02\x02\u110F\u110C\x03\x02\x02\x02\u110F" +
    "\u110D\x03\x02\x02\x02\u110F\u110E\x03\x02\x02\x02\u1110\u1113\x03\x02" +
    "\x02\x02\u1111\u110F\x03\x02\x02\x02\u1111\u1112\x03\x02\x02\x02\u1112" +
    "\u1114\x03\x02\x02\x02\u1113\u1111\x03\x02\x02\x02\u1114\u1116\x07\x02" +
    "\x02\x03\u1115\u10EE\x03\x02\x02\x02\u1115\u110B\x03\x02\x02\x02\u1116" +
    "\u0197\x03\x02\x02\x02\u1117\u111C\x07\xC0\x02\x02\u1118\u111D\x05\u01B8" +
    "\xDD\x02\u1119\u111D\x07\xA1\x02\x02\u111A\u111D\x07\u0125\x02\x02\u111B" +
    "\u111D\x07\xB9\x02\x02\u111C\u1118\x03\x02\x02\x02\u111C\u1119\x03\x02" +
    "\x02\x02\u111C\u111A\x03\x02\x02\x02\u111C\u111B\x03\x02\x02\x02\u111D" +
    "\u111E\x03\x02\x02\x02\u111E\u111C\x03\x02\x02\x02\u111E\u111F\x03\x02" +
    "\x02\x02\u111F\u1120\x03\x02\x02\x02\u1120\u112E\x07\xA0\x02\x02\u1121" +
    "\u1129\x07\xC0\x02\x02\u1122\u1128\x05\u01B8\xDD\x02\u1123\u1128\x07\xA1" +
    "\x02\x02\u1124\u1128\x07\u0125\x02\x02\u1125\u1128\x07\xB9\x02\x02\u1126" +
    "\u1128\x07\x04\x02\x02\u1127\u1122\x03\x02\x02\x02\u1127\u1123\x03\x02" +
    "\x02\x02\u1127\u1124\x03\x02\x02\x02\u1127\u1125\x03\x02\x02\x02\u1127" +
    "\u1126\x03\x02\x02\x02\u1128\u112B\x03\x02\x02\x02\u1129\u1127\x03\x02" +
    "\x02\x02\u1129\u112A\x03\x02\x02\x02\u112A\u112C\x03\x02\x02\x02\u112B" +
    "\u1129\x03\x02\x02\x02\u112C\u112E\x07\x02\x02\x03\u112D\u1117\x03\x02" +
    "\x02\x02\u112D\u1121\x03\x02\x02\x02\u112E\u0199\x03\x02\x02\x02\u112F" +
    "\u1130\x07\xBF\x02\x02\u1130\u1131\x05\u01B8\xDD\x02\u1131\u1132\x07\xA0" +
    "\x02\x02\u1132\u019B\x03\x02\x02\x02\u1133\u1137\x07\xDA\x02\x02\u1134" +
    "\u1138\x05\u01B8\xDD\x02\u1135\u1138\x07\xA1\x02\x02\u1136\u1138\x07\xB9" +
    "\x02\x02\u1137\u1134\x03\x02\x02\x02\u1137\u1135\x03\x02\x02\x02\u1137" +
    "\u1136\x03\x02\x02\x02\u1138\u1139\x03\x02\x02\x02\u1139\u1137\x03\x02" +
    "\x02\x02\u1139\u113A\x03\x02\x02\x02\u113A\u113B\x03\x02\x02\x02\u113B" +
    "\u113D\x07\xA0\x02\x02\u113C\u113E\x05\u019E\xD0\x02\u113D\u113C\x03\x02" +
    "\x02\x02\u113D\u113E\x03\x02\x02\x02\u113E\u019D\x03\x02\x02\x02\u113F" +
    "\u1143\x07\xDA\x02\x02\u1140\u1144\x05\u01B8\xDD\x02\u1141\u1144\x07\xA1" +
    "\x02\x02\u1142\u1144\x07\xB9\x02\x02\u1143\u1140\x03\x02\x02\x02\u1143" +
    "\u1141\x03\x02\x02\x02\u1143\u1142\x03\x02\x02\x02\u1144\u1145\x03\x02" +
    "\x02\x02\u1145\u1143\x03\x02\x02\x02\u1145\u1146\x03\x02\x02\x02\u1146" +
    "\u1147\x03\x02\x02\x02\u1147\u1148\x07\xA0\x02\x02\u1148\u019F\x03\x02" +
    "\x02\x02\u1149\u114D\x07\x97\x02\x02\u114A\u114C\x07\xB9\x02\x02\u114B" +
    "\u114A\x03\x02\x02\x02\u114C\u114F\x03\x02\x02\x02\u114D\u114B\x03\x02" +
    "\x02\x02\u114D\u114E\x03\x02\x02\x02\u114E\u1151\x03\x02\x02\x02\u114F" +
    "\u114D\x03\x02\x02\x02\u1150\u1152\x05\u01B8\xDD\x02\u1151\u1150\x03\x02" +
    "\x02\x02\u1151\u1152\x03\x02\x02\x02\u1152\u1168\x03\x02\x02\x02\u1153" +
    "\u115D\x05\u01B8\xDD\x02\u1154\u1158\x07\xB9\x02\x02\u1155\u1157\x07\x04" +
    "\x02\x02\u1156\u1155\x03\x02\x02\x02\u1157\u115A\x03\x02\x02\x02\u1158" +
    "\u1156\x03\x02\x02\x02\u1158\u1159\x03\x02\x02\x02\u1159\u115C\x03\x02" +
    "\x02\x02\u115A\u1158\x03\x02\x02\x02\u115B\u1154\x03\x02\x02\x02\u115C" +
    "\u115F\x03\x02\x02\x02\u115D\u115B\x03\x02\x02\x02\u115D\u115E\x03\x02" +
    "\x02\x02\u115E\u1163\x03\x02\x02\x02\u115F\u115D\x03\x02\x02\x02\u1160" +
    "\u1162\x07\xB9\x02\x02\u1161\u1160\x03\x02\x02\x02\u1162\u1165\x03\x02" +
    "\x02\x02\u1163\u1161\x03\x02\x02\x02\u1163\u1164\x03\x02\x02\x02\u1164" +
    "\u1167\x03\x02\x02\x02\u1165\u1163\x03\x02\x02\x02\u1166\u1153\x03\x02" +
    "\x02\x02\u1167\u116A\x03\x02\x02\x02\u1168\u1166\x03\x02\x02\x02\u1168" +
    "\u1169\x03\x02\x02\x02\u1169\u116B\x03\x02\x02\x02\u116A\u1168\x03\x02" +
    "\x02\x02\u116B\u1178\x07\xA0\x02\x02\u116C\u1170\x07\x97\x02\x02\u116D" +
    "\u116F\x07\xB9\x02\x02\u116E\u116D\x03\x02\x02\x02\u116F\u1172\x03\x02" +
    "\x02\x02\u1170\u116E\x03\x02\x02\x02\u1170\u1171\x03\x02\x02\x02\u1171" +
    "\u1174\x03\x02\x02\x02\u1172\u1170\x03\x02\x02\x02\u1173\u1175\x05\u01B8" +
    "\xDD\x02\u1174\u1173\x03\x02\x02\x02\u1174\u1175\x03\x02\x02\x02\u1175" +
    "\u1176\x03\x02\x02\x02\u1176\u1178\x07\x02\x02\x03\u1177\u1149\x03\x02" +
    "\x02\x02\u1177\u116C\x03\x02\x02\x02\u1178\u01A1\x03\x02\x02\x02\u1179" +
    "\u117B\x07\x98\x02\x02\u117A\u117C\n\x16\x02\x02\u117B\u117A\x03\x02\x02" +
    "\x02\u117C\u117D\x03\x02\x02\x02\u117D\u117B\x03\x02\x02\x02\u117D\u117E" +
    "\x03\x02\x02\x02\u117E\u117F\x03\x02\x02\x02\u117F\u1180\x07\xA0\x02\x02" +
    "\u1180\u01A3\x03\x02\x02\x02\u1181\u1184\x07\x9E\x02\x02\u1182\u1185\x05" +
    "\u01B8\xDD\x02\u1183\u1185\x07\xB9\x02\x02\u1184\u1182\x03\x02\x02\x02" +
    "\u1184\u1183\x03\x02\x02\x02\u1185\u1186\x03\x02\x02\x02\u1186\u1184\x03" +
    "\x02\x02\x02\u1186\u1187\x03\x02\x02\x02\u1187\u1188\x03\x02\x02\x02\u1188" +
    "\u118E\x07\xA0\x02\x02\u1189\u118A\x07\x9E\x02\x02\u118A\u118B\x05\u01B8" +
    "\xDD\x02\u118B\u118C\x07\x02\x02\x03\u118C\u118E\x03\x02\x02\x02\u118D" +
    "\u1181\x03\x02\x02\x02\u118D\u1189\x03\x02\x02\x02\u118E\u01A5\x03\x02" +
    "\x02\x02\u118F\u1190\x07\xCC\x02\x02\u1190\u1191\x05\u01B8\xDD\x02\u1191" +
    "\u1192\x07\xA0\x02\x02\u1192\u1198\x03\x02\x02\x02\u1193\u1194\x07\xCD" +
    "\x02\x02\u1194\u1195\x05\u01B8\xDD\x02\u1195\u1196\x07\xA0\x02\x02\u1196" +
    "\u1198\x03\x02\x02\x02\u1197\u118F\x03\x02\x02\x02\u1197\u1193\x03\x02" +
    "\x02\x02\u1198\u01A7\x03\x02\x02\x02\u1199\u119A\x07\xC3\x02\x02\u119A" +
    "\u119B\x07\xA1\x02\x02\u119B\u119C\x07\xB7\x02\x02\u119C\u11A3\x07\xA0" +
    "\x02\x02\u119D\u119E\x07\xC3\x02\x02\u119E\u119F\x07\xA1\x02\x02\u119F" +
    "\u11A0\x05\u01B8\xDD\x02\u11A0\u11A1\x07\xA0\x02\x02\u11A1\u11A3\x03\x02" +
    "\x02\x02\u11A2\u1199\x03\x02\x02\x02\u11A2\u119D\x03\x02\x02\x02\u11A3" +
    "\u01A9\x03\x02\x02\x02\u11A4\u11A5\x07\xD8\x02\x02\u11A5\u11A6\x05\u01B8" +
    "\xDD\x02\u11A6\u11A7\x07\xA0\x02\x02\u11A7\u01AB\x03\x02\x02\x02\u11A8" +
    "\u11A9\x07\xD9\x02\x02\u11A9\u11AA\x05\u01B8\xDD\x02\u11AA\u11AB\x07\xA0" +
    "\x02\x02\u11AB\u01AD\x03\x02\x02\x02\u11AC\u11B6\x05\u01B0\xD9\x02\u11AD" +
    "\u11AF\x07\xB9\x02\x02\u11AE\u11AD\x03\x02\x02\x02\u11AF\u11B2\x03\x02" +
    "\x02\x02\u11B0\u11AE\x03\x02\x02\x02\u11B0\u11B1\x03\x02\x02\x02\u11B1" +
    "\u11B3\x03\x02\x02\x02\u11B2\u11B0\x03\x02\x02\x02\u11B3\u11B5\x05\u01B0" +
    "\xD9\x02\u11B4\u11B0\x03\x02\x02\x02\u11B5\u11B8\x03\x02\x02\x02\u11B6" +
    "\u11B4\x03\x02\x02\x02\u11B6\u11B7\x03\x02\x02\x02\u11B7\u01AF\x03\x02" +
    "\x02\x02\u11B8\u11B6\x03\x02\x02\x02\u11B9\u11BA\x07\x99\x02\x02\u11BA" +
    "\u11BB\x05\u01B8\xDD\x02\u11BB\u11BC\t\x17\x02\x02\u11BC\u11C2\x05\u01B8" +
    "\xDD\x02\u11BD\u11C1\x07\xB9\x02\x02\u11BE\u11C1\x07\xA1\x02\x02\u11BF" +
    "\u11C1\x05\u01B8\xDD\x02\u11C0\u11BD\x03\x02\x02\x02\u11C0\u11BE\x03\x02" +
    "\x02\x02\u11C0\u11BF\x03\x02\x02\x02\u11C1\u11C4\x03\x02\x02\x02\u11C2" +
    "\u11C0\x03\x02\x02\x02\u11C2\u11C3\x03\x02\x02\x02\u11C3\u11C5\x03\x02" +
    "\x02\x02\u11C4\u11C2\x03\x02\x02\x02\u11C5\u11C6\x07\xA0\x02\x02\u11C6" +
    "\u11D0\x03\x02\x02\x02\u11C7\u11CB\x07\xD6\x02\x02\u11C8\u11CA\v\x02\x02" +
    "\x02\u11C9\u11C8\x03\x02\x02\x02\u11CA\u11CD\x03\x02\x02\x02\u11CB\u11CC" +
    "\x03\x02\x02\x02\u11CB\u11C9\x03\x02\x02\x02\u11CC\u11CE\x03\x02\x02\x02" +
    "\u11CD\u11CB\x03\x02\x02\x02\u11CE\u11D0\x07\xA0\x02\x02\u11CF\u11B9\x03" +
    "\x02\x02\x02\u11CF\u11C7\x03\x02\x02\x02\u11D0\u01B1\x03\x02\x02\x02\u11D1" +
    "\u11D5\x07\x91\x02\x02\u11D2\u11D6\x05\u01B8\xDD\x02\u11D3\u11D6\x07\xA1" +
    "\x02\x02\u11D4\u11D6\x07\xB9\x02\x02\u11D5\u11D2\x03\x02\x02\x02\u11D5" +
    "\u11D3\x03\x02\x02\x02\u11D5\u11D4\x03\x02\x02\x02\u11D6\u11D7\x03\x02" +
    "\x02\x02\u11D7\u11D5\x03\x02\x02\x02\u11D7\u11D8\x03\x02\x02\x02\u11D8" +
    "\u11D9\x03\x02\x02\x02\u11D9\u11E5\x07\xA0\x02\x02\u11DA\u11E0\x07\x91" +
    "\x02\x02\u11DB\u11DF\x05\u01B8\xDD\x02\u11DC\u11DF\x07\xA1\x02\x02\u11DD" +
    "\u11DF\x07\xB9\x02\x02\u11DE\u11DB\x03\x02\x02\x02\u11DE\u11DC\x03\x02" +
    "\x02\x02\u11DE\u11DD\x03\x02\x02\x02\u11DF\u11E2\x03\x02\x02\x02\u11E0" +
    "\u11DE\x03\x02\x02\x02\u11E0\u11E1\x03\x02\x02\x02\u11E1\u11E3\x03\x02" +
    "\x02\x02\u11E2\u11E0\x03\x02\x02\x02\u11E3\u11E5\x07\x02\x02\x03\u11E4" +
    "\u11D1\x03\x02\x02\x02\u11E4\u11DA\x03\x02\x02\x02\u11E5\u01B3\x03\x02" +
    "\x02\x02\u11E6\u11E8\x07\x95\x02\x02\u11E7\u11E9\x05\u01B8\xDD\x02\u11E8" +
    "\u11E7\x03\x02\x02\x02\u11E8\u11E9\x03\x02\x02\x02\u11E9\u11EA\x03\x02" +
    "\x02\x02\u11EA\u11EB\x07\xA0\x02\x02\u11EB\u01B5\x03\x02\x02\x02\u11EC" +
    "\u11EE\x05\u01B8\xDD\x02\u11ED\u11EF\x07\xB9\x02\x02\u11EE\u11ED\x03\x02" +
    "\x02\x02\u11EE\u11EF\x03\x02\x02\x02\u11EF\u11F1\x03\x02\x02\x02\u11F0" +
    "\u11EC\x03\x02\x02\x02\u11F1\u11F2\x03\x02\x02\x02\u11F2\u11F0\x03\x02" +
    "\x02\x02\u11F2\u11F3\x03\x02\x02\x02\u11F3\u01B7\x03\x02\x02\x02\u11F4" +
    "\u11FB\x07\xB8\x02\x02\u11F5\u11F7\x07\x04\x02\x02\u11F6\u11F5\x03\x02" +
    "\x02\x02\u11F7\u11F8\x03\x02\x02\x02\u11F8\u11F6\x03\x02\x02\x02\u11F8" +
    "\u11F9\x03\x02\x02\x02\u11F9\u11FA\x03\x02\x02\x02\u11FA\u11FC\x07\xB7" +
    "\x02\x02\u11FB\u11F6\x03\x02\x02\x02\u11FB\u11FC\x03\x02\x02\x02\u11FC" +
    "\u1222\x03\x02\x02\x02\u11FD\u1204\x05\u01C0\xE1\x02\u11FE\u1200\x07\x04" +
    "\x02\x02\u11FF\u11FE\x03\x02\x02\x02\u1200\u1201\x03\x02\x02\x02\u1201" +
    "\u11FF\x03\x02\x02\x02\u1201\u1202\x03\x02\x02\x02\u1202\u1203\x03\x02" +
    "\x02\x02\u1203\u1205\x07\xB7\x02\x02\u1204\u11FF\x03\x02\x02\x02\u1204" +
    "\u1205\x03\x02\x02\x02\u1205\u1222\x03\x02\x02\x02\u1206\u1222\x07\xB7" +
    "\x02\x02\u1207\u1208\x07\x9C\x02\x02\u1208\u1209\x05\u01B8\xDD\x02\u1209" +
    "\u120A\x07\xA0\x02\x02\u120A\u1222\x03\x02\x02\x02\u120B\u120D\x07\x04" +
    "\x02\x02\u120C\u120B\x03\x02\x02\x02\u120D\u1210\x03\x02\x02\x02\u120E" +
    "\u120C\x03\x02\x02\x02\u120E\u120F\x03\x02\x02\x02\u120F\u1211\x03\x02" +
    "\x02\x02\u1210\u120E\x03\x02\x02\x02\u1211\u1215\x07\xA1\x02\x02\u1212" +
    "\u1214\x07\x04\x02\x02\u1213\u1212\x03\x02\x02\x02\u1214\u1217\x03\x02" +
    "\x02\x02\u1215\u1213\x03\x02\x02\x02\u1215\u1216\x03\x02\x02\x02\u1216" +
    "\u1222\x03\x02\x02\x02\u1217\u1215\x03\x02\x02\x02\u1218\u121C\x07\xA2" +
    "\x02\x02\u1219\u121B\x07\x04\x02\x02\u121A\u1219\x03\x02\x02\x02\u121B" +
    "\u121E\x03\x02\x02\x02\u121C\u121A\x03\x02\x02\x02\u121C\u121D\x03\x02" +
    "\x02\x02\u121D\u1222\x03\x02\x02\x02\u121E\u121C\x03\x02\x02\x02\u121F" +
    "\u1222\x07\xAA\x02\x02\u1220\u1222\x07\u0125\x02\x02\u1221\u11F4\x03\x02" +
    "\x02\x02\u1221\u11FD\x03\x02\x02\x02\u1221\u1206\x03\x02\x02\x02\u1221" +
    "\u1207\x03\x02\x02\x02\u1221\u120E\x03\x02\x02\x02\u1221\u1218\x03\x02" +
    "\x02\x02\u1221\u121F\x03\x02\x02\x02\u1221\u1220\x03\x02\x02\x02\u1222" +
    "\u01B9\x03\x02\x02\x02\u1223\u1224\x07\xB1\x02\x02\u1224\u01BB\x03\x02" +
    "\x02\x02\u1225\u1226\x07\xA0\x02\x02\u1226\u01BD\x03\x02\x02\x02\u1227" +
    "\u1228\t\x18\x02\x02\u1228\u01BF\x03\x02\x02\x02\u1229\u1248\x05\u01C4" +
    "\xE3\x02\u122A\u1248\x07\xBA\x02\x02\u122B\u1248\x07\xBD\x02\x02\u122C" +
    "\u1248\x07\xBB\x02\x02\u122D\u1248\x07\xA2\x02\x02\u122E\u122F\x07\xA6" +
    "\x02\x02\u122F\u1248\n\x19\x02\x02\u1230\u1231\x07\xA7\x02\x02\u1231\u1248" +
    "\n\x1A\x02\x02\u1232\u1248\x07\xA9\x02\x02\u1233\u1248\x07\xA8\x02\x02" +
    "\u1234\u1248\x07\xE2\x02\x02\u1235\u1248\x07\xF7\x02\x02\u1236\u1248\x07" +
    "\xE3\x02\x02\u1237\u1248\x07\xF8\x02\x02\u1238\u1248\x07\xE5\x02\x02\u1239" +
    "\u1248\x07\xFB\x02\x02\u123A\u1248\x07\xDE\x02\x02\u123B\u1248\x07\xF5" +
    "\x02\x02\u123C\u1248\x07\xDD\x02\x02\u123D\u1248\x07\xF4\x02\x02\u123E" +
    "\u1248\x07\xE1\x02\x02\u123F\u1248\x07\xF6\x02\x02\u1240\u1248\x07\xE4" +
    "\x02\x02\u1241\u1248\x07\xFA\x02\x02\u1242\u1248\x07\xE6\x02\x02\u1243" +
    "\u1248\x07\xFC\x02\x02\u1244\u1248\x07\u0110\x02\x02\u1245\u1248\x07\u0111" +
    "\x02\x02\u1246\u1248\x07\xAF\x02\x02\u1247\u1229\x03\x02\x02\x02\u1247" +
    "\u122A\x03\x02\x02\x02\u1247\u122B\x03\x02\x02\x02\u1247\u122C\x03\x02" +
    "\x02\x02\u1247\u122D\x03\x02\x02\x02\u1247\u122E\x03\x02\x02\x02\u1247" +
    "\u1230\x03\x02\x02\x02\u1247\u1232\x03\x02\x02\x02\u1247\u1233\x03\x02" +
    "\x02\x02\u1247\u1234\x03\x02\x02\x02\u1247\u1235\x03\x02\x02\x02\u1247" +
    "\u1236\x03\x02\x02\x02\u1247\u1237\x03\x02\x02\x02\u1247\u1238\x03\x02" +
    "\x02\x02\u1247\u1239\x03\x02\x02\x02\u1247\u123A\x03\x02\x02\x02\u1247" +
    "\u123B\x03\x02\x02\x02\u1247\u123C\x03\x02\x02\x02\u1247\u123D\x03\x02" +
    "\x02\x02\u1247\u123E\x03\x02\x02\x02\u1247\u123F\x03\x02\x02\x02\u1247" +
    "\u1240\x03\x02\x02\x02\u1247\u1241\x03\x02\x02\x02\u1247\u1242\x03\x02" +
    "\x02\x02\u1247\u1243\x03\x02\x02\x02\u1247\u1244\x03\x02\x02\x02\u1247" +
    "\u1245\x03\x02\x02\x02\u1247\u1246\x03\x02\x02\x02\u1248\u1249\x03\x02" +
    "\x02\x02\u1249\u1247\x03\x02\x02\x02\u1249\u124A\x03\x02\x02\x02\u124A" +
    "\u01C1\x03\x02\x02\x02\u124B\u124C\x07\x04\x02\x02\u124C\u01C3\x03\x02" +
    "\x02\x02\u124D\u124E\x07\xBC\x02\x02\u124E\u01C5\x03\x02\x02\x02\u027D" +
    "\u01CA\u01D0\u01D5\u01DA\u01E1\u026D\u0271\u0277\u027D\u0281\u0287\u028D" +
    "\u0293\u0299\u029E\u02A5\u02AC\u02B3\u02B9\u02BF\u02C7\u02D0\u02D4\u02DD" +
    "\u02DF\u02E4\u02EA\u02F3\u02F5\u02FA\u0300\u0309\u0310\u0315\u031D\u0324" +
    "\u0329\u0331\u0338\u033D\u0345\u034C\u0351\u0359\u0360\u0365\u036D\u0374" +
    "\u0379\u0381\u0388\u038D\u0395\u039C\u03A1\u03A9\u03B0\u03B5\u03BD\u03C4" +
    "\u03C9\u03D1\u03D8\u03DD\u03E5\u03EC\u03F1\u03F9\u0400\u0405\u040D\u0414" +
    "\u0419\u0421\u0428\u042D\u0435\u043C\u0441\u0449\u0450\u0455\u045B\u045F" +
    "\u0464\u046D\u0474\u0479\u047F\u0483\u0488\u0491\u0498\u049D\u04A3\u04A7" +
    "\u04AC\u04B5\u04BC\u04C1\u04CA\u04D1\u04D6\u04DF\u04E3\u04E8\u04EE\u0510" +
    "\u0518\u051A\u0521\u0526\u052C\u0532\u0537\u053D\u0542\u0548\u0554\u0559" +
    "\u055F\u0565\u056B\u0572\u0578\u057B\u057F\u0583\u0585\u0595\u059A\u05A0" +
    "\u05A6\u05AD\u05B3\u05B6\u05BC\u05C5\u05CA\u05D2\u05D7\u05DC\u05E2\u05E9" +
    "\u05EF\u05F2\u05F8\u05FD\u05FF\u0606\u060D\u061A\u061F\u0625\u062C\u0632" +
    "\u0635\u063F\u0644\u064A\u0651\u0657\u065A\u0664\u0669\u066F\u0676\u067C" +
    "\u067F\u0687\u068E\u0693\u0697\u069C\u06A3\u06A9\u06AC\u06B4\u06BA\u06BF" +
    "\u06C3\u06C8\u06CF\u06D5\u06D8\u06E0\u06E7\u06EC\u06F4\u06FB\u0700\u0708" +
    "\u070F\u0714\u071C\u0723\u0728\u0730\u0737\u073C\u0744\u074B\u0750\u0758" +
    "\u075F\u0764\u076C\u0773\u0778\u0780\u0787\u078C\u0794\u079B\u07A0\u07A8" +
    "\u07AF\u07B4\u07BC\u07C3\u07C8\u07D0\u07D7\u07DC\u07E4\u07EB\u07F0\u07F8" +
    "\u07FF\u0804\u080C\u0813\u0818\u0820\u0827\u082C\u0834\u083B\u0840\u0848" +
    "\u084F\u0854\u085C\u0863\u0868\u0870\u0877\u087C\u0884\u088B\u0890\u0898" +
    "\u089F\u08A4\u08AC\u08B3\u08B8\u08C0\u08C7\u08CC\u08D4\u08DB\u08E0\u08E8" +
    "\u08EF\u08F4\u08FC\u0903\u0908\u0910\u0917\u091C\u0924\u092B\u0930\u0938" +
    "\u093F\u0944\u094C\u0953\u0958\u0960\u0967\u096C\u0974\u097B\u0980\u0988" +
    "\u098F\u0994\u099C\u09A3\u09A8\u09B0\u09B7\u09BC\u09C4\u09CB\u09D0\u09D8" +
    "\u09DF\u09E4\u09EC\u09F3\u09F8\u0A00\u0A07\u0A0C\u0A14\u0A1B\u0A20\u0A28" +
    "\u0A2F\u0A34\u0A3C\u0A43\u0A48\u0A50\u0A57\u0A5C\u0A64\u0A6B\u0A70\u0A78" +
    "\u0A7F\u0A84\u0A8C\u0A93\u0A98\u0AA0\u0AA7\u0AAC\u0AB4\u0ABB\u0AC0\u0AC8" +
    "\u0ACF\u0AD4\u0ADC\u0AE3\u0AE8\u0AF0\u0AF7\u0AFC\u0B04\u0B0B\u0B10\u0B18" +
    "\u0B1F\u0B24\u0B2C\u0B33\u0B38\u0B40\u0B47\u0B4C\u0B54\u0B5B\u0B60\u0B68" +
    "\u0B6F\u0B74\u0B7C\u0B83\u0B88\u0B90\u0B97\u0B9C\u0BA4\u0BAB\u0BB0\u0BB8" +
    "\u0BBF\u0BC4\u0BCC\u0BD3\u0BD8\u0BE0\u0BE7\u0BEC\u0BF4\u0BFB\u0C00\u0C08" +
    "\u0C0F\u0C14\u0C1C\u0C23\u0C28\u0C30\u0C37\u0C3C\u0C44\u0C4B\u0C50\u0C58" +
    "\u0C5F\u0C64\u0C6C\u0C73\u0C78\u0C80\u0C87\u0C8C\u0C94\u0C9B\u0CA0\u0CA8" +
    "\u0CAF\u0CB4\u0CBC\u0CC3\u0CC8\u0CD0\u0CD7\u0CDC\u0CE4\u0CEB\u0CF0\u0CF8" +
    "\u0CFF\u0D04\u0D0C\u0D13\u0D18\u0D20\u0D27\u0D2C\u0D34\u0D3B\u0D40\u0D48" +
    "\u0D4F\u0D54\u0D5C\u0D63\u0D68\u0D70\u0D77\u0D7C\u0D84\u0D8B\u0D90\u0D98" +
    "\u0D9F\u0DA4\u0DAC\u0DB3\u0DB8\u0DC0\u0DC7\u0DCC\u0DD4\u0DDB\u0DE0\u0DE8" +
    "\u0DEF\u0DF4\u0DFC\u0E03\u0E08\u0E10\u0E17\u0E1C\u0E28\u0E2D\u0E33\u0E3A" +
    "\u0E40\u0E43\u0E4C\u0E4E\u0E56\u0E5D\u0E62\u0E6B\u0E6F\u0E75\u0E7C\u0E82" +
    "\u0E85\u0E8B\u0E93\u0E9A\u0E9F\u0EA4\u0EA9\u0EAF\u0EB3\u0EBD\u0EC4\u0EC9" +
    "\u0ED2\u0ED6\u0EE0\u0EE7\u0EEC\u0EF5\u0EF9\u0F03\u0F0A\u0F0F\u0F18\u0F1C" +
    "\u0F26\u0F2D\u0F32\u0F3A\u0F40\u0F44\u0F4A\u0F51\u0F57\u0F5A\u0F5F\u0F68" +
    "\u0F6E\u0F70\u0F7E\u0F85\u0F8A\u0F8E\u0F92\u0F95\u0F9A\u0FB1\u0FB6\u0FBB" +
    "\u0FBD\u0FC7\u0FD1\u0FDB\u0FE1\u0FE8\u0FEE\u0FF6\u1000\u100B\u1011\u1016" +
    "\u101D\u1026\u102A\u102E\u1031\u1040\u1044\u1053\u1057\u105D\u1068\u106D" +
    "\u1072\u1074\u1079\u107E\u1083\u1085\u108A\u1090\u1095\u1097\u10A2\u10A6" +
    "\u10B3\u10B7\u10BD\u10BF\u10C6\u10CA\u10CC\u10D2\u10D4\u10DB\u10E0\u10E3" +
    "\u10E9\u10EC\u10F0\u10F7\u10FC\u1102\u1107\u110F\u1111\u1115\u111C\u111E" +
    "\u1127\u1129\u112D\u1137\u1139\u113D\u1143\u1145\u114D\u1151\u1158\u115D" +
    "\u1163\u1168\u1170\u1174\u1177\u117D\u1184\u1186\u118D\u1197\u11A2\u11B0" +
    "\u11B6\u11C0\u11C2\u11CB\u11CF\u11D5\u11D7\u11DE\u11E0\u11E4\u11E8\u11EE" +
    "\u11F2\u11F8\u11FB\u1201\u1204\u120E\u1215\u121C\u1221\u1247\u1249";
bitmarkParser._serializedATN = Utils.join([
    bitmarkParser._serializedATNSegment0,
    bitmarkParser._serializedATNSegment1,
    bitmarkParser._serializedATNSegment2,
    bitmarkParser._serializedATNSegment3,
    bitmarkParser._serializedATNSegment4,
    bitmarkParser._serializedATNSegment5,
    bitmarkParser._serializedATNSegment6,
    bitmarkParser._serializedATNSegment7,
    bitmarkParser._serializedATNSegment8,
], "");
class BitmarkContext extends ParserRuleContext_1.ParserRuleContext {
    EOF() { return this.getToken(bitmarkParser.EOF, 0); }
    bitmark_(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bitmark_Context);
        }
        else {
            return this.getRuleContext(i, Bitmark_Context);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitmark; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitmark) {
            listener.enterBitmark(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitmark) {
            listener.exitBitmark(this);
        }
    }
}
exports.BitmarkContext = BitmarkContext;
class Bitmark_Context extends ParserRuleContext_1.ParserRuleContext {
    bit() {
        return this.tryGetRuleContext(0, BitContext);
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitmark_; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitmark_) {
            listener.enterBitmark_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitmark_) {
            listener.exitBitmark_(this);
        }
    }
}
exports.Bitmark_Context = Bitmark_Context;
class BitContext extends ParserRuleContext_1.ParserRuleContext {
    book() {
        return this.tryGetRuleContext(0, BookContext);
    }
    chapter() {
        return this.tryGetRuleContext(0, ChapterContext);
    }
    summary() {
        return this.tryGetRuleContext(0, SummaryContext);
    }
    toc() {
        return this.tryGetRuleContext(0, TocContext);
    }
    bit_alias() {
        return this.tryGetRuleContext(0, Bit_aliasContext);
    }
    internal_link() {
        return this.tryGetRuleContext(0, Internal_linkContext);
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    group_born() {
        return this.tryGetRuleContext(0, Group_bornContext);
    }
    group_died() {
        return this.tryGetRuleContext(0, Group_diedContext);
    }
    essay() {
        return this.tryGetRuleContext(0, EssayContext);
    }
    correction() {
        return this.tryGetRuleContext(0, CorrectionContext);
    }
    mark_() {
        return this.tryGetRuleContext(0, Mark_Context);
    }
    take_picture() {
        return this.tryGetRuleContext(0, Take_pictureContext);
    }
    take_audio() {
        return this.tryGetRuleContext(0, Take_audioContext);
    }
    record_audio() {
        return this.tryGetRuleContext(0, Record_audioContext);
    }
    preparation_note() {
        return this.tryGetRuleContext(0, Preparation_noteContext);
    }
    assignment() {
        return this.tryGetRuleContext(0, AssignmentContext);
    }
    article() {
        return this.tryGetRuleContext(0, ArticleContext);
    }
    statement() {
        return this.tryGetRuleContext(0, StatementContext);
    }
    details() {
        return this.tryGetRuleContext(0, DetailsContext);
    }
    sample_solution() {
        return this.tryGetRuleContext(0, Sample_solutionContext);
    }
    buttoncopytext() {
        return this.tryGetRuleContext(0, ButtoncopytextContext);
    }
    wbtcontinue() {
        return this.tryGetRuleContext(0, WbtcontinueContext);
    }
    learningpathdetails() {
        return this.tryGetRuleContext(0, LearningpathdetailsContext);
    }
    note() {
        return this.tryGetRuleContext(0, NoteContext);
    }
    info() {
        return this.tryGetRuleContext(0, InfoContext);
    }
    warning() {
        return this.tryGetRuleContext(0, WarningContext);
    }
    remark() {
        return this.tryGetRuleContext(0, RemarkContext);
    }
    hintbit() {
        return this.tryGetRuleContext(0, HintbitContext);
    }
    help() {
        return this.tryGetRuleContext(0, HelpContext);
    }
    danger() {
        return this.tryGetRuleContext(0, DangerContext);
    }
    bug() {
        return this.tryGetRuleContext(0, BugContext);
    }
    sidenote() {
        return this.tryGetRuleContext(0, SidenoteContext);
    }
    stickynote() {
        return this.tryGetRuleContext(0, StickynoteContext);
    }
    quote() {
        return this.tryGetRuleContext(0, QuoteContext);
    }
    footnote() {
        return this.tryGetRuleContext(0, FootnoteContext);
    }
    examplebit() {
        return this.tryGetRuleContext(0, ExamplebitContext);
    }
    page() {
        return this.tryGetRuleContext(0, PageContext);
    }
    message() {
        return this.tryGetRuleContext(0, MessageContext);
    }
    bot_interview() {
        return this.tryGetRuleContext(0, Bot_interviewContext);
    }
    self_assessment() {
        return this.tryGetRuleContext(0, Self_assessmentContext);
    }
    rating() {
        return this.tryGetRuleContext(0, RatingContext);
    }
    survey() {
        return this.tryGetRuleContext(0, SurveyContext);
    }
    survey_1() {
        return this.tryGetRuleContext(0, Survey_1Context);
    }
    survey_anonymous() {
        return this.tryGetRuleContext(0, Survey_anonymousContext);
    }
    survey_anonymous_1() {
        return this.tryGetRuleContext(0, Survey_anonymous_1Context);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    vendor_padlet_embed() {
        return this.tryGetRuleContext(0, Vendor_padlet_embedContext);
    }
    scorm() {
        return this.tryGetRuleContext(0, ScormContext);
    }
    learning_path_lti() {
        return this.tryGetRuleContext(0, Learning_path_ltiContext);
    }
    learning_path_step() {
        return this.tryGetRuleContext(0, Learning_path_stepContext);
    }
    learning_path_book() {
        return this.tryGetRuleContext(0, Learning_path_bookContext);
    }
    learning_path_sign() {
        return this.tryGetRuleContext(0, Learning_path_signContext);
    }
    learning_path_video_call() {
        return this.tryGetRuleContext(0, Learning_path_video_callContext);
    }
    learning_path_learning_goal() {
        return this.tryGetRuleContext(0, Learning_path_learning_goalContext);
    }
    learning_path_closing() {
        return this.tryGetRuleContext(0, Learning_path_closingContext);
    }
    learning_path_feedback() {
        return this.tryGetRuleContext(0, Learning_path_feedbackContext);
    }
    learning_path_bot_training() {
        return this.tryGetRuleContext(0, Learning_path_bot_trainingContext);
    }
    learning_path_external_link() {
        return this.tryGetRuleContext(0, Learning_path_external_linkContext);
    }
    learning_path_classroom_training() {
        return this.tryGetRuleContext(0, Learning_path_classroom_trainingContext);
    }
    learning_path_classroom_event() {
        return this.tryGetRuleContext(0, Learning_path_classroom_eventContext);
    }
    bot_action_send() {
        return this.tryGetRuleContext(0, Bot_action_sendContext);
    }
    bot_action_announce() {
        return this.tryGetRuleContext(0, Bot_action_announceContext);
    }
    bot_action_save() {
        return this.tryGetRuleContext(0, Bot_action_saveContext);
    }
    bot_action_remind() {
        return this.tryGetRuleContext(0, Bot_action_remindContext);
    }
    bot_action_response() {
        return this.tryGetRuleContext(0, Bot_action_responseContext);
    }
    bot_action_true_false() {
        return this.tryGetRuleContext(0, Bot_action_true_falseContext);
    }
    bot_action_rating_number() {
        return this.tryGetRuleContext(0, Bot_action_rating_numberContext);
    }
    bot_action_rating_stars() {
        return this.tryGetRuleContext(0, Bot_action_rating_starsContext);
    }
    bit_image() {
        return this.tryGetRuleContext(0, Bit_imageContext);
    }
    bit_imageLink() {
        return this.tryGetRuleContext(0, Bit_imageLinkContext);
    }
    bit_imageZoom() {
        return this.tryGetRuleContext(0, Bit_imageZoomContext);
    }
    bit_imagePrototype() {
        return this.tryGetRuleContext(0, Bit_imagePrototypeContext);
    }
    bit_imageSuperWide() {
        return this.tryGetRuleContext(0, Bit_imageSuperWideContext);
    }
    bit_audio() {
        return this.tryGetRuleContext(0, Bit_audioContext);
    }
    bit_audioLink() {
        return this.tryGetRuleContext(0, Bit_audioLinkContext);
    }
    bit_audioEmbed() {
        return this.tryGetRuleContext(0, Bit_audioEmbedContext);
    }
    bit_video() {
        return this.tryGetRuleContext(0, Bit_videoContext);
    }
    bit_videoLink() {
        return this.tryGetRuleContext(0, Bit_videoLinkContext);
    }
    bit_videoEmbed() {
        return this.tryGetRuleContext(0, Bit_videoEmbedContext);
    }
    bit_videoPortrait() {
        return this.tryGetRuleContext(0, Bit_videoPortraitContext);
    }
    bit_videoLandscape() {
        return this.tryGetRuleContext(0, Bit_videoLandscapeContext);
    }
    bit_stillImageFilm() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmContext);
    }
    bit_stillImageFilmLink() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmLinkContext);
    }
    bit_stillImageFilmEmbed() {
        return this.tryGetRuleContext(0, Bit_stillImageFilmEmbedContext);
    }
    bit_document() {
        return this.tryGetRuleContext(0, Bit_documentContext);
    }
    bit_documentLink() {
        return this.tryGetRuleContext(0, Bit_documentLinkContext);
    }
    bit_documentEmbed() {
        return this.tryGetRuleContext(0, Bit_documentEmbedContext);
    }
    bit_documentDownload() {
        return this.tryGetRuleContext(0, Bit_documentDownloadContext);
    }
    bit_websiteLink() {
        return this.tryGetRuleContext(0, Bit_websiteLinkContext);
    }
    bit_appLink() {
        return this.tryGetRuleContext(0, Bit_appLinkContext);
    }
    bit_editorial() {
        return this.tryGetRuleContext(0, Bit_editorialContext);
    }
    book_frontispiece() {
        return this.tryGetRuleContext(0, Book_frontispieceContext);
    }
    book_title() {
        return this.tryGetRuleContext(0, Book_titleContext);
    }
    book_copyright() {
        return this.tryGetRuleContext(0, Book_copyrightContext);
    }
    book_dedication() {
        return this.tryGetRuleContext(0, Book_dedicationContext);
    }
    book_forword() {
        return this.tryGetRuleContext(0, Book_forwordContext);
    }
    book_preface() {
        return this.tryGetRuleContext(0, Book_prefaceContext);
    }
    book_prologue() {
        return this.tryGetRuleContext(0, Book_prologueContext);
    }
    book_epilogue() {
        return this.tryGetRuleContext(0, Book_epilogueContext);
    }
    book_introduction() {
        return this.tryGetRuleContext(0, Book_introductionContext);
    }
    book_inciting_incident() {
        return this.tryGetRuleContext(0, Book_inciting_incidentContext);
    }
    book_conclusion() {
        return this.tryGetRuleContext(0, Book_conclusionContext);
    }
    book_afterword() {
        return this.tryGetRuleContext(0, Book_afterwordContext);
    }
    book_postscript() {
        return this.tryGetRuleContext(0, Book_postscriptContext);
    }
    book_appendix() {
        return this.tryGetRuleContext(0, Book_appendixContext);
    }
    book_addendum() {
        return this.tryGetRuleContext(0, Book_addendumContext);
    }
    book_acknowledgments() {
        return this.tryGetRuleContext(0, Book_acknowledgmentsContext);
    }
    book_list_of_contributors() {
        return this.tryGetRuleContext(0, Book_list_of_contributorsContext);
    }
    book_bibliography() {
        return this.tryGetRuleContext(0, Book_bibliographyContext);
    }
    book_reference_list() {
        return this.tryGetRuleContext(0, Book_reference_listContext);
    }
    book_endnotes() {
        return this.tryGetRuleContext(0, Book_endnotesContext);
    }
    book_notes() {
        return this.tryGetRuleContext(0, Book_notesContext);
    }
    book_copyright_permissions() {
        return this.tryGetRuleContext(0, Book_copyright_permissionsContext);
    }
    book_teaser() {
        return this.tryGetRuleContext(0, Book_teaserContext);
    }
    book_auther_bio() {
        return this.tryGetRuleContext(0, Book_auther_bioContext);
    }
    book_request_for_a_book_review() {
        return this.tryGetRuleContext(0, Book_request_for_a_book_reviewContext);
    }
    book_coming_soon() {
        return this.tryGetRuleContext(0, Book_coming_soonContext);
    }
    book_read_more() {
        return this.tryGetRuleContext(0, Book_read_moreContext);
    }
    book_summary() {
        return this.tryGetRuleContext(0, Book_summaryContext);
    }
    book_epigraph() {
        return this.tryGetRuleContext(0, Book_epigraphContext);
    }
    code() {
        return this.tryGetRuleContext(0, CodeContext);
    }
    card1() {
        return this.tryGetRuleContext(0, Card1Context);
    }
    question1() {
        return this.tryGetRuleContext(0, Question1Context);
    }
    screenshot() {
        return this.tryGetRuleContext(0, ScreenshotContext);
    }
    focus_image() {
        return this.tryGetRuleContext(0, Focus_imageContext);
    }
    photo() {
        return this.tryGetRuleContext(0, PhotoContext);
    }
    browser_image() {
        return this.tryGetRuleContext(0, Browser_imageContext);
    }
    chapter_subject_matter() {
        return this.tryGetRuleContext(0, Chapter_subject_matterContext);
    }
    release_note() {
        return this.tryGetRuleContext(0, Release_noteContext);
    }
    conclusion() {
        return this.tryGetRuleContext(0, ConclusionContext);
    }
    featured() {
        return this.tryGetRuleContext(0, FeaturedContext);
    }
    vendor_amcharts_5_chart() {
        return this.tryGetRuleContext(0, Vendor_amcharts_5_chartContext);
    }
    newspaper_article() {
        return this.tryGetRuleContext(0, Newspaper_articleContext);
    }
    blog_article() {
        return this.tryGetRuleContext(0, Blog_articleContext);
    }
    book_article() {
        return this.tryGetRuleContext(0, Book_articleContext);
    }
    notebook_article() {
        return this.tryGetRuleContext(0, Notebook_articleContext);
    }
    workbook_article() {
        return this.tryGetRuleContext(0, Workbook_articleContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit) {
            listener.enterBit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit) {
            listener.exitBit(this);
        }
    }
}
exports.BitContext = BitContext;
class BookContext extends ParserRuleContext_1.ParserRuleContext {
    BitBook() { return this.getToken(bitmarkParser.BitBook, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    format() {
        return this.tryGetRuleContext(0, FormatContext);
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook) {
            listener.enterBook(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook) {
            listener.exitBook(this);
        }
    }
}
exports.BookContext = BookContext;
class ChapterContext extends ParserRuleContext_1.ParserRuleContext {
    BitChapter() { return this.getToken(bitmarkParser.BitChapter, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    format() {
        return this.tryGetRuleContext(0, FormatContext);
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_chapter; }
    // @Override
    enterRule(listener) {
        if (listener.enterChapter) {
            listener.enterChapter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChapter) {
            listener.exitChapter(this);
        }
    }
}
exports.ChapterContext = ChapterContext;
class TocContext extends ParserRuleContext_1.ParserRuleContext {
    BitToc() { return this.getToken(bitmarkParser.BitToc, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_toc; }
    // @Override
    enterRule(listener) {
        if (listener.enterToc) {
            listener.enterToc(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitToc) {
            listener.exitToc(this);
        }
    }
}
exports.TocContext = TocContext;
class SummaryContext extends ParserRuleContext_1.ParserRuleContext {
    BitSummary() { return this.getToken(bitmarkParser.BitSummary, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    title_etc() {
        return this.getRuleContext(0, Title_etcContext);
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_summary; }
    // @Override
    enterRule(listener) {
        if (listener.enterSummary) {
            listener.enterSummary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSummary) {
            listener.exitSummary(this);
        }
    }
}
exports.SummaryContext = SummaryContext;
class Internal_linkContext extends ParserRuleContext_1.ParserRuleContext {
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    BitIntlink() { return this.tryGetToken(bitmarkParser.BitIntlink, 0); }
    BitIntRef() { return this.tryGetToken(bitmarkParser.BitIntRef, 0); }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_internal_link; }
    // @Override
    enterRule(listener) {
        if (listener.enterInternal_link) {
            listener.enterInternal_link(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInternal_link) {
            listener.exitInternal_link(this);
        }
    }
}
exports.Internal_linkContext = Internal_linkContext;
class Bit_aliasContext extends ParserRuleContext_1.ParserRuleContext {
    BitAlias() { return this.getToken(bitmarkParser.BitAlias, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    angleref() {
        return this.getRuleContext(0, AnglerefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_alias; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_alias) {
            listener.enterBit_alias(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_alias) {
            listener.exitBit_alias(this);
        }
    }
}
exports.Bit_aliasContext = Bit_aliasContext;
class Title_etcContext extends ParserRuleContext_1.ParserRuleContext {
    title(i) {
        if (i === undefined) {
            return this.getRuleContexts(TitleContext);
        }
        else {
            return this.getRuleContext(i, TitleContext);
        }
    }
    atdef(i) {
        if (i === undefined) {
            return this.getRuleContexts(AtdefContext);
        }
        else {
            return this.getRuleContext(i, AtdefContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    angleref(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnglerefContext);
        }
        else {
            return this.getRuleContext(i, AnglerefContext);
        }
    }
    anchor(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnchorContext);
        }
        else {
            return this.getRuleContext(i, AnchorContext);
        }
    }
    progress(i) {
        if (i === undefined) {
            return this.getRuleContexts(ProgressContext);
        }
        else {
            return this.getRuleContext(i, ProgressContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_title_etc; }
    // @Override
    enterRule(listener) {
        if (listener.enterTitle_etc) {
            listener.enterTitle_etc(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTitle_etc) {
            listener.exitTitle_etc(this);
        }
    }
}
exports.Title_etcContext = Title_etcContext;
class Group_bornContext extends ParserRuleContext_1.ParserRuleContext {
    BitGroups() { return this.getToken(bitmarkParser.BitGroups, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    lines(i) {
        if (i === undefined) {
            return this.getRuleContexts(LinesContext);
        }
        else {
            return this.getRuleContext(i, LinesContext);
        }
    }
    OPR(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPR);
        }
        else {
            return this.getToken(bitmarkParser.OPR, i);
        }
    }
    OPHASH(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPHASH);
        }
        else {
            return this.getToken(bitmarkParser.OPHASH, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_group_born; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroup_born) {
            listener.enterGroup_born(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroup_born) {
            listener.exitGroup_born(this);
        }
    }
}
exports.Group_bornContext = Group_bornContext;
class Group_diedContext extends ParserRuleContext_1.ParserRuleContext {
    BitGroupt() { return this.getToken(bitmarkParser.BitGroupt, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    lines(i) {
        if (i === undefined) {
            return this.getRuleContexts(LinesContext);
        }
        else {
            return this.getRuleContext(i, LinesContext);
        }
    }
    OPR(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPR);
        }
        else {
            return this.getToken(bitmarkParser.OPR, i);
        }
    }
    OPHASH(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPHASH);
        }
        else {
            return this.getToken(bitmarkParser.OPHASH, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_group_died; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroup_died) {
            listener.enterGroup_died(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroup_died) {
            listener.exitGroup_died(this);
        }
    }
}
exports.Group_diedContext = Group_diedContext;
class Learning_path_ltiContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathLti() { return this.getToken(bitmarkParser.BitLearningPathLti, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_lti; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_lti) {
            listener.enterLearning_path_lti(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_lti) {
            listener.exitLearning_path_lti(this);
        }
    }
}
exports.Learning_path_ltiContext = Learning_path_ltiContext;
class Learning_path_stepContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathStep() { return this.getToken(bitmarkParser.BitLearningPathStep, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_step; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_step) {
            listener.enterLearning_path_step(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_step) {
            listener.exitLearning_path_step(this);
        }
    }
}
exports.Learning_path_stepContext = Learning_path_stepContext;
class Learning_path_bookContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathBook() { return this.getToken(bitmarkParser.BitLearningPathBook, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_book; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_book) {
            listener.enterLearning_path_book(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_book) {
            listener.exitLearning_path_book(this);
        }
    }
}
exports.Learning_path_bookContext = Learning_path_bookContext;
class Learning_path_signContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathSign() { return this.getToken(bitmarkParser.BitLearningPathSign, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_sign; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_sign) {
            listener.enterLearning_path_sign(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_sign) {
            listener.exitLearning_path_sign(this);
        }
    }
}
exports.Learning_path_signContext = Learning_path_signContext;
class Learning_path_video_callContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathVideoCall() { return this.getToken(bitmarkParser.BitLearningPathVideoCall, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_video_call; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_video_call) {
            listener.enterLearning_path_video_call(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_video_call) {
            listener.exitLearning_path_video_call(this);
        }
    }
}
exports.Learning_path_video_callContext = Learning_path_video_callContext;
class Learning_path_learning_goalContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathLearningGoal() { return this.getToken(bitmarkParser.BitLearningPathLearningGoal, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_learning_goal; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_learning_goal) {
            listener.enterLearning_path_learning_goal(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_learning_goal) {
            listener.exitLearning_path_learning_goal(this);
        }
    }
}
exports.Learning_path_learning_goalContext = Learning_path_learning_goalContext;
class Learning_path_closingContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathClosing() { return this.getToken(bitmarkParser.BitLearningPathClosing, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_closing; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_closing) {
            listener.enterLearning_path_closing(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_closing) {
            listener.exitLearning_path_closing(this);
        }
    }
}
exports.Learning_path_closingContext = Learning_path_closingContext;
class Learning_path_feedbackContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathFeedback() { return this.getToken(bitmarkParser.BitLearningPathFeedback, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_feedback; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_feedback) {
            listener.enterLearning_path_feedback(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_feedback) {
            listener.exitLearning_path_feedback(this);
        }
    }
}
exports.Learning_path_feedbackContext = Learning_path_feedbackContext;
class Learning_path_bot_trainingContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathBotTraining() { return this.getToken(bitmarkParser.BitLearningPathBotTraining, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_bot_training; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_bot_training) {
            listener.enterLearning_path_bot_training(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_bot_training) {
            listener.exitLearning_path_bot_training(this);
        }
    }
}
exports.Learning_path_bot_trainingContext = Learning_path_bot_trainingContext;
class Learning_path_external_linkContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathExternalLink() { return this.getToken(bitmarkParser.BitLearningPathExternalLink, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_external_link; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_external_link) {
            listener.enterLearning_path_external_link(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_external_link) {
            listener.exitLearning_path_external_link(this);
        }
    }
}
exports.Learning_path_external_linkContext = Learning_path_external_linkContext;
class Learning_path_classroom_trainingContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathClassroomTraining() { return this.getToken(bitmarkParser.BitLearningPathClassroomTraining, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_classroom_training; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_classroom_training) {
            listener.enterLearning_path_classroom_training(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_classroom_training) {
            listener.exitLearning_path_classroom_training(this);
        }
    }
}
exports.Learning_path_classroom_trainingContext = Learning_path_classroom_trainingContext;
class Learning_path_classroom_eventContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathClassroomEvent() { return this.getToken(bitmarkParser.BitLearningPathClassroomEvent, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learning_path_classroom_event; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearning_path_classroom_event) {
            listener.enterLearning_path_classroom_event(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearning_path_classroom_event) {
            listener.exitLearning_path_classroom_event(this);
        }
    }
}
exports.Learning_path_classroom_eventContext = Learning_path_classroom_eventContext;
class Bot_action_sendContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionSend() { return this.getToken(bitmarkParser.BitBotActionSend, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_send; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_send) {
            listener.enterBot_action_send(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_send) {
            listener.exitBot_action_send(this);
        }
    }
}
exports.Bot_action_sendContext = Bot_action_sendContext;
class Bot_action_announceContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionAnnounce() { return this.getToken(bitmarkParser.BitBotActionAnnounce, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_announce; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_announce) {
            listener.enterBot_action_announce(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_announce) {
            listener.exitBot_action_announce(this);
        }
    }
}
exports.Bot_action_announceContext = Bot_action_announceContext;
class Bot_action_saveContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionSave() { return this.getToken(bitmarkParser.BitBotActionSave, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_save; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_save) {
            listener.enterBot_action_save(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_save) {
            listener.exitBot_action_save(this);
        }
    }
}
exports.Bot_action_saveContext = Bot_action_saveContext;
class Bot_action_remindContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionRemind() { return this.getToken(bitmarkParser.BitBotActionRemind, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_remind; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_remind) {
            listener.enterBot_action_remind(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_remind) {
            listener.exitBot_action_remind(this);
        }
    }
}
exports.Bot_action_remindContext = Bot_action_remindContext;
class Bot_action_responseContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionResponse() { return this.getToken(bitmarkParser.BitBotActionResponse, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    bot_action(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_actionContext);
        }
        else {
            return this.getRuleContext(i, Bot_actionContext);
        }
    }
    footer() {
        return this.tryGetRuleContext(0, FooterContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_response; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_response) {
            listener.enterBot_action_response(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_response) {
            listener.exitBot_action_response(this);
        }
    }
}
exports.Bot_action_responseContext = Bot_action_responseContext;
class Bot_action_true_falseContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionTrueFalse() { return this.getToken(bitmarkParser.BitBotActionTrueFalse, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    bot_action(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_actionContext);
        }
        else {
            return this.getRuleContext(i, Bot_actionContext);
        }
    }
    footer() {
        return this.tryGetRuleContext(0, FooterContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_true_false; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_true_false) {
            listener.enterBot_action_true_false(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_true_false) {
            listener.exitBot_action_true_false(this);
        }
    }
}
exports.Bot_action_true_falseContext = Bot_action_true_falseContext;
class Bot_action_rating_numberContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionRatingNumber() { return this.getToken(bitmarkParser.BitBotActionRatingNumber, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    bot_action(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_actionContext);
        }
        else {
            return this.getRuleContext(i, Bot_actionContext);
        }
    }
    footer() {
        return this.tryGetRuleContext(0, FooterContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_rating_number; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_rating_number) {
            listener.enterBot_action_rating_number(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_rating_number) {
            listener.exitBot_action_rating_number(this);
        }
    }
}
exports.Bot_action_rating_numberContext = Bot_action_rating_numberContext;
class Bot_action_rating_starsContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotActionRatingStars() { return this.getToken(bitmarkParser.BitBotActionRatingStars, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action_rating_stars; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action_rating_stars) {
            listener.enterBot_action_rating_stars(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action_rating_stars) {
            listener.exitBot_action_rating_stars(this);
        }
    }
}
exports.Bot_action_rating_starsContext = Bot_action_rating_starsContext;
class Bot_actionContext extends ParserRuleContext_1.ParserRuleContext {
    HSPL() { return this.getToken(bitmarkParser.HSPL, 0); }
    bo_actions() {
        return this.getRuleContext(0, Bo_actionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_action; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_action) {
            listener.enterBot_action(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_action) {
            listener.exitBot_action(this);
        }
    }
}
exports.Bot_actionContext = Bot_actionContext;
class Bo_actionsContext extends ParserRuleContext_1.ParserRuleContext {
    boacts(i) {
        if (i === undefined) {
            return this.getRuleContexts(BoactsContext);
        }
        else {
            return this.getRuleContext(i, BoactsContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bo_actions; }
    // @Override
    enterRule(listener) {
        if (listener.enterBo_actions) {
            listener.enterBo_actions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBo_actions) {
            listener.exitBo_actions(this);
        }
    }
}
exports.Bo_actionsContext = Bo_actionsContext;
class BoactsContext extends ParserRuleContext_1.ParserRuleContext {
    instruction() {
        return this.tryGetRuleContext(0, InstructionContext);
    }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    choice_minus() {
        return this.tryGetRuleContext(0, Choice_minusContext);
    }
    choice_plus() {
        return this.tryGetRuleContext(0, Choice_plusContext);
    }
    feedback() {
        return this.tryGetRuleContext(0, FeedbackContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_boacts; }
    // @Override
    enterRule(listener) {
        if (listener.enterBoacts) {
            listener.enterBoacts(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBoacts) {
            listener.exitBoacts(this);
        }
    }
}
exports.BoactsContext = BoactsContext;
class FeedbackContext extends ParserRuleContext_1.ParserRuleContext {
    ENCLBARS() { return this.tryGetToken(bitmarkParser.ENCLBARS, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_feedback; }
    // @Override
    enterRule(listener) {
        if (listener.enterFeedback) {
            listener.enterFeedback(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFeedback) {
            listener.exitFeedback(this);
        }
    }
}
exports.FeedbackContext = FeedbackContext;
class FooterContext extends ParserRuleContext_1.ParserRuleContext {
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_footer; }
    // @Override
    enterRule(listener) {
        if (listener.enterFooter) {
            listener.enterFooter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFooter) {
            listener.exitFooter(this);
        }
    }
}
exports.FooterContext = FooterContext;
class BitElemContext extends ParserRuleContext_1.ParserRuleContext {
    LIST_LINE() { return this.tryGetToken(bitmarkParser.LIST_LINE, 0); }
    NOTBITMARK() { return this.tryGetToken(bitmarkParser.NOTBITMARK, 0); }
    dclines() {
        return this.tryGetRuleContext(0, DclinesContext);
    }
    gap() {
        return this.tryGetRuleContext(0, GapContext);
    }
    reference() {
        return this.tryGetRuleContext(0, ReferenceContext);
    }
    dateprop() {
        return this.tryGetRuleContext(0, DatepropContext);
    }
    progress() {
        return this.tryGetRuleContext(0, ProgressContext);
    }
    atdef() {
        return this.tryGetRuleContext(0, AtdefContext);
    }
    dollarans() {
        return this.tryGetRuleContext(0, DollaransContext);
    }
    partans() {
        return this.tryGetRuleContext(0, PartansContext);
    }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    title() {
        return this.tryGetRuleContext(0, TitleContext);
    }
    instruction() {
        return this.tryGetRuleContext(0, InstructionContext);
    }
    hint() {
        return this.tryGetRuleContext(0, HintContext);
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    example() {
        return this.tryGetRuleContext(0, ExampleContext);
    }
    bool_label() {
        return this.tryGetRuleContext(0, Bool_labelContext);
    }
    progress_points() {
        return this.tryGetRuleContext(0, Progress_pointsContext);
    }
    istracked() {
        return this.tryGetRuleContext(0, IstrackedContext);
    }
    isinfoonly() {
        return this.tryGetRuleContext(0, IsinfoonlyContext);
    }
    imagebit() {
        return this.tryGetRuleContext(0, ImagebitContext);
    }
    audiobit() {
        return this.tryGetRuleContext(0, AudiobitContext);
    }
    videobit() {
        return this.tryGetRuleContext(0, VideobitContext);
    }
    articlebit() {
        return this.tryGetRuleContext(0, ArticlebitContext);
    }
    documentbit() {
        return this.tryGetRuleContext(0, DocumentbitContext);
    }
    appbit() {
        return this.tryGetRuleContext(0, AppbitContext);
    }
    websitebit() {
        return this.tryGetRuleContext(0, WebsitebitContext);
    }
    stillimagefilmbit() {
        return this.tryGetRuleContext(0, StillimagefilmbitContext);
    }
    angleref() {
        return this.tryGetRuleContext(0, AnglerefContext);
    }
    anchor() {
        return this.tryGetRuleContext(0, AnchorContext);
    }
    bracketed_text() {
        return this.tryGetRuleContext(0, Bracketed_textContext);
    }
    sp() {
        return this.tryGetRuleContext(0, SpContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bitElem; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitElem) {
            listener.enterBitElem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitElem) {
            listener.exitBitElem(this);
        }
    }
}
exports.BitElemContext = BitElemContext;
class GapContext extends ParserRuleContext_1.ParserRuleContext {
    single_gap(i) {
        if (i === undefined) {
            return this.getRuleContexts(Single_gapContext);
        }
        else {
            return this.getRuleContext(i, Single_gapContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    hint(i) {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }
        else {
            return this.getRuleContext(i, HintContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    example(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExampleContext);
        }
        else {
            return this.getRuleContext(i, ExampleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_gap; }
    // @Override
    enterRule(listener) {
        if (listener.enterGap) {
            listener.enterGap(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGap) {
            listener.exitGap(this);
        }
    }
}
exports.GapContext = GapContext;
class Single_gapContext extends ParserRuleContext_1.ParserRuleContext {
    OPU() { return this.getToken(bitmarkParser.OPU, 0); }
    clnsp() {
        return this.getRuleContext(0, ClnspContext);
    }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    STRING() { return this.tryGetToken(bitmarkParser.STRING, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_single_gap; }
    // @Override
    enterRule(listener) {
        if (listener.enterSingle_gap) {
            listener.enterSingle_gap(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSingle_gap) {
            listener.exitSingle_gap(this);
        }
    }
}
exports.Single_gapContext = Single_gapContext;
class Choice_plusContext extends ParserRuleContext_1.ParserRuleContext {
    OPP() { return this.getToken(bitmarkParser.OPP, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_plus; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_plus) {
            listener.enterChoice_plus(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_plus) {
            listener.exitChoice_plus(this);
        }
    }
}
exports.Choice_plusContext = Choice_plusContext;
class Choice_minusContext extends ParserRuleContext_1.ParserRuleContext {
    OPM() { return this.getToken(bitmarkParser.OPM, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_minus; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_minus) {
            listener.enterChoice_minus(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_minus) {
            listener.exitChoice_minus(this);
        }
    }
}
exports.Choice_minusContext = Choice_minusContext;
class Choice_starContext extends ParserRuleContext_1.ParserRuleContext {
    OPR() { return this.getToken(bitmarkParser.OPR, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    item() {
        return this.tryGetRuleContext(0, ItemContext);
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_choice_star; }
    // @Override
    enterRule(listener) {
        if (listener.enterChoice_star) {
            listener.enterChoice_star(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChoice_star) {
            listener.exitChoice_star(this);
        }
    }
}
exports.Choice_starContext = Choice_starContext;
class EssayContext extends ParserRuleContext_1.ParserRuleContext {
    BitEssay() { return this.getToken(bitmarkParser.BitEssay, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    ml_example(i) {
        if (i === undefined) {
            return this.getRuleContexts(Ml_exampleContext);
        }
        else {
            return this.getRuleContext(i, Ml_exampleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_essay; }
    // @Override
    enterRule(listener) {
        if (listener.enterEssay) {
            listener.enterEssay(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEssay) {
            listener.exitEssay(this);
        }
    }
}
exports.EssayContext = EssayContext;
class Ml_exampleContext extends ParserRuleContext_1.ParserRuleContext {
    AtExamplecol() { return this.getToken(bitmarkParser.AtExamplecol, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_ml_example; }
    // @Override
    enterRule(listener) {
        if (listener.enterMl_example) {
            listener.enterMl_example(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMl_example) {
            listener.exitMl_example(this);
        }
    }
}
exports.Ml_exampleContext = Ml_exampleContext;
class PartansContext extends ParserRuleContext_1.ParserRuleContext {
    AtPartialAnswerS() { return this.tryGetToken(bitmarkParser.AtPartialAnswerS, 0); }
    AtPartialAnswer() { return this.tryGetToken(bitmarkParser.AtPartialAnswer, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_partans; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartans) {
            listener.enterPartans(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartans) {
            listener.exitPartans(this);
        }
    }
}
exports.PartansContext = PartansContext;
class ResourceContext extends ParserRuleContext_1.ParserRuleContext {
    bitElem() {
        return this.getRuleContext(0, BitElemContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource) {
            listener.enterResource(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource) {
            listener.exitResource(this);
        }
    }
}
exports.ResourceContext = ResourceContext;
class CorrectionContext extends ParserRuleContext_1.ParserRuleContext {
    BitCorrection() { return this.getToken(bitmarkParser.BitCorrection, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    corrs(i) {
        if (i === undefined) {
            return this.getRuleContexts(CorrsContext);
        }
        else {
            return this.getRuleContext(i, CorrsContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_correction; }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrection) {
            listener.enterCorrection(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrection) {
            listener.exitCorrection(this);
        }
    }
}
exports.CorrectionContext = CorrectionContext;
class CorrsContext extends ParserRuleContext_1.ParserRuleContext {
    OPM() { return this.tryGetToken(bitmarkParser.OPM, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL() { return this.getToken(bitmarkParser.NL, 0); }
    OPP() { return this.tryGetToken(bitmarkParser.OPP, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_corrs; }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrs) {
            listener.enterCorrs(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrs) {
            listener.exitCorrs(this);
        }
    }
}
exports.CorrsContext = CorrsContext;
class Mark_Context extends ParserRuleContext_1.ParserRuleContext {
    BitMark() { return this.getToken(bitmarkParser.BitMark, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    mark_text(i) {
        if (i === undefined) {
            return this.getRuleContexts(Mark_textContext);
        }
        else {
            return this.getRuleContext(i, Mark_textContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_) {
            listener.enterMark_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_) {
            listener.exitMark_(this);
        }
    }
}
exports.Mark_Context = Mark_Context;
class Mark_textContext extends ParserRuleContext_1.ParserRuleContext {
    OPS() { return this.getToken(bitmarkParser.OPS, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    mark_color() {
        return this.tryGetRuleContext(0, Mark_colorContext);
    }
    hint(i) {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }
        else {
            return this.getRuleContext(i, HintContext);
        }
    }
    item(i) {
        if (i === undefined) {
            return this.getRuleContexts(ItemContext);
        }
        else {
            return this.getRuleContext(i, ItemContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_text; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_text) {
            listener.enterMark_text(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_text) {
            listener.exitMark_text(this);
        }
    }
}
exports.Mark_textContext = Mark_textContext;
class Mark_colorContext extends ParserRuleContext_1.ParserRuleContext {
    OPAMARK() { return this.getToken(bitmarkParser.OPAMARK, 0); }
    STRING() { return this.getToken(bitmarkParser.STRING, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_mark_color; }
    // @Override
    enterRule(listener) {
        if (listener.enterMark_color) {
            listener.enterMark_color(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMark_color) {
            listener.exitMark_color(this);
        }
    }
}
exports.Mark_colorContext = Mark_colorContext;
class Take_audioContext extends ParserRuleContext_1.ParserRuleContext {
    BitTakeAudio() { return this.getToken(bitmarkParser.BitTakeAudio, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_take_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterTake_audio) {
            listener.enterTake_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTake_audio) {
            listener.exitTake_audio(this);
        }
    }
}
exports.Take_audioContext = Take_audioContext;
class Take_pictureContext extends ParserRuleContext_1.ParserRuleContext {
    BitTakepic() { return this.getToken(bitmarkParser.BitTakepic, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_take_picture; }
    // @Override
    enterRule(listener) {
        if (listener.enterTake_picture) {
            listener.enterTake_picture(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTake_picture) {
            listener.exitTake_picture(this);
        }
    }
}
exports.Take_pictureContext = Take_pictureContext;
class Record_audioContext extends ParserRuleContext_1.ParserRuleContext {
    BitRecaud() { return this.getToken(bitmarkParser.BitRecaud, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_record_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterRecord_audio) {
            listener.enterRecord_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRecord_audio) {
            listener.exitRecord_audio(this);
        }
    }
}
exports.Record_audioContext = Record_audioContext;
class Preparation_noteContext extends ParserRuleContext_1.ParserRuleContext {
    BitPrepnote() { return this.getToken(bitmarkParser.BitPrepnote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_preparation_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterPreparation_note) {
            listener.enterPreparation_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPreparation_note) {
            listener.exitPreparation_note(this);
        }
    }
}
exports.Preparation_noteContext = Preparation_noteContext;
class AssignmentContext extends ParserRuleContext_1.ParserRuleContext {
    BitAssign() { return this.getToken(bitmarkParser.BitAssign, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    lines() {
        return this.tryGetRuleContext(0, LinesContext);
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_assignment; }
    // @Override
    enterRule(listener) {
        if (listener.enterAssignment) {
            listener.enterAssignment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAssignment) {
            listener.exitAssignment(this);
        }
    }
}
exports.AssignmentContext = AssignmentContext;
class ArticleContext extends ParserRuleContext_1.ParserRuleContext {
    BitArticle() { return this.getToken(bitmarkParser.BitArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticle) {
            listener.enterArticle(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticle) {
            listener.exitArticle(this);
        }
    }
}
exports.ArticleContext = ArticleContext;
class StatementContext extends ParserRuleContext_1.ParserRuleContext {
    BitStatement() { return this.getToken(bitmarkParser.BitStatement, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_statement; }
    // @Override
    enterRule(listener) {
        if (listener.enterStatement) {
            listener.enterStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStatement) {
            listener.exitStatement(this);
        }
    }
}
exports.StatementContext = StatementContext;
class DetailsContext extends ParserRuleContext_1.ParserRuleContext {
    BitDetails() { return this.getToken(bitmarkParser.BitDetails, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_details; }
    // @Override
    enterRule(listener) {
        if (listener.enterDetails) {
            listener.enterDetails(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDetails) {
            listener.exitDetails(this);
        }
    }
}
exports.DetailsContext = DetailsContext;
class Sample_solutionContext extends ParserRuleContext_1.ParserRuleContext {
    BitSampleSolution() { return this.getToken(bitmarkParser.BitSampleSolution, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sample_solution; }
    // @Override
    enterRule(listener) {
        if (listener.enterSample_solution) {
            listener.enterSample_solution(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSample_solution) {
            listener.exitSample_solution(this);
        }
    }
}
exports.Sample_solutionContext = Sample_solutionContext;
class ButtoncopytextContext extends ParserRuleContext_1.ParserRuleContext {
    BitButtonCopytext() { return this.getToken(bitmarkParser.BitButtonCopytext, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_buttoncopytext; }
    // @Override
    enterRule(listener) {
        if (listener.enterButtoncopytext) {
            listener.enterButtoncopytext(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitButtoncopytext) {
            listener.exitButtoncopytext(this);
        }
    }
}
exports.ButtoncopytextContext = ButtoncopytextContext;
class WbtcontinueContext extends ParserRuleContext_1.ParserRuleContext {
    BitWbtContinue() { return this.getToken(bitmarkParser.BitWbtContinue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_wbtcontinue; }
    // @Override
    enterRule(listener) {
        if (listener.enterWbtcontinue) {
            listener.enterWbtcontinue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWbtcontinue) {
            listener.exitWbtcontinue(this);
        }
    }
}
exports.WbtcontinueContext = WbtcontinueContext;
class LearningpathdetailsContext extends ParserRuleContext_1.ParserRuleContext {
    BitLearningPathDetails() { return this.getToken(bitmarkParser.BitLearningPathDetails, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_learningpathdetails; }
    // @Override
    enterRule(listener) {
        if (listener.enterLearningpathdetails) {
            listener.enterLearningpathdetails(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLearningpathdetails) {
            listener.exitLearningpathdetails(this);
        }
    }
}
exports.LearningpathdetailsContext = LearningpathdetailsContext;
class PageContext extends ParserRuleContext_1.ParserRuleContext {
    BitPage() { return this.getToken(bitmarkParser.BitPage, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_page; }
    // @Override
    enterRule(listener) {
        if (listener.enterPage) {
            listener.enterPage(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPage) {
            listener.exitPage(this);
        }
    }
}
exports.PageContext = PageContext;
class NoteContext extends ParserRuleContext_1.ParserRuleContext {
    BitNote() { return this.getToken(bitmarkParser.BitNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterNote) {
            listener.enterNote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNote) {
            listener.exitNote(this);
        }
    }
}
exports.NoteContext = NoteContext;
class InfoContext extends ParserRuleContext_1.ParserRuleContext {
    BitInfo() { return this.getToken(bitmarkParser.BitInfo, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_info; }
    // @Override
    enterRule(listener) {
        if (listener.enterInfo) {
            listener.enterInfo(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInfo) {
            listener.exitInfo(this);
        }
    }
}
exports.InfoContext = InfoContext;
class WarningContext extends ParserRuleContext_1.ParserRuleContext {
    BitWarning() { return this.getToken(bitmarkParser.BitWarning, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_warning; }
    // @Override
    enterRule(listener) {
        if (listener.enterWarning) {
            listener.enterWarning(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWarning) {
            listener.exitWarning(this);
        }
    }
}
exports.WarningContext = WarningContext;
class RemarkContext extends ParserRuleContext_1.ParserRuleContext {
    BitRemark() { return this.getToken(bitmarkParser.BitRemark, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_remark; }
    // @Override
    enterRule(listener) {
        if (listener.enterRemark) {
            listener.enterRemark(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRemark) {
            listener.exitRemark(this);
        }
    }
}
exports.RemarkContext = RemarkContext;
class HelpContext extends ParserRuleContext_1.ParserRuleContext {
    BitHelp() { return this.getToken(bitmarkParser.BitHelp, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_help; }
    // @Override
    enterRule(listener) {
        if (listener.enterHelp) {
            listener.enterHelp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHelp) {
            listener.exitHelp(this);
        }
    }
}
exports.HelpContext = HelpContext;
class DangerContext extends ParserRuleContext_1.ParserRuleContext {
    BitDanger() { return this.getToken(bitmarkParser.BitDanger, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_danger; }
    // @Override
    enterRule(listener) {
        if (listener.enterDanger) {
            listener.enterDanger(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDanger) {
            listener.exitDanger(this);
        }
    }
}
exports.DangerContext = DangerContext;
class BugContext extends ParserRuleContext_1.ParserRuleContext {
    BitBug() { return this.getToken(bitmarkParser.BitBug, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bug; }
    // @Override
    enterRule(listener) {
        if (listener.enterBug) {
            listener.enterBug(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBug) {
            listener.exitBug(this);
        }
    }
}
exports.BugContext = BugContext;
class SidenoteContext extends ParserRuleContext_1.ParserRuleContext {
    BitSidenote() { return this.getToken(bitmarkParser.BitSidenote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sidenote; }
    // @Override
    enterRule(listener) {
        if (listener.enterSidenote) {
            listener.enterSidenote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSidenote) {
            listener.exitSidenote(this);
        }
    }
}
exports.SidenoteContext = SidenoteContext;
class StickynoteContext extends ParserRuleContext_1.ParserRuleContext {
    BitStickynote() { return this.getToken(bitmarkParser.BitStickynote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stickynote; }
    // @Override
    enterRule(listener) {
        if (listener.enterStickynote) {
            listener.enterStickynote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStickynote) {
            listener.exitStickynote(this);
        }
    }
}
exports.StickynoteContext = StickynoteContext;
class QuoteContext extends ParserRuleContext_1.ParserRuleContext {
    BitQuote() { return this.getToken(bitmarkParser.BitQuote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_quote; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuote) {
            listener.enterQuote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuote) {
            listener.exitQuote(this);
        }
    }
}
exports.QuoteContext = QuoteContext;
class FootnoteContext extends ParserRuleContext_1.ParserRuleContext {
    BitFootnote() { return this.getToken(bitmarkParser.BitFootnote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_footnote; }
    // @Override
    enterRule(listener) {
        if (listener.enterFootnote) {
            listener.enterFootnote(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFootnote) {
            listener.exitFootnote(this);
        }
    }
}
exports.FootnoteContext = FootnoteContext;
class HintbitContext extends ParserRuleContext_1.ParserRuleContext {
    BitHint() { return this.getToken(bitmarkParser.BitHint, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_hintbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterHintbit) {
            listener.enterHintbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHintbit) {
            listener.exitHintbit(this);
        }
    }
}
exports.HintbitContext = HintbitContext;
class ExamplebitContext extends ParserRuleContext_1.ParserRuleContext {
    BitExample() { return this.getToken(bitmarkParser.BitExample, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_examplebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterExamplebit) {
            listener.enterExamplebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExamplebit) {
            listener.exitExamplebit(this);
        }
    }
}
exports.ExamplebitContext = ExamplebitContext;
class Vendor_padlet_embedContext extends ParserRuleContext_1.ParserRuleContext {
    BitVendorPadletEmbed() { return this.getToken(bitmarkParser.BitVendorPadletEmbed, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_padlet_embed; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_padlet_embed) {
            listener.enterVendor_padlet_embed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_padlet_embed) {
            listener.exitVendor_padlet_embed(this);
        }
    }
}
exports.Vendor_padlet_embedContext = Vendor_padlet_embedContext;
class ScormContext extends ParserRuleContext_1.ParserRuleContext {
    BitScorm() { return this.getToken(bitmarkParser.BitScorm, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_scorm; }
    // @Override
    enterRule(listener) {
        if (listener.enterScorm) {
            listener.enterScorm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitScorm) {
            listener.exitScorm(this);
        }
    }
}
exports.ScormContext = ScormContext;
class Bit_imageContext extends ParserRuleContext_1.ParserRuleContext {
    BitImage() { return this.getToken(bitmarkParser.BitImage, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_image) {
            listener.enterBit_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_image) {
            listener.exitBit_image(this);
        }
    }
}
exports.Bit_imageContext = Bit_imageContext;
class Bit_imageLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageLink() { return this.getToken(bitmarkParser.BitImageLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageLink) {
            listener.enterBit_imageLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageLink) {
            listener.exitBit_imageLink(this);
        }
    }
}
exports.Bit_imageLinkContext = Bit_imageLinkContext;
class Bit_imageZoomContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageZoom() { return this.getToken(bitmarkParser.BitImageZoom, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageZoom; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageZoom) {
            listener.enterBit_imageZoom(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageZoom) {
            listener.exitBit_imageZoom(this);
        }
    }
}
exports.Bit_imageZoomContext = Bit_imageZoomContext;
class Bit_imagePrototypeContext extends ParserRuleContext_1.ParserRuleContext {
    BitImagePrototype() { return this.getToken(bitmarkParser.BitImagePrototype, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imagePrototype; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imagePrototype) {
            listener.enterBit_imagePrototype(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imagePrototype) {
            listener.exitBit_imagePrototype(this);
        }
    }
}
exports.Bit_imagePrototypeContext = Bit_imagePrototypeContext;
class Bit_imageSuperWideContext extends ParserRuleContext_1.ParserRuleContext {
    BitImageSuperWide() { return this.getToken(bitmarkParser.BitImageSuperWide, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_imageSuperWide; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_imageSuperWide) {
            listener.enterBit_imageSuperWide(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_imageSuperWide) {
            listener.exitBit_imageSuperWide(this);
        }
    }
}
exports.Bit_imageSuperWideContext = Bit_imageSuperWideContext;
class Bit_audioContext extends ParserRuleContext_1.ParserRuleContext {
    BitAudio() { return this.getToken(bitmarkParser.BitAudio, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audio; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audio) {
            listener.enterBit_audio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audio) {
            listener.exitBit_audio(this);
        }
    }
}
exports.Bit_audioContext = Bit_audioContext;
class Bit_audioLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitAudioLink() { return this.getToken(bitmarkParser.BitAudioLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audioLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audioLink) {
            listener.enterBit_audioLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audioLink) {
            listener.exitBit_audioLink(this);
        }
    }
}
exports.Bit_audioLinkContext = Bit_audioLinkContext;
class Bit_audioEmbedContext extends ParserRuleContext_1.ParserRuleContext {
    BitAudioEmbed() { return this.getToken(bitmarkParser.BitAudioEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_audioEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_audioEmbed) {
            listener.enterBit_audioEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_audioEmbed) {
            listener.exitBit_audioEmbed(this);
        }
    }
}
exports.Bit_audioEmbedContext = Bit_audioEmbedContext;
class Bit_videoContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideo() { return this.getToken(bitmarkParser.BitVideo, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_video; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_video) {
            listener.enterBit_video(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_video) {
            listener.exitBit_video(this);
        }
    }
}
exports.Bit_videoContext = Bit_videoContext;
class Bit_videoLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoLink() { return this.getToken(bitmarkParser.BitVideoLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoLink) {
            listener.enterBit_videoLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoLink) {
            listener.exitBit_videoLink(this);
        }
    }
}
exports.Bit_videoLinkContext = Bit_videoLinkContext;
class Bit_videoEmbedContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoEmbed() { return this.getToken(bitmarkParser.BitVideoEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoEmbed) {
            listener.enterBit_videoEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoEmbed) {
            listener.exitBit_videoEmbed(this);
        }
    }
}
exports.Bit_videoEmbedContext = Bit_videoEmbedContext;
class Bit_videoPortraitContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoPortrait() { return this.getToken(bitmarkParser.BitVideoPortrait, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoPortrait; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoPortrait) {
            listener.enterBit_videoPortrait(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoPortrait) {
            listener.exitBit_videoPortrait(this);
        }
    }
}
exports.Bit_videoPortraitContext = Bit_videoPortraitContext;
class Bit_videoLandscapeContext extends ParserRuleContext_1.ParserRuleContext {
    BitVideoLandscape() { return this.getToken(bitmarkParser.BitVideoLandscape, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_videoLandscape; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_videoLandscape) {
            listener.enterBit_videoLandscape(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_videoLandscape) {
            listener.exitBit_videoLandscape(this);
        }
    }
}
exports.Bit_videoLandscapeContext = Bit_videoLandscapeContext;
class Bit_stillImageFilmContext extends ParserRuleContext_1.ParserRuleContext {
    BitStillImageFilm() { return this.getToken(bitmarkParser.BitStillImageFilm, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilm; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilm) {
            listener.enterBit_stillImageFilm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilm) {
            listener.exitBit_stillImageFilm(this);
        }
    }
}
exports.Bit_stillImageFilmContext = Bit_stillImageFilmContext;
class Bit_stillImageFilmLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitStillImageFilmLink() { return this.getToken(bitmarkParser.BitStillImageFilmLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilmLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilmLink) {
            listener.enterBit_stillImageFilmLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilmLink) {
            listener.exitBit_stillImageFilmLink(this);
        }
    }
}
exports.Bit_stillImageFilmLinkContext = Bit_stillImageFilmLinkContext;
class Bit_stillImageFilmEmbedContext extends ParserRuleContext_1.ParserRuleContext {
    BitStillImageFilmEmbed() { return this.getToken(bitmarkParser.BitStillImageFilmEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_stillImageFilmEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_stillImageFilmEmbed) {
            listener.enterBit_stillImageFilmEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_stillImageFilmEmbed) {
            listener.exitBit_stillImageFilmEmbed(this);
        }
    }
}
exports.Bit_stillImageFilmEmbedContext = Bit_stillImageFilmEmbedContext;
class Bit_websiteLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitWebsiteLink() { return this.getToken(bitmarkParser.BitWebsiteLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_websiteLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_websiteLink) {
            listener.enterBit_websiteLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_websiteLink) {
            listener.exitBit_websiteLink(this);
        }
    }
}
exports.Bit_websiteLinkContext = Bit_websiteLinkContext;
class Bit_documentContext extends ParserRuleContext_1.ParserRuleContext {
    BitDocument() { return this.getToken(bitmarkParser.BitDocument, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_document; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_document) {
            listener.enterBit_document(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_document) {
            listener.exitBit_document(this);
        }
    }
}
exports.Bit_documentContext = Bit_documentContext;
class Bit_documentLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitDocumentLink() { return this.getToken(bitmarkParser.BitDocumentLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentLink) {
            listener.enterBit_documentLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentLink) {
            listener.exitBit_documentLink(this);
        }
    }
}
exports.Bit_documentLinkContext = Bit_documentLinkContext;
class Bit_documentEmbedContext extends ParserRuleContext_1.ParserRuleContext {
    BitDocumentEmbed() { return this.getToken(bitmarkParser.BitDocumentEmbed, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentEmbed; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentEmbed) {
            listener.enterBit_documentEmbed(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentEmbed) {
            listener.exitBit_documentEmbed(this);
        }
    }
}
exports.Bit_documentEmbedContext = Bit_documentEmbedContext;
class Bit_documentDownloadContext extends ParserRuleContext_1.ParserRuleContext {
    BitDocumentDownload() { return this.getToken(bitmarkParser.BitDocumentDownload, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_documentDownload; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_documentDownload) {
            listener.enterBit_documentDownload(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_documentDownload) {
            listener.exitBit_documentDownload(this);
        }
    }
}
exports.Bit_documentDownloadContext = Bit_documentDownloadContext;
class Bit_appLinkContext extends ParserRuleContext_1.ParserRuleContext {
    BitAppLink() { return this.getToken(bitmarkParser.BitAppLink, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_appLink; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_appLink) {
            listener.enterBit_appLink(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_appLink) {
            listener.exitBit_appLink(this);
        }
    }
}
exports.Bit_appLinkContext = Bit_appLinkContext;
class Bit_editorialContext extends ParserRuleContext_1.ParserRuleContext {
    BitEditorial() { return this.getToken(bitmarkParser.BitEditorial, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bit_editorial; }
    // @Override
    enterRule(listener) {
        if (listener.enterBit_editorial) {
            listener.enterBit_editorial(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBit_editorial) {
            listener.exitBit_editorial(this);
        }
    }
}
exports.Bit_editorialContext = Bit_editorialContext;
class Book_frontispieceContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookFrontispiece() { return this.getToken(bitmarkParser.BitBookFrontispiece, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_frontispiece; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_frontispiece) {
            listener.enterBook_frontispiece(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_frontispiece) {
            listener.exitBook_frontispiece(this);
        }
    }
}
exports.Book_frontispieceContext = Book_frontispieceContext;
class Book_titleContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookTitle() { return this.getToken(bitmarkParser.BitBookTitle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_title; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_title) {
            listener.enterBook_title(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_title) {
            listener.exitBook_title(this);
        }
    }
}
exports.Book_titleContext = Book_titleContext;
class Book_copyrightContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookCopyright() { return this.getToken(bitmarkParser.BitBookCopyright, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_copyright; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_copyright) {
            listener.enterBook_copyright(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_copyright) {
            listener.exitBook_copyright(this);
        }
    }
}
exports.Book_copyrightContext = Book_copyrightContext;
class Book_dedicationContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookDedication() { return this.getToken(bitmarkParser.BitBookDedication, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_dedication; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_dedication) {
            listener.enterBook_dedication(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_dedication) {
            listener.exitBook_dedication(this);
        }
    }
}
exports.Book_dedicationContext = Book_dedicationContext;
class Book_forwordContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookForword() { return this.getToken(bitmarkParser.BitBookForword, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_forword; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_forword) {
            listener.enterBook_forword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_forword) {
            listener.exitBook_forword(this);
        }
    }
}
exports.Book_forwordContext = Book_forwordContext;
class Book_prefaceContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookPreface() { return this.getToken(bitmarkParser.BitBookPreface, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_preface; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_preface) {
            listener.enterBook_preface(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_preface) {
            listener.exitBook_preface(this);
        }
    }
}
exports.Book_prefaceContext = Book_prefaceContext;
class Book_prologueContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookPrologue() { return this.getToken(bitmarkParser.BitBookPrologue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_prologue; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_prologue) {
            listener.enterBook_prologue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_prologue) {
            listener.exitBook_prologue(this);
        }
    }
}
exports.Book_prologueContext = Book_prologueContext;
class Book_epilogueContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookEpilogue() { return this.getToken(bitmarkParser.BitBookEpilogue, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_epilogue; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_epilogue) {
            listener.enterBook_epilogue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_epilogue) {
            listener.exitBook_epilogue(this);
        }
    }
}
exports.Book_epilogueContext = Book_epilogueContext;
class Book_introductionContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookIntroduction() { return this.getToken(bitmarkParser.BitBookIntroduction, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_introduction; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_introduction) {
            listener.enterBook_introduction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_introduction) {
            listener.exitBook_introduction(this);
        }
    }
}
exports.Book_introductionContext = Book_introductionContext;
class Book_inciting_incidentContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookIncitingIncident() { return this.getToken(bitmarkParser.BitBookIncitingIncident, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_inciting_incident; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_inciting_incident) {
            listener.enterBook_inciting_incident(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_inciting_incident) {
            listener.exitBook_inciting_incident(this);
        }
    }
}
exports.Book_inciting_incidentContext = Book_inciting_incidentContext;
class Book_conclusionContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookConclusion() { return this.getToken(bitmarkParser.BitBookConclusion, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_conclusion; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_conclusion) {
            listener.enterBook_conclusion(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_conclusion) {
            listener.exitBook_conclusion(this);
        }
    }
}
exports.Book_conclusionContext = Book_conclusionContext;
class Book_afterwordContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookAfterword() { return this.getToken(bitmarkParser.BitBookAfterword, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_afterword; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_afterword) {
            listener.enterBook_afterword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_afterword) {
            listener.exitBook_afterword(this);
        }
    }
}
exports.Book_afterwordContext = Book_afterwordContext;
class Book_postscriptContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookPostscript() { return this.getToken(bitmarkParser.BitBookPostscript, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_postscript; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_postscript) {
            listener.enterBook_postscript(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_postscript) {
            listener.exitBook_postscript(this);
        }
    }
}
exports.Book_postscriptContext = Book_postscriptContext;
class Book_appendixContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookappendix() { return this.getToken(bitmarkParser.BitBookappendix, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_appendix; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_appendix) {
            listener.enterBook_appendix(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_appendix) {
            listener.exitBook_appendix(this);
        }
    }
}
exports.Book_appendixContext = Book_appendixContext;
class Book_addendumContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookAddendum() { return this.getToken(bitmarkParser.BitBookAddendum, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_addendum; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_addendum) {
            listener.enterBook_addendum(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_addendum) {
            listener.exitBook_addendum(this);
        }
    }
}
exports.Book_addendumContext = Book_addendumContext;
class Book_acknowledgmentsContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookAcknowledgments() { return this.getToken(bitmarkParser.BitBookAcknowledgments, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_acknowledgments; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_acknowledgments) {
            listener.enterBook_acknowledgments(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_acknowledgments) {
            listener.exitBook_acknowledgments(this);
        }
    }
}
exports.Book_acknowledgmentsContext = Book_acknowledgmentsContext;
class Book_list_of_contributorsContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookListOfContributors() { return this.getToken(bitmarkParser.BitBookListOfContributors, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_list_of_contributors; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_list_of_contributors) {
            listener.enterBook_list_of_contributors(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_list_of_contributors) {
            listener.exitBook_list_of_contributors(this);
        }
    }
}
exports.Book_list_of_contributorsContext = Book_list_of_contributorsContext;
class Book_bibliographyContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookBibliography() { return this.getToken(bitmarkParser.BitBookBibliography, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_bibliography; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_bibliography) {
            listener.enterBook_bibliography(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_bibliography) {
            listener.exitBook_bibliography(this);
        }
    }
}
exports.Book_bibliographyContext = Book_bibliographyContext;
class Book_reference_listContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookReferenceList() { return this.getToken(bitmarkParser.BitBookReferenceList, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_reference_list; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_reference_list) {
            listener.enterBook_reference_list(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_reference_list) {
            listener.exitBook_reference_list(this);
        }
    }
}
exports.Book_reference_listContext = Book_reference_listContext;
class Book_endnotesContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookEndnotes() { return this.getToken(bitmarkParser.BitBookEndnotes, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_endnotes; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_endnotes) {
            listener.enterBook_endnotes(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_endnotes) {
            listener.exitBook_endnotes(this);
        }
    }
}
exports.Book_endnotesContext = Book_endnotesContext;
class Book_notesContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookNotes() { return this.getToken(bitmarkParser.BitBookNotes, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_notes; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_notes) {
            listener.enterBook_notes(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_notes) {
            listener.exitBook_notes(this);
        }
    }
}
exports.Book_notesContext = Book_notesContext;
class Book_copyright_permissionsContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookCopyrightPermissions() { return this.getToken(bitmarkParser.BitBookCopyrightPermissions, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_copyright_permissions; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_copyright_permissions) {
            listener.enterBook_copyright_permissions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_copyright_permissions) {
            listener.exitBook_copyright_permissions(this);
        }
    }
}
exports.Book_copyright_permissionsContext = Book_copyright_permissionsContext;
class Book_teaserContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookTeaser() { return this.getToken(bitmarkParser.BitBookTeaser, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_teaser; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_teaser) {
            listener.enterBook_teaser(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_teaser) {
            listener.exitBook_teaser(this);
        }
    }
}
exports.Book_teaserContext = Book_teaserContext;
class Book_auther_bioContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookAutherBio() { return this.getToken(bitmarkParser.BitBookAutherBio, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_auther_bio; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_auther_bio) {
            listener.enterBook_auther_bio(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_auther_bio) {
            listener.exitBook_auther_bio(this);
        }
    }
}
exports.Book_auther_bioContext = Book_auther_bioContext;
class Book_request_for_a_book_reviewContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookRequestForABookReview() { return this.getToken(bitmarkParser.BitBookRequestForABookReview, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_request_for_a_book_review; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_request_for_a_book_review) {
            listener.enterBook_request_for_a_book_review(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_request_for_a_book_review) {
            listener.exitBook_request_for_a_book_review(this);
        }
    }
}
exports.Book_request_for_a_book_reviewContext = Book_request_for_a_book_reviewContext;
class Book_coming_soonContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookComingSoon() { return this.getToken(bitmarkParser.BitBookComingSoon, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_coming_soon; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_coming_soon) {
            listener.enterBook_coming_soon(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_coming_soon) {
            listener.exitBook_coming_soon(this);
        }
    }
}
exports.Book_coming_soonContext = Book_coming_soonContext;
class Book_read_moreContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookReadMore() { return this.getToken(bitmarkParser.BitBookReadMore, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_read_more; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_read_more) {
            listener.enterBook_read_more(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_read_more) {
            listener.exitBook_read_more(this);
        }
    }
}
exports.Book_read_moreContext = Book_read_moreContext;
class Book_summaryContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookSummary() { return this.getToken(bitmarkParser.BitBookSummary, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_summary; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_summary) {
            listener.enterBook_summary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_summary) {
            listener.exitBook_summary(this);
        }
    }
}
exports.Book_summaryContext = Book_summaryContext;
class Book_epigraphContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookEpigraph() { return this.getToken(bitmarkParser.BitBookEpigraph, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_epigraph; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_epigraph) {
            listener.enterBook_epigraph(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_epigraph) {
            listener.exitBook_epigraph(this);
        }
    }
}
exports.Book_epigraphContext = Book_epigraphContext;
class CodeContext extends ParserRuleContext_1.ParserRuleContext {
    BitCode() { return this.getToken(bitmarkParser.BitCode, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_code; }
    // @Override
    enterRule(listener) {
        if (listener.enterCode) {
            listener.enterCode(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCode) {
            listener.exitCode(this);
        }
    }
}
exports.CodeContext = CodeContext;
class Card1Context extends ParserRuleContext_1.ParserRuleContext {
    BitCard1() { return this.getToken(bitmarkParser.BitCard1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_card1; }
    // @Override
    enterRule(listener) {
        if (listener.enterCard1) {
            listener.enterCard1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCard1) {
            listener.exitCard1(this);
        }
    }
}
exports.Card1Context = Card1Context;
class Question1Context extends ParserRuleContext_1.ParserRuleContext {
    BitQuestion1() { return this.getToken(bitmarkParser.BitQuestion1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_question1; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuestion1) {
            listener.enterQuestion1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuestion1) {
            listener.exitQuestion1(this);
        }
    }
}
exports.Question1Context = Question1Context;
class ScreenshotContext extends ParserRuleContext_1.ParserRuleContext {
    BitScreenshot() { return this.getToken(bitmarkParser.BitScreenshot, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_screenshot; }
    // @Override
    enterRule(listener) {
        if (listener.enterScreenshot) {
            listener.enterScreenshot(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitScreenshot) {
            listener.exitScreenshot(this);
        }
    }
}
exports.ScreenshotContext = ScreenshotContext;
class Focus_imageContext extends ParserRuleContext_1.ParserRuleContext {
    BitFocusImage() { return this.getToken(bitmarkParser.BitFocusImage, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_focus_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterFocus_image) {
            listener.enterFocus_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFocus_image) {
            listener.exitFocus_image(this);
        }
    }
}
exports.Focus_imageContext = Focus_imageContext;
class PhotoContext extends ParserRuleContext_1.ParserRuleContext {
    BitPhoto() { return this.getToken(bitmarkParser.BitPhoto, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_photo; }
    // @Override
    enterRule(listener) {
        if (listener.enterPhoto) {
            listener.enterPhoto(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPhoto) {
            listener.exitPhoto(this);
        }
    }
}
exports.PhotoContext = PhotoContext;
class Browser_imageContext extends ParserRuleContext_1.ParserRuleContext {
    BitBrowserImage() { return this.getToken(bitmarkParser.BitBrowserImage, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_browser_image; }
    // @Override
    enterRule(listener) {
        if (listener.enterBrowser_image) {
            listener.enterBrowser_image(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBrowser_image) {
            listener.exitBrowser_image(this);
        }
    }
}
exports.Browser_imageContext = Browser_imageContext;
class Chapter_subject_matterContext extends ParserRuleContext_1.ParserRuleContext {
    BitChapterSubjectMatter() { return this.getToken(bitmarkParser.BitChapterSubjectMatter, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_chapter_subject_matter; }
    // @Override
    enterRule(listener) {
        if (listener.enterChapter_subject_matter) {
            listener.enterChapter_subject_matter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChapter_subject_matter) {
            listener.exitChapter_subject_matter(this);
        }
    }
}
exports.Chapter_subject_matterContext = Chapter_subject_matterContext;
class Release_noteContext extends ParserRuleContext_1.ParserRuleContext {
    BitReleaseNote() { return this.getToken(bitmarkParser.BitReleaseNote, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_release_note; }
    // @Override
    enterRule(listener) {
        if (listener.enterRelease_note) {
            listener.enterRelease_note(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRelease_note) {
            listener.exitRelease_note(this);
        }
    }
}
exports.Release_noteContext = Release_noteContext;
class ConclusionContext extends ParserRuleContext_1.ParserRuleContext {
    BitConclusion() { return this.getToken(bitmarkParser.BitConclusion, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_conclusion; }
    // @Override
    enterRule(listener) {
        if (listener.enterConclusion) {
            listener.enterConclusion(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConclusion) {
            listener.exitConclusion(this);
        }
    }
}
exports.ConclusionContext = ConclusionContext;
class FeaturedContext extends ParserRuleContext_1.ParserRuleContext {
    BitFeatured() { return this.getToken(bitmarkParser.BitFeatured, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_featured; }
    // @Override
    enterRule(listener) {
        if (listener.enterFeatured) {
            listener.enterFeatured(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFeatured) {
            listener.exitFeatured(this);
        }
    }
}
exports.FeaturedContext = FeaturedContext;
class Vendor_amcharts_5_chartContext extends ParserRuleContext_1.ParserRuleContext {
    BitVendorAmcharts5Chart() { return this.getToken(bitmarkParser.BitVendorAmcharts5Chart, 0); }
    format2() {
        return this.getRuleContext(0, Format2Context);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_vendor_amcharts_5_chart; }
    // @Override
    enterRule(listener) {
        if (listener.enterVendor_amcharts_5_chart) {
            listener.enterVendor_amcharts_5_chart(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVendor_amcharts_5_chart) {
            listener.exitVendor_amcharts_5_chart(this);
        }
    }
}
exports.Vendor_amcharts_5_chartContext = Vendor_amcharts_5_chartContext;
class Newspaper_articleContext extends ParserRuleContext_1.ParserRuleContext {
    BitNewspaperArticle() { return this.getToken(bitmarkParser.BitNewspaperArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_newspaper_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterNewspaper_article) {
            listener.enterNewspaper_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNewspaper_article) {
            listener.exitNewspaper_article(this);
        }
    }
}
exports.Newspaper_articleContext = Newspaper_articleContext;
class Blog_articleContext extends ParserRuleContext_1.ParserRuleContext {
    BitBlogArticle() { return this.getToken(bitmarkParser.BitBlogArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_blog_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterBlog_article) {
            listener.enterBlog_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBlog_article) {
            listener.exitBlog_article(this);
        }
    }
}
exports.Blog_articleContext = Blog_articleContext;
class Book_articleContext extends ParserRuleContext_1.ParserRuleContext {
    BitBookArticle() { return this.getToken(bitmarkParser.BitBookArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_book_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterBook_article) {
            listener.enterBook_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBook_article) {
            listener.exitBook_article(this);
        }
    }
}
exports.Book_articleContext = Book_articleContext;
class Notebook_articleContext extends ParserRuleContext_1.ParserRuleContext {
    BitNotebookArticle() { return this.getToken(bitmarkParser.BitNotebookArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_notebook_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterNotebook_article) {
            listener.enterNotebook_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNotebook_article) {
            listener.exitNotebook_article(this);
        }
    }
}
exports.Notebook_articleContext = Notebook_articleContext;
class Workbook_articleContext extends ParserRuleContext_1.ParserRuleContext {
    BitWorkbookArticle() { return this.getToken(bitmarkParser.BitWorkbookArticle, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_workbook_article; }
    // @Override
    enterRule(listener) {
        if (listener.enterWorkbook_article) {
            listener.enterWorkbook_article(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWorkbook_article) {
            listener.exitWorkbook_article(this);
        }
    }
}
exports.Workbook_articleContext = Workbook_articleContext;
class MessageContext extends ParserRuleContext_1.ParserRuleContext {
    BitMessage() { return this.getToken(bitmarkParser.BitMessage, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_message; }
    // @Override
    enterRule(listener) {
        if (listener.enterMessage) {
            listener.enterMessage(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMessage) {
            listener.exitMessage(this);
        }
    }
}
exports.MessageContext = MessageContext;
class Bot_interviewContext extends ParserRuleContext_1.ParserRuleContext {
    BitBotint() { return this.getToken(bitmarkParser.BitBotint, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    bot_choice(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bot_choiceContext);
        }
        else {
            return this.getRuleContext(i, Bot_choiceContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    sspl(i) {
        if (i === undefined) {
            return this.getRuleContexts(SsplContext);
        }
        else {
            return this.getRuleContext(i, SsplContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_interview; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_interview) {
            listener.enterBot_interview(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_interview) {
            listener.exitBot_interview(this);
        }
    }
}
exports.Bot_interviewContext = Bot_interviewContext;
class Bot_choiceContext extends ParserRuleContext_1.ParserRuleContext {
    words(i) {
        if (i === undefined) {
            return this.getRuleContexts(WordsContext);
        }
        else {
            return this.getRuleContext(i, WordsContext);
        }
    }
    instruction(i) {
        if (i === undefined) {
            return this.getRuleContexts(InstructionContext);
        }
        else {
            return this.getRuleContext(i, InstructionContext);
        }
    }
    audiobit(i) {
        if (i === undefined) {
            return this.getRuleContexts(AudiobitContext);
        }
        else {
            return this.getRuleContext(i, AudiobitContext);
        }
    }
    gap(i) {
        if (i === undefined) {
            return this.getRuleContexts(GapContext);
        }
        else {
            return this.getRuleContext(i, GapContext);
        }
    }
    choice_plus(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_plusContext);
        }
        else {
            return this.getRuleContext(i, Choice_plusContext);
        }
    }
    choice_minus(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_minusContext);
        }
        else {
            return this.getRuleContext(i, Choice_minusContext);
        }
    }
    choice_star(i) {
        if (i === undefined) {
            return this.getRuleContexts(Choice_starContext);
        }
        else {
            return this.getRuleContext(i, Choice_starContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bot_choice; }
    // @Override
    enterRule(listener) {
        if (listener.enterBot_choice) {
            listener.enterBot_choice(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBot_choice) {
            listener.exitBot_choice(this);
        }
    }
}
exports.Bot_choiceContext = Bot_choiceContext;
class RatingContext extends ParserRuleContext_1.ParserRuleContext {
    BitRating() { return this.getToken(bitmarkParser.BitRating, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_rating; }
    // @Override
    enterRule(listener) {
        if (listener.enterRating) {
            listener.enterRating(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRating) {
            listener.exitRating(this);
        }
    }
}
exports.RatingContext = RatingContext;
class Bullet_itemContext extends ParserRuleContext_1.ParserRuleContext {
    OPBUL() { return this.getToken(bitmarkParser.OPBUL, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    atpoint() {
        return this.tryGetRuleContext(0, AtpointContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bullet_item; }
    // @Override
    enterRule(listener) {
        if (listener.enterBullet_item) {
            listener.enterBullet_item(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBullet_item) {
            listener.exitBullet_item(this);
        }
    }
}
exports.Bullet_itemContext = Bullet_itemContext;
class SurveyContext extends ParserRuleContext_1.ParserRuleContext {
    BitSurvey() { return this.getToken(bitmarkParser.BitSurvey, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey) {
            listener.enterSurvey(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey) {
            listener.exitSurvey(this);
        }
    }
}
exports.SurveyContext = SurveyContext;
class Survey_1Context extends ParserRuleContext_1.ParserRuleContext {
    BitSurvey1() { return this.getToken(bitmarkParser.BitSurvey1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_1; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_1) {
            listener.enterSurvey_1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_1) {
            listener.exitSurvey_1(this);
        }
    }
}
exports.Survey_1Context = Survey_1Context;
class Survey_anonymousContext extends ParserRuleContext_1.ParserRuleContext {
    BitSurveyanon() { return this.getToken(bitmarkParser.BitSurveyanon, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_anonymous; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_anonymous) {
            listener.enterSurvey_anonymous(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_anonymous) {
            listener.exitSurvey_anonymous(this);
        }
    }
}
exports.Survey_anonymousContext = Survey_anonymousContext;
class Survey_anonymous_1Context extends ParserRuleContext_1.ParserRuleContext {
    BitSurveyanon1() { return this.getToken(bitmarkParser.BitSurveyanon1, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_survey_anonymous_1; }
    // @Override
    enterRule(listener) {
        if (listener.enterSurvey_anonymous_1) {
            listener.enterSurvey_anonymous_1(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSurvey_anonymous_1) {
            listener.exitSurvey_anonymous_1(this);
        }
    }
}
exports.Survey_anonymous_1Context = Survey_anonymous_1Context;
class Self_assessmentContext extends ParserRuleContext_1.ParserRuleContext {
    BitSelfassess() { return this.getToken(bitmarkParser.BitSelfassess, 0); }
    format() {
        return this.getRuleContext(0, FormatContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    HSPL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL);
        }
        else {
            return this.getToken(bitmarkParser.HSPL, i);
        }
    }
    HSPL2(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.HSPL2);
        }
        else {
            return this.getToken(bitmarkParser.HSPL2, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    bitElem(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitElemContext);
        }
        else {
            return this.getRuleContext(i, BitElemContext);
        }
    }
    self_assess_s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(Self_assess_s_and_wContext);
        }
        else {
            return this.getRuleContext(i, Self_assess_s_and_wContext);
        }
    }
    resource(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    }
    bullet_item(i) {
        if (i === undefined) {
            return this.getRuleContexts(Bullet_itemContext);
        }
        else {
            return this.getRuleContext(i, Bullet_itemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_self_assessment; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelf_assessment) {
            listener.enterSelf_assessment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelf_assessment) {
            listener.exitSelf_assessment(this);
        }
    }
}
exports.Self_assessmentContext = Self_assessmentContext;
class Self_assess_s_and_wContext extends ParserRuleContext_1.ParserRuleContext {
    OPBUL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.OPBUL);
        }
        else {
            return this.getToken(bitmarkParser.OPBUL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_self_assess_s_and_w; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelf_assess_s_and_w) {
            listener.enterSelf_assess_s_and_w(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelf_assess_s_and_w) {
            listener.exitSelf_assess_s_and_w(this);
        }
    }
}
exports.Self_assess_s_and_wContext = Self_assess_s_and_wContext;
class AtpointContext extends ParserRuleContext_1.ParserRuleContext {
    AtPoints() { return this.getToken(bitmarkParser.AtPoints, 0); }
    NUMERIC() { return this.getToken(bitmarkParser.NUMERIC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atpoint; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtpoint) {
            listener.enterAtpoint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtpoint) {
            listener.exitAtpoint(this);
        }
    }
}
exports.AtpointContext = AtpointContext;
class FormatContext extends ParserRuleContext_1.ParserRuleContext {
    resource_format(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_formatContext);
        }
        else {
            return this.getRuleContext(i, Resource_formatContext);
        }
    }
    ColonText(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.ColonText);
        }
        else {
            return this.getToken(bitmarkParser.ColonText, i);
        }
    }
    ColonJson(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.ColonJson);
        }
        else {
            return this.getToken(bitmarkParser.ColonJson, i);
        }
    }
    resource_format_extra(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_format_extraContext);
        }
        else {
            return this.getRuleContext(i, Resource_format_extraContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormat) {
            listener.enterFormat(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormat) {
            listener.exitFormat(this);
        }
    }
}
exports.FormatContext = FormatContext;
class Resource_formatContext extends ParserRuleContext_1.ParserRuleContext {
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    Prosemirror() { return this.tryGetToken(bitmarkParser.Prosemirror, 0); }
    Placeholder() { return this.tryGetToken(bitmarkParser.Placeholder, 0); }
    ColonJson() { return this.tryGetToken(bitmarkParser.ColonJson, 0); }
    AmpArticle() { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
    AmpDocument() { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
    AmpWebsite() { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
    AmpStillImageFilm() { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
    AmpAudioLink() { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
    AmpImageLink() { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
    AmpVideoLink() { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
    AmpArticleLink() { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
    AmpDocumentLink() { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
    AmpAppLink() { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
    AmpWebsiteLink() { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
    AmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
    AmpVideoEmbed() { return this.tryGetToken(bitmarkParser.AmpVideoEmbed, 0); }
    AmpAudioEmbed() { return this.tryGetToken(bitmarkParser.AmpAudioEmbed, 0); }
    AmpDocumentEmbed() { return this.tryGetToken(bitmarkParser.AmpDocumentEmbed, 0); }
    AmpStillImageFilmEmbed() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmEmbed, 0); }
    AmpDocumentDownload() { return this.tryGetToken(bitmarkParser.AmpDocumentDownload, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_format) {
            listener.enterResource_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_format) {
            listener.exitResource_format(this);
        }
    }
}
exports.Resource_formatContext = Resource_formatContext;
class Resource_format_extraContext extends ParserRuleContext_1.ParserRuleContext {
    image_format() {
        return this.tryGetRuleContext(0, Image_formatContext);
    }
    audio_format() {
        return this.tryGetRuleContext(0, Audio_formatContext);
    }
    video_format() {
        return this.tryGetRuleContext(0, Video_formatContext);
    }
    article_format() {
        return this.tryGetRuleContext(0, Article_formatContext);
    }
    document_format() {
        return this.tryGetRuleContext(0, Document_formatContext);
    }
    app_format() {
        return this.tryGetRuleContext(0, App_formatContext);
    }
    website_format() {
        return this.tryGetRuleContext(0, Website_formatContext);
    }
    stillimagefilm_format() {
        return this.tryGetRuleContext(0, Stillimagefilm_formatContext);
    }
    AmpPdf() { return this.tryGetToken(bitmarkParser.AmpPdf, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_format_extra; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_format_extra) {
            listener.enterResource_format_extra(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_format_extra) {
            listener.exitResource_format_extra(this);
        }
    }
}
exports.Resource_format_extraContext = Resource_format_extraContext;
class Format2Context extends ParserRuleContext_1.ParserRuleContext {
    BitmarkMinus() { return this.tryGetToken(bitmarkParser.BitmarkMinus, 0); }
    BitmarkPlus() { return this.tryGetToken(bitmarkParser.BitmarkPlus, 0); }
    ColonText() { return this.tryGetToken(bitmarkParser.ColonText, 0); }
    ColonJson() { return this.tryGetToken(bitmarkParser.ColonJson, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_format2; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormat2) {
            listener.enterFormat2(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormat2) {
            listener.exitFormat2(this);
        }
    }
}
exports.Format2Context = Format2Context;
class Image_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpImage() { return this.tryGetToken(bitmarkParser.AmpImage, 0); }
    Image_type() { return this.tryGetToken(bitmarkParser.Image_type, 0); }
    DotArticleAtt() { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
    AmpImageLink() { return this.tryGetToken(bitmarkParser.AmpImageLink, 0); }
    AmpImageZoom() { return this.tryGetToken(bitmarkParser.AmpImageZoom, 0); }
    AmpImageWAudio() { return this.tryGetToken(bitmarkParser.AmpImageWAudio, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_format) {
            listener.enterImage_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_format) {
            listener.exitImage_format(this);
        }
    }
}
exports.Image_formatContext = Image_formatContext;
class Video_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpVideo() { return this.tryGetToken(bitmarkParser.AmpVideo, 0); }
    AmpVideoLink() { return this.tryGetToken(bitmarkParser.AmpVideoLink, 0); }
    AmpVideoEmbed() { return this.tryGetToken(bitmarkParser.AmpVideoEmbed, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Video_type() { return this.tryGetToken(bitmarkParser.Video_type, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_format) {
            listener.enterVideo_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_format) {
            listener.exitVideo_format(this);
        }
    }
}
exports.Video_formatContext = Video_formatContext;
class Article_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpArticle() { return this.tryGetToken(bitmarkParser.AmpArticle, 0); }
    AmpArticleLink() { return this.tryGetToken(bitmarkParser.AmpArticleLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_article_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticle_format) {
            listener.enterArticle_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticle_format) {
            listener.exitArticle_format(this);
        }
    }
}
exports.Article_formatContext = Article_formatContext;
class Document_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpDocument() { return this.tryGetToken(bitmarkParser.AmpDocument, 0); }
    AmpDocumentLink() { return this.tryGetToken(bitmarkParser.AmpDocumentLink, 0); }
    AmpDocumentDownload() { return this.tryGetToken(bitmarkParser.AmpDocumentDownload, 0); }
    AmpDocumentEmbed() { return this.tryGetToken(bitmarkParser.AmpDocumentEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_document_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterDocument_format) {
            listener.enterDocument_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDocument_format) {
            listener.exitDocument_format(this);
        }
    }
}
exports.Document_formatContext = Document_formatContext;
class App_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpApp() { return this.tryGetToken(bitmarkParser.AmpApp, 0); }
    AmpAppLink() { return this.tryGetToken(bitmarkParser.AmpAppLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_app_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterApp_format) {
            listener.enterApp_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApp_format) {
            listener.exitApp_format(this);
        }
    }
}
exports.App_formatContext = App_formatContext;
class Website_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpWebsite() { return this.tryGetToken(bitmarkParser.AmpWebsite, 0); }
    AmpWebsiteLink() { return this.tryGetToken(bitmarkParser.AmpWebsiteLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_website_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterWebsite_format) {
            listener.enterWebsite_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWebsite_format) {
            listener.exitWebsite_format(this);
        }
    }
}
exports.Website_formatContext = Website_formatContext;
class Stillimagefilm_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpStillImageFilm() { return this.tryGetToken(bitmarkParser.AmpStillImageFilm, 0); }
    AmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmLink, 0); }
    AmpStillImageFilmEmbed() { return this.tryGetToken(bitmarkParser.AmpStillImageFilmEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimagefilm_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimagefilm_format) {
            listener.enterStillimagefilm_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimagefilm_format) {
            listener.exitStillimagefilm_format(this);
        }
    }
}
exports.Stillimagefilm_formatContext = Stillimagefilm_formatContext;
class Op_article_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpArticleLink() { return this.tryGetToken(bitmarkParser.OpAmpArticleLink, 0); }
    OpAmpArticle() { return this.tryGetToken(bitmarkParser.OpAmpArticle, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_article_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_article_format) {
            listener.enterOp_article_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_article_format) {
            listener.exitOp_article_format(this);
        }
    }
}
exports.Op_article_formatContext = Op_article_formatContext;
class Op_document_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpDocumentLink() { return this.tryGetToken(bitmarkParser.OpAmpDocumentLink, 0); }
    OpAmpDocument() { return this.tryGetToken(bitmarkParser.OpAmpDocument, 0); }
    OpAmpDocumentDownload() { return this.tryGetToken(bitmarkParser.OpAmpDocumentDownload, 0); }
    OpAmpDocumentEmbed() { return this.tryGetToken(bitmarkParser.OpAmpDocumentEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_document_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_document_format) {
            listener.enterOp_document_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_document_format) {
            listener.exitOp_document_format(this);
        }
    }
}
exports.Op_document_formatContext = Op_document_formatContext;
class Op_app_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpApp() { return this.tryGetToken(bitmarkParser.OpAmpApp, 0); }
    OpAmpAppLink() { return this.tryGetToken(bitmarkParser.OpAmpAppLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_app_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_app_format) {
            listener.enterOp_app_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_app_format) {
            listener.exitOp_app_format(this);
        }
    }
}
exports.Op_app_formatContext = Op_app_formatContext;
class Op_website_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpWebsite() { return this.tryGetToken(bitmarkParser.OpAmpWebsite, 0); }
    OpAmpWebsiteLink() { return this.tryGetToken(bitmarkParser.OpAmpWebsiteLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_website_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_website_format) {
            listener.enterOp_website_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_website_format) {
            listener.exitOp_website_format(this);
        }
    }
}
exports.Op_website_formatContext = Op_website_formatContext;
class Op_video_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpVideo() { return this.tryGetToken(bitmarkParser.OpAmpVideo, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Video_type() { return this.tryGetToken(bitmarkParser.Video_type, 0); }
    OpAmpVideoLink() { return this.tryGetToken(bitmarkParser.OpAmpVideoLink, 0); }
    OpAmpVideoEmbed() { return this.tryGetToken(bitmarkParser.OpAmpVideoEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_video_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_video_format) {
            listener.enterOp_video_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_video_format) {
            listener.exitOp_video_format(this);
        }
    }
}
exports.Op_video_formatContext = Op_video_formatContext;
class Op_stillimagefilm_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpStillImageFilm() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilm, 0); }
    OpAmpStillImageFilmLink() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmLink, 0); }
    OpAmpStillImageFilmEmbed() { return this.tryGetToken(bitmarkParser.OpAmpStillImageFilmEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_stillimagefilm_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_stillimagefilm_format) {
            listener.enterOp_stillimagefilm_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_stillimagefilm_format) {
            listener.exitOp_stillimagefilm_format(this);
        }
    }
}
exports.Op_stillimagefilm_formatContext = Op_stillimagefilm_formatContext;
class ArticlebitContext extends ParserRuleContext_1.ParserRuleContext {
    op_article_format() {
        return this.tryGetRuleContext(0, Op_article_formatContext);
    }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    ArticleText() { return this.tryGetToken(bitmarkParser.ArticleText, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_articlebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterArticlebit) {
            listener.enterArticlebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArticlebit) {
            listener.exitArticlebit(this);
        }
    }
}
exports.ArticlebitContext = ArticlebitContext;
class DocumentbitContext extends ParserRuleContext_1.ParserRuleContext {
    op_document_format() {
        return this.getRuleContext(0, Op_document_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_documentbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterDocumentbit) {
            listener.enterDocumentbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDocumentbit) {
            listener.exitDocumentbit(this);
        }
    }
}
exports.DocumentbitContext = DocumentbitContext;
class WebsitebitContext extends ParserRuleContext_1.ParserRuleContext {
    op_website_format() {
        return this.getRuleContext(0, Op_website_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_websitebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterWebsitebit) {
            listener.enterWebsitebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWebsitebit) {
            listener.exitWebsitebit(this);
        }
    }
}
exports.WebsitebitContext = WebsitebitContext;
class AppbitContext extends ParserRuleContext_1.ParserRuleContext {
    op_app_format() {
        return this.getRuleContext(0, Op_app_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    telephone() {
        return this.tryGetRuleContext(0, TelephoneContext);
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_appbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterAppbit) {
            listener.enterAppbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAppbit) {
            listener.exitAppbit(this);
        }
    }
}
exports.AppbitContext = AppbitContext;
class StillimagefilmbitContext extends ParserRuleContext_1.ParserRuleContext {
    stillimg_one() {
        return this.getRuleContext(0, Stillimg_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimagefilmbit; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimagefilmbit) {
            listener.enterStillimagefilmbit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimagefilmbit) {
            listener.exitStillimagefilmbit(this);
        }
    }
}
exports.StillimagefilmbitContext = StillimagefilmbitContext;
class Stillimg_oneContext extends ParserRuleContext_1.ParserRuleContext {
    op_stillimagefilm_format() {
        return this.getRuleContext(0, Op_stillimagefilm_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_stillimg_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterStillimg_one) {
            listener.enterStillimg_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStillimg_one) {
            listener.exitStillimg_one(this);
        }
    }
}
exports.Stillimg_oneContext = Stillimg_oneContext;
class VideobitContext extends ParserRuleContext_1.ParserRuleContext {
    video_one() {
        return this.getRuleContext(0, Video_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_videobit; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideobit) {
            listener.enterVideobit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideobit) {
            listener.exitVideobit(this);
        }
    }
}
exports.VideobitContext = VideobitContext;
class Video_oneContext extends ParserRuleContext_1.ParserRuleContext {
    op_video_format() {
        return this.getRuleContext(0, Op_video_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_video_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterVideo_one) {
            listener.enterVideo_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVideo_one) {
            listener.exitVideo_one(this);
        }
    }
}
exports.Video_oneContext = Video_oneContext;
class ImagebitContext extends ParserRuleContext_1.ParserRuleContext {
    image_one() {
        return this.getRuleContext(0, Image_oneContext);
    }
    image_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Image_chainedContext);
        }
        else {
            return this.getRuleContext(i, Image_chainedContext);
        }
    }
    NL() { return this.tryGetToken(bitmarkParser.NL, 0); }
    ShowInIndex() { return this.tryGetToken(bitmarkParser.ShowInIndex, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_imagebit; }
    // @Override
    enterRule(listener) {
        if (listener.enterImagebit) {
            listener.enterImagebit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImagebit) {
            listener.exitImagebit(this);
        }
    }
}
exports.ImagebitContext = ImagebitContext;
class Image_oneContext extends ParserRuleContext_1.ParserRuleContext {
    op_image_format() {
        return this.getRuleContext(0, Op_image_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_one) {
            listener.enterImage_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_one) {
            listener.exitImage_one(this);
        }
    }
}
exports.Image_oneContext = Image_oneContext;
class Op_image_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpImage() { return this.tryGetToken(bitmarkParser.OpAmpImage, 0); }
    Image_type() { return this.tryGetToken(bitmarkParser.Image_type, 0); }
    DotArticleAtt() { return this.tryGetToken(bitmarkParser.DotArticleAtt, 0); }
    OpAmpImageLink() { return this.tryGetToken(bitmarkParser.OpAmpImageLink, 0); }
    OpAmpImageZoom() { return this.tryGetToken(bitmarkParser.OpAmpImageZoom, 0); }
    OpAmpImageWAudio() { return this.tryGetToken(bitmarkParser.OpAmpImageWAudio, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_image_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_image_format) {
            listener.enterOp_image_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_image_format) {
            listener.exitOp_image_format(this);
        }
    }
}
exports.Op_image_formatContext = Op_image_formatContext;
class Image_chainedContext extends ParserRuleContext_1.ParserRuleContext {
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_chained) {
            listener.enterImage_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_chained) {
            listener.exitImage_chained(this);
        }
    }
}
exports.Image_chainedContext = Image_chainedContext;
class Image_chained4matchContext extends ParserRuleContext_1.ParserRuleContext {
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    url() {
        return this.tryGetRuleContext(0, UrlContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_image_chained4match; }
    // @Override
    enterRule(listener) {
        if (listener.enterImage_chained4match) {
            listener.enterImage_chained4match(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImage_chained4match) {
            listener.exitImage_chained4match(this);
        }
    }
}
exports.Image_chained4matchContext = Image_chained4matchContext;
class AudiobitContext extends ParserRuleContext_1.ParserRuleContext {
    audio_one() {
        return this.getRuleContext(0, Audio_oneContext);
    }
    resource_chained(i) {
        if (i === undefined) {
            return this.getRuleContexts(Resource_chainedContext);
        }
        else {
            return this.getRuleContext(i, Resource_chainedContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audiobit; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudiobit) {
            listener.enterAudiobit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudiobit) {
            listener.exitAudiobit(this);
        }
    }
}
exports.AudiobitContext = AudiobitContext;
class Audio_oneContext extends ParserRuleContext_1.ParserRuleContext {
    op_audio_format() {
        return this.getRuleContext(0, Op_audio_formatContext);
    }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    url() {
        return this.getRuleContext(0, UrlContext);
    }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audio_one; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudio_one) {
            listener.enterAudio_one(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudio_one) {
            listener.exitAudio_one(this);
        }
    }
}
exports.Audio_oneContext = Audio_oneContext;
class Audio_formatContext extends ParserRuleContext_1.ParserRuleContext {
    AmpAudio() { return this.tryGetToken(bitmarkParser.AmpAudio, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Audio_type() { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
    AmpAudioLink() { return this.tryGetToken(bitmarkParser.AmpAudioLink, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_audio_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterAudio_format) {
            listener.enterAudio_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAudio_format) {
            listener.exitAudio_format(this);
        }
    }
}
exports.Audio_formatContext = Audio_formatContext;
class Op_audio_formatContext extends ParserRuleContext_1.ParserRuleContext {
    OpAmpAudio() { return this.tryGetToken(bitmarkParser.OpAmpAudio, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    Audio_type() { return this.tryGetToken(bitmarkParser.Audio_type, 0); }
    OpAmpAudioLink() { return this.tryGetToken(bitmarkParser.OpAmpAudioLink, 0); }
    OpAmpAudioEmbed() { return this.tryGetToken(bitmarkParser.OpAmpAudioEmbed, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_op_audio_format; }
    // @Override
    enterRule(listener) {
        if (listener.enterOp_audio_format) {
            listener.enterOp_audio_format(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOp_audio_format) {
            listener.exitOp_audio_format(this);
        }
    }
}
exports.Op_audio_formatContext = Op_audio_formatContext;
class Resource_chainedContext extends ParserRuleContext_1.ParserRuleContext {
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    OPA() { return this.tryGetToken(bitmarkParser.OPA, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    AtSrc() { return this.tryGetToken(bitmarkParser.AtSrc, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    AtWidth() { return this.tryGetToken(bitmarkParser.AtWidth, 0); }
    AtHeight() { return this.tryGetToken(bitmarkParser.AtHeight, 0); }
    OPATALT() { return this.tryGetToken(bitmarkParser.OPATALT, 0); }
    OpAtCaption() { return this.tryGetToken(bitmarkParser.OpAtCaption, 0); }
    OpAtSearch() { return this.tryGetToken(bitmarkParser.OpAtSearch, 0); }
    OpAtLicense() { return this.tryGetToken(bitmarkParser.OpAtLicense, 0); }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_resource_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterResource_chained) {
            listener.enterResource_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResource_chained) {
            listener.exitResource_chained(this);
        }
    }
}
exports.Resource_chainedContext = Resource_chainedContext;
class TelephoneContext extends ParserRuleContext_1.ParserRuleContext {
    TEL() { return this.getToken(bitmarkParser.TEL, 0); }
    PLUS() { return this.getToken(bitmarkParser.PLUS, 0); }
    NUMERIC() { return this.getToken(bitmarkParser.NUMERIC, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_telephone; }
    // @Override
    enterRule(listener) {
        if (listener.enterTelephone) {
            listener.enterTelephone(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTelephone) {
            listener.exitTelephone(this);
        }
    }
}
exports.TelephoneContext = TelephoneContext;
class UrlContext extends ParserRuleContext_1.ParserRuleContext {
    URL() { return this.getToken(bitmarkParser.URL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_url; }
    // @Override
    enterRule(listener) {
        if (listener.enterUrl) {
            listener.enterUrl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUrl) {
            listener.exitUrl(this);
        }
    }
}
exports.UrlContext = UrlContext;
class ItemContext extends ParserRuleContext_1.ParserRuleContext {
    OPC() { return this.getToken(bitmarkParser.OPC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    lead() {
        return this.tryGetRuleContext(0, LeadContext);
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    words(i) {
        if (i === undefined) {
            return this.getRuleContexts(WordsContext);
        }
        else {
            return this.getRuleContext(i, WordsContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_item; }
    // @Override
    enterRule(listener) {
        if (listener.enterItem) {
            listener.enterItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitItem) {
            listener.exitItem(this);
        }
    }
}
exports.ItemContext = ItemContext;
class LeadContext extends ParserRuleContext_1.ParserRuleContext {
    OPC() { return this.getToken(bitmarkParser.OPC, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    words(i) {
        if (i === undefined) {
            return this.getRuleContexts(WordsContext);
        }
        else {
            return this.getRuleContext(i, WordsContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lead; }
    // @Override
    enterRule(listener) {
        if (listener.enterLead) {
            listener.enterLead(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLead) {
            listener.exitLead(this);
        }
    }
}
exports.LeadContext = LeadContext;
class AnglerefContext extends ParserRuleContext_1.ParserRuleContext {
    OPRANGLES() { return this.tryGetToken(bitmarkParser.OPRANGLES, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    OPRANGLEL() { return this.tryGetToken(bitmarkParser.OPRANGLEL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_angleref; }
    // @Override
    enterRule(listener) {
        if (listener.enterAngleref) {
            listener.enterAngleref(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAngleref) {
            listener.exitAngleref(this);
        }
    }
}
exports.AnglerefContext = AnglerefContext;
class ExampleContext extends ParserRuleContext_1.ParserRuleContext {
    AtExamplecl() { return this.tryGetToken(bitmarkParser.AtExamplecl, 0); }
    AtExampleWithStr() { return this.tryGetToken(bitmarkParser.AtExampleWithStr, 0); }
    AtExamplecol() { return this.tryGetToken(bitmarkParser.AtExamplecol, 0); }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    SENTENCE() { return this.tryGetToken(bitmarkParser.SENTENCE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_example; }
    // @Override
    enterRule(listener) {
        if (listener.enterExample) {
            listener.enterExample(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExample) {
            listener.exitExample(this);
        }
    }
}
exports.ExampleContext = ExampleContext;
class Bracketed_textContext extends ParserRuleContext_1.ParserRuleContext {
    BracEnclose() { return this.getToken(bitmarkParser.BracEnclose, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bracketed_text; }
    // @Override
    enterRule(listener) {
        if (listener.enterBracketed_text) {
            listener.enterBracketed_text(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBracketed_text) {
            listener.exitBracketed_text(this);
        }
    }
}
exports.Bracketed_textContext = Bracketed_textContext;
class ReferenceContext extends ParserRuleContext_1.ParserRuleContext {
    AtReference() { return this.getToken(bitmarkParser.AtReference, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    URL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.URL);
        }
        else {
            return this.getToken(bitmarkParser.URL, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_reference; }
    // @Override
    enterRule(listener) {
        if (listener.enterReference) {
            listener.enterReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReference) {
            listener.exitReference(this);
        }
    }
}
exports.ReferenceContext = ReferenceContext;
class ProgressContext extends ParserRuleContext_1.ParserRuleContext {
    AtProgress() { return this.getToken(bitmarkParser.AtProgress, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_progress; }
    // @Override
    enterRule(listener) {
        if (listener.enterProgress) {
            listener.enterProgress(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProgress) {
            listener.exitProgress(this);
        }
    }
}
exports.ProgressContext = ProgressContext;
class DatepropContext extends ParserRuleContext_1.ParserRuleContext {
    AtDate() { return this.getToken(bitmarkParser.AtDate, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    dateprop_chained() {
        return this.tryGetRuleContext(0, Dateprop_chainedContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dateprop; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateprop) {
            listener.enterDateprop(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateprop) {
            listener.exitDateprop(this);
        }
    }
}
exports.DatepropContext = DatepropContext;
class Dateprop_chainedContext extends ParserRuleContext_1.ParserRuleContext {
    AtDate() { return this.getToken(bitmarkParser.AtDate, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dateprop_chained; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateprop_chained) {
            listener.enterDateprop_chained(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateprop_chained) {
            listener.exitDateprop_chained(this);
        }
    }
}
exports.Dateprop_chainedContext = Dateprop_chainedContext;
class InstructionContext extends ParserRuleContext_1.ParserRuleContext {
    OPB() { return this.getToken(bitmarkParser.OPB, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_instruction; }
    // @Override
    enterRule(listener) {
        if (listener.enterInstruction) {
            listener.enterInstruction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInstruction) {
            listener.exitInstruction(this);
        }
    }
}
exports.InstructionContext = InstructionContext;
class HintContext extends ParserRuleContext_1.ParserRuleContext {
    OPQ() { return this.getToken(bitmarkParser.OPQ, 0); }
    CL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.CL);
        }
        else {
            return this.getToken(bitmarkParser.CL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_hint; }
    // @Override
    enterRule(listener) {
        if (listener.enterHint) {
            listener.enterHint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHint) {
            listener.exitHint(this);
        }
    }
}
exports.HintContext = HintContext;
class TitleContext extends ParserRuleContext_1.ParserRuleContext {
    OPHASH() { return this.getToken(bitmarkParser.OPHASH, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_title; }
    // @Override
    enterRule(listener) {
        if (listener.enterTitle) {
            listener.enterTitle(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTitle) {
            listener.exitTitle(this);
        }
    }
}
exports.TitleContext = TitleContext;
class Bool_labelContext extends ParserRuleContext_1.ParserRuleContext {
    AtLabeltrue() { return this.tryGetToken(bitmarkParser.AtLabeltrue, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    AtLabelfalse() { return this.tryGetToken(bitmarkParser.AtLabelfalse, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_bool_label; }
    // @Override
    enterRule(listener) {
        if (listener.enterBool_label) {
            listener.enterBool_label(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBool_label) {
            listener.exitBool_label(this);
        }
    }
}
exports.Bool_labelContext = Bool_labelContext;
class Progress_pointsContext extends ParserRuleContext_1.ParserRuleContext {
    AtProgressPoints() { return this.getToken(bitmarkParser.AtProgressPoints, 0); }
    COLON() { return this.getToken(bitmarkParser.COLON, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_progress_points; }
    // @Override
    enterRule(listener) {
        if (listener.enterProgress_points) {
            listener.enterProgress_points(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProgress_points) {
            listener.exitProgress_points(this);
        }
    }
}
exports.Progress_pointsContext = Progress_pointsContext;
class IstrackedContext extends ParserRuleContext_1.ParserRuleContext {
    OpAtIsTracked() { return this.getToken(bitmarkParser.OpAtIsTracked, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_istracked; }
    // @Override
    enterRule(listener) {
        if (listener.enterIstracked) {
            listener.enterIstracked(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIstracked) {
            listener.exitIstracked(this);
        }
    }
}
exports.IstrackedContext = IstrackedContext;
class IsinfoonlyContext extends ParserRuleContext_1.ParserRuleContext {
    OpAtIsInfoOnly() { return this.getToken(bitmarkParser.OpAtIsInfoOnly, 0); }
    s_and_w() {
        return this.getRuleContext(0, S_and_wContext);
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_isinfoonly; }
    // @Override
    enterRule(listener) {
        if (listener.enterIsinfoonly) {
            listener.enterIsinfoonly(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIsinfoonly) {
            listener.exitIsinfoonly(this);
        }
    }
}
exports.IsinfoonlyContext = IsinfoonlyContext;
class AtdefContext extends ParserRuleContext_1.ParserRuleContext {
    atdef_(i) {
        if (i === undefined) {
            return this.getRuleContexts(Atdef_Context);
        }
        else {
            return this.getRuleContext(i, Atdef_Context);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atdef; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtdef) {
            listener.enterAtdef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtdef) {
            listener.exitAtdef(this);
        }
    }
}
exports.AtdefContext = AtdefContext;
class Atdef_Context extends ParserRuleContext_1.ParserRuleContext {
    OPA() { return this.tryGetToken(bitmarkParser.OPA, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    DBLCOLON() { return this.tryGetToken(bitmarkParser.DBLCOLON, 0); }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    OpAtCopyright() { return this.tryGetToken(bitmarkParser.OpAtCopyright, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_atdef_; }
    // @Override
    enterRule(listener) {
        if (listener.enterAtdef_) {
            listener.enterAtdef_(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAtdef_) {
            listener.exitAtdef_(this);
        }
    }
}
exports.Atdef_Context = Atdef_Context;
class DollaransContext extends ParserRuleContext_1.ParserRuleContext {
    OPDOLL() { return this.getToken(bitmarkParser.OPDOLL, 0); }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    COLON(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.COLON);
        }
        else {
            return this.getToken(bitmarkParser.COLON, i);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    EOF() { return this.tryGetToken(bitmarkParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dollarans; }
    // @Override
    enterRule(listener) {
        if (listener.enterDollarans) {
            listener.enterDollarans(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDollarans) {
            listener.exitDollarans(this);
        }
    }
}
exports.DollaransContext = DollaransContext;
class AnchorContext extends ParserRuleContext_1.ParserRuleContext {
    OPDANGLE() { return this.getToken(bitmarkParser.OPDANGLE, 0); }
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_anchor; }
    // @Override
    enterRule(listener) {
        if (listener.enterAnchor) {
            listener.enterAnchor(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAnchor) {
            listener.exitAnchor(this);
        }
    }
}
exports.AnchorContext = AnchorContext;
class LinesContext extends ParserRuleContext_1.ParserRuleContext {
    s_and_w(i) {
        if (i === undefined) {
            return this.getRuleContexts(S_and_wContext);
        }
        else {
            return this.getRuleContext(i, S_and_wContext);
        }
    }
    NL(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NL);
        }
        else {
            return this.getToken(bitmarkParser.NL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_lines; }
    // @Override
    enterRule(listener) {
        if (listener.enterLines) {
            listener.enterLines(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLines) {
            listener.exitLines(this);
        }
    }
}
exports.LinesContext = LinesContext;
class S_and_wContext extends ParserRuleContext_1.ParserRuleContext {
    STRING() { return this.tryGetToken(bitmarkParser.STRING, 0); }
    NUMERIC() { return this.tryGetToken(bitmarkParser.NUMERIC, 0); }
    S(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.S);
        }
        else {
            return this.getToken(bitmarkParser.S, i);
        }
    }
    words() {
        return this.tryGetRuleContext(0, WordsContext);
    }
    OPS() { return this.tryGetToken(bitmarkParser.OPS, 0); }
    s_and_w() {
        return this.tryGetRuleContext(0, S_and_wContext);
    }
    CL() { return this.tryGetToken(bitmarkParser.CL, 0); }
    COLON() { return this.tryGetToken(bitmarkParser.COLON, 0); }
    AMP() { return this.tryGetToken(bitmarkParser.AMP, 0); }
    DBLEQ() { return this.tryGetToken(bitmarkParser.DBLEQ, 0); }
    URL() { return this.tryGetToken(bitmarkParser.URL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_s_and_w; }
    // @Override
    enterRule(listener) {
        if (listener.enterS_and_w) {
            listener.enterS_and_w(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitS_and_w) {
            listener.exitS_and_w(this);
        }
    }
}
exports.S_and_wContext = S_and_wContext;
class DclinesContext extends ParserRuleContext_1.ParserRuleContext {
    DCANY() { return this.getToken(bitmarkParser.DCANY, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_dclines; }
    // @Override
    enterRule(listener) {
        if (listener.enterDclines) {
            listener.enterDclines(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDclines) {
            listener.exitDclines(this);
        }
    }
}
exports.DclinesContext = DclinesContext;
class ClnspContext extends ParserRuleContext_1.ParserRuleContext {
    CL() { return this.getToken(bitmarkParser.CL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_clnsp; }
    // @Override
    enterRule(listener) {
        if (listener.enterClnsp) {
            listener.enterClnsp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitClnsp) {
            listener.exitClnsp(this);
        }
    }
}
exports.ClnspContext = ClnspContext;
class SsplContext extends ParserRuleContext_1.ParserRuleContext {
    SSPL() { return this.tryGetToken(bitmarkParser.SSPL, 0); }
    SSPL2() { return this.tryGetToken(bitmarkParser.SSPL2, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sspl; }
    // @Override
    enterRule(listener) {
        if (listener.enterSspl) {
            listener.enterSspl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSspl) {
            listener.exitSspl(this);
        }
    }
}
exports.SsplContext = SsplContext;
class WordsContext extends ParserRuleContext_1.ParserRuleContext {
    sentence(i) {
        if (i === undefined) {
            return this.getRuleContexts(SentenceContext);
        }
        else {
            return this.getRuleContext(i, SentenceContext);
        }
    }
    NOTBITMARK(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.NOTBITMARK);
        }
        else {
            return this.getToken(bitmarkParser.NOTBITMARK, i);
        }
    }
    BARSTRING(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BARSTRING);
        }
        else {
            return this.getToken(bitmarkParser.BARSTRING, i);
        }
    }
    ELIPSIS(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.ELIPSIS);
        }
        else {
            return this.getToken(bitmarkParser.ELIPSIS, i);
        }
    }
    AMP(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AMP);
        }
        else {
            return this.getToken(bitmarkParser.AMP, i);
        }
    }
    Greater(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.Greater);
        }
        else {
            return this.getToken(bitmarkParser.Greater, i);
        }
    }
    Less(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.Less);
        }
        else {
            return this.getToken(bitmarkParser.Less, i);
        }
    }
    RightArrow(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.RightArrow);
        }
        else {
            return this.getToken(bitmarkParser.RightArrow, i);
        }
    }
    RightAngle(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.RightAngle);
        }
        else {
            return this.getToken(bitmarkParser.RightAngle, i);
        }
    }
    AmpArticle(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpArticle);
        }
        else {
            return this.getToken(bitmarkParser.AmpArticle, i);
        }
    }
    AmpArticleLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpArticleLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpArticleLink, i);
        }
    }
    AmpDocument(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpDocument);
        }
        else {
            return this.getToken(bitmarkParser.AmpDocument, i);
        }
    }
    AmpDocumentLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpDocumentLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpDocumentLink, i);
        }
    }
    AmpWebsite(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpWebsite);
        }
        else {
            return this.getToken(bitmarkParser.AmpWebsite, i);
        }
    }
    AmpWebsiteLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpWebsiteLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpWebsiteLink, i);
        }
    }
    AmpImage(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpImage);
        }
        else {
            return this.getToken(bitmarkParser.AmpImage, i);
        }
    }
    AmpImageLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpImageLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpImageLink, i);
        }
    }
    AmpAudio(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAudio);
        }
        else {
            return this.getToken(bitmarkParser.AmpAudio, i);
        }
    }
    AmpAudioLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAudioLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpAudioLink, i);
        }
    }
    AmpVideo(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpVideo);
        }
        else {
            return this.getToken(bitmarkParser.AmpVideo, i);
        }
    }
    AmpVideoLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpVideoLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpVideoLink, i);
        }
    }
    AmpApp(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpApp);
        }
        else {
            return this.getToken(bitmarkParser.AmpApp, i);
        }
    }
    AmpAppLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpAppLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpAppLink, i);
        }
    }
    AmpStillImageFilm(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpStillImageFilm);
        }
        else {
            return this.getToken(bitmarkParser.AmpStillImageFilm, i);
        }
    }
    AmpStillImageFilmLink(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.AmpStillImageFilmLink);
        }
        else {
            return this.getToken(bitmarkParser.AmpStillImageFilmLink, i);
        }
    }
    BitmarkMinus(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BitmarkMinus);
        }
        else {
            return this.getToken(bitmarkParser.BitmarkMinus, i);
        }
    }
    BitmarkPlus(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.BitmarkPlus);
        }
        else {
            return this.getToken(bitmarkParser.BitmarkPlus, i);
        }
    }
    QUOTE_INDEX(i) {
        if (i === undefined) {
            return this.getTokens(bitmarkParser.QUOTE_INDEX);
        }
        else {
            return this.getToken(bitmarkParser.QUOTE_INDEX, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_words; }
    // @Override
    enterRule(listener) {
        if (listener.enterWords) {
            listener.enterWords(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWords) {
            listener.exitWords(this);
        }
    }
}
exports.WordsContext = WordsContext;
class SpContext extends ParserRuleContext_1.ParserRuleContext {
    S() { return this.getToken(bitmarkParser.S, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sp; }
    // @Override
    enterRule(listener) {
        if (listener.enterSp) {
            listener.enterSp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSp) {
            listener.exitSp(this);
        }
    }
}
exports.SpContext = SpContext;
class SentenceContext extends ParserRuleContext_1.ParserRuleContext {
    SENTENCE() { return this.getToken(bitmarkParser.SENTENCE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return bitmarkParser.RULE_sentence; }
    // @Override
    enterRule(listener) {
        if (listener.enterSentence) {
            listener.enterSentence(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSentence) {
            listener.exitSentence(this);
        }
    }
}
exports.SentenceContext = SentenceContext;
